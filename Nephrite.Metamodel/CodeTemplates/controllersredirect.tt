<#@ template language="C#v3.5" debug="True" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.Linq.dll" #>
<#@ assembly name="System.Configuration.dll" #>
<#@ assembly name="Nephrite.Web.dll" #>
<#@ assembly name="Nephrite.Metamodel.dll" #>
<#@ import namespace="Nephrite.Metamodel" #>
<#@ import namespace="Nephrite.Metamodel.Model" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System" #>
<#@ output extension="cs" #>
<#var objectTypes = AppMM.DataContext.MM_ObjectTypes.Where(o => !o.IsTemplate && o.IsSeparateTable).ToList().Where(o => o.PrimaryKey.Length == 1); #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Nephrite.Web;
using <#= AppWeb.AppNamespace #>.Model;

namespace <#= AppWeb.AppNamespace #>.Controllers
{
<#	foreach (var cls in objectTypes.Where(o => o.MM_Methods.Any()))
	{#>
    partial class <#= cls.SysName #>Controller
    {
<# 		foreach(var m in cls.MM_Methods.Where(o => o.FormViewID.HasValue || !String.IsNullOrEmpty(o.Code)).ToList())
		{ 
			string parameters = "";
			if (!String.IsNullOrEmpty(m.Parameters))
				parameters = m.Parameters;
			else if (m.FormViewID.HasValue && (m.MM_FormView.IsSingleObjectView || m.MM_FormView.BaseClass == "Nephrite.Web.ViewControl<HST_{0}>"))
				parameters = m.SysName == "CreateNew" ? "string returnurl" : cls.PrimaryKey.Single().ClrType + " id, string returnurl";
			string[] paramsArray = parameters.Split(',').Select(o => o.Trim()).ToArray();
			string callparams = String.Join(", ", paramsArray.Where(o => o.Contains(" ")).Select(o => o.Substring(o.IndexOf(' ')).Trim()).ToArray());
			#>
		public static void RedirectTo<#= m.SysName #>(<#= parameters #>)
		{
			BaseController.RedirectTo<<#= cls.SysName #>Controller>(c => c.<#= m.SysName #>(<#= callparams #>));
		}
		public static string RenderUrl<#= m.SysName #>(<#= parameters #>)
		{
			return HtmlHelperBase.Instance.ActionUrl<<#= cls.SysName #>Controller>(c => c.<#= m.SysName #>(<#= callparams #>));
		}
<#			if (paramsArray.Length > 1 && paramsArray[0] == cls.PrimaryKey.Single().ClrType + " id" && paramsArray[1] == "string returnurl")
			{  #>
		public static string RenderLink<#= m.SysName #>(<#=cls.PrimaryKey.Single().ClrType#> id, string linkTitle)
		{
			var c = new <#= cls.SysName #>Controller();
			var obj = c.Get(id);
			if (obj == null)
				return linkTitle;
			if (!<#= cls.SysName #>Controller.Predicate<#= m.SysName #>(obj))
				return linkTitle;
			return HtmlHelperBase.Instance.ActionLink<<#= cls.SysName #>Controller>(c1 => c1.<#= m.SysName #>(id, HttpUtility.UrlEncode(Url.Current)), linkTitle);
		}
<# 			} #>
<# 		} #>
	}
	public static class <#= cls.SysName #>ControllerExtensionMethods
	{
<# 		foreach(var m in cls.MM_Methods.Where(o => o.FormViewID.HasValue || !String.IsNullOrEmpty(o.Code)).ToList())
		{ 
			string parameters = "";
			if (!String.IsNullOrEmpty(m.Parameters))
				parameters = m.Parameters;
			else if (m.FormViewID.HasValue && m.MM_FormView.IsSingleObjectView)
				parameters = m.SysName == "CreateNew" ? "string returnurl" : "int id, string returnurl";
			string[] paramsArray = parameters.Split(',').Select(o => o.Trim()).ToArray();
			string callparams = String.Join(", ", paramsArray.Where(o => o.Contains(" ")).Select(o => o.Substring(o.IndexOf(' ')).Trim()).ToArray());
			#>
<#			if (paramsArray.Length > 1 && (paramsArray[0] == "int id" || paramsArray[0] == "Guid id") && paramsArray[1] == "string returnurl")
			{  #>
		public static string RenderLink<#= m.SysName #>(this <#= cls.SysName #> obj)
		{
			if (obj == null) return "";
			if (obj.Title == null) return "";
			if (!<#= cls.SysName #>Controller.Predicate<#= m.SysName #>(obj))
				return System.Web.HttpUtility.HtmlEncode(obj.Title);
			return HtmlHelperBase.Instance.ActionLink<<#= cls.SysName #>Controller>(c1 => c1.<#= m.SysName #>(obj.<#= cls.PrimaryKey.Single().ColumnName #>, HttpUtility.UrlEncode(Url.Current)), System.Web.HttpUtility.HtmlEncode(obj.Title).Replace("&quot;", "\"").Replace("&#171;", "«").Replace("&#187;", "»"));
		}
		public static string RenderLink<#= m.SysName #>(this <#= cls.SysName #> obj, string linkTitle)
		{
			if (obj == null) return "";
			if (!<#= cls.SysName #>Controller.Predicate<#= m.SysName #>(obj))
				return System.Web.HttpUtility.HtmlEncode(linkTitle);
			return HtmlHelperBase.Instance.ActionLink<<#= cls.SysName #>Controller>(c1 => c1.<#= m.SysName #>(obj.<#= cls.PrimaryKey.Single().ColumnName #>, HttpUtility.UrlEncode(Url.Current)), System.Web.HttpUtility.HtmlEncode(linkTitle).Replace("&quot;", "\"").Replace("&#171;", "«").Replace("&#187;", "»"));
		}
<# 			}
		} #>
	}
<# 	} #>
}