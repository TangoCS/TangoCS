<#@ template language="C#v3.5" debug="True" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.Linq.dll" #>
<#@ assembly name="System.Configuration.dll" #>
<#@ assembly name="Nephrite.Web.dll" #>
<#@ assembly name="Nephrite.Metamodel.dll" #>
<#@ import namespace="Nephrite.Metamodel" #>
<#@ import namespace="Nephrite.Metamodel.Model" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System" #>
<#@ output extension="cs" #>
<# 	var objectTypes = AppMM.DataContext.MM_ObjectTypes.Where(o => !o.IsTemplate && o.IsSeparateTable).ToList(); #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Nephrite.Web;
using <#= AppMM.DBName() #>.Model;

namespace <#= AppMM.DBName() #>.Controllers
{
<#	foreach (var cls in objectTypes.Where(o => o.MM_Methods.Any()))
	{
		string orderby = "";
		if (!String.IsNullOrEmpty(cls.DefaultOrderBy))
		{
			if (cls.DefaultOrderBy.StartsWith("OrderBy"))
				orderby = "." + cls.DefaultOrderBy;
			else
				orderby = ".OrderBy(" + cls.DefaultOrderBy + ")";
		}
		
		bool ishstcls = cls.HistoryTypeCode == VersioningType.IdentifiersRetain || cls.HistoryTypeCode == VersioningType.IdentifiersMiss;
		string clsname = (ishstcls ? "HST_" : "") + cls.SysName;#>
    partial class <#= cls.SysName #>Controller
    {
		partial void FilterTable(ref IQueryable<<#= clsname #>> table);
		
<#		if (cls.PrimaryKey != null && cls.PrimaryKey.Length == 1) { #>
		Dictionary<<#=cls.PrimaryKey.Single().ClrType#>, <#= clsname #>> loaded = new Dictionary<<#=cls.PrimaryKey.Single().ClrType#>, <#= clsname #>>();
        public <#= clsname #> Get(<#=cls.PrimaryKey.Single().ClrType#> id)
        {
			if (loaded.ContainsKey(id))
				return loaded[id];
            IQueryable<<#= clsname #>> table = App.DataContext.<#= clsname #>;
			FilterTable(ref table);
            var obj = table.SingleOrDefault(o => o.<#= cls.PrimaryKey.Single().ColumnName #> == id<#= ishstcls ? " && o.IsCurrentVersion && o.ClassVersionID == CHST_" + cls.SysName + ".CurrentVersionID" : "" #>);
			loaded.Add(id, obj);
			return obj;
        }

		public <#= clsname #> GetSingle(<#=cls.PrimaryKey.Single().ClrType#> id)
        {
			var obj = App.DataContext.<#= clsname #>.SingleOrDefault(o => o.<#= cls.PrimaryKey.Single().ColumnName #> == id);
			return obj;
        }

<#		if (cls.HistoryTypeCode != "N"){#>
		public HST_<#= clsname.Replace("HST_", "") #> GetVersion(<#=cls.PrimaryKey.Single().ClrType#> id)
        {
			var obj = App.DataContext.HST_<#= clsname.Replace("HST_", "") #>.SingleOrDefault(o => o.<#= cls.PrimaryKey.Single().ColumnName.EndsWith("GUID") ? cls.PrimaryKey.Single().ColumnName.Replace("GUID", "VersionGUID") : cls.PrimaryKey.Single().ColumnName.Replace("ID", "VersionID") #> == id);
			return obj;
        }
<# } #>
<# } #>

<#  	if (cls.IsMultiLingual)
		{#>
		<#	if (ishstcls)
			{#>
        partial void FilterTable(ref IQueryable<V_HST_<#= cls.SysName #>> table);	
		
		public IQueryable<V_HST_<#= cls.SysName #>> GetList()
        {
            IQueryable<V_HST_<#= cls.SysName #>> table = App.DataContext.V_HST_<#= cls.SysName #>;
			FilterTable(ref table);
            string lang = Nephrite.Metamodel.AppMM.CurrentLanguage.LanguageCode.ToLower();
            if (String.IsNullOrEmpty(lang))
                lang = Nephrite.Metamodel.AppMM.DefaultLanguage;
            return table.Where(o => o.LanguageCode == lang &&
                CHST_<#= cls.SysName #>.CurrentVersionID == o.ClassVersionID && o.IsCurrentVersion)<#= orderby #>;
        }
<#  		}
            else
            {#>
        partial void FilterTable(ref IQueryable<V_<#= cls.SysName #>> table);	
		
		public IQueryable<V_<#= cls.SysName #>> GetList()
        {
            IQueryable<V_<#= cls.SysName #>> table = App.DataContext.V_<#= cls.SysName #>;
			FilterTable(ref table);
            string lang = Nephrite.Metamodel.AppMM.CurrentLanguage.LanguageCode.ToLower();
            if (String.IsNullOrEmpty(lang))
                lang = Nephrite.Metamodel.AppMM.DefaultLanguage;
            return table.Where(o => o.LanguageCode == lang)<#= orderby #>;
        }
<#  		}
        }
        else
        {
			if (ishstcls)
			{#>
        public IQueryable<HST_<#= cls.SysName #>> GetList()
        {
            IQueryable<HST_<#= cls.SysName #>> table = App.DataContext.HST_<#= cls.SysName #>;
			FilterTable(ref table);
            return table.Where(o => CHST_<#= cls.SysName #>.CurrentVersionID == o.ClassVersionID && o.IsCurrentVersion)<#= orderby #>;
        }
<#  		}
            else
            {#>
        public IQueryable<<#= cls.SysName #>> GetList()
        {
            IQueryable<<#= cls.SysName #>> table = App.DataContext.<#= cls.SysName #>;
			FilterTable(ref table);
            return table<#= orderby #>;
        }
<#  		}
        }#>
	}
	
<# 	} #>
}