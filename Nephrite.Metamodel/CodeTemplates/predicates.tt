<#@ template language="C#v3.5" debug="True" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.Linq.dll" #>
<#@ assembly name="System.Xml.Linq.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#string path = AppDomain.CurrentDomain.GetData("ModelPath") == null ? Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "_temp\\model.xml") : (string)AppDomain.CurrentDomain.GetData("ModelPath");#>
//<#=path#>
<#if (File.Exists(path)) {#>
<#var model = XElement.Parse(File.ReadAllText(path));#>
using System;
using System.Linq;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Nephrite.Metamodel;
using Nephrite.Web.SPM;
using Solution.Model;

namespace Solution
{
	public class SPM2Predicates : ISPM2Predicates
	{
		Dictionary<Guid, Func<PredicateEvaluationContext, bool>> predicates;

		public void Init(Dictionary<string, Func<PredicateEvaluationContext, bool>> list)
		{
			predicates = new Dictionary<Guid, Func<PredicateEvaluationContext, bool>>();
<#foreach(var p in model.Descendants("Predicate")){#>
			predicates.Add(new Guid("<#=p.Attribute("ID").Value#>"), F<#=p.Attribute("ID").Value.Replace("-", "_")#>);
<#}#>
			foreach(var sa in App.DataContext.SPM_Action.Where(o => o.PredicateGUID.HasValue).ToList())
				list.Add(sa.ItemGUID.ToString() + "-" + sa.ActionTypeID.ToString(), predicates[sa.PredicateGUID.Value]);
		}
<#foreach(var p in model.Descendants("Predicate")){#>
		static Func<PredicateEvaluationContext, bool> F<#=p.Attribute("ID").Value.Replace("-", "_")#> = _o =>
		{
			string Message = "<#=p.Attribute("Message").Value.Replace("\"", "\"\"")#>";
			try
			{
			var obj = (<#=p.Parent.Parent.Attribute("Name").Value#>)_o.PredicateContext;
<#if (p.Attribute("CustomCode").Value == "1"){#>
			<#=p.Attribute("Body").Value#>
<#} else {#>
			return <#=String.Format(p.Attribute("Body").Value, "obj")#>;
<#}#>
			}
			finally
			{
				_o.Message = Message;
			}
		};
<#}#>
	}
}

<#}#>