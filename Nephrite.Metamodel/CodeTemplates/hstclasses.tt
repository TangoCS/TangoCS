<#@ template language="C#v3.5" debug="True" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.Linq.dll" #>
<#@ assembly name="System.Configuration.dll" #>
<#@ assembly name="Nephrite.Web.dll" #>
<#@ assembly name="Nephrite.Metamodel.dll" #>
<#@ import namespace="Nephrite.Metamodel" #>
<#@ import namespace="Nephrite.Metamodel.Model" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System" #>
<#@ output extension="cs" #>
<# 	var objectTypes = AppMM.DataContext.MM_ObjectTypes.Where(o => !o.IsTemplate && o.IsSeparateTable).ToList().Where(o => o.PrimaryKey.Length == 1); #>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Linq;
using System.Runtime.Serialization;
using System.Web;
using Nephrite.Web;
using Nephrite.Web.SPM;
using Nephrite.Metamodel;

namespace <#= AppMM.DBName() #>.Model
{
<#  foreach (var cls in objectTypes)
    { 
		if (cls.HistoryTypeCode != VersioningType.None)
        {#>
	partial class HST_<#= cls.SysName #> : Nephrite.Metamodel.IMMObjectVersion<#= cls.HistoryTypeCode == VersioningType.IdentifiersMiss || cls.HistoryTypeCode == VersioningType.IdentifiersRetain ? "2" : "" #>, I<#= cls.SysName #>
    {
		public event EventHandler OnSaveChanges;
		public void RaiseSaveChanges()
		{
			if (OnSaveChanges != null)
				OnSaveChanges(this, EventArgs.Empty);
		}
		
        public bool IsLogicalDelete { get { return false; } }
        public int ObjectID
        {   
            get { return <#= cls.PrimaryKey.Single().TypeCode == ObjectPropertyType.Guid ? "0" : cls.PrimaryKey.Single().ColumnName #>; }
        }
        public Guid ObjectGUID
        {   
            get { return <#= cls.PrimaryKey.Single().TypeCode == ObjectPropertyType.Guid ? cls.PrimaryKey.Single().ColumnName : "Guid.Empty" #>; }
        }
<#		foreach (var prop in cls.MM_ObjectProperties.Where(o => o.UpperBound == 1 && o.TypeCode == ObjectPropertyType.Code && o.CodifierID.HasValue))
		{#>
        public string <#= prop.SysName #>CodifierTitle
        {
            get 
            {
                return <#= AppMM.DBName() #>.<#= prop.MM_Codifier.SysName #>.Title(<#= prop.SysName #>);
            }
        }
<#		}
		#>

<# 	foreach (var prop in cls.MM_ObjectProperties.Where(o => !String.IsNullOrEmpty(o.Expression) && o.KindCode == "C"))
    { #>
        public <#= prop.ClrType #> <#= prop.SysName #>
        {
            get
            {
                <#= prop.Expression #>
            }
        }
<# 	} #>
<# 	foreach (var prop in cls.MM_ObjectProperties.Where(o => o.UpperBound == -1 && o.TypeCode == ObjectPropertyType.Object && (!o.RefObjectPropertyID.HasValue || o.RefObjectProperty.UpperBound == -1)))
	{#>
        HST_<#= cls.SysName #><#= prop.SysName #>Collection _<#= prop.SysName #>;
        public ICollection<<#= prop.RefObjectType.SysName #>> <#= prop.SysName #>
        {
            get 
            {
                if (_<#= prop.SysName #> == null)
                    _<#= prop.SysName #> = new HST_<#= cls.SysName #><#= prop.SysName #>Collection(this);
                return _<#= prop.SysName #>;
            }
        }
<#		}
		if (cls.IsMultiLingual)
    	{
		#>
        HST_<#= cls.SysName #>Data _data = null;

        HST_<#= cls.SysName #>Data _Data
        {
            get
            {
                if (_data == null)
                {
                    string lang = AppMM.CurrentLanguage.LanguageCode.ToLower();
                    _data = HST_<#= cls.SysName #>Data.SingleOrDefault(o => o.LanguageCode == lang);
                    if (_data == null)
                    {
                        var _defaultData = HST_<#= cls.SysName #>Data.FirstOrDefault();

                        if (_defaultData == null)
                        {
                            _data = new HST_<#= cls.SysName #>Data
                            {
                                LanguageCode = lang,
                                HST_<#= cls.SysName #> = this
                            };
                        }
                        else
                        {
                            _data = new HST_<#= cls.SysName #>Data
                            {
                                LanguageCode = lang,
                                HST_<#= cls.SysName #> = this
<#			foreach (var p in cls.MM_ObjectProperties.Where(o => o.IsMultilingual))
            {#>
								,<#= p.SysName #> = _defaultData.<#= p.SysName #>
<# 			} #>
                            };
                        }
                    }
                }
                return _data;
            }
        }
<# 		foreach (var p in cls.MM_ObjectProperties.Where(o => o.IsMultilingual))
    	{ #>
        public string <#= p.SysName #>
        {
            get { return _Data.<#= p.SysName #>; }
            set { _Data.<#= p.SysName #> = value; }
        }
<# 		}
	}#>

<#  if (cls.ParentProperty != null)
	{#>
		public Nephrite.Web.IModelObject ParentObject
        {
            get { return Parent; }
            set { }
        }
        
        public void SetParent(int parentID)
        {
			
        }
        public void SetParent(Guid parentGUID)
        {
			
        }
        public System.Linq.Expressions.Expression<Func<T, bool>> FilterByParentID<T>(int id) where T : Nephrite.Web.IModelObject
        {
			<#	if (cls.ParentProperty.RefObjectType.PrimaryKey.Single().TypeCode != ObjectPropertyType.Guid) { #>
            if (id > 0)
                return o => (o as <#= cls.SysName #>).ParentID == id;
            else
                return <#= cls.ParentProperty.LowerBound == 1 ? "o => false" : ("o => !(o as " + cls.SysName + @").ParentID.HasValue") #>;
			<#	} else { #>
			return null;
			<#	} #>
        }
        public System.Linq.Expressions.Expression<Func<T, bool>> FilterByParentGUID<T>(Guid guid) where T : Nephrite.Web.IModelObject
        {
            <#	if (cls.ParentProperty.RefObjectType.PrimaryKey.Single().TypeCode == ObjectPropertyType.Guid) { #>
            if (guid != System.Guid.Empty)
                return o => (o as <#= cls.SysName #>).ParentGUID == guid;
            else
                return <#= cls.ParentProperty.LowerBound == 1 ? "o => false" : ("o => !(o as " + cls.SysName + @").ParentGUID.HasValue") #>;
			<#	} else { #>
			return null;
			<#	} #>
        }
<# 	}#>

<#  string pkname = cls.PrimaryKey.Single().ColumnName;
	if (pkname.EndsWith("GUID"))
		pkname = pkname.Substring(0, pkname.Length - 4);
	else if (pkname.EndsWith("ID"))
		pkname = pkname.Substring(0, pkname.Length - 2);
	pkname += "Version" + (cls.PrimaryKey.Single().TypeCode == ObjectPropertyType.Guid ? "GUID" : "ID");#>

		public Nephrite.Meta.MetaClass MetaClass
        {
            get { return Meta.<#=cls.SysName#>; }
        }

        public string GetClassName()
        {
            return MetaClass.Caption;
        }
<#	if (cls.PrimaryKey.Single().TypeCode == ObjectPropertyType.Guid) { #>
		public int VersionID
        {   
            get { return 0; }
        }
        public Guid VersionGUID
        {
            get { return <#= pkname #>; }
        }
<#	} else { #>
        public int VersionID
        {
            get { return <#= pkname #>; }
        }
		public Guid VersionGUID
        {   
            get { return Guid.Empty; }
        }
<#	} #>

        public Nephrite.Metamodel.IMMObject Object
        {
            get { return <#= cls.SysName #>; }
        }
<#	if (cls.AllProperties.Count(o => o.SysName == "IsDeleted") == 0) {#>
		public bool IsDeleted
		{
			get { return false; }
		}
<#  }#>
<#	if (cls.AllProperties.Count(o => o.SysName == "LastModifiedDate") == 0) {#>
		public DateTime LastModifiedDate
		{
			get { return DateTime.MinValue; }
			set { }
		}
<#  }#>
<#	if (cls.AllProperties.Count(o => o.ColumnName == "LastModifiedUserID") == 0) {#>
		public int LastModifiedUserID
		{
			get { return 0; }
			set { }
		}
<#  }#>
    }
<# 		}
	}#>
}