<#@ template language="C#v3.5" debug="True" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.Linq.dll" #>
<#@ assembly name="System.Configuration.dll" #>
<#@ assembly name="Nephrite.Web.dll" #>
<#@ assembly name="Nephrite.Metamodel.dll" #>
<#@ import namespace="Nephrite.Metamodel" #>
<#@ import namespace="Nephrite.Metamodel.Model" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension="cs" #>
<# 	var objectTypes = AppMM.DataContext.MM_ObjectTypes.Where(o => !o.IsTemplate && o.IsSeparateTable).ToList().Where(o => o.PrimaryKey.Length == 1); #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Nephrite.Metamodel;

namespace <#= AppMM.DBName() #>.Model
{
<# 	foreach (var cls in objectTypes.Where(o => o.HistoryTypeCode == HistoryType.IdentifiersMiss ||
        o.HistoryTypeCode == HistoryType.IdentifiersRetain))
    { #>            
    partial class CHST_<#= cls.SysName #> : IClassVersion
    {
        public bool IsDraft
        {
            get
            {
                return Versions.IndexOf(this) == 0 && !IsCurrent;
            }
        }

        public bool IsOld
        {
            get
            {
                var current = Versions.SingleOrDefault(o => o.IsCurrent);
                if (current == null)
                    return false;
                return Versions.IndexOf(this) > Versions.IndexOf(current);
            }
        }

        public string Title
        {
            get { return "Версия " + ClassVersionNumber.ToString() + (IsCurrent ? " (т)" : ""); }
        }
            
        public static List<CHST_<#= cls.SysName #>> Versions
        {
            get
            {
                if (System.Web.HttpContext.Current.Items["CHST_<#= cls.SysName #>"] == null)
                {
                    System.Web.HttpContext.Current.Items["CHST_<#= cls.SysName #>"] = App.DataContext.CHST_<#= cls.SysName #>.OrderByDescending(o => o.ClassVersionNumber).ToList();
                }
                return (List<CHST_<#= cls.SysName #>>)System.Web.HttpContext.Current.Items["CHST_<#= cls.SysName #>"];
            }
        }

        public static CHST_<#= cls.SysName #> CurrentVersion
        {
            get
            {
                int classVersionID = Nephrite.Web.Url.Current.GetInt("versionid", 0);
                if (classVersionID == 0)
                    return Versions.OrderByDescending(o => o.ClassVersionNumber).OrderByDescending(o => o.IsCurrent).FirstOrDefault();
                return Versions.SingleOrDefault(o => o.ClassVersionID == classVersionID);
            }
        }

        public static int CurrentVersionID
        {
            get
            {
                int classVersionID = Nephrite.Web.Url.Current.GetInt("versionid", 0);
                if (classVersionID == 0)
                    return Versions.OrderByDescending(o => o.ClassVersionNumber).OrderByDescending(o => o.IsCurrent).Select(o => o.ClassVersionID).FirstOrDefault();
                return classVersionID;
            }
        }
    }
<#	} #>
}