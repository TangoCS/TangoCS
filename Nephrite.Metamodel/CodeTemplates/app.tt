<#@ template language="C#v3.5" debug="True" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.Linq.dll" #>
<#@ assembly name="System.Configuration.dll" #>
<#@ assembly name="Nephrite.Web.dll" #>
<#@ assembly name="Nephrite.Metamodel.dll" #>
<#@ import namespace="Nephrite.Metamodel" #>
<#@ import namespace="Nephrite.Metamodel.Model" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension="cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Web;
using Nephrite.Metamodel;
using Nephrite.Web;
using Nephrite.Web.SPM;
using <#= AppMM.DBName() #>.Model;

namespace <#= AppMM.DBName() #>
{
    public static partial class App
    {
        [ThreadStatic]
		static <#= AppMM.DBName() #>.Model.modelDataContext context = null;

		public static <#= AppMM.DBName() #>.Model.modelDataContext DataContext
        {
            get
            {
                if (HttpContext.Current != null)
				{
					if (System.Web.HttpContext.Current.Items["<#= AppMM.DBName() #>DataContext"] == null)
					{
						var dc = new <#= AppMM.DBName() #>.Model.modelDataContext(Nephrite.Web.ConnectionManager.Connection);
						dc.CommandTimeout = 300;
						System.Web.HttpContext.Current.Items["<#= AppMM.DBName() #>DataContext"] = dc;
						dc.Log = new DataContextLogWriter();
					}
					return (<#= AppMM.DBName() #>.Model.modelDataContext)System.Web.HttpContext.Current.Items["<#= AppMM.DBName() #>DataContext"];
				}
				else
				{
					if (context == null)
					{
						context = new <#= AppMM.DBName() #>.Model.modelDataContext(Nephrite.Web.ConnectionManager.Connection);
						context.Log = new DataContextLogWriter();
						context.CommandTimeout = 300;
					}
					return context;
				}
            }
        }

		[ThreadStatic]
		static AppModel model = null;

		public static AppModel Model
		{
			get
			{
				if (HttpContext.Current != null)
				{
					if (System.Web.HttpContext.Current.Items["AppModel"] == null)
						System.Web.HttpContext.Current.Items["AppModel"] = new AppModel();
					return (AppModel)System.Web.HttpContext.Current.Items["AppModel"];
				}
				else
				{
					if (model == null)
						model = new AppModel();
					return model;
				}
			}
		}
    }

	public class AppModel
	{
<#		foreach (var cls in Base.DynamicMeta.Classes.Where(o => o.IsPersistent && o.Operations.Count() > 0))
		{
			var v = cls.S<SVersioning>();
			bool ishstcls = v != null && (v.VersioningType == VersioningType.IdentifiersRetain || v.VersioningType == VersioningType.IdentifiersMiss);
			var clsprefix = cls.IsMultiLingual ? (ishstcls ? "V_HST_" : "V_") : (ishstcls ? "HST_" :"");
		#>
		public IQueryable<<#= AppMM.DBName() #>.Model.<#=clsprefix + cls.Name#>> <#=cls.Name#> 
		{
			get { return (new <#= AppMM.DBName() #>.Controllers.<#=cls.Name#>Controller()).GetList(); }
		}
<#		}#>
	}

	[DynamicClass("SPM2Predicates.cs", typeof(SPM2Predicates))]
	public interface ISPM2Predicates
	{
		void Init(Dictionary<string, Func<PredicateEvaluationContext, bool>> list);
	}

	public class SPM2PredicateLoader : Nephrite.Web.SPM.IPredicateLoader
	{
		public void Load(Dictionary<string, Func<PredicateEvaluationContext, bool>> list)
		{
			var t = DynamicClassActivator.CreateInstance<ISPM2Predicates>();
			t.Init(list);
		}
	}


}