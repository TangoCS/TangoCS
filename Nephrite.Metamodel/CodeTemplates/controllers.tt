<#@ template language="C#v3.5" debug="True" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.Linq.dll" #>
<#@ assembly name="System.Configuration.dll" #>
<#@ assembly name="Nephrite.Web.dll" #>
<#@ assembly name="Nephrite.Metamodel.dll" #>
<#@ import namespace="Nephrite.Metamodel" #>
<#@ import namespace="Nephrite.Metamodel.Model" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System" #>
<#@ output extension="cs" #>
<# 	var objectTypes = AppMM.DataContext.MM_ObjectTypes.Where(o => !o.IsTemplate).ToList(); #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Nephrite.Web;
using <#= AppMM.DBName() #>.Model;

namespace <#= AppMM.DBName() #>.Controllers
{
<#	foreach (var cls in objectTypes.Where(o => o.MM_Methods.Any()))
	{
		bool ishstcls = cls.HistoryTypeCode == VersioningType.IdentifiersRetain || cls.HistoryTypeCode == VersioningType.IdentifiersMiss;
		string clsname = (ishstcls ? "HST_" : "") + cls.SysName;#>
    public partial class <#= cls.SysName #>Controller : Nephrite.Metamodel.Controllers.MMObjectController
    {
        public <#= cls.SysName #>Controller() : base("<#= cls.SysName #>")
        {
        }

<#	if (cls.MM_ObjectProperties.Any(o1 => o1.SysName == "Activity" && o1.RefObjectType != null && o1.RefObjectType.SysName == "WF_Activity")){#>
<#	if (cls.PrimaryKey.Single().TypeCode != ObjectPropertyType.Guid) {#>
		public static IQueryable<Nephrite.Metamodel.IMMObjectTransition> GetTransitions(int objectID)
		{
			return App.DataContext.<#=cls.SysName#>Transition.Where(o => o.ParentID == objectID).Cast<Nephrite.Metamodel.IMMObjectTransition>();
		}
<#	} else { #>
		public static IQueryable<Nephrite.Metamodel.IMMObjectTransition> GetTransitions(Guid objectGUID)
		{
			return App.DataContext.<#=cls.SysName#>Transition.Where(o => o.ParentGUID == objectGUID).Cast<Nephrite.Metamodel.IMMObjectTransition>();
		}
<#	} #>
<#}#>
<#	string queryGetOid = "", queryHasOid = "";
	if (cls.PrimaryKey != null && cls.PrimaryKey.Length == 1)
	{
		queryGetOid = cls.PrimaryKey.Single().TypeCode != ObjectPropertyType.Guid ? "Url.Current.GetInt(\"oid\", 0)" : "Url.Current.GetGuid(\"oid\")";
		queryHasOid = cls.PrimaryKey.Single().TypeCode != ObjectPropertyType.Guid ? "Url.Current.GetInt(\"oid\", 0) > 0" : "Url.Current.GetGuid(\"oid\") != System.Guid.Empty";
	}
#>
<#  foreach (var method in cls.MM_Methods.Where(o => o.SysName != "CreateNew" && o.SysName != "CreateFrom" ))
    {
		string predicateCheck = "";
		if (!String.IsNullOrEmpty(method.PredicateCode))
		{
            predicateCheck = String.Format(@"
		if ({2})
		{{
			var obj1 = Get({3});
			if (obj1 == null)
			{{
				RenderMessage(""Объект не существует или нет доступа"");
				return;
			}}
			if (!Predicate{0}(obj1))
			{{
				RenderMessage(""Недостаточно полномочий для выполнения операции"");
				return;
			}}
		}}
		else
		{{
			if (!Predicate{0}(new {1}()))
			{{
				RenderMessage(""Недостаточно полномочий для выполнения операции"");
				return;
			}}
		}}", method.SysName, cls.SysName, queryHasOid, queryGetOid);
        }#>
<# 		if(!method.FormViewID.HasValue && !String.IsNullOrEmpty(method.Code))
		{ #>
        public void <#= method.SysName #>(<#= method.Parameters ?? "" #>)
        {
            
            ViewPath = "<#= method.ViewPath ?? String.Empty #>";
            <#= method.Code #>
        }
<# 		} #>
<# 		if(method.FormViewID.HasValue)
		{ #>
<# 			if (method.MM_FormView.BC == "ViewControl" && String.IsNullOrEmpty(method.Code))
            { #>
		public void <#= method.SysName #>(<#= method.Parameters ?? "" #>)
        {
            <#= predicateCheck #>
            RenderMMView("<#= method.MM_FormView.SysName #>");
        }
<# 			} 
			if (method.MM_FormView.BC == "ViewControl<{0}>" && String.IsNullOrEmpty(method.Code))
            {#>
		public void <#= method.SysName #>(<#= String.IsNullOrEmpty(method.Parameters) ? cls.PrimaryKey.Single().ClrType + " id, string returnurl" : method.Parameters #>)
        {
            <#= predicateCheck #>
            var obj = Get(id);
            if (obj == null)
            {
                RenderMessage("Объект не существует");
                return;
            }
            RenderMMView("<#= method.MM_FormView.SysName #>", obj);
        }
<#			}
			if (method.MM_FormView.BC == "ViewControl<HST_{0}>" && String.IsNullOrEmpty(method.Code))
            {#>
		public void <#= method.SysName #>(<#= String.IsNullOrEmpty(method.Parameters) ? cls.PrimaryKey.Single().ClrType + " id, string returnurl" : method.Parameters #>)
        {
            var obj = <#=cls.HistoryTypeCode == VersioningType.IdentifiersRetain || cls.HistoryTypeCode == VersioningType.IdentifiersMiss ? "Get(id)" : "GetVersion(id)"#>;
            if (obj == null)
            {
                RenderMessage("Объект не существует");
                return;
            }
            RenderMMView("<#= method.MM_FormView.SysName #>", obj);
        }
<#			}
			if (!method.MM_FormView.IsSingleObjectView && String.IsNullOrEmpty(method.Code) && method.MM_FormView.BC != "ViewControl")
            {#>
		public void <#= method.SysName #>(<#= method.Parameters ?? "" #>)
        {
            <#= predicateCheck #>
            RenderMMView("<#= method.MM_FormView.SysName #>", GetList());
        }
<# 			}
			if (!method.MM_FormView.IsSingleObjectView && !String.IsNullOrEmpty(method.Code))
            {#>
		public void <#= method.SysName #>(<#= method.Parameters ?? "" #>)
        {
            
            <#= method.Code #>
        }
<# 			}
			if (method.MM_FormView.IsSingleObjectView && !String.IsNullOrEmpty(method.Code))
            {#>
		public void <#= method.SysName #>(<#= String.IsNullOrEmpty(method.Parameters) ? cls.PrimaryKey.Single().ClrType + " id, string returnurl" : method.Parameters #>)
		{
            
            <#= method.Code #>
        }
<# 			}
		}#>
<# 	} #>
<#  foreach (var method in cls.MM_Methods)
    {
		string pc = String.IsNullOrEmpty(method.PredicateCode) ? "return true;" : method.PredicateCode;
#>
        public static bool Predicate<#= method.SysName #>(<#= AppMM.DBName() #>.Model.<#= clsname #> obj)
        {
			if (!Nephrite.Web.SPM.SPM2.Enabled) return true;
            <#= pc #>
        }
<# 	if(ishstcls){ #>
        public static bool Predicate<#= method.SysName #>(<#= AppMM.DBName() #>.Model.<#= cls.SysName #> obj)
        {
			if (!Nephrite.Web.SPM.SPM2.Enabled) return true;
            <#= pc #>
        }
<# 	} #>
<# 	}
                string copyProps = "";
                foreach (var p in cls.MM_ObjectProperties.Where(o =>
                    (o.TypeCode != ObjectPropertyType.Object || !o.IsAggregate) &&
                    o.TypeCode != ObjectPropertyType.File &&
                    o.UpperBound == 1 &&
					o.KindCode != "C" &&
                    ((o.MM_FormField != null &&
                    o.MM_FormField.ShowInEdit &&
                    String.IsNullOrEmpty(o.MM_FormField.ValueFunction)) ||
                    o.MM_FormFieldGroups.Count > 0)))
                {
                    copyProps += String.Format(@"newobj.{0} = obj.{0};
            ", p.ColumnName);
                }

                var defcols = cls.MM_ObjectProperties.Where(o => o.MM_FormField != null).Select(o => o.MM_FormField).Where(f => !String.IsNullOrEmpty(f.DefaultValue));
                string defaults = "";
                foreach (MM_FormField p in defcols)
                {
                    var c = ControlCode.Create(p);
                    if (c != null)
                    {
                        defaults += c.SaveDefault("obj") + @"
            ";
                    }
                }
				if (cls.ParentProperty != null || (cls.BaseObjectTypeID.HasValue && cls.BaseObjectType.ParentProperty != null))
				{
					if (cls.ParentProperty.RefObjectType.PrimaryKey.Single().TypeCode == ObjectPropertyType.Guid)
						defaults += "if (Url.Current.GetGuid(\"parent\") != Guid.Empty) obj.ParentGUID = Url.Current.GetGuid(\"parent\");";
					else
						defaults += "if (Url.Current.GetInt(\"parent\", 0) > 0) obj.ParentID = Url.Current.GetInt(\"parent\", 0);";
				}
                MM_Method createMethod = cls.MM_Methods.SingleOrDefault(o => o.SysName == "CreateNew");
                string predicateCheckCreate = "";
                if (createMethod != null && !String.IsNullOrEmpty(createMethod.PredicateCode))
                {
                    predicateCheckCreate = String.Format(@"
            if ({0})
            {{
                if (!PredicateCreateNew(Get({1})))
                {{
                    RenderMessage(""Недостаточно полномочий для выполнения операции"");
                    return;
                }}
            }}
            else
            {{
                if (!PredicateCreateNew(new " + cls.SysName + @"()))
                {{
                    RenderMessage(""Недостаточно полномочий для выполнения операции"");
                    return;
                }}
            }}", queryHasOid, queryGetOid);
                }
                string lmu = cls.MM_ObjectProperties.Any(o => o.SysName == "LastModifiedUser" &&
                    o.RefObjectTypeID.HasValue) ? "obj.LastModifiedUserID = Nephrite.Web.SPM.Subject.Current.ID;" : "";
 
                var bHasEdit = cls.MM_FormViews.Any(o => o.SysName.ToLower() == "edit");
 	var methodCreateFrom = cls.MM_Methods.SingleOrDefault(o => o.SysName == "CreateFrom");
	var methodCreateFromParams = methodCreateFrom != null ? methodCreateFrom.Parameters : "";
	if (cls.PrimaryKey != null && cls.PrimaryKey.Length == 1 && string.IsNullOrEmpty(methodCreateFromParams))
		methodCreateFromParams = cls.PrimaryKey.Single().ClrType + " id, string returnurl";
		
	if (cls.PrimaryKey != null && cls.PrimaryKey.Length == 1 && cls.IsSeparateTable) {	
		#>
        public void CreateFrom(<#= methodCreateFromParams #>)
        {
            <#= predicateCheckCreate #>
<# 	if (methodCreateFrom != null && !string.IsNullOrEmpty(methodCreateFrom.Code)) { #>
<#= methodCreateFrom.Code #>
<# } else { #>
            var obj = Get(id);
            if (obj == null)
            {
                RenderMessage("Объект не существует");
                return;
            }
            <#= cls.SysName #> newobj = new <#= cls.SysName #>();
            App.DataContext.<#= cls.SysName #>.InsertOnSubmit(newobj);
            <#= copyProps #>
            <#= defaults.Replace("obj.", "newobj.") #>
            newobj.LastModifiedDate = DateTime.Now;
            <#= lmu.Replace("obj", "newobj") #>
<#  		if (ishstcls)
			{#>
            var hstobj = new HST_<#= cls.SysName #>();
            hstobj.<#= cls.SysName #> = newobj;
            hstobj.CHST_<#= cls.SysName #> = CHST_<#= cls.SysName #>.CurrentVersion;
            App.DataContext.HST_<#= cls.SysName #>.InsertOnSubmit(hstobj);
            <#= copyProps #>
            <#= defaults.Replace("obj.", "hstobj.") #>
            hstobj.LastModifiedDate = DateTime.Now;
            <#= lmu.Replace("obj", "hstobj") #>
            
            RenderMMView("edit", hstobj);
<# 			}
			else
			{#>
            RenderMMView("edit", newobj);
<# 			}#>
<# } #>
        }
<# } #>
<# 	var methodCreateNew = cls.MM_Methods.SingleOrDefault(o => o.SysName == "CreateNew");
	var methodCreateNewParams = methodCreateNew != null ? methodCreateNew.Parameters : "";
	bool generateInsert = methodCreateNew != null && methodCreateNew.MM_FormView != null && methodCreateNew.MM_FormView.BC == "ViewControl" ? false : true;
	if (string.IsNullOrEmpty(methodCreateNewParams))
		methodCreateNewParams = "string returnurl";#>
<#	if (cls.PrimaryKey != null && cls.PrimaryKey.Length == 1 && cls.IsSeparateTable) {#>
		public void CreateNew(<#= methodCreateNewParams #>)
        {
<# 	if (methodCreateNew != null && !string.IsNullOrEmpty(methodCreateNew.Code)) { #>
<#= methodCreateNew.Code #>
<# } else { #>
<#	if (generateInsert) {#>
            var obj = new <#= cls.SysName #>();
            App.DataContext.<#= cls.SysName #>.InsertOnSubmit(obj);
            <#= defaults #>
            obj.LastModifiedDate = DateTime.Now;
			<#= lmu #>
<#  				if (ishstcls)
                    {#>
            var hstobj = new HST_<#= cls.SysName #>();
            hstobj.<#= cls.SysName #> = obj;
            hstobj.CHST_<#= cls.SysName #> = CHST_<#= cls.SysName #>.CurrentVersion;
            hstobj.IsCurrentVersion = true;
            hstobj.VersionNumber = 1;
            App.DataContext.HST_<#= cls.SysName #>.InsertOnSubmit(hstobj);
            <#= defaults.Replace("obj.", "hstobj.") #>
            hstobj.LastModifiedDate = DateTime.Now;
            <#= lmu.Replace("obj", "hstobj") #>

            RenderMMView("<#= methodCreateNew != null && methodCreateNew.FormViewID.HasValue ? methodCreateNew.MM_FormView.SysName : "edit" #>", hstobj);
<#  				}
                    else
                    {#>
            RenderMMView("<#= methodCreateNew != null && methodCreateNew.FormViewID.HasValue ? methodCreateNew.MM_FormView.SysName : "edit" #>", obj);
<# 					}#>
<#	} else { #>
			RenderMMView("<#= methodCreateNew != null && methodCreateNew.FormViewID.HasValue ? methodCreateNew.MM_FormView.SysName : "edit" #>", null);
<#	} #>
<# 	} #>
        }
<# 	} #>
    }
<#	}#>
}