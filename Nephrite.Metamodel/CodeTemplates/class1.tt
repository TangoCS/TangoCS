<#@ template language="C#v3.5" debug="True" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.Linq.dll" #>
<#@ assembly name="System.Configuration.dll" #>
<#@ assembly name="Nephrite.Web.dll" #>
<#@ assembly name="Nephrite.Metamodel.dll" #>
<#@ import namespace="Nephrite.Metamodel" #>
<#@ import namespace="Nephrite.Metamodel.Model" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System" #>
<#@ output extension="cs" #>
<# 	var objectTypes = AppMM.DataContext.MM_ObjectTypes.Where(o => !o.IsTemplate && o.IsSeparateTable).ToList(); #>
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Linq;
using System.Runtime.Serialization;
using System.Web;
using Nephrite.Web;
using Nephrite.Web.SPM;
using Nephrite.Metamodel;

namespace <#= AppWeb.AppNamespace #>.Model
{
<#  foreach (var cls in objectTypes)
    {#>
    partial class <#= cls.SysName #>
    {
<#  		if (cls.TrackHistory)
            {
                var historyParentProperty = cls.MM_ObjectProperties.SingleOrDefault(o => o.RefObjectPropertyID.HasValue &&
                    o.RefObjectProperty.IsAggregate && !o.RefObjectType.IsEnableObjectHistory);
#>
        public string HistoryFullTitle
        {
<#              if (historyParentProperty != null && historyParentProperty.RefObjectType != null && historyParentProperty.RefObjectType.TrackHistory)
				{#>
            get { return <#= historyParentProperty.SysName #>.HistoryFullTitle + " / " + Title; }
<# 				}
				else
				{#>
            get { return Title; }
<# 				} #>
        }
<#		if ( cls.MM_ObjectProperties.Count(o => o.RefObjectPropertyID.HasValue && o.RefObjectProperty.IsAggregate) > 1)
			throw new Exception("Класс " + cls.SysName + " агрегируется более чем одной ассоциацией");
		var historyParentObjectProperty = cls.MM_ObjectProperties.SingleOrDefault(o => o.RefObjectPropertyID.HasValue &&
        o.RefObjectProperty.IsAggregate);#>
        public Nephrite.Metamodel.IMMObject HistoryParentObject
        {
<# 				if (historyParentObjectProperty != null && historyParentObjectProperty.RefObjectType.TrackHistory)
				{#>
            get { return ((<#= historyParentObjectProperty.RefObjectType.SysName #>)<#= historyParentObjectProperty.SysName #>).HistoryParentObject; }
<# 				}
				else
				{#>
            get { return this; }
<# 				} #>
        }
<# 			} #>

		string historyAction = null;
		public void SetHistoryAction(string actionTitle)
		{
			historyAction = actionTitle;
		}

		object GetProperty(string propertyName)
		{
			string lang = null;
			if (propertyName.IndexOf('.') > 0)
			{
				lang = propertyName.Substring(propertyName.IndexOf('.') + 1);
				propertyName = propertyName.Substring(0, propertyName.IndexOf('.'));
			}
			
	<#		foreach (var prop in cls.MM_ObjectProperties.Where(o => o.UpperBound == -1 && o.TypeCode == ObjectPropertyType.Object && (!o.RefObjectPropertyID.HasValue || o.RefObjectProperty.UpperBound == -1)))
			{#>
			if (propertyName == "<#=prop.SysName#>" && isInitial)
				return App.DataContext.<#= cls.SysName #><#= prop.SysName #>.Where(o => o.<#= cls.SysName #> == this).Select(o => o.<#= prop.SysName #>).ToList().Select(o => o.ObjectID > 0 ? o.ObjectID.ToString() : o.ObjectGUID.ToString()).OrderBy(o => o).Join(",");
	<#		}#>

			var p = GetType().GetProperty(propertyName);
			if (p == null)
				throw new Exception("Свойство " + propertyName + " отсутствует в классе <#=cls.SysName#>");
			var val = p.GetValue(this, null);
			if (lang != null)
				val = (string)GetType().GetMethod("Get" + propertyName).Invoke(this, new object[] {lang});
			if (val is IEnumerable && !(val is String))
			{
				//throw new Exception(propertyName + (val is ICollection ? " is ICollection!!" : " is not ICollection!!"));
				return (val as IEnumerable).Cast<IMMObject>().Select(o => o.ObjectID > 0 ? o.ObjectID.ToString() : o.ObjectGUID.ToString()).OrderBy(o => o).Join(",");
			}
			if (val == null || val.ToString() == "")
				return null;
			if (val is global::System.Data.Linq.Binary)
				return "Binary data, length: " + ((global::System.Data.Linq.Binary)val).Length.ToString();
			return val;
		}

		string GetPropertyTitle(string propertyName)
		{
			string lang = null;
			if (propertyName.IndexOf('.') > 0)
			{
				lang = propertyName.Substring(propertyName.IndexOf('.') + 1);
				propertyName = propertyName.Substring(0, propertyName.IndexOf('.'));
			}
			
	<#		foreach (var prop in cls.MM_ObjectProperties.Where(o => o.UpperBound == -1 && o.TypeCode == ObjectPropertyType.Object && (!o.RefObjectPropertyID.HasValue || o.RefObjectProperty.UpperBound == -1)))
			{#>
			if (propertyName == "<#=prop.SysName#>" && isInitial)
				<#//@SAD
				if(prop.RefObjectType.MM_ObjectProperties.Any(o => o.SysName == "DisplayTitle")){#>
				return App.DataContext.<#= cls.SysName #><#= prop.SysName #>.Where(o => o.<#= cls.SysName #> == this).Select(o => o.<#= prop.SysName #>).ToList().Select(o => "— " + o.DisplayTitle).OrderBy(o => o).Join("\n");
				<#}else{#>
				return App.DataContext.<#= cls.SysName #><#= prop.SysName #>.Where(o => o.<#= cls.SysName #> == this).Select(o => o.<#= prop.SysName #>).ToList().Select(o => "— " + o.Title).OrderBy(o => o).Join("\n");
				<#}#>
	<#		}#>
			var val = GetType().GetProperty(propertyName).GetValue(this, null);
			if (lang != null)
				val = (string)GetType().GetMethod("Get" + propertyName).Invoke(this, new object[] {lang});
			if (val is N_File) //@SAD
				return ((N_File)val).Title;
			if (val is IEnumerable && !(val is string))
			{
				//throw new Exception(propertyName + (val is ICollection ? " is not ICollection" : " is ICollection"));
				if ((val as IEnumerable).Cast<IMMObject>().Count() == 0)
					return "[не задано]";
				else
				{
				<#	var props1 = cls.MM_ObjectProperties.Where(o => o.TypeCode == ObjectPropertyType.Object && o.UpperBound == -1 &&
					o.RefObjectTypeID.HasValue && !o.RefObjectPropertyID.HasValue);#>
					switch(propertyName)
					{
				<#		foreach (var prop in props1)
						{#>
						case "<#=prop.SysName#>":
					<#//@SAD
					if(prop.RefObjectType.MM_ObjectProperties.Any(o => o.SysName == "DisplayTitle")){#>
							return (val as IEnumerable).Cast<<#=prop.RefObjectType.SysName#>>().Select(o => "— " + o.DisplayTitle).OrderBy(o => o).Join("\n");
					<#}else{#>
							return (val as IEnumerable).Cast<IMMObject>().Select(o => "— " + o.Title).OrderBy(o => o).Join("\n");
					<#}#>
					<#	}#>
						default:
							return (val as IEnumerable).Cast<IMMObject>().Select(o => "— " + o.Title).OrderBy(o => o).Join("\n");
					}
				}
			}
			if (val == null || val.ToString() == "")
				return "[не задано]";
			
			if (val is DateTime || val is DateTime?)
				return ((DateTime?)val).DateToString();
			if (val is bool || val is bool?)
				return ((bool?)val) ?? false ? "да" : "нет";
<#			foreach (var prop in cls.MM_ObjectProperties.Where(o => o.CodifierID.HasValue && o.KindCode == "P"))
			{#>
			if (propertyName == "<#=prop.SysName#>")
				return Solution.<#=prop.MM_Codifier.SysName#>.Title(val.ToString());			
<#
			}#>
<#	var props = cls.MM_ObjectProperties.Where(o => o.TypeCode == ObjectPropertyType.Object && o.UpperBound == 1 && o.RefObjectTypeID.HasValue);
	if(props.Count() > 0){#>
			switch(propertyName)
			{
<#				foreach (var prop in props)
			{#>
				case "<#=prop.ColumnName#>":
					if ((<#=prop.RefObjectType.PrimaryKey.Single().ClrType#>)val == <#=prop.RefObjectType.PrimaryKey.Single().ClrType == "int" ? "0" : "global::System.Guid.Empty"#>) return "[не задано]";
					var obj<#=prop.ObjectPropertyID#> = App.DataContext.<#=prop.IsReferenceToVersion ? "HST_" : ""#><#=prop.RefObjectType.SysName#>.SingleOrDefault(o => o.<#=prop.IsReferenceToVersion ? (prop.RefObjectType.PrimaryKey.Single().ClrType == "int" ? prop.RefObjectType.PrimaryKey.Single().ColumnName.Replace("ID", "VersionID") : prop.RefObjectType.PrimaryKey.Single().ColumnName.Replace("GUID", "VersionGUID")) : prop.RefObjectType.PrimaryKey.Single().ColumnName#> == (<#=prop.RefObjectType.PrimaryKey.Single().ClrType#>)val);
					if (obj<#=prop.ObjectPropertyID#> == null)
						return String.Format("[{0}]", val);
					<#//@SAD
					if(prop.RefObjectType.MM_ObjectProperties.Any(o => o.SysName == "DisplayTitle")){#>
					return obj<#=prop.ObjectPropertyID#>.DisplayTitle;
					<#}else{#>
					return obj<#=prop.ObjectPropertyID#>.Title;
					<#}#>
<#}#>
			}
<#}#>
			if (val is global::System.Data.Linq.Binary)
				return "[Двоичные данные размером " + ((global::System.Data.Linq.Binary)val).Length.ToString() + " байт]";
			return val.ToString();
		}
		        
		Dictionary<string, Nephrite.Web.ObjectPropertyChange> propertyChanges = new Dictionary<string, Nephrite.Web.ObjectPropertyChange>();
		<#=cls.SysName#> initialObject;
		bool isInitial;
		<#if(cls.TrackHistory && !cls.MM_Package.IsDataReplicated && !cls.IsDataReplicated)
		{	#>
		partial void OnLoaded()
		{
			propertyChanges = new Dictionary<string, Nephrite.Web.ObjectPropertyChange>();
			initialObject = App.DataContext.<#=cls.SysName#>.GetOriginalEntityState(this);
			if (initialObject != null)
			{
				initialObject.isInitial = true;
				this.PropertyChanged = new PropertyChangedEventHandler(<#=cls.SysName#>_PropertyChanged);
			}
		}

		void <#=cls.SysName#>_PropertyChanged(object sender, PropertyChangedEventArgs e)
		{
			string pname = e.PropertyName;
			if (pname == "SeqNo")
				return;
			string lang = null;
			if (pname.IndexOf('.') > 0)
			{
				lang = pname.Substring(pname.IndexOf('.') + 1);
				pname = pname.Substring(0, pname.IndexOf('.'));
			}
			var plist = AppMM.DataContext.MM_ObjectProperties.Where(o => o.MM_ObjectType.SysName == "<#=cls.SysName#>").ToList();
			var p = plist.SingleOrDefault(o => o.ColumnName == pname);
			if (p == null)
			{
				p = plist.SingleOrDefault(o => o.SysName == pname);
				if (p == null)
					return;
				if (!(p.KindCode == "A") || !(p.UpperBound == -1))
					pname = p.ColumnName;
			}
			var pkey = pname + (lang == null ? "" : ("." + lang));
			if (!propertyChanges.ContainsKey(pkey))
			{
				if (initialObject != null)
					propertyChanges.Add(pkey, new Nephrite.Web.ObjectPropertyChange(p.SysName, p.Title,
						initialObject.GetProperty(pname), initialObject.GetPropertyTitle(pname)));
				else
					propertyChanges.Add(pkey, new Nephrite.Web.ObjectPropertyChange(p.SysName, p.Title, null, null));
			}
			
			propertyChanges[pkey].NewValue = GetProperty(pkey);
			propertyChanges[pkey].NewValueTitle = GetPropertyTitle(pkey);
		}
		public N_ObjectChange CreateObjectChange()
		{
			var oc = new N_ObjectChange();
            oc.SubjectID = Subject.Current.ID;
            oc.LastModifiedDate = DateTime.Now;
            oc.IP = HttpContext.Current == null ? "127.0.0.1" : HttpContext.Current.Request.UserHostAddress;
            oc.ObjectKey = <#= cls.PrimaryKey.Single().ColumnName #>.ToString();
			oc.ObjectTitle = Title ?? "[без названия]";
			oc.ObjectTypeTitle = "<#= cls.Title #>";
            oc.ObjectTypeSysName = "<#= cls.SysName #>";
            oc.UserTitle = Subject.Current.Title + (HttpContext.Current.Items["delegated"] != null ? " (делегировано)" : "");
			oc.UserLogin = Subject.Current.Login;
			oc.Details = "";
            App.DataContext.N_ObjectChange.InsertOnSubmit(oc);

			return oc;
		}
<#}#>

        public override void WriteUpdateObjectHistory()
        {
<#  		if (cls.HistoryTypeCode != VersioningType.None && !cls.MM_Package.IsDataReplicated && !cls.IsDataReplicated)
            {
                if (cls.HistoryTypeCode != VersioningType.Object)
				{#>
            if (CHST_<#= cls.SysName #>.CurrentVersion.IsCurrent)
                App.DataContext.<#= cls.SysName #>_CreateHistoryVersion(<#= cls.PrimaryKey.Single().ColumnName #>, CHST_<#= cls.SysName #>.CurrentVersionID);
<# 				}
				else
				{#>
            if (!SkipCreateHistoryVersion)
				App.DataContext.<#= cls.SysName #>_CreateHistoryVersion(<#= cls.PrimaryKey.Single().ColumnName #>);
<#
				}
			}#>

			<#if (cls.TrackHistory && !cls.MM_Package.IsDataReplicated && !cls.IsDataReplicated)
           	{ #>
			var changeList = GetPropertyChanges().Where(o => o.PropertyName != "LastModifiedDate" && o.PropertyName != "LastModifiedUser").OrderBy(o => o.PropertyCaption).ToList();
			if (changeList.Count == 0)
				return;
            var oc = CreateObjectChange();
            oc.Title = historyAction ?? "Редактирование";
			
			foreach(var p in changeList)
			{
				var opc = new N_ObjectPropertyChange();
				opc.ObjectChange = oc;
				opc.PropertySysName = p.PropertyName;
				opc.Title = p.PropertyCaption;
				opc.NewValue = p.NewValue == null ? null : p.NewValue.ToString();
				opc.NewValueTitle = p.NewValueTitle ?? "";
				opc.OldValue = p.OldValue == null ? null : p.OldValue.ToString();
				opc.OldValueTitle = p.OldValueTitle ?? "";
				opc.HideOldValue = p.HideOldValue;
				App.DataContext.N_ObjectPropertyChange.InsertOnSubmit(opc);
				oc.PropertyChanges.Add(opc);
			}
			oc.Details = oc.PropertyChanges.OrderBy(o => o.Title).Select(o => !o.HideOldValue ? (o.Title + ": с" + (o.OldValueTitle.Contains("\n") ? ("\n" + o.OldValueTitle + "\n") : (" «" + o.OldValueTitle + "» ")) + "на" + (o.NewValueTitle.Contains("\n") ? ("\n" + o.NewValueTitle) : (" «" + o.NewValueTitle + "»"))) : (o.Title + ":" + (o.NewValueTitle.Contains("\n") ? ("\n" + o.NewValueTitle) : (" «" + o.NewValueTitle + "»")))).Join("\n");
			<#foreach(var aggProp in AppMM.DataContext.MM_ObjectProperties.Where(o => o.RefObjectType == cls &&
				o.IsAggregate && o.RefObjectPropertyID.HasValue && o.RefObjectProperty.LowerBound == 1).ToList().Where(o => o.MM_ObjectType.TrackHistory)){#>
			if (this.<#=aggProp.RefObjectProperty.SysName#> != null)
			{
				var parentOC = this.<#=aggProp.RefObjectProperty.SysName#>.CreateObjectChange();
				parentOC.Title = "<#=aggProp.Title#> - " + oc.Title;
				parentOC.Details = "<#=aggProp.RefObjectType.Title#>: " + oc.ObjectTitle + "\n" + oc.Details;
				<#if(AppMM.DataContext.MM_ObjectProperties.Any(o => o.MM_ObjectType.SysName == "N_ObjectChange" && o.SysName == "ChildObjectChange")){#>
				parentOC.ChildObjectChange = oc;
				<#}#>
			}
			<#}#>
			<#}#>
        }

        public override void WriteDeleteObjectHistory()
        {
			<#if (cls.TrackHistory && !cls.MM_Package.IsDataReplicated && !cls.IsDataReplicated)
           	{ #>
            var oc = CreateObjectChange();
            oc.Title = historyAction ?? "Удаление";
			oc.Details = "";
            <#foreach(var aggProp in AppMM.DataContext.MM_ObjectProperties.Where(o => o.RefObjectType == cls &&
				o.IsAggregate && o.RefObjectPropertyID.HasValue && o.RefObjectProperty.LowerBound == 1).ToList().Where(o => o.MM_ObjectType.TrackHistory)){#>
			if (this.<#=aggProp.RefObjectProperty.SysName#> != null)
			{
				var parentOC = this.<#=aggProp.RefObjectProperty.SysName#>.CreateObjectChange();
				parentOC.Title = "<#=aggProp.Title#> - " + oc.Title;
				parentOC.Details = "<#=aggProp.RefObjectType.Title#>: " + oc.ObjectTitle;
				<#if(AppMM.DataContext.MM_ObjectProperties.Any(o => o.MM_ObjectType.SysName == "N_ObjectChange" && o.SysName == "ChildObjectChange")){#>
				parentOC.ChildObjectChange = oc;
				<#}#>
			}
			<#}#>
			<#}#>
        }
<# 			if (cls.HistoryTypeCode == VersioningType.Object && !cls.MM_Package.IsDataReplicated && !cls.IsDataReplicated)
			{ #>
		public bool SkipCreateHistoryVersion;
<# 			}#>

        public override void WriteInsertObjectHistory()
        {
<# 			if (cls.HistoryTypeCode == VersioningType.Object && !cls.MM_Package.IsDataReplicated && !cls.IsDataReplicated)
			{ #>
			if (!SkipCreateHistoryVersion)
				App.DataContext.<#= cls.SysName #>_CreateHistoryVersion(<#= cls.PrimaryKey.Single().ColumnName #>);
<# 			}
			
           	if (cls.TrackHistory && !cls.MM_Package.IsDataReplicated && !cls.IsDataReplicated)
           	{ #>
            var oc = CreateObjectChange();
            oc.Title = historyAction ?? "Создание";
			
            N_ObjectPropertyChange opc;
			object nv;
<#          foreach (var prop in cls.MM_ObjectProperties.Where(o => String.IsNullOrEmpty(o.Expression) &&
				(!o.IsSystem || o.SysName == "Title") && !o.IsPrimaryKey && o.SysName != "IsDeleted" && o.SysName != "LastModifiedUser" &&
				o.SysName != "LastModifiedDate" && !o.IsAggregate))
			{
				if (prop.RefObjectPropertyID.HasValue && prop.RefObjectProperty.IsAggregate)
					continue;#>
		
				opc = new N_ObjectPropertyChange();
				opc.ObjectChange = oc;
				opc.PropertySysName = "<#= prop.UpperBound == -1 ? prop.SysName : prop.ColumnName #>";
				opc.Title = "<#= prop.Title.Replace("\"", "\\\"") #>";
				nv = GetProperty(opc.PropertySysName);
				opc.NewValue = nv == null ? null : nv.ToString();
				opc.NewValueTitle = GetPropertyTitle(opc.PropertySysName) ?? "";
				opc.OldValueTitle = "";
				App.DataContext.N_ObjectPropertyChange.InsertOnSubmit(opc);
				oc.PropertyChanges.Add(opc);
<# 				}#>
			oc.Details = oc.PropertyChanges.OrderBy(o => o.Title).Select(o => o.Title + ":" + (o.NewValueTitle.Contains("\n") ? ("\n" + o.NewValueTitle) : (" «" + o.NewValueTitle + "»"))).Join("\n");
			<#foreach(var aggProp in AppMM.DataContext.MM_ObjectProperties.Where(o => o.RefObjectType == cls &&
				o.IsAggregate && o.RefObjectPropertyID.HasValue && o.RefObjectProperty.LowerBound == 1).ToList().Where(o => o.MM_ObjectType.TrackHistory)){#>
			var parentOC = this.<#=aggProp.RefObjectProperty.SysName#>.CreateObjectChange();
			parentOC.Title = "<#=aggProp.Title#> - " + oc.Title;
			parentOC.Details = "<#=aggProp.RefObjectType.Title#>: " + oc.ObjectTitle + "\n" + oc.Details;
				<#if(AppMM.DataContext.MM_ObjectProperties.Any(o => o.MM_ObjectType.SysName == "N_ObjectChange" && o.SysName == "ChildObjectChange")){#>
				parentOC.ChildObjectChange = oc;
				<#}#>

			<#}#>
<#			}#>
        }

		public IEnumerable<Nephrite.Web.ObjectPropertyChange> GetPropertyChanges()
		{
			return propertyChanges.Values.Where(o => o.OldValue != o.NewValue).OrderBy(o => o.PropertyCaption);
		}
	}
<#	}#>
}