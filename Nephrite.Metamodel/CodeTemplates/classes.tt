<#@ template language="C#v3.5" debug="True" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.Linq.dll" #>
<#@ assembly name="System.Configuration.dll" #>
<#@ assembly name="Nephrite.Web.dll" #>
<#@ assembly name="Nephrite.Metamodel.dll" #>
<#@ import namespace="Nephrite.Metamodel" #>
<#@ import namespace="Nephrite.Metamodel.Model" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System" #>
<#@ output extension="cs" #>
<# 	var objectTypes = AppMM.DataContext.MM_ObjectTypes.Where(o => !o.IsTemplate && o.IsSeparateTable).ToList(); #>
<# 	var objectTypesWithWorkflow = AppMM.DataContext.MM_ObjectTypes.Where(o => !o.IsTemplate && o.IsSeparateTable && !o.SysName.EndsWith("Transition") && !AppMM.DataContext.MM_ObjectTypes.Any(o1 => o1.SysName == o.SysName + "Transition") && o.MM_ObjectProperties.Any(o1 => o1.SysName == "Activity" && o1.RefObjectType != null && o1.RefObjectType.SysName == "WF_Activity")).ToList(); #>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Linq;
using System.Runtime.Serialization;
using System.Web;
using Nephrite.Web;
using Nephrite.Web.SPM;
using Nephrite.Metamodel;

namespace <#= AppMM.DBName() #>.Model
{
<#  foreach (var cls in objectTypesWithWorkflow)
    {#>
	partial class <#= cls.SysName #>Transition : Nephrite.Metamodel.IMMObjectTransition
	{
<#	if (cls.PrimaryKey.Single().TypeCode == ObjectPropertyType.Guid) { #>
		public int ParentID { get; set; }
<#	} else { #>
		public Guid ParentGUID { get; set; }
<#	} #>
	}
<#	}#>
<#  foreach (var cls in objectTypes)
    {#>
    [Serializable]
    partial class <#= cls.SysName #> : Nephrite.Metamodel.BaseModelObject, I<#= cls.SysName #>, ISerializable
    {
		<#if(!cls.MM_ObjectProperties.Any(o => o.SysName == "ObjectID")){#>
        public int ObjectID
        {   
            get { return <#= (cls.PrimaryKey == null || cls.PrimaryKey.Length != 1 || cls.PrimaryKey.Single().ClrType == "Guid") ? "0" : cls.PrimaryKey.Single().ColumnName #>; }
        }
		<#}#>
        <#if(!cls.MM_ObjectProperties.Any(o => o.SysName == "ObjectGUID")){#>
        public Guid ObjectGUID
        {   
            get { return <#= (cls.PrimaryKey != null && cls.PrimaryKey.Length == 1 && cls.PrimaryKey.Single().ClrType == "Guid") ? cls.PrimaryKey.Single().ColumnName : "global::System.Guid.Empty" #>; }
        }
		<#}#>
		<#if(cls.PrimaryKey.Length == 1) {#>
		public bool IsNewObject
		{
			get { return <#= cls.PrimaryKey.Single().ColumnName#> == <#= (cls.PrimaryKey != null && cls.PrimaryKey.Length == 1 && cls.PrimaryKey.Single().ClrType == "Guid") ? "global::System.Guid.Empty" : "0" #>; }
		}
		<#}#>
		<#if(cls.MM_ObjectProperties.Any(o => o.UpperBound == -1 && o.RefObjectTypeID.HasValue && o.TypeCode == ObjectPropertyType.Object && (!o.RefObjectPropertyID.HasValue || o.RefObjectProperty.UpperBound == -1))){#>
		public void _PropertyChanging()
		{
			SendPropertyChanging();
		}
		public void _PropertyChanged(string propertyName)
		{
			SendPropertyChanged(propertyName);
		}
		<#}#>
<#		foreach (var prop in cls.MM_ObjectProperties.Where(o => o.UpperBound == 1 && o.TypeCode == ObjectPropertyType.Code && o.CodifierID.HasValue))
		{#>
        public string <#= prop.SysName #>CodifierTitle
        {
            get 
            {
                return <#= AppMM.DBName() #>.<#= prop.MM_Codifier.SysName #>.Title(<#= prop.SysName #>);
            }
        }
<#		}
		#>
<#		foreach (var prop in cls.MM_ObjectProperties.Where(o => o.UpperBound == -1 && o.TypeCode == ObjectPropertyType.Object && (!o.RefObjectPropertyID.HasValue || o.RefObjectProperty.UpperBound == -1)))
		{#>
        <#= cls.SysName #><#= prop.SysName #>Collection _<#= prop.SysName #>;
        public <#= cls.SysName #><#= prop.SysName #>Collection <#= prop.SysName #>
        {
            get 
            {
                if (_<#= prop.SysName #> == null)
                    _<#= prop.SysName #> = new <#= cls.SysName #><#= prop.SysName #>Collection(this);
                return _<#= prop.SysName #>;
            }
        }
<#		}
		if (cls.IsMultiLingual)
        {
		#>
		Dictionary<string, <#= cls.SysName #>Data> _datadict = new Dictionary<string, <#= cls.SysName #>Data>();
		<#= cls.SysName #>Data _GetData(string lang, bool createIfMissing)
		{
			if (_datadict.ContainsKey(lang))
				return _datadict[lang];
			var d = <#= cls.SysName #>Data.SingleOrDefault(o => o.LanguageCode == lang);
			if (d == null && createIfMissing)
			{
				var defdata = <#= cls.SysName #>Data.FirstOrDefault();
				if (defdata == null)
				{
					d = new <#= cls.SysName #>Data
					{
						LanguageCode = lang,
						<#= cls.SysName #> = this
					};
					<#if(cls.PrimaryKey[0].TypeCode == ObjectPropertyType.Guid){#>
					d.<#= cls.SysName #>DataGUID = Guid.NewGuid();<#}#>
				}
				else
				{
					d = new <#= cls.SysName #>Data
					{
						LanguageCode = lang,
						<#= cls.SysName #> = this
<#			foreach (var p in cls.MM_ObjectProperties.Where(o => o.IsMultilingual && o.TypeCode != ObjectPropertyType.File))
            {#>
								,<#= p.SysName #> = defdata.<#= p.SysName #>
<# 			} #>
					};<#if(cls.PrimaryKey[0].TypeCode == ObjectPropertyType.Guid){#>
					d.<#= cls.SysName #>DataGUID = Guid.NewGuid();<#}#>
				}
			}
			if (d != null)
				_datadict.Add(lang, d);
			return d;
		}

        <#= cls.SysName #>Data _data = null;
		string _dataLang;
        <#= cls.SysName #>Data _Data
        {
            get
            {
                string lang = AppMM.CurrentLanguage.LanguageCode.ToLower();
                if (_data == null || _dataLang != lang)
                {
                    _data = _GetData(lang, true);
					_dataLang = lang;
                }
                return _data;
            }
        }
<# 			foreach (var p in cls.MM_ObjectProperties.Where(o => o.IsMultilingual))
            {
				if (p.TypeCode == ObjectPropertyType.File)
				{#>
		public N_File <#= p.SysName #>
        {
            get { return _Data.<#= p.SysName #>; }
            set { _Data.<#= p.SysName #> = value; <# if (cls.TrackHistory) { #> <# } #>}
        }
		public <#= p.ClrType #><#=p.LowerBound == 0 ? "?" : ""#> <#= p.ColumnName #>
        {
            get { return _Data.<#= p.ColumnName #>; }
            set { _Data.<#= p.ColumnName #> = value; <# if (cls.TrackHistory) { #> <# } #>}
        }
			<#	}
			    else if (p.TypeCode == ObjectPropertyType.FileEx)
				{#>
		public DbFile <#= p.SysName #>
        {
            get { return _Data.<#= p.SysName #>; }
            set { _Data.<#= p.SysName #> = value; <# if (cls.TrackHistory) { #> <# } #>}
        }
		public <#= p.ClrType #><#=p.LowerBound == 0 ? "?" : ""#> <#= p.ColumnName #>
        {
            get { return _Data.<#= p.ColumnName #>; }
            set { _Data.<#= p.ColumnName #> = value; <# if (cls.TrackHistory) { #> <# } #>}
        }
			<#	}
				else
				{#>
			
        public string <#= p.SysName #>
        {
            get { return _Data.<#= p.SysName #>; }
            set { _Data.<#= p.SysName #> = value; <# if (cls.TrackHistory) { #> <# } #>}
        }
		public string Get<#= p.SysName #>(string lang)
		{
			var d = _GetData(lang, false);
			if (d == null)
				return null;
			return d.<#= p.SysName #>;
		}
		public void Set<#= p.SysName #>(string lang, string value)
		{
			if (!propertyChanges.ContainsKey("<#= p.SysName #>." + lang))
			{
				string oldVal = Get<#= p.SysName #>(lang);
				propertyChanges.Add("<#= p.SysName #>." + lang, new Nephrite.Web.ObjectPropertyChange("<#= p.SysName #>", "<#= p.Title #>", oldVal, oldVal));
			}
			_GetData(lang, true).<#= p.SysName #> = value;
			SendPropertyChanged("<#= p.SysName #>." + lang);
		}
<# 				}
			}
		}#>
       
        public bool IsLogicalDelete
        {
			get
            {
				<#= String.IsNullOrEmpty(cls.LogicalDelete) ? "return false" : cls.LogicalDelete #>;
            }
        }
		
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            if (info == null)
                throw new global::System.ArgumentNullException("info");
<#  foreach (var prop in cls.MM_ObjectProperties.Where(o => String.IsNullOrEmpty(o.Expression) && !o.IsMultilingual && o.UpperBound == 1 && o.TypeCode != ObjectPropertyType.File ))
    {
		if(prop.RefObjectProperty != null && prop.RefObjectProperty.UpperBound == 1 && prop.RefObjectProperty.IsAggregate)
			continue;#>
            info.AddValue("<#= prop.ColumnName #>", _<#= prop.ColumnName #>);
<# 	} #>

        }
		
        public <#= cls.SysName #>(SerializationInfo info, StreamingContext context) : this()
        {
            if (info == null)
                throw new global::System.ArgumentNullException("info");

<#  foreach (var prop in cls.MM_ObjectProperties.Where(o => String.IsNullOrEmpty(o.Expression) && !o.IsMultilingual && o.UpperBound == 1 && o.TypeCode != ObjectPropertyType.File))
    {
		if(prop.RefObjectProperty != null && prop.RefObjectProperty.UpperBound == 1 && prop.RefObjectProperty.IsAggregate)
			continue;#>
            _<#= prop.ColumnName #> = (<#=prop.ClrType #><#=prop.LowerBound == 0 && !prop.RefObjectTypeID.HasValue && prop.ClrType != "string" && prop.ClrType != "global::System.Data.Linq.Binary" ? "?" : ""#>)info.GetValue("<#= prop.ColumnName #>", typeof(<#=prop.ClrType #><#=prop.LowerBound == 0 && !prop.RefObjectTypeID.HasValue && prop.ClrType != "string" && prop.ClrType != "global::System.Data.Linq.Binary" ? "?" : ""#>));
<# 	} #>
        
<#  foreach (var prop in cls.MM_ObjectProperties.Where(o => String.IsNullOrEmpty(o.Expression) && o.UpperBound == -1 && o.TypeCode == ObjectPropertyType.Object && o.RefObjectTypeID.HasValue &&
	o.RefObjectPropertyID.HasValue && o.RefObjectProperty.UpperBound == 1 && !o.RefObjectProperty.IsReferenceToVersion))
    {#>		
			this._<#= prop.SysName #> = new EntitySet<<#= prop.RefObjectType.SysName#>>(new Action<<#= prop.RefObjectType.SysName#>>(this.attach_<#= prop.SysName #>), new Action<<#= prop.RefObjectType.SysName#>>(this.detach_<#= prop.SysName #>));
<# 	} #>
		}
		
<#  foreach (var prop in cls.MM_ObjectProperties.Where(o => !String.IsNullOrEmpty(o.Expression) && o.KindCode == "C"))
    {#>
        public <#= prop.ClrType #> <#= prop.SysName #>
        {
            get
            {
                <#= prop.Expression #>
            }
        }
<# 	} #>
<#  foreach (var prop in cls.MM_ObjectProperties.Where(o => o.TypeCode == ObjectPropertyType.ZoneDateTime))
	{
		if (prop.LowerBound == 0)
		{#>
        public Nephrite.Web.ZoneDateTime? <#= prop.SysName #>ZoneDateTime
        {
            get
            {
                if (<#= prop.SysName #> == null || <#= prop.SysName #>TimeZoneID == null)
                    return null;
                else
                    return new Nephrite.Web.ZoneDateTime(<#= prop.SysName #>.Value, <#= prop.SysName #>TimeZoneID.Value, true);
            }
            set
            {
                if (value == null)
                {
                    <#= prop.SysName #> = null;
                    <#= prop.SysName #>TimeZoneID = null;
                }
                else
                {
                    <#= prop.SysName #> = value.Value.UniversalDateTime;
                    <#= prop.SysName #>TimeZoneID = value.Value.TimeZoneVersionID;
                }
            }
        }
<# 		}
		else
		{#>
        public Nephrite.Web.ZoneDateTime <#= prop.SysName #>ZoneDateTime
        {
            get
            {
                return new Nephrite.Web.ZoneDateTime(<#= prop.SysName #>, <#= prop.SysName #>TimeZoneID, true);
            }
            set
            {
                <#= prop.SysName #> = value.UniversalDateTime;
                <#= prop.SysName #>TimeZoneID = value.TimeZoneVersionID;
            }
        }
	<# 	}
	}#>

		public Nephrite.Meta.MetaClass MetaClass
        {
            get { return Meta.<#=cls.SysName#>; }
        }

        public string GetClassName()
        {
            return Meta.<#=cls.SysName#>.Caption;
        }
		
<#  if (cls.ParentProperty != null)
	{#>
		public Nephrite.Web.IModelObject ParentObject
        {
            get { return Parent; }
            set { Parent = (<#= cls.ParentProperty.RefObjectType.SysName #>)value; }
        }
        
        public void SetParent(int parentID)
        {
			<#	if (cls.ParentProperty.RefObjectType.PrimaryKey.Single().TypeCode != ObjectPropertyType.Guid) { #>
			ParentID = <#= cls.ParentProperty.LowerBound == 0 ? "parentID > 0 ? (int?)parentID : null" : "parentID" #>;
			<#	} #>
        }
        public void SetParent(Guid parentGUID)
        {
			<#	if (cls.ParentProperty.RefObjectType.PrimaryKey.Single().TypeCode == ObjectPropertyType.Guid) { #>
			ParentGUID = <#= cls.ParentProperty.LowerBound == 0 ? "parentGUID != global::System.Guid.Empty ? (Guid?)parentGUID : null" : "parentGUID" #>;
			<#	} #>
        }
        public global::System.Linq.Expressions.Expression<Func<T, bool>> FilterByParentID<T>(int id) where T : Nephrite.Web.IModelObject
        {
			<#	if (cls.ParentProperty.RefObjectType.PrimaryKey.Single().TypeCode != ObjectPropertyType.Guid) { #>
            if (id > 0)
                return o => (o as <#= cls.SysName #>).ParentID == id;
            else
                return <#= cls.ParentProperty.LowerBound == 1 ? "o => false" : ("o => !(o as " + cls.SysName + @").ParentID.HasValue") #>;
			<#	} else { #>
			return null;
			<#	} #>
        }
        public global::System.Linq.Expressions.Expression<Func<T, bool>> FilterByParentGUID<T>(Guid guid) where T : Nephrite.Web.IModelObject
        {
            <#	if (cls.ParentProperty.RefObjectType.PrimaryKey.Single().TypeCode == ObjectPropertyType.Guid) { #>
            if (guid != global::System.Guid.Empty)
                return o => (o as <#= cls.SysName #>).ParentGUID == guid;
            else
                return <#= cls.ParentProperty.LowerBound == 1 ? "o => false" : ("o => !(o as " + cls.SysName + @").ParentGUID.HasValue") #>;
			<#	} else { #>
			return null;
			<#	} #>
        }
<# 	}#>
<#	if (cls.AllProperties.Count(o => o.SysName == "IsDeleted") == 0) {#>
		public bool IsDeleted
		{
			get { return false; }
		}
<#  }#>
<#	if (cls.AllProperties.Count(o => o.SysName == "LastModifiedDate") == 0) {#>
		public DateTime LastModifiedDate
		{
			get { return DateTime.MinValue; }
			set { }
		}
<#  }#>
<#	if (cls.AllProperties.Count(o => o.ColumnName == "LastModifiedUserID") == 0) {#>
		public int LastModifiedUserID
		{
			get { return 0; }
			set { }
		}
<#  }#>

		public event EventHandler OnSaveChanges;
<#
	if (cls.MM_ObjectProperties.Any(o => o.SysName == "LastModifiedDate" && o.ClrType == "DateTime")){ #>
		[ThreadStatic]
		public static bool UpdateLastModifiedDate = true;
<#}#>
		public void RaiseSaveChanges()
		{
			if (OnSaveChanges != null)
				OnSaveChanges(this, EventArgs.Empty);
<# 	if (cls.MM_ObjectProperties.Any(o => o.SysName == "LastModifiedUser" && o.RefObjectTypeID.HasValue && o.RefObjectType.SysName == "SPM_Subject")){ #>
			if (_LastModifiedUserID == 0 || ObjectID > 0)
				_LastModifiedUserID = Nephrite.Web.SPM.AppSPM.GetCurrentSubjectID();
<# 	}
	if (cls.MM_ObjectProperties.Any(o => o.SysName == "LastModifiedDate" && o.ClrType == "DateTime")){ #>
			if (UpdateLastModifiedDate)
				_LastModifiedDate = DateTime.Now;
<# 	} 
	if (cls.PrimaryKey != null && cls.PrimaryKey.Length == 1 && cls.PrimaryKey.Single().TypeCode == ObjectPropertyType.Guid && !cls.IsDataReplicated) { #>
			if (<#=cls.PrimaryKey.Single().ColumnName#> == global::System.Guid.Empty)
				<#=cls.PrimaryKey.Single().ColumnName#> = global::System.Guid.NewGuid();
<#	} #>
		}
		<# if(!cls.SysName.StartsWith("V_") && cls.PrimaryKey != null && cls.PrimaryKey.Length == 1){ #>
		partial void OnCreated()
		{
<# 	if (cls.MM_ObjectProperties.Any(o => o.SysName == "LastModifiedDate" && o.ClrType == "DateTime")){ #>
			_LastModifiedDate = DateTime.Now;
<# 	} #>

<# 	foreach (var property in cls.MM_ObjectProperties.Where(o => o.TypeCode == ObjectPropertyType.Object && o.IsAggregate && o.LowerBound == 1 && o.UpperBound == 1 && o.RefObjectTypeID.HasValue)) { #>
			<#= property.SysName #> = new <#= property.RefObjectType.SysName #>();
<#  } #>
<# 	if (cls.BaseObjectTypeID.HasValue && !cls.IsDataReplicated) { #>
			<#= cls.BaseObjectType.SysName #> = new <#= cls.BaseObjectType.SysName #>();
<# 	} #>
			<#foreach (var property in cls.MM_ObjectProperties.Where(o => o.MM_FormField != null && !String.IsNullOrEmpty(o.MM_FormField.DefaultValue))){#>
			<#= property.SysName #> = <#=property.MM_FormField.DefaultValue#>;
			<#}#>
		}
		<# } #>
	}

<#	}#>
}