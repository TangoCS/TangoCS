using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Microsoft.SqlServer.Management.Smo;

namespace Nephrite.Metamodel.DbSync
{
    internal class Procedure
    {
        internal string Name { get; set; }
        internal string Text { get; set; }
        internal Model Model;
        internal List<Parameter> Parameters { get; private set; }

        internal Procedure()
        {
            Parameters = new List<Parameter>();
        }

        internal void Sync()
        {
            if (Model.Database.StoredProcedures.Contains(Name))
            {
                var p = Model.Database.StoredProcedures[Name];
                if (p.TextBody != Text)
                {
                    Model.Log("DROP STORED PROCEDURE " + Name);
                    if (!Model.ScriptOnly)
                        p.Drop();
                }
            }

            var p1 = new StoredProcedure(Model.Database, Name)
            {
                TextMode = false,
                TextBody = Text
            };

            foreach (var p in Parameters)
                p1.Parameters.Add(new StoredProcedureParameter
                {
                    Name = p.Name,
                    Parent = p1,
                    DataType = p.Type
                });

            p1.ExtendedProperties.Add(new ExtendedProperty(p1, "IsAutoGenerated", 1));

            Model.Log("CREATE STORED PROCEDURE " + Name);
            foreach (var s in p1.Script().OfType<string>())
                Model.Script(s);

            if (!Model.ScriptOnly)
                p1.Create();
        }
    }

    internal class Parameter
    {
        internal string Name { get; set; }
        internal DataType Type { get; set; }
    }
}
