<#@ template debug="true" language="C#" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.Linq.dll" #>
<#@ assembly name="System.Configuration.dll" #>
<#@ assembly name="Nephrite.Web.dll" #>
<#@ assembly name="Nephrite.Meta.Database.DB2.dll" #>
<#@ assembly name="Nephrite.Metamodel.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Nephrite.Meta.Database" #>
<#@ import namespace="System.Linq" #>


using System;
using System.Collections.Generic;
using System.Data.Linq;
using System.Linq;
using Nephrite.Web;
using NHibernate.Mapping.ByCode;
using NHibernate.Mapping.ByCode.Conformist;
using NHibernate.Type;
using Servants.UserTypes;
namespace Solution.Model
{
<#
var qlServerMetadataReader = new  DB2ServerMetadataReader();
var schema = qlServerMetadataReader.ReadSchema("dbo");
foreach (var table in schema.Tables)
{
	if (table.Value.PrimaryKey == null) continue;
#>
	public class <#=table.Key#>Map : ClassMapping<<#=table.Key#>>
	{
		public <#=table.Key#>Map() 
		{
			Schema("dbo");
			Lazy(true);

<# 	if (table.Value.PrimaryKey != null && table.Value.PrimaryKey.Columns.Length == 1) { #>
			Id(x => x.<#=table.Value.PrimaryKey.Columns[0] #>, map => map.Generator(Generators.Identity));
<# 	} #>
<# 	if (table.Value.PrimaryKey != null && table.Value.PrimaryKey.Columns.Length == 2) { #>
			ComposedId(map =>
			{
				map.ManyToOne(x => x.<#=table.Value.PrimaryKey.Columns[0].Replace("GUID", "").Replace("ID", "") #>);
				map.ManyToOne(x => x.<#=table.Value.PrimaryKey.Columns[1].Replace("GUID", "").Replace("ID", "") #>);
			});
<# 	} #>

	<# 
	var foreignKeys = table.Value.ForeignKeys;
	foreach (var column in table.Value.Columns.Where(t => !foreignKeys.Values.Any(f => f.Columns.Any(c => c == t.Value.Name))))
	{
		if (column.Value.Type is Nephrite.Meta.MetaGuidType)
		{
		if (!column.Value.IsPrimaryKey)
			{
				if (column.Value.Nullable)
				{ #>
			Property(x => x.<#=column.Key #>,map => {map.NotNullable(false);  map.Type<StringBackedGuidUserType>();});
		<# }
				else
				{ #>
			Property(x => x.<#=column.Key #>, map =>  map.Type<StringBackedGuidUserType>());
		<# }
			}
		}
		else if (column.Value.Type is Nephrite.Meta.MetaBooleanType)
		{
		if (!column.Value.IsPrimaryKey)
			{
				if (column.Value.Nullable)
				{ #>
			Property(x => x.<#=column.Key #>,map => {map.NotNullable(false);  map.Type<IntBackedBoolUserType>();});
		<# }
				else
				{ #>
			Property(x => x.<#=column.Key #>, map =>  map.Type<IntBackedBoolUserType>());
		<# }
			}
		}
		else
		{
			if (!column.Value.IsPrimaryKey)
			{
				if (column.Value.Nullable)
				{ #>
			Property(x => x.<#=column.Key #>, map => map.NotNullable(false));
		<# }
				else
				{ #>
			Property(x => x.<#=column.Key #>);
		<# }
			}
		}
	}

	foreach (var foreignKey in foreignKeys)
	{
		int i = 0;
		foreach (var column in foreignKey.Value.Columns)
		{
			if (foreignKey.Value.RefTable == "N_File") { #>
			Property(x => x.<#=column#>);
		<#		continue;
			}

			var prefix = Regex.Replace(column, @"GUID$", String.Empty); 
      			prefix = Regex.Replace(prefix, @"ID$", String.Empty);

			if (column == prefix || prefix == table.Key)
			{
				 prefix = foreignKey.Value.RefTable;
			}
			if (column.Contains("GUID"))
			{
			#>
			 	Property(x => x.<#=column#>, map => { map.Formula("<#=column#>"); map.Type<StringBackedGuidUserType>();});
			<#
			}
			else
			{
			#>
			 	Property(x => x.<#=column#>, map => { map.Formula("<#=column#>"); });
			<#	
			}
			#>

			ManyToOne(x => x.<#=prefix#>, map => 
			{
				map.Column("<#=column#>");
				map.Cascade(Cascade.None);
			});
		<#
		}
		i++;
	}
        #>
		}
	}
<#
}

foreach (var table in schema.Views)
{
#>
	public class <#=table.Key#>Map : ClassMapping<<#=table.Key#>>
	{
		public <#=table.Key#>Map() 
		{
			Schema("dbo");
			Lazy(true);

			Id(x => x.<#=table.Value.Columns.First().Key #>);
	<# 
	foreach (var column in table.Value.Columns)
	{
		if (column.Value.Type is Nephrite.Meta.MetaGuidType)
		{

			if (column.Value.Nullable)
			{
				#>
			Property(x => x.<#=column.Key #>, map => { map.NotNullable(false);  map.Type<StringBackedGuidUserType>();});
		<#
			}
			else
			{
				#>
			Property(x => x.<#=column.Key #>, map => map.Type<StringBackedGuidUserType>());
		<#
			}
		}
		else
		{
			if (column.Value.Nullable)
			{
				#>
			Property(x => x.<#=column.Key #>, map => map.NotNullable(false));
		<#
			}
			else
			{
				#>
			Property(x => x.<#=column.Key #>);
		<#
			}
		}
	}
        #>
		}
	}
<#
}
foreach (var procDetails in qlServerMetadataReader.ReadProceduresDetails().Where(t => t.Columns !=null && t.Columns.Values.Count > 0).Select(t => t).ToList())
{
#>
	public class <#=procDetails.ReturnType#>Map : ClassMapping<<#=procDetails.ReturnType#>>
	{
		public <#=procDetails.ReturnType#>Map() 
		{
			Id(x => x.<#=procDetails.Columns.First().Key #>);
<#
	foreach (var column in procDetails.Columns)
	{
		if (column.Value =="System.Guid")
		{
		#>		 
			Property(x => x.<#=column.Key#>, map => map.Type<StringBackedGuidUserType>());
		<#
		}
		else
		{
		#>		 
			Property(x => x.<#=column.Key#>);
		<#
		}

	}
#>
     		}
	}
<# } #>
}