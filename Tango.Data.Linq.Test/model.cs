#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Solution.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;


	[System.Data.Linq.Mapping.DatabaseAttribute(Name = "licweb")]
	public partial class modelDataContext : System.Data.Linq.DataContext
	{

		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

		#region Extensibility Method Definitions
		partial void OnCreated();
		partial void InsertAppendix(Appendix instance);
		partial void UpdateAppendix(Appendix instance);
		partial void DeleteAppendix(Appendix instance);
		partial void InsertAppendixCommDocs(AppendixCommDocs instance);
		partial void UpdateAppendixCommDocs(AppendixCommDocs instance);
		partial void DeleteAppendixCommDocs(AppendixCommDocs instance);
		partial void InsertAppendixQuantity(AppendixQuantity instance);
		partial void UpdateAppendixQuantity(AppendixQuantity instance);
		partial void DeleteAppendixQuantity(AppendixQuantity instance);
		partial void InsertArticle(Article instance);
		partial void UpdateArticle(Article instance);
		partial void DeleteArticle(Article instance);
		partial void InsertArticleData(ArticleData instance);
		partial void UpdateArticleData(ArticleData instance);
		partial void DeleteArticleData(ArticleData instance);
		partial void InsertBlank(Blank instance);
		partial void UpdateBlank(Blank instance);
		partial void DeleteBlank(Blank instance);
		partial void InsertBlankTransition(BlankTransition instance);
		partial void UpdateBlankTransition(BlankTransition instance);
		partial void DeleteBlankTransition(BlankTransition instance);
		partial void InsertC_AnnulmentReason(C_AnnulmentReason instance);
		partial void UpdateC_AnnulmentReason(C_AnnulmentReason instance);
		partial void DeleteC_AnnulmentReason(C_AnnulmentReason instance);
		partial void InsertC_CatalogRestriction(C_CatalogRestriction instance);
		partial void UpdateC_CatalogRestriction(C_CatalogRestriction instance);
		partial void DeleteC_CatalogRestriction(C_CatalogRestriction instance);
		partial void InsertC_CatalogRestrictionCNCategories(C_CatalogRestrictionCNCategories instance);
		partial void UpdateC_CatalogRestrictionCNCategories(C_CatalogRestrictionCNCategories instance);
		partial void DeleteC_CatalogRestrictionCNCategories(C_CatalogRestrictionCNCategories instance);
		partial void InsertC_CN(C_CN instance);
		partial void UpdateC_CN(C_CN instance);
		partial void DeleteC_CN(C_CN instance);
		partial void InsertC_CNCategory(C_CNCategory instance);
		partial void UpdateC_CNCategory(C_CNCategory instance);
		partial void DeleteC_CNCategory(C_CNCategory instance);
		partial void InsertC_CNCategoryCN(C_CNCategoryCN instance);
		partial void UpdateC_CNCategoryCN(C_CNCategoryCN instance);
		partial void DeleteC_CNCategoryCN(C_CNCategoryCN instance);
		partial void InsertC_CNCategoryDocument(C_CNCategoryDocument instance);
		partial void UpdateC_CNCategoryDocument(C_CNCategoryDocument instance);
		partial void DeleteC_CNCategoryDocument(C_CNCategoryDocument instance);
		partial void InsertC_CNCategoryFGADocument(C_CNCategoryFGADocument instance);
		partial void UpdateC_CNCategoryFGADocument(C_CNCategoryFGADocument instance);
		partial void DeleteC_CNCategoryFGADocument(C_CNCategoryFGADocument instance);
		partial void InsertC_CNCategoryItem(C_CNCategoryItem instance);
		partial void UpdateC_CNCategoryItem(C_CNCategoryItem instance);
		partial void DeleteC_CNCategoryItem(C_CNCategoryItem instance);
		partial void InsertC_CNCategoryItemRepresentations(C_CNCategoryItemRepresentations instance);
		partial void UpdateC_CNCategoryItemRepresentations(C_CNCategoryItemRepresentations instance);
		partial void DeleteC_CNCategoryItemRepresentations(C_CNCategoryItemRepresentations instance);
		partial void InsertC_CNCategoryOperationType(C_CNCategoryOperationType instance);
		partial void UpdateC_CNCategoryOperationType(C_CNCategoryOperationType instance);
		partial void DeleteC_CNCategoryOperationType(C_CNCategoryOperationType instance);
		partial void InsertC_CNCategoryRepresentations(C_CNCategoryRepresentations instance);
		partial void UpdateC_CNCategoryRepresentations(C_CNCategoryRepresentations instance);
		partial void DeleteC_CNCategoryRepresentations(C_CNCategoryRepresentations instance);
		partial void InsertC_CNGroup(C_CNGroup instance);
		partial void UpdateC_CNGroup(C_CNGroup instance);
		partial void DeleteC_CNGroup(C_CNGroup instance);
		partial void InsertC_CNGroupCN(C_CNGroupCN instance);
		partial void UpdateC_CNGroupCN(C_CNGroupCN instance);
		partial void DeleteC_CNGroupCN(C_CNGroupCN instance);
		partial void InsertC_CNType(C_CNType instance);
		partial void UpdateC_CNType(C_CNType instance);
		partial void DeleteC_CNType(C_CNType instance);
		partial void InsertC_Country(C_Country instance);
		partial void UpdateC_Country(C_Country instance);
		partial void DeleteC_Country(C_Country instance);
		partial void InsertC_CountryGroup(C_CountryGroup instance);
		partial void UpdateC_CountryGroup(C_CountryGroup instance);
		partial void DeleteC_CountryGroup(C_CountryGroup instance);
		partial void InsertC_CountryGroupCountries(C_CountryGroupCountries instance);
		partial void UpdateC_CountryGroupCountries(C_CountryGroupCountries instance);
		partial void DeleteC_CountryGroupCountries(C_CountryGroupCountries instance);
		partial void InsertC_Crypto(C_Crypto instance);
		partial void UpdateC_Crypto(C_Crypto instance);
		partial void DeleteC_Crypto(C_Crypto instance);
		partial void InsertC_Currency(C_Currency instance);
		partial void UpdateC_Currency(C_Currency instance);
		partial void DeleteC_Currency(C_Currency instance);
		partial void InsertC_CustomHouse(C_CustomHouse instance);
		partial void UpdateC_CustomHouse(C_CustomHouse instance);
		partial void DeleteC_CustomHouse(C_CustomHouse instance);
		partial void InsertC_CustomHouseContact(C_CustomHouseContact instance);
		partial void UpdateC_CustomHouseContact(C_CustomHouseContact instance);
		partial void DeleteC_CustomHouseContact(C_CustomHouseContact instance);
		partial void InsertC_DocumentSourceType(C_DocumentSourceType instance);
		partial void UpdateC_DocumentSourceType(C_DocumentSourceType instance);
		partial void DeleteC_DocumentSourceType(C_DocumentSourceType instance);
		partial void InsertC_DocumentType(C_DocumentType instance);
		partial void UpdateC_DocumentType(C_DocumentType instance);
		partial void DeleteC_DocumentType(C_DocumentType instance);
		partial void InsertC_FGA(C_FGA instance);
		partial void UpdateC_FGA(C_FGA instance);
		partial void DeleteC_FGA(C_FGA instance);
		partial void InsertC_FGADocument(C_FGADocument instance);
		partial void UpdateC_FGADocument(C_FGADocument instance);
		partial void DeleteC_FGADocument(C_FGADocument instance);
		partial void InsertC_FGADocumentSigner(C_FGADocumentSigner instance);
		partial void UpdateC_FGADocumentSigner(C_FGADocumentSigner instance);
		partial void DeleteC_FGADocumentSigner(C_FGADocumentSigner instance);
		partial void InsertC_FtsCN(C_FtsCN instance);
		partial void UpdateC_FtsCN(C_FtsCN instance);
		partial void DeleteC_FtsCN(C_FtsCN instance);
		partial void InsertC_FtsCountry(C_FtsCountry instance);
		partial void UpdateC_FtsCountry(C_FtsCountry instance);
		partial void DeleteC_FtsCountry(C_FtsCountry instance);
		partial void InsertC_FtsCustomHouse(C_FtsCustomHouse instance);
		partial void UpdateC_FtsCustomHouse(C_FtsCustomHouse instance);
		partial void DeleteC_FtsCustomHouse(C_FtsCustomHouse instance);
		partial void InsertC_Help(C_Help instance);
		partial void UpdateC_Help(C_Help instance);
		partial void DeleteC_Help(C_Help instance);
		partial void InsertC_Language(C_Language instance);
		partial void UpdateC_Language(C_Language instance);
		partial void DeleteC_Language(C_Language instance);
		partial void InsertC_LawOrgan(C_LawOrgan instance);
		partial void UpdateC_LawOrgan(C_LawOrgan instance);
		partial void DeleteC_LawOrgan(C_LawOrgan instance);
		partial void InsertC_LegalDocument(C_LegalDocument instance);
		partial void UpdateC_LegalDocument(C_LegalDocument instance);
		partial void DeleteC_LegalDocument(C_LegalDocument instance);
		partial void InsertC_LegalDocumentCNCategories(C_LegalDocumentCNCategories instance);
		partial void UpdateC_LegalDocumentCNCategories(C_LegalDocumentCNCategories instance);
		partial void DeleteC_LegalDocumentCNCategories(C_LegalDocumentCNCategories instance);
		partial void InsertC_LegalDocumentCNGroups(C_LegalDocumentCNGroups instance);
		partial void UpdateC_LegalDocumentCNGroups(C_LegalDocumentCNGroups instance);
		partial void DeleteC_LegalDocumentCNGroups(C_LegalDocumentCNGroups instance);
		partial void InsertC_LegalDocumentRestrictions(C_LegalDocumentRestrictions instance);
		partial void UpdateC_LegalDocumentRestrictions(C_LegalDocumentRestrictions instance);
		partial void DeleteC_LegalDocumentRestrictions(C_LegalDocumentRestrictions instance);
		partial void InsertC_LegalDocumentType(C_LegalDocumentType instance);
		partial void UpdateC_LegalDocumentType(C_LegalDocumentType instance);
		partial void DeleteC_LegalDocumentType(C_LegalDocumentType instance);
		partial void InsertC_LicenseType(C_LicenseType instance);
		partial void UpdateC_LicenseType(C_LicenseType instance);
		partial void DeleteC_LicenseType(C_LicenseType instance);
		partial void InsertC_MaxTargetValidity(C_MaxTargetValidity instance);
		partial void UpdateC_MaxTargetValidity(C_MaxTargetValidity instance);
		partial void DeleteC_MaxTargetValidity(C_MaxTargetValidity instance);
		partial void InsertC_Measure(C_Measure instance);
		partial void UpdateC_Measure(C_Measure instance);
		partial void DeleteC_Measure(C_Measure instance);
		partial void InsertC_MFC(C_MFC instance);
		partial void UpdateC_MFC(C_MFC instance);
		partial void DeleteC_MFC(C_MFC instance);
		partial void InsertC_OperationType(C_OperationType instance);
		partial void UpdateC_OperationType(C_OperationType instance);
		partial void DeleteC_OperationType(C_OperationType instance);
		partial void InsertC_QuoteCategory(C_QuoteCategory instance);
		partial void UpdateC_QuoteCategory(C_QuoteCategory instance);
		partial void DeleteC_QuoteCategory(C_QuoteCategory instance);
		partial void InsertC_RES(C_RES instance);
		partial void UpdateC_RES(C_RES instance);
		partial void DeleteC_RES(C_RES instance);
		partial void InsertC_RFSubject(C_RFSubject instance);
		partial void UpdateC_RFSubject(C_RFSubject instance);
		partial void DeleteC_RFSubject(C_RFSubject instance);
		partial void InsertC_Tariff(C_Tariff instance);
		partial void UpdateC_Tariff(C_Tariff instance);
		partial void DeleteC_Tariff(C_Tariff instance);
		partial void InsertC_UseType(C_UseType instance);
		partial void UpdateC_UseType(C_UseType instance);
		partial void DeleteC_UseType(C_UseType instance);
		partial void InsertC_VisitPurpose(C_VisitPurpose instance);
		partial void UpdateC_VisitPurpose(C_VisitPurpose instance);
		partial void DeleteC_VisitPurpose(C_VisitPurpose instance);
		partial void InsertCalendarDay(CalendarDay instance);
		partial void UpdateCalendarDay(CalendarDay instance);
		partial void DeleteCalendarDay(CalendarDay instance);
		partial void InsertCommodityDocument(CommodityDocument instance);
		partial void UpdateCommodityDocument(CommodityDocument instance);
		partial void DeleteCommodityDocument(CommodityDocument instance);
		partial void InsertContractor(Contractor instance);
		partial void UpdateContractor(Contractor instance);
		partial void DeleteContractor(Contractor instance);
		partial void InsertContractorChiefPerson(ContractorChiefPerson instance);
		partial void UpdateContractorChiefPerson(ContractorChiefPerson instance);
		partial void DeleteContractorChiefPerson(ContractorChiefPerson instance);
		partial void InsertControlParameters(ControlParameters instance);
		partial void UpdateControlParameters(ControlParameters instance);
		partial void DeleteControlParameters(ControlParameters instance);
		partial void InsertCopy_ContractorChiefPerson(Copy_ContractorChiefPerson instance);
		partial void UpdateCopy_ContractorChiefPerson(Copy_ContractorChiefPerson instance);
		partial void DeleteCopy_ContractorChiefPerson(Copy_ContractorChiefPerson instance);
		partial void InsertCustomsDeclaration(CustomsDeclaration instance);
		partial void UpdateCustomsDeclaration(CustomsDeclaration instance);
		partial void DeleteCustomsDeclaration(CustomsDeclaration instance);
		partial void InsertDocument(Document instance);
		partial void UpdateDocument(Document instance);
		partial void DeleteDocument(Document instance);
		partial void InsertDocumentData(DocumentData instance);
		partial void UpdateDocumentData(DocumentData instance);
		partial void DeleteDocumentData(DocumentData instance);
		partial void InsertEmployee(Employee instance);
		partial void UpdateEmployee(Employee instance);
		partial void DeleteEmployee(Employee instance);
		partial void InsertErrorLog(ErrorLog instance);
		partial void UpdateErrorLog(ErrorLog instance);
		partial void DeleteErrorLog(ErrorLog instance);
		partial void InsertEsiaActivateLog(EsiaActivateLog instance);
		partial void UpdateEsiaActivateLog(EsiaActivateLog instance);
		partial void DeleteEsiaActivateLog(EsiaActivateLog instance);
		partial void InsertEsiaSession(EsiaSession instance);
		partial void UpdateEsiaSession(EsiaSession instance);
		partial void DeleteEsiaSession(EsiaSession instance);
		partial void InsertFactAnnulment(FactAnnulment instance);
		partial void UpdateFactAnnulment(FactAnnulment instance);
		partial void DeleteFactAnnulment(FactAnnulment instance);
		partial void InsertFactClose(FactClose instance);
		partial void UpdateFactClose(FactClose instance);
		partial void DeleteFactClose(FactClose instance);
		partial void InsertFactForm(FactForm instance);
		partial void UpdateFactForm(FactForm instance);
		partial void DeleteFactForm(FactForm instance);
		partial void InsertFactRegister(FactRegister instance);
		partial void UpdateFactRegister(FactRegister instance);
		partial void DeleteFactRegister(FactRegister instance);
		partial void InsertFactReject(FactReject instance);
		partial void UpdateFactReject(FactReject instance);
		partial void DeleteFactReject(FactReject instance);
		partial void InsertFactResume(FactResume instance);
		partial void UpdateFactResume(FactResume instance);
		partial void DeleteFactResume(FactResume instance);
		partial void InsertFactSuspend(FactSuspend instance);
		partial void UpdateFactSuspend(FactSuspend instance);
		partial void DeleteFactSuspend(FactSuspend instance);
		partial void InsertForeignAuthorization(ForeignAuthorization instance);
		partial void UpdateForeignAuthorization(ForeignAuthorization instance);
		partial void DeleteForeignAuthorization(ForeignAuthorization instance);
		partial void InsertFullCN(FullCN instance);
		partial void UpdateFullCN(FullCN instance);
		partial void DeleteFullCN(FullCN instance);
		partial void InsertFullRepresentation(FullRepresentation instance);
		partial void UpdateFullRepresentation(FullRepresentation instance);
		partial void DeleteFullRepresentation(FullRepresentation instance);
		partial void InsertHST_Contractor(HST_Contractor instance);
		partial void UpdateHST_Contractor(HST_Contractor instance);
		partial void DeleteHST_Contractor(HST_Contractor instance);
		partial void InsertHST_MM_FormView(HST_MM_FormView instance);
		partial void UpdateHST_MM_FormView(HST_MM_FormView instance);
		partial void DeleteHST_MM_FormView(HST_MM_FormView instance);
		partial void InsertHST_N_TimeZone(HST_N_TimeZone instance);
		partial void UpdateHST_N_TimeZone(HST_N_TimeZone instance);
		partial void DeleteHST_N_TimeZone(HST_N_TimeZone instance);
		partial void InsertINT_Command(INT_Command instance);
		partial void UpdateINT_Command(INT_Command instance);
		partial void DeleteINT_Command(INT_Command instance);
		partial void InsertINT_Handler(INT_Handler instance);
		partial void UpdateINT_Handler(INT_Handler instance);
		partial void DeleteINT_Handler(INT_Handler instance);
		partial void InsertINT_Log(INT_Log instance);
		partial void UpdateINT_Log(INT_Log instance);
		partial void DeleteINT_Log(INT_Log instance);
		partial void InsertINT_System(INT_System instance);
		partial void UpdateINT_System(INT_System instance);
		partial void DeleteINT_System(INT_System instance);
		partial void InsertLetter(Letter instance);
		partial void UpdateLetter(Letter instance);
		partial void DeleteLetter(Letter instance);
		partial void InsertLicenseExecution(LicenseExecution instance);
		partial void UpdateLicenseExecution(LicenseExecution instance);
		partial void DeleteLicenseExecution(LicenseExecution instance);
		partial void InsertLicenseExecutionAlert(LicenseExecutionAlert instance);
		partial void UpdateLicenseExecutionAlert(LicenseExecutionAlert instance);
		partial void DeleteLicenseExecutionAlert(LicenseExecutionAlert instance);
		partial void InsertMailMessage(MailMessage instance);
		partial void UpdateMailMessage(MailMessage instance);
		partial void DeleteMailMessage(MailMessage instance);
		partial void InsertMailTemplate(MailTemplate instance);
		partial void UpdateMailTemplate(MailTemplate instance);
		partial void DeleteMailTemplate(MailTemplate instance);
		partial void InsertMM_Codifier(MM_Codifier instance);
		partial void UpdateMM_Codifier(MM_Codifier instance);
		partial void DeleteMM_Codifier(MM_Codifier instance);
		partial void InsertMM_CodifierValue(MM_CodifierValue instance);
		partial void UpdateMM_CodifierValue(MM_CodifierValue instance);
		partial void DeleteMM_CodifierValue(MM_CodifierValue instance);
		partial void InsertMM_DataValidation(MM_DataValidation instance);
		partial void UpdateMM_DataValidation(MM_DataValidation instance);
		partial void DeleteMM_DataValidation(MM_DataValidation instance);
		partial void InsertMM_FormField(MM_FormField instance);
		partial void UpdateMM_FormField(MM_FormField instance);
		partial void DeleteMM_FormField(MM_FormField instance);
		partial void InsertMM_FormFieldAttribute(MM_FormFieldAttribute instance);
		partial void UpdateMM_FormFieldAttribute(MM_FormFieldAttribute instance);
		partial void DeleteMM_FormFieldAttribute(MM_FormFieldAttribute instance);
		partial void InsertMM_FormFieldGroup(MM_FormFieldGroup instance);
		partial void UpdateMM_FormFieldGroup(MM_FormFieldGroup instance);
		partial void DeleteMM_FormFieldGroup(MM_FormFieldGroup instance);
		partial void InsertMM_FormView(MM_FormView instance);
		partial void UpdateMM_FormView(MM_FormView instance);
		partial void DeleteMM_FormView(MM_FormView instance);
		partial void InsertMM_Group(MM_Group instance);
		partial void UpdateMM_Group(MM_Group instance);
		partial void DeleteMM_Group(MM_Group instance);
		partial void InsertMM_GroupAsso(MM_GroupAsso instance);
		partial void UpdateMM_GroupAsso(MM_GroupAsso instance);
		partial void DeleteMM_GroupAsso(MM_GroupAsso instance);
		partial void InsertMM_Method(MM_Method instance);
		partial void UpdateMM_Method(MM_Method instance);
		partial void DeleteMM_Method(MM_Method instance);
		partial void InsertMM_MethodGroup(MM_MethodGroup instance);
		partial void UpdateMM_MethodGroup(MM_MethodGroup instance);
		partial void DeleteMM_MethodGroup(MM_MethodGroup instance);
		partial void InsertMM_MethodGroupItem(MM_MethodGroupItem instance);
		partial void UpdateMM_MethodGroupItem(MM_MethodGroupItem instance);
		partial void DeleteMM_MethodGroupItem(MM_MethodGroupItem instance);
		partial void InsertMM_MethodParameter(MM_MethodParameter instance);
		partial void UpdateMM_MethodParameter(MM_MethodParameter instance);
		partial void DeleteMM_MethodParameter(MM_MethodParameter instance);
		partial void InsertMM_ObjectProperty(MM_ObjectProperty instance);
		partial void UpdateMM_ObjectProperty(MM_ObjectProperty instance);
		partial void DeleteMM_ObjectProperty(MM_ObjectProperty instance);
		partial void InsertMM_ObjectType(MM_ObjectType instance);
		partial void UpdateMM_ObjectType(MM_ObjectType instance);
		partial void DeleteMM_ObjectType(MM_ObjectType instance);
		partial void InsertMM_ObjectTypeStereotypes(MM_ObjectTypeStereotypes instance);
		partial void UpdateMM_ObjectTypeStereotypes(MM_ObjectTypeStereotypes instance);
		partial void DeleteMM_ObjectTypeStereotypes(MM_ObjectTypeStereotypes instance);
		partial void InsertMM_Package(MM_Package instance);
		partial void UpdateMM_Package(MM_Package instance);
		partial void DeleteMM_Package(MM_Package instance);
		partial void InsertMM_Predicate(MM_Predicate instance);
		partial void UpdateMM_Predicate(MM_Predicate instance);
		partial void DeleteMM_Predicate(MM_Predicate instance);
		partial void InsertMM_TaggedValueType(MM_TaggedValueType instance);
		partial void UpdateMM_TaggedValueType(MM_TaggedValueType instance);
		partial void DeleteMM_TaggedValueType(MM_TaggedValueType instance);
		partial void InsertMMA_SiteInfoobjects(MMA_SiteInfoobjects instance);
		partial void UpdateMMA_SiteInfoobjects(MMA_SiteInfoobjects instance);
		partial void DeleteMMA_SiteInfoobjects(MMA_SiteInfoobjects instance);
		partial void InsertMMS_ChangeLog(MMS_ChangeLog instance);
		partial void UpdateMMS_ChangeLog(MMS_ChangeLog instance);
		partial void DeleteMMS_ChangeLog(MMS_ChangeLog instance);
		partial void InsertMMS_ClassStereotype(MMS_ClassStereotype instance);
		partial void UpdateMMS_ClassStereotype(MMS_ClassStereotype instance);
		partial void DeleteMMS_ClassStereotype(MMS_ClassStereotype instance);
		partial void InsertMMS_Replication(MMS_Replication instance);
		partial void UpdateMMS_Replication(MMS_Replication instance);
		partial void DeleteMMS_Replication(MMS_Replication instance);
		partial void InsertMMS_Versioning(MMS_Versioning instance);
		partial void UpdateMMS_Versioning(MMS_Versioning instance);
		partial void DeleteMMS_Versioning(MMS_Versioning instance);
		partial void InsertN_Cache(N_Cache instance);
		partial void UpdateN_Cache(N_Cache instance);
		partial void DeleteN_Cache(N_Cache instance);
		partial void InsertN_DDL(N_DDL instance);
		partial void UpdateN_DDL(N_DDL instance);
		partial void DeleteN_DDL(N_DDL instance);
		partial void InsertN_DownloadLog(N_DownloadLog instance);
		partial void UpdateN_DownloadLog(N_DownloadLog instance);
		partial void DeleteN_DownloadLog(N_DownloadLog instance);
		partial void InsertN_File(N_File instance);
		partial void UpdateN_File(N_File instance);
		partial void DeleteN_File(N_File instance);
		partial void InsertN_FileData(N_FileData instance);
		partial void UpdateN_FileData(N_FileData instance);
		partial void DeleteN_FileData(N_FileData instance);
		partial void InsertN_FileLibrary(N_FileLibrary instance);
		partial void UpdateN_FileLibrary(N_FileLibrary instance);
		partial void DeleteN_FileLibrary(N_FileLibrary instance);
		partial void InsertN_FileLibraryType(N_FileLibraryType instance);
		partial void UpdateN_FileLibraryType(N_FileLibraryType instance);
		partial void DeleteN_FileLibraryType(N_FileLibraryType instance);
		partial void InsertN_FileList(N_FileList instance);
		partial void UpdateN_FileList(N_FileList instance);
		partial void DeleteN_FileList(N_FileList instance);
		partial void InsertN_FileListItem(N_FileListItem instance);
		partial void UpdateN_FileListItem(N_FileListItem instance);
		partial void DeleteN_FileListItem(N_FileListItem instance);
		partial void InsertN_Filter(N_Filter instance);
		partial void UpdateN_Filter(N_Filter instance);
		partial void DeleteN_Filter(N_Filter instance);
		partial void InsertN_Folder(N_Folder instance);
		partial void UpdateN_Folder(N_Folder instance);
		partial void DeleteN_Folder(N_Folder instance);
		partial void InsertN_FolderPredicate(N_FolderPredicate instance);
		partial void UpdateN_FolderPredicate(N_FolderPredicate instance);
		partial void DeleteN_FolderPredicate(N_FolderPredicate instance);
		partial void InsertN_Image(N_Image instance);
		partial void UpdateN_Image(N_Image instance);
		partial void DeleteN_Image(N_Image instance);
		partial void InsertN_MenuItem(N_MenuItem instance);
		partial void UpdateN_MenuItem(N_MenuItem instance);
		partial void DeleteN_MenuItem(N_MenuItem instance);
		partial void InsertN_ObjectChange(N_ObjectChange instance);
		partial void UpdateN_ObjectChange(N_ObjectChange instance);
		partial void DeleteN_ObjectChange(N_ObjectChange instance);
		partial void InsertN_ObjectPropertyChange(N_ObjectPropertyChange instance);
		partial void UpdateN_ObjectPropertyChange(N_ObjectPropertyChange instance);
		partial void DeleteN_ObjectPropertyChange(N_ObjectPropertyChange instance);
		partial void InsertN_ReplicationObject(N_ReplicationObject instance);
		partial void UpdateN_ReplicationObject(N_ReplicationObject instance);
		partial void DeleteN_ReplicationObject(N_ReplicationObject instance);
		partial void InsertN_RssFeed(N_RssFeed instance);
		partial void UpdateN_RssFeed(N_RssFeed instance);
		partial void DeleteN_RssFeed(N_RssFeed instance);
		partial void InsertN_Settings(N_Settings instance);
		partial void UpdateN_Settings(N_Settings instance);
		partial void DeleteN_Settings(N_Settings instance);
		partial void InsertN_SqlStatementLog(N_SqlStatementLog instance);
		partial void UpdateN_SqlStatementLog(N_SqlStatementLog instance);
		partial void DeleteN_SqlStatementLog(N_SqlStatementLog instance);
		partial void InsertN_TableInfo(N_TableInfo instance);
		partial void UpdateN_TableInfo(N_TableInfo instance);
		partial void DeleteN_TableInfo(N_TableInfo instance);
		partial void InsertN_TextResource(N_TextResource instance);
		partial void UpdateN_TextResource(N_TextResource instance);
		partial void DeleteN_TextResource(N_TextResource instance);
		partial void InsertN_TextResourceData(N_TextResourceData instance);
		partial void UpdateN_TextResourceData(N_TextResourceData instance);
		partial void DeleteN_TextResourceData(N_TextResourceData instance);
		partial void InsertN_TimeZone(N_TimeZone instance);
		partial void UpdateN_TimeZone(N_TimeZone instance);
		partial void DeleteN_TimeZone(N_TimeZone instance);
		partial void InsertN_VirusScanLog(N_VirusScanLog instance);
		partial void UpdateN_VirusScanLog(N_VirusScanLog instance);
		partial void DeleteN_VirusScanLog(N_VirusScanLog instance);
		partial void InsertNews(News instance);
		partial void UpdateNews(News instance);
		partial void DeleteNews(News instance);
		partial void InsertNewsData(NewsData instance);
		partial void UpdateNewsData(NewsData instance);
		partial void DeleteNewsData(NewsData instance);
		partial void InsertOrderDoc(OrderDoc instance);
		partial void UpdateOrderDoc(OrderDoc instance);
		partial void DeleteOrderDoc(OrderDoc instance);
		partial void InsertOrderDocAsso(OrderDocAsso instance);
		partial void UpdateOrderDocAsso(OrderDocAsso instance);
		partial void DeleteOrderDocAsso(OrderDocAsso instance);
		partial void InsertOrderDocDeviation(OrderDocDeviation instance);
		partial void UpdateOrderDocDeviation(OrderDocDeviation instance);
		partial void DeleteOrderDocDeviation(OrderDocDeviation instance);
		partial void InsertOrderDocImportSubject(OrderDocImportSubject instance);
		partial void UpdateOrderDocImportSubject(OrderDocImportSubject instance);
		partial void DeleteOrderDocImportSubject(OrderDocImportSubject instance);
		partial void InsertOrderDocLicReplication(OrderDocLicReplication instance);
		partial void UpdateOrderDocLicReplication(OrderDocLicReplication instance);
		partial void DeleteOrderDocLicReplication(OrderDocLicReplication instance);
		partial void InsertOrderDocState(OrderDocState instance);
		partial void UpdateOrderDocState(OrderDocState instance);
		partial void DeleteOrderDocState(OrderDocState instance);
		partial void InsertOrderDocTransition(OrderDocTransition instance);
		partial void UpdateOrderDocTransition(OrderDocTransition instance);
		partial void DeleteOrderDocTransition(OrderDocTransition instance);
		partial void InsertPaymentOrder(PaymentOrder instance);
		partial void UpdatePaymentOrder(PaymentOrder instance);
		partial void DeletePaymentOrder(PaymentOrder instance);
		partial void InsertPaymentOrderLicenses(PaymentOrderLicenses instance);
		partial void UpdatePaymentOrderLicenses(PaymentOrderLicenses instance);
		partial void DeletePaymentOrderLicenses(PaymentOrderLicenses instance);
		partial void InsertPaymentOrderRequests(PaymentOrderRequests instance);
		partial void UpdatePaymentOrderRequests(PaymentOrderRequests instance);
		partial void DeletePaymentOrderRequests(PaymentOrderRequests instance);
		partial void InsertPerfomanceStat(PerfomanceStat instance);
		partial void UpdatePerfomanceStat(PerfomanceStat instance);
		partial void DeletePerfomanceStat(PerfomanceStat instance);
		partial void InsertQuota(Quota instance);
		partial void UpdateQuota(Quota instance);
		partial void DeleteQuota(Quota instance);
		partial void InsertQuotaDistribution(QuotaDistribution instance);
		partial void UpdateQuotaDistribution(QuotaDistribution instance);
		partial void DeleteQuotaDistribution(QuotaDistribution instance);
		partial void InsertQuotaRedistribution(QuotaRedistribution instance);
		partial void UpdateQuotaRedistribution(QuotaRedistribution instance);
		partial void DeleteQuotaRedistribution(QuotaRedistribution instance);
		partial void InsertQuotaRequest(QuotaRequest instance);
		partial void UpdateQuotaRequest(QuotaRequest instance);
		partial void DeleteQuotaRequest(QuotaRequest instance);
		partial void InsertReplicatedFile(ReplicatedFile instance);
		partial void UpdateReplicatedFile(ReplicatedFile instance);
		partial void DeleteReplicatedFile(ReplicatedFile instance);
		partial void InsertRepresentation(Representation instance);
		partial void UpdateRepresentation(Representation instance);
		partial void DeleteRepresentation(Representation instance);
		partial void InsertRFSubject(RFSubject instance);
		partial void UpdateRFSubject(RFSubject instance);
		partial void DeleteRFSubject(RFSubject instance);
		partial void InsertRFSubjectData(RFSubjectData instance);
		partial void UpdateRFSubjectData(RFSubjectData instance);
		partial void DeleteRFSubjectData(RFSubjectData instance);
		partial void InsertSimplePage(SimplePage instance);
		partial void UpdateSimplePage(SimplePage instance);
		partial void DeleteSimplePage(SimplePage instance);
		partial void InsertSimplePageData(SimplePageData instance);
		partial void UpdateSimplePageData(SimplePageData instance);
		partial void DeleteSimplePageData(SimplePageData instance);
		partial void InsertSiteInfoobjects(SiteInfoobjects instance);
		partial void UpdateSiteInfoobjects(SiteInfoobjects instance);
		partial void DeleteSiteInfoobjects(SiteInfoobjects instance);
		partial void InsertSiteItem(SiteItem instance);
		partial void UpdateSiteItem(SiteItem instance);
		partial void DeleteSiteItem(SiteItem instance);
		partial void InsertSiteItemHtml(SiteItemHtml instance);
		partial void UpdateSiteItemHtml(SiteItemHtml instance);
		partial void DeleteSiteItemHtml(SiteItemHtml instance);
		partial void InsertSiteItemHtmlFolder(SiteItemHtmlFolder instance);
		partial void UpdateSiteItemHtmlFolder(SiteItemHtmlFolder instance);
		partial void DeleteSiteItemHtmlFolder(SiteItemHtmlFolder instance);
		partial void InsertSiteItemsFolder(SiteItemsFolder instance);
		partial void UpdateSiteItemsFolder(SiteItemsFolder instance);
		partial void DeleteSiteItemsFolder(SiteItemsFolder instance);
		partial void InsertSiteObject(SiteObject instance);
		partial void UpdateSiteObject(SiteObject instance);
		partial void DeleteSiteObject(SiteObject instance);
		partial void InsertSiteObjectData(SiteObjectData instance);
		partial void UpdateSiteObjectData(SiteObjectData instance);
		partial void DeleteSiteObjectData(SiteObjectData instance);
		partial void InsertSiteSection(SiteSection instance);
		partial void UpdateSiteSection(SiteSection instance);
		partial void DeleteSiteSection(SiteSection instance);
		partial void InsertSiteSectionBind(SiteSectionBind instance);
		partial void UpdateSiteSectionBind(SiteSectionBind instance);
		partial void DeleteSiteSectionBind(SiteSectionBind instance);
		partial void InsertSiteSectionData(SiteSectionData instance);
		partial void UpdateSiteSectionData(SiteSectionData instance);
		partial void DeleteSiteSectionData(SiteSectionData instance);
		partial void InsertSpecificationCommon(SpecificationCommon instance);
		partial void UpdateSpecificationCommon(SpecificationCommon instance);
		partial void DeleteSpecificationCommon(SpecificationCommon instance);
		partial void InsertSpecificationItem(SpecificationItem instance);
		partial void UpdateSpecificationItem(SpecificationItem instance);
		partial void DeleteSpecificationItem(SpecificationItem instance);
		partial void InsertSPM_Action(SPM_Action instance);
		partial void UpdateSPM_Action(SPM_Action instance);
		partial void DeleteSPM_Action(SPM_Action instance);
		partial void InsertSPM_ActionAsso(SPM_ActionAsso instance);
		partial void UpdateSPM_ActionAsso(SPM_ActionAsso instance);
		partial void DeleteSPM_ActionAsso(SPM_ActionAsso instance);
		partial void InsertSPM_AvailableRoleForGrant(SPM_AvailableRoleForGrant instance);
		partial void UpdateSPM_AvailableRoleForGrant(SPM_AvailableRoleForGrant instance);
		partial void DeleteSPM_AvailableRoleForGrant(SPM_AvailableRoleForGrant instance);
		partial void InsertSPM_C_RoleType(SPM_C_RoleType instance);
		partial void UpdateSPM_C_RoleType(SPM_C_RoleType instance);
		partial void DeleteSPM_C_RoleType(SPM_C_RoleType instance);
		partial void InsertSPM_Role(SPM_Role instance);
		partial void UpdateSPM_Role(SPM_Role instance);
		partial void DeleteSPM_Role(SPM_Role instance);
		partial void InsertSPM_RoleAccess(SPM_RoleAccess instance);
		partial void UpdateSPM_RoleAccess(SPM_RoleAccess instance);
		partial void DeleteSPM_RoleAccess(SPM_RoleAccess instance);
		partial void InsertSPM_RoleAsso(SPM_RoleAsso instance);
		partial void UpdateSPM_RoleAsso(SPM_RoleAsso instance);
		partial void DeleteSPM_RoleAsso(SPM_RoleAsso instance);
		partial void InsertSPM_RoleGroup(SPM_RoleGroup instance);
		partial void UpdateSPM_RoleGroup(SPM_RoleGroup instance);
		partial void DeleteSPM_RoleGroup(SPM_RoleGroup instance);
		partial void InsertSPM_Subject(SPM_Subject instance);
		partial void UpdateSPM_Subject(SPM_Subject instance);
		partial void DeleteSPM_Subject(SPM_Subject instance);
		partial void InsertSPM_SubjectAccess(SPM_SubjectAccess instance);
		partial void UpdateSPM_SubjectAccess(SPM_SubjectAccess instance);
		partial void DeleteSPM_SubjectAccess(SPM_SubjectAccess instance);
		partial void InsertSPM_SubjectDelegate(SPM_SubjectDelegate instance);
		partial void UpdateSPM_SubjectDelegate(SPM_SubjectDelegate instance);
		partial void DeleteSPM_SubjectDelegate(SPM_SubjectDelegate instance);
		partial void InsertSPM_SubjectRole(SPM_SubjectRole instance);
		partial void UpdateSPM_SubjectRole(SPM_SubjectRole instance);
		partial void DeleteSPM_SubjectRole(SPM_SubjectRole instance);
		partial void InsertTechSupportLog(TechSupportLog instance);
		partial void UpdateTechSupportLog(TechSupportLog instance);
		partial void DeleteTechSupportLog(TechSupportLog instance);
		partial void InsertTM_Task(TM_Task instance);
		partial void UpdateTM_Task(TM_Task instance);
		partial void DeleteTM_Task(TM_Task instance);
		partial void InsertTM_TaskExecution(TM_TaskExecution instance);
		partial void UpdateTM_TaskExecution(TM_TaskExecution instance);
		partial void DeleteTM_TaskExecution(TM_TaskExecution instance);
		partial void InsertTM_TaskParameter(TM_TaskParameter instance);
		partial void UpdateTM_TaskParameter(TM_TaskParameter instance);
		partial void DeleteTM_TaskParameter(TM_TaskParameter instance);
		partial void InsertTraceLog(TraceLog instance);
		partial void UpdateTraceLog(TraceLog instance);
		partial void DeleteTraceLog(TraceLog instance);
		partial void InsertUserActivity(UserActivity instance);
		partial void UpdateUserActivity(UserActivity instance);
		partial void DeleteUserActivity(UserActivity instance);
		partial void InsertUserInfo(UserInfo instance);
		partial void UpdateUserInfo(UserInfo instance);
		partial void DeleteUserInfo(UserInfo instance);
		partial void InsertV_Article(V_Article instance);
		partial void UpdateV_Article(V_Article instance);
		partial void DeleteV_Article(V_Article instance);
		partial void InsertV_Document(V_Document instance);
		partial void UpdateV_Document(V_Document instance);
		partial void DeleteV_Document(V_Document instance);
		partial void InsertV_FactAnnulment(V_FactAnnulment instance);
		partial void UpdateV_FactAnnulment(V_FactAnnulment instance);
		partial void DeleteV_FactAnnulment(V_FactAnnulment instance);
		partial void InsertV_FactClose(V_FactClose instance);
		partial void UpdateV_FactClose(V_FactClose instance);
		partial void DeleteV_FactClose(V_FactClose instance);
		partial void InsertV_FactForm(V_FactForm instance);
		partial void UpdateV_FactForm(V_FactForm instance);
		partial void DeleteV_FactForm(V_FactForm instance);
		partial void InsertV_FactRegister(V_FactRegister instance);
		partial void UpdateV_FactRegister(V_FactRegister instance);
		partial void DeleteV_FactRegister(V_FactRegister instance);
		partial void InsertV_FactReject(V_FactReject instance);
		partial void UpdateV_FactReject(V_FactReject instance);
		partial void DeleteV_FactReject(V_FactReject instance);
		partial void InsertV_FactResume(V_FactResume instance);
		partial void UpdateV_FactResume(V_FactResume instance);
		partial void DeleteV_FactResume(V_FactResume instance);
		partial void InsertV_FactSuspend(V_FactSuspend instance);
		partial void UpdateV_FactSuspend(V_FactSuspend instance);
		partial void DeleteV_FactSuspend(V_FactSuspend instance);
		partial void InsertV_MMS_ChangeLog(V_MMS_ChangeLog instance);
		partial void UpdateV_MMS_ChangeLog(V_MMS_ChangeLog instance);
		partial void DeleteV_MMS_ChangeLog(V_MMS_ChangeLog instance);
		partial void InsertV_MMS_ClassStereotype(V_MMS_ClassStereotype instance);
		partial void UpdateV_MMS_ClassStereotype(V_MMS_ClassStereotype instance);
		partial void DeleteV_MMS_ClassStereotype(V_MMS_ClassStereotype instance);
		partial void InsertV_MMS_Replication(V_MMS_Replication instance);
		partial void UpdateV_MMS_Replication(V_MMS_Replication instance);
		partial void DeleteV_MMS_Replication(V_MMS_Replication instance);
		partial void InsertV_MMS_Versioning(V_MMS_Versioning instance);
		partial void UpdateV_MMS_Versioning(V_MMS_Versioning instance);
		partial void DeleteV_MMS_Versioning(V_MMS_Versioning instance);
		partial void InsertV_N_FileLibrary(V_N_FileLibrary instance);
		partial void UpdateV_N_FileLibrary(V_N_FileLibrary instance);
		partial void DeleteV_N_FileLibrary(V_N_FileLibrary instance);
		partial void InsertV_N_TextResource(V_N_TextResource instance);
		partial void UpdateV_N_TextResource(V_N_TextResource instance);
		partial void DeleteV_N_TextResource(V_N_TextResource instance);
		partial void InsertV_News(V_News instance);
		partial void UpdateV_News(V_News instance);
		partial void DeleteV_News(V_News instance);
		partial void InsertV_RFSubject(V_RFSubject instance);
		partial void UpdateV_RFSubject(V_RFSubject instance);
		partial void DeleteV_RFSubject(V_RFSubject instance);
		partial void InsertV_SimplePage(V_SimplePage instance);
		partial void UpdateV_SimplePage(V_SimplePage instance);
		partial void DeleteV_SimplePage(V_SimplePage instance);
		partial void InsertV_SiteObject(V_SiteObject instance);
		partial void UpdateV_SiteObject(V_SiteObject instance);
		partial void DeleteV_SiteObject(V_SiteObject instance);
		partial void InsertV_SiteSection(V_SiteSection instance);
		partial void UpdateV_SiteSection(V_SiteSection instance);
		partial void DeleteV_SiteSection(V_SiteSection instance);
		partial void InsertV_UserInfo(V_UserInfo instance);
		partial void UpdateV_UserInfo(V_UserInfo instance);
		partial void DeleteV_UserInfo(V_UserInfo instance);
		partial void InsertVisitRecord(VisitRecord instance);
		partial void UpdateVisitRecord(VisitRecord instance);
		partial void DeleteVisitRecord(VisitRecord instance);
		partial void InsertVisitTime(VisitTime instance);
		partial void UpdateVisitTime(VisitTime instance);
		partial void DeleteVisitTime(VisitTime instance);
		partial void InsertWF_Activity(WF_Activity instance);
		partial void UpdateWF_Activity(WF_Activity instance);
		partial void DeleteWF_Activity(WF_Activity instance);
		partial void InsertWF_Transition(WF_Transition instance);
		partial void UpdateWF_Transition(WF_Transition instance);
		partial void DeleteWF_Transition(WF_Transition instance);
		partial void InsertWF_Workflow(WF_Workflow instance);
		partial void UpdateWF_Workflow(WF_Workflow instance);
		partial void DeleteWF_Workflow(WF_Workflow instance);
		#endregion

		public modelDataContext(string connection) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public modelDataContext(System.Data.IDbConnection connection) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public modelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public modelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public System.Data.Linq.Table<Appendix> Appendix
		{
			get
			{
				return this.GetTable<Appendix>();
			}
		}

		public System.Data.Linq.Table<AppendixCommDocs> AppendixCommDocs
		{
			get
			{
				return this.GetTable<AppendixCommDocs>();
			}
		}

		public System.Data.Linq.Table<AppendixQuantity> AppendixQuantity
		{
			get
			{
				return this.GetTable<AppendixQuantity>();
			}
		}

		public System.Data.Linq.Table<Article> Article
		{
			get
			{
				return this.GetTable<Article>();
			}
		}

		public System.Data.Linq.Table<ArticleData> ArticleData
		{
			get
			{
				return this.GetTable<ArticleData>();
			}
		}

		public System.Data.Linq.Table<Blank> Blank
		{
			get
			{
				return this.GetTable<Blank>();
			}
		}

		public System.Data.Linq.Table<BlankTransition> BlankTransition
		{
			get
			{
				return this.GetTable<BlankTransition>();
			}
		}

		public System.Data.Linq.Table<C_AnnulmentReason> C_AnnulmentReason
		{
			get
			{
				return this.GetTable<C_AnnulmentReason>();
			}
		}

		public System.Data.Linq.Table<C_CatalogRestriction> C_CatalogRestriction
		{
			get
			{
				return this.GetTable<C_CatalogRestriction>();
			}
		}

		public System.Data.Linq.Table<C_CatalogRestrictionCNCategories> C_CatalogRestrictionCNCategories
		{
			get
			{
				return this.GetTable<C_CatalogRestrictionCNCategories>();
			}
		}

		public System.Data.Linq.Table<C_CN> C_CN
		{
			get
			{
				return this.GetTable<C_CN>();
			}
		}

		public System.Data.Linq.Table<C_CNCategory> C_CNCategory
		{
			get
			{
				return this.GetTable<C_CNCategory>();
			}
		}

		public System.Data.Linq.Table<C_CNCategoryCN> C_CNCategoryCN
		{
			get
			{
				return this.GetTable<C_CNCategoryCN>();
			}
		}

		public System.Data.Linq.Table<C_CNCategoryDocument> C_CNCategoryDocument
		{
			get
			{
				return this.GetTable<C_CNCategoryDocument>();
			}
		}

		public System.Data.Linq.Table<C_CNCategoryFGADocument> C_CNCategoryFGADocument
		{
			get
			{
				return this.GetTable<C_CNCategoryFGADocument>();
			}
		}

		public System.Data.Linq.Table<C_CNCategoryItem> C_CNCategoryItem
		{
			get
			{
				return this.GetTable<C_CNCategoryItem>();
			}
		}

		public System.Data.Linq.Table<C_CNCategoryItemRepresentations> C_CNCategoryItemRepresentations
		{
			get
			{
				return this.GetTable<C_CNCategoryItemRepresentations>();
			}
		}

		public System.Data.Linq.Table<C_CNCategoryOperationType> C_CNCategoryOperationType
		{
			get
			{
				return this.GetTable<C_CNCategoryOperationType>();
			}
		}

		public System.Data.Linq.Table<C_CNCategoryRepresentations> C_CNCategoryRepresentations
		{
			get
			{
				return this.GetTable<C_CNCategoryRepresentations>();
			}
		}

		public System.Data.Linq.Table<C_CNGroup> C_CNGroup
		{
			get
			{
				return this.GetTable<C_CNGroup>();
			}
		}

		public System.Data.Linq.Table<C_CNGroupCN> C_CNGroupCN
		{
			get
			{
				return this.GetTable<C_CNGroupCN>();
			}
		}

		public System.Data.Linq.Table<C_CNType> C_CNType
		{
			get
			{
				return this.GetTable<C_CNType>();
			}
		}

		public System.Data.Linq.Table<C_Country> C_Country
		{
			get
			{
				return this.GetTable<C_Country>();
			}
		}

		public System.Data.Linq.Table<C_CountryGroup> C_CountryGroup
		{
			get
			{
				return this.GetTable<C_CountryGroup>();
			}
		}

		public System.Data.Linq.Table<C_CountryGroupCountries> C_CountryGroupCountries
		{
			get
			{
				return this.GetTable<C_CountryGroupCountries>();
			}
		}

		public System.Data.Linq.Table<C_Crypto> C_Crypto
		{
			get
			{
				return this.GetTable<C_Crypto>();
			}
		}

		public System.Data.Linq.Table<C_Currency> C_Currency
		{
			get
			{
				return this.GetTable<C_Currency>();
			}
		}

		public System.Data.Linq.Table<C_CustomHouse> C_CustomHouse
		{
			get
			{
				return this.GetTable<C_CustomHouse>();
			}
		}

		public System.Data.Linq.Table<C_CustomHouseContact> C_CustomHouseContact
		{
			get
			{
				return this.GetTable<C_CustomHouseContact>();
			}
		}

		public System.Data.Linq.Table<C_DocumentSourceType> C_DocumentSourceType
		{
			get
			{
				return this.GetTable<C_DocumentSourceType>();
			}
		}

		public System.Data.Linq.Table<C_DocumentType> C_DocumentType
		{
			get
			{
				return this.GetTable<C_DocumentType>();
			}
		}

		public System.Data.Linq.Table<C_FGA> C_FGA
		{
			get
			{
				return this.GetTable<C_FGA>();
			}
		}

		public System.Data.Linq.Table<C_FGADocument> C_FGADocument
		{
			get
			{
				return this.GetTable<C_FGADocument>();
			}
		}

		public System.Data.Linq.Table<C_FGADocumentSigner> C_FGADocumentSigner
		{
			get
			{
				return this.GetTable<C_FGADocumentSigner>();
			}
		}

		public System.Data.Linq.Table<C_FtsCN> C_FtsCN
		{
			get
			{
				return this.GetTable<C_FtsCN>();
			}
		}

		public System.Data.Linq.Table<C_FtsCountry> C_FtsCountry
		{
			get
			{
				return this.GetTable<C_FtsCountry>();
			}
		}

		public System.Data.Linq.Table<C_FtsCustomHouse> C_FtsCustomHouse
		{
			get
			{
				return this.GetTable<C_FtsCustomHouse>();
			}
		}

		public System.Data.Linq.Table<C_Help> C_Help
		{
			get
			{
				return this.GetTable<C_Help>();
			}
		}

		public System.Data.Linq.Table<C_Language> C_Language
		{
			get
			{
				return this.GetTable<C_Language>();
			}
		}

		public System.Data.Linq.Table<C_LawOrgan> C_LawOrgan
		{
			get
			{
				return this.GetTable<C_LawOrgan>();
			}
		}

		public System.Data.Linq.Table<C_LegalDocument> C_LegalDocument
		{
			get
			{
				return this.GetTable<C_LegalDocument>();
			}
		}

		public System.Data.Linq.Table<C_LegalDocumentCNCategories> C_LegalDocumentCNCategories
		{
			get
			{
				return this.GetTable<C_LegalDocumentCNCategories>();
			}
		}

		public System.Data.Linq.Table<C_LegalDocumentCNGroups> C_LegalDocumentCNGroups
		{
			get
			{
				return this.GetTable<C_LegalDocumentCNGroups>();
			}
		}

		public System.Data.Linq.Table<C_LegalDocumentRestrictions> C_LegalDocumentRestrictions
		{
			get
			{
				return this.GetTable<C_LegalDocumentRestrictions>();
			}
		}

		public System.Data.Linq.Table<C_LegalDocumentType> C_LegalDocumentType
		{
			get
			{
				return this.GetTable<C_LegalDocumentType>();
			}
		}

		public System.Data.Linq.Table<C_LicenseType> C_LicenseType
		{
			get
			{
				return this.GetTable<C_LicenseType>();
			}
		}

		public System.Data.Linq.Table<C_MaxTargetValidity> C_MaxTargetValidity
		{
			get
			{
				return this.GetTable<C_MaxTargetValidity>();
			}
		}

		public System.Data.Linq.Table<C_Measure> C_Measure
		{
			get
			{
				return this.GetTable<C_Measure>();
			}
		}

		public System.Data.Linq.Table<C_MFC> C_MFC
		{
			get
			{
				return this.GetTable<C_MFC>();
			}
		}

		public System.Data.Linq.Table<C_OperationType> C_OperationType
		{
			get
			{
				return this.GetTable<C_OperationType>();
			}
		}

		public System.Data.Linq.Table<C_QuoteCategory> C_QuoteCategory
		{
			get
			{
				return this.GetTable<C_QuoteCategory>();
			}
		}

		public System.Data.Linq.Table<C_RES> C_RES
		{
			get
			{
				return this.GetTable<C_RES>();
			}
		}

		public System.Data.Linq.Table<C_RFSubject> C_RFSubject
		{
			get
			{
				return this.GetTable<C_RFSubject>();
			}
		}

		public System.Data.Linq.Table<C_Tariff> C_Tariff
		{
			get
			{
				return this.GetTable<C_Tariff>();
			}
		}

		public System.Data.Linq.Table<C_UseType> C_UseType
		{
			get
			{
				return this.GetTable<C_UseType>();
			}
		}

		public System.Data.Linq.Table<C_VisitPurpose> C_VisitPurpose
		{
			get
			{
				return this.GetTable<C_VisitPurpose>();
			}
		}

		public System.Data.Linq.Table<CalendarDay> CalendarDay
		{
			get
			{
				return this.GetTable<CalendarDay>();
			}
		}

		public System.Data.Linq.Table<CommodityDocument> CommodityDocument
		{
			get
			{
				return this.GetTable<CommodityDocument>();
			}
		}

		public System.Data.Linq.Table<Contractor> Contractor
		{
			get
			{
				return this.GetTable<Contractor>();
			}
		}

		public System.Data.Linq.Table<ContractorChiefPerson> ContractorChiefPerson
		{
			get
			{
				return this.GetTable<ContractorChiefPerson>();
			}
		}

		public System.Data.Linq.Table<ControlParameters> ControlParameters
		{
			get
			{
				return this.GetTable<ControlParameters>();
			}
		}

		public System.Data.Linq.Table<Copy_ContractorChiefPerson> Copy_ContractorChiefPerson
		{
			get
			{
				return this.GetTable<Copy_ContractorChiefPerson>();
			}
		}

		public System.Data.Linq.Table<CustomsDeclaration> CustomsDeclaration
		{
			get
			{
				return this.GetTable<CustomsDeclaration>();
			}
		}

		public System.Data.Linq.Table<Document> Document
		{
			get
			{
				return this.GetTable<Document>();
			}
		}

		public System.Data.Linq.Table<DocumentData> DocumentData
		{
			get
			{
				return this.GetTable<DocumentData>();
			}
		}

		public System.Data.Linq.Table<Employee> Employee
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}

		public System.Data.Linq.Table<ErrorLog> ErrorLog
		{
			get
			{
				return this.GetTable<ErrorLog>();
			}
		}

		public System.Data.Linq.Table<EsiaActivateLog> EsiaActivateLog
		{
			get
			{
				return this.GetTable<EsiaActivateLog>();
			}
		}

		public System.Data.Linq.Table<EsiaSession> EsiaSession
		{
			get
			{
				return this.GetTable<EsiaSession>();
			}
		}

		public System.Data.Linq.Table<FactAnnulment> FactAnnulment
		{
			get
			{
				return this.GetTable<FactAnnulment>();
			}
		}

		public System.Data.Linq.Table<FactClose> FactClose
		{
			get
			{
				return this.GetTable<FactClose>();
			}
		}

		public System.Data.Linq.Table<FactForm> FactForm
		{
			get
			{
				return this.GetTable<FactForm>();
			}
		}

		public System.Data.Linq.Table<FactRegister> FactRegister
		{
			get
			{
				return this.GetTable<FactRegister>();
			}
		}

		public System.Data.Linq.Table<FactReject> FactReject
		{
			get
			{
				return this.GetTable<FactReject>();
			}
		}

		public System.Data.Linq.Table<FactResume> FactResume
		{
			get
			{
				return this.GetTable<FactResume>();
			}
		}

		public System.Data.Linq.Table<FactSuspend> FactSuspend
		{
			get
			{
				return this.GetTable<FactSuspend>();
			}
		}

		public System.Data.Linq.Table<ForeignAuthorization> ForeignAuthorization
		{
			get
			{
				return this.GetTable<ForeignAuthorization>();
			}
		}

		public System.Data.Linq.Table<FullCN> FullCN
		{
			get
			{
				return this.GetTable<FullCN>();
			}
		}

		public System.Data.Linq.Table<FullRepresentation> FullRepresentation
		{
			get
			{
				return this.GetTable<FullRepresentation>();
			}
		}

		public System.Data.Linq.Table<HST_Contractor> HST_Contractor
		{
			get
			{
				return this.GetTable<HST_Contractor>();
			}
		}

		public System.Data.Linq.Table<HST_MM_FormView> HST_MM_FormView
		{
			get
			{
				return this.GetTable<HST_MM_FormView>();
			}
		}

		public System.Data.Linq.Table<HST_N_TimeZone> HST_N_TimeZone
		{
			get
			{
				return this.GetTable<HST_N_TimeZone>();
			}
		}

		public System.Data.Linq.Table<INT_Command> INT_Command
		{
			get
			{
				return this.GetTable<INT_Command>();
			}
		}

		public System.Data.Linq.Table<INT_Handler> INT_Handler
		{
			get
			{
				return this.GetTable<INT_Handler>();
			}
		}

		public System.Data.Linq.Table<INT_Log> INT_Log
		{
			get
			{
				return this.GetTable<INT_Log>();
			}
		}

		public System.Data.Linq.Table<INT_System> INT_System
		{
			get
			{
				return this.GetTable<INT_System>();
			}
		}

		public System.Data.Linq.Table<Letter> Letter
		{
			get
			{
				return this.GetTable<Letter>();
			}
		}

		public System.Data.Linq.Table<LicenseExecution> LicenseExecution
		{
			get
			{
				return this.GetTable<LicenseExecution>();
			}
		}

		public System.Data.Linq.Table<LicenseExecutionAlert> LicenseExecutionAlert
		{
			get
			{
				return this.GetTable<LicenseExecutionAlert>();
			}
		}

		public System.Data.Linq.Table<MailMessage> MailMessage
		{
			get
			{
				return this.GetTable<MailMessage>();
			}
		}

		public System.Data.Linq.Table<MailTemplate> MailTemplate
		{
			get
			{
				return this.GetTable<MailTemplate>();
			}
		}

		public System.Data.Linq.Table<MM_Codifier> MM_Codifier
		{
			get
			{
				return this.GetTable<MM_Codifier>();
			}
		}

		public System.Data.Linq.Table<MM_CodifierValue> MM_CodifierValue
		{
			get
			{
				return this.GetTable<MM_CodifierValue>();
			}
		}

		public System.Data.Linq.Table<MM_DataValidation> MM_DataValidation
		{
			get
			{
				return this.GetTable<MM_DataValidation>();
			}
		}

		public System.Data.Linq.Table<MM_FormField> MM_FormField
		{
			get
			{
				return this.GetTable<MM_FormField>();
			}
		}

		public System.Data.Linq.Table<MM_FormFieldAttribute> MM_FormFieldAttribute
		{
			get
			{
				return this.GetTable<MM_FormFieldAttribute>();
			}
		}

		public System.Data.Linq.Table<MM_FormFieldGroup> MM_FormFieldGroup
		{
			get
			{
				return this.GetTable<MM_FormFieldGroup>();
			}
		}

		public System.Data.Linq.Table<MM_FormView> MM_FormView
		{
			get
			{
				return this.GetTable<MM_FormView>();
			}
		}

		public System.Data.Linq.Table<MM_Group> MM_Group
		{
			get
			{
				return this.GetTable<MM_Group>();
			}
		}

		public System.Data.Linq.Table<MM_GroupAsso> MM_GroupAsso
		{
			get
			{
				return this.GetTable<MM_GroupAsso>();
			}
		}

		public System.Data.Linq.Table<MM_Method> MM_Method
		{
			get
			{
				return this.GetTable<MM_Method>();
			}
		}

		public System.Data.Linq.Table<MM_MethodGroup> MM_MethodGroup
		{
			get
			{
				return this.GetTable<MM_MethodGroup>();
			}
		}

		public System.Data.Linq.Table<MM_MethodGroupItem> MM_MethodGroupItem
		{
			get
			{
				return this.GetTable<MM_MethodGroupItem>();
			}
		}

		public System.Data.Linq.Table<MM_MethodParameter> MM_MethodParameter
		{
			get
			{
				return this.GetTable<MM_MethodParameter>();
			}
		}

		public System.Data.Linq.Table<MM_ObjectProperty> MM_ObjectProperty
		{
			get
			{
				return this.GetTable<MM_ObjectProperty>();
			}
		}

		public System.Data.Linq.Table<MM_ObjectType> MM_ObjectType
		{
			get
			{
				return this.GetTable<MM_ObjectType>();
			}
		}

		public System.Data.Linq.Table<MM_ObjectTypeStereotypes> MM_ObjectTypeStereotypes
		{
			get
			{
				return this.GetTable<MM_ObjectTypeStereotypes>();
			}
		}

		public System.Data.Linq.Table<MM_Package> MM_Package
		{
			get
			{
				return this.GetTable<MM_Package>();
			}
		}

		public System.Data.Linq.Table<MM_Predicate> MM_Predicate
		{
			get
			{
				return this.GetTable<MM_Predicate>();
			}
		}

		public System.Data.Linq.Table<MM_TaggedValueType> MM_TaggedValueType
		{
			get
			{
				return this.GetTable<MM_TaggedValueType>();
			}
		}

		public System.Data.Linq.Table<MMA_SiteInfoobjects> MMA_SiteInfoobjects
		{
			get
			{
				return this.GetTable<MMA_SiteInfoobjects>();
			}
		}

		public System.Data.Linq.Table<MMS_ChangeLog> MMS_ChangeLog
		{
			get
			{
				return this.GetTable<MMS_ChangeLog>();
			}
		}

		public System.Data.Linq.Table<MMS_ClassStereotype> MMS_ClassStereotype
		{
			get
			{
				return this.GetTable<MMS_ClassStereotype>();
			}
		}

		public System.Data.Linq.Table<MMS_Replication> MMS_Replication
		{
			get
			{
				return this.GetTable<MMS_Replication>();
			}
		}

		public System.Data.Linq.Table<MMS_Versioning> MMS_Versioning
		{
			get
			{
				return this.GetTable<MMS_Versioning>();
			}
		}

		public System.Data.Linq.Table<N_Cache> N_Cache
		{
			get
			{
				return this.GetTable<N_Cache>();
			}
		}

		public System.Data.Linq.Table<N_DDL> N_DDL
		{
			get
			{
				return this.GetTable<N_DDL>();
			}
		}

		public System.Data.Linq.Table<N_DownloadLog> N_DownloadLog
		{
			get
			{
				return this.GetTable<N_DownloadLog>();
			}
		}

		public System.Data.Linq.Table<N_File> N_File
		{
			get
			{
				return this.GetTable<N_File>();
			}
		}

		public System.Data.Linq.Table<N_FileData> N_FileData
		{
			get
			{
				return this.GetTable<N_FileData>();
			}
		}

		public System.Data.Linq.Table<N_FileLibrary> N_FileLibrary
		{
			get
			{
				return this.GetTable<N_FileLibrary>();
			}
		}

		public System.Data.Linq.Table<N_FileLibraryType> N_FileLibraryType
		{
			get
			{
				return this.GetTable<N_FileLibraryType>();
			}
		}

		public System.Data.Linq.Table<N_FileList> N_FileList
		{
			get
			{
				return this.GetTable<N_FileList>();
			}
		}

		public System.Data.Linq.Table<N_FileListItem> N_FileListItem
		{
			get
			{
				return this.GetTable<N_FileListItem>();
			}
		}

		public System.Data.Linq.Table<N_Filter> N_Filter
		{
			get
			{
				return this.GetTable<N_Filter>();
			}
		}

		public System.Data.Linq.Table<N_Folder> N_Folder
		{
			get
			{
				return this.GetTable<N_Folder>();
			}
		}

		public System.Data.Linq.Table<N_FolderPredicate> N_FolderPredicate
		{
			get
			{
				return this.GetTable<N_FolderPredicate>();
			}
		}

		public System.Data.Linq.Table<N_Image> N_Image
		{
			get
			{
				return this.GetTable<N_Image>();
			}
		}

		public System.Data.Linq.Table<N_MenuItem> N_MenuItem
		{
			get
			{
				return this.GetTable<N_MenuItem>();
			}
		}

		public System.Data.Linq.Table<N_ObjectChange> N_ObjectChange
		{
			get
			{
				return this.GetTable<N_ObjectChange>();
			}
		}

		public System.Data.Linq.Table<N_ObjectPropertyChange> N_ObjectPropertyChange
		{
			get
			{
				return this.GetTable<N_ObjectPropertyChange>();
			}
		}

		public System.Data.Linq.Table<N_ReplicationObject> N_ReplicationObject
		{
			get
			{
				return this.GetTable<N_ReplicationObject>();
			}
		}

		public System.Data.Linq.Table<N_RssFeed> N_RssFeed
		{
			get
			{
				return this.GetTable<N_RssFeed>();
			}
		}

		public System.Data.Linq.Table<N_Settings> N_Settings
		{
			get
			{
				return this.GetTable<N_Settings>();
			}
		}

		public System.Data.Linq.Table<N_SqlStatementLog> N_SqlStatementLog
		{
			get
			{
				return this.GetTable<N_SqlStatementLog>();
			}
		}

		public System.Data.Linq.Table<N_TableInfo> N_TableInfo
		{
			get
			{
				return this.GetTable<N_TableInfo>();
			}
		}

		public System.Data.Linq.Table<N_TextResource> N_TextResource
		{
			get
			{
				return this.GetTable<N_TextResource>();
			}
		}

		public System.Data.Linq.Table<N_TextResourceData> N_TextResourceData
		{
			get
			{
				return this.GetTable<N_TextResourceData>();
			}
		}

		public System.Data.Linq.Table<N_TimeZone> N_TimeZone
		{
			get
			{
				return this.GetTable<N_TimeZone>();
			}
		}

		public System.Data.Linq.Table<N_VirusScanLog> N_VirusScanLog
		{
			get
			{
				return this.GetTable<N_VirusScanLog>();
			}
		}

		public System.Data.Linq.Table<News> News
		{
			get
			{
				return this.GetTable<News>();
			}
		}

		public System.Data.Linq.Table<NewsData> NewsData
		{
			get
			{
				return this.GetTable<NewsData>();
			}
		}

		public System.Data.Linq.Table<OrderDoc> OrderDoc
		{
			get
			{
				return this.GetTable<OrderDoc>();
			}
		}

		public System.Data.Linq.Table<OrderDocAsso> OrderDocAsso
		{
			get
			{
				return this.GetTable<OrderDocAsso>();
			}
		}

		public System.Data.Linq.Table<OrderDocDeviation> OrderDocDeviation
		{
			get
			{
				return this.GetTable<OrderDocDeviation>();
			}
		}

		public System.Data.Linq.Table<OrderDocImportSubject> OrderDocImportSubject
		{
			get
			{
				return this.GetTable<OrderDocImportSubject>();
			}
		}

		public System.Data.Linq.Table<OrderDocLicReplication> OrderDocLicReplication
		{
			get
			{
				return this.GetTable<OrderDocLicReplication>();
			}
		}

		public System.Data.Linq.Table<OrderDocState> OrderDocState
		{
			get
			{
				return this.GetTable<OrderDocState>();
			}
		}

		public System.Data.Linq.Table<OrderDocTransition> OrderDocTransition
		{
			get
			{
				return this.GetTable<OrderDocTransition>();
			}
		}

		public System.Data.Linq.Table<PaymentOrder> PaymentOrder
		{
			get
			{
				return this.GetTable<PaymentOrder>();
			}
		}

		public System.Data.Linq.Table<PaymentOrderLicenses> PaymentOrderLicenses
		{
			get
			{
				return this.GetTable<PaymentOrderLicenses>();
			}
		}

		public System.Data.Linq.Table<PaymentOrderRequests> PaymentOrderRequests
		{
			get
			{
				return this.GetTable<PaymentOrderRequests>();
			}
		}

		public System.Data.Linq.Table<PerfomanceStat> PerfomanceStat
		{
			get
			{
				return this.GetTable<PerfomanceStat>();
			}
		}

		public System.Data.Linq.Table<Quota> Quota
		{
			get
			{
				return this.GetTable<Quota>();
			}
		}

		public System.Data.Linq.Table<QuotaDistribution> QuotaDistribution
		{
			get
			{
				return this.GetTable<QuotaDistribution>();
			}
		}

		public System.Data.Linq.Table<QuotaRedistribution> QuotaRedistribution
		{
			get
			{
				return this.GetTable<QuotaRedistribution>();
			}
		}

		public System.Data.Linq.Table<QuotaRequest> QuotaRequest
		{
			get
			{
				return this.GetTable<QuotaRequest>();
			}
		}

		public System.Data.Linq.Table<R_OrderDoc_Execution> R_OrderDoc_Execution
		{
			get
			{
				return this.GetTable<R_OrderDoc_Execution>();
			}
		}

		public System.Data.Linq.Table<ReplicatedFile> ReplicatedFile
		{
			get
			{
				return this.GetTable<ReplicatedFile>();
			}
		}

		public System.Data.Linq.Table<Representation> Representation
		{
			get
			{
				return this.GetTable<Representation>();
			}
		}

		public System.Data.Linq.Table<RFSubject> RFSubject
		{
			get
			{
				return this.GetTable<RFSubject>();
			}
		}

		public System.Data.Linq.Table<RFSubjectData> RFSubjectData
		{
			get
			{
				return this.GetTable<RFSubjectData>();
			}
		}

		public System.Data.Linq.Table<SimplePage> SimplePage
		{
			get
			{
				return this.GetTable<SimplePage>();
			}
		}

		public System.Data.Linq.Table<SimplePageData> SimplePageData
		{
			get
			{
				return this.GetTable<SimplePageData>();
			}
		}

		public System.Data.Linq.Table<SiteInfoobjects> SiteInfoobjects
		{
			get
			{
				return this.GetTable<SiteInfoobjects>();
			}
		}

		public System.Data.Linq.Table<SiteItem> SiteItem
		{
			get
			{
				return this.GetTable<SiteItem>();
			}
		}

		public System.Data.Linq.Table<SiteItemHtml> SiteItemHtml
		{
			get
			{
				return this.GetTable<SiteItemHtml>();
			}
		}

		public System.Data.Linq.Table<SiteItemHtmlFolder> SiteItemHtmlFolder
		{
			get
			{
				return this.GetTable<SiteItemHtmlFolder>();
			}
		}

		public System.Data.Linq.Table<SiteItemsFolder> SiteItemsFolder
		{
			get
			{
				return this.GetTable<SiteItemsFolder>();
			}
		}

		public System.Data.Linq.Table<SiteObject> SiteObject
		{
			get
			{
				return this.GetTable<SiteObject>();
			}
		}

		public System.Data.Linq.Table<SiteObjectData> SiteObjectData
		{
			get
			{
				return this.GetTable<SiteObjectData>();
			}
		}

		public System.Data.Linq.Table<SiteSection> SiteSection
		{
			get
			{
				return this.GetTable<SiteSection>();
			}
		}

		public System.Data.Linq.Table<SiteSectionBind> SiteSectionBind
		{
			get
			{
				return this.GetTable<SiteSectionBind>();
			}
		}

		public System.Data.Linq.Table<SiteSectionData> SiteSectionData
		{
			get
			{
				return this.GetTable<SiteSectionData>();
			}
		}

		public System.Data.Linq.Table<SpecificationCommon> SpecificationCommon
		{
			get
			{
				return this.GetTable<SpecificationCommon>();
			}
		}

		public System.Data.Linq.Table<SpecificationItem> SpecificationItem
		{
			get
			{
				return this.GetTable<SpecificationItem>();
			}
		}

		public System.Data.Linq.Table<SPM_Action> SPM_Action
		{
			get
			{
				return this.GetTable<SPM_Action>();
			}
		}

		public System.Data.Linq.Table<SPM_ActionAsso> SPM_ActionAsso
		{
			get
			{
				return this.GetTable<SPM_ActionAsso>();
			}
		}

		public System.Data.Linq.Table<SPM_ActionRoleAccess> SPM_ActionRoleAccess
		{
			get
			{
				return this.GetTable<SPM_ActionRoleAccess>();
			}
		}

		public System.Data.Linq.Table<SPM_AvailableRoleForGrant> SPM_AvailableRoleForGrant
		{
			get
			{
				return this.GetTable<SPM_AvailableRoleForGrant>();
			}
		}

		public System.Data.Linq.Table<SPM_C_RoleType> SPM_C_RoleType
		{
			get
			{
				return this.GetTable<SPM_C_RoleType>();
			}
		}

		public System.Data.Linq.Table<SPM_CasheFlag> SPM_CasheFlag
		{
			get
			{
				return this.GetTable<SPM_CasheFlag>();
			}
		}

		public System.Data.Linq.Table<SPM_Role> SPM_Role
		{
			get
			{
				return this.GetTable<SPM_Role>();
			}
		}

		public System.Data.Linq.Table<SPM_RoleAccess> SPM_RoleAccess
		{
			get
			{
				return this.GetTable<SPM_RoleAccess>();
			}
		}

		public System.Data.Linq.Table<SPM_RoleAsso> SPM_RoleAsso
		{
			get
			{
				return this.GetTable<SPM_RoleAsso>();
			}
		}

		public System.Data.Linq.Table<SPM_RoleGroup> SPM_RoleGroup
		{
			get
			{
				return this.GetTable<SPM_RoleGroup>();
			}
		}

		public System.Data.Linq.Table<SPM_Subject> SPM_Subject
		{
			get
			{
				return this.GetTable<SPM_Subject>();
			}
		}

		public System.Data.Linq.Table<SPM_SubjectAccess> SPM_SubjectAccess
		{
			get
			{
				return this.GetTable<SPM_SubjectAccess>();
			}
		}

		public System.Data.Linq.Table<SPM_SubjectDelegate> SPM_SubjectDelegate
		{
			get
			{
				return this.GetTable<SPM_SubjectDelegate>();
			}
		}

		public System.Data.Linq.Table<SPM_SubjectRole> SPM_SubjectRole
		{
			get
			{
				return this.GetTable<SPM_SubjectRole>();
			}
		}

		public System.Data.Linq.Table<TechSupportLog> TechSupportLog
		{
			get
			{
				return this.GetTable<TechSupportLog>();
			}
		}

		public System.Data.Linq.Table<TM_Task> TM_Task
		{
			get
			{
				return this.GetTable<TM_Task>();
			}
		}

		public System.Data.Linq.Table<TM_TaskExecution> TM_TaskExecution
		{
			get
			{
				return this.GetTable<TM_TaskExecution>();
			}
		}

		public System.Data.Linq.Table<TM_TaskParameter> TM_TaskParameter
		{
			get
			{
				return this.GetTable<TM_TaskParameter>();
			}
		}

		public System.Data.Linq.Table<TraceLog> TraceLog
		{
			get
			{
				return this.GetTable<TraceLog>();
			}
		}

		public System.Data.Linq.Table<UserActivity> UserActivity
		{
			get
			{
				return this.GetTable<UserActivity>();
			}
		}

		public System.Data.Linq.Table<UserInfo> UserInfo
		{
			get
			{
				return this.GetTable<UserInfo>();
			}
		}

		public System.Data.Linq.Table<V_Article> V_Article
		{
			get
			{
				return this.GetTable<V_Article>();
			}
		}

		public System.Data.Linq.Table<V_AvailableRoleForGrant> V_AvailableRoleForGrant
		{
			get
			{
				return this.GetTable<V_AvailableRoleForGrant>();
			}
		}

		public System.Data.Linq.Table<V_ContractorPayment> V_ContractorPayment
		{
			get
			{
				return this.GetTable<V_ContractorPayment>();
			}
		}

		public System.Data.Linq.Table<V_DbFile> V_DbFile
		{
			get
			{
				return this.GetTable<V_DbFile>();
			}
		}

		public System.Data.Linq.Table<V_DbFolder> V_DbFolder
		{
			get
			{
				return this.GetTable<V_DbFolder>();
			}
		}

		public System.Data.Linq.Table<V_DbItem> V_DbItem
		{
			get
			{
				return this.GetTable<V_DbItem>();
			}
		}

		public System.Data.Linq.Table<V_Document> V_Document
		{
			get
			{
				return this.GetTable<V_Document>();
			}
		}

		public System.Data.Linq.Table<V_Documents> V_Documents
		{
			get
			{
				return this.GetTable<V_Documents>();
			}
		}

		public System.Data.Linq.Table<V_FactAnnulment> V_FactAnnulment
		{
			get
			{
				return this.GetTable<V_FactAnnulment>();
			}
		}

		public System.Data.Linq.Table<V_FactClose> V_FactClose
		{
			get
			{
				return this.GetTable<V_FactClose>();
			}
		}

		public System.Data.Linq.Table<V_FactForm> V_FactForm
		{
			get
			{
				return this.GetTable<V_FactForm>();
			}
		}

		public System.Data.Linq.Table<V_FactRegister> V_FactRegister
		{
			get
			{
				return this.GetTable<V_FactRegister>();
			}
		}

		public System.Data.Linq.Table<V_FactReject> V_FactReject
		{
			get
			{
				return this.GetTable<V_FactReject>();
			}
		}

		public System.Data.Linq.Table<V_FactResume> V_FactResume
		{
			get
			{
				return this.GetTable<V_FactResume>();
			}
		}

		public System.Data.Linq.Table<V_FactSuspend> V_FactSuspend
		{
			get
			{
				return this.GetTable<V_FactSuspend>();
			}
		}

		public System.Data.Linq.Table<V_MMA_SiteInfoobjects> V_MMA_SiteInfoobjects
		{
			get
			{
				return this.GetTable<V_MMA_SiteInfoobjects>();
			}
		}

		public System.Data.Linq.Table<V_MMS_ChangeLog> V_MMS_ChangeLog
		{
			get
			{
				return this.GetTable<V_MMS_ChangeLog>();
			}
		}

		public System.Data.Linq.Table<V_MMS_ClassStereotype> V_MMS_ClassStereotype
		{
			get
			{
				return this.GetTable<V_MMS_ClassStereotype>();
			}
		}

		public System.Data.Linq.Table<V_MMS_Replication> V_MMS_Replication
		{
			get
			{
				return this.GetTable<V_MMS_Replication>();
			}
		}

		public System.Data.Linq.Table<V_MMS_Versioning> V_MMS_Versioning
		{
			get
			{
				return this.GetTable<V_MMS_Versioning>();
			}
		}

		public System.Data.Linq.Table<V_N_FileLibrary> V_N_FileLibrary
		{
			get
			{
				return this.GetTable<V_N_FileLibrary>();
			}
		}

		public System.Data.Linq.Table<V_N_FolderFile> V_N_FolderFile
		{
			get
			{
				return this.GetTable<V_N_FolderFile>();
			}
		}

		public System.Data.Linq.Table<V_N_FullFolder> V_N_FullFolder
		{
			get
			{
				return this.GetTable<V_N_FullFolder>();
			}
		}

		public System.Data.Linq.Table<V_N_TextResource> V_N_TextResource
		{
			get
			{
				return this.GetTable<V_N_TextResource>();
			}
		}

		public System.Data.Linq.Table<V_News> V_News
		{
			get
			{
				return this.GetTable<V_News>();
			}
		}

		public System.Data.Linq.Table<V_RFSubject> V_RFSubject
		{
			get
			{
				return this.GetTable<V_RFSubject>();
			}
		}

		public System.Data.Linq.Table<V_SimplePage> V_SimplePage
		{
			get
			{
				return this.GetTable<V_SimplePage>();
			}
		}

		public System.Data.Linq.Table<V_SiteObject> V_SiteObject
		{
			get
			{
				return this.GetTable<V_SiteObject>();
			}
		}

		public System.Data.Linq.Table<V_SiteSection> V_SiteSection
		{
			get
			{
				return this.GetTable<V_SiteSection>();
			}
		}

		public System.Data.Linq.Table<V_SPM_AllRoleAsso> V_SPM_AllRoleAsso
		{
			get
			{
				return this.GetTable<V_SPM_AllRoleAsso>();
			}
		}

		public System.Data.Linq.Table<V_SPM_AllSubjectRole> V_SPM_AllSubjectRole
		{
			get
			{
				return this.GetTable<V_SPM_AllSubjectRole>();
			}
		}

		public System.Data.Linq.Table<V_UserInfo> V_UserInfo
		{
			get
			{
				return this.GetTable<V_UserInfo>();
			}
		}

		public System.Data.Linq.Table<VisitRecord> VisitRecord
		{
			get
			{
				return this.GetTable<VisitRecord>();
			}
		}

		public System.Data.Linq.Table<VisitTime> VisitTime
		{
			get
			{
				return this.GetTable<VisitTime>();
			}
		}

		public System.Data.Linq.Table<WF_Activity> WF_Activity
		{
			get
			{
				return this.GetTable<WF_Activity>();
			}
		}

		public System.Data.Linq.Table<WF_Transition> WF_Transition
		{
			get
			{
				return this.GetTable<WF_Transition>();
			}
		}

		public System.Data.Linq.Table<WF_Workflow> WF_Workflow
		{
			get
			{
				return this.GetTable<WF_Workflow>();
			}
		}

		[Function(Name = "dbo.Contractor_CreateHistoryVersion")]
		[return: Parameter(DbType = "Int")]
		public int Contractor_CreateHistoryVersion([Parameter(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> guid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), guid);
			return ((int)(result.ReturnValue));
		}

		[Function(Name = "dbo.f_hashbytesMAX", IsComposable = true)]
		[return: Parameter(DbType = "VarBinary(16)")]
		public System.Data.Linq.Binary F_hashbytesMAX([Parameter(Name = "string", DbType = "NVarChar(MAX)")] string @string)
		{
			return ((System.Data.Linq.Binary)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), @string).ReturnValue));
		}

		[Function(Name = "dbo.fn_diagramobjects", IsComposable = true)]
		[return: Parameter(DbType = "Int")]
		public System.Nullable<int> Fn_diagramobjects()
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}

		[Function(Name = "dbo.MM_FormView_CreateHistoryVersion")]
		[return: Parameter(DbType = "Int")]
		public int MM_FormView_CreateHistoryVersion([Parameter(DbType = "Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((int)(result.ReturnValue));
		}

		[Function(Name = "dbo.N_TimeZone_CreateHistoryVersion")]
		[return: Parameter(DbType = "Int")]
		public int N_TimeZone_CreateHistoryVersion([Parameter(DbType = "Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((int)(result.ReturnValue));
		}

		[Function(Name = "dbo.RequestExport2012")]
		public ISingleResult<RequestExport2012Result> RequestExport2012([Parameter(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> orderguid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), orderguid);
			return ((ISingleResult<RequestExport2012Result>)(result.ReturnValue));
		}

		[Function(Name = "dbo.RequestExport2016")]
		public ISingleResult<RequestExport2016Result> RequestExport2016([Parameter(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> orderguid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), orderguid);
			return ((ISingleResult<RequestExport2016Result>)(result.ReturnValue));
		}

		[Function(Name = "dbo.SortNumber", IsComposable = true)]
		[return: Parameter(DbType = "VarChar(50)")]
		public string SortNumber([Parameter(DbType = "VarChar(50)")] string indexnum)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), indexnum).ReturnValue));
		}

		[Function(Name = "dbo.Split", IsComposable = true)]
		public IQueryable<SplitResult> Split([Parameter(Name = "Delimiter", DbType = "VarChar(5)")] string delimiter, [Parameter(Name = "List", DbType = "VarChar(MAX)")] string list)
		{
			return this.CreateMethodCallQuery<SplitResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), delimiter, list);
		}

		[Function(Name = "dbo.Trace")]
		[return: Parameter(DbType = "Int")]
		public int Trace([Parameter(DbType = "NVarChar(50)")] string machinename, [Parameter(DbType = "Int")] System.Nullable<int> subjectid, [Parameter(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> orderDocGUID, [Parameter(DbType = "NVarChar(MAX)")] string traceText)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), machinename, subjectid, orderDocGUID, traceText);
			return ((int)(result.ReturnValue));
		}

		[Function(Name = "dbo.usp_model")]
		public ISingleResult<Usp_modelResult> Usp_model()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Usp_modelResult>)(result.ReturnValue));
		}

		[Function(Name = "dbo.WritePerfomanceStat")]
		[return: Parameter(DbType = "Int")]
		public int WritePerfomanceStat([Parameter(Name = "Mode", DbType = "NVarChar(50)")] string mode, [Parameter(Name = "Action", DbType = "NVarChar(50)")] string action, [Parameter(Name = "MachineName", DbType = "NVarChar(50)")] string machineName, [Parameter(Name = "RequestType", DbType = "NVarChar(10)")] string requestType, [Parameter(Name = "TotalSqlRequestCount", DbType = "Int")] System.Nullable<int> totalSqlRequestCount, [Parameter(Name = "TotalExecutionTime", DbType = "Int")] System.Nullable<int> totalExecutionTime, [Parameter(Name = "LastAccessDateTime", DbType = "DateTime")] System.Nullable<System.DateTime> lastAccessDateTime, [Parameter(Name = "TotalRequestContentLength", DbType = "BigInt")] System.Nullable<long> totalRequestContentLength)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), mode, action, machineName, requestType, totalSqlRequestCount, totalExecutionTime, lastAccessDateTime, totalRequestContentLength);
			return ((int)(result.ReturnValue));
		}
	}

	[Table(Name = "dbo.Appendix")]
	public partial class Appendix : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _AppendixGUID;

		private System.Guid _OrderDocGUID;

		private string _Title;

		private System.Nullable<decimal> _InvoiceCost;

		private System.Nullable<decimal> _Discount;

		private System.Nullable<int> _CountryID;

		private string _Company;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private bool _IsDeleted;

		private int _SeqNo;

		private System.Nullable<System.Guid> _Guid;

		private System.Nullable<decimal> _OldID;

		private int _TitlePartsCount;

		private EntityRef<C_Country> _Country;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<OrderDoc> _OrderDoc;

		private EntitySet<AppendixCommDocs> _AppendixCommDocs;

		private EntitySet<AppendixQuantity> _AppendixQuantity;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnAppendixGUIDChanging(System.Guid value);
		partial void OnAppendixGUIDChanged();
		partial void OnOrderDocGUIDChanging(System.Guid value);
		partial void OnOrderDocGUIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnInvoiceCostChanging(System.Nullable<decimal> value);
		partial void OnInvoiceCostChanged();
		partial void OnDiscountChanging(System.Nullable<decimal> value);
		partial void OnDiscountChanged();
		partial void OnCountryIDChanging(System.Nullable<int> value);
		partial void OnCountryIDChanged();
		partial void OnCompanyChanging(string value);
		partial void OnCompanyChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnGuidChanging(System.Nullable<System.Guid> value);
		partial void OnGuidChanged();
		partial void OnOldIDChanging(System.Nullable<decimal> value);
		partial void OnOldIDChanged();
		partial void OnTitlePartsCountChanging(int value);
		partial void OnTitlePartsCountChanged();
		#endregion

		public Appendix()
		{
			this._Country = default(EntityRef<C_Country>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDoc = default(EntityRef<OrderDoc>);
			this._AppendixCommDocs = new EntitySet<AppendixCommDocs>(new Action<AppendixCommDocs>(this.attach_AppendixCommDocs), new Action<AppendixCommDocs>(this.detach_AppendixCommDocs));
			this._AppendixQuantity = new EntitySet<AppendixQuantity>(new Action<AppendixQuantity>(this.attach_AppendixQuantity), new Action<AppendixQuantity>(this.detach_AppendixQuantity));
			OnCreated();
		}

		[Column(Storage = "_AppendixGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid AppendixGUID
		{
			get
			{
				return this._AppendixGUID;
			}
			set
			{
				if ((this._AppendixGUID != value))
				{
					this.OnAppendixGUIDChanging(value);
					this.SendPropertyChanging();
					this._AppendixGUID = value;
					this.SendPropertyChanged("AppendixGUID");
					this.OnAppendixGUIDChanged();
				}
			}
		}

		[Column(Storage = "_OrderDocGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_InvoiceCost", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> InvoiceCost
		{
			get
			{
				return this._InvoiceCost;
			}
			set
			{
				if ((this._InvoiceCost != value))
				{
					this.OnInvoiceCostChanging(value);
					this.SendPropertyChanging();
					this._InvoiceCost = value;
					this.SendPropertyChanged("InvoiceCost");
					this.OnInvoiceCostChanged();
				}
			}
		}

		[Column(Storage = "_Discount", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}

		[Column(Storage = "_CountryID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}

		[Column(Storage = "_Company", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_OldID", DbType = "Decimal(14,0)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}

		[Column(Storage = "_TitlePartsCount", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int TitlePartsCount
		{
			get
			{
				return this._TitlePartsCount;
			}
			set
			{
				if ((this._TitlePartsCount != value))
				{
					this.OnTitlePartsCountChanging(value);
					this.SendPropertyChanging();
					this._TitlePartsCount = value;
					this.SendPropertyChanged("TitlePartsCount");
					this.OnTitlePartsCountChanged();
				}
			}
		}

		[Association(Name = "FK_Appendix_Country", Storage = "_Country", ThisKey = "CountryID", OtherKey = "CountryID", IsForeignKey = true)]
		public C_Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				C_Country previousValue = this._Country.Entity;
				if (((previousValue != value)
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Appendix.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Appendix.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}

		[Association(Name = "FK_Appendix_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.Appendix.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.Appendix.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_Appendix_OrderDoc", Storage = "_OrderDoc", ThisKey = "OrderDocGUID", OtherKey = "OrderGUID", IsForeignKey = true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value)
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.AppendixItems.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.AppendixItems.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}

		[Association(Name = "FK_AppendixCommDocs_Appendix", Storage = "_AppendixCommDocs", ThisKey = "AppendixGUID", OtherKey = "AppendixGUID", DeleteRule = "CASCADE")]
		public EntitySet<AppendixCommDocs> AppendixCommDocs
		{
			get
			{
				return this._AppendixCommDocs;
			}
			set
			{
				this._AppendixCommDocs.Assign(value);
			}
		}

		[Association(Name = "FK_AppendixQuantity_Appendix", Storage = "_AppendixQuantity", ThisKey = "AppendixGUID", OtherKey = "AppendixGUID", DeleteRule = "CASCADE")]
		public EntitySet<AppendixQuantity> AppendixQuantity
		{
			get
			{
				return this._AppendixQuantity;
			}
			set
			{
				this._AppendixQuantity.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_AppendixCommDocs(AppendixCommDocs entity)
		{
			this.SendPropertyChanging();
			entity.Appendix = this;
		}

		private void detach_AppendixCommDocs(AppendixCommDocs entity)
		{
			this.SendPropertyChanging();
			entity.Appendix = null;
		}

		private void attach_AppendixQuantity(AppendixQuantity entity)
		{
			this.SendPropertyChanging();
			entity.Appendix = this;
		}

		private void detach_AppendixQuantity(AppendixQuantity entity)
		{
			this.SendPropertyChanging();
			entity.Appendix = null;
		}
	}

	[Table(Name = "dbo.AppendixCommDocs")]
	public partial class AppendixCommDocs : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _AppendixGUID;

		private System.Guid _CommDocsGUID;

		private EntityRef<Appendix> _Appendix;

		private EntityRef<CommodityDocument> _CommDocs;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnAppendixGUIDChanging(System.Guid value);
		partial void OnAppendixGUIDChanged();
		partial void OnCommDocsGUIDChanging(System.Guid value);
		partial void OnCommDocsGUIDChanged();
		#endregion

		public AppendixCommDocs()
		{
			this._Appendix = default(EntityRef<Appendix>);
			this._CommDocs = default(EntityRef<CommodityDocument>);
			OnCreated();
		}

		[Column(Storage = "_AppendixGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid AppendixGUID
		{
			get
			{
				return this._AppendixGUID;
			}
			set
			{
				if ((this._AppendixGUID != value))
				{
					if (this._Appendix.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppendixGUIDChanging(value);
					this.SendPropertyChanging();
					this._AppendixGUID = value;
					this.SendPropertyChanged("AppendixGUID");
					this.OnAppendixGUIDChanged();
				}
			}
		}

		[Column(Storage = "_CommDocsGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid CommDocsGUID
		{
			get
			{
				return this._CommDocsGUID;
			}
			set
			{
				if ((this._CommDocsGUID != value))
				{
					if (this._CommDocs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommDocsGUIDChanging(value);
					this.SendPropertyChanging();
					this._CommDocsGUID = value;
					this.SendPropertyChanged("CommDocsGUID");
					this.OnCommDocsGUIDChanged();
				}
			}
		}

		[Association(Name = "FK_AppendixCommDocs_Appendix", Storage = "_Appendix", ThisKey = "AppendixGUID", OtherKey = "AppendixGUID", IsForeignKey = true, DeleteOnNull = true)]
		public Appendix Appendix
		{
			get
			{
				return this._Appendix.Entity;
			}
			set
			{
				Appendix previousValue = this._Appendix.Entity;
				if (((previousValue != value)
							|| (this._Appendix.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Appendix.Entity = null;
						previousValue.AppendixCommDocs.Remove(this);
					}
					this._Appendix.Entity = value;
					if ((value != null))
					{
						value.AppendixCommDocs.Add(this);
						this._AppendixGUID = value.AppendixGUID;
					}
					else
					{
						this._AppendixGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Appendix");
				}
			}
		}

		[Association(Name = "FK_AppendixCommDocs_CommDocs", Storage = "_CommDocs", ThisKey = "CommDocsGUID", OtherKey = "CommodityDocumentGUID", IsForeignKey = true, DeleteOnNull = true)]
		public CommodityDocument CommDocs
		{
			get
			{
				return this._CommDocs.Entity;
			}
			set
			{
				CommodityDocument previousValue = this._CommDocs.Entity;
				if (((previousValue != value)
							|| (this._CommDocs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommDocs.Entity = null;
						previousValue.AppendixCommDocs.Remove(this);
					}
					this._CommDocs.Entity = value;
					if ((value != null))
					{
						value.AppendixCommDocs.Add(this);
						this._CommDocsGUID = value.CommodityDocumentGUID;
					}
					else
					{
						this._CommDocsGUID = default(System.Guid);
					}
					this.SendPropertyChanged("CommDocs");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.AppendixQuantity")]
	public partial class AppendixQuantity : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _AppendixQuantityID;

		private System.Guid _AppendixGUID;

		private decimal _ResolvedQuantity;

		private int _MeasureID;

		private System.Nullable<int> _BoxMeasureID;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private bool _IsDeleted;

		private System.Nullable<System.Guid> _Guid;

		private string _Copy_Measure_Title;

		private string _Copy_BoxMeasure_Title;

		private EntityRef<Appendix> _Appendix;

		private EntityRef<C_Measure> _BoxMeasure;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<C_Measure> _Measure;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnAppendixQuantityIDChanging(int value);
		partial void OnAppendixQuantityIDChanged();
		partial void OnAppendixGUIDChanging(System.Guid value);
		partial void OnAppendixGUIDChanged();
		partial void OnResolvedQuantityChanging(decimal value);
		partial void OnResolvedQuantityChanged();
		partial void OnMeasureIDChanging(int value);
		partial void OnMeasureIDChanged();
		partial void OnBoxMeasureIDChanging(System.Nullable<int> value);
		partial void OnBoxMeasureIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnGuidChanging(System.Nullable<System.Guid> value);
		partial void OnGuidChanged();
		partial void OnCopy_Measure_TitleChanging(string value);
		partial void OnCopy_Measure_TitleChanged();
		partial void OnCopy_BoxMeasure_TitleChanging(string value);
		partial void OnCopy_BoxMeasure_TitleChanged();
		#endregion

		public AppendixQuantity()
		{
			this._Appendix = default(EntityRef<Appendix>);
			this._BoxMeasure = default(EntityRef<C_Measure>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Measure = default(EntityRef<C_Measure>);
			OnCreated();
		}

		[Column(Storage = "_AppendixQuantityID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int AppendixQuantityID
		{
			get
			{
				return this._AppendixQuantityID;
			}
			set
			{
				if ((this._AppendixQuantityID != value))
				{
					this.OnAppendixQuantityIDChanging(value);
					this.SendPropertyChanging();
					this._AppendixQuantityID = value;
					this.SendPropertyChanged("AppendixQuantityID");
					this.OnAppendixQuantityIDChanged();
				}
			}
		}

		[Column(Storage = "_AppendixGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid AppendixGUID
		{
			get
			{
				return this._AppendixGUID;
			}
			set
			{
				if ((this._AppendixGUID != value))
				{
					if (this._Appendix.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppendixGUIDChanging(value);
					this.SendPropertyChanging();
					this._AppendixGUID = value;
					this.SendPropertyChanged("AppendixGUID");
					this.OnAppendixGUIDChanged();
				}
			}
		}

		[Column(Storage = "_ResolvedQuantity", DbType = "Decimal(20,7) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public decimal ResolvedQuantity
		{
			get
			{
				return this._ResolvedQuantity;
			}
			set
			{
				if ((this._ResolvedQuantity != value))
				{
					this.OnResolvedQuantityChanging(value);
					this.SendPropertyChanging();
					this._ResolvedQuantity = value;
					this.SendPropertyChanged("ResolvedQuantity");
					this.OnResolvedQuantityChanged();
				}
			}
		}

		[Column(Storage = "_MeasureID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					if (this._Measure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}

		[Column(Storage = "_BoxMeasureID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> BoxMeasureID
		{
			get
			{
				return this._BoxMeasureID;
			}
			set
			{
				if ((this._BoxMeasureID != value))
				{
					if (this._BoxMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoxMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._BoxMeasureID = value;
					this.SendPropertyChanged("BoxMeasureID");
					this.OnBoxMeasureIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_Copy_Measure_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_Measure_Title
		{
			get
			{
				return this._Copy_Measure_Title;
			}
			set
			{
				if ((this._Copy_Measure_Title != value))
				{
					this.OnCopy_Measure_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_Measure_Title = value;
					this.SendPropertyChanged("Copy_Measure_Title");
					this.OnCopy_Measure_TitleChanged();
				}
			}
		}

		[Column(Storage = "_Copy_BoxMeasure_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_BoxMeasure_Title
		{
			get
			{
				return this._Copy_BoxMeasure_Title;
			}
			set
			{
				if ((this._Copy_BoxMeasure_Title != value))
				{
					this.OnCopy_BoxMeasure_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_BoxMeasure_Title = value;
					this.SendPropertyChanged("Copy_BoxMeasure_Title");
					this.OnCopy_BoxMeasure_TitleChanged();
				}
			}
		}

		[Association(Name = "FK_AppendixQuantity_Appendix", Storage = "_Appendix", ThisKey = "AppendixGUID", OtherKey = "AppendixGUID", IsForeignKey = true, DeleteOnNull = true)]
		public Appendix Appendix
		{
			get
			{
				return this._Appendix.Entity;
			}
			set
			{
				Appendix previousValue = this._Appendix.Entity;
				if (((previousValue != value)
							|| (this._Appendix.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Appendix.Entity = null;
						previousValue.AppendixQuantity.Remove(this);
					}
					this._Appendix.Entity = value;
					if ((value != null))
					{
						value.AppendixQuantity.Add(this);
						this._AppendixGUID = value.AppendixGUID;
					}
					else
					{
						this._AppendixGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Appendix");
				}
			}
		}

		[Association(Name = "FK_AppendixQuantity_BoxMeasure", Storage = "_BoxMeasure", ThisKey = "BoxMeasureID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure BoxMeasure
		{
			get
			{
				return this._BoxMeasure.Entity;
			}
			set
			{
				C_Measure previousValue = this._BoxMeasure.Entity;
				if (((previousValue != value)
							|| (this._BoxMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BoxMeasure.Entity = null;
						previousValue.AppendixQuantity.Remove(this);
					}
					this._BoxMeasure.Entity = value;
					if ((value != null))
					{
						value.AppendixQuantity.Add(this);
						this._BoxMeasureID = value.MeasureID;
					}
					else
					{
						this._BoxMeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BoxMeasure");
				}
			}
		}

		[Association(Name = "FK_AppendixQuantity_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.AppendixQuantity.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.AppendixQuantity.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_AppendixQuantity_Measure", Storage = "_Measure", ThisKey = "MeasureID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure Measure
		{
			get
			{
				return this._Measure.Entity;
			}
			set
			{
				C_Measure previousValue = this._Measure.Entity;
				if (((previousValue != value)
							|| (this._Measure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure.Entity = null;
						previousValue.Measure.Remove(this);
					}
					this._Measure.Entity = value;
					if ((value != null))
					{
						value.Measure.Add(this);
						this._MeasureID = value.MeasureID;
					}
					else
					{
						this._MeasureID = default(int);
					}
					this.SendPropertyChanged("Measure");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.Article")]
	public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ArticleID;

		private System.Nullable<int> _File1FileID;

		private System.Nullable<int> _File2FileID;

		private System.Nullable<int> _File3FileID;

		private System.Nullable<int> _File4FileID;

		private System.Nullable<int> _File5FileID;

		private System.Nullable<int> _ImageFileID;

		private EntityRef<N_File> _File1;

		private EntityRef<N_File> _File2;

		private EntityRef<N_File> _File3;

		private EntityRef<N_File> _File4;

		private EntityRef<N_File> _File5;

		private EntityRef<N_File> _Image;

		private EntityRef<SiteObject> _SiteObject;

		private EntitySet<ArticleData> _ArticleData;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnArticleIDChanging(int value);
		partial void OnArticleIDChanged();
		partial void OnFile1FileIDChanging(System.Nullable<int> value);
		partial void OnFile1FileIDChanged();
		partial void OnFile2FileIDChanging(System.Nullable<int> value);
		partial void OnFile2FileIDChanged();
		partial void OnFile3FileIDChanging(System.Nullable<int> value);
		partial void OnFile3FileIDChanged();
		partial void OnFile4FileIDChanging(System.Nullable<int> value);
		partial void OnFile4FileIDChanged();
		partial void OnFile5FileIDChanging(System.Nullable<int> value);
		partial void OnFile5FileIDChanged();
		partial void OnImageFileIDChanging(System.Nullable<int> value);
		partial void OnImageFileIDChanged();
		#endregion

		public Article()
		{
			this._File1 = default(EntityRef<N_File>);
			this._File2 = default(EntityRef<N_File>);
			this._File3 = default(EntityRef<N_File>);
			this._File4 = default(EntityRef<N_File>);
			this._File5 = default(EntityRef<N_File>);
			this._Image = default(EntityRef<N_File>);
			this._SiteObject = default(EntityRef<SiteObject>);
			this._ArticleData = new EntitySet<ArticleData>(new Action<ArticleData>(this.attach_ArticleData), new Action<ArticleData>(this.detach_ArticleData));
			OnCreated();
		}

		[Column(Storage = "_ArticleID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int ArticleID
		{
			get
			{
				return this._ArticleID;
			}
			set
			{
				if ((this._ArticleID != value))
				{
					if (this._SiteObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArticleIDChanging(value);
					this.SendPropertyChanging();
					this._ArticleID = value;
					this.SendPropertyChanged("ArticleID");
					this.OnArticleIDChanged();
				}
			}
		}

		[Column(Storage = "_File1FileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> File1FileID
		{
			get
			{
				return this._File1FileID;
			}
			set
			{
				if ((this._File1FileID != value))
				{
					if (this._File1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFile1FileIDChanging(value);
					this.SendPropertyChanging();
					this._File1FileID = value;
					this.SendPropertyChanged("File1FileID");
					this.OnFile1FileIDChanged();
				}
			}
		}

		[Column(Storage = "_File2FileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> File2FileID
		{
			get
			{
				return this._File2FileID;
			}
			set
			{
				if ((this._File2FileID != value))
				{
					if (this._File2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFile2FileIDChanging(value);
					this.SendPropertyChanging();
					this._File2FileID = value;
					this.SendPropertyChanged("File2FileID");
					this.OnFile2FileIDChanged();
				}
			}
		}

		[Column(Storage = "_File3FileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> File3FileID
		{
			get
			{
				return this._File3FileID;
			}
			set
			{
				if ((this._File3FileID != value))
				{
					if (this._File3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFile3FileIDChanging(value);
					this.SendPropertyChanging();
					this._File3FileID = value;
					this.SendPropertyChanged("File3FileID");
					this.OnFile3FileIDChanged();
				}
			}
		}

		[Column(Storage = "_File4FileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> File4FileID
		{
			get
			{
				return this._File4FileID;
			}
			set
			{
				if ((this._File4FileID != value))
				{
					if (this._File4.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFile4FileIDChanging(value);
					this.SendPropertyChanging();
					this._File4FileID = value;
					this.SendPropertyChanged("File4FileID");
					this.OnFile4FileIDChanged();
				}
			}
		}

		[Column(Storage = "_File5FileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> File5FileID
		{
			get
			{
				return this._File5FileID;
			}
			set
			{
				if ((this._File5FileID != value))
				{
					if (this._File5.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFile5FileIDChanging(value);
					this.SendPropertyChanging();
					this._File5FileID = value;
					this.SendPropertyChanged("File5FileID");
					this.OnFile5FileIDChanged();
				}
			}
		}

		[Column(Storage = "_ImageFileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ImageFileID
		{
			get
			{
				return this._ImageFileID;
			}
			set
			{
				if ((this._ImageFileID != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImageFileIDChanging(value);
					this.SendPropertyChanging();
					this._ImageFileID = value;
					this.SendPropertyChanged("ImageFileID");
					this.OnImageFileIDChanged();
				}
			}
		}

		[Association(Name = "FK_Article_File1", Storage = "_File1", ThisKey = "File1FileID", OtherKey = "FileID", IsForeignKey = true)]
		public N_File File1
		{
			get
			{
				return this._File1.Entity;
			}
			set
			{
				N_File previousValue = this._File1.Entity;
				if (((previousValue != value)
							|| (this._File1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File1.Entity = null;
						previousValue.Article.Remove(this);
					}
					this._File1.Entity = value;
					if ((value != null))
					{
						value.Article.Add(this);
						this._File1FileID = value.FileID;
					}
					else
					{
						this._File1FileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("File1");
				}
			}
		}

		[Association(Name = "FK_Article_File2", Storage = "_File2", ThisKey = "File2FileID", OtherKey = "FileID", IsForeignKey = true)]
		public N_File File2
		{
			get
			{
				return this._File2.Entity;
			}
			set
			{
				N_File previousValue = this._File2.Entity;
				if (((previousValue != value)
							|| (this._File2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File2.Entity = null;
						previousValue.File.Remove(this);
					}
					this._File2.Entity = value;
					if ((value != null))
					{
						value.File.Add(this);
						this._File2FileID = value.FileID;
					}
					else
					{
						this._File2FileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("File2");
				}
			}
		}

		[Association(Name = "FK_Article_File3", Storage = "_File3", ThisKey = "File3FileID", OtherKey = "FileID", IsForeignKey = true)]
		public N_File File3
		{
			get
			{
				return this._File3.Entity;
			}
			set
			{
				N_File previousValue = this._File3.Entity;
				if (((previousValue != value)
							|| (this._File3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File3.Entity = null;
						previousValue.Article_File3.Remove(this);
					}
					this._File3.Entity = value;
					if ((value != null))
					{
						value.Article_File3.Add(this);
						this._File3FileID = value.FileID;
					}
					else
					{
						this._File3FileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("File3");
				}
			}
		}

		[Association(Name = "FK_Article_File4", Storage = "_File4", ThisKey = "File4FileID", OtherKey = "FileID", IsForeignKey = true)]
		public N_File File4
		{
			get
			{
				return this._File4.Entity;
			}
			set
			{
				N_File previousValue = this._File4.Entity;
				if (((previousValue != value)
							|| (this._File4.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File4.Entity = null;
						previousValue.Article_File4.Remove(this);
					}
					this._File4.Entity = value;
					if ((value != null))
					{
						value.Article_File4.Add(this);
						this._File4FileID = value.FileID;
					}
					else
					{
						this._File4FileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("File4");
				}
			}
		}

		[Association(Name = "FK_Article_File5", Storage = "_File5", ThisKey = "File5FileID", OtherKey = "FileID", IsForeignKey = true)]
		public N_File File5
		{
			get
			{
				return this._File5.Entity;
			}
			set
			{
				N_File previousValue = this._File5.Entity;
				if (((previousValue != value)
							|| (this._File5.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File5.Entity = null;
						previousValue.Article_File5.Remove(this);
					}
					this._File5.Entity = value;
					if ((value != null))
					{
						value.Article_File5.Add(this);
						this._File5FileID = value.FileID;
					}
					else
					{
						this._File5FileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("File5");
				}
			}
		}

		[Association(Name = "FK_Article_Image", Storage = "_Image", ThisKey = "ImageFileID", OtherKey = "FileID", IsForeignKey = true)]
		public N_File Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				N_File previousValue = this._Image.Entity;
				if (((previousValue != value)
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.Article_Image.Remove(this);
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.Article_Image.Add(this);
						this._ImageFileID = value.FileID;
					}
					else
					{
						this._ImageFileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}

		[Association(Name = "FK_Article_SiteObject", Storage = "_SiteObject", ThisKey = "ArticleID", OtherKey = "SiteObjectID", IsForeignKey = true, DeleteOnNull = true)]
		public SiteObject SiteObject
		{
			get
			{
				return this._SiteObject.Entity;
			}
			set
			{
				SiteObject previousValue = this._SiteObject.Entity;
				if (((previousValue != value)
							|| (this._SiteObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SiteObject.Entity = null;
						previousValue.Article = null;
					}
					this._SiteObject.Entity = value;
					if ((value != null))
					{
						value.Article = this;
						this._ArticleID = value.SiteObjectID;
					}
					else
					{
						this._ArticleID = default(int);
					}
					this.SendPropertyChanged("SiteObject");
				}
			}
		}

		[Association(Name = "FK_ArticleData_Article", Storage = "_ArticleData", ThisKey = "ArticleID", OtherKey = "ArticleID", DeleteRule = "CASCADE")]
		public EntitySet<ArticleData> ArticleData
		{
			get
			{
				return this._ArticleData;
			}
			set
			{
				this._ArticleData.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ArticleData(ArticleData entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}

		private void detach_ArticleData(ArticleData entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
	}

	[Table(Name = "dbo.ArticleData")]
	public partial class ArticleData : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ArticleDataID;

		private int _ArticleID;

		private string _LanguageCode;

		private string _Content;

		private string _Summary;

		private EntityRef<Article> _Article;

		private EntityRef<C_Language> _C_Language;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnArticleDataIDChanging(int value);
		partial void OnArticleDataIDChanged();
		partial void OnArticleIDChanging(int value);
		partial void OnArticleIDChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnContentChanging(string value);
		partial void OnContentChanged();
		partial void OnSummaryChanging(string value);
		partial void OnSummaryChanged();
		#endregion

		public ArticleData()
		{
			this._Article = default(EntityRef<Article>);
			this._C_Language = default(EntityRef<C_Language>);
			OnCreated();
		}

		[Column(Storage = "_ArticleDataID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int ArticleDataID
		{
			get
			{
				return this._ArticleDataID;
			}
			set
			{
				if ((this._ArticleDataID != value))
				{
					this.OnArticleDataIDChanging(value);
					this.SendPropertyChanging();
					this._ArticleDataID = value;
					this.SendPropertyChanged("ArticleDataID");
					this.OnArticleDataIDChanged();
				}
			}
		}

		[Column(Storage = "_ArticleID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ArticleID
		{
			get
			{
				return this._ArticleID;
			}
			set
			{
				if ((this._ArticleID != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArticleIDChanging(value);
					this.SendPropertyChanging();
					this._ArticleID = value;
					this.SendPropertyChanged("ArticleID");
					this.OnArticleIDChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					if (this._C_Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_Content", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}

		[Column(Storage = "_Summary", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}

		[Association(Name = "FK_ArticleData_Article", Storage = "_Article", ThisKey = "ArticleID", OtherKey = "ArticleID", IsForeignKey = true, DeleteOnNull = true)]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value)
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.ArticleData.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.ArticleData.Add(this);
						this._ArticleID = value.ArticleID;
					}
					else
					{
						this._ArticleID = default(int);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}

		[Association(Name = "FK_ArticleData_C_Language", Storage = "_C_Language", ThisKey = "LanguageCode", OtherKey = "LanguageCode", IsForeignKey = true, DeleteOnNull = true)]
		public C_Language C_Language
		{
			get
			{
				return this._C_Language.Entity;
			}
			set
			{
				C_Language previousValue = this._C_Language.Entity;
				if (((previousValue != value)
							|| (this._C_Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_Language.Entity = null;
						previousValue.ArticleData.Remove(this);
					}
					this._C_Language.Entity = value;
					if ((value != null))
					{
						value.ArticleData.Add(this);
						this._LanguageCode = value.LanguageCode;
					}
					else
					{
						this._LanguageCode = default(string);
					}
					this.SendPropertyChanged("C_Language");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.Blank")]
	public partial class Blank : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _BlankGUID;

		private System.Nullable<System.Guid> _OrderDocGUID;

		private char _Type;

		private string _SerialNo;

		private string _Title;

		private System.Nullable<int> _EmployeeID;

		private System.Nullable<int> _ActivityID;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private bool _IsDeleted;

		private System.Nullable<int> _RepresentationID;

		private System.Nullable<int> _DublicateEmployeeID;

		private string _DublicateReason;

		private System.Nullable<System.DateTime> _DublicateReqDate;

		private string _DublicateReqNo;

		private bool _IsDublicate;

		private EntityRef<WF_Activity> _Activity;

		private EntityRef<Employee> _DublicateEmployee;

		private EntityRef<Employee> _Employee;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<OrderDoc> _OrderDoc;

		private EntityRef<Representation> _Representation;

		private EntitySet<BlankTransition> _BlankTransition;

		private EntitySet<FactForm> _FactForm;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnBlankGUIDChanging(System.Guid value);
		partial void OnBlankGUIDChanged();
		partial void OnOrderDocGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnOrderDocGUIDChanged();
		partial void OnTypeChanging(char value);
		partial void OnTypeChanged();
		partial void OnSerialNoChanging(string value);
		partial void OnSerialNoChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnEmployeeIDChanging(System.Nullable<int> value);
		partial void OnEmployeeIDChanged();
		partial void OnActivityIDChanging(System.Nullable<int> value);
		partial void OnActivityIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnRepresentationIDChanging(System.Nullable<int> value);
		partial void OnRepresentationIDChanged();
		partial void OnDublicateEmployeeIDChanging(System.Nullable<int> value);
		partial void OnDublicateEmployeeIDChanged();
		partial void OnDublicateReasonChanging(string value);
		partial void OnDublicateReasonChanged();
		partial void OnDublicateReqDateChanging(System.Nullable<System.DateTime> value);
		partial void OnDublicateReqDateChanged();
		partial void OnDublicateReqNoChanging(string value);
		partial void OnDublicateReqNoChanged();
		partial void OnIsDublicateChanging(bool value);
		partial void OnIsDublicateChanged();
		#endregion

		public Blank()
		{
			this._Activity = default(EntityRef<WF_Activity>);
			this._DublicateEmployee = default(EntityRef<Employee>);
			this._Employee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDoc = default(EntityRef<OrderDoc>);
			this._Representation = default(EntityRef<Representation>);
			this._BlankTransition = new EntitySet<BlankTransition>(new Action<BlankTransition>(this.attach_BlankTransition), new Action<BlankTransition>(this.detach_BlankTransition));
			this._FactForm = new EntitySet<FactForm>(new Action<FactForm>(this.attach_FactForm), new Action<FactForm>(this.detach_FactForm));
			OnCreated();
		}

		[Column(Storage = "_BlankGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid BlankGUID
		{
			get
			{
				return this._BlankGUID;
			}
			set
			{
				if ((this._BlankGUID != value))
				{
					this.OnBlankGUIDChanging(value);
					this.SendPropertyChanging();
					this._BlankGUID = value;
					this.SendPropertyChanged("BlankGUID");
					this.OnBlankGUIDChanged();
				}
			}
		}

		[Column(Storage = "_OrderDocGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}

		[Column(Storage = "_Type", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}

		[Column(Storage = "_SerialNo", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SerialNo
		{
			get
			{
				return this._SerialNo;
			}
			set
			{
				if ((this._SerialNo != value))
				{
					this.OnSerialNoChanging(value);
					this.SendPropertyChanging();
					this._SerialNo = value;
					this.SendPropertyChanged("SerialNo");
					this.OnSerialNoChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_EmployeeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}

		[Column(Storage = "_ActivityID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ActivityID = value;
					this.SendPropertyChanged("ActivityID");
					this.OnActivityIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_RepresentationID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					if (this._Representation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentationID = value;
					this.SendPropertyChanged("RepresentationID");
					this.OnRepresentationIDChanged();
				}
			}
		}

		[Column(Storage = "_DublicateEmployeeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> DublicateEmployeeID
		{
			get
			{
				return this._DublicateEmployeeID;
			}
			set
			{
				if ((this._DublicateEmployeeID != value))
				{
					if (this._DublicateEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDublicateEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._DublicateEmployeeID = value;
					this.SendPropertyChanged("DublicateEmployeeID");
					this.OnDublicateEmployeeIDChanged();
				}
			}
		}

		[Column(Storage = "_DublicateReason", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DublicateReason
		{
			get
			{
				return this._DublicateReason;
			}
			set
			{
				if ((this._DublicateReason != value))
				{
					this.OnDublicateReasonChanging(value);
					this.SendPropertyChanging();
					this._DublicateReason = value;
					this.SendPropertyChanged("DublicateReason");
					this.OnDublicateReasonChanged();
				}
			}
		}

		[Column(Storage = "_DublicateReqDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DublicateReqDate
		{
			get
			{
				return this._DublicateReqDate;
			}
			set
			{
				if ((this._DublicateReqDate != value))
				{
					this.OnDublicateReqDateChanging(value);
					this.SendPropertyChanging();
					this._DublicateReqDate = value;
					this.SendPropertyChanged("DublicateReqDate");
					this.OnDublicateReqDateChanged();
				}
			}
		}

		[Column(Storage = "_DublicateReqNo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DublicateReqNo
		{
			get
			{
				return this._DublicateReqNo;
			}
			set
			{
				if ((this._DublicateReqNo != value))
				{
					this.OnDublicateReqNoChanging(value);
					this.SendPropertyChanging();
					this._DublicateReqNo = value;
					this.SendPropertyChanged("DublicateReqNo");
					this.OnDublicateReqNoChanged();
				}
			}
		}

		[Column(Storage = "_IsDublicate", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDublicate
		{
			get
			{
				return this._IsDublicate;
			}
			set
			{
				if ((this._IsDublicate != value))
				{
					this.OnIsDublicateChanging(value);
					this.SendPropertyChanging();
					this._IsDublicate = value;
					this.SendPropertyChanged("IsDublicate");
					this.OnIsDublicateChanged();
				}
			}
		}

		[Association(Name = "FK_Blank_Activity", Storage = "_Activity", ThisKey = "ActivityID", OtherKey = "ActivityID", IsForeignKey = true)]
		public WF_Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				WF_Activity previousValue = this._Activity.Entity;
				if (((previousValue != value)
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.Blank.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.Blank.Add(this);
						this._ActivityID = value.ActivityID;
					}
					else
					{
						this._ActivityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}

		[Association(Name = "FK_Blank_DublicateEmployee", Storage = "_DublicateEmployee", ThisKey = "DublicateEmployeeID", OtherKey = "EmployeeID", IsForeignKey = true)]
		public Employee DublicateEmployee
		{
			get
			{
				return this._DublicateEmployee.Entity;
			}
			set
			{
				Employee previousValue = this._DublicateEmployee.Entity;
				if (((previousValue != value)
							|| (this._DublicateEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DublicateEmployee.Entity = null;
						previousValue.Blank.Remove(this);
					}
					this._DublicateEmployee.Entity = value;
					if ((value != null))
					{
						value.Blank.Add(this);
						this._DublicateEmployeeID = value.EmployeeID;
					}
					else
					{
						this._DublicateEmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DublicateEmployee");
				}
			}
		}

		[Association(Name = "FK_Blank_Employee", Storage = "_Employee", ThisKey = "EmployeeID", OtherKey = "EmployeeID", IsForeignKey = true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value)
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Blank_Employee.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Blank_Employee.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}

		[Association(Name = "FK_Blank_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.Blank.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.Blank.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_Blank_OrderDoc", Storage = "_OrderDoc", ThisKey = "OrderDocGUID", OtherKey = "OrderGUID", IsForeignKey = true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value)
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.Blanks.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.Blanks.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}

		[Association(Name = "FK_Blank_Representation", Storage = "_Representation", ThisKey = "RepresentationID", OtherKey = "RepresentationID", IsForeignKey = true)]
		public Representation Representation
		{
			get
			{
				return this._Representation.Entity;
			}
			set
			{
				Representation previousValue = this._Representation.Entity;
				if (((previousValue != value)
							|| (this._Representation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representation.Entity = null;
						previousValue.Blank.Remove(this);
					}
					this._Representation.Entity = value;
					if ((value != null))
					{
						value.Blank.Add(this);
						this._RepresentationID = value.RepresentationID;
					}
					else
					{
						this._RepresentationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Representation");
				}
			}
		}

		[Association(Name = "FK_BlankTransition_Parent", Storage = "_BlankTransition", ThisKey = "BlankGUID", OtherKey = "ParentGUID", DeleteRule = "CASCADE")]
		public EntitySet<BlankTransition> BlankTransition
		{
			get
			{
				return this._BlankTransition;
			}
			set
			{
				this._BlankTransition.Assign(value);
			}
		}

		[Association(Name = "FK_FactForm_Blank", Storage = "_FactForm", ThisKey = "BlankGUID", OtherKey = "BlankGUID", DeleteRule = "NO ACTION")]
		public EntitySet<FactForm> FactForm
		{
			get
			{
				return this._FactForm;
			}
			set
			{
				this._FactForm.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}

		private void detach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}

		private void attach_FactForm(FactForm entity)
		{
			this.SendPropertyChanging();
			entity.Blank = this;
		}

		private void detach_FactForm(FactForm entity)
		{
			this.SendPropertyChanging();
			entity.Blank = null;
		}
	}

	[Table(Name = "dbo.BlankTransition")]
	public partial class BlankTransition : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _BlankTransitionID;

		private System.DateTime _CreateDate;

		private string _Comment;

		private bool _IsCurrent;

		private bool _IsLast;

		private int _SeqNo;

		private System.Guid _ParentGUID;

		private int _SubjectID;

		private int _WorkflowID;

		private int _ActivityID;

		private int _TransitionID;

		private EntityRef<WF_Activity> _Activity;

		private EntityRef<Blank> _Parent;

		private EntityRef<SPM_Subject> _Subject;

		private EntityRef<WF_Transition> _Transition;

		private EntityRef<WF_Workflow> _Workflow;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnBlankTransitionIDChanging(int value);
		partial void OnBlankTransitionIDChanged();
		partial void OnCreateDateChanging(System.DateTime value);
		partial void OnCreateDateChanged();
		partial void OnCommentChanging(string value);
		partial void OnCommentChanged();
		partial void OnIsCurrentChanging(bool value);
		partial void OnIsCurrentChanged();
		partial void OnIsLastChanging(bool value);
		partial void OnIsLastChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnParentGUIDChanging(System.Guid value);
		partial void OnParentGUIDChanged();
		partial void OnSubjectIDChanging(int value);
		partial void OnSubjectIDChanged();
		partial void OnWorkflowIDChanging(int value);
		partial void OnWorkflowIDChanged();
		partial void OnActivityIDChanging(int value);
		partial void OnActivityIDChanged();
		partial void OnTransitionIDChanging(int value);
		partial void OnTransitionIDChanged();
		#endregion

		public BlankTransition()
		{
			this._Activity = default(EntityRef<WF_Activity>);
			this._Parent = default(EntityRef<Blank>);
			this._Subject = default(EntityRef<SPM_Subject>);
			this._Transition = default(EntityRef<WF_Transition>);
			this._Workflow = default(EntityRef<WF_Workflow>);
			OnCreated();
		}

		[Column(Storage = "_BlankTransitionID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int BlankTransitionID
		{
			get
			{
				return this._BlankTransitionID;
			}
			set
			{
				if ((this._BlankTransitionID != value))
				{
					this.OnBlankTransitionIDChanging(value);
					this.SendPropertyChanging();
					this._BlankTransitionID = value;
					this.SendPropertyChanged("BlankTransitionID");
					this.OnBlankTransitionIDChanged();
				}
			}
		}

		[Column(Storage = "_CreateDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}

		[Column(Storage = "_Comment", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}

		[Column(Storage = "_IsCurrent", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsCurrent
		{
			get
			{
				return this._IsCurrent;
			}
			set
			{
				if ((this._IsCurrent != value))
				{
					this.OnIsCurrentChanging(value);
					this.SendPropertyChanging();
					this._IsCurrent = value;
					this.SendPropertyChanged("IsCurrent");
					this.OnIsCurrentChanged();
				}
			}
		}

		[Column(Storage = "_IsLast", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsLast
		{
			get
			{
				return this._IsLast;
			}
			set
			{
				if ((this._IsLast != value))
				{
					this.OnIsLastChanging(value);
					this.SendPropertyChanging();
					this._IsLast = value;
					this.SendPropertyChanged("IsLast");
					this.OnIsLastChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_ParentGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid ParentGUID
		{
			get
			{
				return this._ParentGUID;
			}
			set
			{
				if ((this._ParentGUID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentGUIDChanging(value);
					this.SendPropertyChanging();
					this._ParentGUID = value;
					this.SendPropertyChanged("ParentGUID");
					this.OnParentGUIDChanged();
				}
			}
		}

		[Column(Storage = "_SubjectID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}

		[Column(Storage = "_WorkflowID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int WorkflowID
		{
			get
			{
				return this._WorkflowID;
			}
			set
			{
				if ((this._WorkflowID != value))
				{
					if (this._Workflow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkflowIDChanging(value);
					this.SendPropertyChanging();
					this._WorkflowID = value;
					this.SendPropertyChanged("WorkflowID");
					this.OnWorkflowIDChanged();
				}
			}
		}

		[Column(Storage = "_ActivityID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ActivityID = value;
					this.SendPropertyChanged("ActivityID");
					this.OnActivityIDChanged();
				}
			}
		}

		[Column(Storage = "_TransitionID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int TransitionID
		{
			get
			{
				return this._TransitionID;
			}
			set
			{
				if ((this._TransitionID != value))
				{
					if (this._Transition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransitionIDChanging(value);
					this.SendPropertyChanging();
					this._TransitionID = value;
					this.SendPropertyChanged("TransitionID");
					this.OnTransitionIDChanged();
				}
			}
		}

		[Association(Name = "FK_BlankTransition_Activity", Storage = "_Activity", ThisKey = "ActivityID", OtherKey = "ActivityID", IsForeignKey = true)]
		public WF_Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				WF_Activity previousValue = this._Activity.Entity;
				if (((previousValue != value)
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.BlankTransition.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.BlankTransition.Add(this);
						this._ActivityID = value.ActivityID;
					}
					else
					{
						this._ActivityID = default(int);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}

		[Association(Name = "FK_BlankTransition_Parent", Storage = "_Parent", ThisKey = "ParentGUID", OtherKey = "BlankGUID", IsForeignKey = true, DeleteOnNull = true)]
		public Blank Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				Blank previousValue = this._Parent.Entity;
				if (((previousValue != value)
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.BlankTransition.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.BlankTransition.Add(this);
						this._ParentGUID = value.BlankGUID;
					}
					else
					{
						this._ParentGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}

		[Association(Name = "FK_BlankTransition_Subject", Storage = "_Subject", ThisKey = "SubjectID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._Subject.Entity;
				if (((previousValue != value)
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.BlankTransition.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.BlankTransition.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}

		[Association(Name = "FK_BlankTransition_Transition", Storage = "_Transition", ThisKey = "TransitionID", OtherKey = "TransitionID", IsForeignKey = true)]
		public WF_Transition Transition
		{
			get
			{
				return this._Transition.Entity;
			}
			set
			{
				WF_Transition previousValue = this._Transition.Entity;
				if (((previousValue != value)
							|| (this._Transition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transition.Entity = null;
						previousValue.BlankTransition.Remove(this);
					}
					this._Transition.Entity = value;
					if ((value != null))
					{
						value.BlankTransition.Add(this);
						this._TransitionID = value.TransitionID;
					}
					else
					{
						this._TransitionID = default(int);
					}
					this.SendPropertyChanged("Transition");
				}
			}
		}

		[Association(Name = "FK_BlankTransition_Workflow", Storage = "_Workflow", ThisKey = "WorkflowID", OtherKey = "WorkflowID", IsForeignKey = true)]
		public WF_Workflow Workflow
		{
			get
			{
				return this._Workflow.Entity;
			}
			set
			{
				WF_Workflow previousValue = this._Workflow.Entity;
				if (((previousValue != value)
							|| (this._Workflow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Workflow.Entity = null;
						previousValue.BlankTransition.Remove(this);
					}
					this._Workflow.Entity = value;
					if ((value != null))
					{
						value.BlankTransition.Add(this);
						this._WorkflowID = value.WorkflowID;
					}
					else
					{
						this._WorkflowID = default(int);
					}
					this.SendPropertyChanged("Workflow");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_AnnulmentReason")]
	public partial class C_AnnulmentReason : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _AnnulmentReasonID;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private System.Guid _MasterObjectGUID;

		private bool _IsDeleted;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<FactAnnulment> _FactAnnulment;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnAnnulmentReasonIDChanging(int value);
		partial void OnAnnulmentReasonIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnMasterObjectGUIDChanging(System.Guid value);
		partial void OnMasterObjectGUIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public C_AnnulmentReason()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._FactAnnulment = new EntitySet<FactAnnulment>(new Action<FactAnnulment>(this.attach_FactAnnulment), new Action<FactAnnulment>(this.detach_FactAnnulment));
			OnCreated();
		}

		[Column(Storage = "_AnnulmentReasonID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int AnnulmentReasonID
		{
			get
			{
				return this._AnnulmentReasonID;
			}
			set
			{
				if ((this._AnnulmentReasonID != value))
				{
					this.OnAnnulmentReasonIDChanging(value);
					this.SendPropertyChanging();
					this._AnnulmentReasonID = value;
					this.SendPropertyChanged("AnnulmentReasonID");
					this.OnAnnulmentReasonIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_MasterObjectGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_C_AnnulmentReason_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_AnnulmentReason.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_AnnulmentReason.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_FactAnnulment_AnnulmentReason", Storage = "_FactAnnulment", ThisKey = "AnnulmentReasonID", OtherKey = "AnnulmentReasonID", DeleteRule = "NO ACTION")]
		public EntitySet<FactAnnulment> FactAnnulment
		{
			get
			{
				return this._FactAnnulment;
			}
			set
			{
				this._FactAnnulment.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_FactAnnulment(FactAnnulment entity)
		{
			this.SendPropertyChanging();
			entity.AnnulmentReason = this;
		}

		private void detach_FactAnnulment(FactAnnulment entity)
		{
			this.SendPropertyChanging();
			entity.AnnulmentReason = null;
		}
	}

	[Table(Name = "dbo.C_CatalogRestriction")]
	public partial class C_CatalogRestriction : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CatalogRestrictionID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private string _SectionNumber;

		private bool _RestrictionAttribute;

		private string _SortSectionNumber;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<C_CatalogRestrictionCNCategories> _C_CatalogRestrictionCNCategories;

		private EntitySet<C_CNGroup> _CNGroups;

		private EntitySet<C_LegalDocumentRestrictions> _C_LegalDocumentRestrictions;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCatalogRestrictionIDChanging(int value);
		partial void OnCatalogRestrictionIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSectionNumberChanging(string value);
		partial void OnSectionNumberChanged();
		partial void OnRestrictionAttributeChanging(bool value);
		partial void OnRestrictionAttributeChanged();
		partial void OnSortSectionNumberChanging(string value);
		partial void OnSortSectionNumberChanged();
		#endregion

		public C_CatalogRestriction()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._C_CatalogRestrictionCNCategories = new EntitySet<C_CatalogRestrictionCNCategories>(new Action<C_CatalogRestrictionCNCategories>(this.attach_C_CatalogRestrictionCNCategories), new Action<C_CatalogRestrictionCNCategories>(this.detach_C_CatalogRestrictionCNCategories));
			this._CNGroups = new EntitySet<C_CNGroup>(new Action<C_CNGroup>(this.attach_CNGroups), new Action<C_CNGroup>(this.detach_CNGroups));
			this._C_LegalDocumentRestrictions = new EntitySet<C_LegalDocumentRestrictions>(new Action<C_LegalDocumentRestrictions>(this.attach_C_LegalDocumentRestrictions), new Action<C_LegalDocumentRestrictions>(this.detach_C_LegalDocumentRestrictions));
			OnCreated();
		}

		[Column(Storage = "_CatalogRestrictionID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CatalogRestrictionID
		{
			get
			{
				return this._CatalogRestrictionID;
			}
			set
			{
				if ((this._CatalogRestrictionID != value))
				{
					this.OnCatalogRestrictionIDChanging(value);
					this.SendPropertyChanging();
					this._CatalogRestrictionID = value;
					this.SendPropertyChanged("CatalogRestrictionID");
					this.OnCatalogRestrictionIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SectionNumber", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SectionNumber
		{
			get
			{
				return this._SectionNumber;
			}
			set
			{
				if ((this._SectionNumber != value))
				{
					this.OnSectionNumberChanging(value);
					this.SendPropertyChanging();
					this._SectionNumber = value;
					this.SendPropertyChanged("SectionNumber");
					this.OnSectionNumberChanged();
				}
			}
		}

		[Column(Storage = "_RestrictionAttribute", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool RestrictionAttribute
		{
			get
			{
				return this._RestrictionAttribute;
			}
			set
			{
				if ((this._RestrictionAttribute != value))
				{
					this.OnRestrictionAttributeChanging(value);
					this.SendPropertyChanging();
					this._RestrictionAttribute = value;
					this.SendPropertyChanged("RestrictionAttribute");
					this.OnRestrictionAttributeChanged();
				}
			}
		}

		[Column(Storage = "_SortSectionNumber", AutoSync = AutoSync.Always, DbType = "VarChar(50)", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "([dbo].[SortNumber]([SectionNumber]))")]
		public string SortSectionNumber
		{
			get
			{
				return this._SortSectionNumber;
			}
			set
			{
				if ((this._SortSectionNumber != value))
				{
					this.OnSortSectionNumberChanging(value);
					this.SendPropertyChanging();
					this._SortSectionNumber = value;
					this.SendPropertyChanged("SortSectionNumber");
					this.OnSortSectionNumberChanged();
				}
			}
		}

		[Association(Name = "FK_C_CatalogRestriction_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CatalogRestriction.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CatalogRestriction.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_C_CatalogRestrictionCNCategories_C_CatalogRestriction", Storage = "_C_CatalogRestrictionCNCategories", ThisKey = "CatalogRestrictionID", OtherKey = "CatalogRestrictionID", DeleteRule = "CASCADE")]
		public EntitySet<C_CatalogRestrictionCNCategories> C_CatalogRestrictionCNCategories
		{
			get
			{
				return this._C_CatalogRestrictionCNCategories;
			}
			set
			{
				this._C_CatalogRestrictionCNCategories.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNGroup_CatalogRestriction", Storage = "_CNGroups", ThisKey = "CatalogRestrictionID", OtherKey = "CatalogRestrictionID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CNGroup> CNGroups
		{
			get
			{
				return this._CNGroups;
			}
			set
			{
				this._CNGroups.Assign(value);
			}
		}

		[Association(Name = "FK_C_LegalDocumentRestrictions_Restrictions", Storage = "_C_LegalDocumentRestrictions", ThisKey = "CatalogRestrictionID", OtherKey = "RestrictionsID", DeleteRule = "CASCADE")]
		public EntitySet<C_LegalDocumentRestrictions> C_LegalDocumentRestrictions
		{
			get
			{
				return this._C_LegalDocumentRestrictions;
			}
			set
			{
				this._C_LegalDocumentRestrictions.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_C_CatalogRestrictionCNCategories(C_CatalogRestrictionCNCategories entity)
		{
			this.SendPropertyChanging();
			entity.C_CatalogRestriction = this;
		}

		private void detach_C_CatalogRestrictionCNCategories(C_CatalogRestrictionCNCategories entity)
		{
			this.SendPropertyChanging();
			entity.C_CatalogRestriction = null;
		}

		private void attach_CNGroups(C_CNGroup entity)
		{
			this.SendPropertyChanging();
			entity.CatalogRestriction = this;
		}

		private void detach_CNGroups(C_CNGroup entity)
		{
			this.SendPropertyChanging();
			entity.CatalogRestriction = null;
		}

		private void attach_C_LegalDocumentRestrictions(C_LegalDocumentRestrictions entity)
		{
			this.SendPropertyChanging();
			entity.Restrictions = this;
		}

		private void detach_C_LegalDocumentRestrictions(C_LegalDocumentRestrictions entity)
		{
			this.SendPropertyChanging();
			entity.Restrictions = null;
		}
	}

	[Table(Name = "dbo.C_CatalogRestrictionCNCategories")]
	public partial class C_CatalogRestrictionCNCategories : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CatalogRestrictionID;

		private int _CNCategoriesID;

		private EntityRef<C_CatalogRestriction> _C_CatalogRestriction;

		private EntityRef<C_CNCategory> _CNCategories;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCatalogRestrictionIDChanging(int value);
		partial void OnCatalogRestrictionIDChanged();
		partial void OnCNCategoriesIDChanging(int value);
		partial void OnCNCategoriesIDChanged();
		#endregion

		public C_CatalogRestrictionCNCategories()
		{
			this._C_CatalogRestriction = default(EntityRef<C_CatalogRestriction>);
			this._CNCategories = default(EntityRef<C_CNCategory>);
			OnCreated();
		}

		[Column(Storage = "_CatalogRestrictionID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CatalogRestrictionID
		{
			get
			{
				return this._CatalogRestrictionID;
			}
			set
			{
				if ((this._CatalogRestrictionID != value))
				{
					if (this._C_CatalogRestriction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCatalogRestrictionIDChanging(value);
					this.SendPropertyChanging();
					this._CatalogRestrictionID = value;
					this.SendPropertyChanged("CatalogRestrictionID");
					this.OnCatalogRestrictionIDChanged();
				}
			}
		}

		[Column(Storage = "_CNCategoriesID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CNCategoriesID
		{
			get
			{
				return this._CNCategoriesID;
			}
			set
			{
				if ((this._CNCategoriesID != value))
				{
					if (this._CNCategories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoriesIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoriesID = value;
					this.SendPropertyChanged("CNCategoriesID");
					this.OnCNCategoriesIDChanged();
				}
			}
		}

		[Association(Name = "FK_C_CatalogRestrictionCNCategories_C_CatalogRestriction", Storage = "_C_CatalogRestriction", ThisKey = "CatalogRestrictionID", OtherKey = "CatalogRestrictionID", IsForeignKey = true, DeleteOnNull = true)]
		public C_CatalogRestriction C_CatalogRestriction
		{
			get
			{
				return this._C_CatalogRestriction.Entity;
			}
			set
			{
				C_CatalogRestriction previousValue = this._C_CatalogRestriction.Entity;
				if (((previousValue != value)
							|| (this._C_CatalogRestriction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_CatalogRestriction.Entity = null;
						previousValue.C_CatalogRestrictionCNCategories.Remove(this);
					}
					this._C_CatalogRestriction.Entity = value;
					if ((value != null))
					{
						value.C_CatalogRestrictionCNCategories.Add(this);
						this._CatalogRestrictionID = value.CatalogRestrictionID;
					}
					else
					{
						this._CatalogRestrictionID = default(int);
					}
					this.SendPropertyChanged("C_CatalogRestriction");
				}
			}
		}

		[Association(Name = "FK_C_CatalogRestrictionCNCategories_CNCategories", Storage = "_CNCategories", ThisKey = "CNCategoriesID", OtherKey = "CNCategoryID", IsForeignKey = true, DeleteOnNull = true)]
		public C_CNCategory CNCategories
		{
			get
			{
				return this._CNCategories.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._CNCategories.Entity;
				if (((previousValue != value)
							|| (this._CNCategories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategories.Entity = null;
						previousValue.C_CatalogRestrictionCNCategories.Remove(this);
					}
					this._CNCategories.Entity = value;
					if ((value != null))
					{
						value.C_CatalogRestrictionCNCategories.Add(this);
						this._CNCategoriesID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoriesID = default(int);
					}
					this.SendPropertyChanged("CNCategories");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_CN")]
	public partial class C_CN : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CNID;

		private string _Code;

		private string _Title;

		private System.Nullable<int> _MeasureCode1ID;

		private System.Nullable<int> _MeasureCode2ID;

		private System.Nullable<int> _MeasureCode3ID;

		private System.DateTime _EndDate;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _FTSTitle;

		private System.Nullable<System.DateTime> _EdictDate;

		private string _EdictNo;

		private System.DateTime _BeginDate;

		private System.Nullable<int> _ParentID;

		private System.Guid _MasterObjectGUID;

		private System.Nullable<int> _CNTypeID;

		private bool _IsDeleted;

		private EntityRef<C_CNType> _CNType;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<C_Measure> _MeasureCode1;

		private EntityRef<C_Measure> _MeasureCode2;

		private EntityRef<C_Measure> _MeasureCode3;

		private EntityRef<C_CN> _Parent;

		private EntitySet<C_CN> _C_CN_Parent;

		private EntitySet<C_CNCategoryCN> _C_CNCategoryCN;

		private EntitySet<C_CNGroupCN> _C_CNGroupCN;

		private EntitySet<CustomsDeclaration> _CustomsDeclaration;

		private EntitySet<ForeignAuthorization> _ForeignAuthorization;

		private EntitySet<FullCN> _FullCN;

		private EntitySet<FullCN> _FullCN_ParentCN;

		private EntitySet<OrderDoc> _OrderDoc;

		private EntitySet<SpecificationItem> _SpecificationItem;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCNIDChanging(int value);
		partial void OnCNIDChanged();
		partial void OnCodeChanging(string value);
		partial void OnCodeChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnMeasureCode1IDChanging(System.Nullable<int> value);
		partial void OnMeasureCode1IDChanged();
		partial void OnMeasureCode2IDChanging(System.Nullable<int> value);
		partial void OnMeasureCode2IDChanged();
		partial void OnMeasureCode3IDChanging(System.Nullable<int> value);
		partial void OnMeasureCode3IDChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnFTSTitleChanging(string value);
		partial void OnFTSTitleChanged();
		partial void OnEdictDateChanging(System.Nullable<System.DateTime> value);
		partial void OnEdictDateChanged();
		partial void OnEdictNoChanging(string value);
		partial void OnEdictNoChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnParentIDChanging(System.Nullable<int> value);
		partial void OnParentIDChanged();
		partial void OnMasterObjectGUIDChanging(System.Guid value);
		partial void OnMasterObjectGUIDChanged();
		partial void OnCNTypeIDChanging(System.Nullable<int> value);
		partial void OnCNTypeIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public C_CN()
		{
			this._CNType = default(EntityRef<C_CNType>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MeasureCode1 = default(EntityRef<C_Measure>);
			this._MeasureCode2 = default(EntityRef<C_Measure>);
			this._MeasureCode3 = default(EntityRef<C_Measure>);
			this._Parent = default(EntityRef<C_CN>);
			this._C_CN_Parent = new EntitySet<C_CN>(new Action<C_CN>(this.attach_C_CN_Parent), new Action<C_CN>(this.detach_C_CN_Parent));
			this._C_CNCategoryCN = new EntitySet<C_CNCategoryCN>(new Action<C_CNCategoryCN>(this.attach_C_CNCategoryCN), new Action<C_CNCategoryCN>(this.detach_C_CNCategoryCN));
			this._C_CNGroupCN = new EntitySet<C_CNGroupCN>(new Action<C_CNGroupCN>(this.attach_C_CNGroupCN), new Action<C_CNGroupCN>(this.detach_C_CNGroupCN));
			this._CustomsDeclaration = new EntitySet<CustomsDeclaration>(new Action<CustomsDeclaration>(this.attach_CustomsDeclaration), new Action<CustomsDeclaration>(this.detach_CustomsDeclaration));
			this._ForeignAuthorization = new EntitySet<ForeignAuthorization>(new Action<ForeignAuthorization>(this.attach_ForeignAuthorization), new Action<ForeignAuthorization>(this.detach_ForeignAuthorization));
			this._FullCN = new EntitySet<FullCN>(new Action<FullCN>(this.attach_FullCN), new Action<FullCN>(this.detach_FullCN));
			this._FullCN_ParentCN = new EntitySet<FullCN>(new Action<FullCN>(this.attach_FullCN_ParentCN), new Action<FullCN>(this.detach_FullCN_ParentCN));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._SpecificationItem = new EntitySet<SpecificationItem>(new Action<SpecificationItem>(this.attach_SpecificationItem), new Action<SpecificationItem>(this.detach_SpecificationItem));
			OnCreated();
		}

		[Column(Storage = "_CNID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CNID
		{
			get
			{
				return this._CNID;
			}
			set
			{
				if ((this._CNID != value))
				{
					this.OnCNIDChanging(value);
					this.SendPropertyChanging();
					this._CNID = value;
					this.SendPropertyChanged("CNID");
					this.OnCNIDChanged();
				}
			}
		}

		[Column(Storage = "_Code", DbType = "NVarChar(10) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(2048)", UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_MeasureCode1ID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> MeasureCode1ID
		{
			get
			{
				return this._MeasureCode1ID;
			}
			set
			{
				if ((this._MeasureCode1ID != value))
				{
					if (this._MeasureCode1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureCode1IDChanging(value);
					this.SendPropertyChanging();
					this._MeasureCode1ID = value;
					this.SendPropertyChanged("MeasureCode1ID");
					this.OnMeasureCode1IDChanged();
				}
			}
		}

		[Column(Storage = "_MeasureCode2ID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> MeasureCode2ID
		{
			get
			{
				return this._MeasureCode2ID;
			}
			set
			{
				if ((this._MeasureCode2ID != value))
				{
					if (this._MeasureCode2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureCode2IDChanging(value);
					this.SendPropertyChanging();
					this._MeasureCode2ID = value;
					this.SendPropertyChanged("MeasureCode2ID");
					this.OnMeasureCode2IDChanged();
				}
			}
		}

		[Column(Storage = "_MeasureCode3ID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> MeasureCode3ID
		{
			get
			{
				return this._MeasureCode3ID;
			}
			set
			{
				if ((this._MeasureCode3ID != value))
				{
					if (this._MeasureCode3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureCode3IDChanging(value);
					this.SendPropertyChanging();
					this._MeasureCode3ID = value;
					this.SendPropertyChanged("MeasureCode3ID");
					this.OnMeasureCode3IDChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_FTSTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string FTSTitle
		{
			get
			{
				return this._FTSTitle;
			}
			set
			{
				if ((this._FTSTitle != value))
				{
					this.OnFTSTitleChanging(value);
					this.SendPropertyChanging();
					this._FTSTitle = value;
					this.SendPropertyChanged("FTSTitle");
					this.OnFTSTitleChanged();
				}
			}
		}

		[Column(Storage = "_EdictDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EdictDate
		{
			get
			{
				return this._EdictDate;
			}
			set
			{
				if ((this._EdictDate != value))
				{
					this.OnEdictDateChanging(value);
					this.SendPropertyChanging();
					this._EdictDate = value;
					this.SendPropertyChanged("EdictDate");
					this.OnEdictDateChanged();
				}
			}
		}

		[Column(Storage = "_EdictNo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string EdictNo
		{
			get
			{
				return this._EdictNo;
			}
			set
			{
				if ((this._EdictNo != value))
				{
					this.OnEdictNoChanging(value);
					this.SendPropertyChanging();
					this._EdictNo = value;
					this.SendPropertyChanged("EdictNo");
					this.OnEdictNoChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}

		[Column(Storage = "_MasterObjectGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}

		[Column(Storage = "_CNTypeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CNTypeID
		{
			get
			{
				return this._CNTypeID;
			}
			set
			{
				if ((this._CNTypeID != value))
				{
					if (this._CNType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CNTypeID = value;
					this.SendPropertyChanged("CNTypeID");
					this.OnCNTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_C_CN_CNType", Storage = "_CNType", ThisKey = "CNTypeID", OtherKey = "CNTypeID", IsForeignKey = true)]
		public C_CNType CNType
		{
			get
			{
				return this._CNType.Entity;
			}
			set
			{
				C_CNType previousValue = this._CNType.Entity;
				if (((previousValue != value)
							|| (this._CNType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNType.Entity = null;
						previousValue.C_CN.Remove(this);
					}
					this._CNType.Entity = value;
					if ((value != null))
					{
						value.C_CN.Add(this);
						this._CNTypeID = value.CNTypeID;
					}
					else
					{
						this._CNTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CNType");
				}
			}
		}

		[Association(Name = "FK_C_CN_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CN.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CN.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_C_CN_MeasureCode1", Storage = "_MeasureCode1", ThisKey = "MeasureCode1ID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure MeasureCode1
		{
			get
			{
				return this._MeasureCode1.Entity;
			}
			set
			{
				C_Measure previousValue = this._MeasureCode1.Entity;
				if (((previousValue != value)
							|| (this._MeasureCode1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeasureCode1.Entity = null;
						previousValue.C_CN.Remove(this);
					}
					this._MeasureCode1.Entity = value;
					if ((value != null))
					{
						value.C_CN.Add(this);
						this._MeasureCode1ID = value.MeasureID;
					}
					else
					{
						this._MeasureCode1ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MeasureCode1");
				}
			}
		}

		[Association(Name = "FK_C_CN_MeasureCode2", Storage = "_MeasureCode2", ThisKey = "MeasureCode2ID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure MeasureCode2
		{
			get
			{
				return this._MeasureCode2.Entity;
			}
			set
			{
				C_Measure previousValue = this._MeasureCode2.Entity;
				if (((previousValue != value)
							|| (this._MeasureCode2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeasureCode2.Entity = null;
						previousValue.C_CN_MeasureCode2.Remove(this);
					}
					this._MeasureCode2.Entity = value;
					if ((value != null))
					{
						value.C_CN_MeasureCode2.Add(this);
						this._MeasureCode2ID = value.MeasureID;
					}
					else
					{
						this._MeasureCode2ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MeasureCode2");
				}
			}
		}

		[Association(Name = "FK_C_CN_MeasureCode3", Storage = "_MeasureCode3", ThisKey = "MeasureCode3ID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure MeasureCode3
		{
			get
			{
				return this._MeasureCode3.Entity;
			}
			set
			{
				C_Measure previousValue = this._MeasureCode3.Entity;
				if (((previousValue != value)
							|| (this._MeasureCode3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeasureCode3.Entity = null;
						previousValue.C_CN_MeasureCode3.Remove(this);
					}
					this._MeasureCode3.Entity = value;
					if ((value != null))
					{
						value.C_CN_MeasureCode3.Add(this);
						this._MeasureCode3ID = value.MeasureID;
					}
					else
					{
						this._MeasureCode3ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MeasureCode3");
				}
			}
		}

		[Association(Name = "FK_C_CN_Parent", Storage = "_Parent", ThisKey = "ParentID", OtherKey = "CNID", IsForeignKey = true)]
		public C_CN Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				C_CN previousValue = this._Parent.Entity;
				if (((previousValue != value)
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.C_CN_Parent.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.C_CN_Parent.Add(this);
						this._ParentID = value.CNID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}

		[Association(Name = "FK_C_CN_Parent", Storage = "_C_CN_Parent", ThisKey = "CNID", OtherKey = "ParentID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CN> C_CN_Parent
		{
			get
			{
				return this._C_CN_Parent;
			}
			set
			{
				this._C_CN_Parent.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNCategoryCN_CN", Storage = "_C_CNCategoryCN", ThisKey = "CNID", OtherKey = "CNID", DeleteRule = "CASCADE")]
		public EntitySet<C_CNCategoryCN> C_CNCategoryCN
		{
			get
			{
				return this._C_CNCategoryCN;
			}
			set
			{
				this._C_CNCategoryCN.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNGroupCN_CN", Storage = "_C_CNGroupCN", ThisKey = "CNID", OtherKey = "CNID", DeleteRule = "CASCADE")]
		public EntitySet<C_CNGroupCN> C_CNGroupCN
		{
			get
			{
				return this._C_CNGroupCN;
			}
			set
			{
				this._C_CNGroupCN.Assign(value);
			}
		}

		[Association(Name = "FK_CustomsDeclaration_CN", Storage = "_CustomsDeclaration", ThisKey = "CNID", OtherKey = "CNID", DeleteRule = "NO ACTION")]
		public EntitySet<CustomsDeclaration> CustomsDeclaration
		{
			get
			{
				return this._CustomsDeclaration;
			}
			set
			{
				this._CustomsDeclaration.Assign(value);
			}
		}

		[Association(Name = "FK_ForeignAuthorization_CN", Storage = "_ForeignAuthorization", ThisKey = "CNID", OtherKey = "CNID", DeleteRule = "NO ACTION")]
		public EntitySet<ForeignAuthorization> ForeignAuthorization
		{
			get
			{
				return this._ForeignAuthorization;
			}
			set
			{
				this._ForeignAuthorization.Assign(value);
			}
		}

		[Association(Name = "FK_FullCN_ChildCN", Storage = "_FullCN", ThisKey = "CNID", OtherKey = "ChildCNID", DeleteRule = "CASCADE")]
		public EntitySet<FullCN> FullCN
		{
			get
			{
				return this._FullCN;
			}
			set
			{
				this._FullCN.Assign(value);
			}
		}

		[Association(Name = "FK_FullCN_ParentCN", Storage = "_FullCN_ParentCN", ThisKey = "CNID", OtherKey = "ParentCNID", DeleteRule = "NO ACTION")]
		public EntitySet<FullCN> FullCN_ParentCN
		{
			get
			{
				return this._FullCN_ParentCN;
			}
			set
			{
				this._FullCN_ParentCN.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_CN", Storage = "_OrderDoc", ThisKey = "CNID", OtherKey = "CNID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}

		[Association(Name = "FK_SpecificationItem_CN", Storage = "_SpecificationItem", ThisKey = "CNID", OtherKey = "CNID", DeleteRule = "NO ACTION")]
		public EntitySet<SpecificationItem> SpecificationItem
		{
			get
			{
				return this._SpecificationItem;
			}
			set
			{
				this._SpecificationItem.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_C_CN_Parent(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}

		private void detach_C_CN_Parent(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}

		private void attach_C_CNCategoryCN(C_CNCategoryCN entity)
		{
			this.SendPropertyChanging();
			entity.CN = this;
		}

		private void detach_C_CNCategoryCN(C_CNCategoryCN entity)
		{
			this.SendPropertyChanging();
			entity.CN = null;
		}

		private void attach_C_CNGroupCN(C_CNGroupCN entity)
		{
			this.SendPropertyChanging();
			entity.CN = this;
		}

		private void detach_C_CNGroupCN(C_CNGroupCN entity)
		{
			this.SendPropertyChanging();
			entity.CN = null;
		}

		private void attach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.CN = this;
		}

		private void detach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.CN = null;
		}

		private void attach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.CN = this;
		}

		private void detach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.CN = null;
		}

		private void attach_FullCN(FullCN entity)
		{
			this.SendPropertyChanging();
			entity.ChildCN = this;
		}

		private void detach_FullCN(FullCN entity)
		{
			this.SendPropertyChanging();
			entity.ChildCN = null;
		}

		private void attach_FullCN_ParentCN(FullCN entity)
		{
			this.SendPropertyChanging();
			entity.ParentCN = this;
		}

		private void detach_FullCN_ParentCN(FullCN entity)
		{
			this.SendPropertyChanging();
			entity.ParentCN = null;
		}

		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.CN = this;
		}

		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.CN = null;
		}

		private void attach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.CN = this;
		}

		private void detach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.CN = null;
		}
	}

	[Table(Name = "dbo.C_CNCategory")]
	public partial class C_CNCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CNCategoryID;

		private string _CategoryCode;

		private string _Title;

		private string _SubCategoryCode;

		private string _SubCategoryTitle;

		private System.Nullable<int> _MeasureID;

		private System.Nullable<int> _MaxValidity;

		private System.DateTime _LastModifiedDate;

		private System.Nullable<int> _LicenseTypeID;

		private int _LastModifiedUserID;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private int _DecimalDigitsCnt;

		private System.Nullable<int> _MaxTargetValidityID;

		private System.Guid _MasterObjectGUID;

		private bool _IsElectronicOrderDocI;

		private bool _IsElectronicOrderDocE;

		private bool _IsElectronicRECI;

		private bool _IsElectronicRECE;

		private bool _IsElectronicLic;

		private bool _IsDeleted;

		private EntitySet<C_CatalogRestrictionCNCategories> _C_CatalogRestrictionCNCategories;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<C_LicenseType> _LicenseType;

		private EntityRef<C_MaxTargetValidity> _MaxTargetValidity;

		private EntityRef<C_Measure> _Measure;

		private EntitySet<C_CNCategoryCN> _C_CNCategoryCN;

		private EntitySet<C_CNCategoryDocument> _Documents;

		private EntitySet<C_CNCategoryItem> _Items;

		private EntitySet<C_CNCategoryOperationType> _C_CNCategoryOperationType;

		private EntitySet<C_CNCategoryRepresentations> _C_CNCategoryRepresentations;

		private EntitySet<C_LegalDocumentCNCategories> _C_LegalDocumentCNCategories;

		private EntitySet<ForeignAuthorization> _ForeignAuthorization;

		private EntitySet<OrderDoc> _OrderDoc;

		private EntitySet<Quota> _Quota;

		private EntitySet<QuotaRedistribution> _QuotaRedistribution;

		private EntitySet<QuotaRequest> _QuotaRequest;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCNCategoryIDChanging(int value);
		partial void OnCNCategoryIDChanged();
		partial void OnCategoryCodeChanging(string value);
		partial void OnCategoryCodeChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSubCategoryCodeChanging(string value);
		partial void OnSubCategoryCodeChanged();
		partial void OnSubCategoryTitleChanging(string value);
		partial void OnSubCategoryTitleChanged();
		partial void OnMeasureIDChanging(System.Nullable<int> value);
		partial void OnMeasureIDChanged();
		partial void OnMaxValidityChanging(System.Nullable<int> value);
		partial void OnMaxValidityChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLicenseTypeIDChanging(System.Nullable<int> value);
		partial void OnLicenseTypeIDChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnDecimalDigitsCntChanging(int value);
		partial void OnDecimalDigitsCntChanged();
		partial void OnMaxTargetValidityIDChanging(System.Nullable<int> value);
		partial void OnMaxTargetValidityIDChanged();
		partial void OnMasterObjectGUIDChanging(System.Guid value);
		partial void OnMasterObjectGUIDChanged();
		partial void OnIsElectronicOrderDocIChanging(bool value);
		partial void OnIsElectronicOrderDocIChanged();
		partial void OnIsElectronicOrderDocEChanging(bool value);
		partial void OnIsElectronicOrderDocEChanged();
		partial void OnIsElectronicRECIChanging(bool value);
		partial void OnIsElectronicRECIChanged();
		partial void OnIsElectronicRECEChanging(bool value);
		partial void OnIsElectronicRECEChanged();
		partial void OnIsElectronicLicChanging(bool value);
		partial void OnIsElectronicLicChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public C_CNCategory()
		{
			this._C_CatalogRestrictionCNCategories = new EntitySet<C_CatalogRestrictionCNCategories>(new Action<C_CatalogRestrictionCNCategories>(this.attach_C_CatalogRestrictionCNCategories), new Action<C_CatalogRestrictionCNCategories>(this.detach_C_CatalogRestrictionCNCategories));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._LicenseType = default(EntityRef<C_LicenseType>);
			this._MaxTargetValidity = default(EntityRef<C_MaxTargetValidity>);
			this._Measure = default(EntityRef<C_Measure>);
			this._C_CNCategoryCN = new EntitySet<C_CNCategoryCN>(new Action<C_CNCategoryCN>(this.attach_C_CNCategoryCN), new Action<C_CNCategoryCN>(this.detach_C_CNCategoryCN));
			this._Documents = new EntitySet<C_CNCategoryDocument>(new Action<C_CNCategoryDocument>(this.attach_Documents), new Action<C_CNCategoryDocument>(this.detach_Documents));
			this._Items = new EntitySet<C_CNCategoryItem>(new Action<C_CNCategoryItem>(this.attach_Items), new Action<C_CNCategoryItem>(this.detach_Items));
			this._C_CNCategoryOperationType = new EntitySet<C_CNCategoryOperationType>(new Action<C_CNCategoryOperationType>(this.attach_C_CNCategoryOperationType), new Action<C_CNCategoryOperationType>(this.detach_C_CNCategoryOperationType));
			this._C_CNCategoryRepresentations = new EntitySet<C_CNCategoryRepresentations>(new Action<C_CNCategoryRepresentations>(this.attach_C_CNCategoryRepresentations), new Action<C_CNCategoryRepresentations>(this.detach_C_CNCategoryRepresentations));
			this._C_LegalDocumentCNCategories = new EntitySet<C_LegalDocumentCNCategories>(new Action<C_LegalDocumentCNCategories>(this.attach_C_LegalDocumentCNCategories), new Action<C_LegalDocumentCNCategories>(this.detach_C_LegalDocumentCNCategories));
			this._ForeignAuthorization = new EntitySet<ForeignAuthorization>(new Action<ForeignAuthorization>(this.attach_ForeignAuthorization), new Action<ForeignAuthorization>(this.detach_ForeignAuthorization));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._Quota = new EntitySet<Quota>(new Action<Quota>(this.attach_Quota), new Action<Quota>(this.detach_Quota));
			this._QuotaRedistribution = new EntitySet<QuotaRedistribution>(new Action<QuotaRedistribution>(this.attach_QuotaRedistribution), new Action<QuotaRedistribution>(this.detach_QuotaRedistribution));
			this._QuotaRequest = new EntitySet<QuotaRequest>(new Action<QuotaRequest>(this.attach_QuotaRequest), new Action<QuotaRequest>(this.detach_QuotaRequest));
			OnCreated();
		}

		[Column(Storage = "_CNCategoryID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}

		[Column(Storage = "_CategoryCode", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string CategoryCode
		{
			get
			{
				return this._CategoryCode;
			}
			set
			{
				if ((this._CategoryCode != value))
				{
					this.OnCategoryCodeChanging(value);
					this.SendPropertyChanging();
					this._CategoryCode = value;
					this.SendPropertyChanged("CategoryCode");
					this.OnCategoryCodeChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SubCategoryCode", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SubCategoryCode
		{
			get
			{
				return this._SubCategoryCode;
			}
			set
			{
				if ((this._SubCategoryCode != value))
				{
					this.OnSubCategoryCodeChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryCode = value;
					this.SendPropertyChanged("SubCategoryCode");
					this.OnSubCategoryCodeChanged();
				}
			}
		}

		[Column(Storage = "_SubCategoryTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SubCategoryTitle
		{
			get
			{
				return this._SubCategoryTitle;
			}
			set
			{
				if ((this._SubCategoryTitle != value))
				{
					this.OnSubCategoryTitleChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryTitle = value;
					this.SendPropertyChanged("SubCategoryTitle");
					this.OnSubCategoryTitleChanged();
				}
			}
		}

		[Column(Storage = "_MeasureID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					if (this._Measure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}

		[Column(Storage = "_MaxValidity", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> MaxValidity
		{
			get
			{
				return this._MaxValidity;
			}
			set
			{
				if ((this._MaxValidity != value))
				{
					this.OnMaxValidityChanging(value);
					this.SendPropertyChanging();
					this._MaxValidity = value;
					this.SendPropertyChanged("MaxValidity");
					this.OnMaxValidityChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LicenseTypeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> LicenseTypeID
		{
			get
			{
				return this._LicenseTypeID;
			}
			set
			{
				if ((this._LicenseTypeID != value))
				{
					if (this._LicenseType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLicenseTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseTypeID = value;
					this.SendPropertyChanged("LicenseTypeID");
					this.OnLicenseTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_DecimalDigitsCnt", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int DecimalDigitsCnt
		{
			get
			{
				return this._DecimalDigitsCnt;
			}
			set
			{
				if ((this._DecimalDigitsCnt != value))
				{
					this.OnDecimalDigitsCntChanging(value);
					this.SendPropertyChanging();
					this._DecimalDigitsCnt = value;
					this.SendPropertyChanged("DecimalDigitsCnt");
					this.OnDecimalDigitsCntChanged();
				}
			}
		}

		[Column(Storage = "_MaxTargetValidityID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> MaxTargetValidityID
		{
			get
			{
				return this._MaxTargetValidityID;
			}
			set
			{
				if ((this._MaxTargetValidityID != value))
				{
					if (this._MaxTargetValidity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaxTargetValidityIDChanging(value);
					this.SendPropertyChanging();
					this._MaxTargetValidityID = value;
					this.SendPropertyChanged("MaxTargetValidityID");
					this.OnMaxTargetValidityIDChanged();
				}
			}
		}

		[Column(Storage = "_MasterObjectGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}

		[Column(Storage = "_IsElectronicOrderDocI", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsElectronicOrderDocI
		{
			get
			{
				return this._IsElectronicOrderDocI;
			}
			set
			{
				if ((this._IsElectronicOrderDocI != value))
				{
					this.OnIsElectronicOrderDocIChanging(value);
					this.SendPropertyChanging();
					this._IsElectronicOrderDocI = value;
					this.SendPropertyChanged("IsElectronicOrderDocI");
					this.OnIsElectronicOrderDocIChanged();
				}
			}
		}

		[Column(Storage = "_IsElectronicOrderDocE", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsElectronicOrderDocE
		{
			get
			{
				return this._IsElectronicOrderDocE;
			}
			set
			{
				if ((this._IsElectronicOrderDocE != value))
				{
					this.OnIsElectronicOrderDocEChanging(value);
					this.SendPropertyChanging();
					this._IsElectronicOrderDocE = value;
					this.SendPropertyChanged("IsElectronicOrderDocE");
					this.OnIsElectronicOrderDocEChanged();
				}
			}
		}

		[Column(Storage = "_IsElectronicRECI", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsElectronicRECI
		{
			get
			{
				return this._IsElectronicRECI;
			}
			set
			{
				if ((this._IsElectronicRECI != value))
				{
					this.OnIsElectronicRECIChanging(value);
					this.SendPropertyChanging();
					this._IsElectronicRECI = value;
					this.SendPropertyChanged("IsElectronicRECI");
					this.OnIsElectronicRECIChanged();
				}
			}
		}

		[Column(Storage = "_IsElectronicRECE", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsElectronicRECE
		{
			get
			{
				return this._IsElectronicRECE;
			}
			set
			{
				if ((this._IsElectronicRECE != value))
				{
					this.OnIsElectronicRECEChanging(value);
					this.SendPropertyChanging();
					this._IsElectronicRECE = value;
					this.SendPropertyChanged("IsElectronicRECE");
					this.OnIsElectronicRECEChanged();
				}
			}
		}

		[Column(Storage = "_IsElectronicLic", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsElectronicLic
		{
			get
			{
				return this._IsElectronicLic;
			}
			set
			{
				if ((this._IsElectronicLic != value))
				{
					this.OnIsElectronicLicChanging(value);
					this.SendPropertyChanging();
					this._IsElectronicLic = value;
					this.SendPropertyChanged("IsElectronicLic");
					this.OnIsElectronicLicChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_C_CatalogRestrictionCNCategories_CNCategories", Storage = "_C_CatalogRestrictionCNCategories", ThisKey = "CNCategoryID", OtherKey = "CNCategoriesID", DeleteRule = "CASCADE")]
		public EntitySet<C_CatalogRestrictionCNCategories> C_CatalogRestrictionCNCategories
		{
			get
			{
				return this._C_CatalogRestrictionCNCategories;
			}
			set
			{
				this._C_CatalogRestrictionCNCategories.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNCategory_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CNCategory.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CNCategory.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_C_CNCategory_LicenseType", Storage = "_LicenseType", ThisKey = "LicenseTypeID", OtherKey = "LicenseTypeID", IsForeignKey = true)]
		public C_LicenseType LicenseType
		{
			get
			{
				return this._LicenseType.Entity;
			}
			set
			{
				C_LicenseType previousValue = this._LicenseType.Entity;
				if (((previousValue != value)
							|| (this._LicenseType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LicenseType.Entity = null;
						previousValue.C_CNCategory.Remove(this);
					}
					this._LicenseType.Entity = value;
					if ((value != null))
					{
						value.C_CNCategory.Add(this);
						this._LicenseTypeID = value.LicenseTypeID;
					}
					else
					{
						this._LicenseTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LicenseType");
				}
			}
		}

		[Association(Name = "FK_C_CNCategory_MaxTargetValidity", Storage = "_MaxTargetValidity", ThisKey = "MaxTargetValidityID", OtherKey = "MaxTargetValidityID", IsForeignKey = true)]
		public C_MaxTargetValidity MaxTargetValidity
		{
			get
			{
				return this._MaxTargetValidity.Entity;
			}
			set
			{
				C_MaxTargetValidity previousValue = this._MaxTargetValidity.Entity;
				if (((previousValue != value)
							|| (this._MaxTargetValidity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaxTargetValidity.Entity = null;
						previousValue.C_CNCategory.Remove(this);
					}
					this._MaxTargetValidity.Entity = value;
					if ((value != null))
					{
						value.C_CNCategory.Add(this);
						this._MaxTargetValidityID = value.MaxTargetValidityID;
					}
					else
					{
						this._MaxTargetValidityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MaxTargetValidity");
				}
			}
		}

		[Association(Name = "FK_C_CNCategory_Measure", Storage = "_Measure", ThisKey = "MeasureID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure Measure
		{
			get
			{
				return this._Measure.Entity;
			}
			set
			{
				C_Measure previousValue = this._Measure.Entity;
				if (((previousValue != value)
							|| (this._Measure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure.Entity = null;
						previousValue.C_CNCategory.Remove(this);
					}
					this._Measure.Entity = value;
					if ((value != null))
					{
						value.C_CNCategory.Add(this);
						this._MeasureID = value.MeasureID;
					}
					else
					{
						this._MeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Measure");
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryCN_C_CNCategory", Storage = "_C_CNCategoryCN", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", DeleteRule = "CASCADE")]
		public EntitySet<C_CNCategoryCN> C_CNCategoryCN
		{
			get
			{
				return this._C_CNCategoryCN;
			}
			set
			{
				this._C_CNCategoryCN.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNCategoryDocument_CNCategory", Storage = "_Documents", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CNCategoryDocument> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNCategoryItem_CNCategory", Storage = "_Items", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CNCategoryItem> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNCategoryOperationType_C_CNCategory", Storage = "_C_CNCategoryOperationType", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", DeleteRule = "CASCADE")]
		public EntitySet<C_CNCategoryOperationType> C_CNCategoryOperationType
		{
			get
			{
				return this._C_CNCategoryOperationType;
			}
			set
			{
				this._C_CNCategoryOperationType.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNCategoryRepresentations_C_CNCategory", Storage = "_C_CNCategoryRepresentations", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", DeleteRule = "CASCADE")]
		public EntitySet<C_CNCategoryRepresentations> C_CNCategoryRepresentations
		{
			get
			{
				return this._C_CNCategoryRepresentations;
			}
			set
			{
				this._C_CNCategoryRepresentations.Assign(value);
			}
		}

		[Association(Name = "FK_C_LegalDocumentCNCategories_CNCategories", Storage = "_C_LegalDocumentCNCategories", ThisKey = "CNCategoryID", OtherKey = "CNCategoriesID", DeleteRule = "CASCADE")]
		public EntitySet<C_LegalDocumentCNCategories> C_LegalDocumentCNCategories
		{
			get
			{
				return this._C_LegalDocumentCNCategories;
			}
			set
			{
				this._C_LegalDocumentCNCategories.Assign(value);
			}
		}

		[Association(Name = "FK_ForeignAuthorization_CNCategory", Storage = "_ForeignAuthorization", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", DeleteRule = "NO ACTION")]
		public EntitySet<ForeignAuthorization> ForeignAuthorization
		{
			get
			{
				return this._ForeignAuthorization;
			}
			set
			{
				this._ForeignAuthorization.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_CNCategory", Storage = "_OrderDoc", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}

		[Association(Name = "FK_Quota_CNCategory", Storage = "_Quota", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", DeleteRule = "NO ACTION")]
		public EntitySet<Quota> Quota
		{
			get
			{
				return this._Quota;
			}
			set
			{
				this._Quota.Assign(value);
			}
		}

		[Association(Name = "FK_QuotaRedistribution_CNCategory", Storage = "_QuotaRedistribution", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", DeleteRule = "NO ACTION")]
		public EntitySet<QuotaRedistribution> QuotaRedistribution
		{
			get
			{
				return this._QuotaRedistribution;
			}
			set
			{
				this._QuotaRedistribution.Assign(value);
			}
		}

		[Association(Name = "FK_QuotaRequest_CNCategory", Storage = "_QuotaRequest", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", DeleteRule = "NO ACTION")]
		public EntitySet<QuotaRequest> QuotaRequest
		{
			get
			{
				return this._QuotaRequest;
			}
			set
			{
				this._QuotaRequest.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_C_CatalogRestrictionCNCategories(C_CatalogRestrictionCNCategories entity)
		{
			this.SendPropertyChanging();
			entity.CNCategories = this;
		}

		private void detach_C_CatalogRestrictionCNCategories(C_CatalogRestrictionCNCategories entity)
		{
			this.SendPropertyChanging();
			entity.CNCategories = null;
		}

		private void attach_C_CNCategoryCN(C_CNCategoryCN entity)
		{
			this.SendPropertyChanging();
			entity.C_CNCategory = this;
		}

		private void detach_C_CNCategoryCN(C_CNCategoryCN entity)
		{
			this.SendPropertyChanging();
			entity.C_CNCategory = null;
		}

		private void attach_Documents(C_CNCategoryDocument entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = this;
		}

		private void detach_Documents(C_CNCategoryDocument entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = null;
		}

		private void attach_Items(C_CNCategoryItem entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = this;
		}

		private void detach_Items(C_CNCategoryItem entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = null;
		}

		private void attach_C_CNCategoryOperationType(C_CNCategoryOperationType entity)
		{
			this.SendPropertyChanging();
			entity.C_CNCategory = this;
		}

		private void detach_C_CNCategoryOperationType(C_CNCategoryOperationType entity)
		{
			this.SendPropertyChanging();
			entity.C_CNCategory = null;
		}

		private void attach_C_CNCategoryRepresentations(C_CNCategoryRepresentations entity)
		{
			this.SendPropertyChanging();
			entity.C_CNCategory = this;
		}

		private void detach_C_CNCategoryRepresentations(C_CNCategoryRepresentations entity)
		{
			this.SendPropertyChanging();
			entity.C_CNCategory = null;
		}

		private void attach_C_LegalDocumentCNCategories(C_LegalDocumentCNCategories entity)
		{
			this.SendPropertyChanging();
			entity.CNCategories = this;
		}

		private void detach_C_LegalDocumentCNCategories(C_LegalDocumentCNCategories entity)
		{
			this.SendPropertyChanging();
			entity.CNCategories = null;
		}

		private void attach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = this;
		}

		private void detach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = null;
		}

		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = this;
		}

		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = null;
		}

		private void attach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = this;
		}

		private void detach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = null;
		}

		private void attach_QuotaRedistribution(QuotaRedistribution entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = this;
		}

		private void detach_QuotaRedistribution(QuotaRedistribution entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = null;
		}

		private void attach_QuotaRequest(QuotaRequest entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = this;
		}

		private void detach_QuotaRequest(QuotaRequest entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = null;
		}
	}

	[Table(Name = "dbo.C_CNCategoryCN")]
	public partial class C_CNCategoryCN : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CNCategoryID;

		private int _CNID;

		private EntityRef<C_CNCategory> _C_CNCategory;

		private EntityRef<C_CN> _CN;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCNCategoryIDChanging(int value);
		partial void OnCNCategoryIDChanged();
		partial void OnCNIDChanging(int value);
		partial void OnCNIDChanged();
		#endregion

		public C_CNCategoryCN()
		{
			this._C_CNCategory = default(EntityRef<C_CNCategory>);
			this._CN = default(EntityRef<C_CN>);
			OnCreated();
		}

		[Column(Storage = "_CNCategoryID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					if (this._C_CNCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}

		[Column(Storage = "_CNID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CNID
		{
			get
			{
				return this._CNID;
			}
			set
			{
				if ((this._CNID != value))
				{
					if (this._CN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNIDChanging(value);
					this.SendPropertyChanging();
					this._CNID = value;
					this.SendPropertyChanged("CNID");
					this.OnCNIDChanged();
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryCN_C_CNCategory", Storage = "_C_CNCategory", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", IsForeignKey = true, DeleteOnNull = true)]
		public C_CNCategory C_CNCategory
		{
			get
			{
				return this._C_CNCategory.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._C_CNCategory.Entity;
				if (((previousValue != value)
							|| (this._C_CNCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_CNCategory.Entity = null;
						previousValue.C_CNCategoryCN.Remove(this);
					}
					this._C_CNCategory.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryCN.Add(this);
						this._CNCategoryID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoryID = default(int);
					}
					this.SendPropertyChanged("C_CNCategory");
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryCN_CN", Storage = "_CN", ThisKey = "CNID", OtherKey = "CNID", IsForeignKey = true, DeleteOnNull = true)]
		public C_CN CN
		{
			get
			{
				return this._CN.Entity;
			}
			set
			{
				C_CN previousValue = this._CN.Entity;
				if (((previousValue != value)
							|| (this._CN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CN.Entity = null;
						previousValue.C_CNCategoryCN.Remove(this);
					}
					this._CN.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryCN.Add(this);
						this._CNID = value.CNID;
					}
					else
					{
						this._CNID = default(int);
					}
					this.SendPropertyChanged("CN");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_CNCategoryDocument")]
	public partial class C_CNCategoryDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CNCategoryDocumentID;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private int _DocumentTypeID;

		private bool _IsRequired;

		private bool _IsAttach;

		private bool _IsCommDoc;

		private int _CNCategoryID;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private System.Guid _MasterObjectGUID;

		private bool _IsDeleted;

		private int _PassportSeqNo;

		private EntityRef<C_CNCategory> _CNCategory;

		private EntityRef<C_DocumentType> _DocumentType;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<C_CNCategoryFGADocument> _C_CNCategoryFGADocument;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCNCategoryDocumentIDChanging(int value);
		partial void OnCNCategoryDocumentIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnDocumentTypeIDChanging(int value);
		partial void OnDocumentTypeIDChanged();
		partial void OnIsRequiredChanging(bool value);
		partial void OnIsRequiredChanged();
		partial void OnIsAttachChanging(bool value);
		partial void OnIsAttachChanged();
		partial void OnIsCommDocChanging(bool value);
		partial void OnIsCommDocChanged();
		partial void OnCNCategoryIDChanging(int value);
		partial void OnCNCategoryIDChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnMasterObjectGUIDChanging(System.Guid value);
		partial void OnMasterObjectGUIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnPassportSeqNoChanging(int value);
		partial void OnPassportSeqNoChanged();
		#endregion

		public C_CNCategoryDocument()
		{
			this._CNCategory = default(EntityRef<C_CNCategory>);
			this._DocumentType = default(EntityRef<C_DocumentType>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._C_CNCategoryFGADocument = new EntitySet<C_CNCategoryFGADocument>(new Action<C_CNCategoryFGADocument>(this.attach_C_CNCategoryFGADocument), new Action<C_CNCategoryFGADocument>(this.detach_C_CNCategoryFGADocument));
			OnCreated();
		}

		[Column(Storage = "_CNCategoryDocumentID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CNCategoryDocumentID
		{
			get
			{
				return this._CNCategoryDocumentID;
			}
			set
			{
				if ((this._CNCategoryDocumentID != value))
				{
					this.OnCNCategoryDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryDocumentID = value;
					this.SendPropertyChanged("CNCategoryDocumentID");
					this.OnCNCategoryDocumentIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_DocumentTypeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int DocumentTypeID
		{
			get
			{
				return this._DocumentTypeID;
			}
			set
			{
				if ((this._DocumentTypeID != value))
				{
					if (this._DocumentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentTypeID = value;
					this.SendPropertyChanged("DocumentTypeID");
					this.OnDocumentTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_IsRequired", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsRequired
		{
			get
			{
				return this._IsRequired;
			}
			set
			{
				if ((this._IsRequired != value))
				{
					this.OnIsRequiredChanging(value);
					this.SendPropertyChanging();
					this._IsRequired = value;
					this.SendPropertyChanged("IsRequired");
					this.OnIsRequiredChanged();
				}
			}
		}

		[Column(Storage = "_IsAttach", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsAttach
		{
			get
			{
				return this._IsAttach;
			}
			set
			{
				if ((this._IsAttach != value))
				{
					this.OnIsAttachChanging(value);
					this.SendPropertyChanging();
					this._IsAttach = value;
					this.SendPropertyChanged("IsAttach");
					this.OnIsAttachChanged();
				}
			}
		}

		[Column(Storage = "_IsCommDoc", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsCommDoc
		{
			get
			{
				return this._IsCommDoc;
			}
			set
			{
				if ((this._IsCommDoc != value))
				{
					this.OnIsCommDocChanging(value);
					this.SendPropertyChanging();
					this._IsCommDoc = value;
					this.SendPropertyChanged("IsCommDoc");
					this.OnIsCommDocChanged();
				}
			}
		}

		[Column(Storage = "_CNCategoryID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					if (this._CNCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_MasterObjectGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_PassportSeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int PassportSeqNo
		{
			get
			{
				return this._PassportSeqNo;
			}
			set
			{
				if ((this._PassportSeqNo != value))
				{
					this.OnPassportSeqNoChanging(value);
					this.SendPropertyChanging();
					this._PassportSeqNo = value;
					this.SendPropertyChanged("PassportSeqNo");
					this.OnPassportSeqNoChanged();
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryDocument_CNCategory", Storage = "_CNCategory", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", IsForeignKey = true)]
		public C_CNCategory CNCategory
		{
			get
			{
				return this._CNCategory.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._CNCategory.Entity;
				if (((previousValue != value)
							|| (this._CNCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategory.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._CNCategory.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._CNCategoryID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoryID = default(int);
					}
					this.SendPropertyChanged("CNCategory");
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryDocument_DocumentType", Storage = "_DocumentType", ThisKey = "DocumentTypeID", OtherKey = "DocumentTypeID", IsForeignKey = true)]
		public C_DocumentType DocumentType
		{
			get
			{
				return this._DocumentType.Entity;
			}
			set
			{
				C_DocumentType previousValue = this._DocumentType.Entity;
				if (((previousValue != value)
							|| (this._DocumentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentType.Entity = null;
						previousValue.C_CNCategoryDocument.Remove(this);
					}
					this._DocumentType.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryDocument.Add(this);
						this._DocumentTypeID = value.DocumentTypeID;
					}
					else
					{
						this._DocumentTypeID = default(int);
					}
					this.SendPropertyChanged("DocumentType");
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryDocument_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CNCategoryDocument.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryDocument.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryFGADocument_CNCategoryDocument", Storage = "_C_CNCategoryFGADocument", ThisKey = "CNCategoryDocumentID", OtherKey = "CNCategoryDocumentID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CNCategoryFGADocument> C_CNCategoryFGADocument
		{
			get
			{
				return this._C_CNCategoryFGADocument;
			}
			set
			{
				this._C_CNCategoryFGADocument.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_C_CNCategoryFGADocument(C_CNCategoryFGADocument entity)
		{
			this.SendPropertyChanging();
			entity.CNCategoryDocument = this;
		}

		private void detach_C_CNCategoryFGADocument(C_CNCategoryFGADocument entity)
		{
			this.SendPropertyChanging();
			entity.CNCategoryDocument = null;
		}
	}

	[Table(Name = "dbo.C_CNCategoryFGADocument")]
	public partial class C_CNCategoryFGADocument : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CNCategoryFGADocumentID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private int _CNCategoryDocumentID;

		private int _FGADocumentID;

		private bool _IsCommDoc;

		private bool _IsExclude;

		private int _IsLicenseR;

		private int _IsLicenseG;

		private int _IsLicenseI;

		private int _IsOperationI;

		private int _IsOperationE;

		private string _DocNo;

		private System.Nullable<System.DateTime> _DocDate;

		private int _ReasonSeqNo;

		private EntityRef<C_CNCategoryDocument> _CNCategoryDocument;

		private EntityRef<C_FGADocument> _FGADocument;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCNCategoryFGADocumentIDChanging(int value);
		partial void OnCNCategoryFGADocumentIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnCNCategoryDocumentIDChanging(int value);
		partial void OnCNCategoryDocumentIDChanged();
		partial void OnFGADocumentIDChanging(int value);
		partial void OnFGADocumentIDChanged();
		partial void OnIsCommDocChanging(bool value);
		partial void OnIsCommDocChanged();
		partial void OnIsExcludeChanging(bool value);
		partial void OnIsExcludeChanged();
		partial void OnDocNoChanging(string value);
		partial void OnDocNoChanged();
		partial void OnDocDateChanging(System.Nullable<System.DateTime> value);
		partial void OnDocDateChanged();
		partial void OnReasonSeqNoChanging(int value);
		partial void OnReasonSeqNoChanged();
		partial void OnIsLicenseRChanging(int value);
		partial void OnIsLicenseRChanged();
		partial void OnIsLicenseGChanging(int value);
		partial void OnIsLicenseGChanged();
		partial void OnIsLicenseIChanging(int value);
		partial void OnIsLicenseIChanged();
		partial void OnIsOperationIChanging(int value);
		partial void OnIsOperationIChanged();
		partial void OnIsOperationEChanging(int value);
		partial void OnIsOperationEChanged();
		#endregion

		public C_CNCategoryFGADocument()
		{
			this._CNCategoryDocument = default(EntityRef<C_CNCategoryDocument>);
			this._FGADocument = default(EntityRef<C_FGADocument>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_CNCategoryFGADocumentID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CNCategoryFGADocumentID
		{
			get
			{
				return this._CNCategoryFGADocumentID;
			}
			set
			{
				if ((this._CNCategoryFGADocumentID != value))
				{
					this.OnCNCategoryFGADocumentIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryFGADocumentID = value;
					this.SendPropertyChanged("CNCategoryFGADocumentID");
					this.OnCNCategoryFGADocumentIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_CNCategoryDocumentID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CNCategoryDocumentID
		{
			get
			{
				return this._CNCategoryDocumentID;
			}
			set
			{
				if ((this._CNCategoryDocumentID != value))
				{
					if (this._CNCategoryDocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryDocumentID = value;
					this.SendPropertyChanged("CNCategoryDocumentID");
					this.OnCNCategoryDocumentIDChanged();
				}
			}
		}

		[Column(Storage = "_FGADocumentID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int FGADocumentID
		{
			get
			{
				return this._FGADocumentID;
			}
			set
			{
				if ((this._FGADocumentID != value))
				{
					if (this._FGADocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFGADocumentIDChanging(value);
					this.SendPropertyChanging();
					this._FGADocumentID = value;
					this.SendPropertyChanged("FGADocumentID");
					this.OnFGADocumentIDChanged();
				}
			}
		}

		[Column(Storage = "_IsCommDoc", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsCommDoc
		{
			get
			{
				return this._IsCommDoc;
			}
			set
			{
				if ((this._IsCommDoc != value))
				{
					this.OnIsCommDocChanging(value);
					this.SendPropertyChanging();
					this._IsCommDoc = value;
					this.SendPropertyChanged("IsCommDoc");
					this.OnIsCommDocChanged();
				}
			}
		}

		[Column(Storage = "_IsExclude", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsExclude
		{
			get
			{
				return this._IsExclude;
			}
			set
			{
				if ((this._IsExclude != value))
				{
					this.OnIsExcludeChanging(value);
					this.SendPropertyChanging();
					this._IsExclude = value;
					this.SendPropertyChanged("IsExclude");
					this.OnIsExcludeChanged();
				}
			}
		}

		[Column(Storage = "_DocNo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DocNo
		{
			get
			{
				return this._DocNo;
			}
			set
			{
				if ((this._DocNo != value))
				{
					this.OnDocNoChanging(value);
					this.SendPropertyChanging();
					this._DocNo = value;
					this.SendPropertyChanged("DocNo");
					this.OnDocNoChanged();
				}
			}
		}

		[Column(Storage = "_DocDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this.OnDocDateChanging(value);
					this.SendPropertyChanging();
					this._DocDate = value;
					this.SendPropertyChanged("DocDate");
					this.OnDocDateChanged();
				}
			}
		}

		[Column(Storage = "_ReasonSeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ReasonSeqNo
		{
			get
			{
				return this._ReasonSeqNo;
			}
			set
			{
				if ((this._ReasonSeqNo != value))
				{
					this.OnReasonSeqNoChanging(value);
					this.SendPropertyChanging();
					this._ReasonSeqNo = value;
					this.SendPropertyChanged("ReasonSeqNo");
					this.OnReasonSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_IsLicenseR", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int IsLicenseR
		{
			get
			{
				return this._IsLicenseR;
			}
			set
			{
				if ((this._IsLicenseR != value))
				{
					this.OnIsLicenseRChanging(value);
					this.SendPropertyChanging();
					this._IsLicenseR = value;
					this.SendPropertyChanged("IsLicenseR");
					this.OnIsLicenseRChanged();
				}
			}
		}

		[Column(Storage = "_IsLicenseG", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int IsLicenseG
		{
			get
			{
				return this._IsLicenseG;
			}
			set
			{
				if ((this._IsLicenseG != value))
				{
					this.OnIsLicenseGChanging(value);
					this.SendPropertyChanging();
					this._IsLicenseG = value;
					this.SendPropertyChanged("IsLicenseG");
					this.OnIsLicenseGChanged();
				}
			}
		}

		[Column(Storage = "_IsLicenseI", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int IsLicenseI
		{
			get
			{
				return this._IsLicenseI;
			}
			set
			{
				if ((this._IsLicenseI != value))
				{
					this.OnIsLicenseIChanging(value);
					this.SendPropertyChanging();
					this._IsLicenseI = value;
					this.SendPropertyChanged("IsLicenseI");
					this.OnIsLicenseIChanged();
				}
			}
		}

		[Column(Storage = "_IsOperationI", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int IsOperationI
		{
			get
			{
				return this._IsOperationI;
			}
			set
			{
				if ((this._IsOperationI != value))
				{
					this.OnIsOperationIChanging(value);
					this.SendPropertyChanging();
					this._IsOperationI = value;
					this.SendPropertyChanged("IsOperationI");
					this.OnIsOperationIChanged();
				}
			}
		}

		[Column(Storage = "_IsOperationE", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int IsOperationE
		{
			get
			{
				return this._IsOperationE;
			}
			set
			{
				if ((this._IsOperationE != value))
				{
					this.OnIsOperationEChanging(value);
					this.SendPropertyChanging();
					this._IsOperationE = value;
					this.SendPropertyChanged("IsOperationE");
					this.OnIsOperationEChanged();
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryFGADocument_CNCategoryDocument", Storage = "_CNCategoryDocument", ThisKey = "CNCategoryDocumentID", OtherKey = "CNCategoryDocumentID", IsForeignKey = true)]
		public C_CNCategoryDocument CNCategoryDocument
		{
			get
			{
				return this._CNCategoryDocument.Entity;
			}
			set
			{
				C_CNCategoryDocument previousValue = this._CNCategoryDocument.Entity;
				if (((previousValue != value)
							|| (this._CNCategoryDocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategoryDocument.Entity = null;
						previousValue.C_CNCategoryFGADocument.Remove(this);
					}
					this._CNCategoryDocument.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryFGADocument.Add(this);
						this._CNCategoryDocumentID = value.CNCategoryDocumentID;
					}
					else
					{
						this._CNCategoryDocumentID = default(int);
					}
					this.SendPropertyChanged("CNCategoryDocument");
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryFGADocument_FGADocument", Storage = "_FGADocument", ThisKey = "FGADocumentID", OtherKey = "FGADocumentID", IsForeignKey = true)]
		public C_FGADocument FGADocument
		{
			get
			{
				return this._FGADocument.Entity;
			}
			set
			{
				C_FGADocument previousValue = this._FGADocument.Entity;
				if (((previousValue != value)
							|| (this._FGADocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FGADocument.Entity = null;
						previousValue.C_CNCategoryFGADocument.Remove(this);
					}
					this._FGADocument.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryFGADocument.Add(this);
						this._FGADocumentID = value.FGADocumentID;
					}
					else
					{
						this._FGADocumentID = default(int);
					}
					this.SendPropertyChanged("FGADocument");
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryFGADocument_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CNCategoryFGADocument.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryFGADocument.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_CNCategoryItem")]
	public partial class C_CNCategoryItem : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CNCategoryItemID;

		private int _MaxValidity;

		private bool _IsCalendar;

		private int _LicenseTypeID;

		private int _CNCategoryID;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private bool _IsDeleted;

		private bool _IsEnabled;

		private int _MaxNotify;

		private bool _IsCalendarNotify;

		private EntityRef<C_CNCategory> _CNCategory;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<C_LicenseType> _LicenseType;

		private EntitySet<C_CNCategoryItemRepresentations> _C_CNCategoryItemRepresentations;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCNCategoryItemIDChanging(int value);
		partial void OnCNCategoryItemIDChanged();
		partial void OnMaxValidityChanging(int value);
		partial void OnMaxValidityChanged();
		partial void OnIsCalendarChanging(bool value);
		partial void OnIsCalendarChanged();
		partial void OnLicenseTypeIDChanging(int value);
		partial void OnLicenseTypeIDChanged();
		partial void OnCNCategoryIDChanging(int value);
		partial void OnCNCategoryIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnIsEnabledChanging(bool value);
		partial void OnIsEnabledChanged();
		partial void OnMaxNotifyChanging(int value);
		partial void OnMaxNotifyChanged();
		partial void OnIsCalendarNotifyChanging(bool value);
		partial void OnIsCalendarNotifyChanged();
		#endregion

		public C_CNCategoryItem()
		{
			this._CNCategory = default(EntityRef<C_CNCategory>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._LicenseType = default(EntityRef<C_LicenseType>);
			this._C_CNCategoryItemRepresentations = new EntitySet<C_CNCategoryItemRepresentations>(new Action<C_CNCategoryItemRepresentations>(this.attach_C_CNCategoryItemRepresentations), new Action<C_CNCategoryItemRepresentations>(this.detach_C_CNCategoryItemRepresentations));
			OnCreated();
		}

		[Column(Storage = "_CNCategoryItemID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CNCategoryItemID
		{
			get
			{
				return this._CNCategoryItemID;
			}
			set
			{
				if ((this._CNCategoryItemID != value))
				{
					this.OnCNCategoryItemIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryItemID = value;
					this.SendPropertyChanged("CNCategoryItemID");
					this.OnCNCategoryItemIDChanged();
				}
			}
		}

		[Column(Storage = "_MaxValidity", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int MaxValidity
		{
			get
			{
				return this._MaxValidity;
			}
			set
			{
				if ((this._MaxValidity != value))
				{
					this.OnMaxValidityChanging(value);
					this.SendPropertyChanging();
					this._MaxValidity = value;
					this.SendPropertyChanged("MaxValidity");
					this.OnMaxValidityChanged();
				}
			}
		}

		[Column(Storage = "_IsCalendar", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsCalendar
		{
			get
			{
				return this._IsCalendar;
			}
			set
			{
				if ((this._IsCalendar != value))
				{
					this.OnIsCalendarChanging(value);
					this.SendPropertyChanging();
					this._IsCalendar = value;
					this.SendPropertyChanged("IsCalendar");
					this.OnIsCalendarChanged();
				}
			}
		}

		[Column(Storage = "_LicenseTypeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LicenseTypeID
		{
			get
			{
				return this._LicenseTypeID;
			}
			set
			{
				if ((this._LicenseTypeID != value))
				{
					if (this._LicenseType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLicenseTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseTypeID = value;
					this.SendPropertyChanged("LicenseTypeID");
					this.OnLicenseTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_CNCategoryID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					if (this._CNCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_IsEnabled", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this.OnIsEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsEnabled = value;
					this.SendPropertyChanged("IsEnabled");
					this.OnIsEnabledChanged();
				}
			}
		}

		[Column(Storage = "_MaxNotify", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int MaxNotify
		{
			get
			{
				return this._MaxNotify;
			}
			set
			{
				if ((this._MaxNotify != value))
				{
					this.OnMaxNotifyChanging(value);
					this.SendPropertyChanging();
					this._MaxNotify = value;
					this.SendPropertyChanged("MaxNotify");
					this.OnMaxNotifyChanged();
				}
			}
		}

		[Column(Storage = "_IsCalendarNotify", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsCalendarNotify
		{
			get
			{
				return this._IsCalendarNotify;
			}
			set
			{
				if ((this._IsCalendarNotify != value))
				{
					this.OnIsCalendarNotifyChanging(value);
					this.SendPropertyChanging();
					this._IsCalendarNotify = value;
					this.SendPropertyChanged("IsCalendarNotify");
					this.OnIsCalendarNotifyChanged();
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryItem_CNCategory", Storage = "_CNCategory", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", IsForeignKey = true)]
		public C_CNCategory CNCategory
		{
			get
			{
				return this._CNCategory.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._CNCategory.Entity;
				if (((previousValue != value)
							|| (this._CNCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategory.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._CNCategory.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._CNCategoryID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoryID = default(int);
					}
					this.SendPropertyChanged("CNCategory");
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryItem_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CNCategoryItem.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryItem.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryItem_LicenseType", Storage = "_LicenseType", ThisKey = "LicenseTypeID", OtherKey = "LicenseTypeID", IsForeignKey = true)]
		public C_LicenseType LicenseType
		{
			get
			{
				return this._LicenseType.Entity;
			}
			set
			{
				C_LicenseType previousValue = this._LicenseType.Entity;
				if (((previousValue != value)
							|| (this._LicenseType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LicenseType.Entity = null;
						previousValue.C_CNCategoryItem.Remove(this);
					}
					this._LicenseType.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryItem.Add(this);
						this._LicenseTypeID = value.LicenseTypeID;
					}
					else
					{
						this._LicenseTypeID = default(int);
					}
					this.SendPropertyChanged("LicenseType");
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryItemRepresentations_C_CNCategoryItem", Storage = "_C_CNCategoryItemRepresentations", ThisKey = "CNCategoryItemID", OtherKey = "CNCategoryItemID", DeleteRule = "CASCADE")]
		public EntitySet<C_CNCategoryItemRepresentations> C_CNCategoryItemRepresentations
		{
			get
			{
				return this._C_CNCategoryItemRepresentations;
			}
			set
			{
				this._C_CNCategoryItemRepresentations.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_C_CNCategoryItemRepresentations(C_CNCategoryItemRepresentations entity)
		{
			this.SendPropertyChanging();
			entity.C_CNCategoryItem = this;
		}

		private void detach_C_CNCategoryItemRepresentations(C_CNCategoryItemRepresentations entity)
		{
			this.SendPropertyChanging();
			entity.C_CNCategoryItem = null;
		}
	}

	[Table(Name = "dbo.C_CNCategoryItemRepresentations")]
	public partial class C_CNCategoryItemRepresentations : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CNCategoryItemID;

		private int _RepresentationsID;

		private EntityRef<C_CNCategoryItem> _C_CNCategoryItem;

		private EntityRef<Representation> _Representations;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCNCategoryItemIDChanging(int value);
		partial void OnCNCategoryItemIDChanged();
		partial void OnRepresentationsIDChanging(int value);
		partial void OnRepresentationsIDChanged();
		#endregion

		public C_CNCategoryItemRepresentations()
		{
			this._C_CNCategoryItem = default(EntityRef<C_CNCategoryItem>);
			this._Representations = default(EntityRef<Representation>);
			OnCreated();
		}

		[Column(Storage = "_CNCategoryItemID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CNCategoryItemID
		{
			get
			{
				return this._CNCategoryItemID;
			}
			set
			{
				if ((this._CNCategoryItemID != value))
				{
					if (this._C_CNCategoryItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryItemIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryItemID = value;
					this.SendPropertyChanged("CNCategoryItemID");
					this.OnCNCategoryItemIDChanged();
				}
			}
		}

		[Column(Storage = "_RepresentationsID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int RepresentationsID
		{
			get
			{
				return this._RepresentationsID;
			}
			set
			{
				if ((this._RepresentationsID != value))
				{
					if (this._Representations.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentationsIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentationsID = value;
					this.SendPropertyChanged("RepresentationsID");
					this.OnRepresentationsIDChanged();
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryItemRepresentations_C_CNCategoryItem", Storage = "_C_CNCategoryItem", ThisKey = "CNCategoryItemID", OtherKey = "CNCategoryItemID", IsForeignKey = true, DeleteOnNull = true)]
		public C_CNCategoryItem C_CNCategoryItem
		{
			get
			{
				return this._C_CNCategoryItem.Entity;
			}
			set
			{
				C_CNCategoryItem previousValue = this._C_CNCategoryItem.Entity;
				if (((previousValue != value)
							|| (this._C_CNCategoryItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_CNCategoryItem.Entity = null;
						previousValue.C_CNCategoryItemRepresentations.Remove(this);
					}
					this._C_CNCategoryItem.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryItemRepresentations.Add(this);
						this._CNCategoryItemID = value.CNCategoryItemID;
					}
					else
					{
						this._CNCategoryItemID = default(int);
					}
					this.SendPropertyChanged("C_CNCategoryItem");
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryItemRepresentations_Representations", Storage = "_Representations", ThisKey = "RepresentationsID", OtherKey = "RepresentationID", IsForeignKey = true, DeleteOnNull = true)]
		public Representation Representations
		{
			get
			{
				return this._Representations.Entity;
			}
			set
			{
				Representation previousValue = this._Representations.Entity;
				if (((previousValue != value)
							|| (this._Representations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representations.Entity = null;
						previousValue.C_CNCategoryItemRepresentations.Remove(this);
					}
					this._Representations.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryItemRepresentations.Add(this);
						this._RepresentationsID = value.RepresentationID;
					}
					else
					{
						this._RepresentationsID = default(int);
					}
					this.SendPropertyChanged("Representations");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_CNCategoryOperationType")]
	public partial class C_CNCategoryOperationType : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CNCategoryID;

		private int _OperationTypeID;

		private EntityRef<C_CNCategory> _C_CNCategory;

		private EntityRef<C_OperationType> _OperationType;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCNCategoryIDChanging(int value);
		partial void OnCNCategoryIDChanged();
		partial void OnOperationTypeIDChanging(int value);
		partial void OnOperationTypeIDChanged();
		#endregion

		public C_CNCategoryOperationType()
		{
			this._C_CNCategory = default(EntityRef<C_CNCategory>);
			this._OperationType = default(EntityRef<C_OperationType>);
			OnCreated();
		}

		[Column(Storage = "_CNCategoryID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					if (this._C_CNCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}

		[Column(Storage = "_OperationTypeID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					if (this._OperationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._OperationTypeID = value;
					this.SendPropertyChanged("OperationTypeID");
					this.OnOperationTypeIDChanged();
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryOperationType_C_CNCategory", Storage = "_C_CNCategory", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", IsForeignKey = true, DeleteOnNull = true)]
		public C_CNCategory C_CNCategory
		{
			get
			{
				return this._C_CNCategory.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._C_CNCategory.Entity;
				if (((previousValue != value)
							|| (this._C_CNCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_CNCategory.Entity = null;
						previousValue.C_CNCategoryOperationType.Remove(this);
					}
					this._C_CNCategory.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryOperationType.Add(this);
						this._CNCategoryID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoryID = default(int);
					}
					this.SendPropertyChanged("C_CNCategory");
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryOperationType_OperationType", Storage = "_OperationType", ThisKey = "OperationTypeID", OtherKey = "OperationTypeID", IsForeignKey = true, DeleteOnNull = true)]
		public C_OperationType OperationType
		{
			get
			{
				return this._OperationType.Entity;
			}
			set
			{
				C_OperationType previousValue = this._OperationType.Entity;
				if (((previousValue != value)
							|| (this._OperationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperationType.Entity = null;
						previousValue.C_CNCategoryOperationType.Remove(this);
					}
					this._OperationType.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryOperationType.Add(this);
						this._OperationTypeID = value.OperationTypeID;
					}
					else
					{
						this._OperationTypeID = default(int);
					}
					this.SendPropertyChanged("OperationType");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_CNCategoryRepresentations")]
	public partial class C_CNCategoryRepresentations : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CNCategoryID;

		private int _RepresentationsID;

		private EntityRef<C_CNCategory> _C_CNCategory;

		private EntityRef<Representation> _Representations;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCNCategoryIDChanging(int value);
		partial void OnCNCategoryIDChanged();
		partial void OnRepresentationsIDChanging(int value);
		partial void OnRepresentationsIDChanged();
		#endregion

		public C_CNCategoryRepresentations()
		{
			this._C_CNCategory = default(EntityRef<C_CNCategory>);
			this._Representations = default(EntityRef<Representation>);
			OnCreated();
		}

		[Column(Storage = "_CNCategoryID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					if (this._C_CNCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}

		[Column(Storage = "_RepresentationsID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int RepresentationsID
		{
			get
			{
				return this._RepresentationsID;
			}
			set
			{
				if ((this._RepresentationsID != value))
				{
					if (this._Representations.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentationsIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentationsID = value;
					this.SendPropertyChanged("RepresentationsID");
					this.OnRepresentationsIDChanged();
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryRepresentations_C_CNCategory", Storage = "_C_CNCategory", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", IsForeignKey = true, DeleteOnNull = true)]
		public C_CNCategory C_CNCategory
		{
			get
			{
				return this._C_CNCategory.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._C_CNCategory.Entity;
				if (((previousValue != value)
							|| (this._C_CNCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_CNCategory.Entity = null;
						previousValue.C_CNCategoryRepresentations.Remove(this);
					}
					this._C_CNCategory.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryRepresentations.Add(this);
						this._CNCategoryID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoryID = default(int);
					}
					this.SendPropertyChanged("C_CNCategory");
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryRepresentations_Representations", Storage = "_Representations", ThisKey = "RepresentationsID", OtherKey = "RepresentationID", IsForeignKey = true, DeleteOnNull = true)]
		public Representation Representations
		{
			get
			{
				return this._Representations.Entity;
			}
			set
			{
				Representation previousValue = this._Representations.Entity;
				if (((previousValue != value)
							|| (this._Representations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representations.Entity = null;
						previousValue.C_CNCategoryRepresentations.Remove(this);
					}
					this._Representations.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryRepresentations.Add(this);
						this._RepresentationsID = value.RepresentationID;
					}
					else
					{
						this._RepresentationsID = default(int);
					}
					this.SendPropertyChanged("Representations");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_CNGroup")]
	public partial class C_CNGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CNGroupID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private string _GroupNumber;

		private System.Nullable<int> _ParentID;

		private int _CatalogRestrictionID;

		private string _DisplayTitle;

		private EntityRef<C_CatalogRestriction> _CatalogRestriction;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<C_CNGroup> _Parent;

		private EntitySet<C_CNGroup> _CNGroup;

		private EntitySet<C_CNGroupCN> _C_CNGroupCN;

		private EntitySet<C_LegalDocumentCNGroups> _C_LegalDocumentCNGroups;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCNGroupIDChanging(int value);
		partial void OnCNGroupIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnGroupNumberChanging(string value);
		partial void OnGroupNumberChanged();
		partial void OnParentIDChanging(System.Nullable<int> value);
		partial void OnParentIDChanged();
		partial void OnCatalogRestrictionIDChanging(int value);
		partial void OnCatalogRestrictionIDChanged();
		partial void OnDisplayTitleChanging(string value);
		partial void OnDisplayTitleChanged();
		#endregion

		public C_CNGroup()
		{
			this._CatalogRestriction = default(EntityRef<C_CatalogRestriction>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Parent = default(EntityRef<C_CNGroup>);
			this._CNGroup = new EntitySet<C_CNGroup>(new Action<C_CNGroup>(this.attach_CNGroup), new Action<C_CNGroup>(this.detach_CNGroup));
			this._C_CNGroupCN = new EntitySet<C_CNGroupCN>(new Action<C_CNGroupCN>(this.attach_C_CNGroupCN), new Action<C_CNGroupCN>(this.detach_C_CNGroupCN));
			this._C_LegalDocumentCNGroups = new EntitySet<C_LegalDocumentCNGroups>(new Action<C_LegalDocumentCNGroups>(this.attach_C_LegalDocumentCNGroups), new Action<C_LegalDocumentCNGroups>(this.detach_C_LegalDocumentCNGroups));
			OnCreated();
		}

		[Column(Storage = "_CNGroupID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CNGroupID
		{
			get
			{
				return this._CNGroupID;
			}
			set
			{
				if ((this._CNGroupID != value))
				{
					this.OnCNGroupIDChanging(value);
					this.SendPropertyChanging();
					this._CNGroupID = value;
					this.SendPropertyChanged("CNGroupID");
					this.OnCNGroupIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_GroupNumber", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string GroupNumber
		{
			get
			{
				return this._GroupNumber;
			}
			set
			{
				if ((this._GroupNumber != value))
				{
					this.OnGroupNumberChanging(value);
					this.SendPropertyChanging();
					this._GroupNumber = value;
					this.SendPropertyChanged("GroupNumber");
					this.OnGroupNumberChanged();
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}

		[Column(Storage = "_CatalogRestrictionID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CatalogRestrictionID
		{
			get
			{
				return this._CatalogRestrictionID;
			}
			set
			{
				if ((this._CatalogRestrictionID != value))
				{
					if (this._CatalogRestriction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCatalogRestrictionIDChanging(value);
					this.SendPropertyChanging();
					this._CatalogRestrictionID = value;
					this.SendPropertyChanged("CatalogRestrictionID");
					this.OnCatalogRestrictionIDChanged();
				}
			}
		}

		[Column(Storage = "_DisplayTitle", AutoSync = AutoSync.Always, DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(([GroupNumber]+\' \')+[Title])")]
		public string DisplayTitle
		{
			get
			{
				return this._DisplayTitle;
			}
			set
			{
				if ((this._DisplayTitle != value))
				{
					this.OnDisplayTitleChanging(value);
					this.SendPropertyChanging();
					this._DisplayTitle = value;
					this.SendPropertyChanged("DisplayTitle");
					this.OnDisplayTitleChanged();
				}
			}
		}

		[Association(Name = "FK_C_CNGroup_CatalogRestriction", Storage = "_CatalogRestriction", ThisKey = "CatalogRestrictionID", OtherKey = "CatalogRestrictionID", IsForeignKey = true)]
		public C_CatalogRestriction CatalogRestriction
		{
			get
			{
				return this._CatalogRestriction.Entity;
			}
			set
			{
				C_CatalogRestriction previousValue = this._CatalogRestriction.Entity;
				if (((previousValue != value)
							|| (this._CatalogRestriction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CatalogRestriction.Entity = null;
						previousValue.CNGroups.Remove(this);
					}
					this._CatalogRestriction.Entity = value;
					if ((value != null))
					{
						value.CNGroups.Add(this);
						this._CatalogRestrictionID = value.CatalogRestrictionID;
					}
					else
					{
						this._CatalogRestrictionID = default(int);
					}
					this.SendPropertyChanged("CatalogRestriction");
				}
			}
		}

		[Association(Name = "FK_C_CNGroup_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CNGroup.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CNGroup.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_C_CNGroup_Parent", Storage = "_Parent", ThisKey = "ParentID", OtherKey = "CNGroupID", IsForeignKey = true)]
		public C_CNGroup Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				C_CNGroup previousValue = this._Parent.Entity;
				if (((previousValue != value)
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.CNGroup.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.CNGroup.Add(this);
						this._ParentID = value.CNGroupID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}

		[Association(Name = "FK_C_CNGroup_Parent", Storage = "_CNGroup", ThisKey = "CNGroupID", OtherKey = "ParentID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CNGroup> CNGroup
		{
			get
			{
				return this._CNGroup;
			}
			set
			{
				this._CNGroup.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNGroupCN_C_CNGroup", Storage = "_C_CNGroupCN", ThisKey = "CNGroupID", OtherKey = "CNGroupID", DeleteRule = "CASCADE")]
		public EntitySet<C_CNGroupCN> C_CNGroupCN
		{
			get
			{
				return this._C_CNGroupCN;
			}
			set
			{
				this._C_CNGroupCN.Assign(value);
			}
		}

		[Association(Name = "FK_C_LegalDocumentCNGroups_CNGroups", Storage = "_C_LegalDocumentCNGroups", ThisKey = "CNGroupID", OtherKey = "CNGroupsID", DeleteRule = "CASCADE")]
		public EntitySet<C_LegalDocumentCNGroups> C_LegalDocumentCNGroups
		{
			get
			{
				return this._C_LegalDocumentCNGroups;
			}
			set
			{
				this._C_LegalDocumentCNGroups.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_CNGroup(C_CNGroup entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}

		private void detach_CNGroup(C_CNGroup entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}

		private void attach_C_CNGroupCN(C_CNGroupCN entity)
		{
			this.SendPropertyChanging();
			entity.C_CNGroup = this;
		}

		private void detach_C_CNGroupCN(C_CNGroupCN entity)
		{
			this.SendPropertyChanging();
			entity.C_CNGroup = null;
		}

		private void attach_C_LegalDocumentCNGroups(C_LegalDocumentCNGroups entity)
		{
			this.SendPropertyChanging();
			entity.CNGroups = this;
		}

		private void detach_C_LegalDocumentCNGroups(C_LegalDocumentCNGroups entity)
		{
			this.SendPropertyChanging();
			entity.CNGroups = null;
		}
	}

	[Table(Name = "dbo.C_CNGroupCN")]
	public partial class C_CNGroupCN : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CNGroupID;

		private int _CNID;

		private EntityRef<C_CNGroup> _C_CNGroup;

		private EntityRef<C_CN> _CN;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCNGroupIDChanging(int value);
		partial void OnCNGroupIDChanged();
		partial void OnCNIDChanging(int value);
		partial void OnCNIDChanged();
		#endregion

		public C_CNGroupCN()
		{
			this._C_CNGroup = default(EntityRef<C_CNGroup>);
			this._CN = default(EntityRef<C_CN>);
			OnCreated();
		}

		[Column(Storage = "_CNGroupID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CNGroupID
		{
			get
			{
				return this._CNGroupID;
			}
			set
			{
				if ((this._CNGroupID != value))
				{
					if (this._C_CNGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNGroupIDChanging(value);
					this.SendPropertyChanging();
					this._CNGroupID = value;
					this.SendPropertyChanged("CNGroupID");
					this.OnCNGroupIDChanged();
				}
			}
		}

		[Column(Storage = "_CNID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CNID
		{
			get
			{
				return this._CNID;
			}
			set
			{
				if ((this._CNID != value))
				{
					if (this._CN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNIDChanging(value);
					this.SendPropertyChanging();
					this._CNID = value;
					this.SendPropertyChanged("CNID");
					this.OnCNIDChanged();
				}
			}
		}

		[Association(Name = "FK_C_CNGroupCN_C_CNGroup", Storage = "_C_CNGroup", ThisKey = "CNGroupID", OtherKey = "CNGroupID", IsForeignKey = true, DeleteOnNull = true)]
		public C_CNGroup C_CNGroup
		{
			get
			{
				return this._C_CNGroup.Entity;
			}
			set
			{
				C_CNGroup previousValue = this._C_CNGroup.Entity;
				if (((previousValue != value)
							|| (this._C_CNGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_CNGroup.Entity = null;
						previousValue.C_CNGroupCN.Remove(this);
					}
					this._C_CNGroup.Entity = value;
					if ((value != null))
					{
						value.C_CNGroupCN.Add(this);
						this._CNGroupID = value.CNGroupID;
					}
					else
					{
						this._CNGroupID = default(int);
					}
					this.SendPropertyChanged("C_CNGroup");
				}
			}
		}

		[Association(Name = "FK_C_CNGroupCN_CN", Storage = "_CN", ThisKey = "CNID", OtherKey = "CNID", IsForeignKey = true, DeleteOnNull = true)]
		public C_CN CN
		{
			get
			{
				return this._CN.Entity;
			}
			set
			{
				C_CN previousValue = this._CN.Entity;
				if (((previousValue != value)
							|| (this._CN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CN.Entity = null;
						previousValue.C_CNGroupCN.Remove(this);
					}
					this._CN.Entity = value;
					if ((value != null))
					{
						value.C_CNGroupCN.Add(this);
						this._CNID = value.CNID;
					}
					else
					{
						this._CNID = default(int);
					}
					this.SendPropertyChanged("CN");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_CNType")]
	public partial class C_CNType : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CNTypeID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private EntitySet<C_CN> _C_CN;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCNTypeIDChanging(int value);
		partial void OnCNTypeIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		#endregion

		public C_CNType()
		{
			this._C_CN = new EntitySet<C_CN>(new Action<C_CN>(this.attach_C_CN), new Action<C_CN>(this.detach_C_CN));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_CNTypeID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CNTypeID
		{
			get
			{
				return this._CNTypeID;
			}
			set
			{
				if ((this._CNTypeID != value))
				{
					this.OnCNTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CNTypeID = value;
					this.SendPropertyChanged("CNTypeID");
					this.OnCNTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Association(Name = "FK_C_CN_CNType", Storage = "_C_CN", ThisKey = "CNTypeID", OtherKey = "CNTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CN> C_CN
		{
			get
			{
				return this._C_CN;
			}
			set
			{
				this._C_CN.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNType_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CNType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CNType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_C_CN(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.CNType = this;
		}

		private void detach_C_CN(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.CNType = null;
		}
	}

	[Table(Name = "dbo.C_Country")]
	public partial class C_Country : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CountryID;

		private string _Code;

		private string _Alpha2;

		private string _Alpha3;

		private string _Title;

		private string _ShortTitle;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private System.Guid _MasterObjectGUID;

		private bool _IsDeleted;

		private EntitySet<Appendix> _Appendix;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<C_CountryGroupCountries> _C_CountryGroupCountries;

		private EntitySet<C_CustomHouse> _C_CustomHouse;

		private EntitySet<Contractor> _Contractor;

		private EntitySet<CustomsDeclaration> _CustomsDeclaration;

		private EntitySet<CustomsDeclaration> _Country;

		private EntitySet<CustomsDeclaration> _CustomsDeclaration_CountryTo;

		private EntitySet<CustomsDeclaration> _CustomsDeclaration_RecipientCountry;

		private EntitySet<CustomsDeclaration> _CustomsDeclaration_SenderCountry;

		private EntitySet<ForeignAuthorization> _ForeignAuthorization;

		private EntitySet<HST_Contractor> _HST_Contractor;

		private EntitySet<OrderDoc> _OrderDoc;

		private EntitySet<OrderDoc> _OrderDoc_Country2;

		private EntitySet<OrderDoc> _OrderDoc_Country3;

		private EntitySet<SpecificationItem> _SpecificationItem;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCountryIDChanging(int value);
		partial void OnCountryIDChanged();
		partial void OnCodeChanging(string value);
		partial void OnCodeChanged();
		partial void OnAlpha2Changing(string value);
		partial void OnAlpha2Changed();
		partial void OnAlpha3Changing(string value);
		partial void OnAlpha3Changed();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnShortTitleChanging(string value);
		partial void OnShortTitleChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnMasterObjectGUIDChanging(System.Guid value);
		partial void OnMasterObjectGUIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public C_Country()
		{
			this._Appendix = new EntitySet<Appendix>(new Action<Appendix>(this.attach_Appendix), new Action<Appendix>(this.detach_Appendix));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._C_CountryGroupCountries = new EntitySet<C_CountryGroupCountries>(new Action<C_CountryGroupCountries>(this.attach_C_CountryGroupCountries), new Action<C_CountryGroupCountries>(this.detach_C_CountryGroupCountries));
			this._C_CustomHouse = new EntitySet<C_CustomHouse>(new Action<C_CustomHouse>(this.attach_C_CustomHouse), new Action<C_CustomHouse>(this.detach_C_CustomHouse));
			this._Contractor = new EntitySet<Contractor>(new Action<Contractor>(this.attach_Contractor), new Action<Contractor>(this.detach_Contractor));
			this._CustomsDeclaration = new EntitySet<CustomsDeclaration>(new Action<CustomsDeclaration>(this.attach_CustomsDeclaration), new Action<CustomsDeclaration>(this.detach_CustomsDeclaration));
			this._Country = new EntitySet<CustomsDeclaration>(new Action<CustomsDeclaration>(this.attach_Country), new Action<CustomsDeclaration>(this.detach_Country));
			this._CustomsDeclaration_CountryTo = new EntitySet<CustomsDeclaration>(new Action<CustomsDeclaration>(this.attach_CustomsDeclaration_CountryTo), new Action<CustomsDeclaration>(this.detach_CustomsDeclaration_CountryTo));
			this._CustomsDeclaration_RecipientCountry = new EntitySet<CustomsDeclaration>(new Action<CustomsDeclaration>(this.attach_CustomsDeclaration_RecipientCountry), new Action<CustomsDeclaration>(this.detach_CustomsDeclaration_RecipientCountry));
			this._CustomsDeclaration_SenderCountry = new EntitySet<CustomsDeclaration>(new Action<CustomsDeclaration>(this.attach_CustomsDeclaration_SenderCountry), new Action<CustomsDeclaration>(this.detach_CustomsDeclaration_SenderCountry));
			this._ForeignAuthorization = new EntitySet<ForeignAuthorization>(new Action<ForeignAuthorization>(this.attach_ForeignAuthorization), new Action<ForeignAuthorization>(this.detach_ForeignAuthorization));
			this._HST_Contractor = new EntitySet<HST_Contractor>(new Action<HST_Contractor>(this.attach_HST_Contractor), new Action<HST_Contractor>(this.detach_HST_Contractor));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._OrderDoc_Country2 = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc_Country2), new Action<OrderDoc>(this.detach_OrderDoc_Country2));
			this._OrderDoc_Country3 = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc_Country3), new Action<OrderDoc>(this.detach_OrderDoc_Country3));
			this._SpecificationItem = new EntitySet<SpecificationItem>(new Action<SpecificationItem>(this.attach_SpecificationItem), new Action<SpecificationItem>(this.detach_SpecificationItem));
			OnCreated();
		}

		[Column(Storage = "_CountryID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}

		[Column(Storage = "_Code", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}

		[Column(Storage = "_Alpha2", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Alpha2
		{
			get
			{
				return this._Alpha2;
			}
			set
			{
				if ((this._Alpha2 != value))
				{
					this.OnAlpha2Changing(value);
					this.SendPropertyChanging();
					this._Alpha2 = value;
					this.SendPropertyChanged("Alpha2");
					this.OnAlpha2Changed();
				}
			}
		}

		[Column(Storage = "_Alpha3", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Alpha3
		{
			get
			{
				return this._Alpha3;
			}
			set
			{
				if ((this._Alpha3 != value))
				{
					this.OnAlpha3Changing(value);
					this.SendPropertyChanging();
					this._Alpha3 = value;
					this.SendPropertyChanged("Alpha3");
					this.OnAlpha3Changed();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_ShortTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ShortTitle
		{
			get
			{
				return this._ShortTitle;
			}
			set
			{
				if ((this._ShortTitle != value))
				{
					this.OnShortTitleChanging(value);
					this.SendPropertyChanging();
					this._ShortTitle = value;
					this.SendPropertyChanged("ShortTitle");
					this.OnShortTitleChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_MasterObjectGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_Appendix_Country", Storage = "_Appendix", ThisKey = "CountryID", OtherKey = "CountryID", DeleteRule = "NO ACTION")]
		public EntitySet<Appendix> Appendix
		{
			get
			{
				return this._Appendix;
			}
			set
			{
				this._Appendix.Assign(value);
			}
		}

		[Association(Name = "FK_C_Country_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_Country.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_Country.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_C_CountryGroupCountries_Countries", Storage = "_C_CountryGroupCountries", ThisKey = "CountryID", OtherKey = "CountriesID", DeleteRule = "CASCADE")]
		public EntitySet<C_CountryGroupCountries> C_CountryGroupCountries
		{
			get
			{
				return this._C_CountryGroupCountries;
			}
			set
			{
				this._C_CountryGroupCountries.Assign(value);
			}
		}

		[Association(Name = "FK_C_CustomHouse_Country", Storage = "_C_CustomHouse", ThisKey = "CountryID", OtherKey = "CountryID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CustomHouse> C_CustomHouse
		{
			get
			{
				return this._C_CustomHouse;
			}
			set
			{
				this._C_CustomHouse.Assign(value);
			}
		}

		[Association(Name = "FK_Contractor_Country", Storage = "_Contractor", ThisKey = "CountryID", OtherKey = "CountryID", DeleteRule = "NO ACTION")]
		public EntitySet<Contractor> Contractor
		{
			get
			{
				return this._Contractor;
			}
			set
			{
				this._Contractor.Assign(value);
			}
		}

		[Association(Name = "FK_CustomsDeclaration_CountryFrom", Storage = "_CustomsDeclaration", ThisKey = "CountryID", OtherKey = "CountryFromID", DeleteRule = "NO ACTION")]
		public EntitySet<CustomsDeclaration> CustomsDeclaration
		{
			get
			{
				return this._CustomsDeclaration;
			}
			set
			{
				this._CustomsDeclaration.Assign(value);
			}
		}

		[Association(Name = "FK_CustomsDeclaration_CountryOrigin", Storage = "_Country", ThisKey = "CountryID", OtherKey = "CountryOriginID", DeleteRule = "NO ACTION")]
		public EntitySet<CustomsDeclaration> Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				this._Country.Assign(value);
			}
		}

		[Association(Name = "FK_CustomsDeclaration_CountryTo", Storage = "_CustomsDeclaration_CountryTo", ThisKey = "CountryID", OtherKey = "CountryToID", DeleteRule = "NO ACTION")]
		public EntitySet<CustomsDeclaration> CustomsDeclaration_CountryTo
		{
			get
			{
				return this._CustomsDeclaration_CountryTo;
			}
			set
			{
				this._CustomsDeclaration_CountryTo.Assign(value);
			}
		}

		[Association(Name = "FK_CustomsDeclaration_RecipientCountry", Storage = "_CustomsDeclaration_RecipientCountry", ThisKey = "CountryID", OtherKey = "RecipientCountryID", DeleteRule = "NO ACTION")]
		public EntitySet<CustomsDeclaration> CustomsDeclaration_RecipientCountry
		{
			get
			{
				return this._CustomsDeclaration_RecipientCountry;
			}
			set
			{
				this._CustomsDeclaration_RecipientCountry.Assign(value);
			}
		}

		[Association(Name = "FK_CustomsDeclaration_SenderCountry", Storage = "_CustomsDeclaration_SenderCountry", ThisKey = "CountryID", OtherKey = "SenderCountryID", DeleteRule = "NO ACTION")]
		public EntitySet<CustomsDeclaration> CustomsDeclaration_SenderCountry
		{
			get
			{
				return this._CustomsDeclaration_SenderCountry;
			}
			set
			{
				this._CustomsDeclaration_SenderCountry.Assign(value);
			}
		}

		[Association(Name = "FK_ForeignAuthorization_DealerCountry", Storage = "_ForeignAuthorization", ThisKey = "CountryID", OtherKey = "DealerCountryID", DeleteRule = "NO ACTION")]
		public EntitySet<ForeignAuthorization> ForeignAuthorization
		{
			get
			{
				return this._ForeignAuthorization;
			}
			set
			{
				this._ForeignAuthorization.Assign(value);
			}
		}

		[Association(Name = "FK_HST_Contractor_Country", Storage = "_HST_Contractor", ThisKey = "CountryID", OtherKey = "CountryID", DeleteRule = "NO ACTION")]
		public EntitySet<HST_Contractor> HST_Contractor
		{
			get
			{
				return this._HST_Contractor;
			}
			set
			{
				this._HST_Contractor.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_Country1", Storage = "_OrderDoc", ThisKey = "CountryID", OtherKey = "Country1ID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_Country2", Storage = "_OrderDoc_Country2", ThisKey = "CountryID", OtherKey = "Country2ID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc_Country2
		{
			get
			{
				return this._OrderDoc_Country2;
			}
			set
			{
				this._OrderDoc_Country2.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_Country3", Storage = "_OrderDoc_Country3", ThisKey = "CountryID", OtherKey = "Country3ID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc_Country3
		{
			get
			{
				return this._OrderDoc_Country3;
			}
			set
			{
				this._OrderDoc_Country3.Assign(value);
			}
		}

		[Association(Name = "FK_SpecificationItem_Country", Storage = "_SpecificationItem", ThisKey = "CountryID", OtherKey = "CountryID", DeleteRule = "NO ACTION")]
		public EntitySet<SpecificationItem> SpecificationItem
		{
			get
			{
				return this._SpecificationItem;
			}
			set
			{
				this._SpecificationItem.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_Appendix(Appendix entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}

		private void detach_Appendix(Appendix entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}

		private void attach_C_CountryGroupCountries(C_CountryGroupCountries entity)
		{
			this.SendPropertyChanging();
			entity.Countries = this;
		}

		private void detach_C_CountryGroupCountries(C_CountryGroupCountries entity)
		{
			this.SendPropertyChanging();
			entity.Countries = null;
		}

		private void attach_C_CustomHouse(C_CustomHouse entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}

		private void detach_C_CustomHouse(C_CustomHouse entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}

		private void attach_Contractor(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}

		private void detach_Contractor(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}

		private void attach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.CountryFrom = this;
		}

		private void detach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.CountryFrom = null;
		}

		private void attach_Country(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.CountryOrigin = this;
		}

		private void detach_Country(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.CountryOrigin = null;
		}

		private void attach_CustomsDeclaration_CountryTo(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.CountryTo = this;
		}

		private void detach_CustomsDeclaration_CountryTo(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.CountryTo = null;
		}

		private void attach_CustomsDeclaration_RecipientCountry(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.RecipientCountry = this;
		}

		private void detach_CustomsDeclaration_RecipientCountry(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.RecipientCountry = null;
		}

		private void attach_CustomsDeclaration_SenderCountry(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.SenderCountry = this;
		}

		private void detach_CustomsDeclaration_SenderCountry(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.SenderCountry = null;
		}

		private void attach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.DealerCountry = this;
		}

		private void detach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.DealerCountry = null;
		}

		private void attach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}

		private void detach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}

		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Country1 = this;
		}

		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Country1 = null;
		}

		private void attach_OrderDoc_Country2(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Country2 = this;
		}

		private void detach_OrderDoc_Country2(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Country2 = null;
		}

		private void attach_OrderDoc_Country3(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Country3 = this;
		}

		private void detach_OrderDoc_Country3(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Country3 = null;
		}

		private void attach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}

		private void detach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}

	[Table(Name = "dbo.C_CountryGroup")]
	public partial class C_CountryGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CountryGroupID;

		private string _Title;

		private bool _IsException;

		private System.DateTime _LastModifiedDate;

		private string _Code;

		private int _LastModifiedUserID;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private System.Guid _MasterObjectGUID;

		private char _GroupType;

		private bool _IsDeleted;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<C_CountryGroupCountries> _C_CountryGroupCountries;

		private EntitySet<ForeignAuthorization> _ForeignAuthorization;

		private EntitySet<OrderDoc> _OrderDoc;

		private EntitySet<QuotaDistribution> _QuotaDistribution;

		private EntitySet<QuotaRedistribution> _QuotaRedistribution;

		private EntitySet<QuotaRequest> _QuotaRequest;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCountryGroupIDChanging(int value);
		partial void OnCountryGroupIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnIsExceptionChanging(bool value);
		partial void OnIsExceptionChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnCodeChanging(string value);
		partial void OnCodeChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnMasterObjectGUIDChanging(System.Guid value);
		partial void OnMasterObjectGUIDChanged();
		partial void OnGroupTypeChanging(char value);
		partial void OnGroupTypeChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public C_CountryGroup()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._C_CountryGroupCountries = new EntitySet<C_CountryGroupCountries>(new Action<C_CountryGroupCountries>(this.attach_C_CountryGroupCountries), new Action<C_CountryGroupCountries>(this.detach_C_CountryGroupCountries));
			this._ForeignAuthorization = new EntitySet<ForeignAuthorization>(new Action<ForeignAuthorization>(this.attach_ForeignAuthorization), new Action<ForeignAuthorization>(this.detach_ForeignAuthorization));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._QuotaDistribution = new EntitySet<QuotaDistribution>(new Action<QuotaDistribution>(this.attach_QuotaDistribution), new Action<QuotaDistribution>(this.detach_QuotaDistribution));
			this._QuotaRedistribution = new EntitySet<QuotaRedistribution>(new Action<QuotaRedistribution>(this.attach_QuotaRedistribution), new Action<QuotaRedistribution>(this.detach_QuotaRedistribution));
			this._QuotaRequest = new EntitySet<QuotaRequest>(new Action<QuotaRequest>(this.attach_QuotaRequest), new Action<QuotaRequest>(this.detach_QuotaRequest));
			OnCreated();
		}

		[Column(Storage = "_CountryGroupID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CountryGroupID
		{
			get
			{
				return this._CountryGroupID;
			}
			set
			{
				if ((this._CountryGroupID != value))
				{
					this.OnCountryGroupIDChanging(value);
					this.SendPropertyChanging();
					this._CountryGroupID = value;
					this.SendPropertyChanged("CountryGroupID");
					this.OnCountryGroupIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_IsException", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsException
		{
			get
			{
				return this._IsException;
			}
			set
			{
				if ((this._IsException != value))
				{
					this.OnIsExceptionChanging(value);
					this.SendPropertyChanging();
					this._IsException = value;
					this.SendPropertyChanged("IsException");
					this.OnIsExceptionChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_Code", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_MasterObjectGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}

		[Column(Storage = "_GroupType", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char GroupType
		{
			get
			{
				return this._GroupType;
			}
			set
			{
				if ((this._GroupType != value))
				{
					this.OnGroupTypeChanging(value);
					this.SendPropertyChanging();
					this._GroupType = value;
					this.SendPropertyChanged("GroupType");
					this.OnGroupTypeChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_C_CountryGroup_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CountryGroup.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CountryGroup.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_C_CountryGroupCountries_C_CountryGroup", Storage = "_C_CountryGroupCountries", ThisKey = "CountryGroupID", OtherKey = "CountryGroupID", DeleteRule = "CASCADE")]
		public EntitySet<C_CountryGroupCountries> C_CountryGroupCountries
		{
			get
			{
				return this._C_CountryGroupCountries;
			}
			set
			{
				this._C_CountryGroupCountries.Assign(value);
			}
		}

		[Association(Name = "FK_ForeignAuthorization_CountryGroup", Storage = "_ForeignAuthorization", ThisKey = "CountryGroupID", OtherKey = "CountryGroupID", DeleteRule = "NO ACTION")]
		public EntitySet<ForeignAuthorization> ForeignAuthorization
		{
			get
			{
				return this._ForeignAuthorization;
			}
			set
			{
				this._ForeignAuthorization.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_QuotaCountryGroup", Storage = "_OrderDoc", ThisKey = "CountryGroupID", OtherKey = "QuotaCountryGroupID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}

		[Association(Name = "FK_QuotaDistribution_CountryGroup", Storage = "_QuotaDistribution", ThisKey = "CountryGroupID", OtherKey = "CountryGroupID", DeleteRule = "NO ACTION")]
		public EntitySet<QuotaDistribution> QuotaDistribution
		{
			get
			{
				return this._QuotaDistribution;
			}
			set
			{
				this._QuotaDistribution.Assign(value);
			}
		}

		[Association(Name = "FK_QuotaRedistribution_CountryGroup", Storage = "_QuotaRedistribution", ThisKey = "CountryGroupID", OtherKey = "CountryGroupID", DeleteRule = "NO ACTION")]
		public EntitySet<QuotaRedistribution> QuotaRedistribution
		{
			get
			{
				return this._QuotaRedistribution;
			}
			set
			{
				this._QuotaRedistribution.Assign(value);
			}
		}

		[Association(Name = "FK_QuotaRequest_CountryGroup", Storage = "_QuotaRequest", ThisKey = "CountryGroupID", OtherKey = "CountryGroupID", DeleteRule = "NO ACTION")]
		public EntitySet<QuotaRequest> QuotaRequest
		{
			get
			{
				return this._QuotaRequest;
			}
			set
			{
				this._QuotaRequest.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_C_CountryGroupCountries(C_CountryGroupCountries entity)
		{
			this.SendPropertyChanging();
			entity.C_CountryGroup = this;
		}

		private void detach_C_CountryGroupCountries(C_CountryGroupCountries entity)
		{
			this.SendPropertyChanging();
			entity.C_CountryGroup = null;
		}

		private void attach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.CountryGroup = this;
		}

		private void detach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.CountryGroup = null;
		}

		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.QuotaCountryGroup = this;
		}

		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.QuotaCountryGroup = null;
		}

		private void attach_QuotaDistribution(QuotaDistribution entity)
		{
			this.SendPropertyChanging();
			entity.CountryGroup = this;
		}

		private void detach_QuotaDistribution(QuotaDistribution entity)
		{
			this.SendPropertyChanging();
			entity.CountryGroup = null;
		}

		private void attach_QuotaRedistribution(QuotaRedistribution entity)
		{
			this.SendPropertyChanging();
			entity.CountryGroup = this;
		}

		private void detach_QuotaRedistribution(QuotaRedistribution entity)
		{
			this.SendPropertyChanging();
			entity.CountryGroup = null;
		}

		private void attach_QuotaRequest(QuotaRequest entity)
		{
			this.SendPropertyChanging();
			entity.CountryGroup = this;
		}

		private void detach_QuotaRequest(QuotaRequest entity)
		{
			this.SendPropertyChanging();
			entity.CountryGroup = null;
		}
	}

	[Table(Name = "dbo.C_CountryGroupCountries")]
	public partial class C_CountryGroupCountries : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CountryGroupID;

		private int _CountriesID;

		private EntityRef<C_CountryGroup> _C_CountryGroup;

		private EntityRef<C_Country> _Countries;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCountryGroupIDChanging(int value);
		partial void OnCountryGroupIDChanged();
		partial void OnCountriesIDChanging(int value);
		partial void OnCountriesIDChanged();
		#endregion

		public C_CountryGroupCountries()
		{
			this._C_CountryGroup = default(EntityRef<C_CountryGroup>);
			this._Countries = default(EntityRef<C_Country>);
			OnCreated();
		}

		[Column(Storage = "_CountryGroupID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CountryGroupID
		{
			get
			{
				return this._CountryGroupID;
			}
			set
			{
				if ((this._CountryGroupID != value))
				{
					if (this._C_CountryGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryGroupIDChanging(value);
					this.SendPropertyChanging();
					this._CountryGroupID = value;
					this.SendPropertyChanged("CountryGroupID");
					this.OnCountryGroupIDChanged();
				}
			}
		}

		[Column(Storage = "_CountriesID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CountriesID
		{
			get
			{
				return this._CountriesID;
			}
			set
			{
				if ((this._CountriesID != value))
				{
					if (this._Countries.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountriesIDChanging(value);
					this.SendPropertyChanging();
					this._CountriesID = value;
					this.SendPropertyChanged("CountriesID");
					this.OnCountriesIDChanged();
				}
			}
		}

		[Association(Name = "FK_C_CountryGroupCountries_C_CountryGroup", Storage = "_C_CountryGroup", ThisKey = "CountryGroupID", OtherKey = "CountryGroupID", IsForeignKey = true, DeleteOnNull = true)]
		public C_CountryGroup C_CountryGroup
		{
			get
			{
				return this._C_CountryGroup.Entity;
			}
			set
			{
				C_CountryGroup previousValue = this._C_CountryGroup.Entity;
				if (((previousValue != value)
							|| (this._C_CountryGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_CountryGroup.Entity = null;
						previousValue.C_CountryGroupCountries.Remove(this);
					}
					this._C_CountryGroup.Entity = value;
					if ((value != null))
					{
						value.C_CountryGroupCountries.Add(this);
						this._CountryGroupID = value.CountryGroupID;
					}
					else
					{
						this._CountryGroupID = default(int);
					}
					this.SendPropertyChanged("C_CountryGroup");
				}
			}
		}

		[Association(Name = "FK_C_CountryGroupCountries_Countries", Storage = "_Countries", ThisKey = "CountriesID", OtherKey = "CountryID", IsForeignKey = true, DeleteOnNull = true)]
		public C_Country Countries
		{
			get
			{
				return this._Countries.Entity;
			}
			set
			{
				C_Country previousValue = this._Countries.Entity;
				if (((previousValue != value)
							|| (this._Countries.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Countries.Entity = null;
						previousValue.C_CountryGroupCountries.Remove(this);
					}
					this._Countries.Entity = value;
					if ((value != null))
					{
						value.C_CountryGroupCountries.Add(this);
						this._CountriesID = value.CountryID;
					}
					else
					{
						this._CountriesID = default(int);
					}
					this.SendPropertyChanged("Countries");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_Crypto")]
	public partial class C_Crypto : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CryptoID;

		private System.Nullable<System.DateTime> _CancelDate;

		private string _ExternalID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _No;

		private string _Producer;

		private string _Status;

		private string _Title;

		private System.Nullable<System.DateTime> _Validity;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCryptoIDChanging(int value);
		partial void OnCryptoIDChanged();
		partial void OnCancelDateChanging(System.Nullable<System.DateTime> value);
		partial void OnCancelDateChanged();
		partial void OnExternalIDChanging(string value);
		partial void OnExternalIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnNoChanging(string value);
		partial void OnNoChanged();
		partial void OnProducerChanging(string value);
		partial void OnProducerChanged();
		partial void OnStatusChanging(string value);
		partial void OnStatusChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnValidityChanging(System.Nullable<System.DateTime> value);
		partial void OnValidityChanged();
		#endregion

		public C_Crypto()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_CryptoID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CryptoID
		{
			get
			{
				return this._CryptoID;
			}
			set
			{
				if ((this._CryptoID != value))
				{
					this.OnCryptoIDChanging(value);
					this.SendPropertyChanging();
					this._CryptoID = value;
					this.SendPropertyChanged("CryptoID");
					this.OnCryptoIDChanged();
				}
			}
		}

		[Column(Storage = "_CancelDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CancelDate
		{
			get
			{
				return this._CancelDate;
			}
			set
			{
				if ((this._CancelDate != value))
				{
					this.OnCancelDateChanging(value);
					this.SendPropertyChanging();
					this._CancelDate = value;
					this.SendPropertyChanged("CancelDate");
					this.OnCancelDateChanged();
				}
			}
		}

		[Column(Storage = "_ExternalID", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ExternalID
		{
			get
			{
				return this._ExternalID;
			}
			set
			{
				if ((this._ExternalID != value))
				{
					this.OnExternalIDChanging(value);
					this.SendPropertyChanging();
					this._ExternalID = value;
					this.SendPropertyChanged("ExternalID");
					this.OnExternalIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_No", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string No
		{
			get
			{
				return this._No;
			}
			set
			{
				if ((this._No != value))
				{
					this.OnNoChanging(value);
					this.SendPropertyChanging();
					this._No = value;
					this.SendPropertyChanged("No");
					this.OnNoChanged();
				}
			}
		}

		[Column(Storage = "_Producer", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Producer
		{
			get
			{
				return this._Producer;
			}
			set
			{
				if ((this._Producer != value))
				{
					this.OnProducerChanging(value);
					this.SendPropertyChanging();
					this._Producer = value;
					this.SendPropertyChanged("Producer");
					this.OnProducerChanged();
				}
			}
		}

		[Column(Storage = "_Status", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Validity", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Validity
		{
			get
			{
				return this._Validity;
			}
			set
			{
				if ((this._Validity != value))
				{
					this.OnValidityChanging(value);
					this.SendPropertyChanging();
					this._Validity = value;
					this.SendPropertyChanged("Validity");
					this.OnValidityChanged();
				}
			}
		}

		[Association(Name = "FK_C_Crypto_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_Crypto.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_Crypto.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_Currency")]
	public partial class C_Currency : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CurrencyID;

		private string _Code;

		private string _Title;

		private string _Prefix;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private System.Guid _MasterObjectGUID;

		private bool _IsDeleted;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<OrderDoc> _OrderDoc;

		private EntitySet<SpecificationCommon> _SpecificationCommon;

		private EntitySet<SpecificationItem> _SpecificationItem;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCurrencyIDChanging(int value);
		partial void OnCurrencyIDChanged();
		partial void OnCodeChanging(string value);
		partial void OnCodeChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnPrefixChanging(string value);
		partial void OnPrefixChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnMasterObjectGUIDChanging(System.Guid value);
		partial void OnMasterObjectGUIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public C_Currency()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._SpecificationCommon = new EntitySet<SpecificationCommon>(new Action<SpecificationCommon>(this.attach_SpecificationCommon), new Action<SpecificationCommon>(this.detach_SpecificationCommon));
			this._SpecificationItem = new EntitySet<SpecificationItem>(new Action<SpecificationItem>(this.attach_SpecificationItem), new Action<SpecificationItem>(this.detach_SpecificationItem));
			OnCreated();
		}

		[Column(Storage = "_CurrencyID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}

		[Column(Storage = "_Code", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Prefix", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Prefix
		{
			get
			{
				return this._Prefix;
			}
			set
			{
				if ((this._Prefix != value))
				{
					this.OnPrefixChanging(value);
					this.SendPropertyChanging();
					this._Prefix = value;
					this.SendPropertyChanged("Prefix");
					this.OnPrefixChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_MasterObjectGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]<getdate() then (1) else (0) end,(0)),(0" +
			")))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_C_Currency_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_Currency.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_Currency.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_PaymentCurrency", Storage = "_OrderDoc", ThisKey = "CurrencyID", OtherKey = "PaymentCurrencyID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}

		[Association(Name = "FK_SpecificationCommon_Currency", Storage = "_SpecificationCommon", ThisKey = "CurrencyID", OtherKey = "CurrencyID", DeleteRule = "NO ACTION")]
		public EntitySet<SpecificationCommon> SpecificationCommon
		{
			get
			{
				return this._SpecificationCommon;
			}
			set
			{
				this._SpecificationCommon.Assign(value);
			}
		}

		[Association(Name = "FK_SpecificationItem_Currency", Storage = "_SpecificationItem", ThisKey = "CurrencyID", OtherKey = "CurrencyID", DeleteRule = "NO ACTION")]
		public EntitySet<SpecificationItem> SpecificationItem
		{
			get
			{
				return this._SpecificationItem;
			}
			set
			{
				this._SpecificationItem.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.PaymentCurrency = this;
		}

		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.PaymentCurrency = null;
		}

		private void attach_SpecificationCommon(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}

		private void detach_SpecificationCommon(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}

		private void attach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}

		private void detach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
	}

	[Table(Name = "dbo.C_CustomHouse")]
	public partial class C_CustomHouse : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CustomHouseID;

		private string _Code;

		private string _Title;

		private string _Address;

		private int _CountryID;

		private string _OKATO;

		private string _Phone;

		private string _Fax;

		private string _Email;

		private System.DateTime _LastModifiedDate;

		private bool _IsDeleted;

		private int _LastModifiedUserID;

		private string _FullTitle;

		private string _OKPO;

		private string _OGRN;

		private string _INN;

		private string _KPP;

		private string _City;

		private System.Nullable<System.DateTime> _BeginDate;

		private System.Nullable<System.DateTime> _EndDate;

		private System.Nullable<System.DateTime> _ChangeDate;

		private EntityRef<C_Country> _Country;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<C_CustomHouseContact> _ContactPerson;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCustomHouseIDChanging(int value);
		partial void OnCustomHouseIDChanged();
		partial void OnCodeChanging(string value);
		partial void OnCodeChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnAddressChanging(string value);
		partial void OnAddressChanged();
		partial void OnCountryIDChanging(int value);
		partial void OnCountryIDChanged();
		partial void OnOKATOChanging(string value);
		partial void OnOKATOChanged();
		partial void OnPhoneChanging(string value);
		partial void OnPhoneChanged();
		partial void OnFaxChanging(string value);
		partial void OnFaxChanged();
		partial void OnEmailChanging(string value);
		partial void OnEmailChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnFullTitleChanging(string value);
		partial void OnFullTitleChanged();
		partial void OnOKPOChanging(string value);
		partial void OnOKPOChanged();
		partial void OnOGRNChanging(string value);
		partial void OnOGRNChanged();
		partial void OnINNChanging(string value);
		partial void OnINNChanged();
		partial void OnKPPChanging(string value);
		partial void OnKPPChanged();
		partial void OnCityChanging(string value);
		partial void OnCityChanged();
		partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
		partial void OnEndDateChanged();
		partial void OnChangeDateChanging(System.Nullable<System.DateTime> value);
		partial void OnChangeDateChanged();
		#endregion

		public C_CustomHouse()
		{
			this._Country = default(EntityRef<C_Country>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ContactPerson = new EntitySet<C_CustomHouseContact>(new Action<C_CustomHouseContact>(this.attach_ContactPerson), new Action<C_CustomHouseContact>(this.detach_ContactPerson));
			OnCreated();
		}

		[Column(Storage = "_CustomHouseID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CustomHouseID
		{
			get
			{
				return this._CustomHouseID;
			}
			set
			{
				if ((this._CustomHouseID != value))
				{
					this.OnCustomHouseIDChanging(value);
					this.SendPropertyChanging();
					this._CustomHouseID = value;
					this.SendPropertyChanged("CustomHouseID");
					this.OnCustomHouseIDChanged();
				}
			}
		}

		[Column(Storage = "_Code", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Address", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}

		[Column(Storage = "_CountryID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}

		[Column(Storage = "_OKATO", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string OKATO
		{
			get
			{
				return this._OKATO;
			}
			set
			{
				if ((this._OKATO != value))
				{
					this.OnOKATOChanging(value);
					this.SendPropertyChanging();
					this._OKATO = value;
					this.SendPropertyChanged("OKATO");
					this.OnOKATOChanged();
				}
			}
		}

		[Column(Storage = "_Phone", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}

		[Column(Storage = "_Fax", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}

		[Column(Storage = "_Email", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_FullTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string FullTitle
		{
			get
			{
				return this._FullTitle;
			}
			set
			{
				if ((this._FullTitle != value))
				{
					this.OnFullTitleChanging(value);
					this.SendPropertyChanging();
					this._FullTitle = value;
					this.SendPropertyChanged("FullTitle");
					this.OnFullTitleChanged();
				}
			}
		}

		[Column(Storage = "_OKPO", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string OKPO
		{
			get
			{
				return this._OKPO;
			}
			set
			{
				if ((this._OKPO != value))
				{
					this.OnOKPOChanging(value);
					this.SendPropertyChanging();
					this._OKPO = value;
					this.SendPropertyChanged("OKPO");
					this.OnOKPOChanged();
				}
			}
		}

		[Column(Storage = "_OGRN", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string OGRN
		{
			get
			{
				return this._OGRN;
			}
			set
			{
				if ((this._OGRN != value))
				{
					this.OnOGRNChanging(value);
					this.SendPropertyChanging();
					this._OGRN = value;
					this.SendPropertyChanged("OGRN");
					this.OnOGRNChanged();
				}
			}
		}

		[Column(Storage = "_INN", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string INN
		{
			get
			{
				return this._INN;
			}
			set
			{
				if ((this._INN != value))
				{
					this.OnINNChanging(value);
					this.SendPropertyChanging();
					this._INN = value;
					this.SendPropertyChanged("INN");
					this.OnINNChanged();
				}
			}
		}

		[Column(Storage = "_KPP", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string KPP
		{
			get
			{
				return this._KPP;
			}
			set
			{
				if ((this._KPP != value))
				{
					this.OnKPPChanging(value);
					this.SendPropertyChanging();
					this._KPP = value;
					this.SendPropertyChanged("KPP");
					this.OnKPPChanged();
				}
			}
		}

		[Column(Storage = "_City", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_ChangeDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ChangeDate
		{
			get
			{
				return this._ChangeDate;
			}
			set
			{
				if ((this._ChangeDate != value))
				{
					this.OnChangeDateChanging(value);
					this.SendPropertyChanging();
					this._ChangeDate = value;
					this.SendPropertyChanged("ChangeDate");
					this.OnChangeDateChanged();
				}
			}
		}

		[Association(Name = "FK_C_CustomHouse_Country", Storage = "_Country", ThisKey = "CountryID", OtherKey = "CountryID", IsForeignKey = true)]
		public C_Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				C_Country previousValue = this._Country.Entity;
				if (((previousValue != value)
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.C_CustomHouse.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.C_CustomHouse.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}

		[Association(Name = "FK_C_CustomHouse_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CustomHouse.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CustomHouse.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_C_CustomHouseContact_CustomHouse", Storage = "_ContactPerson", ThisKey = "CustomHouseID", OtherKey = "CustomHouseID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CustomHouseContact> ContactPerson
		{
			get
			{
				return this._ContactPerson;
			}
			set
			{
				this._ContactPerson.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ContactPerson(C_CustomHouseContact entity)
		{
			this.SendPropertyChanging();
			entity.CustomHouse = this;
		}

		private void detach_ContactPerson(C_CustomHouseContact entity)
		{
			this.SendPropertyChanging();
			entity.CustomHouse = null;
		}
	}

	[Table(Name = "dbo.C_CustomHouseContact")]
	public partial class C_CustomHouseContact : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CustomHouseContactID;

		private int _CustomHouseID;

		private string _Title;

		private string _Phone;

		private string _Fax;

		private string _Email;

		private System.DateTime _LastModifiedDate;

		private bool _IsDeleted;

		private int _LastModifiedUserID;

		private EntityRef<C_CustomHouse> _CustomHouse;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCustomHouseContactIDChanging(int value);
		partial void OnCustomHouseContactIDChanged();
		partial void OnCustomHouseIDChanging(int value);
		partial void OnCustomHouseIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnPhoneChanging(string value);
		partial void OnPhoneChanged();
		partial void OnFaxChanging(string value);
		partial void OnFaxChanged();
		partial void OnEmailChanging(string value);
		partial void OnEmailChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		#endregion

		public C_CustomHouseContact()
		{
			this._CustomHouse = default(EntityRef<C_CustomHouse>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_CustomHouseContactID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CustomHouseContactID
		{
			get
			{
				return this._CustomHouseContactID;
			}
			set
			{
				if ((this._CustomHouseContactID != value))
				{
					this.OnCustomHouseContactIDChanging(value);
					this.SendPropertyChanging();
					this._CustomHouseContactID = value;
					this.SendPropertyChanged("CustomHouseContactID");
					this.OnCustomHouseContactIDChanged();
				}
			}
		}

		[Column(Storage = "_CustomHouseID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CustomHouseID
		{
			get
			{
				return this._CustomHouseID;
			}
			set
			{
				if ((this._CustomHouseID != value))
				{
					if (this._CustomHouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomHouseIDChanging(value);
					this.SendPropertyChanging();
					this._CustomHouseID = value;
					this.SendPropertyChanged("CustomHouseID");
					this.OnCustomHouseIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Phone", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}

		[Column(Storage = "_Fax", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}

		[Column(Storage = "_Email", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Association(Name = "FK_C_CustomHouseContact_CustomHouse", Storage = "_CustomHouse", ThisKey = "CustomHouseID", OtherKey = "CustomHouseID", IsForeignKey = true)]
		public C_CustomHouse CustomHouse
		{
			get
			{
				return this._CustomHouse.Entity;
			}
			set
			{
				C_CustomHouse previousValue = this._CustomHouse.Entity;
				if (((previousValue != value)
							|| (this._CustomHouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomHouse.Entity = null;
						previousValue.ContactPerson.Remove(this);
					}
					this._CustomHouse.Entity = value;
					if ((value != null))
					{
						value.ContactPerson.Add(this);
						this._CustomHouseID = value.CustomHouseID;
					}
					else
					{
						this._CustomHouseID = default(int);
					}
					this.SendPropertyChanged("CustomHouse");
				}
			}
		}

		[Association(Name = "FK_C_CustomHouseContact_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CustomHouseContact.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CustomHouseContact.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_DocumentSourceType")]
	public partial class C_DocumentSourceType : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _DocumentSourceTypeID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<CommodityDocument> _CommodityDocument;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnDocumentSourceTypeIDChanging(int value);
		partial void OnDocumentSourceTypeIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		#endregion

		public C_DocumentSourceType()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._CommodityDocument = new EntitySet<CommodityDocument>(new Action<CommodityDocument>(this.attach_CommodityDocument), new Action<CommodityDocument>(this.detach_CommodityDocument));
			OnCreated();
		}

		[Column(Storage = "_DocumentSourceTypeID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int DocumentSourceTypeID
		{
			get
			{
				return this._DocumentSourceTypeID;
			}
			set
			{
				if ((this._DocumentSourceTypeID != value))
				{
					this.OnDocumentSourceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentSourceTypeID = value;
					this.SendPropertyChanged("DocumentSourceTypeID");
					this.OnDocumentSourceTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Association(Name = "FK_C_DocumentSourceType_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_DocumentSourceType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_DocumentSourceType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_CommodityDocument_SourceType", Storage = "_CommodityDocument", ThisKey = "DocumentSourceTypeID", OtherKey = "SourceTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<CommodityDocument> CommodityDocument
		{
			get
			{
				return this._CommodityDocument;
			}
			set
			{
				this._CommodityDocument.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.SourceType = this;
		}

		private void detach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.SourceType = null;
		}
	}

	[Table(Name = "dbo.C_DocumentType")]
	public partial class C_DocumentType : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _DocumentTypeID;

		private string _Title;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private System.Guid _MasterObjectGUID;

		private string _SysName;

		private bool _IsDeleted;

		private EntitySet<C_CNCategoryDocument> _C_CNCategoryDocument;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnDocumentTypeIDChanging(int value);
		partial void OnDocumentTypeIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnMasterObjectGUIDChanging(System.Guid value);
		partial void OnMasterObjectGUIDChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public C_DocumentType()
		{
			this._C_CNCategoryDocument = new EntitySet<C_CNCategoryDocument>(new Action<C_CNCategoryDocument>(this.attach_C_CNCategoryDocument), new Action<C_CNCategoryDocument>(this.detach_C_CNCategoryDocument));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_DocumentTypeID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int DocumentTypeID
		{
			get
			{
				return this._DocumentTypeID;
			}
			set
			{
				if ((this._DocumentTypeID != value))
				{
					this.OnDocumentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentTypeID = value;
					this.SendPropertyChanged("DocumentTypeID");
					this.OnDocumentTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_MasterObjectGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryDocument_DocumentType", Storage = "_C_CNCategoryDocument", ThisKey = "DocumentTypeID", OtherKey = "DocumentTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CNCategoryDocument> C_CNCategoryDocument
		{
			get
			{
				return this._C_CNCategoryDocument;
			}
			set
			{
				this._C_CNCategoryDocument.Assign(value);
			}
		}

		[Association(Name = "FK_C_DocumentType_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_DocumentType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_DocumentType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_C_CNCategoryDocument(C_CNCategoryDocument entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = this;
		}

		private void detach_C_CNCategoryDocument(C_CNCategoryDocument entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = null;
		}
	}

	[Table(Name = "dbo.C_FGA")]
	public partial class C_FGA : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FGAID;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private bool _IsFormLic;

		private bool _IsViewLic;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private System.Guid _MasterObjectGUID;

		private string _ShortTitle;

		private bool _IsDeleted;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<C_FGADocument> _FGADocuments;

		private EntitySet<CommodityDocument> _CommodityDocument;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFGAIDChanging(int value);
		partial void OnFGAIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnIsFormLicChanging(bool value);
		partial void OnIsFormLicChanged();
		partial void OnIsViewLicChanging(bool value);
		partial void OnIsViewLicChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnMasterObjectGUIDChanging(System.Guid value);
		partial void OnMasterObjectGUIDChanged();
		partial void OnShortTitleChanging(string value);
		partial void OnShortTitleChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public C_FGA()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._FGADocuments = new EntitySet<C_FGADocument>(new Action<C_FGADocument>(this.attach_FGADocuments), new Action<C_FGADocument>(this.detach_FGADocuments));
			this._CommodityDocument = new EntitySet<CommodityDocument>(new Action<CommodityDocument>(this.attach_CommodityDocument), new Action<CommodityDocument>(this.detach_CommodityDocument));
			OnCreated();
		}

		[Column(Storage = "_FGAID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int FGAID
		{
			get
			{
				return this._FGAID;
			}
			set
			{
				if ((this._FGAID != value))
				{
					this.OnFGAIDChanging(value);
					this.SendPropertyChanging();
					this._FGAID = value;
					this.SendPropertyChanged("FGAID");
					this.OnFGAIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_IsFormLic", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsFormLic
		{
			get
			{
				return this._IsFormLic;
			}
			set
			{
				if ((this._IsFormLic != value))
				{
					this.OnIsFormLicChanging(value);
					this.SendPropertyChanging();
					this._IsFormLic = value;
					this.SendPropertyChanged("IsFormLic");
					this.OnIsFormLicChanged();
				}
			}
		}

		[Column(Storage = "_IsViewLic", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsViewLic
		{
			get
			{
				return this._IsViewLic;
			}
			set
			{
				if ((this._IsViewLic != value))
				{
					this.OnIsViewLicChanging(value);
					this.SendPropertyChanging();
					this._IsViewLic = value;
					this.SendPropertyChanged("IsViewLic");
					this.OnIsViewLicChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_MasterObjectGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}

		[Column(Storage = "_ShortTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ShortTitle
		{
			get
			{
				return this._ShortTitle;
			}
			set
			{
				if ((this._ShortTitle != value))
				{
					this.OnShortTitleChanging(value);
					this.SendPropertyChanging();
					this._ShortTitle = value;
					this.SendPropertyChanged("ShortTitle");
					this.OnShortTitleChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_C_FGA_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_FGA.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_FGA.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_C_FGADocument_FGA", Storage = "_FGADocuments", ThisKey = "FGAID", OtherKey = "FGAID", DeleteRule = "NO ACTION")]
		public EntitySet<C_FGADocument> FGADocuments
		{
			get
			{
				return this._FGADocuments;
			}
			set
			{
				this._FGADocuments.Assign(value);
			}
		}

		[Association(Name = "FK_CommodityDocument_FGA", Storage = "_CommodityDocument", ThisKey = "FGAID", OtherKey = "FGAID", DeleteRule = "NO ACTION")]
		public EntitySet<CommodityDocument> CommodityDocument
		{
			get
			{
				return this._CommodityDocument;
			}
			set
			{
				this._CommodityDocument.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_FGADocuments(C_FGADocument entity)
		{
			this.SendPropertyChanging();
			entity.FGA = this;
		}

		private void detach_FGADocuments(C_FGADocument entity)
		{
			this.SendPropertyChanging();
			entity.FGA = null;
		}

		private void attach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.FGA = this;
		}

		private void detach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.FGA = null;
		}
	}

	[Table(Name = "dbo.C_FGADocument")]
	public partial class C_FGADocument : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FGADocumentID;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private int _FGAID;

		private System.Guid _MasterObjectGUID;

		private System.Nullable<int> _DocumentFileID;

		private string _Code;

		private char _RequestFromSMEVType;

		private char _CheckType;

		private char _FromApplicantType;

		private string _PrintTitle;

		private string _DocNoRegexp;

		private string _DocNoRegexpMessage;

		private bool _QuantityControl;

		private System.Nullable<int> _UseTypeID;

		private bool _ForApplicant;

		private bool _ForCNCategory;

		private bool _IsFileRequired;

		private string _Properties;

		private bool _IsExclude;

		private bool _IsDeleted;

		private EntitySet<C_CNCategoryFGADocument> _C_CNCategoryFGADocument;

		private EntityRef<N_File> _Document;

		private EntityRef<C_FGA> _FGA;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<C_UseType> _UseType;

		private EntitySet<C_FGADocumentSigner> _Signers;

		private EntitySet<CommodityDocument> _CommodityDocument;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFGADocumentIDChanging(int value);
		partial void OnFGADocumentIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnFGAIDChanging(int value);
		partial void OnFGAIDChanged();
		partial void OnMasterObjectGUIDChanging(System.Guid value);
		partial void OnMasterObjectGUIDChanged();
		partial void OnDocumentFileIDChanging(System.Nullable<int> value);
		partial void OnDocumentFileIDChanged();
		partial void OnCodeChanging(string value);
		partial void OnCodeChanged();
		partial void OnRequestFromSMEVTypeChanging(char value);
		partial void OnRequestFromSMEVTypeChanged();
		partial void OnCheckTypeChanging(char value);
		partial void OnCheckTypeChanged();
		partial void OnFromApplicantTypeChanging(char value);
		partial void OnFromApplicantTypeChanged();
		partial void OnPrintTitleChanging(string value);
		partial void OnPrintTitleChanged();
		partial void OnDocNoRegexpChanging(string value);
		partial void OnDocNoRegexpChanged();
		partial void OnDocNoRegexpMessageChanging(string value);
		partial void OnDocNoRegexpMessageChanged();
		partial void OnQuantityControlChanging(bool value);
		partial void OnQuantityControlChanged();
		partial void OnUseTypeIDChanging(System.Nullable<int> value);
		partial void OnUseTypeIDChanged();
		partial void OnForApplicantChanging(bool value);
		partial void OnForApplicantChanged();
		partial void OnForCNCategoryChanging(bool value);
		partial void OnForCNCategoryChanged();
		partial void OnIsFileRequiredChanging(bool value);
		partial void OnIsFileRequiredChanged();
		partial void OnPropertiesChanging(string value);
		partial void OnPropertiesChanged();
		partial void OnIsExcludeChanging(bool value);
		partial void OnIsExcludeChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public C_FGADocument()
		{
			this._C_CNCategoryFGADocument = new EntitySet<C_CNCategoryFGADocument>(new Action<C_CNCategoryFGADocument>(this.attach_C_CNCategoryFGADocument), new Action<C_CNCategoryFGADocument>(this.detach_C_CNCategoryFGADocument));
			this._Document = default(EntityRef<N_File>);
			this._FGA = default(EntityRef<C_FGA>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._UseType = default(EntityRef<C_UseType>);
			this._Signers = new EntitySet<C_FGADocumentSigner>(new Action<C_FGADocumentSigner>(this.attach_Signers), new Action<C_FGADocumentSigner>(this.detach_Signers));
			this._CommodityDocument = new EntitySet<CommodityDocument>(new Action<CommodityDocument>(this.attach_CommodityDocument), new Action<CommodityDocument>(this.detach_CommodityDocument));
			OnCreated();
		}

		[Column(Storage = "_FGADocumentID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int FGADocumentID
		{
			get
			{
				return this._FGADocumentID;
			}
			set
			{
				if ((this._FGADocumentID != value))
				{
					this.OnFGADocumentIDChanging(value);
					this.SendPropertyChanging();
					this._FGADocumentID = value;
					this.SendPropertyChanged("FGADocumentID");
					this.OnFGADocumentIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_FGAID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int FGAID
		{
			get
			{
				return this._FGAID;
			}
			set
			{
				if ((this._FGAID != value))
				{
					if (this._FGA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFGAIDChanging(value);
					this.SendPropertyChanging();
					this._FGAID = value;
					this.SendPropertyChanged("FGAID");
					this.OnFGAIDChanged();
				}
			}
		}

		[Column(Storage = "_MasterObjectGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}

		[Column(Storage = "_DocumentFileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> DocumentFileID
		{
			get
			{
				return this._DocumentFileID;
			}
			set
			{
				if ((this._DocumentFileID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentFileIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentFileID = value;
					this.SendPropertyChanged("DocumentFileID");
					this.OnDocumentFileIDChanged();
				}
			}
		}

		[Column(Storage = "_Code", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}

		[Column(Storage = "_RequestFromSMEVType", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char RequestFromSMEVType
		{
			get
			{
				return this._RequestFromSMEVType;
			}
			set
			{
				if ((this._RequestFromSMEVType != value))
				{
					this.OnRequestFromSMEVTypeChanging(value);
					this.SendPropertyChanging();
					this._RequestFromSMEVType = value;
					this.SendPropertyChanged("RequestFromSMEVType");
					this.OnRequestFromSMEVTypeChanged();
				}
			}
		}

		[Column(Storage = "_CheckType", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char CheckType
		{
			get
			{
				return this._CheckType;
			}
			set
			{
				if ((this._CheckType != value))
				{
					this.OnCheckTypeChanging(value);
					this.SendPropertyChanging();
					this._CheckType = value;
					this.SendPropertyChanged("CheckType");
					this.OnCheckTypeChanged();
				}
			}
		}

		[Column(Storage = "_FromApplicantType", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char FromApplicantType
		{
			get
			{
				return this._FromApplicantType;
			}
			set
			{
				if ((this._FromApplicantType != value))
				{
					this.OnFromApplicantTypeChanging(value);
					this.SendPropertyChanging();
					this._FromApplicantType = value;
					this.SendPropertyChanged("FromApplicantType");
					this.OnFromApplicantTypeChanged();
				}
			}
		}

		[Column(Storage = "_PrintTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string PrintTitle
		{
			get
			{
				return this._PrintTitle;
			}
			set
			{
				if ((this._PrintTitle != value))
				{
					this.OnPrintTitleChanging(value);
					this.SendPropertyChanging();
					this._PrintTitle = value;
					this.SendPropertyChanged("PrintTitle");
					this.OnPrintTitleChanged();
				}
			}
		}

		[Column(Storage = "_DocNoRegexp", DbType = "NVarChar(100)", UpdateCheck = UpdateCheck.Never)]
		public string DocNoRegexp
		{
			get
			{
				return this._DocNoRegexp;
			}
			set
			{
				if ((this._DocNoRegexp != value))
				{
					this.OnDocNoRegexpChanging(value);
					this.SendPropertyChanging();
					this._DocNoRegexp = value;
					this.SendPropertyChanged("DocNoRegexp");
					this.OnDocNoRegexpChanged();
				}
			}
		}

		[Column(Storage = "_DocNoRegexpMessage", DbType = "NVarChar(255)", UpdateCheck = UpdateCheck.Never)]
		public string DocNoRegexpMessage
		{
			get
			{
				return this._DocNoRegexpMessage;
			}
			set
			{
				if ((this._DocNoRegexpMessage != value))
				{
					this.OnDocNoRegexpMessageChanging(value);
					this.SendPropertyChanging();
					this._DocNoRegexpMessage = value;
					this.SendPropertyChanged("DocNoRegexpMessage");
					this.OnDocNoRegexpMessageChanged();
				}
			}
		}

		[Column(Storage = "_QuantityControl", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool QuantityControl
		{
			get
			{
				return this._QuantityControl;
			}
			set
			{
				if ((this._QuantityControl != value))
				{
					this.OnQuantityControlChanging(value);
					this.SendPropertyChanging();
					this._QuantityControl = value;
					this.SendPropertyChanged("QuantityControl");
					this.OnQuantityControlChanged();
				}
			}
		}

		[Column(Storage = "_UseTypeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> UseTypeID
		{
			get
			{
				return this._UseTypeID;
			}
			set
			{
				if ((this._UseTypeID != value))
				{
					if (this._UseType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUseTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UseTypeID = value;
					this.SendPropertyChanged("UseTypeID");
					this.OnUseTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_ForApplicant", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool ForApplicant
		{
			get
			{
				return this._ForApplicant;
			}
			set
			{
				if ((this._ForApplicant != value))
				{
					this.OnForApplicantChanging(value);
					this.SendPropertyChanging();
					this._ForApplicant = value;
					this.SendPropertyChanged("ForApplicant");
					this.OnForApplicantChanged();
				}
			}
		}

		[Column(Storage = "_ForCNCategory", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool ForCNCategory
		{
			get
			{
				return this._ForCNCategory;
			}
			set
			{
				if ((this._ForCNCategory != value))
				{
					this.OnForCNCategoryChanging(value);
					this.SendPropertyChanging();
					this._ForCNCategory = value;
					this.SendPropertyChanged("ForCNCategory");
					this.OnForCNCategoryChanged();
				}
			}
		}

		[Column(Storage = "_IsFileRequired", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsFileRequired
		{
			get
			{
				return this._IsFileRequired;
			}
			set
			{
				if ((this._IsFileRequired != value))
				{
					this.OnIsFileRequiredChanging(value);
					this.SendPropertyChanging();
					this._IsFileRequired = value;
					this.SendPropertyChanged("IsFileRequired");
					this.OnIsFileRequiredChanged();
				}
			}
		}

		[Column(Storage = "_Properties", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Properties
		{
			get
			{
				return this._Properties;
			}
			set
			{
				if ((this._Properties != value))
				{
					this.OnPropertiesChanging(value);
					this.SendPropertyChanging();
					this._Properties = value;
					this.SendPropertyChanged("Properties");
					this.OnPropertiesChanged();
				}
			}
		}

		[Column(Storage = "_IsExclude", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsExclude
		{
			get
			{
				return this._IsExclude;
			}
			set
			{
				if ((this._IsExclude != value))
				{
					this.OnIsExcludeChanging(value);
					this.SendPropertyChanging();
					this._IsExclude = value;
					this.SendPropertyChanged("IsExclude");
					this.OnIsExcludeChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryFGADocument_FGADocument", Storage = "_C_CNCategoryFGADocument", ThisKey = "FGADocumentID", OtherKey = "FGADocumentID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CNCategoryFGADocument> C_CNCategoryFGADocument
		{
			get
			{
				return this._C_CNCategoryFGADocument;
			}
			set
			{
				this._C_CNCategoryFGADocument.Assign(value);
			}
		}

		[Association(Name = "FK_C_FGADocument_Document", Storage = "_Document", ThisKey = "DocumentFileID", OtherKey = "FileID", IsForeignKey = true)]
		public N_File Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				N_File previousValue = this._Document.Entity;
				if (((previousValue != value)
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.C_FGADocument.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.C_FGADocument.Add(this);
						this._DocumentFileID = value.FileID;
					}
					else
					{
						this._DocumentFileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}

		[Association(Name = "FK_C_FGADocument_FGA", Storage = "_FGA", ThisKey = "FGAID", OtherKey = "FGAID", IsForeignKey = true)]
		public C_FGA FGA
		{
			get
			{
				return this._FGA.Entity;
			}
			set
			{
				C_FGA previousValue = this._FGA.Entity;
				if (((previousValue != value)
							|| (this._FGA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FGA.Entity = null;
						previousValue.FGADocuments.Remove(this);
					}
					this._FGA.Entity = value;
					if ((value != null))
					{
						value.FGADocuments.Add(this);
						this._FGAID = value.FGAID;
					}
					else
					{
						this._FGAID = default(int);
					}
					this.SendPropertyChanged("FGA");
				}
			}
		}

		[Association(Name = "FK_C_FGADocument_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_FGADocument.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_FGADocument.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_C_FGADocument_UseType", Storage = "_UseType", ThisKey = "UseTypeID", OtherKey = "UseTypeID", IsForeignKey = true)]
		public C_UseType UseType
		{
			get
			{
				return this._UseType.Entity;
			}
			set
			{
				C_UseType previousValue = this._UseType.Entity;
				if (((previousValue != value)
							|| (this._UseType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UseType.Entity = null;
						previousValue.C_FGADocument.Remove(this);
					}
					this._UseType.Entity = value;
					if ((value != null))
					{
						value.C_FGADocument.Add(this);
						this._UseTypeID = value.UseTypeID;
					}
					else
					{
						this._UseTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UseType");
				}
			}
		}

		[Association(Name = "FK_C_FGADocumentSigner_FGADocument", Storage = "_Signers", ThisKey = "FGADocumentID", OtherKey = "FGADocumentID", DeleteRule = "NO ACTION")]
		public EntitySet<C_FGADocumentSigner> Signers
		{
			get
			{
				return this._Signers;
			}
			set
			{
				this._Signers.Assign(value);
			}
		}

		[Association(Name = "FK_CommodityDocument_FGADocument", Storage = "_CommodityDocument", ThisKey = "FGADocumentID", OtherKey = "FGADocumentID", DeleteRule = "NO ACTION")]
		public EntitySet<CommodityDocument> CommodityDocument
		{
			get
			{
				return this._CommodityDocument;
			}
			set
			{
				this._CommodityDocument.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_C_CNCategoryFGADocument(C_CNCategoryFGADocument entity)
		{
			this.SendPropertyChanging();
			entity.FGADocument = this;
		}

		private void detach_C_CNCategoryFGADocument(C_CNCategoryFGADocument entity)
		{
			this.SendPropertyChanging();
			entity.FGADocument = null;
		}

		private void attach_Signers(C_FGADocumentSigner entity)
		{
			this.SendPropertyChanging();
			entity.FGADocument = this;
		}

		private void detach_Signers(C_FGADocumentSigner entity)
		{
			this.SendPropertyChanging();
			entity.FGADocument = null;
		}

		private void attach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.FGADocument = this;
		}

		private void detach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.FGADocument = null;
		}
	}

	[Table(Name = "dbo.C_FGADocumentSigner")]
	public partial class C_FGADocumentSigner : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FGADocumentSignerID;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private int _FGADocumentID;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private System.Guid _MasterObjectGUID;

		private string _Post;

		private System.Nullable<int> _SignatureFileID;

		private string _Surname;

		private string _Firstname;

		private string _Patronymic;

		private string _Title;

		private bool _IsDeleted;

		private EntityRef<C_FGADocument> _FGADocument;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<N_File> _Signature;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFGADocumentSignerIDChanging(int value);
		partial void OnFGADocumentSignerIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnFGADocumentIDChanging(int value);
		partial void OnFGADocumentIDChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnMasterObjectGUIDChanging(System.Guid value);
		partial void OnMasterObjectGUIDChanged();
		partial void OnPostChanging(string value);
		partial void OnPostChanged();
		partial void OnSignatureFileIDChanging(System.Nullable<int> value);
		partial void OnSignatureFileIDChanged();
		partial void OnSurnameChanging(string value);
		partial void OnSurnameChanged();
		partial void OnFirstnameChanging(string value);
		partial void OnFirstnameChanged();
		partial void OnPatronymicChanging(string value);
		partial void OnPatronymicChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public C_FGADocumentSigner()
		{
			this._FGADocument = default(EntityRef<C_FGADocument>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Signature = default(EntityRef<N_File>);
			OnCreated();
		}

		[Column(Storage = "_FGADocumentSignerID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int FGADocumentSignerID
		{
			get
			{
				return this._FGADocumentSignerID;
			}
			set
			{
				if ((this._FGADocumentSignerID != value))
				{
					this.OnFGADocumentSignerIDChanging(value);
					this.SendPropertyChanging();
					this._FGADocumentSignerID = value;
					this.SendPropertyChanged("FGADocumentSignerID");
					this.OnFGADocumentSignerIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_FGADocumentID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int FGADocumentID
		{
			get
			{
				return this._FGADocumentID;
			}
			set
			{
				if ((this._FGADocumentID != value))
				{
					if (this._FGADocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFGADocumentIDChanging(value);
					this.SendPropertyChanging();
					this._FGADocumentID = value;
					this.SendPropertyChanged("FGADocumentID");
					this.OnFGADocumentIDChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_MasterObjectGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}

		[Column(Storage = "_Post", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				if ((this._Post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._Post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}

		[Column(Storage = "_SignatureFileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> SignatureFileID
		{
			get
			{
				return this._SignatureFileID;
			}
			set
			{
				if ((this._SignatureFileID != value))
				{
					if (this._Signature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSignatureFileIDChanging(value);
					this.SendPropertyChanging();
					this._SignatureFileID = value;
					this.SendPropertyChanged("SignatureFileID");
					this.OnSignatureFileIDChanged();
				}
			}
		}

		[Column(Storage = "_Surname", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}

		[Column(Storage = "_Firstname", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}

		[Column(Storage = "_Patronymic", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}

		[Column(Storage = "_Title", AutoSync = AutoSync.Always, DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(([Surname]+isnull((\' \'+substring([Firstname],(1),(1)))+\'.\',\'\'))+isnull((\'" +
			" \'+substring([Patronymic],(1),(1)))+\'.\',\'\'),\'\'))")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_C_FGADocumentSigner_FGADocument", Storage = "_FGADocument", ThisKey = "FGADocumentID", OtherKey = "FGADocumentID", IsForeignKey = true)]
		public C_FGADocument FGADocument
		{
			get
			{
				return this._FGADocument.Entity;
			}
			set
			{
				C_FGADocument previousValue = this._FGADocument.Entity;
				if (((previousValue != value)
							|| (this._FGADocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FGADocument.Entity = null;
						previousValue.Signers.Remove(this);
					}
					this._FGADocument.Entity = value;
					if ((value != null))
					{
						value.Signers.Add(this);
						this._FGADocumentID = value.FGADocumentID;
					}
					else
					{
						this._FGADocumentID = default(int);
					}
					this.SendPropertyChanged("FGADocument");
				}
			}
		}

		[Association(Name = "FK_C_FGADocumentSigner_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_FGADocumentSigner.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_FGADocumentSigner.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_C_FGADocumentSigner_Signature", Storage = "_Signature", ThisKey = "SignatureFileID", OtherKey = "FileID", IsForeignKey = true)]
		public N_File Signature
		{
			get
			{
				return this._Signature.Entity;
			}
			set
			{
				N_File previousValue = this._Signature.Entity;
				if (((previousValue != value)
							|| (this._Signature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Signature.Entity = null;
						previousValue.C_FGADocumentSigner.Remove(this);
					}
					this._Signature.Entity = value;
					if ((value != null))
					{
						value.C_FGADocumentSigner.Add(this);
						this._SignatureFileID = value.FileID;
					}
					else
					{
						this._SignatureFileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Signature");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_FtsCN")]
	public partial class C_FtsCN : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _C_FtsCNID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private string _Title;

		private string _Code;

		private string _FTSTitle;

		private string _MeasureCode1;

		private string _MeasureCode2;

		private string _MeasureCode3;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnC_FtsCNIDChanging(int value);
		partial void OnC_FtsCNIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnCodeChanging(string value);
		partial void OnCodeChanged();
		partial void OnFTSTitleChanging(string value);
		partial void OnFTSTitleChanged();
		partial void OnMeasureCode1Changing(string value);
		partial void OnMeasureCode1Changed();
		partial void OnMeasureCode2Changing(string value);
		partial void OnMeasureCode2Changed();
		partial void OnMeasureCode3Changing(string value);
		partial void OnMeasureCode3Changed();
		#endregion

		public C_FtsCN()
		{
			OnCreated();
		}

		[Column(Storage = "_C_FtsCNID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int C_FtsCNID
		{
			get
			{
				return this._C_FtsCNID;
			}
			set
			{
				if ((this._C_FtsCNID != value))
				{
					this.OnC_FtsCNIDChanging(value);
					this.SendPropertyChanging();
					this._C_FtsCNID = value;
					this.SendPropertyChanged("C_FtsCNID");
					this.OnC_FtsCNIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Code", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}

		[Column(Storage = "_FTSTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string FTSTitle
		{
			get
			{
				return this._FTSTitle;
			}
			set
			{
				if ((this._FTSTitle != value))
				{
					this.OnFTSTitleChanging(value);
					this.SendPropertyChanging();
					this._FTSTitle = value;
					this.SendPropertyChanged("FTSTitle");
					this.OnFTSTitleChanged();
				}
			}
		}

		[Column(Storage = "_MeasureCode1", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string MeasureCode1
		{
			get
			{
				return this._MeasureCode1;
			}
			set
			{
				if ((this._MeasureCode1 != value))
				{
					this.OnMeasureCode1Changing(value);
					this.SendPropertyChanging();
					this._MeasureCode1 = value;
					this.SendPropertyChanged("MeasureCode1");
					this.OnMeasureCode1Changed();
				}
			}
		}

		[Column(Storage = "_MeasureCode2", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string MeasureCode2
		{
			get
			{
				return this._MeasureCode2;
			}
			set
			{
				if ((this._MeasureCode2 != value))
				{
					this.OnMeasureCode2Changing(value);
					this.SendPropertyChanging();
					this._MeasureCode2 = value;
					this.SendPropertyChanged("MeasureCode2");
					this.OnMeasureCode2Changed();
				}
			}
		}

		[Column(Storage = "_MeasureCode3", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string MeasureCode3
		{
			get
			{
				return this._MeasureCode3;
			}
			set
			{
				if ((this._MeasureCode3 != value))
				{
					this.OnMeasureCode3Changing(value);
					this.SendPropertyChanging();
					this._MeasureCode3 = value;
					this.SendPropertyChanged("MeasureCode3");
					this.OnMeasureCode3Changed();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_FtsCountry")]
	public partial class C_FtsCountry : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FtsCountryID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private string _Title;

		private string _Code;

		private string _Alpha2;

		private string _Alpha3;

		private string _ShortTitle;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFtsCountryIDChanging(int value);
		partial void OnFtsCountryIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnCodeChanging(string value);
		partial void OnCodeChanged();
		partial void OnAlpha2Changing(string value);
		partial void OnAlpha2Changed();
		partial void OnAlpha3Changing(string value);
		partial void OnAlpha3Changed();
		partial void OnShortTitleChanging(string value);
		partial void OnShortTitleChanged();
		#endregion

		public C_FtsCountry()
		{
			OnCreated();
		}

		[Column(Storage = "_FtsCountryID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int FtsCountryID
		{
			get
			{
				return this._FtsCountryID;
			}
			set
			{
				if ((this._FtsCountryID != value))
				{
					this.OnFtsCountryIDChanging(value);
					this.SendPropertyChanging();
					this._FtsCountryID = value;
					this.SendPropertyChanged("FtsCountryID");
					this.OnFtsCountryIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Code", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}

		[Column(Storage = "_Alpha2", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Alpha2
		{
			get
			{
				return this._Alpha2;
			}
			set
			{
				if ((this._Alpha2 != value))
				{
					this.OnAlpha2Changing(value);
					this.SendPropertyChanging();
					this._Alpha2 = value;
					this.SendPropertyChanged("Alpha2");
					this.OnAlpha2Changed();
				}
			}
		}

		[Column(Storage = "_Alpha3", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Alpha3
		{
			get
			{
				return this._Alpha3;
			}
			set
			{
				if ((this._Alpha3 != value))
				{
					this.OnAlpha3Changing(value);
					this.SendPropertyChanging();
					this._Alpha3 = value;
					this.SendPropertyChanged("Alpha3");
					this.OnAlpha3Changed();
				}
			}
		}

		[Column(Storage = "_ShortTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ShortTitle
		{
			get
			{
				return this._ShortTitle;
			}
			set
			{
				if ((this._ShortTitle != value))
				{
					this.OnShortTitleChanging(value);
					this.SendPropertyChanging();
					this._ShortTitle = value;
					this.SendPropertyChanged("ShortTitle");
					this.OnShortTitleChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_FtsCustomHouse")]
	public partial class C_FtsCustomHouse : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FtsCustomHouseID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private string _Title;

		private string _FullTitle;

		private string _OKPO;

		private string _OGRN;

		private string _INN;

		private string _KPP;

		private string _Address;

		private string _CountryCode;

		private string _OKATO;

		private string _City;

		private string _Phone;

		private string _Fax;

		private string _Email;

		private string _Code;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFtsCustomHouseIDChanging(int value);
		partial void OnFtsCustomHouseIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnFullTitleChanging(string value);
		partial void OnFullTitleChanged();
		partial void OnOKPOChanging(string value);
		partial void OnOKPOChanged();
		partial void OnOGRNChanging(string value);
		partial void OnOGRNChanged();
		partial void OnINNChanging(string value);
		partial void OnINNChanged();
		partial void OnKPPChanging(string value);
		partial void OnKPPChanged();
		partial void OnAddressChanging(string value);
		partial void OnAddressChanged();
		partial void OnCountryCodeChanging(string value);
		partial void OnCountryCodeChanged();
		partial void OnOKATOChanging(string value);
		partial void OnOKATOChanged();
		partial void OnCityChanging(string value);
		partial void OnCityChanged();
		partial void OnPhoneChanging(string value);
		partial void OnPhoneChanged();
		partial void OnFaxChanging(string value);
		partial void OnFaxChanged();
		partial void OnEmailChanging(string value);
		partial void OnEmailChanged();
		partial void OnCodeChanging(string value);
		partial void OnCodeChanged();
		#endregion

		public C_FtsCustomHouse()
		{
			OnCreated();
		}

		[Column(Storage = "_FtsCustomHouseID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int FtsCustomHouseID
		{
			get
			{
				return this._FtsCustomHouseID;
			}
			set
			{
				if ((this._FtsCustomHouseID != value))
				{
					this.OnFtsCustomHouseIDChanging(value);
					this.SendPropertyChanging();
					this._FtsCustomHouseID = value;
					this.SendPropertyChanged("FtsCustomHouseID");
					this.OnFtsCustomHouseIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_FullTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string FullTitle
		{
			get
			{
				return this._FullTitle;
			}
			set
			{
				if ((this._FullTitle != value))
				{
					this.OnFullTitleChanging(value);
					this.SendPropertyChanging();
					this._FullTitle = value;
					this.SendPropertyChanged("FullTitle");
					this.OnFullTitleChanged();
				}
			}
		}

		[Column(Storage = "_OKPO", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string OKPO
		{
			get
			{
				return this._OKPO;
			}
			set
			{
				if ((this._OKPO != value))
				{
					this.OnOKPOChanging(value);
					this.SendPropertyChanging();
					this._OKPO = value;
					this.SendPropertyChanged("OKPO");
					this.OnOKPOChanged();
				}
			}
		}

		[Column(Storage = "_OGRN", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string OGRN
		{
			get
			{
				return this._OGRN;
			}
			set
			{
				if ((this._OGRN != value))
				{
					this.OnOGRNChanging(value);
					this.SendPropertyChanging();
					this._OGRN = value;
					this.SendPropertyChanged("OGRN");
					this.OnOGRNChanged();
				}
			}
		}

		[Column(Storage = "_INN", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string INN
		{
			get
			{
				return this._INN;
			}
			set
			{
				if ((this._INN != value))
				{
					this.OnINNChanging(value);
					this.SendPropertyChanging();
					this._INN = value;
					this.SendPropertyChanged("INN");
					this.OnINNChanged();
				}
			}
		}

		[Column(Storage = "_KPP", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string KPP
		{
			get
			{
				return this._KPP;
			}
			set
			{
				if ((this._KPP != value))
				{
					this.OnKPPChanging(value);
					this.SendPropertyChanging();
					this._KPP = value;
					this.SendPropertyChanged("KPP");
					this.OnKPPChanged();
				}
			}
		}

		[Column(Storage = "_Address", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}

		[Column(Storage = "_CountryCode", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}

		[Column(Storage = "_OKATO", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string OKATO
		{
			get
			{
				return this._OKATO;
			}
			set
			{
				if ((this._OKATO != value))
				{
					this.OnOKATOChanging(value);
					this.SendPropertyChanging();
					this._OKATO = value;
					this.SendPropertyChanged("OKATO");
					this.OnOKATOChanged();
				}
			}
		}

		[Column(Storage = "_City", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}

		[Column(Storage = "_Phone", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}

		[Column(Storage = "_Fax", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}

		[Column(Storage = "_Email", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}

		[Column(Storage = "_Code", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_Help")]
	public partial class C_Help : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _HelpID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Text;

		private string _FormViewFullSysName;

		private string _Title;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnHelpIDChanging(int value);
		partial void OnHelpIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTextChanging(string value);
		partial void OnTextChanged();
		partial void OnFormViewFullSysNameChanging(string value);
		partial void OnFormViewFullSysNameChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		#endregion

		public C_Help()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_HelpID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int HelpID
		{
			get
			{
				return this._HelpID;
			}
			set
			{
				if ((this._HelpID != value))
				{
					this.OnHelpIDChanging(value);
					this.SendPropertyChanging();
					this._HelpID = value;
					this.SendPropertyChanged("HelpID");
					this.OnHelpIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Text", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}

		[Column(Storage = "_FormViewFullSysName", DbType = "NVarChar(150) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string FormViewFullSysName
		{
			get
			{
				return this._FormViewFullSysName;
			}
			set
			{
				if ((this._FormViewFullSysName != value))
				{
					this.OnFormViewFullSysNameChanging(value);
					this.SendPropertyChanging();
					this._FormViewFullSysName = value;
					this.SendPropertyChanged("FormViewFullSysName");
					this.OnFormViewFullSysNameChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(250)", UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Association(Name = "FK_C_Help_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_Help.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_Help.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_Language")]
	public partial class C_Language : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private string _LanguageCode;

		private string _Title;

		private bool _IsDefault;

		private EntitySet<ArticleData> _ArticleData;

		private EntitySet<DocumentData> _DocumentData;

		private EntitySet<N_TextResourceData> _N_TextResourceData;

		private EntitySet<NewsData> _NewsData;

		private EntitySet<RFSubjectData> _RFSubjectData;

		private EntitySet<SimplePageData> _SimplePageData;

		private EntitySet<SiteObjectData> _SiteObjectData;

		private EntitySet<SiteSectionData> _SiteSectionData;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnIsDefaultChanging(bool value);
		partial void OnIsDefaultChanged();
		#endregion

		public C_Language()
		{
			this._ArticleData = new EntitySet<ArticleData>(new Action<ArticleData>(this.attach_ArticleData), new Action<ArticleData>(this.detach_ArticleData));
			this._DocumentData = new EntitySet<DocumentData>(new Action<DocumentData>(this.attach_DocumentData), new Action<DocumentData>(this.detach_DocumentData));
			this._N_TextResourceData = new EntitySet<N_TextResourceData>(new Action<N_TextResourceData>(this.attach_N_TextResourceData), new Action<N_TextResourceData>(this.detach_N_TextResourceData));
			this._NewsData = new EntitySet<NewsData>(new Action<NewsData>(this.attach_NewsData), new Action<NewsData>(this.detach_NewsData));
			this._RFSubjectData = new EntitySet<RFSubjectData>(new Action<RFSubjectData>(this.attach_RFSubjectData), new Action<RFSubjectData>(this.detach_RFSubjectData));
			this._SimplePageData = new EntitySet<SimplePageData>(new Action<SimplePageData>(this.attach_SimplePageData), new Action<SimplePageData>(this.detach_SimplePageData));
			this._SiteObjectData = new EntitySet<SiteObjectData>(new Action<SiteObjectData>(this.attach_SiteObjectData), new Action<SiteObjectData>(this.detach_SiteObjectData));
			this._SiteSectionData = new EntitySet<SiteSectionData>(new Action<SiteSectionData>(this.attach_SiteSectionData), new Action<SiteSectionData>(this.detach_SiteSectionData));
			OnCreated();
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_IsDefault", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}

		[Association(Name = "FK_ArticleData_C_Language", Storage = "_ArticleData", ThisKey = "LanguageCode", OtherKey = "LanguageCode", DeleteRule = "CASCADE")]
		public EntitySet<ArticleData> ArticleData
		{
			get
			{
				return this._ArticleData;
			}
			set
			{
				this._ArticleData.Assign(value);
			}
		}

		[Association(Name = "FK_DocumentData_C_Language", Storage = "_DocumentData", ThisKey = "LanguageCode", OtherKey = "LanguageCode", DeleteRule = "CASCADE")]
		public EntitySet<DocumentData> DocumentData
		{
			get
			{
				return this._DocumentData;
			}
			set
			{
				this._DocumentData.Assign(value);
			}
		}

		[Association(Name = "FK_N_TextResourceData_C_Language", Storage = "_N_TextResourceData", ThisKey = "LanguageCode", OtherKey = "LanguageCode", DeleteRule = "CASCADE")]
		public EntitySet<N_TextResourceData> N_TextResourceData
		{
			get
			{
				return this._N_TextResourceData;
			}
			set
			{
				this._N_TextResourceData.Assign(value);
			}
		}

		[Association(Name = "FK_NewsData_C_Language", Storage = "_NewsData", ThisKey = "LanguageCode", OtherKey = "LanguageCode", DeleteRule = "CASCADE")]
		public EntitySet<NewsData> NewsData
		{
			get
			{
				return this._NewsData;
			}
			set
			{
				this._NewsData.Assign(value);
			}
		}

		[Association(Name = "FK_RFSubjectData_C_Language", Storage = "_RFSubjectData", ThisKey = "LanguageCode", OtherKey = "LanguageCode", DeleteRule = "CASCADE")]
		public EntitySet<RFSubjectData> RFSubjectData
		{
			get
			{
				return this._RFSubjectData;
			}
			set
			{
				this._RFSubjectData.Assign(value);
			}
		}

		[Association(Name = "FK_SimplePageData_C_Language", Storage = "_SimplePageData", ThisKey = "LanguageCode", OtherKey = "LanguageCode", DeleteRule = "CASCADE")]
		public EntitySet<SimplePageData> SimplePageData
		{
			get
			{
				return this._SimplePageData;
			}
			set
			{
				this._SimplePageData.Assign(value);
			}
		}

		[Association(Name = "FK_SiteObjectData_C_Language", Storage = "_SiteObjectData", ThisKey = "LanguageCode", OtherKey = "LanguageCode", DeleteRule = "CASCADE")]
		public EntitySet<SiteObjectData> SiteObjectData
		{
			get
			{
				return this._SiteObjectData;
			}
			set
			{
				this._SiteObjectData.Assign(value);
			}
		}

		[Association(Name = "FK_SiteSectionData_C_Language", Storage = "_SiteSectionData", ThisKey = "LanguageCode", OtherKey = "LanguageCode", DeleteRule = "CASCADE")]
		public EntitySet<SiteSectionData> SiteSectionData
		{
			get
			{
				return this._SiteSectionData;
			}
			set
			{
				this._SiteSectionData.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ArticleData(ArticleData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = this;
		}

		private void detach_ArticleData(ArticleData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = null;
		}

		private void attach_DocumentData(DocumentData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = this;
		}

		private void detach_DocumentData(DocumentData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = null;
		}

		private void attach_N_TextResourceData(N_TextResourceData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = this;
		}

		private void detach_N_TextResourceData(N_TextResourceData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = null;
		}

		private void attach_NewsData(NewsData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = this;
		}

		private void detach_NewsData(NewsData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = null;
		}

		private void attach_RFSubjectData(RFSubjectData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = this;
		}

		private void detach_RFSubjectData(RFSubjectData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = null;
		}

		private void attach_SimplePageData(SimplePageData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = this;
		}

		private void detach_SimplePageData(SimplePageData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = null;
		}

		private void attach_SiteObjectData(SiteObjectData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = this;
		}

		private void detach_SiteObjectData(SiteObjectData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = null;
		}

		private void attach_SiteSectionData(SiteSectionData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = this;
		}

		private void detach_SiteSectionData(SiteSectionData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = null;
		}
	}

	[Table(Name = "dbo.C_LawOrgan")]
	public partial class C_LawOrgan : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _LawOrganID;

		private string _Title;

		private string _ShortTitle;

		private System.DateTime _LastModifiedDate;

		private bool _IsDeleted;

		private int _LastModifiedUserID;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<C_LegalDocument> _C_LegalDocument;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnLawOrganIDChanging(int value);
		partial void OnLawOrganIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnShortTitleChanging(string value);
		partial void OnShortTitleChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		#endregion

		public C_LawOrgan()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._C_LegalDocument = new EntitySet<C_LegalDocument>(new Action<C_LegalDocument>(this.attach_C_LegalDocument), new Action<C_LegalDocument>(this.detach_C_LegalDocument));
			OnCreated();
		}

		[Column(Storage = "_LawOrganID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int LawOrganID
		{
			get
			{
				return this._LawOrganID;
			}
			set
			{
				if ((this._LawOrganID != value))
				{
					this.OnLawOrganIDChanging(value);
					this.SendPropertyChanging();
					this._LawOrganID = value;
					this.SendPropertyChanged("LawOrganID");
					this.OnLawOrganIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_ShortTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ShortTitle
		{
			get
			{
				return this._ShortTitle;
			}
			set
			{
				if ((this._ShortTitle != value))
				{
					this.OnShortTitleChanging(value);
					this.SendPropertyChanging();
					this._ShortTitle = value;
					this.SendPropertyChanged("ShortTitle");
					this.OnShortTitleChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Association(Name = "FK_C_LawOrgan_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_LawOrgan.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_LawOrgan.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_C_LegalDocument_LawOrgan", Storage = "_C_LegalDocument", ThisKey = "LawOrganID", OtherKey = "LawOrganID", DeleteRule = "NO ACTION")]
		public EntitySet<C_LegalDocument> C_LegalDocument
		{
			get
			{
				return this._C_LegalDocument;
			}
			set
			{
				this._C_LegalDocument.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_C_LegalDocument(C_LegalDocument entity)
		{
			this.SendPropertyChanging();
			entity.LawOrgan = this;
		}

		private void detach_C_LegalDocument(C_LegalDocument entity)
		{
			this.SendPropertyChanging();
			entity.LawOrgan = null;
		}
	}

	[Table(Name = "dbo.C_LegalDocument")]
	public partial class C_LegalDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _LegalDocumentID;

		private string _ArticleNo;

		private string _ArticleText;

		private System.Nullable<System.DateTime> _BeginDate;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _No;

		private string _Title;

		private int _TypeID;

		private System.Nullable<System.DateTime> _DocDate;

		private System.Nullable<int> _LawOrganID;

		private System.Nullable<System.DateTime> _EndDate;

		private bool _IsPublished;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<C_LawOrgan> _LawOrgan;

		private EntityRef<C_LegalDocumentType> _Type;

		private EntitySet<C_LegalDocumentCNCategories> _C_LegalDocumentCNCategories;

		private EntitySet<C_LegalDocumentCNGroups> _C_LegalDocumentCNGroups;

		private EntitySet<C_LegalDocumentRestrictions> _C_LegalDocumentRestrictions;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnLegalDocumentIDChanging(int value);
		partial void OnLegalDocumentIDChanged();
		partial void OnArticleNoChanging(string value);
		partial void OnArticleNoChanged();
		partial void OnArticleTextChanging(string value);
		partial void OnArticleTextChanged();
		partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
		partial void OnBeginDateChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnNoChanging(string value);
		partial void OnNoChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnTypeIDChanging(int value);
		partial void OnTypeIDChanged();
		partial void OnDocDateChanging(System.Nullable<System.DateTime> value);
		partial void OnDocDateChanged();
		partial void OnLawOrganIDChanging(System.Nullable<int> value);
		partial void OnLawOrganIDChanged();
		partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
		partial void OnEndDateChanged();
		partial void OnIsPublishedChanging(bool value);
		partial void OnIsPublishedChanged();
		#endregion

		public C_LegalDocument()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._LawOrgan = default(EntityRef<C_LawOrgan>);
			this._Type = default(EntityRef<C_LegalDocumentType>);
			this._C_LegalDocumentCNCategories = new EntitySet<C_LegalDocumentCNCategories>(new Action<C_LegalDocumentCNCategories>(this.attach_C_LegalDocumentCNCategories), new Action<C_LegalDocumentCNCategories>(this.detach_C_LegalDocumentCNCategories));
			this._C_LegalDocumentCNGroups = new EntitySet<C_LegalDocumentCNGroups>(new Action<C_LegalDocumentCNGroups>(this.attach_C_LegalDocumentCNGroups), new Action<C_LegalDocumentCNGroups>(this.detach_C_LegalDocumentCNGroups));
			this._C_LegalDocumentRestrictions = new EntitySet<C_LegalDocumentRestrictions>(new Action<C_LegalDocumentRestrictions>(this.attach_C_LegalDocumentRestrictions), new Action<C_LegalDocumentRestrictions>(this.detach_C_LegalDocumentRestrictions));
			OnCreated();
		}

		[Column(Storage = "_LegalDocumentID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int LegalDocumentID
		{
			get
			{
				return this._LegalDocumentID;
			}
			set
			{
				if ((this._LegalDocumentID != value))
				{
					this.OnLegalDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._LegalDocumentID = value;
					this.SendPropertyChanged("LegalDocumentID");
					this.OnLegalDocumentIDChanged();
				}
			}
		}

		[Column(Storage = "_ArticleNo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ArticleNo
		{
			get
			{
				return this._ArticleNo;
			}
			set
			{
				if ((this._ArticleNo != value))
				{
					this.OnArticleNoChanging(value);
					this.SendPropertyChanging();
					this._ArticleNo = value;
					this.SendPropertyChanged("ArticleNo");
					this.OnArticleNoChanged();
				}
			}
		}

		[Column(Storage = "_ArticleText", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ArticleText
		{
			get
			{
				return this._ArticleText;
			}
			set
			{
				if ((this._ArticleText != value))
				{
					this.OnArticleTextChanging(value);
					this.SendPropertyChanging();
					this._ArticleText = value;
					this.SendPropertyChanged("ArticleText");
					this.OnArticleTextChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_No", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string No
		{
			get
			{
				return this._No;
			}
			set
			{
				if ((this._No != value))
				{
					this.OnNoChanging(value);
					this.SendPropertyChanging();
					this._No = value;
					this.SendPropertyChanged("No");
					this.OnNoChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_TypeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_DocDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this.OnDocDateChanging(value);
					this.SendPropertyChanging();
					this._DocDate = value;
					this.SendPropertyChanged("DocDate");
					this.OnDocDateChanged();
				}
			}
		}

		[Column(Storage = "_LawOrganID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> LawOrganID
		{
			get
			{
				return this._LawOrganID;
			}
			set
			{
				if ((this._LawOrganID != value))
				{
					if (this._LawOrgan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLawOrganIDChanging(value);
					this.SendPropertyChanging();
					this._LawOrganID = value;
					this.SendPropertyChanged("LawOrganID");
					this.OnLawOrganIDChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_IsPublished", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsPublished
		{
			get
			{
				return this._IsPublished;
			}
			set
			{
				if ((this._IsPublished != value))
				{
					this.OnIsPublishedChanging(value);
					this.SendPropertyChanging();
					this._IsPublished = value;
					this.SendPropertyChanged("IsPublished");
					this.OnIsPublishedChanged();
				}
			}
		}

		[Association(Name = "FK_C_LegalDocument_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_LegalDocument.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocument.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_C_LegalDocument_LawOrgan", Storage = "_LawOrgan", ThisKey = "LawOrganID", OtherKey = "LawOrganID", IsForeignKey = true)]
		public C_LawOrgan LawOrgan
		{
			get
			{
				return this._LawOrgan.Entity;
			}
			set
			{
				C_LawOrgan previousValue = this._LawOrgan.Entity;
				if (((previousValue != value)
							|| (this._LawOrgan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LawOrgan.Entity = null;
						previousValue.C_LegalDocument.Remove(this);
					}
					this._LawOrgan.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocument.Add(this);
						this._LawOrganID = value.LawOrganID;
					}
					else
					{
						this._LawOrganID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LawOrgan");
				}
			}
		}

		[Association(Name = "FK_C_LegalDocument_Type", Storage = "_Type", ThisKey = "TypeID", OtherKey = "LegalDocumentTypeID", IsForeignKey = true)]
		public C_LegalDocumentType Type
		{
			get
			{
				return this._Type.Entity;
			}
			set
			{
				C_LegalDocumentType previousValue = this._Type.Entity;
				if (((previousValue != value)
							|| (this._Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type.Entity = null;
						previousValue.C_LegalDocument.Remove(this);
					}
					this._Type.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocument.Add(this);
						this._TypeID = value.LegalDocumentTypeID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("Type");
				}
			}
		}

		[Association(Name = "FK_C_LegalDocumentCNCategories_C_LegalDocument", Storage = "_C_LegalDocumentCNCategories", ThisKey = "LegalDocumentID", OtherKey = "LegalDocumentID", DeleteRule = "CASCADE")]
		public EntitySet<C_LegalDocumentCNCategories> C_LegalDocumentCNCategories
		{
			get
			{
				return this._C_LegalDocumentCNCategories;
			}
			set
			{
				this._C_LegalDocumentCNCategories.Assign(value);
			}
		}

		[Association(Name = "FK_C_LegalDocumentCNGroups_C_LegalDocument", Storage = "_C_LegalDocumentCNGroups", ThisKey = "LegalDocumentID", OtherKey = "LegalDocumentID", DeleteRule = "CASCADE")]
		public EntitySet<C_LegalDocumentCNGroups> C_LegalDocumentCNGroups
		{
			get
			{
				return this._C_LegalDocumentCNGroups;
			}
			set
			{
				this._C_LegalDocumentCNGroups.Assign(value);
			}
		}

		[Association(Name = "FK_C_LegalDocumentRestrictions_C_LegalDocument", Storage = "_C_LegalDocumentRestrictions", ThisKey = "LegalDocumentID", OtherKey = "LegalDocumentID", DeleteRule = "CASCADE")]
		public EntitySet<C_LegalDocumentRestrictions> C_LegalDocumentRestrictions
		{
			get
			{
				return this._C_LegalDocumentRestrictions;
			}
			set
			{
				this._C_LegalDocumentRestrictions.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_C_LegalDocumentCNCategories(C_LegalDocumentCNCategories entity)
		{
			this.SendPropertyChanging();
			entity.C_LegalDocument = this;
		}

		private void detach_C_LegalDocumentCNCategories(C_LegalDocumentCNCategories entity)
		{
			this.SendPropertyChanging();
			entity.C_LegalDocument = null;
		}

		private void attach_C_LegalDocumentCNGroups(C_LegalDocumentCNGroups entity)
		{
			this.SendPropertyChanging();
			entity.C_LegalDocument = this;
		}

		private void detach_C_LegalDocumentCNGroups(C_LegalDocumentCNGroups entity)
		{
			this.SendPropertyChanging();
			entity.C_LegalDocument = null;
		}

		private void attach_C_LegalDocumentRestrictions(C_LegalDocumentRestrictions entity)
		{
			this.SendPropertyChanging();
			entity.C_LegalDocument = this;
		}

		private void detach_C_LegalDocumentRestrictions(C_LegalDocumentRestrictions entity)
		{
			this.SendPropertyChanging();
			entity.C_LegalDocument = null;
		}
	}

	[Table(Name = "dbo.C_LegalDocumentCNCategories")]
	public partial class C_LegalDocumentCNCategories : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _LegalDocumentID;

		private int _CNCategoriesID;

		private EntityRef<C_LegalDocument> _C_LegalDocument;

		private EntityRef<C_CNCategory> _CNCategories;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnLegalDocumentIDChanging(int value);
		partial void OnLegalDocumentIDChanged();
		partial void OnCNCategoriesIDChanging(int value);
		partial void OnCNCategoriesIDChanged();
		#endregion

		public C_LegalDocumentCNCategories()
		{
			this._C_LegalDocument = default(EntityRef<C_LegalDocument>);
			this._CNCategories = default(EntityRef<C_CNCategory>);
			OnCreated();
		}

		[Column(Storage = "_LegalDocumentID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int LegalDocumentID
		{
			get
			{
				return this._LegalDocumentID;
			}
			set
			{
				if ((this._LegalDocumentID != value))
				{
					if (this._C_LegalDocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLegalDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._LegalDocumentID = value;
					this.SendPropertyChanged("LegalDocumentID");
					this.OnLegalDocumentIDChanged();
				}
			}
		}

		[Column(Storage = "_CNCategoriesID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CNCategoriesID
		{
			get
			{
				return this._CNCategoriesID;
			}
			set
			{
				if ((this._CNCategoriesID != value))
				{
					if (this._CNCategories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoriesIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoriesID = value;
					this.SendPropertyChanged("CNCategoriesID");
					this.OnCNCategoriesIDChanged();
				}
			}
		}

		[Association(Name = "FK_C_LegalDocumentCNCategories_C_LegalDocument", Storage = "_C_LegalDocument", ThisKey = "LegalDocumentID", OtherKey = "LegalDocumentID", IsForeignKey = true, DeleteOnNull = true)]
		public C_LegalDocument C_LegalDocument
		{
			get
			{
				return this._C_LegalDocument.Entity;
			}
			set
			{
				C_LegalDocument previousValue = this._C_LegalDocument.Entity;
				if (((previousValue != value)
							|| (this._C_LegalDocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_LegalDocument.Entity = null;
						previousValue.C_LegalDocumentCNCategories.Remove(this);
					}
					this._C_LegalDocument.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocumentCNCategories.Add(this);
						this._LegalDocumentID = value.LegalDocumentID;
					}
					else
					{
						this._LegalDocumentID = default(int);
					}
					this.SendPropertyChanged("C_LegalDocument");
				}
			}
		}

		[Association(Name = "FK_C_LegalDocumentCNCategories_CNCategories", Storage = "_CNCategories", ThisKey = "CNCategoriesID", OtherKey = "CNCategoryID", IsForeignKey = true, DeleteOnNull = true)]
		public C_CNCategory CNCategories
		{
			get
			{
				return this._CNCategories.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._CNCategories.Entity;
				if (((previousValue != value)
							|| (this._CNCategories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategories.Entity = null;
						previousValue.C_LegalDocumentCNCategories.Remove(this);
					}
					this._CNCategories.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocumentCNCategories.Add(this);
						this._CNCategoriesID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoriesID = default(int);
					}
					this.SendPropertyChanged("CNCategories");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_LegalDocumentCNGroups")]
	public partial class C_LegalDocumentCNGroups : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _LegalDocumentID;

		private int _CNGroupsID;

		private EntityRef<C_LegalDocument> _C_LegalDocument;

		private EntityRef<C_CNGroup> _CNGroups;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnLegalDocumentIDChanging(int value);
		partial void OnLegalDocumentIDChanged();
		partial void OnCNGroupsIDChanging(int value);
		partial void OnCNGroupsIDChanged();
		#endregion

		public C_LegalDocumentCNGroups()
		{
			this._C_LegalDocument = default(EntityRef<C_LegalDocument>);
			this._CNGroups = default(EntityRef<C_CNGroup>);
			OnCreated();
		}

		[Column(Storage = "_LegalDocumentID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int LegalDocumentID
		{
			get
			{
				return this._LegalDocumentID;
			}
			set
			{
				if ((this._LegalDocumentID != value))
				{
					if (this._C_LegalDocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLegalDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._LegalDocumentID = value;
					this.SendPropertyChanged("LegalDocumentID");
					this.OnLegalDocumentIDChanged();
				}
			}
		}

		[Column(Storage = "_CNGroupsID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int CNGroupsID
		{
			get
			{
				return this._CNGroupsID;
			}
			set
			{
				if ((this._CNGroupsID != value))
				{
					if (this._CNGroups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNGroupsIDChanging(value);
					this.SendPropertyChanging();
					this._CNGroupsID = value;
					this.SendPropertyChanged("CNGroupsID");
					this.OnCNGroupsIDChanged();
				}
			}
		}

		[Association(Name = "FK_C_LegalDocumentCNGroups_C_LegalDocument", Storage = "_C_LegalDocument", ThisKey = "LegalDocumentID", OtherKey = "LegalDocumentID", IsForeignKey = true, DeleteOnNull = true)]
		public C_LegalDocument C_LegalDocument
		{
			get
			{
				return this._C_LegalDocument.Entity;
			}
			set
			{
				C_LegalDocument previousValue = this._C_LegalDocument.Entity;
				if (((previousValue != value)
							|| (this._C_LegalDocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_LegalDocument.Entity = null;
						previousValue.C_LegalDocumentCNGroups.Remove(this);
					}
					this._C_LegalDocument.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocumentCNGroups.Add(this);
						this._LegalDocumentID = value.LegalDocumentID;
					}
					else
					{
						this._LegalDocumentID = default(int);
					}
					this.SendPropertyChanged("C_LegalDocument");
				}
			}
		}

		[Association(Name = "FK_C_LegalDocumentCNGroups_CNGroups", Storage = "_CNGroups", ThisKey = "CNGroupsID", OtherKey = "CNGroupID", IsForeignKey = true, DeleteOnNull = true)]
		public C_CNGroup CNGroups
		{
			get
			{
				return this._CNGroups.Entity;
			}
			set
			{
				C_CNGroup previousValue = this._CNGroups.Entity;
				if (((previousValue != value)
							|| (this._CNGroups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNGroups.Entity = null;
						previousValue.C_LegalDocumentCNGroups.Remove(this);
					}
					this._CNGroups.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocumentCNGroups.Add(this);
						this._CNGroupsID = value.CNGroupID;
					}
					else
					{
						this._CNGroupsID = default(int);
					}
					this.SendPropertyChanged("CNGroups");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_LegalDocumentRestrictions")]
	public partial class C_LegalDocumentRestrictions : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _LegalDocumentID;

		private int _RestrictionsID;

		private EntityRef<C_LegalDocument> _C_LegalDocument;

		private EntityRef<C_CatalogRestriction> _Restrictions;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnLegalDocumentIDChanging(int value);
		partial void OnLegalDocumentIDChanged();
		partial void OnRestrictionsIDChanging(int value);
		partial void OnRestrictionsIDChanged();
		#endregion

		public C_LegalDocumentRestrictions()
		{
			this._C_LegalDocument = default(EntityRef<C_LegalDocument>);
			this._Restrictions = default(EntityRef<C_CatalogRestriction>);
			OnCreated();
		}

		[Column(Storage = "_LegalDocumentID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int LegalDocumentID
		{
			get
			{
				return this._LegalDocumentID;
			}
			set
			{
				if ((this._LegalDocumentID != value))
				{
					if (this._C_LegalDocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLegalDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._LegalDocumentID = value;
					this.SendPropertyChanged("LegalDocumentID");
					this.OnLegalDocumentIDChanged();
				}
			}
		}

		[Column(Storage = "_RestrictionsID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int RestrictionsID
		{
			get
			{
				return this._RestrictionsID;
			}
			set
			{
				if ((this._RestrictionsID != value))
				{
					if (this._Restrictions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRestrictionsIDChanging(value);
					this.SendPropertyChanging();
					this._RestrictionsID = value;
					this.SendPropertyChanged("RestrictionsID");
					this.OnRestrictionsIDChanged();
				}
			}
		}

		[Association(Name = "FK_C_LegalDocumentRestrictions_C_LegalDocument", Storage = "_C_LegalDocument", ThisKey = "LegalDocumentID", OtherKey = "LegalDocumentID", IsForeignKey = true, DeleteOnNull = true)]
		public C_LegalDocument C_LegalDocument
		{
			get
			{
				return this._C_LegalDocument.Entity;
			}
			set
			{
				C_LegalDocument previousValue = this._C_LegalDocument.Entity;
				if (((previousValue != value)
							|| (this._C_LegalDocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_LegalDocument.Entity = null;
						previousValue.C_LegalDocumentRestrictions.Remove(this);
					}
					this._C_LegalDocument.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocumentRestrictions.Add(this);
						this._LegalDocumentID = value.LegalDocumentID;
					}
					else
					{
						this._LegalDocumentID = default(int);
					}
					this.SendPropertyChanged("C_LegalDocument");
				}
			}
		}

		[Association(Name = "FK_C_LegalDocumentRestrictions_Restrictions", Storage = "_Restrictions", ThisKey = "RestrictionsID", OtherKey = "CatalogRestrictionID", IsForeignKey = true, DeleteOnNull = true)]
		public C_CatalogRestriction Restrictions
		{
			get
			{
				return this._Restrictions.Entity;
			}
			set
			{
				C_CatalogRestriction previousValue = this._Restrictions.Entity;
				if (((previousValue != value)
							|| (this._Restrictions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Restrictions.Entity = null;
						previousValue.C_LegalDocumentRestrictions.Remove(this);
					}
					this._Restrictions.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocumentRestrictions.Add(this);
						this._RestrictionsID = value.CatalogRestrictionID;
					}
					else
					{
						this._RestrictionsID = default(int);
					}
					this.SendPropertyChanged("Restrictions");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_LegalDocumentType")]
	public partial class C_LegalDocumentType : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _LegalDocumentTypeID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private EntitySet<C_LegalDocument> _C_LegalDocument;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnLegalDocumentTypeIDChanging(int value);
		partial void OnLegalDocumentTypeIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		#endregion

		public C_LegalDocumentType()
		{
			this._C_LegalDocument = new EntitySet<C_LegalDocument>(new Action<C_LegalDocument>(this.attach_C_LegalDocument), new Action<C_LegalDocument>(this.detach_C_LegalDocument));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_LegalDocumentTypeID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int LegalDocumentTypeID
		{
			get
			{
				return this._LegalDocumentTypeID;
			}
			set
			{
				if ((this._LegalDocumentTypeID != value))
				{
					this.OnLegalDocumentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LegalDocumentTypeID = value;
					this.SendPropertyChanged("LegalDocumentTypeID");
					this.OnLegalDocumentTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Association(Name = "FK_C_LegalDocument_Type", Storage = "_C_LegalDocument", ThisKey = "LegalDocumentTypeID", OtherKey = "TypeID", DeleteRule = "NO ACTION")]
		public EntitySet<C_LegalDocument> C_LegalDocument
		{
			get
			{
				return this._C_LegalDocument;
			}
			set
			{
				this._C_LegalDocument.Assign(value);
			}
		}

		[Association(Name = "FK_C_LegalDocumentType_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_LegalDocumentType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocumentType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_C_LegalDocument(C_LegalDocument entity)
		{
			this.SendPropertyChanging();
			entity.Type = this;
		}

		private void detach_C_LegalDocument(C_LegalDocument entity)
		{
			this.SendPropertyChanging();
			entity.Type = null;
		}
	}

	[Table(Name = "dbo.C_LicenseType")]
	public partial class C_LicenseType : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _LicenseTypeID;

		private string _Title;

		private System.DateTime _LastModifiedDate;

		private bool _IsDeleted;

		private string _SysName;

		private int _LastModifiedUserID;

		private EntitySet<C_CNCategory> _C_CNCategory;

		private EntitySet<C_CNCategoryItem> _C_CNCategoryItem;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<OrderDoc> _OrderDoc;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnLicenseTypeIDChanging(int value);
		partial void OnLicenseTypeIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		#endregion

		public C_LicenseType()
		{
			this._C_CNCategory = new EntitySet<C_CNCategory>(new Action<C_CNCategory>(this.attach_C_CNCategory), new Action<C_CNCategory>(this.detach_C_CNCategory));
			this._C_CNCategoryItem = new EntitySet<C_CNCategoryItem>(new Action<C_CNCategoryItem>(this.attach_C_CNCategoryItem), new Action<C_CNCategoryItem>(this.detach_C_CNCategoryItem));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			OnCreated();
		}

		[Column(Storage = "_LicenseTypeID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int LicenseTypeID
		{
			get
			{
				return this._LicenseTypeID;
			}
			set
			{
				if ((this._LicenseTypeID != value))
				{
					this.OnLicenseTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseTypeID = value;
					this.SendPropertyChanged("LicenseTypeID");
					this.OnLicenseTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Association(Name = "FK_C_CNCategory_LicenseType", Storage = "_C_CNCategory", ThisKey = "LicenseTypeID", OtherKey = "LicenseTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CNCategory> C_CNCategory
		{
			get
			{
				return this._C_CNCategory;
			}
			set
			{
				this._C_CNCategory.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNCategoryItem_LicenseType", Storage = "_C_CNCategoryItem", ThisKey = "LicenseTypeID", OtherKey = "LicenseTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CNCategoryItem> C_CNCategoryItem
		{
			get
			{
				return this._C_CNCategoryItem;
			}
			set
			{
				this._C_CNCategoryItem.Assign(value);
			}
		}

		[Association(Name = "FK_C_LicenseType_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_LicenseType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_LicenseType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_LicenseType", Storage = "_OrderDoc", ThisKey = "LicenseTypeID", OtherKey = "LicenseTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_C_CNCategory(C_CNCategory entity)
		{
			this.SendPropertyChanging();
			entity.LicenseType = this;
		}

		private void detach_C_CNCategory(C_CNCategory entity)
		{
			this.SendPropertyChanging();
			entity.LicenseType = null;
		}

		private void attach_C_CNCategoryItem(C_CNCategoryItem entity)
		{
			this.SendPropertyChanging();
			entity.LicenseType = this;
		}

		private void detach_C_CNCategoryItem(C_CNCategoryItem entity)
		{
			this.SendPropertyChanging();
			entity.LicenseType = null;
		}

		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.LicenseType = this;
		}

		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.LicenseType = null;
		}
	}

	[Table(Name = "dbo.C_MaxTargetValidity")]
	public partial class C_MaxTargetValidity : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _MaxTargetValidityID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private EntitySet<C_CNCategory> _C_CNCategory;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnMaxTargetValidityIDChanging(int value);
		partial void OnMaxTargetValidityIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		#endregion

		public C_MaxTargetValidity()
		{
			this._C_CNCategory = new EntitySet<C_CNCategory>(new Action<C_CNCategory>(this.attach_C_CNCategory), new Action<C_CNCategory>(this.detach_C_CNCategory));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_MaxTargetValidityID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int MaxTargetValidityID
		{
			get
			{
				return this._MaxTargetValidityID;
			}
			set
			{
				if ((this._MaxTargetValidityID != value))
				{
					this.OnMaxTargetValidityIDChanging(value);
					this.SendPropertyChanging();
					this._MaxTargetValidityID = value;
					this.SendPropertyChanged("MaxTargetValidityID");
					this.OnMaxTargetValidityIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Association(Name = "FK_C_CNCategory_MaxTargetValidity", Storage = "_C_CNCategory", ThisKey = "MaxTargetValidityID", OtherKey = "MaxTargetValidityID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CNCategory> C_CNCategory
		{
			get
			{
				return this._C_CNCategory;
			}
			set
			{
				this._C_CNCategory.Assign(value);
			}
		}

		[Association(Name = "FK_C_MaxTargetValidity_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_MaxTargetValidity.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_MaxTargetValidity.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_C_CNCategory(C_CNCategory entity)
		{
			this.SendPropertyChanging();
			entity.MaxTargetValidity = this;
		}

		private void detach_C_CNCategory(C_CNCategory entity)
		{
			this.SendPropertyChanging();
			entity.MaxTargetValidity = null;
		}
	}

	[Table(Name = "dbo.C_Measure")]
	public partial class C_Measure : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _MeasureID;

		private string _Code;

		private string _Title;

		private string _TitleRus;

		private string _TitleEng;

		private string _CodeRus;

		private string _CodeEng;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private System.Guid _MasterObjectGUID;

		private bool _IsDeleted;

		private EntitySet<AppendixQuantity> _AppendixQuantity;

		private EntitySet<AppendixQuantity> _Measure;

		private EntitySet<C_CN> _C_CN;

		private EntitySet<C_CN> _C_CN_MeasureCode2;

		private EntitySet<C_CN> _C_CN_MeasureCode3;

		private EntitySet<C_CNCategory> _C_CNCategory;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<CommodityDocument> _CommodityDocument;

		private EntitySet<FactAnnulment> _FactAnnulment;

		private EntitySet<FactClose> _FactClose;

		private EntitySet<LicenseExecution> _LicenseExecution;

		private EntitySet<OrderDoc> _OrderDoc;

		private EntitySet<OrderDoc> _OrderDoc_FactShippedMeasure;

		private EntitySet<OrderDoc> _OrderDoc_Measure;

		private EntitySet<Quota> _Quota;

		private EntitySet<SpecificationCommon> _SpecificationCommon;

		private EntitySet<SpecificationCommon> _SpecificationCommon_Measure;

		private EntitySet<SpecificationItem> _SpecificationItem;

		private EntitySet<SpecificationItem> _SpecificationItem_Measure;

		private EntitySet<SpecificationItem> _SpecificationItem_Measure3;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnMeasureIDChanging(int value);
		partial void OnMeasureIDChanged();
		partial void OnCodeChanging(string value);
		partial void OnCodeChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnTitleRusChanging(string value);
		partial void OnTitleRusChanged();
		partial void OnTitleEngChanging(string value);
		partial void OnTitleEngChanged();
		partial void OnCodeRusChanging(string value);
		partial void OnCodeRusChanged();
		partial void OnCodeEngChanging(string value);
		partial void OnCodeEngChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnMasterObjectGUIDChanging(System.Guid value);
		partial void OnMasterObjectGUIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public C_Measure()
		{
			this._AppendixQuantity = new EntitySet<AppendixQuantity>(new Action<AppendixQuantity>(this.attach_AppendixQuantity), new Action<AppendixQuantity>(this.detach_AppendixQuantity));
			this._Measure = new EntitySet<AppendixQuantity>(new Action<AppendixQuantity>(this.attach_Measure), new Action<AppendixQuantity>(this.detach_Measure));
			this._C_CN = new EntitySet<C_CN>(new Action<C_CN>(this.attach_C_CN), new Action<C_CN>(this.detach_C_CN));
			this._C_CN_MeasureCode2 = new EntitySet<C_CN>(new Action<C_CN>(this.attach_C_CN_MeasureCode2), new Action<C_CN>(this.detach_C_CN_MeasureCode2));
			this._C_CN_MeasureCode3 = new EntitySet<C_CN>(new Action<C_CN>(this.attach_C_CN_MeasureCode3), new Action<C_CN>(this.detach_C_CN_MeasureCode3));
			this._C_CNCategory = new EntitySet<C_CNCategory>(new Action<C_CNCategory>(this.attach_C_CNCategory), new Action<C_CNCategory>(this.detach_C_CNCategory));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._CommodityDocument = new EntitySet<CommodityDocument>(new Action<CommodityDocument>(this.attach_CommodityDocument), new Action<CommodityDocument>(this.detach_CommodityDocument));
			this._FactAnnulment = new EntitySet<FactAnnulment>(new Action<FactAnnulment>(this.attach_FactAnnulment), new Action<FactAnnulment>(this.detach_FactAnnulment));
			this._FactClose = new EntitySet<FactClose>(new Action<FactClose>(this.attach_FactClose), new Action<FactClose>(this.detach_FactClose));
			this._LicenseExecution = new EntitySet<LicenseExecution>(new Action<LicenseExecution>(this.attach_LicenseExecution), new Action<LicenseExecution>(this.detach_LicenseExecution));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._OrderDoc_FactShippedMeasure = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc_FactShippedMeasure), new Action<OrderDoc>(this.detach_OrderDoc_FactShippedMeasure));
			this._OrderDoc_Measure = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc_Measure), new Action<OrderDoc>(this.detach_OrderDoc_Measure));
			this._Quota = new EntitySet<Quota>(new Action<Quota>(this.attach_Quota), new Action<Quota>(this.detach_Quota));
			this._SpecificationCommon = new EntitySet<SpecificationCommon>(new Action<SpecificationCommon>(this.attach_SpecificationCommon), new Action<SpecificationCommon>(this.detach_SpecificationCommon));
			this._SpecificationCommon_Measure = new EntitySet<SpecificationCommon>(new Action<SpecificationCommon>(this.attach_SpecificationCommon_Measure), new Action<SpecificationCommon>(this.detach_SpecificationCommon_Measure));
			this._SpecificationItem = new EntitySet<SpecificationItem>(new Action<SpecificationItem>(this.attach_SpecificationItem), new Action<SpecificationItem>(this.detach_SpecificationItem));
			this._SpecificationItem_Measure = new EntitySet<SpecificationItem>(new Action<SpecificationItem>(this.attach_SpecificationItem_Measure), new Action<SpecificationItem>(this.detach_SpecificationItem_Measure));
			this._SpecificationItem_Measure3 = new EntitySet<SpecificationItem>(new Action<SpecificationItem>(this.attach_SpecificationItem_Measure3), new Action<SpecificationItem>(this.detach_SpecificationItem_Measure3));
			OnCreated();
		}

		[Column(Storage = "_MeasureID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}

		[Column(Storage = "_Code", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_TitleRus", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string TitleRus
		{
			get
			{
				return this._TitleRus;
			}
			set
			{
				if ((this._TitleRus != value))
				{
					this.OnTitleRusChanging(value);
					this.SendPropertyChanging();
					this._TitleRus = value;
					this.SendPropertyChanged("TitleRus");
					this.OnTitleRusChanged();
				}
			}
		}

		[Column(Storage = "_TitleEng", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string TitleEng
		{
			get
			{
				return this._TitleEng;
			}
			set
			{
				if ((this._TitleEng != value))
				{
					this.OnTitleEngChanging(value);
					this.SendPropertyChanging();
					this._TitleEng = value;
					this.SendPropertyChanged("TitleEng");
					this.OnTitleEngChanged();
				}
			}
		}

		[Column(Storage = "_CodeRus", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string CodeRus
		{
			get
			{
				return this._CodeRus;
			}
			set
			{
				if ((this._CodeRus != value))
				{
					this.OnCodeRusChanging(value);
					this.SendPropertyChanging();
					this._CodeRus = value;
					this.SendPropertyChanged("CodeRus");
					this.OnCodeRusChanged();
				}
			}
		}

		[Column(Storage = "_CodeEng", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string CodeEng
		{
			get
			{
				return this._CodeEng;
			}
			set
			{
				if ((this._CodeEng != value))
				{
					this.OnCodeEngChanging(value);
					this.SendPropertyChanging();
					this._CodeEng = value;
					this.SendPropertyChanged("CodeEng");
					this.OnCodeEngChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_MasterObjectGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_AppendixQuantity_BoxMeasure", Storage = "_AppendixQuantity", ThisKey = "MeasureID", OtherKey = "BoxMeasureID", DeleteRule = "NO ACTION")]
		public EntitySet<AppendixQuantity> AppendixQuantity
		{
			get
			{
				return this._AppendixQuantity;
			}
			set
			{
				this._AppendixQuantity.Assign(value);
			}
		}

		[Association(Name = "FK_AppendixQuantity_Measure", Storage = "_Measure", ThisKey = "MeasureID", OtherKey = "MeasureID", DeleteRule = "NO ACTION")]
		public EntitySet<AppendixQuantity> Measure
		{
			get
			{
				return this._Measure;
			}
			set
			{
				this._Measure.Assign(value);
			}
		}

		[Association(Name = "FK_C_CN_MeasureCode1", Storage = "_C_CN", ThisKey = "MeasureID", OtherKey = "MeasureCode1ID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CN> C_CN
		{
			get
			{
				return this._C_CN;
			}
			set
			{
				this._C_CN.Assign(value);
			}
		}

		[Association(Name = "FK_C_CN_MeasureCode2", Storage = "_C_CN_MeasureCode2", ThisKey = "MeasureID", OtherKey = "MeasureCode2ID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CN> C_CN_MeasureCode2
		{
			get
			{
				return this._C_CN_MeasureCode2;
			}
			set
			{
				this._C_CN_MeasureCode2.Assign(value);
			}
		}

		[Association(Name = "FK_C_CN_MeasureCode3", Storage = "_C_CN_MeasureCode3", ThisKey = "MeasureID", OtherKey = "MeasureCode3ID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CN> C_CN_MeasureCode3
		{
			get
			{
				return this._C_CN_MeasureCode3;
			}
			set
			{
				this._C_CN_MeasureCode3.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNCategory_Measure", Storage = "_C_CNCategory", ThisKey = "MeasureID", OtherKey = "MeasureID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CNCategory> C_CNCategory
		{
			get
			{
				return this._C_CNCategory;
			}
			set
			{
				this._C_CNCategory.Assign(value);
			}
		}

		[Association(Name = "FK_C_Measure_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_Measure.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_Measure.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_CommodityDocument_Measure", Storage = "_CommodityDocument", ThisKey = "MeasureID", OtherKey = "MeasureID", DeleteRule = "NO ACTION")]
		public EntitySet<CommodityDocument> CommodityDocument
		{
			get
			{
				return this._CommodityDocument;
			}
			set
			{
				this._CommodityDocument.Assign(value);
			}
		}

		[Association(Name = "FK_FactAnnulment_FactShippedMeasure", Storage = "_FactAnnulment", ThisKey = "MeasureID", OtherKey = "FactShippedMeasureID", DeleteRule = "NO ACTION")]
		public EntitySet<FactAnnulment> FactAnnulment
		{
			get
			{
				return this._FactAnnulment;
			}
			set
			{
				this._FactAnnulment.Assign(value);
			}
		}

		[Association(Name = "FK_FactClose_FactShippedMeasure", Storage = "_FactClose", ThisKey = "MeasureID", OtherKey = "FactShippedMeasureID", DeleteRule = "NO ACTION")]
		public EntitySet<FactClose> FactClose
		{
			get
			{
				return this._FactClose;
			}
			set
			{
				this._FactClose.Assign(value);
			}
		}

		[Association(Name = "FK_LicenseExecution_Measure", Storage = "_LicenseExecution", ThisKey = "MeasureID", OtherKey = "MeasureID", DeleteRule = "NO ACTION")]
		public EntitySet<LicenseExecution> LicenseExecution
		{
			get
			{
				return this._LicenseExecution;
			}
			set
			{
				this._LicenseExecution.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_AddMeasure", Storage = "_OrderDoc", ThisKey = "MeasureID", OtherKey = "AddMeasureID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_FactShippedMeasure", Storage = "_OrderDoc_FactShippedMeasure", ThisKey = "MeasureID", OtherKey = "FactShippedMeasureID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc_FactShippedMeasure
		{
			get
			{
				return this._OrderDoc_FactShippedMeasure;
			}
			set
			{
				this._OrderDoc_FactShippedMeasure.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_Measure", Storage = "_OrderDoc_Measure", ThisKey = "MeasureID", OtherKey = "MeasureID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc_Measure
		{
			get
			{
				return this._OrderDoc_Measure;
			}
			set
			{
				this._OrderDoc_Measure.Assign(value);
			}
		}

		[Association(Name = "FK_Quota_Measure", Storage = "_Quota", ThisKey = "MeasureID", OtherKey = "MeasureID", DeleteRule = "NO ACTION")]
		public EntitySet<Quota> Quota
		{
			get
			{
				return this._Quota;
			}
			set
			{
				this._Quota.Assign(value);
			}
		}

		[Association(Name = "FK_SpecificationCommon_AdditionalMeasure", Storage = "_SpecificationCommon", ThisKey = "MeasureID", OtherKey = "AdditionalMeasureID", DeleteRule = "NO ACTION")]
		public EntitySet<SpecificationCommon> SpecificationCommon
		{
			get
			{
				return this._SpecificationCommon;
			}
			set
			{
				this._SpecificationCommon.Assign(value);
			}
		}

		[Association(Name = "FK_SpecificationCommon_Measure", Storage = "_SpecificationCommon_Measure", ThisKey = "MeasureID", OtherKey = "MeasureID", DeleteRule = "NO ACTION")]
		public EntitySet<SpecificationCommon> SpecificationCommon_Measure
		{
			get
			{
				return this._SpecificationCommon_Measure;
			}
			set
			{
				this._SpecificationCommon_Measure.Assign(value);
			}
		}

		[Association(Name = "FK_SpecificationItem_AdditionalMeasure", Storage = "_SpecificationItem", ThisKey = "MeasureID", OtherKey = "AdditionalMeasureID", DeleteRule = "NO ACTION")]
		public EntitySet<SpecificationItem> SpecificationItem
		{
			get
			{
				return this._SpecificationItem;
			}
			set
			{
				this._SpecificationItem.Assign(value);
			}
		}

		[Association(Name = "FK_SpecificationItem_Measure", Storage = "_SpecificationItem_Measure", ThisKey = "MeasureID", OtherKey = "MeasureID", DeleteRule = "NO ACTION")]
		public EntitySet<SpecificationItem> SpecificationItem_Measure
		{
			get
			{
				return this._SpecificationItem_Measure;
			}
			set
			{
				this._SpecificationItem_Measure.Assign(value);
			}
		}

		[Association(Name = "FK_SpecificationItem_Measure3", Storage = "_SpecificationItem_Measure3", ThisKey = "MeasureID", OtherKey = "Measure3ID", DeleteRule = "NO ACTION")]
		public EntitySet<SpecificationItem> SpecificationItem_Measure3
		{
			get
			{
				return this._SpecificationItem_Measure3;
			}
			set
			{
				this._SpecificationItem_Measure3.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_AppendixQuantity(AppendixQuantity entity)
		{
			this.SendPropertyChanging();
			entity.BoxMeasure = this;
		}

		private void detach_AppendixQuantity(AppendixQuantity entity)
		{
			this.SendPropertyChanging();
			entity.BoxMeasure = null;
		}

		private void attach_Measure(AppendixQuantity entity)
		{
			this.SendPropertyChanging();
			entity.Measure = this;
		}

		private void detach_Measure(AppendixQuantity entity)
		{
			this.SendPropertyChanging();
			entity.Measure = null;
		}

		private void attach_C_CN(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.MeasureCode1 = this;
		}

		private void detach_C_CN(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.MeasureCode1 = null;
		}

		private void attach_C_CN_MeasureCode2(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.MeasureCode2 = this;
		}

		private void detach_C_CN_MeasureCode2(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.MeasureCode2 = null;
		}

		private void attach_C_CN_MeasureCode3(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.MeasureCode3 = this;
		}

		private void detach_C_CN_MeasureCode3(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.MeasureCode3 = null;
		}

		private void attach_C_CNCategory(C_CNCategory entity)
		{
			this.SendPropertyChanging();
			entity.Measure = this;
		}

		private void detach_C_CNCategory(C_CNCategory entity)
		{
			this.SendPropertyChanging();
			entity.Measure = null;
		}

		private void attach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.Measure = this;
		}

		private void detach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.Measure = null;
		}

		private void attach_FactAnnulment(FactAnnulment entity)
		{
			this.SendPropertyChanging();
			entity.FactShippedMeasure = this;
		}

		private void detach_FactAnnulment(FactAnnulment entity)
		{
			this.SendPropertyChanging();
			entity.FactShippedMeasure = null;
		}

		private void attach_FactClose(FactClose entity)
		{
			this.SendPropertyChanging();
			entity.FactShippedMeasure = this;
		}

		private void detach_FactClose(FactClose entity)
		{
			this.SendPropertyChanging();
			entity.FactShippedMeasure = null;
		}

		private void attach_LicenseExecution(LicenseExecution entity)
		{
			this.SendPropertyChanging();
			entity.Measure = this;
		}

		private void detach_LicenseExecution(LicenseExecution entity)
		{
			this.SendPropertyChanging();
			entity.Measure = null;
		}

		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.AddMeasure = this;
		}

		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.AddMeasure = null;
		}

		private void attach_OrderDoc_FactShippedMeasure(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.FactShippedMeasure = this;
		}

		private void detach_OrderDoc_FactShippedMeasure(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.FactShippedMeasure = null;
		}

		private void attach_OrderDoc_Measure(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Measure = this;
		}

		private void detach_OrderDoc_Measure(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Measure = null;
		}

		private void attach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.Measure = this;
		}

		private void detach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.Measure = null;
		}

		private void attach_SpecificationCommon(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.AdditionalMeasure = this;
		}

		private void detach_SpecificationCommon(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.AdditionalMeasure = null;
		}

		private void attach_SpecificationCommon_Measure(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.Measure = this;
		}

		private void detach_SpecificationCommon_Measure(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.Measure = null;
		}

		private void attach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.AdditionalMeasure = this;
		}

		private void detach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.AdditionalMeasure = null;
		}

		private void attach_SpecificationItem_Measure(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.Measure = this;
		}

		private void detach_SpecificationItem_Measure(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.Measure = null;
		}

		private void attach_SpecificationItem_Measure3(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.Measure3 = this;
		}

		private void detach_SpecificationItem_Measure3(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.Measure3 = null;
		}
	}

	[Table(Name = "dbo.C_MFC")]
	public partial class C_MFC : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _MFCID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<OrderDoc> _OrderDoc;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnMFCIDChanging(int value);
		partial void OnMFCIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		#endregion

		public C_MFC()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			OnCreated();
		}

		[Column(Storage = "_MFCID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int MFCID
		{
			get
			{
				return this._MFCID;
			}
			set
			{
				if ((this._MFCID != value))
				{
					this.OnMFCIDChanging(value);
					this.SendPropertyChanging();
					this._MFCID = value;
					this.SendPropertyChanged("MFCID");
					this.OnMFCIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Association(Name = "FK_C_MFC_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_MFC.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_MFC.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_MFC", Storage = "_OrderDoc", ThisKey = "MFCID", OtherKey = "MFCID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.MFC = this;
		}

		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.MFC = null;
		}
	}

	[Table(Name = "dbo.C_OperationType")]
	public partial class C_OperationType : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _OperationTypeID;

		private string _Title;

		private System.DateTime _LastModifiedDate;

		private bool _IsDeleted;

		private string _SysName;

		private int _LastModifiedUserID;

		private EntitySet<C_CNCategoryOperationType> _C_CNCategoryOperationType;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<CustomsDeclaration> _CustomsDeclaration;

		private EntitySet<OrderDoc> _OrderDoc;

		private EntitySet<Quota> _Quota;

		private EntitySet<QuotaRedistribution> _QuotaRedistribution;

		private EntitySet<QuotaRequest> _QuotaRequest;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnOperationTypeIDChanging(int value);
		partial void OnOperationTypeIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		#endregion

		public C_OperationType()
		{
			this._C_CNCategoryOperationType = new EntitySet<C_CNCategoryOperationType>(new Action<C_CNCategoryOperationType>(this.attach_C_CNCategoryOperationType), new Action<C_CNCategoryOperationType>(this.detach_C_CNCategoryOperationType));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._CustomsDeclaration = new EntitySet<CustomsDeclaration>(new Action<CustomsDeclaration>(this.attach_CustomsDeclaration), new Action<CustomsDeclaration>(this.detach_CustomsDeclaration));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._Quota = new EntitySet<Quota>(new Action<Quota>(this.attach_Quota), new Action<Quota>(this.detach_Quota));
			this._QuotaRedistribution = new EntitySet<QuotaRedistribution>(new Action<QuotaRedistribution>(this.attach_QuotaRedistribution), new Action<QuotaRedistribution>(this.detach_QuotaRedistribution));
			this._QuotaRequest = new EntitySet<QuotaRequest>(new Action<QuotaRequest>(this.attach_QuotaRequest), new Action<QuotaRequest>(this.detach_QuotaRequest));
			OnCreated();
		}

		[Column(Storage = "_OperationTypeID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					this.OnOperationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._OperationTypeID = value;
					this.SendPropertyChanged("OperationTypeID");
					this.OnOperationTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Association(Name = "FK_C_CNCategoryOperationType_OperationType", Storage = "_C_CNCategoryOperationType", ThisKey = "OperationTypeID", OtherKey = "OperationTypeID", DeleteRule = "CASCADE")]
		public EntitySet<C_CNCategoryOperationType> C_CNCategoryOperationType
		{
			get
			{
				return this._C_CNCategoryOperationType;
			}
			set
			{
				this._C_CNCategoryOperationType.Assign(value);
			}
		}

		[Association(Name = "FK_C_OperationType_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_OperationType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_OperationType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_CustomsDeclaration_Operation", Storage = "_CustomsDeclaration", ThisKey = "OperationTypeID", OtherKey = "OperationID", DeleteRule = "NO ACTION")]
		public EntitySet<CustomsDeclaration> CustomsDeclaration
		{
			get
			{
				return this._CustomsDeclaration;
			}
			set
			{
				this._CustomsDeclaration.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_OperationType", Storage = "_OrderDoc", ThisKey = "OperationTypeID", OtherKey = "OperationTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}

		[Association(Name = "FK_Quota_OperationType", Storage = "_Quota", ThisKey = "OperationTypeID", OtherKey = "OperationTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<Quota> Quota
		{
			get
			{
				return this._Quota;
			}
			set
			{
				this._Quota.Assign(value);
			}
		}

		[Association(Name = "FK_QuotaRedistribution_OperationType", Storage = "_QuotaRedistribution", ThisKey = "OperationTypeID", OtherKey = "OperationTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<QuotaRedistribution> QuotaRedistribution
		{
			get
			{
				return this._QuotaRedistribution;
			}
			set
			{
				this._QuotaRedistribution.Assign(value);
			}
		}

		[Association(Name = "FK_QuotaRequest_OperationType", Storage = "_QuotaRequest", ThisKey = "OperationTypeID", OtherKey = "OperationTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<QuotaRequest> QuotaRequest
		{
			get
			{
				return this._QuotaRequest;
			}
			set
			{
				this._QuotaRequest.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_C_CNCategoryOperationType(C_CNCategoryOperationType entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = this;
		}

		private void detach_C_CNCategoryOperationType(C_CNCategoryOperationType entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = null;
		}

		private void attach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.Operation = this;
		}

		private void detach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.Operation = null;
		}

		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = this;
		}

		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = null;
		}

		private void attach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = this;
		}

		private void detach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = null;
		}

		private void attach_QuotaRedistribution(QuotaRedistribution entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = this;
		}

		private void detach_QuotaRedistribution(QuotaRedistribution entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = null;
		}

		private void attach_QuotaRequest(QuotaRequest entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = this;
		}

		private void detach_QuotaRequest(QuotaRequest entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = null;
		}
	}

	[Table(Name = "dbo.C_QuoteCategory")]
	public partial class C_QuoteCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _QuoteCategoryID;

		private string _Code;

		private string _Title;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private System.Guid _MasterObjectGUID;

		private bool _IsDeleted;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<Quota> _Quota;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnQuoteCategoryIDChanging(int value);
		partial void OnQuoteCategoryIDChanged();
		partial void OnCodeChanging(string value);
		partial void OnCodeChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnMasterObjectGUIDChanging(System.Guid value);
		partial void OnMasterObjectGUIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public C_QuoteCategory()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Quota = new EntitySet<Quota>(new Action<Quota>(this.attach_Quota), new Action<Quota>(this.detach_Quota));
			OnCreated();
		}

		[Column(Storage = "_QuoteCategoryID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int QuoteCategoryID
		{
			get
			{
				return this._QuoteCategoryID;
			}
			set
			{
				if ((this._QuoteCategoryID != value))
				{
					this.OnQuoteCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._QuoteCategoryID = value;
					this.SendPropertyChanged("QuoteCategoryID");
					this.OnQuoteCategoryIDChanged();
				}
			}
		}

		[Column(Storage = "_Code", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_MasterObjectGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_C_QuoteCategory_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_QuoteCategory.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_QuoteCategory.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_Quota_QuoteCategory", Storage = "_Quota", ThisKey = "QuoteCategoryID", OtherKey = "QuoteCategoryID", DeleteRule = "NO ACTION")]
		public EntitySet<Quota> Quota
		{
			get
			{
				return this._Quota;
			}
			set
			{
				this._Quota.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.QuoteCategory = this;
		}

		private void detach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.QuoteCategory = null;
		}
	}

	[Table(Name = "dbo.C_RES")]
	public partial class C_RES : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _RESID;

		private string _Country;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _No;

		private string _Notes;

		private string _Organization;

		private System.Nullable<System.DateTime> _ResolutionDate;

		private string _ResolutionNo;

		private System.Nullable<System.DateTime> _ResolutionValidity;

		private string _SectionNo;

		private string _Title;

		private string _Type;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnRESIDChanging(int value);
		partial void OnRESIDChanged();
		partial void OnCountryChanging(string value);
		partial void OnCountryChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnNoChanging(string value);
		partial void OnNoChanged();
		partial void OnNotesChanging(string value);
		partial void OnNotesChanged();
		partial void OnOrganizationChanging(string value);
		partial void OnOrganizationChanged();
		partial void OnResolutionDateChanging(System.Nullable<System.DateTime> value);
		partial void OnResolutionDateChanged();
		partial void OnResolutionNoChanging(string value);
		partial void OnResolutionNoChanged();
		partial void OnResolutionValidityChanging(System.Nullable<System.DateTime> value);
		partial void OnResolutionValidityChanged();
		partial void OnSectionNoChanging(string value);
		partial void OnSectionNoChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnTypeChanging(string value);
		partial void OnTypeChanged();
		#endregion

		public C_RES()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_RESID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int RESID
		{
			get
			{
				return this._RESID;
			}
			set
			{
				if ((this._RESID != value))
				{
					this.OnRESIDChanging(value);
					this.SendPropertyChanging();
					this._RESID = value;
					this.SendPropertyChanged("RESID");
					this.OnRESIDChanged();
				}
			}
		}

		[Column(Storage = "_Country", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_No", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string No
		{
			get
			{
				return this._No;
			}
			set
			{
				if ((this._No != value))
				{
					this.OnNoChanging(value);
					this.SendPropertyChanging();
					this._No = value;
					this.SendPropertyChanged("No");
					this.OnNoChanged();
				}
			}
		}

		[Column(Storage = "_Notes", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}

		[Column(Storage = "_Organization", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Organization
		{
			get
			{
				return this._Organization;
			}
			set
			{
				if ((this._Organization != value))
				{
					this.OnOrganizationChanging(value);
					this.SendPropertyChanging();
					this._Organization = value;
					this.SendPropertyChanged("Organization");
					this.OnOrganizationChanged();
				}
			}
		}

		[Column(Storage = "_ResolutionDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ResolutionDate
		{
			get
			{
				return this._ResolutionDate;
			}
			set
			{
				if ((this._ResolutionDate != value))
				{
					this.OnResolutionDateChanging(value);
					this.SendPropertyChanging();
					this._ResolutionDate = value;
					this.SendPropertyChanged("ResolutionDate");
					this.OnResolutionDateChanged();
				}
			}
		}

		[Column(Storage = "_ResolutionNo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ResolutionNo
		{
			get
			{
				return this._ResolutionNo;
			}
			set
			{
				if ((this._ResolutionNo != value))
				{
					this.OnResolutionNoChanging(value);
					this.SendPropertyChanging();
					this._ResolutionNo = value;
					this.SendPropertyChanged("ResolutionNo");
					this.OnResolutionNoChanged();
				}
			}
		}

		[Column(Storage = "_ResolutionValidity", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ResolutionValidity
		{
			get
			{
				return this._ResolutionValidity;
			}
			set
			{
				if ((this._ResolutionValidity != value))
				{
					this.OnResolutionValidityChanging(value);
					this.SendPropertyChanging();
					this._ResolutionValidity = value;
					this.SendPropertyChanged("ResolutionValidity");
					this.OnResolutionValidityChanged();
				}
			}
		}

		[Column(Storage = "_SectionNo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SectionNo
		{
			get
			{
				return this._SectionNo;
			}
			set
			{
				if ((this._SectionNo != value))
				{
					this.OnSectionNoChanging(value);
					this.SendPropertyChanging();
					this._SectionNo = value;
					this.SendPropertyChanged("SectionNo");
					this.OnSectionNoChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Type", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}

		[Association(Name = "FK_C_RES_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_RES.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_RES.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_RFSubject")]
	public partial class C_RFSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _RFSubjectID;

		private string _Code;

		private string _Title;

		private string _ShortTitle;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Capital;

		private System.Nullable<int> _TimeZoneID;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private System.Guid _MasterObjectGUID;

		private bool _IsDeleted;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<N_TimeZone> _TimeZone;

		private EntitySet<Contractor> _Contractor;

		private EntitySet<HST_Contractor> _HST_Contractor;

		private EntitySet<Representation> _Representation;

		private EntitySet<UserInfo> _UserInfo;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnRFSubjectIDChanging(int value);
		partial void OnRFSubjectIDChanged();
		partial void OnCodeChanging(string value);
		partial void OnCodeChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnShortTitleChanging(string value);
		partial void OnShortTitleChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnCapitalChanging(string value);
		partial void OnCapitalChanged();
		partial void OnTimeZoneIDChanging(System.Nullable<int> value);
		partial void OnTimeZoneIDChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnMasterObjectGUIDChanging(System.Guid value);
		partial void OnMasterObjectGUIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public C_RFSubject()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._TimeZone = default(EntityRef<N_TimeZone>);
			this._Contractor = new EntitySet<Contractor>(new Action<Contractor>(this.attach_Contractor), new Action<Contractor>(this.detach_Contractor));
			this._HST_Contractor = new EntitySet<HST_Contractor>(new Action<HST_Contractor>(this.attach_HST_Contractor), new Action<HST_Contractor>(this.detach_HST_Contractor));
			this._Representation = new EntitySet<Representation>(new Action<Representation>(this.attach_Representation), new Action<Representation>(this.detach_Representation));
			this._UserInfo = new EntitySet<UserInfo>(new Action<UserInfo>(this.attach_UserInfo), new Action<UserInfo>(this.detach_UserInfo));
			OnCreated();
		}

		[Column(Storage = "_RFSubjectID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int RFSubjectID
		{
			get
			{
				return this._RFSubjectID;
			}
			set
			{
				if ((this._RFSubjectID != value))
				{
					this.OnRFSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._RFSubjectID = value;
					this.SendPropertyChanged("RFSubjectID");
					this.OnRFSubjectIDChanged();
				}
			}
		}

		[Column(Storage = "_Code", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_ShortTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ShortTitle
		{
			get
			{
				return this._ShortTitle;
			}
			set
			{
				if ((this._ShortTitle != value))
				{
					this.OnShortTitleChanging(value);
					this.SendPropertyChanging();
					this._ShortTitle = value;
					this.SendPropertyChanged("ShortTitle");
					this.OnShortTitleChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Capital", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Capital
		{
			get
			{
				return this._Capital;
			}
			set
			{
				if ((this._Capital != value))
				{
					this.OnCapitalChanging(value);
					this.SendPropertyChanging();
					this._Capital = value;
					this.SendPropertyChanged("Capital");
					this.OnCapitalChanged();
				}
			}
		}

		[Column(Storage = "_TimeZoneID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> TimeZoneID
		{
			get
			{
				return this._TimeZoneID;
			}
			set
			{
				if ((this._TimeZoneID != value))
				{
					if (this._TimeZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimeZoneIDChanging(value);
					this.SendPropertyChanging();
					this._TimeZoneID = value;
					this.SendPropertyChanged("TimeZoneID");
					this.OnTimeZoneIDChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_MasterObjectGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_C_RFSubject_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_RFSubject.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_RFSubject.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_C_RFSubject_TimeZone", Storage = "_TimeZone", ThisKey = "TimeZoneID", OtherKey = "TimeZoneID", IsForeignKey = true)]
		public N_TimeZone TimeZone
		{
			get
			{
				return this._TimeZone.Entity;
			}
			set
			{
				N_TimeZone previousValue = this._TimeZone.Entity;
				if (((previousValue != value)
							|| (this._TimeZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimeZone.Entity = null;
						previousValue.C_RFSubject.Remove(this);
					}
					this._TimeZone.Entity = value;
					if ((value != null))
					{
						value.C_RFSubject.Add(this);
						this._TimeZoneID = value.TimeZoneID;
					}
					else
					{
						this._TimeZoneID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TimeZone");
				}
			}
		}

		[Association(Name = "FK_Contractor_RFSubject", Storage = "_Contractor", ThisKey = "RFSubjectID", OtherKey = "RFSubjectID", DeleteRule = "NO ACTION")]
		public EntitySet<Contractor> Contractor
		{
			get
			{
				return this._Contractor;
			}
			set
			{
				this._Contractor.Assign(value);
			}
		}

		[Association(Name = "FK_HST_Contractor_RFSubject", Storage = "_HST_Contractor", ThisKey = "RFSubjectID", OtherKey = "RFSubjectID", DeleteRule = "NO ACTION")]
		public EntitySet<HST_Contractor> HST_Contractor
		{
			get
			{
				return this._HST_Contractor;
			}
			set
			{
				this._HST_Contractor.Assign(value);
			}
		}

		[Association(Name = "FK_Representation_RFSubject", Storage = "_Representation", ThisKey = "RFSubjectID", OtherKey = "RFSubjectID", DeleteRule = "NO ACTION")]
		public EntitySet<Representation> Representation
		{
			get
			{
				return this._Representation;
			}
			set
			{
				this._Representation.Assign(value);
			}
		}

		[Association(Name = "FK_UserInfo_RFSubject", Storage = "_UserInfo", ThisKey = "RFSubjectID", OtherKey = "RFSubjectID", DeleteRule = "NO ACTION")]
		public EntitySet<UserInfo> UserInfo
		{
			get
			{
				return this._UserInfo;
			}
			set
			{
				this._UserInfo.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_Contractor(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.RFSubject = this;
		}

		private void detach_Contractor(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.RFSubject = null;
		}

		private void attach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.RFSubject = this;
		}

		private void detach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.RFSubject = null;
		}

		private void attach_Representation(Representation entity)
		{
			this.SendPropertyChanging();
			entity.RFSubject = this;
		}

		private void detach_Representation(Representation entity)
		{
			this.SendPropertyChanging();
			entity.RFSubject = null;
		}

		private void attach_UserInfo(UserInfo entity)
		{
			this.SendPropertyChanging();
			entity.RFSubject = this;
		}

		private void detach_UserInfo(UserInfo entity)
		{
			this.SendPropertyChanging();
			entity.RFSubject = null;
		}
	}

	[Table(Name = "dbo.C_Tariff")]
	public partial class C_Tariff : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _TariffID;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private System.Guid _MasterObjectGUID;

		private decimal _Amount;

		private string _SysName;

		private bool _IsDeleted;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnTariffIDChanging(int value);
		partial void OnTariffIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnMasterObjectGUIDChanging(System.Guid value);
		partial void OnMasterObjectGUIDChanged();
		partial void OnAmountChanging(decimal value);
		partial void OnAmountChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public C_Tariff()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_TariffID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int TariffID
		{
			get
			{
				return this._TariffID;
			}
			set
			{
				if ((this._TariffID != value))
				{
					this.OnTariffIDChanging(value);
					this.SendPropertyChanging();
					this._TariffID = value;
					this.SendPropertyChanged("TariffID");
					this.OnTariffIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_MasterObjectGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}

		[Column(Storage = "_Amount", DbType = "Decimal(18,5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_C_Tariff_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_Tariff.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_Tariff.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.C_UseType")]
	public partial class C_UseType : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _UseTypeID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private EntitySet<C_FGADocument> _C_FGADocument;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnUseTypeIDChanging(int value);
		partial void OnUseTypeIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		#endregion

		public C_UseType()
		{
			this._C_FGADocument = new EntitySet<C_FGADocument>(new Action<C_FGADocument>(this.attach_C_FGADocument), new Action<C_FGADocument>(this.detach_C_FGADocument));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_UseTypeID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int UseTypeID
		{
			get
			{
				return this._UseTypeID;
			}
			set
			{
				if ((this._UseTypeID != value))
				{
					this.OnUseTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UseTypeID = value;
					this.SendPropertyChanged("UseTypeID");
					this.OnUseTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Association(Name = "FK_C_FGADocument_UseType", Storage = "_C_FGADocument", ThisKey = "UseTypeID", OtherKey = "UseTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<C_FGADocument> C_FGADocument
		{
			get
			{
				return this._C_FGADocument;
			}
			set
			{
				this._C_FGADocument.Assign(value);
			}
		}

		[Association(Name = "FK_C_UseType_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_UseType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_UseType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_C_FGADocument(C_FGADocument entity)
		{
			this.SendPropertyChanging();
			entity.UseType = this;
		}

		private void detach_C_FGADocument(C_FGADocument entity)
		{
			this.SendPropertyChanging();
			entity.UseType = null;
		}
	}

	[Table(Name = "dbo.C_VisitPurpose")]
	public partial class C_VisitPurpose : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _VisitPurposeID;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private int _Duration;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private System.Guid _MasterObjectGUID;

		private bool _IsDeleted;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<VisitRecord> _VisitRecord;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnVisitPurposeIDChanging(int value);
		partial void OnVisitPurposeIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnDurationChanging(int value);
		partial void OnDurationChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnMasterObjectGUIDChanging(System.Guid value);
		partial void OnMasterObjectGUIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public C_VisitPurpose()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._VisitRecord = new EntitySet<VisitRecord>(new Action<VisitRecord>(this.attach_VisitRecord), new Action<VisitRecord>(this.detach_VisitRecord));
			OnCreated();
		}

		[Column(Storage = "_VisitPurposeID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int VisitPurposeID
		{
			get
			{
				return this._VisitPurposeID;
			}
			set
			{
				if ((this._VisitPurposeID != value))
				{
					this.OnVisitPurposeIDChanging(value);
					this.SendPropertyChanging();
					this._VisitPurposeID = value;
					this.SendPropertyChanged("VisitPurposeID");
					this.OnVisitPurposeIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Duration", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_MasterObjectGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_C_VisitPurpose_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_VisitPurpose.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_VisitPurpose.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_VisitRecord_VisitPurpose", Storage = "_VisitRecord", ThisKey = "VisitPurposeID", OtherKey = "VisitPurposeID", DeleteRule = "NO ACTION")]
		public EntitySet<VisitRecord> VisitRecord
		{
			get
			{
				return this._VisitRecord;
			}
			set
			{
				this._VisitRecord.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.VisitPurpose = this;
		}

		private void detach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.VisitPurpose = null;
		}
	}

	[Table(Name = "dbo.CalendarDay")]
	public partial class CalendarDay : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CalendarDayID;

		private bool _IsWorkingDay;

		private System.DateTime _Date;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCalendarDayIDChanging(int value);
		partial void OnCalendarDayIDChanged();
		partial void OnIsWorkingDayChanging(bool value);
		partial void OnIsWorkingDayChanged();
		partial void OnDateChanging(System.DateTime value);
		partial void OnDateChanged();
		#endregion

		public CalendarDay()
		{
			OnCreated();
		}

		[Column(Storage = "_CalendarDayID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int CalendarDayID
		{
			get
			{
				return this._CalendarDayID;
			}
			set
			{
				if ((this._CalendarDayID != value))
				{
					this.OnCalendarDayIDChanging(value);
					this.SendPropertyChanging();
					this._CalendarDayID = value;
					this.SendPropertyChanged("CalendarDayID");
					this.OnCalendarDayIDChanged();
				}
			}
		}

		[Column(Storage = "_IsWorkingDay", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsWorkingDay
		{
			get
			{
				return this._IsWorkingDay;
			}
			set
			{
				if ((this._IsWorkingDay != value))
				{
					this.OnIsWorkingDayChanging(value);
					this.SendPropertyChanging();
					this._IsWorkingDay = value;
					this.SendPropertyChanged("IsWorkingDay");
					this.OnIsWorkingDayChanged();
				}
			}
		}

		[Column(Storage = "_Date", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.CommodityDocument")]
	public partial class CommodityDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _CommodityDocumentGUID;

		private string _Title;

		private System.Nullable<System.DateTime> _DocDate;

		private System.Nullable<System.DateTime> _BeginDate;

		private System.Nullable<System.DateTime> _EndDate;

		private System.Nullable<decimal> _ResolvedQuantity;

		private int _SeqNo;

		private System.Guid _OrderDocGUID;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private bool _IsDeleted;

		private System.Nullable<int> _MeasureID;

		private System.Nullable<int> _Pages;

		private System.Nullable<int> _FileFileID;

		private string _LawOrgan;

		private string _DocumentType;

		private System.Nullable<System.Guid> _Guid;

		private string _DocNo;

		private System.Nullable<decimal> _OldID;

		private bool _IsAttach;

		private bool _IsCommDoc;

		private System.Nullable<int> _SourceTypeID;

		private System.Nullable<int> _FGAID;

		private bool _IsRequestFromSMEV;

		private bool _IsFromApplicant;

		private char _SMEVStatusCode;

		private string _SMEVRejectionMessage;

		private string _AddInfo;

		private string _SysName;

		private System.Nullable<System.Guid> _FileExGUID;

		private System.Nullable<int> _DocumentTypeID;

		private System.Nullable<System.Guid> _RequestKey;

		private bool _OutOfDate;

		private System.Nullable<int> _SeqNoPass;

		private string _PrintTitle;

		private System.Nullable<int> _FGADocumentID;

		private System.Nullable<System.Guid> _SignatureGUID;

		private System.Nullable<System.DateTime> _SignDate;

		private string _Info;

		private bool _IsExclude;

		private bool _IsFromSystem;

		private EntitySet<AppendixCommDocs> _AppendixCommDocs;

		private EntityRef<C_FGA> _FGA;

		private EntityRef<C_FGADocument> _FGADocument;

		private EntityRef<N_File> _File;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<C_Measure> _Measure;

		private EntityRef<OrderDoc> _OrderDoc;

		private EntityRef<C_DocumentSourceType> _SourceType;

		private EntityRef<DbFile> _FileEx;

		private EntityRef<DbFile> _Signature;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCommodityDocumentGUIDChanging(System.Guid value);
		partial void OnCommodityDocumentGUIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnDocDateChanging(System.Nullable<System.DateTime> value);
		partial void OnDocDateChanged();
		partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
		partial void OnEndDateChanged();
		partial void OnResolvedQuantityChanging(System.Nullable<decimal> value);
		partial void OnResolvedQuantityChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnOrderDocGUIDChanging(System.Guid value);
		partial void OnOrderDocGUIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnMeasureIDChanging(System.Nullable<int> value);
		partial void OnMeasureIDChanged();
		partial void OnPagesChanging(System.Nullable<int> value);
		partial void OnPagesChanged();
		partial void OnFileFileIDChanging(System.Nullable<int> value);
		partial void OnFileFileIDChanged();
		partial void OnLawOrganChanging(string value);
		partial void OnLawOrganChanged();
		partial void OnDocumentTypeChanging(string value);
		partial void OnDocumentTypeChanged();
		partial void OnGuidChanging(System.Nullable<System.Guid> value);
		partial void OnGuidChanged();
		partial void OnDocNoChanging(string value);
		partial void OnDocNoChanged();
		partial void OnOldIDChanging(System.Nullable<decimal> value);
		partial void OnOldIDChanged();
		partial void OnIsAttachChanging(bool value);
		partial void OnIsAttachChanged();
		partial void OnIsCommDocChanging(bool value);
		partial void OnIsCommDocChanged();
		partial void OnSourceTypeIDChanging(System.Nullable<int> value);
		partial void OnSourceTypeIDChanged();
		partial void OnFGAIDChanging(System.Nullable<int> value);
		partial void OnFGAIDChanged();
		partial void OnIsRequestFromSMEVChanging(bool value);
		partial void OnIsRequestFromSMEVChanged();
		partial void OnIsFromApplicantChanging(bool value);
		partial void OnIsFromApplicantChanged();
		partial void OnSMEVStatusCodeChanging(char value);
		partial void OnSMEVStatusCodeChanged();
		partial void OnSMEVRejectionMessageChanging(string value);
		partial void OnSMEVRejectionMessageChanged();
		partial void OnAddInfoChanging(string value);
		partial void OnAddInfoChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnFileExGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnFileExGUIDChanged();
		partial void OnDocumentTypeIDChanging(System.Nullable<int> value);
		partial void OnDocumentTypeIDChanged();
		partial void OnRequestKeyChanging(System.Nullable<System.Guid> value);
		partial void OnRequestKeyChanged();
		partial void OnOutOfDateChanging(bool value);
		partial void OnOutOfDateChanged();
		partial void OnSeqNoPassChanging(System.Nullable<int> value);
		partial void OnSeqNoPassChanged();
		partial void OnPrintTitleChanging(string value);
		partial void OnPrintTitleChanged();
		partial void OnFGADocumentIDChanging(System.Nullable<int> value);
		partial void OnFGADocumentIDChanged();
		partial void OnSignatureGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnSignatureGUIDChanged();
		partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
		partial void OnSignDateChanged();
		partial void OnInfoChanging(string value);
		partial void OnInfoChanged();
		partial void OnIsExcludeChanging(bool value);
		partial void OnIsExcludeChanged();
		partial void OnIsFromSystemChanging(bool value);
		partial void OnIsFromSystemChanged();
		#endregion

		public CommodityDocument()
		{
			this._AppendixCommDocs = new EntitySet<AppendixCommDocs>(new Action<AppendixCommDocs>(this.attach_AppendixCommDocs), new Action<AppendixCommDocs>(this.detach_AppendixCommDocs));
			this._FGA = default(EntityRef<C_FGA>);
			this._FGADocument = default(EntityRef<C_FGADocument>);
			this._File = default(EntityRef<N_File>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Measure = default(EntityRef<C_Measure>);
			this._OrderDoc = default(EntityRef<OrderDoc>);
			this._SourceType = default(EntityRef<C_DocumentSourceType>);
			this._FileEx = default(EntityRef<DbFile>);
			this._Signature = default(EntityRef<DbFile>);
			OnCreated();
		}

		[Column(Storage = "_CommodityDocumentGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid CommodityDocumentGUID
		{
			get
			{
				return this._CommodityDocumentGUID;
			}
			set
			{
				if ((this._CommodityDocumentGUID != value))
				{
					this.OnCommodityDocumentGUIDChanging(value);
					this.SendPropertyChanging();
					this._CommodityDocumentGUID = value;
					this.SendPropertyChanged("CommodityDocumentGUID");
					this.OnCommodityDocumentGUIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_DocDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this.OnDocDateChanging(value);
					this.SendPropertyChanging();
					this._DocDate = value;
					this.SendPropertyChanged("DocDate");
					this.OnDocDateChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_ResolvedQuantity", DbType = "Decimal(20,7)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedQuantity
		{
			get
			{
				return this._ResolvedQuantity;
			}
			set
			{
				if ((this._ResolvedQuantity != value))
				{
					this.OnResolvedQuantityChanging(value);
					this.SendPropertyChanging();
					this._ResolvedQuantity = value;
					this.SendPropertyChanged("ResolvedQuantity");
					this.OnResolvedQuantityChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_OrderDocGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_MeasureID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					if (this._Measure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}

		[Column(Storage = "_Pages", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				if ((this._Pages != value))
				{
					this.OnPagesChanging(value);
					this.SendPropertyChanging();
					this._Pages = value;
					this.SendPropertyChanged("Pages");
					this.OnPagesChanged();
				}
			}
		}

		[Column(Storage = "_FileFileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> FileFileID
		{
			get
			{
				return this._FileFileID;
			}
			set
			{
				if ((this._FileFileID != value))
				{
					if (this._File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileFileID = value;
					this.SendPropertyChanged("FileFileID");
					this.OnFileFileIDChanged();
				}
			}
		}

		[Column(Storage = "_LawOrgan", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string LawOrgan
		{
			get
			{
				return this._LawOrgan;
			}
			set
			{
				if ((this._LawOrgan != value))
				{
					this.OnLawOrganChanging(value);
					this.SendPropertyChanging();
					this._LawOrgan = value;
					this.SendPropertyChanged("LawOrgan");
					this.OnLawOrganChanged();
				}
			}
		}

		[Column(Storage = "_DocumentType", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DocumentType
		{
			get
			{
				return this._DocumentType;
			}
			set
			{
				if ((this._DocumentType != value))
				{
					this.OnDocumentTypeChanging(value);
					this.SendPropertyChanging();
					this._DocumentType = value;
					this.SendPropertyChanged("DocumentType");
					this.OnDocumentTypeChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_DocNo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DocNo
		{
			get
			{
				return this._DocNo;
			}
			set
			{
				if ((this._DocNo != value))
				{
					this.OnDocNoChanging(value);
					this.SendPropertyChanging();
					this._DocNo = value;
					this.SendPropertyChanged("DocNo");
					this.OnDocNoChanged();
				}
			}
		}

		[Column(Storage = "_OldID", DbType = "Decimal(14,0)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}

		[Column(Storage = "_IsAttach", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsAttach
		{
			get
			{
				return this._IsAttach;
			}
			set
			{
				if ((this._IsAttach != value))
				{
					this.OnIsAttachChanging(value);
					this.SendPropertyChanging();
					this._IsAttach = value;
					this.SendPropertyChanged("IsAttach");
					this.OnIsAttachChanged();
				}
			}
		}

		[Column(Storage = "_IsCommDoc", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsCommDoc
		{
			get
			{
				return this._IsCommDoc;
			}
			set
			{
				if ((this._IsCommDoc != value))
				{
					this.OnIsCommDocChanging(value);
					this.SendPropertyChanging();
					this._IsCommDoc = value;
					this.SendPropertyChanged("IsCommDoc");
					this.OnIsCommDocChanged();
				}
			}
		}

		[Column(Storage = "_SourceTypeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> SourceTypeID
		{
			get
			{
				return this._SourceTypeID;
			}
			set
			{
				if ((this._SourceTypeID != value))
				{
					if (this._SourceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SourceTypeID = value;
					this.SendPropertyChanged("SourceTypeID");
					this.OnSourceTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_FGAID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> FGAID
		{
			get
			{
				return this._FGAID;
			}
			set
			{
				if ((this._FGAID != value))
				{
					if (this._FGA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFGAIDChanging(value);
					this.SendPropertyChanging();
					this._FGAID = value;
					this.SendPropertyChanged("FGAID");
					this.OnFGAIDChanged();
				}
			}
		}

		[Column(Storage = "_IsRequestFromSMEV", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsRequestFromSMEV
		{
			get
			{
				return this._IsRequestFromSMEV;
			}
			set
			{
				if ((this._IsRequestFromSMEV != value))
				{
					this.OnIsRequestFromSMEVChanging(value);
					this.SendPropertyChanging();
					this._IsRequestFromSMEV = value;
					this.SendPropertyChanged("IsRequestFromSMEV");
					this.OnIsRequestFromSMEVChanged();
				}
			}
		}

		[Column(Storage = "_IsFromApplicant", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsFromApplicant
		{
			get
			{
				return this._IsFromApplicant;
			}
			set
			{
				if ((this._IsFromApplicant != value))
				{
					this.OnIsFromApplicantChanging(value);
					this.SendPropertyChanging();
					this._IsFromApplicant = value;
					this.SendPropertyChanged("IsFromApplicant");
					this.OnIsFromApplicantChanged();
				}
			}
		}

		[Column(Storage = "_SMEVStatusCode", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char SMEVStatusCode
		{
			get
			{
				return this._SMEVStatusCode;
			}
			set
			{
				if ((this._SMEVStatusCode != value))
				{
					this.OnSMEVStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._SMEVStatusCode = value;
					this.SendPropertyChanged("SMEVStatusCode");
					this.OnSMEVStatusCodeChanged();
				}
			}
		}

		[Column(Storage = "_SMEVRejectionMessage", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SMEVRejectionMessage
		{
			get
			{
				return this._SMEVRejectionMessage;
			}
			set
			{
				if ((this._SMEVRejectionMessage != value))
				{
					this.OnSMEVRejectionMessageChanging(value);
					this.SendPropertyChanging();
					this._SMEVRejectionMessage = value;
					this.SendPropertyChanged("SMEVRejectionMessage");
					this.OnSMEVRejectionMessageChanged();
				}
			}
		}

		[Column(Storage = "_AddInfo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string AddInfo
		{
			get
			{
				return this._AddInfo;
			}
			set
			{
				if ((this._AddInfo != value))
				{
					this.OnAddInfoChanging(value);
					this.SendPropertyChanging();
					this._AddInfo = value;
					this.SendPropertyChanged("AddInfo");
					this.OnAddInfoChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_FileExGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileExGUID
		{
			get
			{
				return this._FileExGUID;
			}
			set
			{
				if ((this._FileExGUID != value))
				{
					if (this._FileEx.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileExGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileExGUID = value;
					this.SendPropertyChanged("FileExGUID");
					this.OnFileExGUIDChanged();
				}
			}
		}

		[Column(Storage = "_DocumentTypeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> DocumentTypeID
		{
			get
			{
				return this._DocumentTypeID;
			}
			set
			{
				if ((this._DocumentTypeID != value))
				{
					this.OnDocumentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentTypeID = value;
					this.SendPropertyChanged("DocumentTypeID");
					this.OnDocumentTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_RequestKey", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> RequestKey
		{
			get
			{
				return this._RequestKey;
			}
			set
			{
				if ((this._RequestKey != value))
				{
					this.OnRequestKeyChanging(value);
					this.SendPropertyChanging();
					this._RequestKey = value;
					this.SendPropertyChanged("RequestKey");
					this.OnRequestKeyChanged();
				}
			}
		}

		[Column(Storage = "_OutOfDate", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool OutOfDate
		{
			get
			{
				return this._OutOfDate;
			}
			set
			{
				if ((this._OutOfDate != value))
				{
					this.OnOutOfDateChanging(value);
					this.SendPropertyChanging();
					this._OutOfDate = value;
					this.SendPropertyChanged("OutOfDate");
					this.OnOutOfDateChanged();
				}
			}
		}

		[Column(Storage = "_SeqNoPass", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> SeqNoPass
		{
			get
			{
				return this._SeqNoPass;
			}
			set
			{
				if ((this._SeqNoPass != value))
				{
					this.OnSeqNoPassChanging(value);
					this.SendPropertyChanging();
					this._SeqNoPass = value;
					this.SendPropertyChanged("SeqNoPass");
					this.OnSeqNoPassChanged();
				}
			}
		}

		[Column(Storage = "_PrintTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string PrintTitle
		{
			get
			{
				return this._PrintTitle;
			}
			set
			{
				if ((this._PrintTitle != value))
				{
					this.OnPrintTitleChanging(value);
					this.SendPropertyChanging();
					this._PrintTitle = value;
					this.SendPropertyChanged("PrintTitle");
					this.OnPrintTitleChanged();
				}
			}
		}

		[Column(Storage = "_FGADocumentID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> FGADocumentID
		{
			get
			{
				return this._FGADocumentID;
			}
			set
			{
				if ((this._FGADocumentID != value))
				{
					if (this._FGADocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFGADocumentIDChanging(value);
					this.SendPropertyChanging();
					this._FGADocumentID = value;
					this.SendPropertyChanged("FGADocumentID");
					this.OnFGADocumentIDChanged();
				}
			}
		}

		[Column(Storage = "_SignatureGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> SignatureGUID
		{
			get
			{
				return this._SignatureGUID;
			}
			set
			{
				if ((this._SignatureGUID != value))
				{
					if (this._Signature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSignatureGUIDChanging(value);
					this.SendPropertyChanging();
					this._SignatureGUID = value;
					this.SendPropertyChanged("SignatureGUID");
					this.OnSignatureGUIDChanged();
				}
			}
		}

		[Column(Storage = "_SignDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}

		[Column(Storage = "_Info", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}

		[Column(Storage = "_IsExclude", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsExclude
		{
			get
			{
				return this._IsExclude;
			}
			set
			{
				if ((this._IsExclude != value))
				{
					this.OnIsExcludeChanging(value);
					this.SendPropertyChanging();
					this._IsExclude = value;
					this.SendPropertyChanged("IsExclude");
					this.OnIsExcludeChanged();
				}
			}
		}

		[Column(Storage = "_IsFromSystem", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsFromSystem
		{
			get
			{
				return this._IsFromSystem;
			}
			set
			{
				if ((this._IsFromSystem != value))
				{
					this.OnIsFromSystemChanging(value);
					this.SendPropertyChanging();
					this._IsFromSystem = value;
					this.SendPropertyChanged("IsFromSystem");
					this.OnIsFromSystemChanged();
				}
			}
		}

		[Association(Name = "FK_AppendixCommDocs_CommDocs", Storage = "_AppendixCommDocs", ThisKey = "CommodityDocumentGUID", OtherKey = "CommDocsGUID", DeleteRule = "CASCADE")]
		public EntitySet<AppendixCommDocs> AppendixCommDocs
		{
			get
			{
				return this._AppendixCommDocs;
			}
			set
			{
				this._AppendixCommDocs.Assign(value);
			}
		}

		[Association(Name = "FK_CommodityDocument_FGA", Storage = "_FGA", ThisKey = "FGAID", OtherKey = "FGAID", IsForeignKey = true)]
		public C_FGA FGA
		{
			get
			{
				return this._FGA.Entity;
			}
			set
			{
				C_FGA previousValue = this._FGA.Entity;
				if (((previousValue != value)
							|| (this._FGA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FGA.Entity = null;
						previousValue.CommodityDocument.Remove(this);
					}
					this._FGA.Entity = value;
					if ((value != null))
					{
						value.CommodityDocument.Add(this);
						this._FGAID = value.FGAID;
					}
					else
					{
						this._FGAID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FGA");
				}
			}
		}

		[Association(Name = "FK_CommodityDocument_FGADocument", Storage = "_FGADocument", ThisKey = "FGADocumentID", OtherKey = "FGADocumentID", IsForeignKey = true)]
		public C_FGADocument FGADocument
		{
			get
			{
				return this._FGADocument.Entity;
			}
			set
			{
				C_FGADocument previousValue = this._FGADocument.Entity;
				if (((previousValue != value)
							|| (this._FGADocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FGADocument.Entity = null;
						previousValue.CommodityDocument.Remove(this);
					}
					this._FGADocument.Entity = value;
					if ((value != null))
					{
						value.CommodityDocument.Add(this);
						this._FGADocumentID = value.FGADocumentID;
					}
					else
					{
						this._FGADocumentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FGADocument");
				}
			}
		}

		[Association(Name = "FK_CommodityDocument_File", Storage = "_File", ThisKey = "FileFileID", OtherKey = "FileID", IsForeignKey = true)]
		public N_File File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				N_File previousValue = this._File.Entity;
				if (((previousValue != value)
							|| (this._File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File.Entity = null;
						previousValue.CommodityDocument.Remove(this);
					}
					this._File.Entity = value;
					if ((value != null))
					{
						value.CommodityDocument.Add(this);
						this._FileFileID = value.FileID;
					}
					else
					{
						this._FileFileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("File");
				}
			}
		}

		[Association(Name = "FK_CommodityDocument_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.CommodityDocument.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.CommodityDocument.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_CommodityDocument_Measure", Storage = "_Measure", ThisKey = "MeasureID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure Measure
		{
			get
			{
				return this._Measure.Entity;
			}
			set
			{
				C_Measure previousValue = this._Measure.Entity;
				if (((previousValue != value)
							|| (this._Measure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure.Entity = null;
						previousValue.CommodityDocument.Remove(this);
					}
					this._Measure.Entity = value;
					if ((value != null))
					{
						value.CommodityDocument.Add(this);
						this._MeasureID = value.MeasureID;
					}
					else
					{
						this._MeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Measure");
				}
			}
		}

		[Association(Name = "FK_CommodityDocument_OrderDoc", Storage = "_OrderDoc", ThisKey = "OrderDocGUID", OtherKey = "OrderGUID", IsForeignKey = true, DeleteOnNull = true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value)
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.CommodityDocs.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.CommodityDocs.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}

		[Association(Name = "FK_CommodityDocument_SourceType", Storage = "_SourceType", ThisKey = "SourceTypeID", OtherKey = "DocumentSourceTypeID", IsForeignKey = true)]
		public C_DocumentSourceType SourceType
		{
			get
			{
				return this._SourceType.Entity;
			}
			set
			{
				C_DocumentSourceType previousValue = this._SourceType.Entity;
				if (((previousValue != value)
							|| (this._SourceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SourceType.Entity = null;
						previousValue.CommodityDocument.Remove(this);
					}
					this._SourceType.Entity = value;
					if ((value != null))
					{
						value.CommodityDocument.Add(this);
						this._SourceTypeID = value.DocumentSourceTypeID;
					}
					else
					{
						this._SourceTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SourceType");
				}
			}
		}

		[Association(Name = "FK_CommodityDocument_FileEx", Storage = "_FileEx", ThisKey = "FileExGUID", OtherKey = "ID", IsForeignKey = true)]
		public DbFile FileEx
		{
			get
			{
				return this._FileEx.Entity;
			}
			set
			{
				if ((this._FileEx.Entity != value))
				{
					this.SendPropertyChanging();
					this._FileEx.Entity = value;
					this.SendPropertyChanged("FileEx");
				}
			}
		}

		[Association(Name = "FK_CommodityDocument_Signature", Storage = "_Signature", ThisKey = "SignatureGUID", OtherKey = "ID", IsForeignKey = true)]
		public DbFile Signature
		{
			get
			{
				return this._Signature.Entity;
			}
			set
			{
				if ((this._Signature.Entity != value))
				{
					this.SendPropertyChanging();
					this._Signature.Entity = value;
					this.SendPropertyChanged("Signature");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_AppendixCommDocs(AppendixCommDocs entity)
		{
			this.SendPropertyChanging();
			entity.CommDocs = this;
		}

		private void detach_AppendixCommDocs(AppendixCommDocs entity)
		{
			this.SendPropertyChanging();
			entity.CommDocs = null;
		}
	}

	[Table(Name = "dbo.Contractor")]
	public partial class Contractor : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _ContractorGUID;

		private string _INN;

		private string _OKPO;

		private char _ContractorType;

		private string _Title;

		private string _ShortName;

		private string _JuridicalAddress;

		private string _PostAddress;

		private string _Phone;

		private string _Fax;

		private string _Email;

		private string _PassportNumber;

		private string _PassportSerial;

		private string _PassportIssuedBy;

		private System.Nullable<System.DateTime> _PassportIssuedDate;

		private System.Nullable<int> _CreatorRepresentationID;

		private string _AddInfo;

		private string _EGRUL;

		private System.Nullable<System.DateTime> _CloseDate;

		private System.Nullable<System.Guid> _PrevContractorGUID;

		private int _CountryID;

		private System.DateTime _LastModifiedDate;

		private bool _IsDeleted;

		private System.Nullable<decimal> _OldID;

		private int _LastModifiedUserID;

		private bool _IsPersonal;

		private System.Nullable<int> _RFSubjectID;

		private string _BankTitle;

		private string _BankAddress;

		private string _BankBIK;

		private string _BankAccount;

		private string _BankCorrespondentAccount;

		private string _KPP;

		private EntityRef<C_Country> _Country;

		private EntityRef<Representation> _CreatorRepresentation;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<Contractor> _PrevContractor;

		private EntitySet<Contractor> _ContractorGU;

		private EntityRef<C_RFSubject> _RFSubject;

		private EntitySet<ContractorChiefPerson> _ChiefPersons;

		private EntitySet<ForeignAuthorization> _ForeignAuthorization;

		private EntitySet<HST_Contractor> _HST_Contractor;

		private EntitySet<HST_Contractor> _HST_Contractor_PrevContractor;

		private EntitySet<PaymentOrder> _PaymentOrder;

		private EntitySet<QuotaDistribution> _QuotaDistribution;

		private EntitySet<QuotaRequest> _QuotaRequest;

		private EntitySet<VisitRecord> _VisitRecord;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnContractorGUIDChanging(System.Guid value);
		partial void OnContractorGUIDChanged();
		partial void OnINNChanging(string value);
		partial void OnINNChanged();
		partial void OnOKPOChanging(string value);
		partial void OnOKPOChanged();
		partial void OnContractorTypeChanging(char value);
		partial void OnContractorTypeChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnShortNameChanging(string value);
		partial void OnShortNameChanged();
		partial void OnJuridicalAddressChanging(string value);
		partial void OnJuridicalAddressChanged();
		partial void OnPostAddressChanging(string value);
		partial void OnPostAddressChanged();
		partial void OnPhoneChanging(string value);
		partial void OnPhoneChanged();
		partial void OnFaxChanging(string value);
		partial void OnFaxChanged();
		partial void OnEmailChanging(string value);
		partial void OnEmailChanged();
		partial void OnPassportNumberChanging(string value);
		partial void OnPassportNumberChanged();
		partial void OnPassportSerialChanging(string value);
		partial void OnPassportSerialChanged();
		partial void OnPassportIssuedByChanging(string value);
		partial void OnPassportIssuedByChanged();
		partial void OnPassportIssuedDateChanging(System.Nullable<System.DateTime> value);
		partial void OnPassportIssuedDateChanged();
		partial void OnCreatorRepresentationIDChanging(System.Nullable<int> value);
		partial void OnCreatorRepresentationIDChanged();
		partial void OnAddInfoChanging(string value);
		partial void OnAddInfoChanged();
		partial void OnEGRULChanging(string value);
		partial void OnEGRULChanged();
		partial void OnCloseDateChanging(System.Nullable<System.DateTime> value);
		partial void OnCloseDateChanged();
		partial void OnPrevContractorGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnPrevContractorGUIDChanged();
		partial void OnCountryIDChanging(int value);
		partial void OnCountryIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnOldIDChanging(System.Nullable<decimal> value);
		partial void OnOldIDChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnIsPersonalChanging(bool value);
		partial void OnIsPersonalChanged();
		partial void OnRFSubjectIDChanging(System.Nullable<int> value);
		partial void OnRFSubjectIDChanged();
		partial void OnBankTitleChanging(string value);
		partial void OnBankTitleChanged();
		partial void OnBankAddressChanging(string value);
		partial void OnBankAddressChanged();
		partial void OnBankBIKChanging(string value);
		partial void OnBankBIKChanged();
		partial void OnBankAccountChanging(string value);
		partial void OnBankAccountChanged();
		partial void OnBankCorrespondentAccountChanging(string value);
		partial void OnBankCorrespondentAccountChanged();
		partial void OnKPPChanging(string value);
		partial void OnKPPChanged();
		#endregion

		public Contractor()
		{
			this._Country = default(EntityRef<C_Country>);
			this._CreatorRepresentation = default(EntityRef<Representation>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._PrevContractor = default(EntityRef<Contractor>);
			this._ContractorGU = new EntitySet<Contractor>(new Action<Contractor>(this.attach_ContractorGU), new Action<Contractor>(this.detach_ContractorGU));
			this._RFSubject = default(EntityRef<C_RFSubject>);
			this._ChiefPersons = new EntitySet<ContractorChiefPerson>(new Action<ContractorChiefPerson>(this.attach_ChiefPersons), new Action<ContractorChiefPerson>(this.detach_ChiefPersons));
			this._ForeignAuthorization = new EntitySet<ForeignAuthorization>(new Action<ForeignAuthorization>(this.attach_ForeignAuthorization), new Action<ForeignAuthorization>(this.detach_ForeignAuthorization));
			this._HST_Contractor = new EntitySet<HST_Contractor>(new Action<HST_Contractor>(this.attach_HST_Contractor), new Action<HST_Contractor>(this.detach_HST_Contractor));
			this._HST_Contractor_PrevContractor = new EntitySet<HST_Contractor>(new Action<HST_Contractor>(this.attach_HST_Contractor_PrevContractor), new Action<HST_Contractor>(this.detach_HST_Contractor_PrevContractor));
			this._PaymentOrder = new EntitySet<PaymentOrder>(new Action<PaymentOrder>(this.attach_PaymentOrder), new Action<PaymentOrder>(this.detach_PaymentOrder));
			this._QuotaDistribution = new EntitySet<QuotaDistribution>(new Action<QuotaDistribution>(this.attach_QuotaDistribution), new Action<QuotaDistribution>(this.detach_QuotaDistribution));
			this._QuotaRequest = new EntitySet<QuotaRequest>(new Action<QuotaRequest>(this.attach_QuotaRequest), new Action<QuotaRequest>(this.detach_QuotaRequest));
			this._VisitRecord = new EntitySet<VisitRecord>(new Action<VisitRecord>(this.attach_VisitRecord), new Action<VisitRecord>(this.detach_VisitRecord));
			OnCreated();
		}

		[Column(Storage = "_ContractorGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					this.OnContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorGUID = value;
					this.SendPropertyChanged("ContractorGUID");
					this.OnContractorGUIDChanged();
				}
			}
		}

		[Column(Storage = "_INN", DbType = "NVarChar(12) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string INN
		{
			get
			{
				return this._INN;
			}
			set
			{
				if ((this._INN != value))
				{
					this.OnINNChanging(value);
					this.SendPropertyChanging();
					this._INN = value;
					this.SendPropertyChanged("INN");
					this.OnINNChanged();
				}
			}
		}

		[Column(Storage = "_OKPO", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string OKPO
		{
			get
			{
				return this._OKPO;
			}
			set
			{
				if ((this._OKPO != value))
				{
					this.OnOKPOChanging(value);
					this.SendPropertyChanging();
					this._OKPO = value;
					this.SendPropertyChanged("OKPO");
					this.OnOKPOChanged();
				}
			}
		}

		[Column(Storage = "_ContractorType", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char ContractorType
		{
			get
			{
				return this._ContractorType;
			}
			set
			{
				if ((this._ContractorType != value))
				{
					this.OnContractorTypeChanging(value);
					this.SendPropertyChanging();
					this._ContractorType = value;
					this.SendPropertyChanged("ContractorType");
					this.OnContractorTypeChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_ShortName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}

		[Column(Storage = "_JuridicalAddress", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string JuridicalAddress
		{
			get
			{
				return this._JuridicalAddress;
			}
			set
			{
				if ((this._JuridicalAddress != value))
				{
					this.OnJuridicalAddressChanging(value);
					this.SendPropertyChanging();
					this._JuridicalAddress = value;
					this.SendPropertyChanged("JuridicalAddress");
					this.OnJuridicalAddressChanged();
				}
			}
		}

		[Column(Storage = "_PostAddress", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string PostAddress
		{
			get
			{
				return this._PostAddress;
			}
			set
			{
				if ((this._PostAddress != value))
				{
					this.OnPostAddressChanging(value);
					this.SendPropertyChanging();
					this._PostAddress = value;
					this.SendPropertyChanged("PostAddress");
					this.OnPostAddressChanged();
				}
			}
		}

		[Column(Storage = "_Phone", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}

		[Column(Storage = "_Fax", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}

		[Column(Storage = "_Email", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}

		[Column(Storage = "_PassportNumber", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string PassportNumber
		{
			get
			{
				return this._PassportNumber;
			}
			set
			{
				if ((this._PassportNumber != value))
				{
					this.OnPassportNumberChanging(value);
					this.SendPropertyChanging();
					this._PassportNumber = value;
					this.SendPropertyChanged("PassportNumber");
					this.OnPassportNumberChanged();
				}
			}
		}

		[Column(Storage = "_PassportSerial", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string PassportSerial
		{
			get
			{
				return this._PassportSerial;
			}
			set
			{
				if ((this._PassportSerial != value))
				{
					this.OnPassportSerialChanging(value);
					this.SendPropertyChanging();
					this._PassportSerial = value;
					this.SendPropertyChanged("PassportSerial");
					this.OnPassportSerialChanged();
				}
			}
		}

		[Column(Storage = "_PassportIssuedBy", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string PassportIssuedBy
		{
			get
			{
				return this._PassportIssuedBy;
			}
			set
			{
				if ((this._PassportIssuedBy != value))
				{
					this.OnPassportIssuedByChanging(value);
					this.SendPropertyChanging();
					this._PassportIssuedBy = value;
					this.SendPropertyChanged("PassportIssuedBy");
					this.OnPassportIssuedByChanged();
				}
			}
		}

		[Column(Storage = "_PassportIssuedDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PassportIssuedDate
		{
			get
			{
				return this._PassportIssuedDate;
			}
			set
			{
				if ((this._PassportIssuedDate != value))
				{
					this.OnPassportIssuedDateChanging(value);
					this.SendPropertyChanging();
					this._PassportIssuedDate = value;
					this.SendPropertyChanged("PassportIssuedDate");
					this.OnPassportIssuedDateChanged();
				}
			}
		}

		[Column(Storage = "_CreatorRepresentationID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CreatorRepresentationID
		{
			get
			{
				return this._CreatorRepresentationID;
			}
			set
			{
				if ((this._CreatorRepresentationID != value))
				{
					if (this._CreatorRepresentation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorRepresentationID = value;
					this.SendPropertyChanged("CreatorRepresentationID");
					this.OnCreatorRepresentationIDChanged();
				}
			}
		}

		[Column(Storage = "_AddInfo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string AddInfo
		{
			get
			{
				return this._AddInfo;
			}
			set
			{
				if ((this._AddInfo != value))
				{
					this.OnAddInfoChanging(value);
					this.SendPropertyChanging();
					this._AddInfo = value;
					this.SendPropertyChanged("AddInfo");
					this.OnAddInfoChanged();
				}
			}
		}

		[Column(Storage = "_EGRUL", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string EGRUL
		{
			get
			{
				return this._EGRUL;
			}
			set
			{
				if ((this._EGRUL != value))
				{
					this.OnEGRULChanging(value);
					this.SendPropertyChanging();
					this._EGRUL = value;
					this.SendPropertyChanged("EGRUL");
					this.OnEGRULChanged();
				}
			}
		}

		[Column(Storage = "_CloseDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CloseDate
		{
			get
			{
				return this._CloseDate;
			}
			set
			{
				if ((this._CloseDate != value))
				{
					this.OnCloseDateChanging(value);
					this.SendPropertyChanging();
					this._CloseDate = value;
					this.SendPropertyChanged("CloseDate");
					this.OnCloseDateChanged();
				}
			}
		}

		[Column(Storage = "_PrevContractorGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> PrevContractorGUID
		{
			get
			{
				return this._PrevContractorGUID;
			}
			set
			{
				if ((this._PrevContractorGUID != value))
				{
					if (this._PrevContractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrevContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._PrevContractorGUID = value;
					this.SendPropertyChanged("PrevContractorGUID");
					this.OnPrevContractorGUIDChanged();
				}
			}
		}

		[Column(Storage = "_CountryID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_OldID", DbType = "Decimal(14,0)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_IsPersonal", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsPersonal
		{
			get
			{
				return this._IsPersonal;
			}
			set
			{
				if ((this._IsPersonal != value))
				{
					this.OnIsPersonalChanging(value);
					this.SendPropertyChanging();
					this._IsPersonal = value;
					this.SendPropertyChanged("IsPersonal");
					this.OnIsPersonalChanged();
				}
			}
		}

		[Column(Storage = "_RFSubjectID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> RFSubjectID
		{
			get
			{
				return this._RFSubjectID;
			}
			set
			{
				if ((this._RFSubjectID != value))
				{
					if (this._RFSubject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRFSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._RFSubjectID = value;
					this.SendPropertyChanged("RFSubjectID");
					this.OnRFSubjectIDChanged();
				}
			}
		}

		[Column(Storage = "_BankTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BankTitle
		{
			get
			{
				return this._BankTitle;
			}
			set
			{
				if ((this._BankTitle != value))
				{
					this.OnBankTitleChanging(value);
					this.SendPropertyChanging();
					this._BankTitle = value;
					this.SendPropertyChanged("BankTitle");
					this.OnBankTitleChanged();
				}
			}
		}

		[Column(Storage = "_BankAddress", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BankAddress
		{
			get
			{
				return this._BankAddress;
			}
			set
			{
				if ((this._BankAddress != value))
				{
					this.OnBankAddressChanging(value);
					this.SendPropertyChanging();
					this._BankAddress = value;
					this.SendPropertyChanged("BankAddress");
					this.OnBankAddressChanged();
				}
			}
		}

		[Column(Storage = "_BankBIK", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BankBIK
		{
			get
			{
				return this._BankBIK;
			}
			set
			{
				if ((this._BankBIK != value))
				{
					this.OnBankBIKChanging(value);
					this.SendPropertyChanging();
					this._BankBIK = value;
					this.SendPropertyChanged("BankBIK");
					this.OnBankBIKChanged();
				}
			}
		}

		[Column(Storage = "_BankAccount", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BankAccount
		{
			get
			{
				return this._BankAccount;
			}
			set
			{
				if ((this._BankAccount != value))
				{
					this.OnBankAccountChanging(value);
					this.SendPropertyChanging();
					this._BankAccount = value;
					this.SendPropertyChanged("BankAccount");
					this.OnBankAccountChanged();
				}
			}
		}

		[Column(Storage = "_BankCorrespondentAccount", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BankCorrespondentAccount
		{
			get
			{
				return this._BankCorrespondentAccount;
			}
			set
			{
				if ((this._BankCorrespondentAccount != value))
				{
					this.OnBankCorrespondentAccountChanging(value);
					this.SendPropertyChanging();
					this._BankCorrespondentAccount = value;
					this.SendPropertyChanged("BankCorrespondentAccount");
					this.OnBankCorrespondentAccountChanged();
				}
			}
		}

		[Column(Storage = "_KPP", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string KPP
		{
			get
			{
				return this._KPP;
			}
			set
			{
				if ((this._KPP != value))
				{
					this.OnKPPChanging(value);
					this.SendPropertyChanging();
					this._KPP = value;
					this.SendPropertyChanged("KPP");
					this.OnKPPChanged();
				}
			}
		}

		[Association(Name = "FK_Contractor_Country", Storage = "_Country", ThisKey = "CountryID", OtherKey = "CountryID", IsForeignKey = true)]
		public C_Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				C_Country previousValue = this._Country.Entity;
				if (((previousValue != value)
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Contractor.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Contractor.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}

		[Association(Name = "FK_Contractor_CreatorRepresentation", Storage = "_CreatorRepresentation", ThisKey = "CreatorRepresentationID", OtherKey = "RepresentationID", IsForeignKey = true)]
		public Representation CreatorRepresentation
		{
			get
			{
				return this._CreatorRepresentation.Entity;
			}
			set
			{
				Representation previousValue = this._CreatorRepresentation.Entity;
				if (((previousValue != value)
							|| (this._CreatorRepresentation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatorRepresentation.Entity = null;
						previousValue.Contractor.Remove(this);
					}
					this._CreatorRepresentation.Entity = value;
					if ((value != null))
					{
						value.Contractor.Add(this);
						this._CreatorRepresentationID = value.RepresentationID;
					}
					else
					{
						this._CreatorRepresentationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CreatorRepresentation");
				}
			}
		}

		[Association(Name = "FK_Contractor_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.Contractor.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.Contractor.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_Contractor_PrevContractor", Storage = "_PrevContractor", ThisKey = "PrevContractorGUID", OtherKey = "ContractorGUID", IsForeignKey = true)]
		public Contractor PrevContractor
		{
			get
			{
				return this._PrevContractor.Entity;
			}
			set
			{
				Contractor previousValue = this._PrevContractor.Entity;
				if (((previousValue != value)
							|| (this._PrevContractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PrevContractor.Entity = null;
						previousValue.ContractorGU.Remove(this);
					}
					this._PrevContractor.Entity = value;
					if ((value != null))
					{
						value.ContractorGU.Add(this);
						this._PrevContractorGUID = value.ContractorGUID;
					}
					else
					{
						this._PrevContractorGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PrevContractor");
				}
			}
		}

		[Association(Name = "FK_Contractor_PrevContractor", Storage = "_ContractorGU", ThisKey = "ContractorGUID", OtherKey = "PrevContractorGUID", DeleteRule = "NO ACTION")]
		public EntitySet<Contractor> ContractorGU
		{
			get
			{
				return this._ContractorGU;
			}
			set
			{
				this._ContractorGU.Assign(value);
			}
		}

		[Association(Name = "FK_Contractor_RFSubject", Storage = "_RFSubject", ThisKey = "RFSubjectID", OtherKey = "RFSubjectID", IsForeignKey = true)]
		public C_RFSubject RFSubject
		{
			get
			{
				return this._RFSubject.Entity;
			}
			set
			{
				C_RFSubject previousValue = this._RFSubject.Entity;
				if (((previousValue != value)
							|| (this._RFSubject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RFSubject.Entity = null;
						previousValue.Contractor.Remove(this);
					}
					this._RFSubject.Entity = value;
					if ((value != null))
					{
						value.Contractor.Add(this);
						this._RFSubjectID = value.RFSubjectID;
					}
					else
					{
						this._RFSubjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RFSubject");
				}
			}
		}

		[Association(Name = "FK_ContractorChiefPerson_Contractor", Storage = "_ChiefPersons", ThisKey = "ContractorGUID", OtherKey = "ContractorGUID", DeleteRule = "CASCADE")]
		public EntitySet<ContractorChiefPerson> ChiefPersons
		{
			get
			{
				return this._ChiefPersons;
			}
			set
			{
				this._ChiefPersons.Assign(value);
			}
		}

		[Association(Name = "FK_ForeignAuthorization_Contractor", Storage = "_ForeignAuthorization", ThisKey = "ContractorGUID", OtherKey = "ContractorGUID", DeleteRule = "NO ACTION")]
		public EntitySet<ForeignAuthorization> ForeignAuthorization
		{
			get
			{
				return this._ForeignAuthorization;
			}
			set
			{
				this._ForeignAuthorization.Assign(value);
			}
		}

		[Association(Name = "FK_HST_Contractor_Contractor", Storage = "_HST_Contractor", ThisKey = "ContractorGUID", OtherKey = "ContractorGUID", DeleteRule = "CASCADE")]
		public EntitySet<HST_Contractor> HST_Contractor
		{
			get
			{
				return this._HST_Contractor;
			}
			set
			{
				this._HST_Contractor.Assign(value);
			}
		}

		[Association(Name = "FK_HST_Contractor_PrevContractor", Storage = "_HST_Contractor_PrevContractor", ThisKey = "ContractorGUID", OtherKey = "PrevContractorGUID", DeleteRule = "NO ACTION")]
		public EntitySet<HST_Contractor> HST_Contractor_PrevContractor
		{
			get
			{
				return this._HST_Contractor_PrevContractor;
			}
			set
			{
				this._HST_Contractor_PrevContractor.Assign(value);
			}
		}

		[Association(Name = "FK_PaymentOrder_Contractor", Storage = "_PaymentOrder", ThisKey = "ContractorGUID", OtherKey = "ContractorGUID", DeleteRule = "NO ACTION")]
		public EntitySet<PaymentOrder> PaymentOrder
		{
			get
			{
				return this._PaymentOrder;
			}
			set
			{
				this._PaymentOrder.Assign(value);
			}
		}

		[Association(Name = "FK_QuotaDistribution_Contractor", Storage = "_QuotaDistribution", ThisKey = "ContractorGUID", OtherKey = "ContractorGUID", DeleteRule = "NO ACTION")]
		public EntitySet<QuotaDistribution> QuotaDistribution
		{
			get
			{
				return this._QuotaDistribution;
			}
			set
			{
				this._QuotaDistribution.Assign(value);
			}
		}

		[Association(Name = "FK_QuotaRequest_Contractor", Storage = "_QuotaRequest", ThisKey = "ContractorGUID", OtherKey = "ContractorGUID", DeleteRule = "NO ACTION")]
		public EntitySet<QuotaRequest> QuotaRequest
		{
			get
			{
				return this._QuotaRequest;
			}
			set
			{
				this._QuotaRequest.Assign(value);
			}
		}

		[Association(Name = "FK_VisitRecord_Contactor", Storage = "_VisitRecord", ThisKey = "ContractorGUID", OtherKey = "ContactorGUID", DeleteRule = "NO ACTION")]
		public EntitySet<VisitRecord> VisitRecord
		{
			get
			{
				return this._VisitRecord;
			}
			set
			{
				this._VisitRecord.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ContractorGU(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.PrevContractor = this;
		}

		private void detach_ContractorGU(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.PrevContractor = null;
		}

		private void attach_ChiefPersons(ContractorChiefPerson entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}

		private void detach_ChiefPersons(ContractorChiefPerson entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}

		private void attach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}

		private void detach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}

		private void attach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}

		private void detach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}

		private void attach_HST_Contractor_PrevContractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.PrevContractor = this;
		}

		private void detach_HST_Contractor_PrevContractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.PrevContractor = null;
		}

		private void attach_PaymentOrder(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}

		private void detach_PaymentOrder(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}

		private void attach_QuotaDistribution(QuotaDistribution entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}

		private void detach_QuotaDistribution(QuotaDistribution entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}

		private void attach_QuotaRequest(QuotaRequest entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}

		private void detach_QuotaRequest(QuotaRequest entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}

		private void attach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.Contactor = this;
		}

		private void detach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.Contactor = null;
		}
	}

	[Table(Name = "dbo.ContractorChiefPerson")]
	public partial class ContractorChiefPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _ContractorChiefPersonGUID;

		private System.Guid _ContractorGUID;

		private string _Title;

		private string _Post;

		private string _Phone;

		private string _Email;

		private bool _IsResponsible;

		private bool _IsPerformer;

		private System.DateTime _LastModifiedDate;

		private bool _IsDeleted;

		private int _LastModifiedUserID;

		private bool _IsChief;

		private EntityRef<Contractor> _Contractor;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<OrderDoc> _OrderDoc;

		private EntitySet<OrderDoc> _ContractorChiefPersonGU;

		private EntitySet<OrderDoc> _OrderDoc_QuoteOwnerChief;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnContractorChiefPersonGUIDChanging(System.Guid value);
		partial void OnContractorChiefPersonGUIDChanged();
		partial void OnContractorGUIDChanging(System.Guid value);
		partial void OnContractorGUIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnPostChanging(string value);
		partial void OnPostChanged();
		partial void OnPhoneChanging(string value);
		partial void OnPhoneChanged();
		partial void OnEmailChanging(string value);
		partial void OnEmailChanged();
		partial void OnIsResponsibleChanging(bool value);
		partial void OnIsResponsibleChanged();
		partial void OnIsPerformerChanging(bool value);
		partial void OnIsPerformerChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnIsChiefChanging(bool value);
		partial void OnIsChiefChanged();
		#endregion

		public ContractorChiefPerson()
		{
			this._Contractor = default(EntityRef<Contractor>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._ContractorChiefPersonGU = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_ContractorChiefPersonGU), new Action<OrderDoc>(this.detach_ContractorChiefPersonGU));
			this._OrderDoc_QuoteOwnerChief = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc_QuoteOwnerChief), new Action<OrderDoc>(this.detach_OrderDoc_QuoteOwnerChief));
			OnCreated();
		}

		[Column(Storage = "_ContractorChiefPersonGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid ContractorChiefPersonGUID
		{
			get
			{
				return this._ContractorChiefPersonGUID;
			}
			set
			{
				if ((this._ContractorChiefPersonGUID != value))
				{
					this.OnContractorChiefPersonGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorChiefPersonGUID = value;
					this.SendPropertyChanged("ContractorChiefPersonGUID");
					this.OnContractorChiefPersonGUIDChanged();
				}
			}
		}

		[Column(Storage = "_ContractorGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorGUID = value;
					this.SendPropertyChanged("ContractorGUID");
					this.OnContractorGUIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Post", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				if ((this._Post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._Post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}

		[Column(Storage = "_Phone", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}

		[Column(Storage = "_Email", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}

		[Column(Storage = "_IsResponsible", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsResponsible
		{
			get
			{
				return this._IsResponsible;
			}
			set
			{
				if ((this._IsResponsible != value))
				{
					this.OnIsResponsibleChanging(value);
					this.SendPropertyChanging();
					this._IsResponsible = value;
					this.SendPropertyChanged("IsResponsible");
					this.OnIsResponsibleChanged();
				}
			}
		}

		[Column(Storage = "_IsPerformer", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsPerformer
		{
			get
			{
				return this._IsPerformer;
			}
			set
			{
				if ((this._IsPerformer != value))
				{
					this.OnIsPerformerChanging(value);
					this.SendPropertyChanging();
					this._IsPerformer = value;
					this.SendPropertyChanged("IsPerformer");
					this.OnIsPerformerChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_IsChief", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsChief
		{
			get
			{
				return this._IsChief;
			}
			set
			{
				if ((this._IsChief != value))
				{
					this.OnIsChiefChanging(value);
					this.SendPropertyChanging();
					this._IsChief = value;
					this.SendPropertyChanged("IsChief");
					this.OnIsChiefChanged();
				}
			}
		}

		[Association(Name = "FK_ContractorChiefPerson_Contractor", Storage = "_Contractor", ThisKey = "ContractorGUID", OtherKey = "ContractorGUID", IsForeignKey = true, DeleteOnNull = true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value)
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.ChiefPersons.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.ChiefPersons.Add(this);
						this._ContractorGUID = value.ContractorGUID;
					}
					else
					{
						this._ContractorGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}

		[Association(Name = "FK_ContractorChiefPerson_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.ContractorChiefPerson.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.ContractorChiefPerson.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_ApplicantChief", Storage = "_OrderDoc", ThisKey = "ContractorChiefPersonGUID", OtherKey = "ApplicantChiefGUID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_ApplicantRepresentative", Storage = "_ContractorChiefPersonGU", ThisKey = "ContractorChiefPersonGUID", OtherKey = "ApplicantRepresentativeGUID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> ContractorChiefPersonGU
		{
			get
			{
				return this._ContractorChiefPersonGU;
			}
			set
			{
				this._ContractorChiefPersonGU.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_QuoteOwnerChief", Storage = "_OrderDoc_QuoteOwnerChief", ThisKey = "ContractorChiefPersonGUID", OtherKey = "QuoteOwnerChiefGUID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc_QuoteOwnerChief
		{
			get
			{
				return this._OrderDoc_QuoteOwnerChief;
			}
			set
			{
				this._OrderDoc_QuoteOwnerChief.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.ApplicantChief = this;
		}

		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.ApplicantChief = null;
		}

		private void attach_ContractorChiefPersonGU(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.ApplicantRepresentative = this;
		}

		private void detach_ContractorChiefPersonGU(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.ApplicantRepresentative = null;
		}

		private void attach_OrderDoc_QuoteOwnerChief(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.QuoteOwnerChief = this;
		}

		private void detach_OrderDoc_QuoteOwnerChief(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.QuoteOwnerChief = null;
		}
	}

	[Table(Name = "dbo.ControlParameters")]
	public partial class ControlParameters : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ControlParametersID;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private int _MaxValidity;

		private int _MaxNotify;

		private bool _IsValidityCalendarDayType;

		private bool _IsNotifyCalendarDayType;

		private bool _IsCurrent;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnControlParametersIDChanging(int value);
		partial void OnControlParametersIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnMaxValidityChanging(int value);
		partial void OnMaxValidityChanged();
		partial void OnMaxNotifyChanging(int value);
		partial void OnMaxNotifyChanged();
		partial void OnIsValidityCalendarDayTypeChanging(bool value);
		partial void OnIsValidityCalendarDayTypeChanged();
		partial void OnIsNotifyCalendarDayTypeChanging(bool value);
		partial void OnIsNotifyCalendarDayTypeChanged();
		partial void OnIsCurrentChanging(bool value);
		partial void OnIsCurrentChanged();
		#endregion

		public ControlParameters()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_ControlParametersID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int ControlParametersID
		{
			get
			{
				return this._ControlParametersID;
			}
			set
			{
				if ((this._ControlParametersID != value))
				{
					this.OnControlParametersIDChanging(value);
					this.SendPropertyChanging();
					this._ControlParametersID = value;
					this.SendPropertyChanged("ControlParametersID");
					this.OnControlParametersIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_MaxValidity", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int MaxValidity
		{
			get
			{
				return this._MaxValidity;
			}
			set
			{
				if ((this._MaxValidity != value))
				{
					this.OnMaxValidityChanging(value);
					this.SendPropertyChanging();
					this._MaxValidity = value;
					this.SendPropertyChanged("MaxValidity");
					this.OnMaxValidityChanged();
				}
			}
		}

		[Column(Storage = "_MaxNotify", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int MaxNotify
		{
			get
			{
				return this._MaxNotify;
			}
			set
			{
				if ((this._MaxNotify != value))
				{
					this.OnMaxNotifyChanging(value);
					this.SendPropertyChanging();
					this._MaxNotify = value;
					this.SendPropertyChanged("MaxNotify");
					this.OnMaxNotifyChanged();
				}
			}
		}

		[Column(Storage = "_IsValidityCalendarDayType", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsValidityCalendarDayType
		{
			get
			{
				return this._IsValidityCalendarDayType;
			}
			set
			{
				if ((this._IsValidityCalendarDayType != value))
				{
					this.OnIsValidityCalendarDayTypeChanging(value);
					this.SendPropertyChanging();
					this._IsValidityCalendarDayType = value;
					this.SendPropertyChanged("IsValidityCalendarDayType");
					this.OnIsValidityCalendarDayTypeChanged();
				}
			}
		}

		[Column(Storage = "_IsNotifyCalendarDayType", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsNotifyCalendarDayType
		{
			get
			{
				return this._IsNotifyCalendarDayType;
			}
			set
			{
				if ((this._IsNotifyCalendarDayType != value))
				{
					this.OnIsNotifyCalendarDayTypeChanging(value);
					this.SendPropertyChanging();
					this._IsNotifyCalendarDayType = value;
					this.SendPropertyChanged("IsNotifyCalendarDayType");
					this.OnIsNotifyCalendarDayTypeChanged();
				}
			}
		}

		[Column(Storage = "_IsCurrent", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsCurrent
		{
			get
			{
				return this._IsCurrent;
			}
			set
			{
				if ((this._IsCurrent != value))
				{
					this.OnIsCurrentChanging(value);
					this.SendPropertyChanging();
					this._IsCurrent = value;
					this.SendPropertyChanged("IsCurrent");
					this.OnIsCurrentChanged();
				}
			}
		}

		[Association(Name = "FK_ControlParameters_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.ControlParameters.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.ControlParameters.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.Copy_ContractorChiefPerson")]
	public partial class Copy_ContractorChiefPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private string _Post;

		private string _Phone;

		private string _Email;

		private char _Type;

		private System.Guid _OrderDocGUID;

		private System.Guid _Copy_ContractorChiefPersonGUID;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<OrderDoc> _OrderDoc;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnPostChanging(string value);
		partial void OnPostChanged();
		partial void OnPhoneChanging(string value);
		partial void OnPhoneChanged();
		partial void OnEmailChanging(string value);
		partial void OnEmailChanged();
		partial void OnTypeChanging(char value);
		partial void OnTypeChanged();
		partial void OnOrderDocGUIDChanging(System.Guid value);
		partial void OnOrderDocGUIDChanged();
		partial void OnCopy_ContractorChiefPersonGUIDChanging(System.Guid value);
		partial void OnCopy_ContractorChiefPersonGUIDChanged();
		#endregion

		public Copy_ContractorChiefPerson()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDoc = default(EntityRef<OrderDoc>);
			OnCreated();
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Post", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				if ((this._Post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._Post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}

		[Column(Storage = "_Phone", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}

		[Column(Storage = "_Email", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}

		[Column(Storage = "_Type", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}

		[Column(Storage = "_OrderDocGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}

		[Column(Storage = "_Copy_ContractorChiefPersonGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid Copy_ContractorChiefPersonGUID
		{
			get
			{
				return this._Copy_ContractorChiefPersonGUID;
			}
			set
			{
				if ((this._Copy_ContractorChiefPersonGUID != value))
				{
					this.OnCopy_ContractorChiefPersonGUIDChanging(value);
					this.SendPropertyChanging();
					this._Copy_ContractorChiefPersonGUID = value;
					this.SendPropertyChanged("Copy_ContractorChiefPersonGUID");
					this.OnCopy_ContractorChiefPersonGUIDChanged();
				}
			}
		}

		[Association(Name = "FK_Copy_ContractorChiefPerson_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.Copy_ContractorChiefPerson.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.Copy_ContractorChiefPerson.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_Copy_ContractorChiefPerson_OrderDoc", Storage = "_OrderDoc", ThisKey = "OrderDocGUID", OtherKey = "OrderGUID", IsForeignKey = true, DeleteOnNull = true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value)
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.Copy_ContractorChiefPerson.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.Copy_ContractorChiefPerson.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.CustomsDeclaration")]
	public partial class CustomsDeclaration : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _CustomsDeclarationGUID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private System.Nullable<System.Guid> _LicenseGUID;

		private int _OperationID;

		private string _SenderINN;

		private string _SenderTitle;

		private string _SenderAddress;

		private string _RecipientINN;

		private string _RecipientTitle;

		private string _RecipientAddress;

		private string _CustomsConditions;

		private System.Nullable<System.DateTime> _ApproveDate;

		private System.Nullable<System.DateTime> _FactDate;

		private System.Nullable<int> _Containers;

		private System.Nullable<decimal> _Weight;

		private System.Nullable<decimal> _Quantity1;

		private string _Measure1;

		private System.Nullable<decimal> _Quantity2;

		private string _Measure2;

		private System.Nullable<decimal> _Quantity3;

		private string _Measure3;

		private System.Nullable<int> _CountryFromID;

		private System.Nullable<int> _CountryToID;

		private System.Nullable<int> _CountryOriginID;

		private System.Nullable<int> _CNID;

		private System.Nullable<int> _SenderCountryID;

		private System.Nullable<int> _RecipientCountryID;

		private string _Copy_CountryFrom;

		private string _Copy_CountryTo;

		private string _Copy_CountryOrigin;

		private string _Copy_CN;

		private string _Copy_SenderCountry;

		private string _Copy_RecipientCountry;

		private int _G32;

		private string _LicenseNumber;

		private EntityRef<C_CN> _CN;

		private EntityRef<C_Country> _CountryFrom;

		private EntityRef<C_Country> _CountryOrigin;

		private EntityRef<C_Country> _CountryTo;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<OrderDoc> _License;

		private EntityRef<C_OperationType> _Operation;

		private EntityRef<C_Country> _RecipientCountry;

		private EntityRef<C_Country> _SenderCountry;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCustomsDeclarationGUIDChanging(System.Guid value);
		partial void OnCustomsDeclarationGUIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnLicenseGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnLicenseGUIDChanged();
		partial void OnOperationIDChanging(int value);
		partial void OnOperationIDChanged();
		partial void OnSenderINNChanging(string value);
		partial void OnSenderINNChanged();
		partial void OnSenderTitleChanging(string value);
		partial void OnSenderTitleChanged();
		partial void OnSenderAddressChanging(string value);
		partial void OnSenderAddressChanged();
		partial void OnRecipientINNChanging(string value);
		partial void OnRecipientINNChanged();
		partial void OnRecipientTitleChanging(string value);
		partial void OnRecipientTitleChanged();
		partial void OnRecipientAddressChanging(string value);
		partial void OnRecipientAddressChanged();
		partial void OnCustomsConditionsChanging(string value);
		partial void OnCustomsConditionsChanged();
		partial void OnApproveDateChanging(System.Nullable<System.DateTime> value);
		partial void OnApproveDateChanged();
		partial void OnFactDateChanging(System.Nullable<System.DateTime> value);
		partial void OnFactDateChanged();
		partial void OnContainersChanging(System.Nullable<int> value);
		partial void OnContainersChanged();
		partial void OnWeightChanging(System.Nullable<decimal> value);
		partial void OnWeightChanged();
		partial void OnQuantity1Changing(System.Nullable<decimal> value);
		partial void OnQuantity1Changed();
		partial void OnMeasure1Changing(string value);
		partial void OnMeasure1Changed();
		partial void OnQuantity2Changing(System.Nullable<decimal> value);
		partial void OnQuantity2Changed();
		partial void OnMeasure2Changing(string value);
		partial void OnMeasure2Changed();
		partial void OnQuantity3Changing(System.Nullable<decimal> value);
		partial void OnQuantity3Changed();
		partial void OnMeasure3Changing(string value);
		partial void OnMeasure3Changed();
		partial void OnCountryFromIDChanging(System.Nullable<int> value);
		partial void OnCountryFromIDChanged();
		partial void OnCountryToIDChanging(System.Nullable<int> value);
		partial void OnCountryToIDChanged();
		partial void OnCountryOriginIDChanging(System.Nullable<int> value);
		partial void OnCountryOriginIDChanged();
		partial void OnCNIDChanging(System.Nullable<int> value);
		partial void OnCNIDChanged();
		partial void OnSenderCountryIDChanging(System.Nullable<int> value);
		partial void OnSenderCountryIDChanged();
		partial void OnRecipientCountryIDChanging(System.Nullable<int> value);
		partial void OnRecipientCountryIDChanged();
		partial void OnCopy_CountryFromChanging(string value);
		partial void OnCopy_CountryFromChanged();
		partial void OnCopy_CountryToChanging(string value);
		partial void OnCopy_CountryToChanged();
		partial void OnCopy_CountryOriginChanging(string value);
		partial void OnCopy_CountryOriginChanged();
		partial void OnCopy_CNChanging(string value);
		partial void OnCopy_CNChanged();
		partial void OnCopy_SenderCountryChanging(string value);
		partial void OnCopy_SenderCountryChanged();
		partial void OnCopy_RecipientCountryChanging(string value);
		partial void OnCopy_RecipientCountryChanged();
		partial void OnG32Changing(int value);
		partial void OnG32Changed();
		partial void OnLicenseNumberChanging(string value);
		partial void OnLicenseNumberChanged();
		#endregion

		public CustomsDeclaration()
		{
			this._CN = default(EntityRef<C_CN>);
			this._CountryFrom = default(EntityRef<C_Country>);
			this._CountryOrigin = default(EntityRef<C_Country>);
			this._CountryTo = default(EntityRef<C_Country>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._License = default(EntityRef<OrderDoc>);
			this._Operation = default(EntityRef<C_OperationType>);
			this._RecipientCountry = default(EntityRef<C_Country>);
			this._SenderCountry = default(EntityRef<C_Country>);
			OnCreated();
		}

		[Column(Storage = "_CustomsDeclarationGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid CustomsDeclarationGUID
		{
			get
			{
				return this._CustomsDeclarationGUID;
			}
			set
			{
				if ((this._CustomsDeclarationGUID != value))
				{
					this.OnCustomsDeclarationGUIDChanging(value);
					this.SendPropertyChanging();
					this._CustomsDeclarationGUID = value;
					this.SendPropertyChanged("CustomsDeclarationGUID");
					this.OnCustomsDeclarationGUIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_LicenseGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> LicenseGUID
		{
			get
			{
				return this._LicenseGUID;
			}
			set
			{
				if ((this._LicenseGUID != value))
				{
					if (this._License.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLicenseGUIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseGUID = value;
					this.SendPropertyChanged("LicenseGUID");
					this.OnLicenseGUIDChanged();
				}
			}
		}

		[Column(Storage = "_OperationID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int OperationID
		{
			get
			{
				return this._OperationID;
			}
			set
			{
				if ((this._OperationID != value))
				{
					if (this._Operation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationIDChanging(value);
					this.SendPropertyChanging();
					this._OperationID = value;
					this.SendPropertyChanged("OperationID");
					this.OnOperationIDChanged();
				}
			}
		}

		[Column(Storage = "_SenderINN", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SenderINN
		{
			get
			{
				return this._SenderINN;
			}
			set
			{
				if ((this._SenderINN != value))
				{
					this.OnSenderINNChanging(value);
					this.SendPropertyChanging();
					this._SenderINN = value;
					this.SendPropertyChanged("SenderINN");
					this.OnSenderINNChanged();
				}
			}
		}

		[Column(Storage = "_SenderTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SenderTitle
		{
			get
			{
				return this._SenderTitle;
			}
			set
			{
				if ((this._SenderTitle != value))
				{
					this.OnSenderTitleChanging(value);
					this.SendPropertyChanging();
					this._SenderTitle = value;
					this.SendPropertyChanged("SenderTitle");
					this.OnSenderTitleChanged();
				}
			}
		}

		[Column(Storage = "_SenderAddress", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SenderAddress
		{
			get
			{
				return this._SenderAddress;
			}
			set
			{
				if ((this._SenderAddress != value))
				{
					this.OnSenderAddressChanging(value);
					this.SendPropertyChanging();
					this._SenderAddress = value;
					this.SendPropertyChanged("SenderAddress");
					this.OnSenderAddressChanged();
				}
			}
		}

		[Column(Storage = "_RecipientINN", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string RecipientINN
		{
			get
			{
				return this._RecipientINN;
			}
			set
			{
				if ((this._RecipientINN != value))
				{
					this.OnRecipientINNChanging(value);
					this.SendPropertyChanging();
					this._RecipientINN = value;
					this.SendPropertyChanged("RecipientINN");
					this.OnRecipientINNChanged();
				}
			}
		}

		[Column(Storage = "_RecipientTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string RecipientTitle
		{
			get
			{
				return this._RecipientTitle;
			}
			set
			{
				if ((this._RecipientTitle != value))
				{
					this.OnRecipientTitleChanging(value);
					this.SendPropertyChanging();
					this._RecipientTitle = value;
					this.SendPropertyChanged("RecipientTitle");
					this.OnRecipientTitleChanged();
				}
			}
		}

		[Column(Storage = "_RecipientAddress", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string RecipientAddress
		{
			get
			{
				return this._RecipientAddress;
			}
			set
			{
				if ((this._RecipientAddress != value))
				{
					this.OnRecipientAddressChanging(value);
					this.SendPropertyChanging();
					this._RecipientAddress = value;
					this.SendPropertyChanged("RecipientAddress");
					this.OnRecipientAddressChanged();
				}
			}
		}

		[Column(Storage = "_CustomsConditions", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string CustomsConditions
		{
			get
			{
				return this._CustomsConditions;
			}
			set
			{
				if ((this._CustomsConditions != value))
				{
					this.OnCustomsConditionsChanging(value);
					this.SendPropertyChanging();
					this._CustomsConditions = value;
					this.SendPropertyChanged("CustomsConditions");
					this.OnCustomsConditionsChanged();
				}
			}
		}

		[Column(Storage = "_ApproveDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ApproveDate
		{
			get
			{
				return this._ApproveDate;
			}
			set
			{
				if ((this._ApproveDate != value))
				{
					this.OnApproveDateChanging(value);
					this.SendPropertyChanging();
					this._ApproveDate = value;
					this.SendPropertyChanged("ApproveDate");
					this.OnApproveDateChanged();
				}
			}
		}

		[Column(Storage = "_FactDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FactDate
		{
			get
			{
				return this._FactDate;
			}
			set
			{
				if ((this._FactDate != value))
				{
					this.OnFactDateChanging(value);
					this.SendPropertyChanging();
					this._FactDate = value;
					this.SendPropertyChanged("FactDate");
					this.OnFactDateChanged();
				}
			}
		}

		[Column(Storage = "_Containers", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> Containers
		{
			get
			{
				return this._Containers;
			}
			set
			{
				if ((this._Containers != value))
				{
					this.OnContainersChanging(value);
					this.SendPropertyChanging();
					this._Containers = value;
					this.SendPropertyChanged("Containers");
					this.OnContainersChanged();
				}
			}
		}

		[Column(Storage = "_Weight", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}

		[Column(Storage = "_Quantity1", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> Quantity1
		{
			get
			{
				return this._Quantity1;
			}
			set
			{
				if ((this._Quantity1 != value))
				{
					this.OnQuantity1Changing(value);
					this.SendPropertyChanging();
					this._Quantity1 = value;
					this.SendPropertyChanged("Quantity1");
					this.OnQuantity1Changed();
				}
			}
		}

		[Column(Storage = "_Measure1", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Measure1
		{
			get
			{
				return this._Measure1;
			}
			set
			{
				if ((this._Measure1 != value))
				{
					this.OnMeasure1Changing(value);
					this.SendPropertyChanging();
					this._Measure1 = value;
					this.SendPropertyChanged("Measure1");
					this.OnMeasure1Changed();
				}
			}
		}

		[Column(Storage = "_Quantity2", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> Quantity2
		{
			get
			{
				return this._Quantity2;
			}
			set
			{
				if ((this._Quantity2 != value))
				{
					this.OnQuantity2Changing(value);
					this.SendPropertyChanging();
					this._Quantity2 = value;
					this.SendPropertyChanged("Quantity2");
					this.OnQuantity2Changed();
				}
			}
		}

		[Column(Storage = "_Measure2", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Measure2
		{
			get
			{
				return this._Measure2;
			}
			set
			{
				if ((this._Measure2 != value))
				{
					this.OnMeasure2Changing(value);
					this.SendPropertyChanging();
					this._Measure2 = value;
					this.SendPropertyChanged("Measure2");
					this.OnMeasure2Changed();
				}
			}
		}

		[Column(Storage = "_Quantity3", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> Quantity3
		{
			get
			{
				return this._Quantity3;
			}
			set
			{
				if ((this._Quantity3 != value))
				{
					this.OnQuantity3Changing(value);
					this.SendPropertyChanging();
					this._Quantity3 = value;
					this.SendPropertyChanged("Quantity3");
					this.OnQuantity3Changed();
				}
			}
		}

		[Column(Storage = "_Measure3", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Measure3
		{
			get
			{
				return this._Measure3;
			}
			set
			{
				if ((this._Measure3 != value))
				{
					this.OnMeasure3Changing(value);
					this.SendPropertyChanging();
					this._Measure3 = value;
					this.SendPropertyChanged("Measure3");
					this.OnMeasure3Changed();
				}
			}
		}

		[Column(Storage = "_CountryFromID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CountryFromID
		{
			get
			{
				return this._CountryFromID;
			}
			set
			{
				if ((this._CountryFromID != value))
				{
					if (this._CountryFrom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryFromIDChanging(value);
					this.SendPropertyChanging();
					this._CountryFromID = value;
					this.SendPropertyChanged("CountryFromID");
					this.OnCountryFromIDChanged();
				}
			}
		}

		[Column(Storage = "_CountryToID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CountryToID
		{
			get
			{
				return this._CountryToID;
			}
			set
			{
				if ((this._CountryToID != value))
				{
					if (this._CountryTo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryToIDChanging(value);
					this.SendPropertyChanging();
					this._CountryToID = value;
					this.SendPropertyChanged("CountryToID");
					this.OnCountryToIDChanged();
				}
			}
		}

		[Column(Storage = "_CountryOriginID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CountryOriginID
		{
			get
			{
				return this._CountryOriginID;
			}
			set
			{
				if ((this._CountryOriginID != value))
				{
					if (this._CountryOrigin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryOriginIDChanging(value);
					this.SendPropertyChanging();
					this._CountryOriginID = value;
					this.SendPropertyChanged("CountryOriginID");
					this.OnCountryOriginIDChanged();
				}
			}
		}

		[Column(Storage = "_CNID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CNID
		{
			get
			{
				return this._CNID;
			}
			set
			{
				if ((this._CNID != value))
				{
					if (this._CN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNIDChanging(value);
					this.SendPropertyChanging();
					this._CNID = value;
					this.SendPropertyChanged("CNID");
					this.OnCNIDChanged();
				}
			}
		}

		[Column(Storage = "_SenderCountryID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> SenderCountryID
		{
			get
			{
				return this._SenderCountryID;
			}
			set
			{
				if ((this._SenderCountryID != value))
				{
					if (this._SenderCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderCountryIDChanging(value);
					this.SendPropertyChanging();
					this._SenderCountryID = value;
					this.SendPropertyChanged("SenderCountryID");
					this.OnSenderCountryIDChanged();
				}
			}
		}

		[Column(Storage = "_RecipientCountryID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> RecipientCountryID
		{
			get
			{
				return this._RecipientCountryID;
			}
			set
			{
				if ((this._RecipientCountryID != value))
				{
					if (this._RecipientCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecipientCountryIDChanging(value);
					this.SendPropertyChanging();
					this._RecipientCountryID = value;
					this.SendPropertyChanged("RecipientCountryID");
					this.OnRecipientCountryIDChanged();
				}
			}
		}

		[Column(Storage = "_Copy_CountryFrom", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_CountryFrom
		{
			get
			{
				return this._Copy_CountryFrom;
			}
			set
			{
				if ((this._Copy_CountryFrom != value))
				{
					this.OnCopy_CountryFromChanging(value);
					this.SendPropertyChanging();
					this._Copy_CountryFrom = value;
					this.SendPropertyChanged("Copy_CountryFrom");
					this.OnCopy_CountryFromChanged();
				}
			}
		}

		[Column(Storage = "_Copy_CountryTo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_CountryTo
		{
			get
			{
				return this._Copy_CountryTo;
			}
			set
			{
				if ((this._Copy_CountryTo != value))
				{
					this.OnCopy_CountryToChanging(value);
					this.SendPropertyChanging();
					this._Copy_CountryTo = value;
					this.SendPropertyChanged("Copy_CountryTo");
					this.OnCopy_CountryToChanged();
				}
			}
		}

		[Column(Storage = "_Copy_CountryOrigin", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_CountryOrigin
		{
			get
			{
				return this._Copy_CountryOrigin;
			}
			set
			{
				if ((this._Copy_CountryOrigin != value))
				{
					this.OnCopy_CountryOriginChanging(value);
					this.SendPropertyChanging();
					this._Copy_CountryOrigin = value;
					this.SendPropertyChanged("Copy_CountryOrigin");
					this.OnCopy_CountryOriginChanged();
				}
			}
		}

		[Column(Storage = "_Copy_CN", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_CN
		{
			get
			{
				return this._Copy_CN;
			}
			set
			{
				if ((this._Copy_CN != value))
				{
					this.OnCopy_CNChanging(value);
					this.SendPropertyChanging();
					this._Copy_CN = value;
					this.SendPropertyChanged("Copy_CN");
					this.OnCopy_CNChanged();
				}
			}
		}

		[Column(Storage = "_Copy_SenderCountry", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_SenderCountry
		{
			get
			{
				return this._Copy_SenderCountry;
			}
			set
			{
				if ((this._Copy_SenderCountry != value))
				{
					this.OnCopy_SenderCountryChanging(value);
					this.SendPropertyChanging();
					this._Copy_SenderCountry = value;
					this.SendPropertyChanged("Copy_SenderCountry");
					this.OnCopy_SenderCountryChanged();
				}
			}
		}

		[Column(Storage = "_Copy_RecipientCountry", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_RecipientCountry
		{
			get
			{
				return this._Copy_RecipientCountry;
			}
			set
			{
				if ((this._Copy_RecipientCountry != value))
				{
					this.OnCopy_RecipientCountryChanging(value);
					this.SendPropertyChanging();
					this._Copy_RecipientCountry = value;
					this.SendPropertyChanged("Copy_RecipientCountry");
					this.OnCopy_RecipientCountryChanged();
				}
			}
		}

		[Column(Storage = "_G32", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int G32
		{
			get
			{
				return this._G32;
			}
			set
			{
				if ((this._G32 != value))
				{
					this.OnG32Changing(value);
					this.SendPropertyChanging();
					this._G32 = value;
					this.SendPropertyChanged("G32");
					this.OnG32Changed();
				}
			}
		}

		[Column(Storage = "_LicenseNumber", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string LicenseNumber
		{
			get
			{
				return this._LicenseNumber;
			}
			set
			{
				if ((this._LicenseNumber != value))
				{
					this.OnLicenseNumberChanging(value);
					this.SendPropertyChanging();
					this._LicenseNumber = value;
					this.SendPropertyChanged("LicenseNumber");
					this.OnLicenseNumberChanged();
				}
			}
		}

		[Association(Name = "FK_CustomsDeclaration_CN", Storage = "_CN", ThisKey = "CNID", OtherKey = "CNID", IsForeignKey = true)]
		public C_CN CN
		{
			get
			{
				return this._CN.Entity;
			}
			set
			{
				C_CN previousValue = this._CN.Entity;
				if (((previousValue != value)
							|| (this._CN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CN.Entity = null;
						previousValue.CustomsDeclaration.Remove(this);
					}
					this._CN.Entity = value;
					if ((value != null))
					{
						value.CustomsDeclaration.Add(this);
						this._CNID = value.CNID;
					}
					else
					{
						this._CNID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CN");
				}
			}
		}

		[Association(Name = "FK_CustomsDeclaration_CountryFrom", Storage = "_CountryFrom", ThisKey = "CountryFromID", OtherKey = "CountryID", IsForeignKey = true)]
		public C_Country CountryFrom
		{
			get
			{
				return this._CountryFrom.Entity;
			}
			set
			{
				C_Country previousValue = this._CountryFrom.Entity;
				if (((previousValue != value)
							|| (this._CountryFrom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryFrom.Entity = null;
						previousValue.CustomsDeclaration.Remove(this);
					}
					this._CountryFrom.Entity = value;
					if ((value != null))
					{
						value.CustomsDeclaration.Add(this);
						this._CountryFromID = value.CountryID;
					}
					else
					{
						this._CountryFromID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CountryFrom");
				}
			}
		}

		[Association(Name = "FK_CustomsDeclaration_CountryOrigin", Storage = "_CountryOrigin", ThisKey = "CountryOriginID", OtherKey = "CountryID", IsForeignKey = true)]
		public C_Country CountryOrigin
		{
			get
			{
				return this._CountryOrigin.Entity;
			}
			set
			{
				C_Country previousValue = this._CountryOrigin.Entity;
				if (((previousValue != value)
							|| (this._CountryOrigin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryOrigin.Entity = null;
						previousValue.Country.Remove(this);
					}
					this._CountryOrigin.Entity = value;
					if ((value != null))
					{
						value.Country.Add(this);
						this._CountryOriginID = value.CountryID;
					}
					else
					{
						this._CountryOriginID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CountryOrigin");
				}
			}
		}

		[Association(Name = "FK_CustomsDeclaration_CountryTo", Storage = "_CountryTo", ThisKey = "CountryToID", OtherKey = "CountryID", IsForeignKey = true)]
		public C_Country CountryTo
		{
			get
			{
				return this._CountryTo.Entity;
			}
			set
			{
				C_Country previousValue = this._CountryTo.Entity;
				if (((previousValue != value)
							|| (this._CountryTo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryTo.Entity = null;
						previousValue.CustomsDeclaration_CountryTo.Remove(this);
					}
					this._CountryTo.Entity = value;
					if ((value != null))
					{
						value.CustomsDeclaration_CountryTo.Add(this);
						this._CountryToID = value.CountryID;
					}
					else
					{
						this._CountryToID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CountryTo");
				}
			}
		}

		[Association(Name = "FK_CustomsDeclaration_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.CustomsDeclaration.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.CustomsDeclaration.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_CustomsDeclaration_License", Storage = "_License", ThisKey = "LicenseGUID", OtherKey = "OrderGUID", IsForeignKey = true)]
		public OrderDoc License
		{
			get
			{
				return this._License.Entity;
			}
			set
			{
				OrderDoc previousValue = this._License.Entity;
				if (((previousValue != value)
							|| (this._License.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._License.Entity = null;
						previousValue.CustomsDeclaration.Remove(this);
					}
					this._License.Entity = value;
					if ((value != null))
					{
						value.CustomsDeclaration.Add(this);
						this._LicenseGUID = value.OrderGUID;
					}
					else
					{
						this._LicenseGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("License");
				}
			}
		}

		[Association(Name = "FK_CustomsDeclaration_Operation", Storage = "_Operation", ThisKey = "OperationID", OtherKey = "OperationTypeID", IsForeignKey = true)]
		public C_OperationType Operation
		{
			get
			{
				return this._Operation.Entity;
			}
			set
			{
				C_OperationType previousValue = this._Operation.Entity;
				if (((previousValue != value)
							|| (this._Operation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Operation.Entity = null;
						previousValue.CustomsDeclaration.Remove(this);
					}
					this._Operation.Entity = value;
					if ((value != null))
					{
						value.CustomsDeclaration.Add(this);
						this._OperationID = value.OperationTypeID;
					}
					else
					{
						this._OperationID = default(int);
					}
					this.SendPropertyChanged("Operation");
				}
			}
		}

		[Association(Name = "FK_CustomsDeclaration_RecipientCountry", Storage = "_RecipientCountry", ThisKey = "RecipientCountryID", OtherKey = "CountryID", IsForeignKey = true)]
		public C_Country RecipientCountry
		{
			get
			{
				return this._RecipientCountry.Entity;
			}
			set
			{
				C_Country previousValue = this._RecipientCountry.Entity;
				if (((previousValue != value)
							|| (this._RecipientCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecipientCountry.Entity = null;
						previousValue.CustomsDeclaration_RecipientCountry.Remove(this);
					}
					this._RecipientCountry.Entity = value;
					if ((value != null))
					{
						value.CustomsDeclaration_RecipientCountry.Add(this);
						this._RecipientCountryID = value.CountryID;
					}
					else
					{
						this._RecipientCountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RecipientCountry");
				}
			}
		}

		[Association(Name = "FK_CustomsDeclaration_SenderCountry", Storage = "_SenderCountry", ThisKey = "SenderCountryID", OtherKey = "CountryID", IsForeignKey = true)]
		public C_Country SenderCountry
		{
			get
			{
				return this._SenderCountry.Entity;
			}
			set
			{
				C_Country previousValue = this._SenderCountry.Entity;
				if (((previousValue != value)
							|| (this._SenderCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SenderCountry.Entity = null;
						previousValue.CustomsDeclaration_SenderCountry.Remove(this);
					}
					this._SenderCountry.Entity = value;
					if ((value != null))
					{
						value.CustomsDeclaration_SenderCountry.Add(this);
						this._SenderCountryID = value.CountryID;
					}
					else
					{
						this._SenderCountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SenderCountry");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.Document")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _DocumentID;

		private System.DateTime _DocDate;

		private System.Nullable<int> _FileFileID;

		private EntityRef<N_File> _File;

		private EntityRef<SiteObject> _SiteObject;

		private EntitySet<DocumentData> _DocumentData;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnDocumentIDChanging(int value);
		partial void OnDocumentIDChanged();
		partial void OnDocDateChanging(System.DateTime value);
		partial void OnDocDateChanged();
		partial void OnFileFileIDChanging(System.Nullable<int> value);
		partial void OnFileFileIDChanged();
		#endregion

		public Document()
		{
			this._File = default(EntityRef<N_File>);
			this._SiteObject = default(EntityRef<SiteObject>);
			this._DocumentData = new EntitySet<DocumentData>(new Action<DocumentData>(this.attach_DocumentData), new Action<DocumentData>(this.detach_DocumentData));
			OnCreated();
		}

		[Column(Storage = "_DocumentID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._SiteObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}

		[Column(Storage = "_DocDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this.OnDocDateChanging(value);
					this.SendPropertyChanging();
					this._DocDate = value;
					this.SendPropertyChanged("DocDate");
					this.OnDocDateChanged();
				}
			}
		}

		[Column(Storage = "_FileFileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> FileFileID
		{
			get
			{
				return this._FileFileID;
			}
			set
			{
				if ((this._FileFileID != value))
				{
					if (this._File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileFileID = value;
					this.SendPropertyChanged("FileFileID");
					this.OnFileFileIDChanged();
				}
			}
		}

		[Association(Name = "FK_Document_File", Storage = "_File", ThisKey = "FileFileID", OtherKey = "FileID", IsForeignKey = true)]
		public N_File File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				N_File previousValue = this._File.Entity;
				if (((previousValue != value)
							|| (this._File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File.Entity = null;
						previousValue.Document.Remove(this);
					}
					this._File.Entity = value;
					if ((value != null))
					{
						value.Document.Add(this);
						this._FileFileID = value.FileID;
					}
					else
					{
						this._FileFileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("File");
				}
			}
		}

		[Association(Name = "FK_Document_SiteObject", Storage = "_SiteObject", ThisKey = "DocumentID", OtherKey = "SiteObjectID", IsForeignKey = true, DeleteOnNull = true)]
		public SiteObject SiteObject
		{
			get
			{
				return this._SiteObject.Entity;
			}
			set
			{
				SiteObject previousValue = this._SiteObject.Entity;
				if (((previousValue != value)
							|| (this._SiteObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SiteObject.Entity = null;
						previousValue.Document = null;
					}
					this._SiteObject.Entity = value;
					if ((value != null))
					{
						value.Document = this;
						this._DocumentID = value.SiteObjectID;
					}
					else
					{
						this._DocumentID = default(int);
					}
					this.SendPropertyChanged("SiteObject");
				}
			}
		}

		[Association(Name = "FK_DocumentData_Document", Storage = "_DocumentData", ThisKey = "DocumentID", OtherKey = "DocumentID", DeleteRule = "CASCADE")]
		public EntitySet<DocumentData> DocumentData
		{
			get
			{
				return this._DocumentData;
			}
			set
			{
				this._DocumentData.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_DocumentData(DocumentData entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}

		private void detach_DocumentData(DocumentData entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
	}

	[Table(Name = "dbo.DocumentData")]
	public partial class DocumentData : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _DocumentDataID;

		private int _DocumentID;

		private string _LanguageCode;

		private System.Nullable<int> _FileFileID;

		private EntityRef<C_Language> _C_Language;

		private EntityRef<Document> _Document;

		private EntityRef<N_File> _File;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnDocumentDataIDChanging(int value);
		partial void OnDocumentDataIDChanged();
		partial void OnDocumentIDChanging(int value);
		partial void OnDocumentIDChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnFileFileIDChanging(System.Nullable<int> value);
		partial void OnFileFileIDChanged();
		#endregion

		public DocumentData()
		{
			this._C_Language = default(EntityRef<C_Language>);
			this._Document = default(EntityRef<Document>);
			this._File = default(EntityRef<N_File>);
			OnCreated();
		}

		[Column(Storage = "_DocumentDataID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int DocumentDataID
		{
			get
			{
				return this._DocumentDataID;
			}
			set
			{
				if ((this._DocumentDataID != value))
				{
					this.OnDocumentDataIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentDataID = value;
					this.SendPropertyChanged("DocumentDataID");
					this.OnDocumentDataIDChanged();
				}
			}
		}

		[Column(Storage = "_DocumentID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					if (this._C_Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_FileFileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> FileFileID
		{
			get
			{
				return this._FileFileID;
			}
			set
			{
				if ((this._FileFileID != value))
				{
					if (this._File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileFileID = value;
					this.SendPropertyChanged("FileFileID");
					this.OnFileFileIDChanged();
				}
			}
		}

		[Association(Name = "FK_DocumentData_C_Language", Storage = "_C_Language", ThisKey = "LanguageCode", OtherKey = "LanguageCode", IsForeignKey = true, DeleteOnNull = true)]
		public C_Language C_Language
		{
			get
			{
				return this._C_Language.Entity;
			}
			set
			{
				C_Language previousValue = this._C_Language.Entity;
				if (((previousValue != value)
							|| (this._C_Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_Language.Entity = null;
						previousValue.DocumentData.Remove(this);
					}
					this._C_Language.Entity = value;
					if ((value != null))
					{
						value.DocumentData.Add(this);
						this._LanguageCode = value.LanguageCode;
					}
					else
					{
						this._LanguageCode = default(string);
					}
					this.SendPropertyChanged("C_Language");
				}
			}
		}

		[Association(Name = "FK_DocumentData_Document", Storage = "_Document", ThisKey = "DocumentID", OtherKey = "DocumentID", IsForeignKey = true, DeleteOnNull = true)]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value)
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.DocumentData.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.DocumentData.Add(this);
						this._DocumentID = value.DocumentID;
					}
					else
					{
						this._DocumentID = default(int);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}

		[Association(Name = "FK_DocumentData_File", Storage = "_File", ThisKey = "FileFileID", OtherKey = "FileID", IsForeignKey = true)]
		public N_File File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				N_File previousValue = this._File.Entity;
				if (((previousValue != value)
							|| (this._File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File.Entity = null;
						previousValue.DocumentData.Remove(this);
					}
					this._File.Entity = value;
					if ((value != null))
					{
						value.DocumentData.Add(this);
						this._FileFileID = value.FileID;
					}
					else
					{
						this._FileFileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("File");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _EmployeeID;

		private string _Phone;

		private string _Fax;

		private string _Email;

		private string _Addinfo;

		private string _Post;

		private string _Code;

		private System.Nullable<int> _SPM_SubjectID;

		private System.DateTime _LastModifiedDate;

		private System.Nullable<decimal> _OldEmployeeID;

		private System.Nullable<decimal> _OldPersonID;

		private int _RepresentationID;

		private int _LastModifiedUserID;

		private bool _IsChiefPerson;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private System.Guid _MasterObjectGUID;

		private string _LetterHeader;

		private System.Nullable<int> _SignSampleFileID;

		private System.Nullable<int> _StampSampleFileID;

		private string _Surname;

		private string _Firstname;

		private string _Patronymic;

		private string _Title;

		private bool _IsDeleted;

		private EntitySet<Blank> _Blank;

		private EntitySet<Blank> _Blank_Employee;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<Representation> _Representation;

		private EntityRef<N_File> _SignSample;

		private EntityRef<SPM_Subject> _SPM_Subject;

		private EntityRef<N_File> _StampSample;

		private EntitySet<FactAnnulment> _FactAnnulment;

		private EntitySet<FactForm> _FactForm;

		private EntitySet<FactReject> _FactReject;

		private EntitySet<FactResume> _FactResume;

		private EntitySet<FactSuspend> _FactSuspend;

		private EntitySet<OrderDoc> _OrderDoc;

		private EntitySet<OrderDoc> _OrderDoc_FactForm_Employee;

		private EntitySet<OrderDoc> _OrderDoc_IssueEmployee;

		private EntitySet<OrderDoc> _OrderDoc_RegEmployee;

		private EntitySet<Representation> _Representation_ChiefPerson;

		private EntitySet<VisitRecord> _VisitRecord;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnEmployeeIDChanging(int value);
		partial void OnEmployeeIDChanged();
		partial void OnPhoneChanging(string value);
		partial void OnPhoneChanged();
		partial void OnFaxChanging(string value);
		partial void OnFaxChanged();
		partial void OnEmailChanging(string value);
		partial void OnEmailChanged();
		partial void OnAddinfoChanging(string value);
		partial void OnAddinfoChanged();
		partial void OnPostChanging(string value);
		partial void OnPostChanged();
		partial void OnCodeChanging(string value);
		partial void OnCodeChanged();
		partial void OnSPM_SubjectIDChanging(System.Nullable<int> value);
		partial void OnSPM_SubjectIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnOldEmployeeIDChanging(System.Nullable<decimal> value);
		partial void OnOldEmployeeIDChanged();
		partial void OnOldPersonIDChanging(System.Nullable<decimal> value);
		partial void OnOldPersonIDChanged();
		partial void OnRepresentationIDChanging(int value);
		partial void OnRepresentationIDChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnIsChiefPersonChanging(bool value);
		partial void OnIsChiefPersonChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnMasterObjectGUIDChanging(System.Guid value);
		partial void OnMasterObjectGUIDChanged();
		partial void OnLetterHeaderChanging(string value);
		partial void OnLetterHeaderChanged();
		partial void OnSignSampleFileIDChanging(System.Nullable<int> value);
		partial void OnSignSampleFileIDChanged();
		partial void OnStampSampleFileIDChanging(System.Nullable<int> value);
		partial void OnStampSampleFileIDChanged();
		partial void OnSurnameChanging(string value);
		partial void OnSurnameChanged();
		partial void OnFirstnameChanging(string value);
		partial void OnFirstnameChanged();
		partial void OnPatronymicChanging(string value);
		partial void OnPatronymicChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public Employee()
		{
			this._Blank = new EntitySet<Blank>(new Action<Blank>(this.attach_Blank), new Action<Blank>(this.detach_Blank));
			this._Blank_Employee = new EntitySet<Blank>(new Action<Blank>(this.attach_Blank_Employee), new Action<Blank>(this.detach_Blank_Employee));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Representation = default(EntityRef<Representation>);
			this._SignSample = default(EntityRef<N_File>);
			this._SPM_Subject = default(EntityRef<SPM_Subject>);
			this._StampSample = default(EntityRef<N_File>);
			this._FactAnnulment = new EntitySet<FactAnnulment>(new Action<FactAnnulment>(this.attach_FactAnnulment), new Action<FactAnnulment>(this.detach_FactAnnulment));
			this._FactForm = new EntitySet<FactForm>(new Action<FactForm>(this.attach_FactForm), new Action<FactForm>(this.detach_FactForm));
			this._FactReject = new EntitySet<FactReject>(new Action<FactReject>(this.attach_FactReject), new Action<FactReject>(this.detach_FactReject));
			this._FactResume = new EntitySet<FactResume>(new Action<FactResume>(this.attach_FactResume), new Action<FactResume>(this.detach_FactResume));
			this._FactSuspend = new EntitySet<FactSuspend>(new Action<FactSuspend>(this.attach_FactSuspend), new Action<FactSuspend>(this.detach_FactSuspend));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._OrderDoc_FactForm_Employee = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc_FactForm_Employee), new Action<OrderDoc>(this.detach_OrderDoc_FactForm_Employee));
			this._OrderDoc_IssueEmployee = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc_IssueEmployee), new Action<OrderDoc>(this.detach_OrderDoc_IssueEmployee));
			this._OrderDoc_RegEmployee = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc_RegEmployee), new Action<OrderDoc>(this.detach_OrderDoc_RegEmployee));
			this._Representation_ChiefPerson = new EntitySet<Representation>(new Action<Representation>(this.attach_Representation_ChiefPerson), new Action<Representation>(this.detach_Representation_ChiefPerson));
			this._VisitRecord = new EntitySet<VisitRecord>(new Action<VisitRecord>(this.attach_VisitRecord), new Action<VisitRecord>(this.detach_VisitRecord));
			OnCreated();
		}

		[Column(Storage = "_EmployeeID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}

		[Column(Storage = "_Phone", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}

		[Column(Storage = "_Fax", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}

		[Column(Storage = "_Email", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}

		[Column(Storage = "_Addinfo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Addinfo
		{
			get
			{
				return this._Addinfo;
			}
			set
			{
				if ((this._Addinfo != value))
				{
					this.OnAddinfoChanging(value);
					this.SendPropertyChanging();
					this._Addinfo = value;
					this.SendPropertyChanged("Addinfo");
					this.OnAddinfoChanged();
				}
			}
		}

		[Column(Storage = "_Post", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				if ((this._Post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._Post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}

		[Column(Storage = "_Code", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}

		[Column(Storage = "_SPM_SubjectID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> SPM_SubjectID
		{
			get
			{
				return this._SPM_SubjectID;
			}
			set
			{
				if ((this._SPM_SubjectID != value))
				{
					if (this._SPM_Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSPM_SubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SPM_SubjectID = value;
					this.SendPropertyChanged("SPM_SubjectID");
					this.OnSPM_SubjectIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_OldEmployeeID", DbType = "Decimal(14,0)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> OldEmployeeID
		{
			get
			{
				return this._OldEmployeeID;
			}
			set
			{
				if ((this._OldEmployeeID != value))
				{
					this.OnOldEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._OldEmployeeID = value;
					this.SendPropertyChanged("OldEmployeeID");
					this.OnOldEmployeeIDChanged();
				}
			}
		}

		[Column(Storage = "_OldPersonID", DbType = "Decimal(14,0)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> OldPersonID
		{
			get
			{
				return this._OldPersonID;
			}
			set
			{
				if ((this._OldPersonID != value))
				{
					this.OnOldPersonIDChanging(value);
					this.SendPropertyChanging();
					this._OldPersonID = value;
					this.SendPropertyChanged("OldPersonID");
					this.OnOldPersonIDChanged();
				}
			}
		}

		[Column(Storage = "_RepresentationID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					if (this._Representation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentationID = value;
					this.SendPropertyChanged("RepresentationID");
					this.OnRepresentationIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_IsChiefPerson", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsChiefPerson
		{
			get
			{
				return this._IsChiefPerson;
			}
			set
			{
				if ((this._IsChiefPerson != value))
				{
					this.OnIsChiefPersonChanging(value);
					this.SendPropertyChanging();
					this._IsChiefPerson = value;
					this.SendPropertyChanged("IsChiefPerson");
					this.OnIsChiefPersonChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_MasterObjectGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}

		[Column(Storage = "_LetterHeader", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string LetterHeader
		{
			get
			{
				return this._LetterHeader;
			}
			set
			{
				if ((this._LetterHeader != value))
				{
					this.OnLetterHeaderChanging(value);
					this.SendPropertyChanging();
					this._LetterHeader = value;
					this.SendPropertyChanged("LetterHeader");
					this.OnLetterHeaderChanged();
				}
			}
		}

		[Column(Storage = "_SignSampleFileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> SignSampleFileID
		{
			get
			{
				return this._SignSampleFileID;
			}
			set
			{
				if ((this._SignSampleFileID != value))
				{
					if (this._SignSample.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSignSampleFileIDChanging(value);
					this.SendPropertyChanging();
					this._SignSampleFileID = value;
					this.SendPropertyChanged("SignSampleFileID");
					this.OnSignSampleFileIDChanged();
				}
			}
		}

		[Column(Storage = "_StampSampleFileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> StampSampleFileID
		{
			get
			{
				return this._StampSampleFileID;
			}
			set
			{
				if ((this._StampSampleFileID != value))
				{
					if (this._StampSample.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStampSampleFileIDChanging(value);
					this.SendPropertyChanging();
					this._StampSampleFileID = value;
					this.SendPropertyChanged("StampSampleFileID");
					this.OnStampSampleFileIDChanged();
				}
			}
		}

		[Column(Storage = "_Surname", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}

		[Column(Storage = "_Firstname", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}

		[Column(Storage = "_Patronymic", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}

		[Column(Storage = "_Title", AutoSync = AutoSync.Always, DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(([Surname]+isnull((\' \'+substring([Firstname],(1),(1)))+\'.\',\'\'))+isnull((\'" +
			" \'+substring([Patronymic],(1),(1)))+\'.\',\'\'),\'\'))")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_Blank_DublicateEmployee", Storage = "_Blank", ThisKey = "EmployeeID", OtherKey = "DublicateEmployeeID", DeleteRule = "NO ACTION")]
		public EntitySet<Blank> Blank
		{
			get
			{
				return this._Blank;
			}
			set
			{
				this._Blank.Assign(value);
			}
		}

		[Association(Name = "FK_Blank_Employee", Storage = "_Blank_Employee", ThisKey = "EmployeeID", OtherKey = "EmployeeID", DeleteRule = "NO ACTION")]
		public EntitySet<Blank> Blank_Employee
		{
			get
			{
				return this._Blank_Employee;
			}
			set
			{
				this._Blank_Employee.Assign(value);
			}
		}

		[Association(Name = "FK_Employee_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.Employee.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.Employee.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_Employee_Representation", Storage = "_Representation", ThisKey = "RepresentationID", OtherKey = "RepresentationID", IsForeignKey = true)]
		public Representation Representation
		{
			get
			{
				return this._Representation.Entity;
			}
			set
			{
				Representation previousValue = this._Representation.Entity;
				if (((previousValue != value)
							|| (this._Representation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representation.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Representation.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._RepresentationID = value.RepresentationID;
					}
					else
					{
						this._RepresentationID = default(int);
					}
					this.SendPropertyChanged("Representation");
				}
			}
		}

		[Association(Name = "FK_Employee_SignSample", Storage = "_SignSample", ThisKey = "SignSampleFileID", OtherKey = "FileID", IsForeignKey = true)]
		public N_File SignSample
		{
			get
			{
				return this._SignSample.Entity;
			}
			set
			{
				N_File previousValue = this._SignSample.Entity;
				if (((previousValue != value)
							|| (this._SignSample.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SignSample.Entity = null;
						previousValue.Employee.Remove(this);
					}
					this._SignSample.Entity = value;
					if ((value != null))
					{
						value.Employee.Add(this);
						this._SignSampleFileID = value.FileID;
					}
					else
					{
						this._SignSampleFileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SignSample");
				}
			}
		}

		[Association(Name = "FK_Employee_SPM_Subject", Storage = "_SPM_Subject", ThisKey = "SPM_SubjectID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject SPM_Subject
		{
			get
			{
				return this._SPM_Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._SPM_Subject.Entity;
				if (((previousValue != value)
							|| (this._SPM_Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SPM_Subject.Entity = null;
						previousValue.Subject.Remove(this);
					}
					this._SPM_Subject.Entity = value;
					if ((value != null))
					{
						value.Subject.Add(this);
						this._SPM_SubjectID = value.SubjectID;
					}
					else
					{
						this._SPM_SubjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SPM_Subject");
				}
			}
		}

		[Association(Name = "FK_Employee_StampSample", Storage = "_StampSample", ThisKey = "StampSampleFileID", OtherKey = "FileID", IsForeignKey = true)]
		public N_File StampSample
		{
			get
			{
				return this._StampSample.Entity;
			}
			set
			{
				N_File previousValue = this._StampSample.Entity;
				if (((previousValue != value)
							|| (this._StampSample.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StampSample.Entity = null;
						previousValue.Employee_StampSample.Remove(this);
					}
					this._StampSample.Entity = value;
					if ((value != null))
					{
						value.Employee_StampSample.Add(this);
						this._StampSampleFileID = value.FileID;
					}
					else
					{
						this._StampSampleFileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("StampSample");
				}
			}
		}

		[Association(Name = "FK_FactAnnulment_Employee", Storage = "_FactAnnulment", ThisKey = "EmployeeID", OtherKey = "EmployeeID", DeleteRule = "NO ACTION")]
		public EntitySet<FactAnnulment> FactAnnulment
		{
			get
			{
				return this._FactAnnulment;
			}
			set
			{
				this._FactAnnulment.Assign(value);
			}
		}

		[Association(Name = "FK_FactForm_Employee", Storage = "_FactForm", ThisKey = "EmployeeID", OtherKey = "EmployeeID", DeleteRule = "NO ACTION")]
		public EntitySet<FactForm> FactForm
		{
			get
			{
				return this._FactForm;
			}
			set
			{
				this._FactForm.Assign(value);
			}
		}

		[Association(Name = "FK_FactReject_Employee", Storage = "_FactReject", ThisKey = "EmployeeID", OtherKey = "EmployeeID", DeleteRule = "NO ACTION")]
		public EntitySet<FactReject> FactReject
		{
			get
			{
				return this._FactReject;
			}
			set
			{
				this._FactReject.Assign(value);
			}
		}

		[Association(Name = "FK_FactResume_Employee", Storage = "_FactResume", ThisKey = "EmployeeID", OtherKey = "EmployeeID", DeleteRule = "NO ACTION")]
		public EntitySet<FactResume> FactResume
		{
			get
			{
				return this._FactResume;
			}
			set
			{
				this._FactResume.Assign(value);
			}
		}

		[Association(Name = "FK_FactSuspend_Employee", Storage = "_FactSuspend", ThisKey = "EmployeeID", OtherKey = "EmployeeID", DeleteRule = "NO ACTION")]
		public EntitySet<FactSuspend> FactSuspend
		{
			get
			{
				return this._FactSuspend;
			}
			set
			{
				this._FactSuspend.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_Employee", Storage = "_OrderDoc", ThisKey = "EmployeeID", OtherKey = "EmployeeID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_FactForm_Employee", Storage = "_OrderDoc_FactForm_Employee", ThisKey = "EmployeeID", OtherKey = "FactForm_EmployeeID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc_FactForm_Employee
		{
			get
			{
				return this._OrderDoc_FactForm_Employee;
			}
			set
			{
				this._OrderDoc_FactForm_Employee.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_IssueEmployee", Storage = "_OrderDoc_IssueEmployee", ThisKey = "EmployeeID", OtherKey = "IssueEmployeeID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc_IssueEmployee
		{
			get
			{
				return this._OrderDoc_IssueEmployee;
			}
			set
			{
				this._OrderDoc_IssueEmployee.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_RegEmployee", Storage = "_OrderDoc_RegEmployee", ThisKey = "EmployeeID", OtherKey = "RegEmployeeID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc_RegEmployee
		{
			get
			{
				return this._OrderDoc_RegEmployee;
			}
			set
			{
				this._OrderDoc_RegEmployee.Assign(value);
			}
		}

		[Association(Name = "FK_Representation_ChiefPerson", Storage = "_Representation_ChiefPerson", ThisKey = "EmployeeID", OtherKey = "ChiefPersonID", DeleteRule = "NO ACTION")]
		public EntitySet<Representation> Representation_ChiefPerson
		{
			get
			{
				return this._Representation_ChiefPerson;
			}
			set
			{
				this._Representation_ChiefPerson.Assign(value);
			}
		}

		[Association(Name = "FK_VisitRecord_Employee", Storage = "_VisitRecord", ThisKey = "EmployeeID", OtherKey = "EmployeeID", DeleteRule = "NO ACTION")]
		public EntitySet<VisitRecord> VisitRecord
		{
			get
			{
				return this._VisitRecord;
			}
			set
			{
				this._VisitRecord.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_Blank(Blank entity)
		{
			this.SendPropertyChanging();
			entity.DublicateEmployee = this;
		}

		private void detach_Blank(Blank entity)
		{
			this.SendPropertyChanging();
			entity.DublicateEmployee = null;
		}

		private void attach_Blank_Employee(Blank entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}

		private void detach_Blank_Employee(Blank entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}

		private void attach_FactAnnulment(FactAnnulment entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}

		private void detach_FactAnnulment(FactAnnulment entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}

		private void attach_FactForm(FactForm entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}

		private void detach_FactForm(FactForm entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}

		private void attach_FactReject(FactReject entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}

		private void detach_FactReject(FactReject entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}

		private void attach_FactResume(FactResume entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}

		private void detach_FactResume(FactResume entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}

		private void attach_FactSuspend(FactSuspend entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}

		private void detach_FactSuspend(FactSuspend entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}

		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}

		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}

		private void attach_OrderDoc_FactForm_Employee(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.FactForm_Employee = this;
		}

		private void detach_OrderDoc_FactForm_Employee(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.FactForm_Employee = null;
		}

		private void attach_OrderDoc_IssueEmployee(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.IssueEmployee = this;
		}

		private void detach_OrderDoc_IssueEmployee(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.IssueEmployee = null;
		}

		private void attach_OrderDoc_RegEmployee(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.RegEmployee = this;
		}

		private void detach_OrderDoc_RegEmployee(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.RegEmployee = null;
		}

		private void attach_Representation_ChiefPerson(Representation entity)
		{
			this.SendPropertyChanging();
			entity.ChiefPerson = this;
		}

		private void detach_Representation_ChiefPerson(Representation entity)
		{
			this.SendPropertyChanging();
			entity.ChiefPerson = null;
		}

		private void attach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}

		private void detach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}

	[Table(Name = "dbo.ErrorLog")]
	public partial class ErrorLog : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ErrorLogID;

		private System.DateTime _ErrorDate;

		private string _ErrorText;

		private string _Url;

		private string _UrlReferrer;

		private string _UserHostName;

		private string _UserHostAddress;

		private string _UserAgent;

		private string _RequestType;

		private string _Headers;

		private string _SqlLog;

		private string _UserName;

		private System.Data.Linq.Binary _Hash;

		private System.Nullable<int> _SimilarErrorID;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnErrorLogIDChanging(int value);
		partial void OnErrorLogIDChanged();
		partial void OnErrorDateChanging(System.DateTime value);
		partial void OnErrorDateChanged();
		partial void OnErrorTextChanging(string value);
		partial void OnErrorTextChanged();
		partial void OnUrlChanging(string value);
		partial void OnUrlChanged();
		partial void OnUrlReferrerChanging(string value);
		partial void OnUrlReferrerChanged();
		partial void OnUserHostNameChanging(string value);
		partial void OnUserHostNameChanged();
		partial void OnUserHostAddressChanging(string value);
		partial void OnUserHostAddressChanged();
		partial void OnUserAgentChanging(string value);
		partial void OnUserAgentChanged();
		partial void OnRequestTypeChanging(string value);
		partial void OnRequestTypeChanged();
		partial void OnHeadersChanging(string value);
		partial void OnHeadersChanged();
		partial void OnSqlLogChanging(string value);
		partial void OnSqlLogChanged();
		partial void OnUserNameChanging(string value);
		partial void OnUserNameChanged();
		partial void OnHashChanging(System.Data.Linq.Binary value);
		partial void OnHashChanged();
		partial void OnSimilarErrorIDChanging(System.Nullable<int> value);
		partial void OnSimilarErrorIDChanged();
		#endregion

		public ErrorLog()
		{
			OnCreated();
		}

		[Column(Storage = "_ErrorLogID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int ErrorLogID
		{
			get
			{
				return this._ErrorLogID;
			}
			set
			{
				if ((this._ErrorLogID != value))
				{
					this.OnErrorLogIDChanging(value);
					this.SendPropertyChanging();
					this._ErrorLogID = value;
					this.SendPropertyChanged("ErrorLogID");
					this.OnErrorLogIDChanged();
				}
			}
		}

		[Column(Storage = "_ErrorDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime ErrorDate
		{
			get
			{
				return this._ErrorDate;
			}
			set
			{
				if ((this._ErrorDate != value))
				{
					this.OnErrorDateChanging(value);
					this.SendPropertyChanging();
					this._ErrorDate = value;
					this.SendPropertyChanged("ErrorDate");
					this.OnErrorDateChanged();
				}
			}
		}

		[Column(Storage = "_ErrorText", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ErrorText
		{
			get
			{
				return this._ErrorText;
			}
			set
			{
				if ((this._ErrorText != value))
				{
					this.OnErrorTextChanging(value);
					this.SendPropertyChanging();
					this._ErrorText = value;
					this.SendPropertyChanged("ErrorText");
					this.OnErrorTextChanged();
				}
			}
		}

		[Column(Storage = "_Url", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}

		[Column(Storage = "_UrlReferrer", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string UrlReferrer
		{
			get
			{
				return this._UrlReferrer;
			}
			set
			{
				if ((this._UrlReferrer != value))
				{
					this.OnUrlReferrerChanging(value);
					this.SendPropertyChanging();
					this._UrlReferrer = value;
					this.SendPropertyChanged("UrlReferrer");
					this.OnUrlReferrerChanged();
				}
			}
		}

		[Column(Storage = "_UserHostName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string UserHostName
		{
			get
			{
				return this._UserHostName;
			}
			set
			{
				if ((this._UserHostName != value))
				{
					this.OnUserHostNameChanging(value);
					this.SendPropertyChanging();
					this._UserHostName = value;
					this.SendPropertyChanged("UserHostName");
					this.OnUserHostNameChanged();
				}
			}
		}

		[Column(Storage = "_UserHostAddress", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string UserHostAddress
		{
			get
			{
				return this._UserHostAddress;
			}
			set
			{
				if ((this._UserHostAddress != value))
				{
					this.OnUserHostAddressChanging(value);
					this.SendPropertyChanging();
					this._UserHostAddress = value;
					this.SendPropertyChanged("UserHostAddress");
					this.OnUserHostAddressChanged();
				}
			}
		}

		[Column(Storage = "_UserAgent", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string UserAgent
		{
			get
			{
				return this._UserAgent;
			}
			set
			{
				if ((this._UserAgent != value))
				{
					this.OnUserAgentChanging(value);
					this.SendPropertyChanging();
					this._UserAgent = value;
					this.SendPropertyChanged("UserAgent");
					this.OnUserAgentChanged();
				}
			}
		}

		[Column(Storage = "_RequestType", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string RequestType
		{
			get
			{
				return this._RequestType;
			}
			set
			{
				if ((this._RequestType != value))
				{
					this.OnRequestTypeChanging(value);
					this.SendPropertyChanging();
					this._RequestType = value;
					this.SendPropertyChanged("RequestType");
					this.OnRequestTypeChanged();
				}
			}
		}

		[Column(Storage = "_Headers", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Headers
		{
			get
			{
				return this._Headers;
			}
			set
			{
				if ((this._Headers != value))
				{
					this.OnHeadersChanging(value);
					this.SendPropertyChanging();
					this._Headers = value;
					this.SendPropertyChanged("Headers");
					this.OnHeadersChanged();
				}
			}
		}

		[Column(Storage = "_SqlLog", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SqlLog
		{
			get
			{
				return this._SqlLog;
			}
			set
			{
				if ((this._SqlLog != value))
				{
					this.OnSqlLogChanging(value);
					this.SendPropertyChanging();
					this._SqlLog = value;
					this.SendPropertyChanged("SqlLog");
					this.OnSqlLogChanged();
				}
			}
		}

		[Column(Storage = "_UserName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}

		[Column(Storage = "_Hash", DbType = "VarBinary(8000)", CanBeNull = true, UpdateCheck = UpdateCheck.Never)]
		public System.Data.Linq.Binary Hash
		{
			get
			{
				return this._Hash;
			}
			set
			{
				if ((this._Hash != value))
				{
					this.OnHashChanging(value);
					this.SendPropertyChanging();
					this._Hash = value;
					this.SendPropertyChanged("Hash");
					this.OnHashChanged();
				}
			}
		}

		[Column(Storage = "_SimilarErrorID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> SimilarErrorID
		{
			get
			{
				return this._SimilarErrorID;
			}
			set
			{
				if ((this._SimilarErrorID != value))
				{
					this.OnSimilarErrorIDChanging(value);
					this.SendPropertyChanging();
					this._SimilarErrorID = value;
					this.SendPropertyChanged("SimilarErrorID");
					this.OnSimilarErrorIDChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.EsiaActivateLog")]
	public partial class EsiaActivateLog : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _EsiaActivateLogID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private string _TransientId;

		private string _UserName;

		private string _FirstName;

		private string _LastName;

		private string _MiddleName;

		private string _EMail;

		private string _SNILS;

		private string _INN;

		private string _OrgName;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnEsiaActivateLogIDChanging(int value);
		partial void OnEsiaActivateLogIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnTransientIdChanging(string value);
		partial void OnTransientIdChanged();
		partial void OnUserNameChanging(string value);
		partial void OnUserNameChanged();
		partial void OnFirstNameChanging(string value);
		partial void OnFirstNameChanged();
		partial void OnLastNameChanging(string value);
		partial void OnLastNameChanged();
		partial void OnMiddleNameChanging(string value);
		partial void OnMiddleNameChanged();
		partial void OnEMailChanging(string value);
		partial void OnEMailChanged();
		partial void OnSNILSChanging(string value);
		partial void OnSNILSChanged();
		partial void OnINNChanging(string value);
		partial void OnINNChanged();
		partial void OnOrgNameChanging(string value);
		partial void OnOrgNameChanged();
		#endregion

		public EsiaActivateLog()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_EsiaActivateLogID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int EsiaActivateLogID
		{
			get
			{
				return this._EsiaActivateLogID;
			}
			set
			{
				if ((this._EsiaActivateLogID != value))
				{
					this.OnEsiaActivateLogIDChanging(value);
					this.SendPropertyChanging();
					this._EsiaActivateLogID = value;
					this.SendPropertyChanged("EsiaActivateLogID");
					this.OnEsiaActivateLogIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_TransientId", DbType = "NVarChar(100) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string TransientId
		{
			get
			{
				return this._TransientId;
			}
			set
			{
				if ((this._TransientId != value))
				{
					this.OnTransientIdChanging(value);
					this.SendPropertyChanging();
					this._TransientId = value;
					this.SendPropertyChanged("TransientId");
					this.OnTransientIdChanged();
				}
			}
		}

		[Column(Storage = "_UserName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}

		[Column(Storage = "_FirstName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}

		[Column(Storage = "_LastName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}

		[Column(Storage = "_MiddleName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}

		[Column(Storage = "_EMail", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}

		[Column(Storage = "_SNILS", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SNILS
		{
			get
			{
				return this._SNILS;
			}
			set
			{
				if ((this._SNILS != value))
				{
					this.OnSNILSChanging(value);
					this.SendPropertyChanging();
					this._SNILS = value;
					this.SendPropertyChanged("SNILS");
					this.OnSNILSChanged();
				}
			}
		}

		[Column(Storage = "_INN", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string INN
		{
			get
			{
				return this._INN;
			}
			set
			{
				if ((this._INN != value))
				{
					this.OnINNChanging(value);
					this.SendPropertyChanging();
					this._INN = value;
					this.SendPropertyChanged("INN");
					this.OnINNChanged();
				}
			}
		}

		[Column(Storage = "_OrgName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string OrgName
		{
			get
			{
				return this._OrgName;
			}
			set
			{
				if ((this._OrgName != value))
				{
					this.OnOrgNameChanging(value);
					this.SendPropertyChanging();
					this._OrgName = value;
					this.SendPropertyChanged("OrgName");
					this.OnOrgNameChanged();
				}
			}
		}

		[Association(Name = "FK_EsiaActivateLog_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.EsiaActivateLog.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.EsiaActivateLog.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.EsiaSession")]
	public partial class EsiaSession : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _EsiaSessionID;

		private string _SessionKey;

		private System.DateTime _EndDate;

		private string _Data;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnEsiaSessionIDChanging(int value);
		partial void OnEsiaSessionIDChanged();
		partial void OnSessionKeyChanging(string value);
		partial void OnSessionKeyChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnDataChanging(string value);
		partial void OnDataChanged();
		#endregion

		public EsiaSession()
		{
			OnCreated();
		}

		[Column(Storage = "_EsiaSessionID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int EsiaSessionID
		{
			get
			{
				return this._EsiaSessionID;
			}
			set
			{
				if ((this._EsiaSessionID != value))
				{
					this.OnEsiaSessionIDChanging(value);
					this.SendPropertyChanging();
					this._EsiaSessionID = value;
					this.SendPropertyChanged("EsiaSessionID");
					this.OnEsiaSessionIDChanged();
				}
			}
		}

		[Column(Storage = "_SessionKey", DbType = "NVarChar(100) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SessionKey
		{
			get
			{
				return this._SessionKey;
			}
			set
			{
				if ((this._SessionKey != value))
				{
					this.OnSessionKeyChanging(value);
					this.SendPropertyChanging();
					this._SessionKey = value;
					this.SendPropertyChanged("SessionKey");
					this.OnSessionKeyChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_Data", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.FactAnnulment")]
	public partial class FactAnnulment : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FactID;

		private System.Nullable<System.DateTime> _AnnulmentDate;

		private int _AnnulmentReasonID;

		private System.Nullable<System.DateTime> _BasisDate;

		private string _BasisNo;

		private string _BasisTitle;

		private string _BasisType;

		private System.Nullable<int> _EmployeeID;

		private System.Nullable<System.DateTime> _FactShippedDate;

		private System.Nullable<decimal> _FactShippedQuantity;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.Nullable<System.DateTime> _SignDate;

		private System.Nullable<int> _FactShippedMeasureID;

		private EntityRef<C_AnnulmentReason> _AnnulmentReason;

		private EntityRef<Employee> _Employee;

		private EntityRef<C_Measure> _FactShippedMeasure;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<OrderDocTransition> _OrderDocTransition;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFactIDChanging(int value);
		partial void OnFactIDChanged();
		partial void OnAnnulmentDateChanging(System.Nullable<System.DateTime> value);
		partial void OnAnnulmentDateChanged();
		partial void OnAnnulmentReasonIDChanging(int value);
		partial void OnAnnulmentReasonIDChanged();
		partial void OnBasisDateChanging(System.Nullable<System.DateTime> value);
		partial void OnBasisDateChanged();
		partial void OnBasisNoChanging(string value);
		partial void OnBasisNoChanged();
		partial void OnBasisTitleChanging(string value);
		partial void OnBasisTitleChanged();
		partial void OnBasisTypeChanging(string value);
		partial void OnBasisTypeChanged();
		partial void OnEmployeeIDChanging(System.Nullable<int> value);
		partial void OnEmployeeIDChanged();
		partial void OnFactShippedDateChanging(System.Nullable<System.DateTime> value);
		partial void OnFactShippedDateChanged();
		partial void OnFactShippedQuantityChanging(System.Nullable<decimal> value);
		partial void OnFactShippedQuantityChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
		partial void OnSignDateChanged();
		partial void OnFactShippedMeasureIDChanging(System.Nullable<int> value);
		partial void OnFactShippedMeasureIDChanged();
		#endregion

		public FactAnnulment()
		{
			this._AnnulmentReason = default(EntityRef<C_AnnulmentReason>);
			this._Employee = default(EntityRef<Employee>);
			this._FactShippedMeasure = default(EntityRef<C_Measure>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDocTransition = default(EntityRef<OrderDocTransition>);
			OnCreated();
		}

		[Column(Storage = "_FactID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._OrderDocTransition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}

		[Column(Storage = "_AnnulmentDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> AnnulmentDate
		{
			get
			{
				return this._AnnulmentDate;
			}
			set
			{
				if ((this._AnnulmentDate != value))
				{
					this.OnAnnulmentDateChanging(value);
					this.SendPropertyChanging();
					this._AnnulmentDate = value;
					this.SendPropertyChanged("AnnulmentDate");
					this.OnAnnulmentDateChanged();
				}
			}
		}

		[Column(Storage = "_AnnulmentReasonID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int AnnulmentReasonID
		{
			get
			{
				return this._AnnulmentReasonID;
			}
			set
			{
				if ((this._AnnulmentReasonID != value))
				{
					if (this._AnnulmentReason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnnulmentReasonIDChanging(value);
					this.SendPropertyChanging();
					this._AnnulmentReasonID = value;
					this.SendPropertyChanged("AnnulmentReasonID");
					this.OnAnnulmentReasonIDChanged();
				}
			}
		}

		[Column(Storage = "_BasisDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BasisDate
		{
			get
			{
				return this._BasisDate;
			}
			set
			{
				if ((this._BasisDate != value))
				{
					this.OnBasisDateChanging(value);
					this.SendPropertyChanging();
					this._BasisDate = value;
					this.SendPropertyChanged("BasisDate");
					this.OnBasisDateChanged();
				}
			}
		}

		[Column(Storage = "_BasisNo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BasisNo
		{
			get
			{
				return this._BasisNo;
			}
			set
			{
				if ((this._BasisNo != value))
				{
					this.OnBasisNoChanging(value);
					this.SendPropertyChanging();
					this._BasisNo = value;
					this.SendPropertyChanged("BasisNo");
					this.OnBasisNoChanged();
				}
			}
		}

		[Column(Storage = "_BasisTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BasisTitle
		{
			get
			{
				return this._BasisTitle;
			}
			set
			{
				if ((this._BasisTitle != value))
				{
					this.OnBasisTitleChanging(value);
					this.SendPropertyChanging();
					this._BasisTitle = value;
					this.SendPropertyChanged("BasisTitle");
					this.OnBasisTitleChanged();
				}
			}
		}

		[Column(Storage = "_BasisType", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BasisType
		{
			get
			{
				return this._BasisType;
			}
			set
			{
				if ((this._BasisType != value))
				{
					this.OnBasisTypeChanging(value);
					this.SendPropertyChanging();
					this._BasisType = value;
					this.SendPropertyChanged("BasisType");
					this.OnBasisTypeChanged();
				}
			}
		}

		[Column(Storage = "_EmployeeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}

		[Column(Storage = "_FactShippedDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FactShippedDate
		{
			get
			{
				return this._FactShippedDate;
			}
			set
			{
				if ((this._FactShippedDate != value))
				{
					this.OnFactShippedDateChanging(value);
					this.SendPropertyChanging();
					this._FactShippedDate = value;
					this.SendPropertyChanged("FactShippedDate");
					this.OnFactShippedDateChanged();
				}
			}
		}

		[Column(Storage = "_FactShippedQuantity", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> FactShippedQuantity
		{
			get
			{
				return this._FactShippedQuantity;
			}
			set
			{
				if ((this._FactShippedQuantity != value))
				{
					this.OnFactShippedQuantityChanging(value);
					this.SendPropertyChanging();
					this._FactShippedQuantity = value;
					this.SendPropertyChanged("FactShippedQuantity");
					this.OnFactShippedQuantityChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_SignDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}

		[Column(Storage = "_FactShippedMeasureID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> FactShippedMeasureID
		{
			get
			{
				return this._FactShippedMeasureID;
			}
			set
			{
				if ((this._FactShippedMeasureID != value))
				{
					if (this._FactShippedMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactShippedMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._FactShippedMeasureID = value;
					this.SendPropertyChanged("FactShippedMeasureID");
					this.OnFactShippedMeasureIDChanged();
				}
			}
		}

		[Association(Name = "FK_FactAnnulment_AnnulmentReason", Storage = "_AnnulmentReason", ThisKey = "AnnulmentReasonID", OtherKey = "AnnulmentReasonID", IsForeignKey = true)]
		public C_AnnulmentReason AnnulmentReason
		{
			get
			{
				return this._AnnulmentReason.Entity;
			}
			set
			{
				C_AnnulmentReason previousValue = this._AnnulmentReason.Entity;
				if (((previousValue != value)
							|| (this._AnnulmentReason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AnnulmentReason.Entity = null;
						previousValue.FactAnnulment.Remove(this);
					}
					this._AnnulmentReason.Entity = value;
					if ((value != null))
					{
						value.FactAnnulment.Add(this);
						this._AnnulmentReasonID = value.AnnulmentReasonID;
					}
					else
					{
						this._AnnulmentReasonID = default(int);
					}
					this.SendPropertyChanged("AnnulmentReason");
				}
			}
		}

		[Association(Name = "FK_FactAnnulment_Employee", Storage = "_Employee", ThisKey = "EmployeeID", OtherKey = "EmployeeID", IsForeignKey = true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value)
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.FactAnnulment.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.FactAnnulment.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}

		[Association(Name = "FK_FactAnnulment_FactShippedMeasure", Storage = "_FactShippedMeasure", ThisKey = "FactShippedMeasureID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure FactShippedMeasure
		{
			get
			{
				return this._FactShippedMeasure.Entity;
			}
			set
			{
				C_Measure previousValue = this._FactShippedMeasure.Entity;
				if (((previousValue != value)
							|| (this._FactShippedMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactShippedMeasure.Entity = null;
						previousValue.FactAnnulment.Remove(this);
					}
					this._FactShippedMeasure.Entity = value;
					if ((value != null))
					{
						value.FactAnnulment.Add(this);
						this._FactShippedMeasureID = value.MeasureID;
					}
					else
					{
						this._FactShippedMeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FactShippedMeasure");
				}
			}
		}

		[Association(Name = "FK_FactAnnulment_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.FactAnnulment.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.FactAnnulment.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_FactAnnulment_OrderDocTransition", Storage = "_OrderDocTransition", ThisKey = "FactID", OtherKey = "OrderDocTransitionID", IsForeignKey = true, DeleteOnNull = true)]
		public OrderDocTransition OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition.Entity;
			}
			set
			{
				OrderDocTransition previousValue = this._OrderDocTransition.Entity;
				if (((previousValue != value)
							|| (this._OrderDocTransition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDocTransition.Entity = null;
						previousValue.FactAnnulment = null;
					}
					this._OrderDocTransition.Entity = value;
					if ((value != null))
					{
						value.FactAnnulment = this;
						this._FactID = value.OrderDocTransitionID;
					}
					else
					{
						this._FactID = default(int);
					}
					this.SendPropertyChanged("OrderDocTransition");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.FactClose")]
	public partial class FactClose : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FactID;

		private System.Nullable<System.DateTime> _FactShippedDate;

		private System.Nullable<decimal> _FactShippedQuantity;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.Nullable<int> _FactShippedMeasureID;

		private EntityRef<C_Measure> _FactShippedMeasure;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<OrderDocTransition> _OrderDocTransition;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFactIDChanging(int value);
		partial void OnFactIDChanged();
		partial void OnFactShippedDateChanging(System.Nullable<System.DateTime> value);
		partial void OnFactShippedDateChanged();
		partial void OnFactShippedQuantityChanging(System.Nullable<decimal> value);
		partial void OnFactShippedQuantityChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnFactShippedMeasureIDChanging(System.Nullable<int> value);
		partial void OnFactShippedMeasureIDChanged();
		#endregion

		public FactClose()
		{
			this._FactShippedMeasure = default(EntityRef<C_Measure>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDocTransition = default(EntityRef<OrderDocTransition>);
			OnCreated();
		}

		[Column(Storage = "_FactID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._OrderDocTransition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}

		[Column(Storage = "_FactShippedDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FactShippedDate
		{
			get
			{
				return this._FactShippedDate;
			}
			set
			{
				if ((this._FactShippedDate != value))
				{
					this.OnFactShippedDateChanging(value);
					this.SendPropertyChanging();
					this._FactShippedDate = value;
					this.SendPropertyChanged("FactShippedDate");
					this.OnFactShippedDateChanged();
				}
			}
		}

		[Column(Storage = "_FactShippedQuantity", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> FactShippedQuantity
		{
			get
			{
				return this._FactShippedQuantity;
			}
			set
			{
				if ((this._FactShippedQuantity != value))
				{
					this.OnFactShippedQuantityChanging(value);
					this.SendPropertyChanging();
					this._FactShippedQuantity = value;
					this.SendPropertyChanged("FactShippedQuantity");
					this.OnFactShippedQuantityChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_FactShippedMeasureID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> FactShippedMeasureID
		{
			get
			{
				return this._FactShippedMeasureID;
			}
			set
			{
				if ((this._FactShippedMeasureID != value))
				{
					if (this._FactShippedMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactShippedMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._FactShippedMeasureID = value;
					this.SendPropertyChanged("FactShippedMeasureID");
					this.OnFactShippedMeasureIDChanged();
				}
			}
		}

		[Association(Name = "FK_FactClose_FactShippedMeasure", Storage = "_FactShippedMeasure", ThisKey = "FactShippedMeasureID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure FactShippedMeasure
		{
			get
			{
				return this._FactShippedMeasure.Entity;
			}
			set
			{
				C_Measure previousValue = this._FactShippedMeasure.Entity;
				if (((previousValue != value)
							|| (this._FactShippedMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactShippedMeasure.Entity = null;
						previousValue.FactClose.Remove(this);
					}
					this._FactShippedMeasure.Entity = value;
					if ((value != null))
					{
						value.FactClose.Add(this);
						this._FactShippedMeasureID = value.MeasureID;
					}
					else
					{
						this._FactShippedMeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FactShippedMeasure");
				}
			}
		}

		[Association(Name = "FK_FactClose_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.FactClose.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.FactClose.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_FactClose_OrderDocTransition", Storage = "_OrderDocTransition", ThisKey = "FactID", OtherKey = "OrderDocTransitionID", IsForeignKey = true, DeleteOnNull = true)]
		public OrderDocTransition OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition.Entity;
			}
			set
			{
				OrderDocTransition previousValue = this._OrderDocTransition.Entity;
				if (((previousValue != value)
							|| (this._OrderDocTransition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDocTransition.Entity = null;
						previousValue.FactClose = null;
					}
					this._OrderDocTransition.Entity = value;
					if ((value != null))
					{
						value.FactClose = this;
						this._FactID = value.OrderDocTransitionID;
					}
					else
					{
						this._FactID = default(int);
					}
					this.SendPropertyChanged("OrderDocTransition");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.FactForm")]
	public partial class FactForm : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FactID;

		private System.Nullable<System.DateTime> _SignDate;

		private System.DateTime _LastModifiedDate;

		private bool _IsDeleted;

		private int _LastModifiedUserID;

		private System.Nullable<int> _EmployeeID;

		private System.Nullable<System.Guid> _BlankGUID;

		private System.Nullable<System.DateTime> _FormDate;

		private string _EmployeePost;

		private string _EmployeeTitle;

		private EntityRef<Blank> _Blank;

		private EntityRef<Employee> _Employee;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<OrderDocTransition> _OrderDocTransition;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFactIDChanging(int value);
		partial void OnFactIDChanged();
		partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
		partial void OnSignDateChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnEmployeeIDChanging(System.Nullable<int> value);
		partial void OnEmployeeIDChanged();
		partial void OnBlankGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnBlankGUIDChanged();
		partial void OnFormDateChanging(System.Nullable<System.DateTime> value);
		partial void OnFormDateChanged();
		partial void OnEmployeePostChanging(string value);
		partial void OnEmployeePostChanged();
		partial void OnEmployeeTitleChanging(string value);
		partial void OnEmployeeTitleChanged();
		#endregion

		public FactForm()
		{
			this._Blank = default(EntityRef<Blank>);
			this._Employee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDocTransition = default(EntityRef<OrderDocTransition>);
			OnCreated();
		}

		[Column(Storage = "_FactID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._OrderDocTransition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}

		[Column(Storage = "_SignDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_EmployeeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}

		[Column(Storage = "_BlankGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> BlankGUID
		{
			get
			{
				return this._BlankGUID;
			}
			set
			{
				if ((this._BlankGUID != value))
				{
					if (this._Blank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlankGUIDChanging(value);
					this.SendPropertyChanging();
					this._BlankGUID = value;
					this.SendPropertyChanged("BlankGUID");
					this.OnBlankGUIDChanged();
				}
			}
		}

		[Column(Storage = "_FormDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FormDate
		{
			get
			{
				return this._FormDate;
			}
			set
			{
				if ((this._FormDate != value))
				{
					this.OnFormDateChanging(value);
					this.SendPropertyChanging();
					this._FormDate = value;
					this.SendPropertyChanged("FormDate");
					this.OnFormDateChanged();
				}
			}
		}

		[Column(Storage = "_EmployeePost", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string EmployeePost
		{
			get
			{
				return this._EmployeePost;
			}
			set
			{
				if ((this._EmployeePost != value))
				{
					this.OnEmployeePostChanging(value);
					this.SendPropertyChanging();
					this._EmployeePost = value;
					this.SendPropertyChanged("EmployeePost");
					this.OnEmployeePostChanged();
				}
			}
		}

		[Column(Storage = "_EmployeeTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string EmployeeTitle
		{
			get
			{
				return this._EmployeeTitle;
			}
			set
			{
				if ((this._EmployeeTitle != value))
				{
					this.OnEmployeeTitleChanging(value);
					this.SendPropertyChanging();
					this._EmployeeTitle = value;
					this.SendPropertyChanged("EmployeeTitle");
					this.OnEmployeeTitleChanged();
				}
			}
		}

		[Association(Name = "FK_FactForm_Blank", Storage = "_Blank", ThisKey = "BlankGUID", OtherKey = "BlankGUID", IsForeignKey = true)]
		public Blank Blank
		{
			get
			{
				return this._Blank.Entity;
			}
			set
			{
				Blank previousValue = this._Blank.Entity;
				if (((previousValue != value)
							|| (this._Blank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blank.Entity = null;
						previousValue.FactForm.Remove(this);
					}
					this._Blank.Entity = value;
					if ((value != null))
					{
						value.FactForm.Add(this);
						this._BlankGUID = value.BlankGUID;
					}
					else
					{
						this._BlankGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Blank");
				}
			}
		}

		[Association(Name = "FK_FactForm_Employee", Storage = "_Employee", ThisKey = "EmployeeID", OtherKey = "EmployeeID", IsForeignKey = true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value)
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.FactForm.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.FactForm.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}

		[Association(Name = "FK_FactForm_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.FactForm.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.FactForm.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_FactForm_OrderDocTransition", Storage = "_OrderDocTransition", ThisKey = "FactID", OtherKey = "OrderDocTransitionID", IsForeignKey = true, DeleteOnNull = true)]
		public OrderDocTransition OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition.Entity;
			}
			set
			{
				OrderDocTransition previousValue = this._OrderDocTransition.Entity;
				if (((previousValue != value)
							|| (this._OrderDocTransition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDocTransition.Entity = null;
						previousValue.FactForm = null;
					}
					this._OrderDocTransition.Entity = value;
					if ((value != null))
					{
						value.FactForm = this;
						this._FactID = value.OrderDocTransitionID;
					}
					else
					{
						this._FactID = default(int);
					}
					this.SendPropertyChanged("OrderDocTransition");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.FactRegister")]
	public partial class FactRegister : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FactID;

		private System.DateTime _LastModifiedDate;

		private bool _IsDeleted;

		private int _LastModifiedUserID;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<OrderDocTransition> _OrderDocTransition;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFactIDChanging(int value);
		partial void OnFactIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		#endregion

		public FactRegister()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDocTransition = default(EntityRef<OrderDocTransition>);
			OnCreated();
		}

		[Column(Storage = "_FactID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._OrderDocTransition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Association(Name = "FK_FactRegister_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.FactRegister.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.FactRegister.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_FactRegister_OrderDocTransition", Storage = "_OrderDocTransition", ThisKey = "FactID", OtherKey = "OrderDocTransitionID", IsForeignKey = true, DeleteOnNull = true)]
		public OrderDocTransition OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition.Entity;
			}
			set
			{
				OrderDocTransition previousValue = this._OrderDocTransition.Entity;
				if (((previousValue != value)
							|| (this._OrderDocTransition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDocTransition.Entity = null;
						previousValue.FactRegister = null;
					}
					this._OrderDocTransition.Entity = value;
					if ((value != null))
					{
						value.FactRegister = this;
						this._FactID = value.OrderDocTransitionID;
					}
					else
					{
						this._FactID = default(int);
					}
					this.SendPropertyChanged("OrderDocTransition");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.FactReject")]
	public partial class FactReject : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FactID;

		private System.Nullable<int> _EmployeeID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.Nullable<System.DateTime> _SignDate;

		private EntityRef<Employee> _Employee;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<OrderDocTransition> _OrderDocTransition;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFactIDChanging(int value);
		partial void OnFactIDChanged();
		partial void OnEmployeeIDChanging(System.Nullable<int> value);
		partial void OnEmployeeIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
		partial void OnSignDateChanged();
		#endregion

		public FactReject()
		{
			this._Employee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDocTransition = default(EntityRef<OrderDocTransition>);
			OnCreated();
		}

		[Column(Storage = "_FactID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._OrderDocTransition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}

		[Column(Storage = "_EmployeeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_SignDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}

		[Association(Name = "FK_FactReject_Employee", Storage = "_Employee", ThisKey = "EmployeeID", OtherKey = "EmployeeID", IsForeignKey = true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value)
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.FactReject.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.FactReject.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}

		[Association(Name = "FK_FactReject_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.FactReject.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.FactReject.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_FactReject_OrderDocTransition", Storage = "_OrderDocTransition", ThisKey = "FactID", OtherKey = "OrderDocTransitionID", IsForeignKey = true, DeleteOnNull = true)]
		public OrderDocTransition OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition.Entity;
			}
			set
			{
				OrderDocTransition previousValue = this._OrderDocTransition.Entity;
				if (((previousValue != value)
							|| (this._OrderDocTransition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDocTransition.Entity = null;
						previousValue.FactReject = null;
					}
					this._OrderDocTransition.Entity = value;
					if ((value != null))
					{
						value.FactReject = this;
						this._FactID = value.OrderDocTransitionID;
					}
					else
					{
						this._FactID = default(int);
					}
					this.SendPropertyChanged("OrderDocTransition");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.FactResume")]
	public partial class FactResume : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FactID;

		private System.Nullable<System.DateTime> _BasisDate;

		private string _BasisNo;

		private string _BasisTitle;

		private string _BasisType;

		private System.Nullable<int> _EmployeeID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.Nullable<System.DateTime> _SignDate;

		private EntityRef<Employee> _Employee;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<OrderDocTransition> _OrderDocTransition;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFactIDChanging(int value);
		partial void OnFactIDChanged();
		partial void OnBasisDateChanging(System.Nullable<System.DateTime> value);
		partial void OnBasisDateChanged();
		partial void OnBasisNoChanging(string value);
		partial void OnBasisNoChanged();
		partial void OnBasisTitleChanging(string value);
		partial void OnBasisTitleChanged();
		partial void OnBasisTypeChanging(string value);
		partial void OnBasisTypeChanged();
		partial void OnEmployeeIDChanging(System.Nullable<int> value);
		partial void OnEmployeeIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
		partial void OnSignDateChanged();
		#endregion

		public FactResume()
		{
			this._Employee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDocTransition = default(EntityRef<OrderDocTransition>);
			OnCreated();
		}

		[Column(Storage = "_FactID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._OrderDocTransition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}

		[Column(Storage = "_BasisDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BasisDate
		{
			get
			{
				return this._BasisDate;
			}
			set
			{
				if ((this._BasisDate != value))
				{
					this.OnBasisDateChanging(value);
					this.SendPropertyChanging();
					this._BasisDate = value;
					this.SendPropertyChanged("BasisDate");
					this.OnBasisDateChanged();
				}
			}
		}

		[Column(Storage = "_BasisNo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BasisNo
		{
			get
			{
				return this._BasisNo;
			}
			set
			{
				if ((this._BasisNo != value))
				{
					this.OnBasisNoChanging(value);
					this.SendPropertyChanging();
					this._BasisNo = value;
					this.SendPropertyChanged("BasisNo");
					this.OnBasisNoChanged();
				}
			}
		}

		[Column(Storage = "_BasisTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BasisTitle
		{
			get
			{
				return this._BasisTitle;
			}
			set
			{
				if ((this._BasisTitle != value))
				{
					this.OnBasisTitleChanging(value);
					this.SendPropertyChanging();
					this._BasisTitle = value;
					this.SendPropertyChanged("BasisTitle");
					this.OnBasisTitleChanged();
				}
			}
		}

		[Column(Storage = "_BasisType", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BasisType
		{
			get
			{
				return this._BasisType;
			}
			set
			{
				if ((this._BasisType != value))
				{
					this.OnBasisTypeChanging(value);
					this.SendPropertyChanging();
					this._BasisType = value;
					this.SendPropertyChanged("BasisType");
					this.OnBasisTypeChanged();
				}
			}
		}

		[Column(Storage = "_EmployeeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_SignDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}

		[Association(Name = "FK_FactResume_Employee", Storage = "_Employee", ThisKey = "EmployeeID", OtherKey = "EmployeeID", IsForeignKey = true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value)
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.FactResume.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.FactResume.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}

		[Association(Name = "FK_FactResume_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.FactResume.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.FactResume.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_FactResume_OrderDocTransition", Storage = "_OrderDocTransition", ThisKey = "FactID", OtherKey = "OrderDocTransitionID", IsForeignKey = true, DeleteOnNull = true)]
		public OrderDocTransition OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition.Entity;
			}
			set
			{
				OrderDocTransition previousValue = this._OrderDocTransition.Entity;
				if (((previousValue != value)
							|| (this._OrderDocTransition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDocTransition.Entity = null;
						previousValue.FactResume = null;
					}
					this._OrderDocTransition.Entity = value;
					if ((value != null))
					{
						value.FactResume = this;
						this._FactID = value.OrderDocTransitionID;
					}
					else
					{
						this._FactID = default(int);
					}
					this.SendPropertyChanged("OrderDocTransition");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.FactSuspend")]
	public partial class FactSuspend : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FactID;

		private System.Nullable<System.DateTime> _BasisDate;

		private string _BasisNo;

		private string _BasisTitle;

		private string _BasisType;

		private System.Nullable<int> _EmployeeID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private char _ReasonType;

		private System.Nullable<System.DateTime> _SignDate;

		private EntityRef<Employee> _Employee;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<OrderDocTransition> _OrderDocTransition;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFactIDChanging(int value);
		partial void OnFactIDChanged();
		partial void OnBasisDateChanging(System.Nullable<System.DateTime> value);
		partial void OnBasisDateChanged();
		partial void OnBasisNoChanging(string value);
		partial void OnBasisNoChanged();
		partial void OnBasisTitleChanging(string value);
		partial void OnBasisTitleChanged();
		partial void OnBasisTypeChanging(string value);
		partial void OnBasisTypeChanged();
		partial void OnEmployeeIDChanging(System.Nullable<int> value);
		partial void OnEmployeeIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnReasonTypeChanging(char value);
		partial void OnReasonTypeChanged();
		partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
		partial void OnSignDateChanged();
		#endregion

		public FactSuspend()
		{
			this._Employee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDocTransition = default(EntityRef<OrderDocTransition>);
			OnCreated();
		}

		[Column(Storage = "_FactID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._OrderDocTransition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}

		[Column(Storage = "_BasisDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BasisDate
		{
			get
			{
				return this._BasisDate;
			}
			set
			{
				if ((this._BasisDate != value))
				{
					this.OnBasisDateChanging(value);
					this.SendPropertyChanging();
					this._BasisDate = value;
					this.SendPropertyChanged("BasisDate");
					this.OnBasisDateChanged();
				}
			}
		}

		[Column(Storage = "_BasisNo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BasisNo
		{
			get
			{
				return this._BasisNo;
			}
			set
			{
				if ((this._BasisNo != value))
				{
					this.OnBasisNoChanging(value);
					this.SendPropertyChanging();
					this._BasisNo = value;
					this.SendPropertyChanged("BasisNo");
					this.OnBasisNoChanged();
				}
			}
		}

		[Column(Storage = "_BasisTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BasisTitle
		{
			get
			{
				return this._BasisTitle;
			}
			set
			{
				if ((this._BasisTitle != value))
				{
					this.OnBasisTitleChanging(value);
					this.SendPropertyChanging();
					this._BasisTitle = value;
					this.SendPropertyChanged("BasisTitle");
					this.OnBasisTitleChanged();
				}
			}
		}

		[Column(Storage = "_BasisType", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BasisType
		{
			get
			{
				return this._BasisType;
			}
			set
			{
				if ((this._BasisType != value))
				{
					this.OnBasisTypeChanging(value);
					this.SendPropertyChanging();
					this._BasisType = value;
					this.SendPropertyChanged("BasisType");
					this.OnBasisTypeChanged();
				}
			}
		}

		[Column(Storage = "_EmployeeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_ReasonType", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char ReasonType
		{
			get
			{
				return this._ReasonType;
			}
			set
			{
				if ((this._ReasonType != value))
				{
					this.OnReasonTypeChanging(value);
					this.SendPropertyChanging();
					this._ReasonType = value;
					this.SendPropertyChanged("ReasonType");
					this.OnReasonTypeChanged();
				}
			}
		}

		[Column(Storage = "_SignDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}

		[Association(Name = "FK_FactSuspend_Employee", Storage = "_Employee", ThisKey = "EmployeeID", OtherKey = "EmployeeID", IsForeignKey = true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value)
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.FactSuspend.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.FactSuspend.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}

		[Association(Name = "FK_FactSuspend_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.FactSuspend.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.FactSuspend.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_FactSuspend_OrderDocTransition", Storage = "_OrderDocTransition", ThisKey = "FactID", OtherKey = "OrderDocTransitionID", IsForeignKey = true, DeleteOnNull = true)]
		public OrderDocTransition OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition.Entity;
			}
			set
			{
				OrderDocTransition previousValue = this._OrderDocTransition.Entity;
				if (((previousValue != value)
							|| (this._OrderDocTransition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDocTransition.Entity = null;
						previousValue.FactSuspend = null;
					}
					this._OrderDocTransition.Entity = value;
					if ((value != null))
					{
						value.FactSuspend = this;
						this._FactID = value.OrderDocTransitionID;
					}
					else
					{
						this._FactID = default(int);
					}
					this.SendPropertyChanged("OrderDocTransition");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.ForeignAuthorization")]
	public partial class ForeignAuthorization : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ForeignAuthorizationID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private char _Status;

		private System.Nullable<System.DateTime> _CreateDate;

		private System.Nullable<int> _QuotaYear;

		private System.Nullable<int> _CountryGroupID;

		private System.Nullable<int> _CNCategoryID;

		private System.Nullable<int> _CNID;

		private string _Title;

		private char _Type;

		private System.Nullable<decimal> _Amount;

		private string _DealerID;

		private System.Nullable<int> _DealerCountryID;

		private string _DealerAddress;

		private string _DealerName;

		private System.Nullable<System.Guid> _ContractorGUID;

		private EntityRef<C_CN> _CN;

		private EntityRef<C_CNCategory> _CNCategory;

		private EntityRef<Contractor> _Contractor;

		private EntityRef<C_CountryGroup> _CountryGroup;

		private EntityRef<C_Country> _DealerCountry;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnForeignAuthorizationIDChanging(int value);
		partial void OnForeignAuthorizationIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnStatusChanging(char value);
		partial void OnStatusChanged();
		partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
		partial void OnCreateDateChanged();
		partial void OnQuotaYearChanging(System.Nullable<int> value);
		partial void OnQuotaYearChanged();
		partial void OnCountryGroupIDChanging(System.Nullable<int> value);
		partial void OnCountryGroupIDChanged();
		partial void OnCNCategoryIDChanging(System.Nullable<int> value);
		partial void OnCNCategoryIDChanged();
		partial void OnCNIDChanging(System.Nullable<int> value);
		partial void OnCNIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnTypeChanging(char value);
		partial void OnTypeChanged();
		partial void OnAmountChanging(System.Nullable<decimal> value);
		partial void OnAmountChanged();
		partial void OnDealerIDChanging(string value);
		partial void OnDealerIDChanged();
		partial void OnDealerCountryIDChanging(System.Nullable<int> value);
		partial void OnDealerCountryIDChanged();
		partial void OnDealerAddressChanging(string value);
		partial void OnDealerAddressChanged();
		partial void OnDealerNameChanging(string value);
		partial void OnDealerNameChanged();
		partial void OnContractorGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnContractorGUIDChanged();
		#endregion

		public ForeignAuthorization()
		{
			this._CN = default(EntityRef<C_CN>);
			this._CNCategory = default(EntityRef<C_CNCategory>);
			this._Contractor = default(EntityRef<Contractor>);
			this._CountryGroup = default(EntityRef<C_CountryGroup>);
			this._DealerCountry = default(EntityRef<C_Country>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_ForeignAuthorizationID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int ForeignAuthorizationID
		{
			get
			{
				return this._ForeignAuthorizationID;
			}
			set
			{
				if ((this._ForeignAuthorizationID != value))
				{
					this.OnForeignAuthorizationIDChanging(value);
					this.SendPropertyChanging();
					this._ForeignAuthorizationID = value;
					this.SendPropertyChanged("ForeignAuthorizationID");
					this.OnForeignAuthorizationIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Status", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}

		[Column(Storage = "_CreateDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}

		[Column(Storage = "_QuotaYear", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> QuotaYear
		{
			get
			{
				return this._QuotaYear;
			}
			set
			{
				if ((this._QuotaYear != value))
				{
					this.OnQuotaYearChanging(value);
					this.SendPropertyChanging();
					this._QuotaYear = value;
					this.SendPropertyChanged("QuotaYear");
					this.OnQuotaYearChanged();
				}
			}
		}

		[Column(Storage = "_CountryGroupID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CountryGroupID
		{
			get
			{
				return this._CountryGroupID;
			}
			set
			{
				if ((this._CountryGroupID != value))
				{
					if (this._CountryGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryGroupIDChanging(value);
					this.SendPropertyChanging();
					this._CountryGroupID = value;
					this.SendPropertyChanged("CountryGroupID");
					this.OnCountryGroupIDChanged();
				}
			}
		}

		[Column(Storage = "_CNCategoryID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					if (this._CNCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}

		[Column(Storage = "_CNID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CNID
		{
			get
			{
				return this._CNID;
			}
			set
			{
				if ((this._CNID != value))
				{
					if (this._CN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNIDChanging(value);
					this.SendPropertyChanging();
					this._CNID = value;
					this.SendPropertyChanged("CNID");
					this.OnCNIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Type", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}

		[Column(Storage = "_Amount", DbType = "Decimal(17,7)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}

		[Column(Storage = "_DealerID", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DealerID
		{
			get
			{
				return this._DealerID;
			}
			set
			{
				if ((this._DealerID != value))
				{
					this.OnDealerIDChanging(value);
					this.SendPropertyChanging();
					this._DealerID = value;
					this.SendPropertyChanged("DealerID");
					this.OnDealerIDChanged();
				}
			}
		}

		[Column(Storage = "_DealerCountryID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> DealerCountryID
		{
			get
			{
				return this._DealerCountryID;
			}
			set
			{
				if ((this._DealerCountryID != value))
				{
					if (this._DealerCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDealerCountryIDChanging(value);
					this.SendPropertyChanging();
					this._DealerCountryID = value;
					this.SendPropertyChanged("DealerCountryID");
					this.OnDealerCountryIDChanged();
				}
			}
		}

		[Column(Storage = "_DealerAddress", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DealerAddress
		{
			get
			{
				return this._DealerAddress;
			}
			set
			{
				if ((this._DealerAddress != value))
				{
					this.OnDealerAddressChanging(value);
					this.SendPropertyChanging();
					this._DealerAddress = value;
					this.SendPropertyChanged("DealerAddress");
					this.OnDealerAddressChanged();
				}
			}
		}

		[Column(Storage = "_DealerName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DealerName
		{
			get
			{
				return this._DealerName;
			}
			set
			{
				if ((this._DealerName != value))
				{
					this.OnDealerNameChanging(value);
					this.SendPropertyChanging();
					this._DealerName = value;
					this.SendPropertyChanged("DealerName");
					this.OnDealerNameChanged();
				}
			}
		}

		[Column(Storage = "_ContractorGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorGUID = value;
					this.SendPropertyChanged("ContractorGUID");
					this.OnContractorGUIDChanged();
				}
			}
		}

		[Association(Name = "FK_ForeignAuthorization_CN", Storage = "_CN", ThisKey = "CNID", OtherKey = "CNID", IsForeignKey = true)]
		public C_CN CN
		{
			get
			{
				return this._CN.Entity;
			}
			set
			{
				C_CN previousValue = this._CN.Entity;
				if (((previousValue != value)
							|| (this._CN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CN.Entity = null;
						previousValue.ForeignAuthorization.Remove(this);
					}
					this._CN.Entity = value;
					if ((value != null))
					{
						value.ForeignAuthorization.Add(this);
						this._CNID = value.CNID;
					}
					else
					{
						this._CNID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CN");
				}
			}
		}

		[Association(Name = "FK_ForeignAuthorization_CNCategory", Storage = "_CNCategory", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", IsForeignKey = true)]
		public C_CNCategory CNCategory
		{
			get
			{
				return this._CNCategory.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._CNCategory.Entity;
				if (((previousValue != value)
							|| (this._CNCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategory.Entity = null;
						previousValue.ForeignAuthorization.Remove(this);
					}
					this._CNCategory.Entity = value;
					if ((value != null))
					{
						value.ForeignAuthorization.Add(this);
						this._CNCategoryID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CNCategory");
				}
			}
		}

		[Association(Name = "FK_ForeignAuthorization_Contractor", Storage = "_Contractor", ThisKey = "ContractorGUID", OtherKey = "ContractorGUID", IsForeignKey = true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value)
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.ForeignAuthorization.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.ForeignAuthorization.Add(this);
						this._ContractorGUID = value.ContractorGUID;
					}
					else
					{
						this._ContractorGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}

		[Association(Name = "FK_ForeignAuthorization_CountryGroup", Storage = "_CountryGroup", ThisKey = "CountryGroupID", OtherKey = "CountryGroupID", IsForeignKey = true)]
		public C_CountryGroup CountryGroup
		{
			get
			{
				return this._CountryGroup.Entity;
			}
			set
			{
				C_CountryGroup previousValue = this._CountryGroup.Entity;
				if (((previousValue != value)
							|| (this._CountryGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryGroup.Entity = null;
						previousValue.ForeignAuthorization.Remove(this);
					}
					this._CountryGroup.Entity = value;
					if ((value != null))
					{
						value.ForeignAuthorization.Add(this);
						this._CountryGroupID = value.CountryGroupID;
					}
					else
					{
						this._CountryGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CountryGroup");
				}
			}
		}

		[Association(Name = "FK_ForeignAuthorization_DealerCountry", Storage = "_DealerCountry", ThisKey = "DealerCountryID", OtherKey = "CountryID", IsForeignKey = true)]
		public C_Country DealerCountry
		{
			get
			{
				return this._DealerCountry.Entity;
			}
			set
			{
				C_Country previousValue = this._DealerCountry.Entity;
				if (((previousValue != value)
							|| (this._DealerCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DealerCountry.Entity = null;
						previousValue.ForeignAuthorization.Remove(this);
					}
					this._DealerCountry.Entity = value;
					if ((value != null))
					{
						value.ForeignAuthorization.Add(this);
						this._DealerCountryID = value.CountryID;
					}
					else
					{
						this._DealerCountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DealerCountry");
				}
			}
		}

		[Association(Name = "FK_ForeignAuthorization_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.ForeignAuthorization.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.ForeignAuthorization.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.FullCN")]
	public partial class FullCN : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Nullable<int> _ParentCNID;

		private int _ChildCNID;

		private int _ArcLen;

		private EntityRef<C_CN> _ChildCN;

		private EntityRef<C_CN> _ParentCN;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnParentCNIDChanging(System.Nullable<int> value);
		partial void OnParentCNIDChanged();
		partial void OnChildCNIDChanging(int value);
		partial void OnChildCNIDChanged();
		partial void OnArcLenChanging(int value);
		partial void OnArcLenChanged();
		#endregion

		public FullCN()
		{
			this._ChildCN = default(EntityRef<C_CN>);
			this._ParentCN = default(EntityRef<C_CN>);
			OnCreated();
		}

		[Column(Storage = "_ParentCNID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ParentCNID
		{
			get
			{
				return this._ParentCNID;
			}
			set
			{
				if ((this._ParentCNID != value))
				{
					if (this._ParentCN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentCNIDChanging(value);
					this.SendPropertyChanging();
					this._ParentCNID = value;
					this.SendPropertyChanged("ParentCNID");
					this.OnParentCNIDChanged();
				}
			}
		}

		[Column(Storage = "_ChildCNID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int ChildCNID
		{
			get
			{
				return this._ChildCNID;
			}
			set
			{
				if ((this._ChildCNID != value))
				{
					if (this._ChildCN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildCNIDChanging(value);
					this.SendPropertyChanging();
					this._ChildCNID = value;
					this.SendPropertyChanged("ChildCNID");
					this.OnChildCNIDChanged();
				}
			}
		}

		[Column(Storage = "_ArcLen", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int ArcLen
		{
			get
			{
				return this._ArcLen;
			}
			set
			{
				if ((this._ArcLen != value))
				{
					this.OnArcLenChanging(value);
					this.SendPropertyChanging();
					this._ArcLen = value;
					this.SendPropertyChanged("ArcLen");
					this.OnArcLenChanged();
				}
			}
		}

		[Association(Name = "FK_FullCN_ChildCN", Storage = "_ChildCN", ThisKey = "ChildCNID", OtherKey = "CNID", IsForeignKey = true, DeleteOnNull = true)]
		public C_CN ChildCN
		{
			get
			{
				return this._ChildCN.Entity;
			}
			set
			{
				C_CN previousValue = this._ChildCN.Entity;
				if (((previousValue != value)
							|| (this._ChildCN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildCN.Entity = null;
						previousValue.FullCN.Remove(this);
					}
					this._ChildCN.Entity = value;
					if ((value != null))
					{
						value.FullCN.Add(this);
						this._ChildCNID = value.CNID;
					}
					else
					{
						this._ChildCNID = default(int);
					}
					this.SendPropertyChanged("ChildCN");
				}
			}
		}

		[Association(Name = "FK_FullCN_ParentCN", Storage = "_ParentCN", ThisKey = "ParentCNID", OtherKey = "CNID", IsForeignKey = true)]
		public C_CN ParentCN
		{
			get
			{
				return this._ParentCN.Entity;
			}
			set
			{
				C_CN previousValue = this._ParentCN.Entity;
				if (((previousValue != value)
							|| (this._ParentCN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentCN.Entity = null;
						previousValue.FullCN_ParentCN.Remove(this);
					}
					this._ParentCN.Entity = value;
					if ((value != null))
					{
						value.FullCN_ParentCN.Add(this);
						this._ParentCNID = value.CNID;
					}
					else
					{
						this._ParentCNID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ParentCN");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.FullRepresentation")]
	public partial class FullRepresentation : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ChildRepresentationID;

		private int _ArcLen;

		private System.Nullable<int> _ParentRepresentationID;

		private EntityRef<Representation> _R_1039;

		private EntityRef<Representation> _R_1040;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnChildRepresentationIDChanging(int value);
		partial void OnChildRepresentationIDChanged();
		partial void OnArcLenChanging(int value);
		partial void OnArcLenChanged();
		partial void OnParentRepresentationIDChanging(System.Nullable<int> value);
		partial void OnParentRepresentationIDChanged();
		#endregion

		public FullRepresentation()
		{
			this._R_1039 = default(EntityRef<Representation>);
			this._R_1040 = default(EntityRef<Representation>);
			OnCreated();
		}

		[Column(Storage = "_ChildRepresentationID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int ChildRepresentationID
		{
			get
			{
				return this._ChildRepresentationID;
			}
			set
			{
				if ((this._ChildRepresentationID != value))
				{
					if (this._R_1040.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._ChildRepresentationID = value;
					this.SendPropertyChanged("ChildRepresentationID");
					this.OnChildRepresentationIDChanged();
				}
			}
		}

		[Column(Storage = "_ArcLen", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int ArcLen
		{
			get
			{
				return this._ArcLen;
			}
			set
			{
				if ((this._ArcLen != value))
				{
					this.OnArcLenChanging(value);
					this.SendPropertyChanging();
					this._ArcLen = value;
					this.SendPropertyChanged("ArcLen");
					this.OnArcLenChanged();
				}
			}
		}

		[Column(Storage = "_ParentRepresentationID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ParentRepresentationID
		{
			get
			{
				return this._ParentRepresentationID;
			}
			set
			{
				if ((this._ParentRepresentationID != value))
				{
					if (this._R_1039.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._ParentRepresentationID = value;
					this.SendPropertyChanged("ParentRepresentationID");
					this.OnParentRepresentationIDChanged();
				}
			}
		}

		[Association(Storage = "_R_1039", ThisKey = "ParentRepresentationID", OtherKey = "RepresentationID", IsForeignKey = true)]
		public Representation R_1039
		{
			get
			{
				return this._R_1039.Entity;
			}
			set
			{
				Representation previousValue = this._R_1039.Entity;
				if (((previousValue != value)
							|| (this._R_1039.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._R_1039.Entity = null;
						previousValue.FullRepresentation.Remove(this);
					}
					this._R_1039.Entity = value;
					if ((value != null))
					{
						value.FullRepresentation.Add(this);
						this._ParentRepresentationID = value.RepresentationID;
					}
					else
					{
						this._ParentRepresentationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("R_1039");
				}
			}
		}

		[Association(Storage = "_R_1040", ThisKey = "ChildRepresentationID", OtherKey = "RepresentationID", IsForeignKey = true, DeleteOnNull = true)]
		public Representation R_1040
		{
			get
			{
				return this._R_1040.Entity;
			}
			set
			{
				Representation previousValue = this._R_1040.Entity;
				if (((previousValue != value)
							|| (this._R_1040.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._R_1040.Entity = null;
						previousValue.R_1040.Remove(this);
					}
					this._R_1040.Entity = value;
					if ((value != null))
					{
						value.R_1040.Add(this);
						this._ChildRepresentationID = value.RepresentationID;
					}
					else
					{
						this._ChildRepresentationID = default(int);
					}
					this.SendPropertyChanged("R_1040");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.HST_Contractor")]
	public partial class HST_Contractor : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _ContractorVersionGUID;

		private System.Guid _ContractorGUID;

		private int _VersionNumber;

		private bool _IsCurrentVersion;

		private string _INN;

		private string _OKPO;

		private char _ContractorType;

		private string _Title;

		private string _ShortName;

		private string _JuridicalAddress;

		private string _PostAddress;

		private string _Phone;

		private string _Fax;

		private string _Email;

		private string _PassportNumber;

		private string _PassportSerial;

		private string _PassportIssuedBy;

		private System.Nullable<System.DateTime> _PassportIssuedDate;

		private System.Nullable<int> _CreatorRepresentationID;

		private string _AddInfo;

		private string _EGRUL;

		private System.Nullable<System.DateTime> _CloseDate;

		private System.Nullable<System.Guid> _PrevContractorGUID;

		private int _CountryID;

		private System.DateTime _LastModifiedDate;

		private bool _IsDeleted;

		private System.Nullable<decimal> _OldID;

		private int _LastModifiedUserID;

		private bool _IsPersonal;

		private System.Nullable<int> _RFSubjectID;

		private string _BankAccount;

		private string _BankAddress;

		private string _BankBIK;

		private string _BankCorrespondentAccount;

		private string _BankTitle;

		private string _KPP;

		private EntityRef<Contractor> _Contractor;

		private EntityRef<C_Country> _Country;

		private EntityRef<Representation> _CreatorRepresentation;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<Contractor> _PrevContractor;

		private EntityRef<C_RFSubject> _RFSubject;

		private EntitySet<OrderDoc> _OrderDoc;

		private EntitySet<OrderDoc> _ContractorVersionGU;

		private EntitySet<UserInfo> _UserInfo;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnContractorVersionGUIDChanging(System.Guid value);
		partial void OnContractorVersionGUIDChanged();
		partial void OnContractorGUIDChanging(System.Guid value);
		partial void OnContractorGUIDChanged();
		partial void OnVersionNumberChanging(int value);
		partial void OnVersionNumberChanged();
		partial void OnIsCurrentVersionChanging(bool value);
		partial void OnIsCurrentVersionChanged();
		partial void OnINNChanging(string value);
		partial void OnINNChanged();
		partial void OnOKPOChanging(string value);
		partial void OnOKPOChanged();
		partial void OnContractorTypeChanging(char value);
		partial void OnContractorTypeChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnShortNameChanging(string value);
		partial void OnShortNameChanged();
		partial void OnJuridicalAddressChanging(string value);
		partial void OnJuridicalAddressChanged();
		partial void OnPostAddressChanging(string value);
		partial void OnPostAddressChanged();
		partial void OnPhoneChanging(string value);
		partial void OnPhoneChanged();
		partial void OnFaxChanging(string value);
		partial void OnFaxChanged();
		partial void OnEmailChanging(string value);
		partial void OnEmailChanged();
		partial void OnPassportNumberChanging(string value);
		partial void OnPassportNumberChanged();
		partial void OnPassportSerialChanging(string value);
		partial void OnPassportSerialChanged();
		partial void OnPassportIssuedByChanging(string value);
		partial void OnPassportIssuedByChanged();
		partial void OnPassportIssuedDateChanging(System.Nullable<System.DateTime> value);
		partial void OnPassportIssuedDateChanged();
		partial void OnCreatorRepresentationIDChanging(System.Nullable<int> value);
		partial void OnCreatorRepresentationIDChanged();
		partial void OnAddInfoChanging(string value);
		partial void OnAddInfoChanged();
		partial void OnEGRULChanging(string value);
		partial void OnEGRULChanged();
		partial void OnCloseDateChanging(System.Nullable<System.DateTime> value);
		partial void OnCloseDateChanged();
		partial void OnPrevContractorGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnPrevContractorGUIDChanged();
		partial void OnCountryIDChanging(int value);
		partial void OnCountryIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnOldIDChanging(System.Nullable<decimal> value);
		partial void OnOldIDChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnIsPersonalChanging(bool value);
		partial void OnIsPersonalChanged();
		partial void OnRFSubjectIDChanging(System.Nullable<int> value);
		partial void OnRFSubjectIDChanged();
		partial void OnBankAccountChanging(string value);
		partial void OnBankAccountChanged();
		partial void OnBankAddressChanging(string value);
		partial void OnBankAddressChanged();
		partial void OnBankBIKChanging(string value);
		partial void OnBankBIKChanged();
		partial void OnBankCorrespondentAccountChanging(string value);
		partial void OnBankCorrespondentAccountChanged();
		partial void OnBankTitleChanging(string value);
		partial void OnBankTitleChanged();
		partial void OnKPPChanging(string value);
		partial void OnKPPChanged();
		#endregion

		public HST_Contractor()
		{
			this._Contractor = default(EntityRef<Contractor>);
			this._Country = default(EntityRef<C_Country>);
			this._CreatorRepresentation = default(EntityRef<Representation>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._PrevContractor = default(EntityRef<Contractor>);
			this._RFSubject = default(EntityRef<C_RFSubject>);
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._ContractorVersionGU = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_ContractorVersionGU), new Action<OrderDoc>(this.detach_ContractorVersionGU));
			this._UserInfo = new EntitySet<UserInfo>(new Action<UserInfo>(this.attach_UserInfo), new Action<UserInfo>(this.detach_UserInfo));
			OnCreated();
		}

		[Column(Storage = "_ContractorVersionGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid ContractorVersionGUID
		{
			get
			{
				return this._ContractorVersionGUID;
			}
			set
			{
				if ((this._ContractorVersionGUID != value))
				{
					this.OnContractorVersionGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorVersionGUID = value;
					this.SendPropertyChanged("ContractorVersionGUID");
					this.OnContractorVersionGUIDChanged();
				}
			}
		}

		[Column(Storage = "_ContractorGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorGUID = value;
					this.SendPropertyChanged("ContractorGUID");
					this.OnContractorGUIDChanged();
				}
			}
		}

		[Column(Storage = "_VersionNumber", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int VersionNumber
		{
			get
			{
				return this._VersionNumber;
			}
			set
			{
				if ((this._VersionNumber != value))
				{
					this.OnVersionNumberChanging(value);
					this.SendPropertyChanging();
					this._VersionNumber = value;
					this.SendPropertyChanged("VersionNumber");
					this.OnVersionNumberChanged();
				}
			}
		}

		[Column(Storage = "_IsCurrentVersion", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsCurrentVersion
		{
			get
			{
				return this._IsCurrentVersion;
			}
			set
			{
				if ((this._IsCurrentVersion != value))
				{
					this.OnIsCurrentVersionChanging(value);
					this.SendPropertyChanging();
					this._IsCurrentVersion = value;
					this.SendPropertyChanged("IsCurrentVersion");
					this.OnIsCurrentVersionChanged();
				}
			}
		}

		[Column(Storage = "_INN", DbType = "NVarChar(12) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string INN
		{
			get
			{
				return this._INN;
			}
			set
			{
				if ((this._INN != value))
				{
					this.OnINNChanging(value);
					this.SendPropertyChanging();
					this._INN = value;
					this.SendPropertyChanged("INN");
					this.OnINNChanged();
				}
			}
		}

		[Column(Storage = "_OKPO", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string OKPO
		{
			get
			{
				return this._OKPO;
			}
			set
			{
				if ((this._OKPO != value))
				{
					this.OnOKPOChanging(value);
					this.SendPropertyChanging();
					this._OKPO = value;
					this.SendPropertyChanged("OKPO");
					this.OnOKPOChanged();
				}
			}
		}

		[Column(Storage = "_ContractorType", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char ContractorType
		{
			get
			{
				return this._ContractorType;
			}
			set
			{
				if ((this._ContractorType != value))
				{
					this.OnContractorTypeChanging(value);
					this.SendPropertyChanging();
					this._ContractorType = value;
					this.SendPropertyChanged("ContractorType");
					this.OnContractorTypeChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_ShortName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}

		[Column(Storage = "_JuridicalAddress", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string JuridicalAddress
		{
			get
			{
				return this._JuridicalAddress;
			}
			set
			{
				if ((this._JuridicalAddress != value))
				{
					this.OnJuridicalAddressChanging(value);
					this.SendPropertyChanging();
					this._JuridicalAddress = value;
					this.SendPropertyChanged("JuridicalAddress");
					this.OnJuridicalAddressChanged();
				}
			}
		}

		[Column(Storage = "_PostAddress", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string PostAddress
		{
			get
			{
				return this._PostAddress;
			}
			set
			{
				if ((this._PostAddress != value))
				{
					this.OnPostAddressChanging(value);
					this.SendPropertyChanging();
					this._PostAddress = value;
					this.SendPropertyChanged("PostAddress");
					this.OnPostAddressChanged();
				}
			}
		}

		[Column(Storage = "_Phone", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}

		[Column(Storage = "_Fax", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}

		[Column(Storage = "_Email", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}

		[Column(Storage = "_PassportNumber", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string PassportNumber
		{
			get
			{
				return this._PassportNumber;
			}
			set
			{
				if ((this._PassportNumber != value))
				{
					this.OnPassportNumberChanging(value);
					this.SendPropertyChanging();
					this._PassportNumber = value;
					this.SendPropertyChanged("PassportNumber");
					this.OnPassportNumberChanged();
				}
			}
		}

		[Column(Storage = "_PassportSerial", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string PassportSerial
		{
			get
			{
				return this._PassportSerial;
			}
			set
			{
				if ((this._PassportSerial != value))
				{
					this.OnPassportSerialChanging(value);
					this.SendPropertyChanging();
					this._PassportSerial = value;
					this.SendPropertyChanged("PassportSerial");
					this.OnPassportSerialChanged();
				}
			}
		}

		[Column(Storage = "_PassportIssuedBy", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string PassportIssuedBy
		{
			get
			{
				return this._PassportIssuedBy;
			}
			set
			{
				if ((this._PassportIssuedBy != value))
				{
					this.OnPassportIssuedByChanging(value);
					this.SendPropertyChanging();
					this._PassportIssuedBy = value;
					this.SendPropertyChanged("PassportIssuedBy");
					this.OnPassportIssuedByChanged();
				}
			}
		}

		[Column(Storage = "_PassportIssuedDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PassportIssuedDate
		{
			get
			{
				return this._PassportIssuedDate;
			}
			set
			{
				if ((this._PassportIssuedDate != value))
				{
					this.OnPassportIssuedDateChanging(value);
					this.SendPropertyChanging();
					this._PassportIssuedDate = value;
					this.SendPropertyChanged("PassportIssuedDate");
					this.OnPassportIssuedDateChanged();
				}
			}
		}

		[Column(Storage = "_CreatorRepresentationID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CreatorRepresentationID
		{
			get
			{
				return this._CreatorRepresentationID;
			}
			set
			{
				if ((this._CreatorRepresentationID != value))
				{
					if (this._CreatorRepresentation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorRepresentationID = value;
					this.SendPropertyChanged("CreatorRepresentationID");
					this.OnCreatorRepresentationIDChanged();
				}
			}
		}

		[Column(Storage = "_AddInfo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string AddInfo
		{
			get
			{
				return this._AddInfo;
			}
			set
			{
				if ((this._AddInfo != value))
				{
					this.OnAddInfoChanging(value);
					this.SendPropertyChanging();
					this._AddInfo = value;
					this.SendPropertyChanged("AddInfo");
					this.OnAddInfoChanged();
				}
			}
		}

		[Column(Storage = "_EGRUL", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string EGRUL
		{
			get
			{
				return this._EGRUL;
			}
			set
			{
				if ((this._EGRUL != value))
				{
					this.OnEGRULChanging(value);
					this.SendPropertyChanging();
					this._EGRUL = value;
					this.SendPropertyChanged("EGRUL");
					this.OnEGRULChanged();
				}
			}
		}

		[Column(Storage = "_CloseDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CloseDate
		{
			get
			{
				return this._CloseDate;
			}
			set
			{
				if ((this._CloseDate != value))
				{
					this.OnCloseDateChanging(value);
					this.SendPropertyChanging();
					this._CloseDate = value;
					this.SendPropertyChanged("CloseDate");
					this.OnCloseDateChanged();
				}
			}
		}

		[Column(Storage = "_PrevContractorGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> PrevContractorGUID
		{
			get
			{
				return this._PrevContractorGUID;
			}
			set
			{
				if ((this._PrevContractorGUID != value))
				{
					if (this._PrevContractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrevContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._PrevContractorGUID = value;
					this.SendPropertyChanged("PrevContractorGUID");
					this.OnPrevContractorGUIDChanged();
				}
			}
		}

		[Column(Storage = "_CountryID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_OldID", DbType = "Decimal(14,0)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_IsPersonal", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsPersonal
		{
			get
			{
				return this._IsPersonal;
			}
			set
			{
				if ((this._IsPersonal != value))
				{
					this.OnIsPersonalChanging(value);
					this.SendPropertyChanging();
					this._IsPersonal = value;
					this.SendPropertyChanged("IsPersonal");
					this.OnIsPersonalChanged();
				}
			}
		}

		[Column(Storage = "_RFSubjectID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> RFSubjectID
		{
			get
			{
				return this._RFSubjectID;
			}
			set
			{
				if ((this._RFSubjectID != value))
				{
					if (this._RFSubject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRFSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._RFSubjectID = value;
					this.SendPropertyChanged("RFSubjectID");
					this.OnRFSubjectIDChanged();
				}
			}
		}

		[Column(Storage = "_BankAccount", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BankAccount
		{
			get
			{
				return this._BankAccount;
			}
			set
			{
				if ((this._BankAccount != value))
				{
					this.OnBankAccountChanging(value);
					this.SendPropertyChanging();
					this._BankAccount = value;
					this.SendPropertyChanged("BankAccount");
					this.OnBankAccountChanged();
				}
			}
		}

		[Column(Storage = "_BankAddress", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BankAddress
		{
			get
			{
				return this._BankAddress;
			}
			set
			{
				if ((this._BankAddress != value))
				{
					this.OnBankAddressChanging(value);
					this.SendPropertyChanging();
					this._BankAddress = value;
					this.SendPropertyChanged("BankAddress");
					this.OnBankAddressChanged();
				}
			}
		}

		[Column(Storage = "_BankBIK", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BankBIK
		{
			get
			{
				return this._BankBIK;
			}
			set
			{
				if ((this._BankBIK != value))
				{
					this.OnBankBIKChanging(value);
					this.SendPropertyChanging();
					this._BankBIK = value;
					this.SendPropertyChanged("BankBIK");
					this.OnBankBIKChanged();
				}
			}
		}

		[Column(Storage = "_BankCorrespondentAccount", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BankCorrespondentAccount
		{
			get
			{
				return this._BankCorrespondentAccount;
			}
			set
			{
				if ((this._BankCorrespondentAccount != value))
				{
					this.OnBankCorrespondentAccountChanging(value);
					this.SendPropertyChanging();
					this._BankCorrespondentAccount = value;
					this.SendPropertyChanged("BankCorrespondentAccount");
					this.OnBankCorrespondentAccountChanged();
				}
			}
		}

		[Column(Storage = "_BankTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BankTitle
		{
			get
			{
				return this._BankTitle;
			}
			set
			{
				if ((this._BankTitle != value))
				{
					this.OnBankTitleChanging(value);
					this.SendPropertyChanging();
					this._BankTitle = value;
					this.SendPropertyChanged("BankTitle");
					this.OnBankTitleChanged();
				}
			}
		}

		[Column(Storage = "_KPP", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string KPP
		{
			get
			{
				return this._KPP;
			}
			set
			{
				if ((this._KPP != value))
				{
					this.OnKPPChanging(value);
					this.SendPropertyChanging();
					this._KPP = value;
					this.SendPropertyChanged("KPP");
					this.OnKPPChanged();
				}
			}
		}

		[Association(Name = "FK_HST_Contractor_Contractor", Storage = "_Contractor", ThisKey = "ContractorGUID", OtherKey = "ContractorGUID", IsForeignKey = true, DeleteOnNull = true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value)
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.HST_Contractor.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.HST_Contractor.Add(this);
						this._ContractorGUID = value.ContractorGUID;
					}
					else
					{
						this._ContractorGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}

		[Association(Name = "FK_HST_Contractor_Country", Storage = "_Country", ThisKey = "CountryID", OtherKey = "CountryID", IsForeignKey = true)]
		public C_Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				C_Country previousValue = this._Country.Entity;
				if (((previousValue != value)
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.HST_Contractor.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.HST_Contractor.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}

		[Association(Name = "FK_HST_Contractor_CreatorRepresentation", Storage = "_CreatorRepresentation", ThisKey = "CreatorRepresentationID", OtherKey = "RepresentationID", IsForeignKey = true)]
		public Representation CreatorRepresentation
		{
			get
			{
				return this._CreatorRepresentation.Entity;
			}
			set
			{
				Representation previousValue = this._CreatorRepresentation.Entity;
				if (((previousValue != value)
							|| (this._CreatorRepresentation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatorRepresentation.Entity = null;
						previousValue.HST_Contractor.Remove(this);
					}
					this._CreatorRepresentation.Entity = value;
					if ((value != null))
					{
						value.HST_Contractor.Add(this);
						this._CreatorRepresentationID = value.RepresentationID;
					}
					else
					{
						this._CreatorRepresentationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CreatorRepresentation");
				}
			}
		}

		[Association(Name = "FK_HST_Contractor_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.HST_Contractor.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.HST_Contractor.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_HST_Contractor_PrevContractor", Storage = "_PrevContractor", ThisKey = "PrevContractorGUID", OtherKey = "ContractorGUID", IsForeignKey = true)]
		public Contractor PrevContractor
		{
			get
			{
				return this._PrevContractor.Entity;
			}
			set
			{
				Contractor previousValue = this._PrevContractor.Entity;
				if (((previousValue != value)
							|| (this._PrevContractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PrevContractor.Entity = null;
						previousValue.HST_Contractor_PrevContractor.Remove(this);
					}
					this._PrevContractor.Entity = value;
					if ((value != null))
					{
						value.HST_Contractor_PrevContractor.Add(this);
						this._PrevContractorGUID = value.ContractorGUID;
					}
					else
					{
						this._PrevContractorGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PrevContractor");
				}
			}
		}

		[Association(Name = "FK_HST_Contractor_RFSubject", Storage = "_RFSubject", ThisKey = "RFSubjectID", OtherKey = "RFSubjectID", IsForeignKey = true)]
		public C_RFSubject RFSubject
		{
			get
			{
				return this._RFSubject.Entity;
			}
			set
			{
				C_RFSubject previousValue = this._RFSubject.Entity;
				if (((previousValue != value)
							|| (this._RFSubject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RFSubject.Entity = null;
						previousValue.HST_Contractor.Remove(this);
					}
					this._RFSubject.Entity = value;
					if ((value != null))
					{
						value.HST_Contractor.Add(this);
						this._RFSubjectID = value.RFSubjectID;
					}
					else
					{
						this._RFSubjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RFSubject");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_Applicant", Storage = "_OrderDoc", ThisKey = "ContractorVersionGUID", OtherKey = "ApplicantGUID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_QuoteOwner", Storage = "_ContractorVersionGU", ThisKey = "ContractorVersionGUID", OtherKey = "QuoteOwnerGUID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> ContractorVersionGU
		{
			get
			{
				return this._ContractorVersionGU;
			}
			set
			{
				this._ContractorVersionGU.Assign(value);
			}
		}

		[Association(Name = "FK_UserInfo_Contractor", Storage = "_UserInfo", ThisKey = "ContractorVersionGUID", OtherKey = "ContractorGUID", DeleteRule = "NO ACTION")]
		public EntitySet<UserInfo> UserInfo
		{
			get
			{
				return this._UserInfo;
			}
			set
			{
				this._UserInfo.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = this;
		}

		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = null;
		}

		private void attach_ContractorVersionGU(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.QuoteOwner = this;
		}

		private void detach_ContractorVersionGU(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.QuoteOwner = null;
		}

		private void attach_UserInfo(UserInfo entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}

		private void detach_UserInfo(UserInfo entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
	}

	[Table(Name = "dbo.HST_MM_FormView")]
	public partial class HST_MM_FormView : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FormViewVersionID;

		private int _FormViewID;

		private int _VersionNumber;

		private bool _IsCurrentVersion;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private string _SysName;

		private string _ViewTemplate;

		private char _TemplateTypeCode;

		private System.Nullable<int> _ObjectTypeID;

		private System.Nullable<int> _PackageID;

		private System.Guid _Guid;

		private bool _IsCustom;

		private bool _IsCaching;

		private string _CacheKeyParams;

		private int _CacheTimeout;

		private string _BaseClass;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<MM_FormView> _MM_FormView;

		private EntityRef<MM_ObjectType> _ObjectType;

		private EntityRef<MM_Package> _Package;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFormViewVersionIDChanging(int value);
		partial void OnFormViewVersionIDChanged();
		partial void OnFormViewIDChanging(int value);
		partial void OnFormViewIDChanged();
		partial void OnVersionNumberChanging(int value);
		partial void OnVersionNumberChanged();
		partial void OnIsCurrentVersionChanging(bool value);
		partial void OnIsCurrentVersionChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnViewTemplateChanging(string value);
		partial void OnViewTemplateChanged();
		partial void OnTemplateTypeCodeChanging(char value);
		partial void OnTemplateTypeCodeChanged();
		partial void OnObjectTypeIDChanging(System.Nullable<int> value);
		partial void OnObjectTypeIDChanged();
		partial void OnPackageIDChanging(System.Nullable<int> value);
		partial void OnPackageIDChanged();
		partial void OnGuidChanging(System.Guid value);
		partial void OnGuidChanged();
		partial void OnIsCustomChanging(bool value);
		partial void OnIsCustomChanged();
		partial void OnIsCachingChanging(bool value);
		partial void OnIsCachingChanged();
		partial void OnCacheKeyParamsChanging(string value);
		partial void OnCacheKeyParamsChanged();
		partial void OnCacheTimeoutChanging(int value);
		partial void OnCacheTimeoutChanged();
		partial void OnBaseClassChanging(string value);
		partial void OnBaseClassChanged();
		#endregion

		public HST_MM_FormView()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MM_FormView = default(EntityRef<MM_FormView>);
			this._ObjectType = default(EntityRef<MM_ObjectType>);
			this._Package = default(EntityRef<MM_Package>);
			OnCreated();
		}

		[Column(Storage = "_FormViewVersionID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int FormViewVersionID
		{
			get
			{
				return this._FormViewVersionID;
			}
			set
			{
				if ((this._FormViewVersionID != value))
				{
					this.OnFormViewVersionIDChanging(value);
					this.SendPropertyChanging();
					this._FormViewVersionID = value;
					this.SendPropertyChanged("FormViewVersionID");
					this.OnFormViewVersionIDChanged();
				}
			}
		}

		[Column(Storage = "_FormViewID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int FormViewID
		{
			get
			{
				return this._FormViewID;
			}
			set
			{
				if ((this._FormViewID != value))
				{
					if (this._MM_FormView.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormViewIDChanging(value);
					this.SendPropertyChanging();
					this._FormViewID = value;
					this.SendPropertyChanged("FormViewID");
					this.OnFormViewIDChanged();
				}
			}
		}

		[Column(Storage = "_VersionNumber", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int VersionNumber
		{
			get
			{
				return this._VersionNumber;
			}
			set
			{
				if ((this._VersionNumber != value))
				{
					this.OnVersionNumberChanging(value);
					this.SendPropertyChanging();
					this._VersionNumber = value;
					this.SendPropertyChanged("VersionNumber");
					this.OnVersionNumberChanged();
				}
			}
		}

		[Column(Storage = "_IsCurrentVersion", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsCurrentVersion
		{
			get
			{
				return this._IsCurrentVersion;
			}
			set
			{
				if ((this._IsCurrentVersion != value))
				{
					this.OnIsCurrentVersionChanging(value);
					this.SendPropertyChanging();
					this._IsCurrentVersion = value;
					this.SendPropertyChanged("IsCurrentVersion");
					this.OnIsCurrentVersionChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_ViewTemplate", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ViewTemplate
		{
			get
			{
				return this._ViewTemplate;
			}
			set
			{
				if ((this._ViewTemplate != value))
				{
					this.OnViewTemplateChanging(value);
					this.SendPropertyChanging();
					this._ViewTemplate = value;
					this.SendPropertyChanged("ViewTemplate");
					this.OnViewTemplateChanged();
				}
			}
		}

		[Column(Storage = "_TemplateTypeCode", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char TemplateTypeCode
		{
			get
			{
				return this._TemplateTypeCode;
			}
			set
			{
				if ((this._TemplateTypeCode != value))
				{
					this.OnTemplateTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._TemplateTypeCode = value;
					this.SendPropertyChanged("TemplateTypeCode");
					this.OnTemplateTypeCodeChanged();
				}
			}
		}

		[Column(Storage = "_ObjectTypeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_PackageID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_IsCustom", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsCustom
		{
			get
			{
				return this._IsCustom;
			}
			set
			{
				if ((this._IsCustom != value))
				{
					this.OnIsCustomChanging(value);
					this.SendPropertyChanging();
					this._IsCustom = value;
					this.SendPropertyChanged("IsCustom");
					this.OnIsCustomChanged();
				}
			}
		}

		[Column(Storage = "_IsCaching", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsCaching
		{
			get
			{
				return this._IsCaching;
			}
			set
			{
				if ((this._IsCaching != value))
				{
					this.OnIsCachingChanging(value);
					this.SendPropertyChanging();
					this._IsCaching = value;
					this.SendPropertyChanged("IsCaching");
					this.OnIsCachingChanged();
				}
			}
		}

		[Column(Storage = "_CacheKeyParams", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string CacheKeyParams
		{
			get
			{
				return this._CacheKeyParams;
			}
			set
			{
				if ((this._CacheKeyParams != value))
				{
					this.OnCacheKeyParamsChanging(value);
					this.SendPropertyChanging();
					this._CacheKeyParams = value;
					this.SendPropertyChanged("CacheKeyParams");
					this.OnCacheKeyParamsChanged();
				}
			}
		}

		[Column(Storage = "_CacheTimeout", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CacheTimeout
		{
			get
			{
				return this._CacheTimeout;
			}
			set
			{
				if ((this._CacheTimeout != value))
				{
					this.OnCacheTimeoutChanging(value);
					this.SendPropertyChanging();
					this._CacheTimeout = value;
					this.SendPropertyChanged("CacheTimeout");
					this.OnCacheTimeoutChanged();
				}
			}
		}

		[Column(Storage = "_BaseClass", DbType = "NVarChar(100) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string BaseClass
		{
			get
			{
				return this._BaseClass;
			}
			set
			{
				if ((this._BaseClass != value))
				{
					this.OnBaseClassChanging(value);
					this.SendPropertyChanging();
					this._BaseClass = value;
					this.SendPropertyChanged("BaseClass");
					this.OnBaseClassChanged();
				}
			}
		}

		[Association(Name = "FK_HST_MM_FormView_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.HST_MM_FormView.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.HST_MM_FormView.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_HST_MM_FormView_MM_FormView", Storage = "_MM_FormView", ThisKey = "FormViewID", OtherKey = "FormViewID", IsForeignKey = true, DeleteOnNull = true)]
		public MM_FormView MM_FormView
		{
			get
			{
				return this._MM_FormView.Entity;
			}
			set
			{
				MM_FormView previousValue = this._MM_FormView.Entity;
				if (((previousValue != value)
							|| (this._MM_FormView.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_FormView.Entity = null;
						previousValue.HST_MM_FormView.Remove(this);
					}
					this._MM_FormView.Entity = value;
					if ((value != null))
					{
						value.HST_MM_FormView.Add(this);
						this._FormViewID = value.FormViewID;
					}
					else
					{
						this._FormViewID = default(int);
					}
					this.SendPropertyChanged("MM_FormView");
				}
			}
		}

		[Association(Name = "FK_HST_MM_FormView_ObjectType", Storage = "_ObjectType", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", IsForeignKey = true)]
		public MM_ObjectType ObjectType
		{
			get
			{
				return this._ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._ObjectType.Entity;
				if (((previousValue != value)
							|| (this._ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectType.Entity = null;
						previousValue.HST_MM_FormView.Remove(this);
					}
					this._ObjectType.Entity = value;
					if ((value != null))
					{
						value.HST_MM_FormView.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ObjectType");
				}
			}
		}

		[Association(Name = "FK_HST_MM_FormView_Package", Storage = "_Package", ThisKey = "PackageID", OtherKey = "PackageID", IsForeignKey = true)]
		public MM_Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				MM_Package previousValue = this._Package.Entity;
				if (((previousValue != value)
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.HST_MM_FormView.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.HST_MM_FormView.Add(this);
						this._PackageID = value.PackageID;
					}
					else
					{
						this._PackageID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.HST_N_TimeZone")]
	public partial class HST_N_TimeZone : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _TimeZoneVersionID;

		private int _TimeZoneID;

		private int _VersionNumber;

		private bool _IsCurrentVersion;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private int _GMTOffset;

		private string _Comment;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<N_TimeZone> _N_TimeZone;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnTimeZoneVersionIDChanging(int value);
		partial void OnTimeZoneVersionIDChanged();
		partial void OnTimeZoneIDChanging(int value);
		partial void OnTimeZoneIDChanged();
		partial void OnVersionNumberChanging(int value);
		partial void OnVersionNumberChanged();
		partial void OnIsCurrentVersionChanging(bool value);
		partial void OnIsCurrentVersionChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnGMTOffsetChanging(int value);
		partial void OnGMTOffsetChanged();
		partial void OnCommentChanging(string value);
		partial void OnCommentChanged();
		#endregion

		public HST_N_TimeZone()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._N_TimeZone = default(EntityRef<N_TimeZone>);
			OnCreated();
		}

		[Column(Storage = "_TimeZoneVersionID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int TimeZoneVersionID
		{
			get
			{
				return this._TimeZoneVersionID;
			}
			set
			{
				if ((this._TimeZoneVersionID != value))
				{
					this.OnTimeZoneVersionIDChanging(value);
					this.SendPropertyChanging();
					this._TimeZoneVersionID = value;
					this.SendPropertyChanged("TimeZoneVersionID");
					this.OnTimeZoneVersionIDChanged();
				}
			}
		}

		[Column(Storage = "_TimeZoneID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int TimeZoneID
		{
			get
			{
				return this._TimeZoneID;
			}
			set
			{
				if ((this._TimeZoneID != value))
				{
					if (this._N_TimeZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimeZoneIDChanging(value);
					this.SendPropertyChanging();
					this._TimeZoneID = value;
					this.SendPropertyChanged("TimeZoneID");
					this.OnTimeZoneIDChanged();
				}
			}
		}

		[Column(Storage = "_VersionNumber", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int VersionNumber
		{
			get
			{
				return this._VersionNumber;
			}
			set
			{
				if ((this._VersionNumber != value))
				{
					this.OnVersionNumberChanging(value);
					this.SendPropertyChanging();
					this._VersionNumber = value;
					this.SendPropertyChanged("VersionNumber");
					this.OnVersionNumberChanged();
				}
			}
		}

		[Column(Storage = "_IsCurrentVersion", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsCurrentVersion
		{
			get
			{
				return this._IsCurrentVersion;
			}
			set
			{
				if ((this._IsCurrentVersion != value))
				{
					this.OnIsCurrentVersionChanging(value);
					this.SendPropertyChanging();
					this._IsCurrentVersion = value;
					this.SendPropertyChanged("IsCurrentVersion");
					this.OnIsCurrentVersionChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_GMTOffset", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int GMTOffset
		{
			get
			{
				return this._GMTOffset;
			}
			set
			{
				if ((this._GMTOffset != value))
				{
					this.OnGMTOffsetChanging(value);
					this.SendPropertyChanging();
					this._GMTOffset = value;
					this.SendPropertyChanged("GMTOffset");
					this.OnGMTOffsetChanged();
				}
			}
		}

		[Column(Storage = "_Comment", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}

		[Association(Name = "FK_HST_N_TimeZone_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.HST_N_TimeZone.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.HST_N_TimeZone.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_HST_N_TimeZone_N_TimeZone", Storage = "_N_TimeZone", ThisKey = "TimeZoneID", OtherKey = "TimeZoneID", IsForeignKey = true, DeleteOnNull = true)]
		public N_TimeZone N_TimeZone
		{
			get
			{
				return this._N_TimeZone.Entity;
			}
			set
			{
				N_TimeZone previousValue = this._N_TimeZone.Entity;
				if (((previousValue != value)
							|| (this._N_TimeZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._N_TimeZone.Entity = null;
						previousValue.HST_N_TimeZone.Remove(this);
					}
					this._N_TimeZone.Entity = value;
					if ((value != null))
					{
						value.HST_N_TimeZone.Add(this);
						this._TimeZoneID = value.TimeZoneID;
					}
					else
					{
						this._TimeZoneID = default(int);
					}
					this.SendPropertyChanged("N_TimeZone");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.INT_Command")]
	public partial class INT_Command : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _CommandGUID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private string _SysName;

		private System.Guid _SystemGUID;

		private System.Nullable<System.Guid> _InputXsdFileGUID;

		private System.Nullable<System.Guid> _OutputXsdFileGUID;

		private int _RepeatPeriod;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<INT_System> _System;

		private EntitySet<INT_Handler> _INT_Handler;

		private EntitySet<INT_Log> _INT_Log;

		private EntityRef<DbFile> _InputXsdFile;

		private EntityRef<DbFile> _OutputXsdFile;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCommandGUIDChanging(System.Guid value);
		partial void OnCommandGUIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnSystemGUIDChanging(System.Guid value);
		partial void OnSystemGUIDChanged();
		partial void OnInputXsdFileGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnInputXsdFileGUIDChanged();
		partial void OnOutputXsdFileGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnOutputXsdFileGUIDChanged();
		partial void OnRepeatPeriodChanging(int value);
		partial void OnRepeatPeriodChanged();
		#endregion

		public INT_Command()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._System = default(EntityRef<INT_System>);
			this._INT_Handler = new EntitySet<INT_Handler>(new Action<INT_Handler>(this.attach_INT_Handler), new Action<INT_Handler>(this.detach_INT_Handler));
			this._INT_Log = new EntitySet<INT_Log>(new Action<INT_Log>(this.attach_INT_Log), new Action<INT_Log>(this.detach_INT_Log));
			this._InputXsdFile = default(EntityRef<DbFile>);
			this._OutputXsdFile = default(EntityRef<DbFile>);
			OnCreated();
		}

		[Column(Storage = "_CommandGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid CommandGUID
		{
			get
			{
				return this._CommandGUID;
			}
			set
			{
				if ((this._CommandGUID != value))
				{
					this.OnCommandGUIDChanging(value);
					this.SendPropertyChanging();
					this._CommandGUID = value;
					this.SendPropertyChanged("CommandGUID");
					this.OnCommandGUIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_SystemGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid SystemGUID
		{
			get
			{
				return this._SystemGUID;
			}
			set
			{
				if ((this._SystemGUID != value))
				{
					if (this._System.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemGUIDChanging(value);
					this.SendPropertyChanging();
					this._SystemGUID = value;
					this.SendPropertyChanged("SystemGUID");
					this.OnSystemGUIDChanged();
				}
			}
		}

		[Column(Storage = "_InputXsdFileGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> InputXsdFileGUID
		{
			get
			{
				return this._InputXsdFileGUID;
			}
			set
			{
				if ((this._InputXsdFileGUID != value))
				{
					if (this._InputXsdFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInputXsdFileGUIDChanging(value);
					this.SendPropertyChanging();
					this._InputXsdFileGUID = value;
					this.SendPropertyChanged("InputXsdFileGUID");
					this.OnInputXsdFileGUIDChanged();
				}
			}
		}

		[Column(Storage = "_OutputXsdFileGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> OutputXsdFileGUID
		{
			get
			{
				return this._OutputXsdFileGUID;
			}
			set
			{
				if ((this._OutputXsdFileGUID != value))
				{
					if (this._OutputXsdFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOutputXsdFileGUIDChanging(value);
					this.SendPropertyChanging();
					this._OutputXsdFileGUID = value;
					this.SendPropertyChanged("OutputXsdFileGUID");
					this.OnOutputXsdFileGUIDChanged();
				}
			}
		}

		[Column(Storage = "_RepeatPeriod", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int RepeatPeriod
		{
			get
			{
				return this._RepeatPeriod;
			}
			set
			{
				if ((this._RepeatPeriod != value))
				{
					this.OnRepeatPeriodChanging(value);
					this.SendPropertyChanging();
					this._RepeatPeriod = value;
					this.SendPropertyChanged("RepeatPeriod");
					this.OnRepeatPeriodChanged();
				}
			}
		}

		[Association(Name = "FK_INT_Command_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.INT_Command.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.INT_Command.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_INT_Command_System", Storage = "_System", ThisKey = "SystemGUID", OtherKey = "SystemGUID", IsForeignKey = true, DeleteOnNull = true)]
		public INT_System System
		{
			get
			{
				return this._System.Entity;
			}
			set
			{
				INT_System previousValue = this._System.Entity;
				if (((previousValue != value)
							|| (this._System.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._System.Entity = null;
						previousValue.INT_Command.Remove(this);
					}
					this._System.Entity = value;
					if ((value != null))
					{
						value.INT_Command.Add(this);
						this._SystemGUID = value.SystemGUID;
					}
					else
					{
						this._SystemGUID = default(System.Guid);
					}
					this.SendPropertyChanged("System");
				}
			}
		}

		[Association(Name = "FK_INT_Handler_Command", Storage = "_INT_Handler", ThisKey = "CommandGUID", OtherKey = "CommandGUID", DeleteRule = "CASCADE")]
		public EntitySet<INT_Handler> INT_Handler
		{
			get
			{
				return this._INT_Handler;
			}
			set
			{
				this._INT_Handler.Assign(value);
			}
		}

		[Association(Name = "FK_INT_Log_Command", Storage = "_INT_Log", ThisKey = "CommandGUID", OtherKey = "CommandGUID", DeleteRule = "NO ACTION")]
		public EntitySet<INT_Log> INT_Log
		{
			get
			{
				return this._INT_Log;
			}
			set
			{
				this._INT_Log.Assign(value);
			}
		}

		[Association(Name = "FK_INT_Command_InputXsdFile", Storage = "_InputXsdFile", ThisKey = "InputXsdFileGUID", OtherKey = "ID", IsForeignKey = true)]
		public DbFile InputXsdFile
		{
			get
			{
				return this._InputXsdFile.Entity;
			}
			set
			{
				if ((this._InputXsdFile.Entity != value))
				{
					this.SendPropertyChanging();
					this._InputXsdFile.Entity = value;
					this.SendPropertyChanged("InputXsdFile");
				}
			}
		}

		[Association(Name = "FK_INT_Command_OutputXsdFile", Storage = "_OutputXsdFile", ThisKey = "OutputXsdFileGUID", OtherKey = "ID", IsForeignKey = true)]
		public DbFile OutputXsdFile
		{
			get
			{
				return this._OutputXsdFile.Entity;
			}
			set
			{
				if ((this._OutputXsdFile.Entity != value))
				{
					this.SendPropertyChanging();
					this._OutputXsdFile.Entity = value;
					this.SendPropertyChanged("OutputXsdFile");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_INT_Handler(INT_Handler entity)
		{
			this.SendPropertyChanging();
			entity.Command = this;
		}

		private void detach_INT_Handler(INT_Handler entity)
		{
			this.SendPropertyChanging();
			entity.Command = null;
		}

		private void attach_INT_Log(INT_Log entity)
		{
			this.SendPropertyChanging();
			entity.Command = this;
		}

		private void detach_INT_Log(INT_Log entity)
		{
			this.SendPropertyChanging();
			entity.Command = null;
		}
	}

	[Table(Name = "dbo.INT_Handler")]
	public partial class INT_Handler : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _HandlerGUID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private string _Class;

		private string _Method;

		private string _XPath;

		private int _SeqNo;

		private System.Guid _CommandGUID;

		private EntityRef<INT_Command> _Command;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnHandlerGUIDChanging(System.Guid value);
		partial void OnHandlerGUIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnClassChanging(string value);
		partial void OnClassChanged();
		partial void OnMethodChanging(string value);
		partial void OnMethodChanged();
		partial void OnXPathChanging(string value);
		partial void OnXPathChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnCommandGUIDChanging(System.Guid value);
		partial void OnCommandGUIDChanged();
		#endregion

		public INT_Handler()
		{
			this._Command = default(EntityRef<INT_Command>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_HandlerGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid HandlerGUID
		{
			get
			{
				return this._HandlerGUID;
			}
			set
			{
				if ((this._HandlerGUID != value))
				{
					this.OnHandlerGUIDChanging(value);
					this.SendPropertyChanging();
					this._HandlerGUID = value;
					this.SendPropertyChanged("HandlerGUID");
					this.OnHandlerGUIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Class", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}

		[Column(Storage = "_Method", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}

		[Column(Storage = "_XPath", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string XPath
		{
			get
			{
				return this._XPath;
			}
			set
			{
				if ((this._XPath != value))
				{
					this.OnXPathChanging(value);
					this.SendPropertyChanging();
					this._XPath = value;
					this.SendPropertyChanged("XPath");
					this.OnXPathChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_CommandGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid CommandGUID
		{
			get
			{
				return this._CommandGUID;
			}
			set
			{
				if ((this._CommandGUID != value))
				{
					if (this._Command.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommandGUIDChanging(value);
					this.SendPropertyChanging();
					this._CommandGUID = value;
					this.SendPropertyChanged("CommandGUID");
					this.OnCommandGUIDChanged();
				}
			}
		}

		[Association(Name = "FK_INT_Handler_Command", Storage = "_Command", ThisKey = "CommandGUID", OtherKey = "CommandGUID", IsForeignKey = true, DeleteOnNull = true)]
		public INT_Command Command
		{
			get
			{
				return this._Command.Entity;
			}
			set
			{
				INT_Command previousValue = this._Command.Entity;
				if (((previousValue != value)
							|| (this._Command.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Command.Entity = null;
						previousValue.INT_Handler.Remove(this);
					}
					this._Command.Entity = value;
					if ((value != null))
					{
						value.INT_Handler.Add(this);
						this._CommandGUID = value.CommandGUID;
					}
					else
					{
						this._CommandGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Command");
				}
			}
		}

		[Association(Name = "FK_INT_Handler_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.INT_Handler.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.INT_Handler.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.INT_Log")]
	public partial class INT_Log : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _LogGUID;

		private System.Guid _SystemGUID;

		private System.Nullable<System.Guid> _CommandGUID;

		private System.DateTime _RequestDate;

		private string _RequestData;

		private string _ResponseData;

		private System.Nullable<System.DateTime> _ResponseDate;

		private System.Nullable<int> _ErrorLogID;

		private string _ErrorText;

		private string _Key;

		private System.Guid _CallingSystemGUID;

		private System.Nullable<System.DateTime> _CancelDate;

		private EntityRef<INT_System> _CallingSystem;

		private EntityRef<INT_Command> _Command;

		private EntityRef<INT_System> _System;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnLogGUIDChanging(System.Guid value);
		partial void OnLogGUIDChanged();
		partial void OnSystemGUIDChanging(System.Guid value);
		partial void OnSystemGUIDChanged();
		partial void OnCommandGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnCommandGUIDChanged();
		partial void OnRequestDateChanging(System.DateTime value);
		partial void OnRequestDateChanged();
		partial void OnRequestDataChanging(string value);
		partial void OnRequestDataChanged();
		partial void OnResponseDataChanging(string value);
		partial void OnResponseDataChanged();
		partial void OnResponseDateChanging(System.Nullable<System.DateTime> value);
		partial void OnResponseDateChanged();
		partial void OnErrorLogIDChanging(System.Nullable<int> value);
		partial void OnErrorLogIDChanged();
		partial void OnErrorTextChanging(string value);
		partial void OnErrorTextChanged();
		partial void OnKeyChanging(string value);
		partial void OnKeyChanged();
		partial void OnCallingSystemGUIDChanging(System.Guid value);
		partial void OnCallingSystemGUIDChanged();
		partial void OnCancelDateChanging(System.Nullable<System.DateTime> value);
		partial void OnCancelDateChanged();
		#endregion

		public INT_Log()
		{
			this._CallingSystem = default(EntityRef<INT_System>);
			this._Command = default(EntityRef<INT_Command>);
			this._System = default(EntityRef<INT_System>);
			OnCreated();
		}

		[Column(Storage = "_LogGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid LogGUID
		{
			get
			{
				return this._LogGUID;
			}
			set
			{
				if ((this._LogGUID != value))
				{
					this.OnLogGUIDChanging(value);
					this.SendPropertyChanging();
					this._LogGUID = value;
					this.SendPropertyChanged("LogGUID");
					this.OnLogGUIDChanged();
				}
			}
		}

		[Column(Storage = "_SystemGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid SystemGUID
		{
			get
			{
				return this._SystemGUID;
			}
			set
			{
				if ((this._SystemGUID != value))
				{
					if (this._System.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemGUIDChanging(value);
					this.SendPropertyChanging();
					this._SystemGUID = value;
					this.SendPropertyChanged("SystemGUID");
					this.OnSystemGUIDChanged();
				}
			}
		}

		[Column(Storage = "_CommandGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> CommandGUID
		{
			get
			{
				return this._CommandGUID;
			}
			set
			{
				if ((this._CommandGUID != value))
				{
					if (this._Command.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommandGUIDChanging(value);
					this.SendPropertyChanging();
					this._CommandGUID = value;
					this.SendPropertyChanged("CommandGUID");
					this.OnCommandGUIDChanged();
				}
			}
		}

		[Column(Storage = "_RequestDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}

		[Column(Storage = "_RequestData", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string RequestData
		{
			get
			{
				return this._RequestData;
			}
			set
			{
				if ((this._RequestData != value))
				{
					this.OnRequestDataChanging(value);
					this.SendPropertyChanging();
					this._RequestData = value;
					this.SendPropertyChanged("RequestData");
					this.OnRequestDataChanged();
				}
			}
		}

		[Column(Storage = "_ResponseData", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ResponseData
		{
			get
			{
				return this._ResponseData;
			}
			set
			{
				if ((this._ResponseData != value))
				{
					this.OnResponseDataChanging(value);
					this.SendPropertyChanging();
					this._ResponseData = value;
					this.SendPropertyChanged("ResponseData");
					this.OnResponseDataChanged();
				}
			}
		}

		[Column(Storage = "_ResponseDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ResponseDate
		{
			get
			{
				return this._ResponseDate;
			}
			set
			{
				if ((this._ResponseDate != value))
				{
					this.OnResponseDateChanging(value);
					this.SendPropertyChanging();
					this._ResponseDate = value;
					this.SendPropertyChanged("ResponseDate");
					this.OnResponseDateChanged();
				}
			}
		}

		[Column(Storage = "_ErrorLogID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ErrorLogID
		{
			get
			{
				return this._ErrorLogID;
			}
			set
			{
				if ((this._ErrorLogID != value))
				{
					this.OnErrorLogIDChanging(value);
					this.SendPropertyChanging();
					this._ErrorLogID = value;
					this.SendPropertyChanged("ErrorLogID");
					this.OnErrorLogIDChanged();
				}
			}
		}

		[Column(Storage = "_ErrorText", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ErrorText
		{
			get
			{
				return this._ErrorText;
			}
			set
			{
				if ((this._ErrorText != value))
				{
					this.OnErrorTextChanging(value);
					this.SendPropertyChanging();
					this._ErrorText = value;
					this.SendPropertyChanged("ErrorText");
					this.OnErrorTextChanged();
				}
			}
		}

		[Column(Storage = "_Key", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}

		[Column(Storage = "_CallingSystemGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid CallingSystemGUID
		{
			get
			{
				return this._CallingSystemGUID;
			}
			set
			{
				if ((this._CallingSystemGUID != value))
				{
					if (this._CallingSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCallingSystemGUIDChanging(value);
					this.SendPropertyChanging();
					this._CallingSystemGUID = value;
					this.SendPropertyChanged("CallingSystemGUID");
					this.OnCallingSystemGUIDChanged();
				}
			}
		}

		[Column(Storage = "_CancelDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CancelDate
		{
			get
			{
				return this._CancelDate;
			}
			set
			{
				if ((this._CancelDate != value))
				{
					this.OnCancelDateChanging(value);
					this.SendPropertyChanging();
					this._CancelDate = value;
					this.SendPropertyChanged("CancelDate");
					this.OnCancelDateChanged();
				}
			}
		}

		[Association(Name = "FK_INT_Log_CallingSystem", Storage = "_CallingSystem", ThisKey = "CallingSystemGUID", OtherKey = "SystemGUID", IsForeignKey = true)]
		public INT_System CallingSystem
		{
			get
			{
				return this._CallingSystem.Entity;
			}
			set
			{
				INT_System previousValue = this._CallingSystem.Entity;
				if (((previousValue != value)
							|| (this._CallingSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CallingSystem.Entity = null;
						previousValue.INT_Log.Remove(this);
					}
					this._CallingSystem.Entity = value;
					if ((value != null))
					{
						value.INT_Log.Add(this);
						this._CallingSystemGUID = value.SystemGUID;
					}
					else
					{
						this._CallingSystemGUID = default(System.Guid);
					}
					this.SendPropertyChanged("CallingSystem");
				}
			}
		}

		[Association(Name = "FK_INT_Log_Command", Storage = "_Command", ThisKey = "CommandGUID", OtherKey = "CommandGUID", IsForeignKey = true)]
		public INT_Command Command
		{
			get
			{
				return this._Command.Entity;
			}
			set
			{
				INT_Command previousValue = this._Command.Entity;
				if (((previousValue != value)
							|| (this._Command.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Command.Entity = null;
						previousValue.INT_Log.Remove(this);
					}
					this._Command.Entity = value;
					if ((value != null))
					{
						value.INT_Log.Add(this);
						this._CommandGUID = value.CommandGUID;
					}
					else
					{
						this._CommandGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Command");
				}
			}
		}

		[Association(Name = "FK_INT_Log_System", Storage = "_System", ThisKey = "SystemGUID", OtherKey = "SystemGUID", IsForeignKey = true)]
		public INT_System System
		{
			get
			{
				return this._System.Entity;
			}
			set
			{
				INT_System previousValue = this._System.Entity;
				if (((previousValue != value)
							|| (this._System.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._System.Entity = null;
						previousValue.SystemGU.Remove(this);
					}
					this._System.Entity = value;
					if ((value != null))
					{
						value.SystemGU.Add(this);
						this._SystemGUID = value.SystemGUID;
					}
					else
					{
						this._SystemGUID = default(System.Guid);
					}
					this.SendPropertyChanged("System");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.INT_System")]
	public partial class INT_System : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _SystemGUID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private string _SysName;

		private string _WebServiceUrl;

		private bool _IsCurrent;

		private EntitySet<INT_Command> _INT_Command;

		private EntitySet<INT_Log> _INT_Log;

		private EntitySet<INT_Log> _SystemGU;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSystemGUIDChanging(System.Guid value);
		partial void OnSystemGUIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnWebServiceUrlChanging(string value);
		partial void OnWebServiceUrlChanged();
		partial void OnIsCurrentChanging(bool value);
		partial void OnIsCurrentChanged();
		#endregion

		public INT_System()
		{
			this._INT_Command = new EntitySet<INT_Command>(new Action<INT_Command>(this.attach_INT_Command), new Action<INT_Command>(this.detach_INT_Command));
			this._INT_Log = new EntitySet<INT_Log>(new Action<INT_Log>(this.attach_INT_Log), new Action<INT_Log>(this.detach_INT_Log));
			this._SystemGU = new EntitySet<INT_Log>(new Action<INT_Log>(this.attach_SystemGU), new Action<INT_Log>(this.detach_SystemGU));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_SystemGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid SystemGUID
		{
			get
			{
				return this._SystemGUID;
			}
			set
			{
				if ((this._SystemGUID != value))
				{
					this.OnSystemGUIDChanging(value);
					this.SendPropertyChanging();
					this._SystemGUID = value;
					this.SendPropertyChanged("SystemGUID");
					this.OnSystemGUIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_WebServiceUrl", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string WebServiceUrl
		{
			get
			{
				return this._WebServiceUrl;
			}
			set
			{
				if ((this._WebServiceUrl != value))
				{
					this.OnWebServiceUrlChanging(value);
					this.SendPropertyChanging();
					this._WebServiceUrl = value;
					this.SendPropertyChanged("WebServiceUrl");
					this.OnWebServiceUrlChanged();
				}
			}
		}

		[Column(Storage = "_IsCurrent", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsCurrent
		{
			get
			{
				return this._IsCurrent;
			}
			set
			{
				if ((this._IsCurrent != value))
				{
					this.OnIsCurrentChanging(value);
					this.SendPropertyChanging();
					this._IsCurrent = value;
					this.SendPropertyChanged("IsCurrent");
					this.OnIsCurrentChanged();
				}
			}
		}

		[Association(Name = "FK_INT_Command_System", Storage = "_INT_Command", ThisKey = "SystemGUID", OtherKey = "SystemGUID", DeleteRule = "CASCADE")]
		public EntitySet<INT_Command> INT_Command
		{
			get
			{
				return this._INT_Command;
			}
			set
			{
				this._INT_Command.Assign(value);
			}
		}

		[Association(Name = "FK_INT_Log_CallingSystem", Storage = "_INT_Log", ThisKey = "SystemGUID", OtherKey = "CallingSystemGUID", DeleteRule = "NO ACTION")]
		public EntitySet<INT_Log> INT_Log
		{
			get
			{
				return this._INT_Log;
			}
			set
			{
				this._INT_Log.Assign(value);
			}
		}

		[Association(Name = "FK_INT_Log_System", Storage = "_SystemGU", ThisKey = "SystemGUID", OtherKey = "SystemGUID", DeleteRule = "NO ACTION")]
		public EntitySet<INT_Log> SystemGU
		{
			get
			{
				return this._SystemGU;
			}
			set
			{
				this._SystemGU.Assign(value);
			}
		}

		[Association(Name = "FK_INT_System_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.INT_System.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.INT_System.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_INT_Command(INT_Command entity)
		{
			this.SendPropertyChanging();
			entity.System = this;
		}

		private void detach_INT_Command(INT_Command entity)
		{
			this.SendPropertyChanging();
			entity.System = null;
		}

		private void attach_INT_Log(INT_Log entity)
		{
			this.SendPropertyChanging();
			entity.CallingSystem = this;
		}

		private void detach_INT_Log(INT_Log entity)
		{
			this.SendPropertyChanging();
			entity.CallingSystem = null;
		}

		private void attach_SystemGU(INT_Log entity)
		{
			this.SendPropertyChanging();
			entity.System = this;
		}

		private void detach_SystemGU(INT_Log entity)
		{
			this.SendPropertyChanging();
			entity.System = null;
		}
	}

	[Table(Name = "dbo.Letter")]
	public partial class Letter : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _LetterGUID;

		private System.Guid _OrderDocGUID;

		private System.DateTime _CreateDate;

		private char _Type;

		private string _Body;

		private bool _IsDeleted;

		private bool _IsSigned;

		private string _XmlData;

		private EntityRef<OrderDoc> _OrderDoc;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnLetterGUIDChanging(System.Guid value);
		partial void OnLetterGUIDChanged();
		partial void OnOrderDocGUIDChanging(System.Guid value);
		partial void OnOrderDocGUIDChanged();
		partial void OnCreateDateChanging(System.DateTime value);
		partial void OnCreateDateChanged();
		partial void OnTypeChanging(char value);
		partial void OnTypeChanged();
		partial void OnBodyChanging(string value);
		partial void OnBodyChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnIsSignedChanging(bool value);
		partial void OnIsSignedChanged();
		partial void OnXmlDataChanging(string value);
		partial void OnXmlDataChanged();
		#endregion

		public Letter()
		{
			this._OrderDoc = default(EntityRef<OrderDoc>);
			OnCreated();
		}

		[Column(Storage = "_LetterGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid LetterGUID
		{
			get
			{
				return this._LetterGUID;
			}
			set
			{
				if ((this._LetterGUID != value))
				{
					this.OnLetterGUIDChanging(value);
					this.SendPropertyChanging();
					this._LetterGUID = value;
					this.SendPropertyChanged("LetterGUID");
					this.OnLetterGUIDChanged();
				}
			}
		}

		[Column(Storage = "_OrderDocGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}

		[Column(Storage = "_CreateDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}

		[Column(Storage = "_Type", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}

		[Column(Storage = "_Body", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_IsSigned", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsSigned
		{
			get
			{
				return this._IsSigned;
			}
			set
			{
				if ((this._IsSigned != value))
				{
					this.OnIsSignedChanging(value);
					this.SendPropertyChanging();
					this._IsSigned = value;
					this.SendPropertyChanged("IsSigned");
					this.OnIsSignedChanged();
				}
			}
		}

		[Column(Storage = "_XmlData", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string XmlData
		{
			get
			{
				return this._XmlData;
			}
			set
			{
				if ((this._XmlData != value))
				{
					this.OnXmlDataChanging(value);
					this.SendPropertyChanging();
					this._XmlData = value;
					this.SendPropertyChanged("XmlData");
					this.OnXmlDataChanged();
				}
			}
		}

		[Association(Name = "FK_Letter_OrderDoc", Storage = "_OrderDoc", ThisKey = "OrderDocGUID", OtherKey = "OrderGUID", IsForeignKey = true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value)
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.Letter.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.Letter.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.LicenseExecution")]
	public partial class LicenseExecution : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _LicenseExecutionGUID;

		private System.Guid _OrderDocGUID;

		private System.Nullable<System.DateTime> _InfoGivenDate;

		private System.Nullable<System.DateTime> _ReportingPeriodStartDate;

		private System.Nullable<System.DateTime> _ReportingPeriodEndDate;

		private string _DeclarationNumbers;

		private System.Nullable<decimal> _ShippedCommodityCount;

		private System.Nullable<int> _MeasureID;

		private string _AdditionalInfo;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private bool _IsDeleted;

		private char _Type;

		private bool _IsSent;

		private bool _IsSigned;

		private string _XmlData;

		private System.Nullable<System.Guid> _FileExGUID;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<C_Measure> _Measure;

		private EntityRef<OrderDoc> _OrderDoc;

		private EntityRef<DbFile> _FileEx;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnLicenseExecutionGUIDChanging(System.Guid value);
		partial void OnLicenseExecutionGUIDChanged();
		partial void OnOrderDocGUIDChanging(System.Guid value);
		partial void OnOrderDocGUIDChanged();
		partial void OnInfoGivenDateChanging(System.Nullable<System.DateTime> value);
		partial void OnInfoGivenDateChanged();
		partial void OnReportingPeriodStartDateChanging(System.Nullable<System.DateTime> value);
		partial void OnReportingPeriodStartDateChanged();
		partial void OnReportingPeriodEndDateChanging(System.Nullable<System.DateTime> value);
		partial void OnReportingPeriodEndDateChanged();
		partial void OnDeclarationNumbersChanging(string value);
		partial void OnDeclarationNumbersChanged();
		partial void OnShippedCommodityCountChanging(System.Nullable<decimal> value);
		partial void OnShippedCommodityCountChanged();
		partial void OnMeasureIDChanging(System.Nullable<int> value);
		partial void OnMeasureIDChanged();
		partial void OnAdditionalInfoChanging(string value);
		partial void OnAdditionalInfoChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnTypeChanging(char value);
		partial void OnTypeChanged();
		partial void OnIsSentChanging(bool value);
		partial void OnIsSentChanged();
		partial void OnIsSignedChanging(bool value);
		partial void OnIsSignedChanged();
		partial void OnXmlDataChanging(string value);
		partial void OnXmlDataChanged();
		partial void OnFileExGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnFileExGUIDChanged();
		#endregion

		public LicenseExecution()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Measure = default(EntityRef<C_Measure>);
			this._OrderDoc = default(EntityRef<OrderDoc>);
			this._FileEx = default(EntityRef<DbFile>);
			OnCreated();
		}

		[Column(Storage = "_LicenseExecutionGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid LicenseExecutionGUID
		{
			get
			{
				return this._LicenseExecutionGUID;
			}
			set
			{
				if ((this._LicenseExecutionGUID != value))
				{
					this.OnLicenseExecutionGUIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseExecutionGUID = value;
					this.SendPropertyChanged("LicenseExecutionGUID");
					this.OnLicenseExecutionGUIDChanged();
				}
			}
		}

		[Column(Storage = "_OrderDocGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}

		[Column(Storage = "_InfoGivenDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> InfoGivenDate
		{
			get
			{
				return this._InfoGivenDate;
			}
			set
			{
				if ((this._InfoGivenDate != value))
				{
					this.OnInfoGivenDateChanging(value);
					this.SendPropertyChanging();
					this._InfoGivenDate = value;
					this.SendPropertyChanged("InfoGivenDate");
					this.OnInfoGivenDateChanged();
				}
			}
		}

		[Column(Storage = "_ReportingPeriodStartDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ReportingPeriodStartDate
		{
			get
			{
				return this._ReportingPeriodStartDate;
			}
			set
			{
				if ((this._ReportingPeriodStartDate != value))
				{
					this.OnReportingPeriodStartDateChanging(value);
					this.SendPropertyChanging();
					this._ReportingPeriodStartDate = value;
					this.SendPropertyChanged("ReportingPeriodStartDate");
					this.OnReportingPeriodStartDateChanged();
				}
			}
		}

		[Column(Storage = "_ReportingPeriodEndDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ReportingPeriodEndDate
		{
			get
			{
				return this._ReportingPeriodEndDate;
			}
			set
			{
				if ((this._ReportingPeriodEndDate != value))
				{
					this.OnReportingPeriodEndDateChanging(value);
					this.SendPropertyChanging();
					this._ReportingPeriodEndDate = value;
					this.SendPropertyChanged("ReportingPeriodEndDate");
					this.OnReportingPeriodEndDateChanged();
				}
			}
		}

		[Column(Storage = "_DeclarationNumbers", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DeclarationNumbers
		{
			get
			{
				return this._DeclarationNumbers;
			}
			set
			{
				if ((this._DeclarationNumbers != value))
				{
					this.OnDeclarationNumbersChanging(value);
					this.SendPropertyChanging();
					this._DeclarationNumbers = value;
					this.SendPropertyChanged("DeclarationNumbers");
					this.OnDeclarationNumbersChanged();
				}
			}
		}

		[Column(Storage = "_ShippedCommodityCount", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> ShippedCommodityCount
		{
			get
			{
				return this._ShippedCommodityCount;
			}
			set
			{
				if ((this._ShippedCommodityCount != value))
				{
					this.OnShippedCommodityCountChanging(value);
					this.SendPropertyChanging();
					this._ShippedCommodityCount = value;
					this.SendPropertyChanged("ShippedCommodityCount");
					this.OnShippedCommodityCountChanged();
				}
			}
		}

		[Column(Storage = "_MeasureID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					if (this._Measure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}

		[Column(Storage = "_AdditionalInfo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string AdditionalInfo
		{
			get
			{
				return this._AdditionalInfo;
			}
			set
			{
				if ((this._AdditionalInfo != value))
				{
					this.OnAdditionalInfoChanging(value);
					this.SendPropertyChanging();
					this._AdditionalInfo = value;
					this.SendPropertyChanged("AdditionalInfo");
					this.OnAdditionalInfoChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_Type", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}

		[Column(Storage = "_IsSent", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsSent
		{
			get
			{
				return this._IsSent;
			}
			set
			{
				if ((this._IsSent != value))
				{
					this.OnIsSentChanging(value);
					this.SendPropertyChanging();
					this._IsSent = value;
					this.SendPropertyChanged("IsSent");
					this.OnIsSentChanged();
				}
			}
		}

		[Column(Storage = "_IsSigned", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsSigned
		{
			get
			{
				return this._IsSigned;
			}
			set
			{
				if ((this._IsSigned != value))
				{
					this.OnIsSignedChanging(value);
					this.SendPropertyChanging();
					this._IsSigned = value;
					this.SendPropertyChanged("IsSigned");
					this.OnIsSignedChanged();
				}
			}
		}

		[Column(Storage = "_XmlData", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string XmlData
		{
			get
			{
				return this._XmlData;
			}
			set
			{
				if ((this._XmlData != value))
				{
					this.OnXmlDataChanging(value);
					this.SendPropertyChanging();
					this._XmlData = value;
					this.SendPropertyChanged("XmlData");
					this.OnXmlDataChanged();
				}
			}
		}

		[Column(Storage = "_FileExGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileExGUID
		{
			get
			{
				return this._FileExGUID;
			}
			set
			{
				if ((this._FileExGUID != value))
				{
					if (this._FileEx.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileExGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileExGUID = value;
					this.SendPropertyChanged("FileExGUID");
					this.OnFileExGUIDChanged();
				}
			}
		}

		[Association(Name = "FK_LicenseExecution_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.LicenseExecution.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.LicenseExecution.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_LicenseExecution_Measure", Storage = "_Measure", ThisKey = "MeasureID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure Measure
		{
			get
			{
				return this._Measure.Entity;
			}
			set
			{
				C_Measure previousValue = this._Measure.Entity;
				if (((previousValue != value)
							|| (this._Measure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure.Entity = null;
						previousValue.LicenseExecution.Remove(this);
					}
					this._Measure.Entity = value;
					if ((value != null))
					{
						value.LicenseExecution.Add(this);
						this._MeasureID = value.MeasureID;
					}
					else
					{
						this._MeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Measure");
				}
			}
		}

		[Association(Name = "FK_LicenseExecution_OrderDoc", Storage = "_OrderDoc", ThisKey = "OrderDocGUID", OtherKey = "OrderGUID", IsForeignKey = true, DeleteOnNull = true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value)
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.Execution.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.Execution.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}

		[Association(Name = "FK_LicenseExecution_FileEx", Storage = "_FileEx", ThisKey = "FileExGUID", OtherKey = "ID", IsForeignKey = true)]
		public DbFile FileEx
		{
			get
			{
				return this._FileEx.Entity;
			}
			set
			{
				if ((this._FileEx.Entity != value))
				{
					this.SendPropertyChanging();
					this._FileEx.Entity = value;
					this.SendPropertyChanged("FileEx");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.LicenseExecutionAlert")]
	public partial class LicenseExecutionAlert : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _LicenseExecutionAlertGUID;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnLicenseExecutionAlertGUIDChanging(System.Guid value);
		partial void OnLicenseExecutionAlertGUIDChanged();
		#endregion

		public LicenseExecutionAlert()
		{
			OnCreated();
		}

		[Column(Storage = "_LicenseExecutionAlertGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid LicenseExecutionAlertGUID
		{
			get
			{
				return this._LicenseExecutionAlertGUID;
			}
			set
			{
				if ((this._LicenseExecutionAlertGUID != value))
				{
					this.OnLicenseExecutionAlertGUIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseExecutionAlertGUID = value;
					this.SendPropertyChanged("LicenseExecutionAlertGUID");
					this.OnLicenseExecutionAlertGUIDChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.MailMessage")]
	public partial class MailMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _MailMessageID;

		private string _Recipients;

		private string _Subject;

		private string _Body;

		private bool _IsSent;

		private System.Data.Linq.Binary _Attachment;

		private string _AttachmentName;

		private string _Error;

		private string _CopyRecipients;

		private System.Nullable<System.DateTime> _LastSendAttemptDate;

		private int _AttemptsToSendCount;

		private System.DateTime _LastModifiedDate;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnMailMessageIDChanging(int value);
		partial void OnMailMessageIDChanged();
		partial void OnRecipientsChanging(string value);
		partial void OnRecipientsChanged();
		partial void OnSubjectChanging(string value);
		partial void OnSubjectChanged();
		partial void OnBodyChanging(string value);
		partial void OnBodyChanged();
		partial void OnIsSentChanging(bool value);
		partial void OnIsSentChanged();
		partial void OnAttachmentChanging(System.Data.Linq.Binary value);
		partial void OnAttachmentChanged();
		partial void OnAttachmentNameChanging(string value);
		partial void OnAttachmentNameChanged();
		partial void OnErrorChanging(string value);
		partial void OnErrorChanged();
		partial void OnCopyRecipientsChanging(string value);
		partial void OnCopyRecipientsChanged();
		partial void OnLastSendAttemptDateChanging(System.Nullable<System.DateTime> value);
		partial void OnLastSendAttemptDateChanged();
		partial void OnAttemptsToSendCountChanging(int value);
		partial void OnAttemptsToSendCountChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		#endregion

		public MailMessage()
		{
			OnCreated();
		}

		[Column(Storage = "_MailMessageID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int MailMessageID
		{
			get
			{
				return this._MailMessageID;
			}
			set
			{
				if ((this._MailMessageID != value))
				{
					this.OnMailMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MailMessageID = value;
					this.SendPropertyChanged("MailMessageID");
					this.OnMailMessageIDChanged();
				}
			}
		}

		[Column(Storage = "_Recipients", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Recipients
		{
			get
			{
				return this._Recipients;
			}
			set
			{
				if ((this._Recipients != value))
				{
					this.OnRecipientsChanging(value);
					this.SendPropertyChanging();
					this._Recipients = value;
					this.SendPropertyChanged("Recipients");
					this.OnRecipientsChanged();
				}
			}
		}

		[Column(Storage = "_Subject", DbType = "NVarChar(1024)", UpdateCheck = UpdateCheck.Never)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}

		[Column(Storage = "_Body", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}

		[Column(Storage = "_IsSent", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsSent
		{
			get
			{
				return this._IsSent;
			}
			set
			{
				if ((this._IsSent != value))
				{
					this.OnIsSentChanging(value);
					this.SendPropertyChanging();
					this._IsSent = value;
					this.SendPropertyChanged("IsSent");
					this.OnIsSentChanged();
				}
			}
		}

		[Column(Storage = "_Attachment", DbType = "Image", CanBeNull = true, UpdateCheck = UpdateCheck.Never)]
		public System.Data.Linq.Binary Attachment
		{
			get
			{
				return this._Attachment;
			}
			set
			{
				if ((this._Attachment != value))
				{
					this.OnAttachmentChanging(value);
					this.SendPropertyChanging();
					this._Attachment = value;
					this.SendPropertyChanged("Attachment");
					this.OnAttachmentChanged();
				}
			}
		}

		[Column(Storage = "_AttachmentName", DbType = "NVarChar(1024)", UpdateCheck = UpdateCheck.Never)]
		public string AttachmentName
		{
			get
			{
				return this._AttachmentName;
			}
			set
			{
				if ((this._AttachmentName != value))
				{
					this.OnAttachmentNameChanging(value);
					this.SendPropertyChanging();
					this._AttachmentName = value;
					this.SendPropertyChanged("AttachmentName");
					this.OnAttachmentNameChanged();
				}
			}
		}

		[Column(Storage = "_Error", DbType = "NVarChar(1024)", UpdateCheck = UpdateCheck.Never)]
		public string Error
		{
			get
			{
				return this._Error;
			}
			set
			{
				if ((this._Error != value))
				{
					this.OnErrorChanging(value);
					this.SendPropertyChanging();
					this._Error = value;
					this.SendPropertyChanged("Error");
					this.OnErrorChanged();
				}
			}
		}

		[Column(Storage = "_CopyRecipients", DbType = "NVarChar(1024)", UpdateCheck = UpdateCheck.Never)]
		public string CopyRecipients
		{
			get
			{
				return this._CopyRecipients;
			}
			set
			{
				if ((this._CopyRecipients != value))
				{
					this.OnCopyRecipientsChanging(value);
					this.SendPropertyChanging();
					this._CopyRecipients = value;
					this.SendPropertyChanged("CopyRecipients");
					this.OnCopyRecipientsChanged();
				}
			}
		}

		[Column(Storage = "_LastSendAttemptDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastSendAttemptDate
		{
			get
			{
				return this._LastSendAttemptDate;
			}
			set
			{
				if ((this._LastSendAttemptDate != value))
				{
					this.OnLastSendAttemptDateChanging(value);
					this.SendPropertyChanging();
					this._LastSendAttemptDate = value;
					this.SendPropertyChanged("LastSendAttemptDate");
					this.OnLastSendAttemptDateChanged();
				}
			}
		}

		[Column(Storage = "_AttemptsToSendCount", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int AttemptsToSendCount
		{
			get
			{
				return this._AttemptsToSendCount;
			}
			set
			{
				if ((this._AttemptsToSendCount != value))
				{
					this.OnAttemptsToSendCountChanging(value);
					this.SendPropertyChanging();
					this._AttemptsToSendCount = value;
					this.SendPropertyChanged("AttemptsToSendCount");
					this.OnAttemptsToSendCountChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.MailTemplate")]
	public partial class MailTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _MailTemplateID;

		private string _Title;

		private string _TemplateSubject;

		private string _TemplateBody;

		private string _Comment;

		private bool _IsSystem;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnMailTemplateIDChanging(int value);
		partial void OnMailTemplateIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnTemplateSubjectChanging(string value);
		partial void OnTemplateSubjectChanged();
		partial void OnTemplateBodyChanging(string value);
		partial void OnTemplateBodyChanged();
		partial void OnCommentChanging(string value);
		partial void OnCommentChanged();
		partial void OnIsSystemChanging(bool value);
		partial void OnIsSystemChanged();
		#endregion

		public MailTemplate()
		{
			OnCreated();
		}

		[Column(Storage = "_MailTemplateID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int MailTemplateID
		{
			get
			{
				return this._MailTemplateID;
			}
			set
			{
				if ((this._MailTemplateID != value))
				{
					this.OnMailTemplateIDChanging(value);
					this.SendPropertyChanging();
					this._MailTemplateID = value;
					this.SendPropertyChanged("MailTemplateID");
					this.OnMailTemplateIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_TemplateSubject", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string TemplateSubject
		{
			get
			{
				return this._TemplateSubject;
			}
			set
			{
				if ((this._TemplateSubject != value))
				{
					this.OnTemplateSubjectChanging(value);
					this.SendPropertyChanging();
					this._TemplateSubject = value;
					this.SendPropertyChanged("TemplateSubject");
					this.OnTemplateSubjectChanged();
				}
			}
		}

		[Column(Storage = "_TemplateBody", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string TemplateBody
		{
			get
			{
				return this._TemplateBody;
			}
			set
			{
				if ((this._TemplateBody != value))
				{
					this.OnTemplateBodyChanging(value);
					this.SendPropertyChanging();
					this._TemplateBody = value;
					this.SendPropertyChanged("TemplateBody");
					this.OnTemplateBodyChanged();
				}
			}
		}

		[Column(Storage = "_Comment", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}

		[Column(Storage = "_IsSystem", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsSystem
		{
			get
			{
				return this._IsSystem;
			}
			set
			{
				if ((this._IsSystem != value))
				{
					this.OnIsSystemChanging(value);
					this.SendPropertyChanging();
					this._IsSystem = value;
					this.SendPropertyChanged("IsSystem");
					this.OnIsSystemChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.MM_Codifier")]
	public partial class MM_Codifier : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CodifierID;

		private string _Title;

		private string _SysName;

		private int _PackageID;

		private System.Guid _Guid;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<MM_Package> _Package;

		private EntitySet<MM_CodifierValue> _Values;

		private EntitySet<MM_ObjectProperty> _MM_ObjectProperty;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCodifierIDChanging(int value);
		partial void OnCodifierIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnPackageIDChanging(int value);
		partial void OnPackageIDChanged();
		partial void OnGuidChanging(System.Guid value);
		partial void OnGuidChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		#endregion

		public MM_Codifier()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Package = default(EntityRef<MM_Package>);
			this._Values = new EntitySet<MM_CodifierValue>(new Action<MM_CodifierValue>(this.attach_Values), new Action<MM_CodifierValue>(this.detach_Values));
			this._MM_ObjectProperty = new EntitySet<MM_ObjectProperty>(new Action<MM_ObjectProperty>(this.attach_MM_ObjectProperty), new Action<MM_ObjectProperty>(this.detach_MM_ObjectProperty));
			OnCreated();
		}

		[Column(Storage = "_CodifierID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int CodifierID
		{
			get
			{
				return this._CodifierID;
			}
			set
			{
				if ((this._CodifierID != value))
				{
					this.OnCodifierIDChanging(value);
					this.SendPropertyChanging();
					this._CodifierID = value;
					this.SendPropertyChanged("CodifierID");
					this.OnCodifierIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_PackageID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Association(Name = "FK_MM_Codifier_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_Codifier.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_Codifier.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_MM_Codifier_Package", Storage = "_Package", ThisKey = "PackageID", OtherKey = "PackageID", IsForeignKey = true)]
		public MM_Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				MM_Package previousValue = this._Package.Entity;
				if (((previousValue != value)
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.Codifiers.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.Codifiers.Add(this);
						this._PackageID = value.PackageID;
					}
					else
					{
						this._PackageID = default(int);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}

		[Association(Name = "FK_MM_CodifierValue_Codifier", Storage = "_Values", ThisKey = "CodifierID", OtherKey = "CodifierID", DeleteRule = "CASCADE")]
		public EntitySet<MM_CodifierValue> Values
		{
			get
			{
				return this._Values;
			}
			set
			{
				this._Values.Assign(value);
			}
		}

		[Association(Name = "FK_MM_ObjectProperty_Codifier", Storage = "_MM_ObjectProperty", ThisKey = "CodifierID", OtherKey = "CodifierID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_ObjectProperty> MM_ObjectProperty
		{
			get
			{
				return this._MM_ObjectProperty;
			}
			set
			{
				this._MM_ObjectProperty.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_Values(MM_CodifierValue entity)
		{
			this.SendPropertyChanging();
			entity.Codifier = this;
		}

		private void detach_Values(MM_CodifierValue entity)
		{
			this.SendPropertyChanging();
			entity.Codifier = null;
		}

		private void attach_MM_ObjectProperty(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.Codifier = this;
		}

		private void detach_MM_ObjectProperty(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.Codifier = null;
		}
	}

	[Table(Name = "dbo.MM_CodifierValue")]
	public partial class MM_CodifierValue : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _CodifierValueID;

		private int _CodifierID;

		private string _Title;

		private char _Code;

		private string _SysName;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private int _SeqNo;

		private EntityRef<MM_Codifier> _Codifier;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCodifierValueIDChanging(int value);
		partial void OnCodifierValueIDChanged();
		partial void OnCodifierIDChanging(int value);
		partial void OnCodifierIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnCodeChanging(char value);
		partial void OnCodeChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		#endregion

		public MM_CodifierValue()
		{
			this._Codifier = default(EntityRef<MM_Codifier>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_CodifierValueID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int CodifierValueID
		{
			get
			{
				return this._CodifierValueID;
			}
			set
			{
				if ((this._CodifierValueID != value))
				{
					this.OnCodifierValueIDChanging(value);
					this.SendPropertyChanging();
					this._CodifierValueID = value;
					this.SendPropertyChanged("CodifierValueID");
					this.OnCodifierValueIDChanged();
				}
			}
		}

		[Column(Storage = "_CodifierID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CodifierID
		{
			get
			{
				return this._CodifierID;
			}
			set
			{
				if ((this._CodifierID != value))
				{
					if (this._Codifier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodifierIDChanging(value);
					this.SendPropertyChanging();
					this._CodifierID = value;
					this.SendPropertyChanged("CodifierID");
					this.OnCodifierIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Code", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Association(Name = "FK_MM_CodifierValue_Codifier", Storage = "_Codifier", ThisKey = "CodifierID", OtherKey = "CodifierID", IsForeignKey = true, DeleteOnNull = true)]
		public MM_Codifier Codifier
		{
			get
			{
				return this._Codifier.Entity;
			}
			set
			{
				MM_Codifier previousValue = this._Codifier.Entity;
				if (((previousValue != value)
							|| (this._Codifier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Codifier.Entity = null;
						previousValue.Values.Remove(this);
					}
					this._Codifier.Entity = value;
					if ((value != null))
					{
						value.Values.Add(this);
						this._CodifierID = value.CodifierID;
					}
					else
					{
						this._CodifierID = default(int);
					}
					this.SendPropertyChanged("Codifier");
				}
			}
		}

		[Association(Name = "FK_MM_CodifierValue_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_CodifierValue.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_CodifierValue.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.MM_DataValidation")]
	public partial class MM_DataValidation : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _DataValidationID;

		private int _ObjectTypeID;

		private string _Expression;

		private string _DesignerData;

		private string _Message;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<MM_ObjectType> _ObjectType;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnDataValidationIDChanging(int value);
		partial void OnDataValidationIDChanged();
		partial void OnObjectTypeIDChanging(int value);
		partial void OnObjectTypeIDChanged();
		partial void OnExpressionChanging(string value);
		partial void OnExpressionChanged();
		partial void OnDesignerDataChanging(string value);
		partial void OnDesignerDataChanged();
		partial void OnMessageChanging(string value);
		partial void OnMessageChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		#endregion

		public MM_DataValidation()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ObjectType = default(EntityRef<MM_ObjectType>);
			OnCreated();
		}

		[Column(Storage = "_DataValidationID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int DataValidationID
		{
			get
			{
				return this._DataValidationID;
			}
			set
			{
				if ((this._DataValidationID != value))
				{
					this.OnDataValidationIDChanging(value);
					this.SendPropertyChanging();
					this._DataValidationID = value;
					this.SendPropertyChanged("DataValidationID");
					this.OnDataValidationIDChanged();
				}
			}
		}

		[Column(Storage = "_ObjectTypeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_Expression", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Expression
		{
			get
			{
				return this._Expression;
			}
			set
			{
				if ((this._Expression != value))
				{
					this.OnExpressionChanging(value);
					this.SendPropertyChanging();
					this._Expression = value;
					this.SendPropertyChanged("Expression");
					this.OnExpressionChanged();
				}
			}
		}

		[Column(Storage = "_DesignerData", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string DesignerData
		{
			get
			{
				return this._DesignerData;
			}
			set
			{
				if ((this._DesignerData != value))
				{
					this.OnDesignerDataChanging(value);
					this.SendPropertyChanging();
					this._DesignerData = value;
					this.SendPropertyChanged("DesignerData");
					this.OnDesignerDataChanged();
				}
			}
		}

		[Column(Storage = "_Message", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Association(Name = "FK_MM_DataValidation_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_DataValidation.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_DataValidation.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_MM_DataValidation_ObjectType", Storage = "_ObjectType", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", IsForeignKey = true)]
		public MM_ObjectType ObjectType
		{
			get
			{
				return this._ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._ObjectType.Entity;
				if (((previousValue != value)
							|| (this._ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectType.Entity = null;
						previousValue.MM_DataValidation.Remove(this);
					}
					this._ObjectType.Entity = value;
					if ((value != null))
					{
						value.MM_DataValidation.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(int);
					}
					this.SendPropertyChanged("ObjectType");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.MM_FormField")]
	public partial class MM_FormField : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FormFieldID;

		private int _ObjectPropertyID;

		private System.Nullable<int> _ControlName;

		private string _Title;

		private string _DefaultValue;

		private string _Comment;

		private System.Nullable<int> _FormFieldGroupID;

		private bool _ShowInList;

		private bool _ShowInEdit;

		private bool _ShowInView;

		private string _ValueFunction;

		private int _SeqNo;

		private string _ListColumnWidth;

		private bool _ValueFunctionExecType;

		private string _SortExpression;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private EntityRef<MM_FormFieldGroup> _FormFieldGroup;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<MM_ObjectProperty> _ObjectProperty;

		private EntitySet<MM_FormFieldAttribute> _Attributes;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFormFieldIDChanging(int value);
		partial void OnFormFieldIDChanged();
		partial void OnObjectPropertyIDChanging(int value);
		partial void OnObjectPropertyIDChanged();
		partial void OnControlNameChanging(System.Nullable<int> value);
		partial void OnControlNameChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnDefaultValueChanging(string value);
		partial void OnDefaultValueChanged();
		partial void OnCommentChanging(string value);
		partial void OnCommentChanged();
		partial void OnFormFieldGroupIDChanging(System.Nullable<int> value);
		partial void OnFormFieldGroupIDChanged();
		partial void OnShowInListChanging(bool value);
		partial void OnShowInListChanged();
		partial void OnShowInEditChanging(bool value);
		partial void OnShowInEditChanged();
		partial void OnShowInViewChanging(bool value);
		partial void OnShowInViewChanged();
		partial void OnValueFunctionChanging(string value);
		partial void OnValueFunctionChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnListColumnWidthChanging(string value);
		partial void OnListColumnWidthChanged();
		partial void OnValueFunctionExecTypeChanging(bool value);
		partial void OnValueFunctionExecTypeChanged();
		partial void OnSortExpressionChanging(string value);
		partial void OnSortExpressionChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		#endregion

		public MM_FormField()
		{
			this._FormFieldGroup = default(EntityRef<MM_FormFieldGroup>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ObjectProperty = default(EntityRef<MM_ObjectProperty>);
			this._Attributes = new EntitySet<MM_FormFieldAttribute>(new Action<MM_FormFieldAttribute>(this.attach_Attributes), new Action<MM_FormFieldAttribute>(this.detach_Attributes));
			OnCreated();
		}

		[Column(Storage = "_FormFieldID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int FormFieldID
		{
			get
			{
				return this._FormFieldID;
			}
			set
			{
				if ((this._FormFieldID != value))
				{
					this.OnFormFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FormFieldID = value;
					this.SendPropertyChanged("FormFieldID");
					this.OnFormFieldIDChanged();
				}
			}
		}

		[Column(Storage = "_ObjectPropertyID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ObjectPropertyID
		{
			get
			{
				return this._ObjectPropertyID;
			}
			set
			{
				if ((this._ObjectPropertyID != value))
				{
					if (this._ObjectProperty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectPropertyID = value;
					this.SendPropertyChanged("ObjectPropertyID");
					this.OnObjectPropertyIDChanged();
				}
			}
		}

		[Column(Storage = "_ControlName", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ControlName
		{
			get
			{
				return this._ControlName;
			}
			set
			{
				if ((this._ControlName != value))
				{
					this.OnControlNameChanging(value);
					this.SendPropertyChanging();
					this._ControlName = value;
					this.SendPropertyChanged("ControlName");
					this.OnControlNameChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(1024)", UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_DefaultValue", DbType = "NVarChar(255)", UpdateCheck = UpdateCheck.Never)]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}

		[Column(Storage = "_Comment", DbType = "NVarChar(1024)", UpdateCheck = UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}

		[Column(Storage = "_FormFieldGroupID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> FormFieldGroupID
		{
			get
			{
				return this._FormFieldGroupID;
			}
			set
			{
				if ((this._FormFieldGroupID != value))
				{
					if (this._FormFieldGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormFieldGroupIDChanging(value);
					this.SendPropertyChanging();
					this._FormFieldGroupID = value;
					this.SendPropertyChanged("FormFieldGroupID");
					this.OnFormFieldGroupIDChanged();
				}
			}
		}

		[Column(Storage = "_ShowInList", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool ShowInList
		{
			get
			{
				return this._ShowInList;
			}
			set
			{
				if ((this._ShowInList != value))
				{
					this.OnShowInListChanging(value);
					this.SendPropertyChanging();
					this._ShowInList = value;
					this.SendPropertyChanged("ShowInList");
					this.OnShowInListChanged();
				}
			}
		}

		[Column(Storage = "_ShowInEdit", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool ShowInEdit
		{
			get
			{
				return this._ShowInEdit;
			}
			set
			{
				if ((this._ShowInEdit != value))
				{
					this.OnShowInEditChanging(value);
					this.SendPropertyChanging();
					this._ShowInEdit = value;
					this.SendPropertyChanged("ShowInEdit");
					this.OnShowInEditChanged();
				}
			}
		}

		[Column(Storage = "_ShowInView", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool ShowInView
		{
			get
			{
				return this._ShowInView;
			}
			set
			{
				if ((this._ShowInView != value))
				{
					this.OnShowInViewChanging(value);
					this.SendPropertyChanging();
					this._ShowInView = value;
					this.SendPropertyChanged("ShowInView");
					this.OnShowInViewChanged();
				}
			}
		}

		[Column(Storage = "_ValueFunction", DbType = "NVarChar(1024)", UpdateCheck = UpdateCheck.Never)]
		public string ValueFunction
		{
			get
			{
				return this._ValueFunction;
			}
			set
			{
				if ((this._ValueFunction != value))
				{
					this.OnValueFunctionChanging(value);
					this.SendPropertyChanging();
					this._ValueFunction = value;
					this.SendPropertyChanged("ValueFunction");
					this.OnValueFunctionChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_ListColumnWidth", DbType = "NVarChar(1024)", UpdateCheck = UpdateCheck.Never)]
		public string ListColumnWidth
		{
			get
			{
				return this._ListColumnWidth;
			}
			set
			{
				if ((this._ListColumnWidth != value))
				{
					this.OnListColumnWidthChanging(value);
					this.SendPropertyChanging();
					this._ListColumnWidth = value;
					this.SendPropertyChanged("ListColumnWidth");
					this.OnListColumnWidthChanged();
				}
			}
		}

		[Column(Storage = "_ValueFunctionExecType", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool ValueFunctionExecType
		{
			get
			{
				return this._ValueFunctionExecType;
			}
			set
			{
				if ((this._ValueFunctionExecType != value))
				{
					this.OnValueFunctionExecTypeChanging(value);
					this.SendPropertyChanging();
					this._ValueFunctionExecType = value;
					this.SendPropertyChanged("ValueFunctionExecType");
					this.OnValueFunctionExecTypeChanged();
				}
			}
		}

		[Column(Storage = "_SortExpression", DbType = "NVarChar(1024)", UpdateCheck = UpdateCheck.Never)]
		public string SortExpression
		{
			get
			{
				return this._SortExpression;
			}
			set
			{
				if ((this._SortExpression != value))
				{
					this.OnSortExpressionChanging(value);
					this.SendPropertyChanging();
					this._SortExpression = value;
					this.SendPropertyChanged("SortExpression");
					this.OnSortExpressionChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Association(Name = "FK_MM_FormField_FormFieldGroup", Storage = "_FormFieldGroup", ThisKey = "FormFieldGroupID", OtherKey = "FormFieldGroupID", IsForeignKey = true)]
		public MM_FormFieldGroup FormFieldGroup
		{
			get
			{
				return this._FormFieldGroup.Entity;
			}
			set
			{
				MM_FormFieldGroup previousValue = this._FormFieldGroup.Entity;
				if (((previousValue != value)
							|| (this._FormFieldGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FormFieldGroup.Entity = null;
						previousValue.FormFields.Remove(this);
					}
					this._FormFieldGroup.Entity = value;
					if ((value != null))
					{
						value.FormFields.Add(this);
						this._FormFieldGroupID = value.FormFieldGroupID;
					}
					else
					{
						this._FormFieldGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FormFieldGroup");
				}
			}
		}

		[Association(Name = "FK_MM_FormField_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_FormField.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_FormField.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_MM_FormField_ObjectProperty", Storage = "_ObjectProperty", ThisKey = "ObjectPropertyID", OtherKey = "ObjectPropertyID", IsForeignKey = true, DeleteOnNull = true)]
		public MM_ObjectProperty ObjectProperty
		{
			get
			{
				return this._ObjectProperty.Entity;
			}
			set
			{
				MM_ObjectProperty previousValue = this._ObjectProperty.Entity;
				if (((previousValue != value)
							|| (this._ObjectProperty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectProperty.Entity = null;
						previousValue.MM_FormField.Remove(this);
					}
					this._ObjectProperty.Entity = value;
					if ((value != null))
					{
						value.MM_FormField.Add(this);
						this._ObjectPropertyID = value.ObjectPropertyID;
					}
					else
					{
						this._ObjectPropertyID = default(int);
					}
					this.SendPropertyChanged("ObjectProperty");
				}
			}
		}

		[Association(Name = "FK_MM_FormFieldAttribute_FormField", Storage = "_Attributes", ThisKey = "FormFieldID", OtherKey = "FormFieldID", DeleteRule = "CASCADE")]
		public EntitySet<MM_FormFieldAttribute> Attributes
		{
			get
			{
				return this._Attributes;
			}
			set
			{
				this._Attributes.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_Attributes(MM_FormFieldAttribute entity)
		{
			this.SendPropertyChanging();
			entity.FormField = this;
		}

		private void detach_Attributes(MM_FormFieldAttribute entity)
		{
			this.SendPropertyChanging();
			entity.FormField = null;
		}
	}

	[Table(Name = "dbo.MM_FormFieldAttribute")]
	public partial class MM_FormFieldAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FormFieldAttributeID;

		private int _FormFieldID;

		private string _Title;

		private string _Value;

		private bool _IsEvent;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private EntityRef<MM_FormField> _FormField;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFormFieldAttributeIDChanging(int value);
		partial void OnFormFieldAttributeIDChanged();
		partial void OnFormFieldIDChanging(int value);
		partial void OnFormFieldIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnValueChanging(string value);
		partial void OnValueChanged();
		partial void OnIsEventChanging(bool value);
		partial void OnIsEventChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		#endregion

		public MM_FormFieldAttribute()
		{
			this._FormField = default(EntityRef<MM_FormField>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_FormFieldAttributeID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int FormFieldAttributeID
		{
			get
			{
				return this._FormFieldAttributeID;
			}
			set
			{
				if ((this._FormFieldAttributeID != value))
				{
					this.OnFormFieldAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._FormFieldAttributeID = value;
					this.SendPropertyChanged("FormFieldAttributeID");
					this.OnFormFieldAttributeIDChanged();
				}
			}
		}

		[Column(Storage = "_FormFieldID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int FormFieldID
		{
			get
			{
				return this._FormFieldID;
			}
			set
			{
				if ((this._FormFieldID != value))
				{
					if (this._FormField.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FormFieldID = value;
					this.SendPropertyChanged("FormFieldID");
					this.OnFormFieldIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Value", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}

		[Column(Storage = "_IsEvent", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsEvent
		{
			get
			{
				return this._IsEvent;
			}
			set
			{
				if ((this._IsEvent != value))
				{
					this.OnIsEventChanging(value);
					this.SendPropertyChanging();
					this._IsEvent = value;
					this.SendPropertyChanged("IsEvent");
					this.OnIsEventChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Association(Name = "FK_MM_FormFieldAttribute_FormField", Storage = "_FormField", ThisKey = "FormFieldID", OtherKey = "FormFieldID", IsForeignKey = true, DeleteOnNull = true)]
		public MM_FormField FormField
		{
			get
			{
				return this._FormField.Entity;
			}
			set
			{
				MM_FormField previousValue = this._FormField.Entity;
				if (((previousValue != value)
							|| (this._FormField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FormField.Entity = null;
						previousValue.Attributes.Remove(this);
					}
					this._FormField.Entity = value;
					if ((value != null))
					{
						value.Attributes.Add(this);
						this._FormFieldID = value.FormFieldID;
					}
					else
					{
						this._FormFieldID = default(int);
					}
					this.SendPropertyChanged("FormField");
				}
			}
		}

		[Association(Name = "FK_MM_FormFieldAttribute_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_FormFieldAttribute.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_FormFieldAttribute.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.MM_FormFieldGroup")]
	public partial class MM_FormFieldGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FormFieldGroupID;

		private string _Title;

		private int _ObjectTypeID;

		private int _SeqNo;

		private System.Nullable<int> _SelectObjectPropertyID;

		private string _SelectObjectPrefix;

		private string _SelectObjectClass;

		private bool _ShowTitle;

		private string _SelectObjectDataTextField;

		private string _SelectObjectFilter;

		private string _SelectObjectSearchExpression;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private EntitySet<MM_FormField> _FormFields;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<MM_ObjectType> _ObjectType;

		private EntityRef<MM_ObjectProperty> _SelectObjectProperty;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFormFieldGroupIDChanging(int value);
		partial void OnFormFieldGroupIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnObjectTypeIDChanging(int value);
		partial void OnObjectTypeIDChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnSelectObjectPropertyIDChanging(System.Nullable<int> value);
		partial void OnSelectObjectPropertyIDChanged();
		partial void OnSelectObjectPrefixChanging(string value);
		partial void OnSelectObjectPrefixChanged();
		partial void OnSelectObjectClassChanging(string value);
		partial void OnSelectObjectClassChanged();
		partial void OnShowTitleChanging(bool value);
		partial void OnShowTitleChanged();
		partial void OnSelectObjectDataTextFieldChanging(string value);
		partial void OnSelectObjectDataTextFieldChanged();
		partial void OnSelectObjectFilterChanging(string value);
		partial void OnSelectObjectFilterChanged();
		partial void OnSelectObjectSearchExpressionChanging(string value);
		partial void OnSelectObjectSearchExpressionChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		#endregion

		public MM_FormFieldGroup()
		{
			this._FormFields = new EntitySet<MM_FormField>(new Action<MM_FormField>(this.attach_FormFields), new Action<MM_FormField>(this.detach_FormFields));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ObjectType = default(EntityRef<MM_ObjectType>);
			this._SelectObjectProperty = default(EntityRef<MM_ObjectProperty>);
			OnCreated();
		}

		[Column(Storage = "_FormFieldGroupID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int FormFieldGroupID
		{
			get
			{
				return this._FormFieldGroupID;
			}
			set
			{
				if ((this._FormFieldGroupID != value))
				{
					this.OnFormFieldGroupIDChanging(value);
					this.SendPropertyChanging();
					this._FormFieldGroupID = value;
					this.SendPropertyChanged("FormFieldGroupID");
					this.OnFormFieldGroupIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_ObjectTypeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_SelectObjectPropertyID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> SelectObjectPropertyID
		{
			get
			{
				return this._SelectObjectPropertyID;
			}
			set
			{
				if ((this._SelectObjectPropertyID != value))
				{
					if (this._SelectObjectProperty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSelectObjectPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._SelectObjectPropertyID = value;
					this.SendPropertyChanged("SelectObjectPropertyID");
					this.OnSelectObjectPropertyIDChanged();
				}
			}
		}

		[Column(Storage = "_SelectObjectPrefix", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SelectObjectPrefix
		{
			get
			{
				return this._SelectObjectPrefix;
			}
			set
			{
				if ((this._SelectObjectPrefix != value))
				{
					this.OnSelectObjectPrefixChanging(value);
					this.SendPropertyChanging();
					this._SelectObjectPrefix = value;
					this.SendPropertyChanged("SelectObjectPrefix");
					this.OnSelectObjectPrefixChanged();
				}
			}
		}

		[Column(Storage = "_SelectObjectClass", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SelectObjectClass
		{
			get
			{
				return this._SelectObjectClass;
			}
			set
			{
				if ((this._SelectObjectClass != value))
				{
					this.OnSelectObjectClassChanging(value);
					this.SendPropertyChanging();
					this._SelectObjectClass = value;
					this.SendPropertyChanged("SelectObjectClass");
					this.OnSelectObjectClassChanged();
				}
			}
		}

		[Column(Storage = "_ShowTitle", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool ShowTitle
		{
			get
			{
				return this._ShowTitle;
			}
			set
			{
				if ((this._ShowTitle != value))
				{
					this.OnShowTitleChanging(value);
					this.SendPropertyChanging();
					this._ShowTitle = value;
					this.SendPropertyChanged("ShowTitle");
					this.OnShowTitleChanged();
				}
			}
		}

		[Column(Storage = "_SelectObjectDataTextField", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SelectObjectDataTextField
		{
			get
			{
				return this._SelectObjectDataTextField;
			}
			set
			{
				if ((this._SelectObjectDataTextField != value))
				{
					this.OnSelectObjectDataTextFieldChanging(value);
					this.SendPropertyChanging();
					this._SelectObjectDataTextField = value;
					this.SendPropertyChanged("SelectObjectDataTextField");
					this.OnSelectObjectDataTextFieldChanged();
				}
			}
		}

		[Column(Storage = "_SelectObjectFilter", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SelectObjectFilter
		{
			get
			{
				return this._SelectObjectFilter;
			}
			set
			{
				if ((this._SelectObjectFilter != value))
				{
					this.OnSelectObjectFilterChanging(value);
					this.SendPropertyChanging();
					this._SelectObjectFilter = value;
					this.SendPropertyChanged("SelectObjectFilter");
					this.OnSelectObjectFilterChanged();
				}
			}
		}

		[Column(Storage = "_SelectObjectSearchExpression", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SelectObjectSearchExpression
		{
			get
			{
				return this._SelectObjectSearchExpression;
			}
			set
			{
				if ((this._SelectObjectSearchExpression != value))
				{
					this.OnSelectObjectSearchExpressionChanging(value);
					this.SendPropertyChanging();
					this._SelectObjectSearchExpression = value;
					this.SendPropertyChanged("SelectObjectSearchExpression");
					this.OnSelectObjectSearchExpressionChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Association(Name = "FK_MM_FormField_FormFieldGroup", Storage = "_FormFields", ThisKey = "FormFieldGroupID", OtherKey = "FormFieldGroupID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_FormField> FormFields
		{
			get
			{
				return this._FormFields;
			}
			set
			{
				this._FormFields.Assign(value);
			}
		}

		[Association(Name = "FK_MM_FormFieldGroup_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_FormFieldGroup.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_FormFieldGroup.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_MM_FormFieldGroup_ObjectType", Storage = "_ObjectType", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", IsForeignKey = true)]
		public MM_ObjectType ObjectType
		{
			get
			{
				return this._ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._ObjectType.Entity;
				if (((previousValue != value)
							|| (this._ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectType.Entity = null;
						previousValue.FormFieldGroups.Remove(this);
					}
					this._ObjectType.Entity = value;
					if ((value != null))
					{
						value.FormFieldGroups.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(int);
					}
					this.SendPropertyChanged("ObjectType");
				}
			}
		}

		[Association(Name = "FK_MM_FormFieldGroup_SelectObjectProperty", Storage = "_SelectObjectProperty", ThisKey = "SelectObjectPropertyID", OtherKey = "ObjectPropertyID", IsForeignKey = true)]
		public MM_ObjectProperty SelectObjectProperty
		{
			get
			{
				return this._SelectObjectProperty.Entity;
			}
			set
			{
				MM_ObjectProperty previousValue = this._SelectObjectProperty.Entity;
				if (((previousValue != value)
							|| (this._SelectObjectProperty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SelectObjectProperty.Entity = null;
						previousValue.MM_FormFieldGroup.Remove(this);
					}
					this._SelectObjectProperty.Entity = value;
					if ((value != null))
					{
						value.MM_FormFieldGroup.Add(this);
						this._SelectObjectPropertyID = value.ObjectPropertyID;
					}
					else
					{
						this._SelectObjectPropertyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SelectObjectProperty");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_FormFields(MM_FormField entity)
		{
			this.SendPropertyChanging();
			entity.FormFieldGroup = this;
		}

		private void detach_FormFields(MM_FormField entity)
		{
			this.SendPropertyChanging();
			entity.FormFieldGroup = null;
		}
	}

	[Table(Name = "dbo.MM_FormView")]
	public partial class MM_FormView : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FormViewID;

		private string _Title;

		private string _SysName;

		private string _ViewTemplate;

		private char _TemplateTypeCode;

		private System.Nullable<int> _ObjectTypeID;

		private System.Nullable<int> _PackageID;

		private System.DateTime _LastModifiedDate;

		private System.Guid _Guid;

		private bool _IsCustom;

		private bool _IsDeleted;

		private int _LastModifiedUserID;

		private bool _IsCaching;

		private string _CacheKeyParams;

		private int _CacheTimeout;

		private string _BaseClass;

		private EntitySet<HST_MM_FormView> _HST_MM_FormView;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<MM_ObjectType> _ObjectType;

		private EntityRef<MM_Package> _Package;

		private EntitySet<MM_Method> _MM_Method;

		private EntitySet<N_MenuItem> _N_MenuItem;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFormViewIDChanging(int value);
		partial void OnFormViewIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnViewTemplateChanging(string value);
		partial void OnViewTemplateChanged();
		partial void OnTemplateTypeCodeChanging(char value);
		partial void OnTemplateTypeCodeChanged();
		partial void OnObjectTypeIDChanging(System.Nullable<int> value);
		partial void OnObjectTypeIDChanged();
		partial void OnPackageIDChanging(System.Nullable<int> value);
		partial void OnPackageIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnGuidChanging(System.Guid value);
		partial void OnGuidChanged();
		partial void OnIsCustomChanging(bool value);
		partial void OnIsCustomChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnIsCachingChanging(bool value);
		partial void OnIsCachingChanged();
		partial void OnCacheKeyParamsChanging(string value);
		partial void OnCacheKeyParamsChanged();
		partial void OnCacheTimeoutChanging(int value);
		partial void OnCacheTimeoutChanged();
		partial void OnBaseClassChanging(string value);
		partial void OnBaseClassChanged();
		#endregion

		public MM_FormView()
		{
			this._HST_MM_FormView = new EntitySet<HST_MM_FormView>(new Action<HST_MM_FormView>(this.attach_HST_MM_FormView), new Action<HST_MM_FormView>(this.detach_HST_MM_FormView));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ObjectType = default(EntityRef<MM_ObjectType>);
			this._Package = default(EntityRef<MM_Package>);
			this._MM_Method = new EntitySet<MM_Method>(new Action<MM_Method>(this.attach_MM_Method), new Action<MM_Method>(this.detach_MM_Method));
			this._N_MenuItem = new EntitySet<N_MenuItem>(new Action<N_MenuItem>(this.attach_N_MenuItem), new Action<N_MenuItem>(this.detach_N_MenuItem));
			OnCreated();
		}

		[Column(Storage = "_FormViewID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int FormViewID
		{
			get
			{
				return this._FormViewID;
			}
			set
			{
				if ((this._FormViewID != value))
				{
					this.OnFormViewIDChanging(value);
					this.SendPropertyChanging();
					this._FormViewID = value;
					this.SendPropertyChanged("FormViewID");
					this.OnFormViewIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_ViewTemplate", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ViewTemplate
		{
			get
			{
				return this._ViewTemplate;
			}
			set
			{
				if ((this._ViewTemplate != value))
				{
					this.OnViewTemplateChanging(value);
					this.SendPropertyChanging();
					this._ViewTemplate = value;
					this.SendPropertyChanged("ViewTemplate");
					this.OnViewTemplateChanged();
				}
			}
		}

		[Column(Storage = "_TemplateTypeCode", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char TemplateTypeCode
		{
			get
			{
				return this._TemplateTypeCode;
			}
			set
			{
				if ((this._TemplateTypeCode != value))
				{
					this.OnTemplateTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._TemplateTypeCode = value;
					this.SendPropertyChanged("TemplateTypeCode");
					this.OnTemplateTypeCodeChanged();
				}
			}
		}

		[Column(Storage = "_ObjectTypeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_PackageID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_IsCustom", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsCustom
		{
			get
			{
				return this._IsCustom;
			}
			set
			{
				if ((this._IsCustom != value))
				{
					this.OnIsCustomChanging(value);
					this.SendPropertyChanging();
					this._IsCustom = value;
					this.SendPropertyChanged("IsCustom");
					this.OnIsCustomChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_IsCaching", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsCaching
		{
			get
			{
				return this._IsCaching;
			}
			set
			{
				if ((this._IsCaching != value))
				{
					this.OnIsCachingChanging(value);
					this.SendPropertyChanging();
					this._IsCaching = value;
					this.SendPropertyChanged("IsCaching");
					this.OnIsCachingChanged();
				}
			}
		}

		[Column(Storage = "_CacheKeyParams", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string CacheKeyParams
		{
			get
			{
				return this._CacheKeyParams;
			}
			set
			{
				if ((this._CacheKeyParams != value))
				{
					this.OnCacheKeyParamsChanging(value);
					this.SendPropertyChanging();
					this._CacheKeyParams = value;
					this.SendPropertyChanged("CacheKeyParams");
					this.OnCacheKeyParamsChanged();
				}
			}
		}

		[Column(Storage = "_CacheTimeout", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CacheTimeout
		{
			get
			{
				return this._CacheTimeout;
			}
			set
			{
				if ((this._CacheTimeout != value))
				{
					this.OnCacheTimeoutChanging(value);
					this.SendPropertyChanging();
					this._CacheTimeout = value;
					this.SendPropertyChanged("CacheTimeout");
					this.OnCacheTimeoutChanged();
				}
			}
		}

		[Column(Storage = "_BaseClass", DbType = "NVarChar(100) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string BaseClass
		{
			get
			{
				return this._BaseClass;
			}
			set
			{
				if ((this._BaseClass != value))
				{
					this.OnBaseClassChanging(value);
					this.SendPropertyChanging();
					this._BaseClass = value;
					this.SendPropertyChanged("BaseClass");
					this.OnBaseClassChanged();
				}
			}
		}

		[Association(Name = "FK_HST_MM_FormView_MM_FormView", Storage = "_HST_MM_FormView", ThisKey = "FormViewID", OtherKey = "FormViewID", DeleteRule = "CASCADE")]
		public EntitySet<HST_MM_FormView> HST_MM_FormView
		{
			get
			{
				return this._HST_MM_FormView;
			}
			set
			{
				this._HST_MM_FormView.Assign(value);
			}
		}

		[Association(Name = "FK_MM_FormView_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_FormView.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_FormView.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_MM_FormView_ObjectType", Storage = "_ObjectType", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", IsForeignKey = true)]
		public MM_ObjectType ObjectType
		{
			get
			{
				return this._ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._ObjectType.Entity;
				if (((previousValue != value)
							|| (this._ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectType.Entity = null;
						previousValue.FormViews.Remove(this);
					}
					this._ObjectType.Entity = value;
					if ((value != null))
					{
						value.FormViews.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ObjectType");
				}
			}
		}

		[Association(Name = "FK_MM_FormView_Package", Storage = "_Package", ThisKey = "PackageID", OtherKey = "PackageID", IsForeignKey = true)]
		public MM_Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				MM_Package previousValue = this._Package.Entity;
				if (((previousValue != value)
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.MM_FormView.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.MM_FormView.Add(this);
						this._PackageID = value.PackageID;
					}
					else
					{
						this._PackageID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}

		[Association(Name = "FK_MM_Method_FormView", Storage = "_MM_Method", ThisKey = "FormViewID", OtherKey = "FormViewID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_Method> MM_Method
		{
			get
			{
				return this._MM_Method;
			}
			set
			{
				this._MM_Method.Assign(value);
			}
		}

		[Association(Name = "FK_N_MenuItem_MM_FormView", Storage = "_N_MenuItem", ThisKey = "FormViewID", OtherKey = "FormViewID", DeleteRule = "SET NULL")]
		public EntitySet<N_MenuItem> N_MenuItem
		{
			get
			{
				return this._N_MenuItem;
			}
			set
			{
				this._N_MenuItem.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_HST_MM_FormView(HST_MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.MM_FormView = this;
		}

		private void detach_HST_MM_FormView(HST_MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.MM_FormView = null;
		}

		private void attach_MM_Method(MM_Method entity)
		{
			this.SendPropertyChanging();
			entity.FormView = this;
		}

		private void detach_MM_Method(MM_Method entity)
		{
			this.SendPropertyChanging();
			entity.FormView = null;
		}

		private void attach_N_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.MM_FormView = this;
		}

		private void detach_N_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.MM_FormView = null;
		}
	}

	[Table(Name = "dbo.MM_Group")]
	public partial class MM_Group : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _GroupID;

		private string _Title;

		private string _SysName;

		private char _ElementTypeCode;

		private System.Guid _Guid;

		private string _EditParmsCode;

		private string _AddCode;

		private string _RemoveCode;

		private EntitySet<MM_GroupAsso> _MM_GroupAsso;

		private EntitySet<MM_GroupAsso> _Group;

		private EntitySet<MM_TaggedValueType> _MM_TaggedValueType;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnGroupIDChanging(int value);
		partial void OnGroupIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnElementTypeCodeChanging(char value);
		partial void OnElementTypeCodeChanged();
		partial void OnGuidChanging(System.Guid value);
		partial void OnGuidChanged();
		partial void OnEditParmsCodeChanging(string value);
		partial void OnEditParmsCodeChanged();
		partial void OnAddCodeChanging(string value);
		partial void OnAddCodeChanged();
		partial void OnRemoveCodeChanging(string value);
		partial void OnRemoveCodeChanged();
		#endregion

		public MM_Group()
		{
			this._MM_GroupAsso = new EntitySet<MM_GroupAsso>(new Action<MM_GroupAsso>(this.attach_MM_GroupAsso), new Action<MM_GroupAsso>(this.detach_MM_GroupAsso));
			this._Group = new EntitySet<MM_GroupAsso>(new Action<MM_GroupAsso>(this.attach_Group), new Action<MM_GroupAsso>(this.detach_Group));
			this._MM_TaggedValueType = new EntitySet<MM_TaggedValueType>(new Action<MM_TaggedValueType>(this.attach_MM_TaggedValueType), new Action<MM_TaggedValueType>(this.detach_MM_TaggedValueType));
			OnCreated();
		}

		[Column(Storage = "_GroupID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_ElementTypeCode", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char ElementTypeCode
		{
			get
			{
				return this._ElementTypeCode;
			}
			set
			{
				if ((this._ElementTypeCode != value))
				{
					this.OnElementTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._ElementTypeCode = value;
					this.SendPropertyChanged("ElementTypeCode");
					this.OnElementTypeCodeChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_EditParmsCode", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string EditParmsCode
		{
			get
			{
				return this._EditParmsCode;
			}
			set
			{
				if ((this._EditParmsCode != value))
				{
					this.OnEditParmsCodeChanging(value);
					this.SendPropertyChanging();
					this._EditParmsCode = value;
					this.SendPropertyChanged("EditParmsCode");
					this.OnEditParmsCodeChanged();
				}
			}
		}

		[Column(Storage = "_AddCode", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string AddCode
		{
			get
			{
				return this._AddCode;
			}
			set
			{
				if ((this._AddCode != value))
				{
					this.OnAddCodeChanging(value);
					this.SendPropertyChanging();
					this._AddCode = value;
					this.SendPropertyChanged("AddCode");
					this.OnAddCodeChanged();
				}
			}
		}

		[Column(Storage = "_RemoveCode", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string RemoveCode
		{
			get
			{
				return this._RemoveCode;
			}
			set
			{
				if ((this._RemoveCode != value))
				{
					this.OnRemoveCodeChanging(value);
					this.SendPropertyChanging();
					this._RemoveCode = value;
					this.SendPropertyChanged("RemoveCode");
					this.OnRemoveCodeChanged();
				}
			}
		}

		[Association(Name = "FK_MM_GroupAsso_MM_Group", Storage = "_MM_GroupAsso", ThisKey = "GroupID", OtherKey = "GroupID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_GroupAsso> MM_GroupAsso
		{
			get
			{
				return this._MM_GroupAsso;
			}
			set
			{
				this._MM_GroupAsso.Assign(value);
			}
		}

		[Association(Name = "FK_MM_GroupAsso_MM_Group1", Storage = "_Group", ThisKey = "GroupID", OtherKey = "ParentGroupID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_GroupAsso> Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				this._Group.Assign(value);
			}
		}

		[Association(Name = "FK_MM_TaggedValueType_MM_Group", Storage = "_MM_TaggedValueType", ThisKey = "GroupID", OtherKey = "GroupID", DeleteRule = "CASCADE")]
		public EntitySet<MM_TaggedValueType> MM_TaggedValueType
		{
			get
			{
				return this._MM_TaggedValueType;
			}
			set
			{
				this._MM_TaggedValueType.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_MM_GroupAsso(MM_GroupAsso entity)
		{
			this.SendPropertyChanging();
			entity.MM_Group = this;
		}

		private void detach_MM_GroupAsso(MM_GroupAsso entity)
		{
			this.SendPropertyChanging();
			entity.MM_Group = null;
		}

		private void attach_Group(MM_GroupAsso entity)
		{
			this.SendPropertyChanging();
			entity.MM_Group1 = this;
		}

		private void detach_Group(MM_GroupAsso entity)
		{
			this.SendPropertyChanging();
			entity.MM_Group1 = null;
		}

		private void attach_MM_TaggedValueType(MM_TaggedValueType entity)
		{
			this.SendPropertyChanging();
			entity.MM_Group = this;
		}

		private void detach_MM_TaggedValueType(MM_TaggedValueType entity)
		{
			this.SendPropertyChanging();
			entity.MM_Group = null;
		}
	}

	[Table(Name = "dbo.MM_GroupAsso")]
	public partial class MM_GroupAsso : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _GroupID;

		private int _ParentGroupID;

		private EntityRef<MM_Group> _MM_Group;

		private EntityRef<MM_Group> _MM_Group1;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnGroupIDChanging(int value);
		partial void OnGroupIDChanged();
		partial void OnParentGroupIDChanging(int value);
		partial void OnParentGroupIDChanged();
		#endregion

		public MM_GroupAsso()
		{
			this._MM_Group = default(EntityRef<MM_Group>);
			this._MM_Group1 = default(EntityRef<MM_Group>);
			OnCreated();
		}

		[Column(Storage = "_GroupID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._MM_Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}

		[Column(Storage = "_ParentGroupID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int ParentGroupID
		{
			get
			{
				return this._ParentGroupID;
			}
			set
			{
				if ((this._ParentGroupID != value))
				{
					if (this._MM_Group1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentGroupIDChanging(value);
					this.SendPropertyChanging();
					this._ParentGroupID = value;
					this.SendPropertyChanged("ParentGroupID");
					this.OnParentGroupIDChanged();
				}
			}
		}

		[Association(Name = "FK_MM_GroupAsso_MM_Group", Storage = "_MM_Group", ThisKey = "GroupID", OtherKey = "GroupID", IsForeignKey = true)]
		public MM_Group MM_Group
		{
			get
			{
				return this._MM_Group.Entity;
			}
			set
			{
				MM_Group previousValue = this._MM_Group.Entity;
				if (((previousValue != value)
							|| (this._MM_Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_Group.Entity = null;
						previousValue.MM_GroupAsso.Remove(this);
					}
					this._MM_Group.Entity = value;
					if ((value != null))
					{
						value.MM_GroupAsso.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("MM_Group");
				}
			}
		}

		[Association(Name = "FK_MM_GroupAsso_MM_Group1", Storage = "_MM_Group1", ThisKey = "ParentGroupID", OtherKey = "GroupID", IsForeignKey = true)]
		public MM_Group MM_Group1
		{
			get
			{
				return this._MM_Group1.Entity;
			}
			set
			{
				MM_Group previousValue = this._MM_Group1.Entity;
				if (((previousValue != value)
							|| (this._MM_Group1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_Group1.Entity = null;
						previousValue.Group.Remove(this);
					}
					this._MM_Group1.Entity = value;
					if ((value != null))
					{
						value.Group.Add(this);
						this._ParentGroupID = value.GroupID;
					}
					else
					{
						this._ParentGroupID = default(int);
					}
					this.SendPropertyChanged("MM_Group1");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.MM_Method")]
	public partial class MM_Method : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _MethodID;

		private string _SysName;

		private string _Title;

		private int _SeqNo;

		private int _ObjectTypeID;

		private System.Guid _Guid;

		private System.Nullable<int> _FormViewID;

		private bool _IsDefault;

		private string _Icon;

		private string _Code;

		private string _Parameters;

		private string _ViewPath;

		private string _PredicateCode;

		private string _Comment;

		private EntityRef<MM_FormView> _FormView;

		private EntityRef<MM_ObjectType> _ObjectType;

		private EntitySet<MM_MethodGroupItem> _MM_MethodGroupItem;

		private EntitySet<MM_MethodParameter> _MethodParameters;

		private EntitySet<N_MenuItem> _N_MenuItem;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnMethodIDChanging(int value);
		partial void OnMethodIDChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnObjectTypeIDChanging(int value);
		partial void OnObjectTypeIDChanged();
		partial void OnGuidChanging(System.Guid value);
		partial void OnGuidChanged();
		partial void OnFormViewIDChanging(System.Nullable<int> value);
		partial void OnFormViewIDChanged();
		partial void OnIsDefaultChanging(bool value);
		partial void OnIsDefaultChanged();
		partial void OnIconChanging(string value);
		partial void OnIconChanged();
		partial void OnCodeChanging(string value);
		partial void OnCodeChanged();
		partial void OnParametersChanging(string value);
		partial void OnParametersChanged();
		partial void OnViewPathChanging(string value);
		partial void OnViewPathChanged();
		partial void OnPredicateCodeChanging(string value);
		partial void OnPredicateCodeChanged();
		partial void OnCommentChanging(string value);
		partial void OnCommentChanged();
		#endregion

		public MM_Method()
		{
			this._FormView = default(EntityRef<MM_FormView>);
			this._ObjectType = default(EntityRef<MM_ObjectType>);
			this._MM_MethodGroupItem = new EntitySet<MM_MethodGroupItem>(new Action<MM_MethodGroupItem>(this.attach_MM_MethodGroupItem), new Action<MM_MethodGroupItem>(this.detach_MM_MethodGroupItem));
			this._MethodParameters = new EntitySet<MM_MethodParameter>(new Action<MM_MethodParameter>(this.attach_MethodParameters), new Action<MM_MethodParameter>(this.detach_MethodParameters));
			this._N_MenuItem = new EntitySet<N_MenuItem>(new Action<N_MenuItem>(this.attach_N_MenuItem), new Action<N_MenuItem>(this.detach_N_MenuItem));
			OnCreated();
		}

		[Column(Storage = "_MethodID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int MethodID
		{
			get
			{
				return this._MethodID;
			}
			set
			{
				if ((this._MethodID != value))
				{
					this.OnMethodIDChanging(value);
					this.SendPropertyChanging();
					this._MethodID = value;
					this.SendPropertyChanged("MethodID");
					this.OnMethodIDChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_ObjectTypeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_FormViewID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> FormViewID
		{
			get
			{
				return this._FormViewID;
			}
			set
			{
				if ((this._FormViewID != value))
				{
					if (this._FormView.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormViewIDChanging(value);
					this.SendPropertyChanging();
					this._FormViewID = value;
					this.SendPropertyChanged("FormViewID");
					this.OnFormViewIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDefault", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}

		[Column(Storage = "_Icon", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Icon
		{
			get
			{
				return this._Icon;
			}
			set
			{
				if ((this._Icon != value))
				{
					this.OnIconChanging(value);
					this.SendPropertyChanging();
					this._Icon = value;
					this.SendPropertyChanged("Icon");
					this.OnIconChanged();
				}
			}
		}

		[Column(Storage = "_Code", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}

		[Column(Storage = "_Parameters", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Parameters
		{
			get
			{
				return this._Parameters;
			}
			set
			{
				if ((this._Parameters != value))
				{
					this.OnParametersChanging(value);
					this.SendPropertyChanging();
					this._Parameters = value;
					this.SendPropertyChanged("Parameters");
					this.OnParametersChanged();
				}
			}
		}

		[Column(Storage = "_ViewPath", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ViewPath
		{
			get
			{
				return this._ViewPath;
			}
			set
			{
				if ((this._ViewPath != value))
				{
					this.OnViewPathChanging(value);
					this.SendPropertyChanging();
					this._ViewPath = value;
					this.SendPropertyChanged("ViewPath");
					this.OnViewPathChanged();
				}
			}
		}

		[Column(Storage = "_PredicateCode", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string PredicateCode
		{
			get
			{
				return this._PredicateCode;
			}
			set
			{
				if ((this._PredicateCode != value))
				{
					this.OnPredicateCodeChanging(value);
					this.SendPropertyChanging();
					this._PredicateCode = value;
					this.SendPropertyChanged("PredicateCode");
					this.OnPredicateCodeChanged();
				}
			}
		}

		[Column(Storage = "_Comment", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}

		[Association(Name = "FK_MM_Method_FormView", Storage = "_FormView", ThisKey = "FormViewID", OtherKey = "FormViewID", IsForeignKey = true)]
		public MM_FormView FormView
		{
			get
			{
				return this._FormView.Entity;
			}
			set
			{
				MM_FormView previousValue = this._FormView.Entity;
				if (((previousValue != value)
							|| (this._FormView.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FormView.Entity = null;
						previousValue.MM_Method.Remove(this);
					}
					this._FormView.Entity = value;
					if ((value != null))
					{
						value.MM_Method.Add(this);
						this._FormViewID = value.FormViewID;
					}
					else
					{
						this._FormViewID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FormView");
				}
			}
		}

		[Association(Name = "FK_MM_Method_ObjectType", Storage = "_ObjectType", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", IsForeignKey = true)]
		public MM_ObjectType ObjectType
		{
			get
			{
				return this._ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._ObjectType.Entity;
				if (((previousValue != value)
							|| (this._ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectType.Entity = null;
						previousValue.Methods.Remove(this);
					}
					this._ObjectType.Entity = value;
					if ((value != null))
					{
						value.Methods.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(int);
					}
					this.SendPropertyChanged("ObjectType");
				}
			}
		}

		[Association(Name = "FK_MM_MethodGroupItem_MM_Method", Storage = "_MM_MethodGroupItem", ThisKey = "MethodID", OtherKey = "MethodID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_MethodGroupItem> MM_MethodGroupItem
		{
			get
			{
				return this._MM_MethodGroupItem;
			}
			set
			{
				this._MM_MethodGroupItem.Assign(value);
			}
		}

		[Association(Name = "FK_MM_MethodParameter_Method", Storage = "_MethodParameters", ThisKey = "MethodID", OtherKey = "MethodID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_MethodParameter> MethodParameters
		{
			get
			{
				return this._MethodParameters;
			}
			set
			{
				this._MethodParameters.Assign(value);
			}
		}

		[Association(Name = "FK_N_MenuItem_MM_Method", Storage = "_N_MenuItem", ThisKey = "MethodID", OtherKey = "MethodID", DeleteRule = "NO ACTION")]
		public EntitySet<N_MenuItem> N_MenuItem
		{
			get
			{
				return this._N_MenuItem;
			}
			set
			{
				this._N_MenuItem.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_MM_MethodGroupItem(MM_MethodGroupItem entity)
		{
			this.SendPropertyChanging();
			entity.MM_Method = this;
		}

		private void detach_MM_MethodGroupItem(MM_MethodGroupItem entity)
		{
			this.SendPropertyChanging();
			entity.MM_Method = null;
		}

		private void attach_MethodParameters(MM_MethodParameter entity)
		{
			this.SendPropertyChanging();
			entity.Method = this;
		}

		private void detach_MethodParameters(MM_MethodParameter entity)
		{
			this.SendPropertyChanging();
			entity.Method = null;
		}

		private void attach_N_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.MM_Method = this;
		}

		private void detach_N_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.MM_Method = null;
		}
	}

	[Table(Name = "dbo.MM_MethodGroup")]
	public partial class MM_MethodGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _MethodGroupID;

		private int _ObjectTypeID;

		private string _SysName;

		private EntityRef<MM_ObjectType> _MM_ObjectType;

		private EntitySet<MM_MethodGroupItem> _MM_MethodGroupItem;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnMethodGroupIDChanging(int value);
		partial void OnMethodGroupIDChanged();
		partial void OnObjectTypeIDChanging(int value);
		partial void OnObjectTypeIDChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		#endregion

		public MM_MethodGroup()
		{
			this._MM_ObjectType = default(EntityRef<MM_ObjectType>);
			this._MM_MethodGroupItem = new EntitySet<MM_MethodGroupItem>(new Action<MM_MethodGroupItem>(this.attach_MM_MethodGroupItem), new Action<MM_MethodGroupItem>(this.detach_MM_MethodGroupItem));
			OnCreated();
		}

		[Column(Storage = "_MethodGroupID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int MethodGroupID
		{
			get
			{
				return this._MethodGroupID;
			}
			set
			{
				if ((this._MethodGroupID != value))
				{
					this.OnMethodGroupIDChanging(value);
					this.SendPropertyChanging();
					this._MethodGroupID = value;
					this.SendPropertyChanged("MethodGroupID");
					this.OnMethodGroupIDChanged();
				}
			}
		}

		[Column(Storage = "_ObjectTypeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._MM_ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "VarChar(50) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Association(Name = "FK_MM_MethodGroup_MM_ObjectType", Storage = "_MM_ObjectType", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", IsForeignKey = true, DeleteOnNull = true)]
		public MM_ObjectType MM_ObjectType
		{
			get
			{
				return this._MM_ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._MM_ObjectType.Entity;
				if (((previousValue != value)
							|| (this._MM_ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_ObjectType.Entity = null;
						previousValue.MM_MethodGroup.Remove(this);
					}
					this._MM_ObjectType.Entity = value;
					if ((value != null))
					{
						value.MM_MethodGroup.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(int);
					}
					this.SendPropertyChanged("MM_ObjectType");
				}
			}
		}

		[Association(Name = "FK_MM_MethodGroupItem_MM_MethodGroup", Storage = "_MM_MethodGroupItem", ThisKey = "MethodGroupID", OtherKey = "MethodGroupID", DeleteRule = "CASCADE")]
		public EntitySet<MM_MethodGroupItem> MM_MethodGroupItem
		{
			get
			{
				return this._MM_MethodGroupItem;
			}
			set
			{
				this._MM_MethodGroupItem.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_MM_MethodGroupItem(MM_MethodGroupItem entity)
		{
			this.SendPropertyChanging();
			entity.MM_MethodGroup = this;
		}

		private void detach_MM_MethodGroupItem(MM_MethodGroupItem entity)
		{
			this.SendPropertyChanging();
			entity.MM_MethodGroup = null;
		}
	}

	[Table(Name = "dbo.MM_MethodGroupItem")]
	public partial class MM_MethodGroupItem : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _MethodGroupItemID;

		private int _MethodGroupID;

		private System.Nullable<int> _MethodID;

		private string _Title;

		private bool _IsSeparator;

		private System.Nullable<int> _ParentMethodGroupItemID;

		private int _SeqNo;

		private EntityRef<MM_Method> _MM_Method;

		private EntityRef<MM_MethodGroup> _MM_MethodGroup;

		private EntityRef<MM_MethodGroupItem> _ParentMethodGroupItem;

		private EntitySet<MM_MethodGroupItem> _MethodGroupItem;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnMethodGroupItemIDChanging(int value);
		partial void OnMethodGroupItemIDChanged();
		partial void OnMethodGroupIDChanging(int value);
		partial void OnMethodGroupIDChanged();
		partial void OnMethodIDChanging(System.Nullable<int> value);
		partial void OnMethodIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnIsSeparatorChanging(bool value);
		partial void OnIsSeparatorChanged();
		partial void OnParentMethodGroupItemIDChanging(System.Nullable<int> value);
		partial void OnParentMethodGroupItemIDChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		#endregion

		public MM_MethodGroupItem()
		{
			this._MM_Method = default(EntityRef<MM_Method>);
			this._MM_MethodGroup = default(EntityRef<MM_MethodGroup>);
			this._ParentMethodGroupItem = default(EntityRef<MM_MethodGroupItem>);
			this._MethodGroupItem = new EntitySet<MM_MethodGroupItem>(new Action<MM_MethodGroupItem>(this.attach_MethodGroupItem), new Action<MM_MethodGroupItem>(this.detach_MethodGroupItem));
			OnCreated();
		}

		[Column(Storage = "_MethodGroupItemID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int MethodGroupItemID
		{
			get
			{
				return this._MethodGroupItemID;
			}
			set
			{
				if ((this._MethodGroupItemID != value))
				{
					this.OnMethodGroupItemIDChanging(value);
					this.SendPropertyChanging();
					this._MethodGroupItemID = value;
					this.SendPropertyChanged("MethodGroupItemID");
					this.OnMethodGroupItemIDChanged();
				}
			}
		}

		[Column(Storage = "_MethodGroupID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int MethodGroupID
		{
			get
			{
				return this._MethodGroupID;
			}
			set
			{
				if ((this._MethodGroupID != value))
				{
					if (this._MM_MethodGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMethodGroupIDChanging(value);
					this.SendPropertyChanging();
					this._MethodGroupID = value;
					this.SendPropertyChanged("MethodGroupID");
					this.OnMethodGroupIDChanged();
				}
			}
		}

		[Column(Storage = "_MethodID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> MethodID
		{
			get
			{
				return this._MethodID;
			}
			set
			{
				if ((this._MethodID != value))
				{
					if (this._MM_Method.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMethodIDChanging(value);
					this.SendPropertyChanging();
					this._MethodID = value;
					this.SendPropertyChanged("MethodID");
					this.OnMethodIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_IsSeparator", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsSeparator
		{
			get
			{
				return this._IsSeparator;
			}
			set
			{
				if ((this._IsSeparator != value))
				{
					this.OnIsSeparatorChanging(value);
					this.SendPropertyChanging();
					this._IsSeparator = value;
					this.SendPropertyChanged("IsSeparator");
					this.OnIsSeparatorChanged();
				}
			}
		}

		[Column(Storage = "_ParentMethodGroupItemID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ParentMethodGroupItemID
		{
			get
			{
				return this._ParentMethodGroupItemID;
			}
			set
			{
				if ((this._ParentMethodGroupItemID != value))
				{
					if (this._ParentMethodGroupItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentMethodGroupItemIDChanging(value);
					this.SendPropertyChanging();
					this._ParentMethodGroupItemID = value;
					this.SendPropertyChanged("ParentMethodGroupItemID");
					this.OnParentMethodGroupItemIDChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Association(Name = "FK_MM_MethodGroupItem_MM_Method", Storage = "_MM_Method", ThisKey = "MethodID", OtherKey = "MethodID", IsForeignKey = true)]
		public MM_Method MM_Method
		{
			get
			{
				return this._MM_Method.Entity;
			}
			set
			{
				MM_Method previousValue = this._MM_Method.Entity;
				if (((previousValue != value)
							|| (this._MM_Method.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_Method.Entity = null;
						previousValue.MM_MethodGroupItem.Remove(this);
					}
					this._MM_Method.Entity = value;
					if ((value != null))
					{
						value.MM_MethodGroupItem.Add(this);
						this._MethodID = value.MethodID;
					}
					else
					{
						this._MethodID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MM_Method");
				}
			}
		}

		[Association(Name = "FK_MM_MethodGroupItem_MM_MethodGroup", Storage = "_MM_MethodGroup", ThisKey = "MethodGroupID", OtherKey = "MethodGroupID", IsForeignKey = true, DeleteOnNull = true)]
		public MM_MethodGroup MM_MethodGroup
		{
			get
			{
				return this._MM_MethodGroup.Entity;
			}
			set
			{
				MM_MethodGroup previousValue = this._MM_MethodGroup.Entity;
				if (((previousValue != value)
							|| (this._MM_MethodGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_MethodGroup.Entity = null;
						previousValue.MM_MethodGroupItem.Remove(this);
					}
					this._MM_MethodGroup.Entity = value;
					if ((value != null))
					{
						value.MM_MethodGroupItem.Add(this);
						this._MethodGroupID = value.MethodGroupID;
					}
					else
					{
						this._MethodGroupID = default(int);
					}
					this.SendPropertyChanged("MM_MethodGroup");
				}
			}
		}

		[Association(Name = "FK_MM_MethodGroupItem_ParentMethodGroupItem", Storage = "_ParentMethodGroupItem", ThisKey = "ParentMethodGroupItemID", OtherKey = "MethodGroupItemID", IsForeignKey = true)]
		public MM_MethodGroupItem ParentMethodGroupItem
		{
			get
			{
				return this._ParentMethodGroupItem.Entity;
			}
			set
			{
				MM_MethodGroupItem previousValue = this._ParentMethodGroupItem.Entity;
				if (((previousValue != value)
							|| (this._ParentMethodGroupItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentMethodGroupItem.Entity = null;
						previousValue.MethodGroupItem.Remove(this);
					}
					this._ParentMethodGroupItem.Entity = value;
					if ((value != null))
					{
						value.MethodGroupItem.Add(this);
						this._ParentMethodGroupItemID = value.MethodGroupItemID;
					}
					else
					{
						this._ParentMethodGroupItemID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ParentMethodGroupItem");
				}
			}
		}

		[Association(Name = "FK_MM_MethodGroupItem_ParentMethodGroupItem", Storage = "_MethodGroupItem", ThisKey = "MethodGroupItemID", OtherKey = "ParentMethodGroupItemID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_MethodGroupItem> MethodGroupItem
		{
			get
			{
				return this._MethodGroupItem;
			}
			set
			{
				this._MethodGroupItem.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_MethodGroupItem(MM_MethodGroupItem entity)
		{
			this.SendPropertyChanging();
			entity.ParentMethodGroupItem = this;
		}

		private void detach_MethodGroupItem(MM_MethodGroupItem entity)
		{
			this.SendPropertyChanging();
			entity.ParentMethodGroupItem = null;
		}
	}

	[Table(Name = "dbo.MM_MethodParameter")]
	public partial class MM_MethodParameter : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _MethodParameterID;

		private string _Title;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private string _SysName;

		private string _Type;

		private int _LastModifiedUserID;

		private int _MethodID;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<MM_Method> _Method;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnMethodParameterIDChanging(int value);
		partial void OnMethodParameterIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnTypeChanging(string value);
		partial void OnTypeChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnMethodIDChanging(int value);
		partial void OnMethodIDChanged();
		#endregion

		public MM_MethodParameter()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Method = default(EntityRef<MM_Method>);
			OnCreated();
		}

		[Column(Storage = "_MethodParameterID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int MethodParameterID
		{
			get
			{
				return this._MethodParameterID;
			}
			set
			{
				if ((this._MethodParameterID != value))
				{
					this.OnMethodParameterIDChanging(value);
					this.SendPropertyChanging();
					this._MethodParameterID = value;
					this.SendPropertyChanged("MethodParameterID");
					this.OnMethodParameterIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_Type", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_MethodID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int MethodID
		{
			get
			{
				return this._MethodID;
			}
			set
			{
				if ((this._MethodID != value))
				{
					if (this._Method.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMethodIDChanging(value);
					this.SendPropertyChanging();
					this._MethodID = value;
					this.SendPropertyChanged("MethodID");
					this.OnMethodIDChanged();
				}
			}
		}

		[Association(Name = "FK_MM_MethodParameter_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_MethodParameter.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_MethodParameter.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_MM_MethodParameter_Method", Storage = "_Method", ThisKey = "MethodID", OtherKey = "MethodID", IsForeignKey = true)]
		public MM_Method Method
		{
			get
			{
				return this._Method.Entity;
			}
			set
			{
				MM_Method previousValue = this._Method.Entity;
				if (((previousValue != value)
							|| (this._Method.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Method.Entity = null;
						previousValue.MethodParameters.Remove(this);
					}
					this._Method.Entity = value;
					if ((value != null))
					{
						value.MethodParameters.Add(this);
						this._MethodID = value.MethodID;
					}
					else
					{
						this._MethodID = default(int);
					}
					this.SendPropertyChanged("Method");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.MM_ObjectProperty")]
	public partial class MM_ObjectProperty : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ObjectPropertyID;

		private int _ObjectTypeID;

		private string _Title;

		private string _SysName;

		private int _SeqNo;

		private char _TypeCode;

		private System.Guid _Guid;

		private bool _IsMultilingual;

		private bool _IsPrimaryKey;

		private bool _IsSystem;

		private System.Nullable<int> _RefObjectPropertyID;

		private System.Nullable<int> _RefObjectTypeID;

		private bool _IsNavigable;

		private bool _IsAggregate;

		private int _LowerBound;

		private int _UpperBound;

		private System.Nullable<int> _CodifierID;

		private string _Expression;

		private bool _IsReferenceToVersion;

		private string _ValueFilter;

		private System.Nullable<int> _Precision;

		private System.Nullable<int> _Scale;

		private System.Nullable<int> _Length;

		private char _DeleteRule;

		private char _KindCode;

		private string _DefaultDBValue;

		private string _Description;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private EntitySet<MM_FormField> _MM_FormField;

		private EntitySet<MM_FormFieldGroup> _MM_FormFieldGroup;

		private EntityRef<MM_Codifier> _Codifier;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<MM_ObjectType> _ObjectType;

		private EntityRef<MM_ObjectProperty> _RefObjectProperty;

		private EntitySet<MM_ObjectProperty> _ObjectProperty;

		private EntityRef<MM_ObjectType> _RefObjectType;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnObjectPropertyIDChanging(int value);
		partial void OnObjectPropertyIDChanged();
		partial void OnObjectTypeIDChanging(int value);
		partial void OnObjectTypeIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnTypeCodeChanging(char value);
		partial void OnTypeCodeChanged();
		partial void OnGuidChanging(System.Guid value);
		partial void OnGuidChanged();
		partial void OnIsMultilingualChanging(bool value);
		partial void OnIsMultilingualChanged();
		partial void OnIsPrimaryKeyChanging(bool value);
		partial void OnIsPrimaryKeyChanged();
		partial void OnIsSystemChanging(bool value);
		partial void OnIsSystemChanged();
		partial void OnRefObjectPropertyIDChanging(System.Nullable<int> value);
		partial void OnRefObjectPropertyIDChanged();
		partial void OnRefObjectTypeIDChanging(System.Nullable<int> value);
		partial void OnRefObjectTypeIDChanged();
		partial void OnIsNavigableChanging(bool value);
		partial void OnIsNavigableChanged();
		partial void OnIsAggregateChanging(bool value);
		partial void OnIsAggregateChanged();
		partial void OnLowerBoundChanging(int value);
		partial void OnLowerBoundChanged();
		partial void OnUpperBoundChanging(int value);
		partial void OnUpperBoundChanged();
		partial void OnCodifierIDChanging(System.Nullable<int> value);
		partial void OnCodifierIDChanged();
		partial void OnExpressionChanging(string value);
		partial void OnExpressionChanged();
		partial void OnIsReferenceToVersionChanging(bool value);
		partial void OnIsReferenceToVersionChanged();
		partial void OnValueFilterChanging(string value);
		partial void OnValueFilterChanged();
		partial void OnPrecisionChanging(System.Nullable<int> value);
		partial void OnPrecisionChanged();
		partial void OnScaleChanging(System.Nullable<int> value);
		partial void OnScaleChanged();
		partial void OnLengthChanging(System.Nullable<int> value);
		partial void OnLengthChanged();
		partial void OnDeleteRuleChanging(char value);
		partial void OnDeleteRuleChanged();
		partial void OnKindCodeChanging(char value);
		partial void OnKindCodeChanged();
		partial void OnDefaultDBValueChanging(string value);
		partial void OnDefaultDBValueChanged();
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		#endregion

		public MM_ObjectProperty()
		{
			this._MM_FormField = new EntitySet<MM_FormField>(new Action<MM_FormField>(this.attach_MM_FormField), new Action<MM_FormField>(this.detach_MM_FormField));
			this._MM_FormFieldGroup = new EntitySet<MM_FormFieldGroup>(new Action<MM_FormFieldGroup>(this.attach_MM_FormFieldGroup), new Action<MM_FormFieldGroup>(this.detach_MM_FormFieldGroup));
			this._Codifier = default(EntityRef<MM_Codifier>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ObjectType = default(EntityRef<MM_ObjectType>);
			this._RefObjectProperty = default(EntityRef<MM_ObjectProperty>);
			this._ObjectProperty = new EntitySet<MM_ObjectProperty>(new Action<MM_ObjectProperty>(this.attach_ObjectProperty), new Action<MM_ObjectProperty>(this.detach_ObjectProperty));
			this._RefObjectType = default(EntityRef<MM_ObjectType>);
			OnCreated();
		}

		[Column(Storage = "_ObjectPropertyID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int ObjectPropertyID
		{
			get
			{
				return this._ObjectPropertyID;
			}
			set
			{
				if ((this._ObjectPropertyID != value))
				{
					this.OnObjectPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectPropertyID = value;
					this.SendPropertyChanged("ObjectPropertyID");
					this.OnObjectPropertyIDChanged();
				}
			}
		}

		[Column(Storage = "_ObjectTypeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_TypeCode", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char TypeCode
		{
			get
			{
				return this._TypeCode;
			}
			set
			{
				if ((this._TypeCode != value))
				{
					this.OnTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._TypeCode = value;
					this.SendPropertyChanged("TypeCode");
					this.OnTypeCodeChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_IsMultilingual", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsMultilingual
		{
			get
			{
				return this._IsMultilingual;
			}
			set
			{
				if ((this._IsMultilingual != value))
				{
					this.OnIsMultilingualChanging(value);
					this.SendPropertyChanging();
					this._IsMultilingual = value;
					this.SendPropertyChanged("IsMultilingual");
					this.OnIsMultilingualChanged();
				}
			}
		}

		[Column(Storage = "_IsPrimaryKey", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsPrimaryKey
		{
			get
			{
				return this._IsPrimaryKey;
			}
			set
			{
				if ((this._IsPrimaryKey != value))
				{
					this.OnIsPrimaryKeyChanging(value);
					this.SendPropertyChanging();
					this._IsPrimaryKey = value;
					this.SendPropertyChanged("IsPrimaryKey");
					this.OnIsPrimaryKeyChanged();
				}
			}
		}

		[Column(Storage = "_IsSystem", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsSystem
		{
			get
			{
				return this._IsSystem;
			}
			set
			{
				if ((this._IsSystem != value))
				{
					this.OnIsSystemChanging(value);
					this.SendPropertyChanging();
					this._IsSystem = value;
					this.SendPropertyChanged("IsSystem");
					this.OnIsSystemChanged();
				}
			}
		}

		[Column(Storage = "_RefObjectPropertyID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> RefObjectPropertyID
		{
			get
			{
				return this._RefObjectPropertyID;
			}
			set
			{
				if ((this._RefObjectPropertyID != value))
				{
					if (this._RefObjectProperty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRefObjectPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._RefObjectPropertyID = value;
					this.SendPropertyChanged("RefObjectPropertyID");
					this.OnRefObjectPropertyIDChanged();
				}
			}
		}

		[Column(Storage = "_RefObjectTypeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> RefObjectTypeID
		{
			get
			{
				return this._RefObjectTypeID;
			}
			set
			{
				if ((this._RefObjectTypeID != value))
				{
					if (this._RefObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRefObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RefObjectTypeID = value;
					this.SendPropertyChanged("RefObjectTypeID");
					this.OnRefObjectTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_IsNavigable", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsNavigable
		{
			get
			{
				return this._IsNavigable;
			}
			set
			{
				if ((this._IsNavigable != value))
				{
					this.OnIsNavigableChanging(value);
					this.SendPropertyChanging();
					this._IsNavigable = value;
					this.SendPropertyChanged("IsNavigable");
					this.OnIsNavigableChanged();
				}
			}
		}

		[Column(Storage = "_IsAggregate", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsAggregate
		{
			get
			{
				return this._IsAggregate;
			}
			set
			{
				if ((this._IsAggregate != value))
				{
					this.OnIsAggregateChanging(value);
					this.SendPropertyChanging();
					this._IsAggregate = value;
					this.SendPropertyChanged("IsAggregate");
					this.OnIsAggregateChanged();
				}
			}
		}

		[Column(Storage = "_LowerBound", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LowerBound
		{
			get
			{
				return this._LowerBound;
			}
			set
			{
				if ((this._LowerBound != value))
				{
					this.OnLowerBoundChanging(value);
					this.SendPropertyChanging();
					this._LowerBound = value;
					this.SendPropertyChanged("LowerBound");
					this.OnLowerBoundChanged();
				}
			}
		}

		[Column(Storage = "_UpperBound", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int UpperBound
		{
			get
			{
				return this._UpperBound;
			}
			set
			{
				if ((this._UpperBound != value))
				{
					this.OnUpperBoundChanging(value);
					this.SendPropertyChanging();
					this._UpperBound = value;
					this.SendPropertyChanged("UpperBound");
					this.OnUpperBoundChanged();
				}
			}
		}

		[Column(Storage = "_CodifierID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CodifierID
		{
			get
			{
				return this._CodifierID;
			}
			set
			{
				if ((this._CodifierID != value))
				{
					if (this._Codifier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodifierIDChanging(value);
					this.SendPropertyChanging();
					this._CodifierID = value;
					this.SendPropertyChanged("CodifierID");
					this.OnCodifierIDChanged();
				}
			}
		}

		[Column(Storage = "_Expression", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Expression
		{
			get
			{
				return this._Expression;
			}
			set
			{
				if ((this._Expression != value))
				{
					this.OnExpressionChanging(value);
					this.SendPropertyChanging();
					this._Expression = value;
					this.SendPropertyChanged("Expression");
					this.OnExpressionChanged();
				}
			}
		}

		[Column(Storage = "_IsReferenceToVersion", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsReferenceToVersion
		{
			get
			{
				return this._IsReferenceToVersion;
			}
			set
			{
				if ((this._IsReferenceToVersion != value))
				{
					this.OnIsReferenceToVersionChanging(value);
					this.SendPropertyChanging();
					this._IsReferenceToVersion = value;
					this.SendPropertyChanged("IsReferenceToVersion");
					this.OnIsReferenceToVersionChanged();
				}
			}
		}

		[Column(Storage = "_ValueFilter", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ValueFilter
		{
			get
			{
				return this._ValueFilter;
			}
			set
			{
				if ((this._ValueFilter != value))
				{
					this.OnValueFilterChanging(value);
					this.SendPropertyChanging();
					this._ValueFilter = value;
					this.SendPropertyChanged("ValueFilter");
					this.OnValueFilterChanged();
				}
			}
		}

		[Column(Storage = "_Precision", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> Precision
		{
			get
			{
				return this._Precision;
			}
			set
			{
				if ((this._Precision != value))
				{
					this.OnPrecisionChanging(value);
					this.SendPropertyChanging();
					this._Precision = value;
					this.SendPropertyChanged("Precision");
					this.OnPrecisionChanged();
				}
			}
		}

		[Column(Storage = "_Scale", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> Scale
		{
			get
			{
				return this._Scale;
			}
			set
			{
				if ((this._Scale != value))
				{
					this.OnScaleChanging(value);
					this.SendPropertyChanging();
					this._Scale = value;
					this.SendPropertyChanged("Scale");
					this.OnScaleChanged();
				}
			}
		}

		[Column(Storage = "_Length", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}

		[Column(Storage = "_DeleteRule", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char DeleteRule
		{
			get
			{
				return this._DeleteRule;
			}
			set
			{
				if ((this._DeleteRule != value))
				{
					this.OnDeleteRuleChanging(value);
					this.SendPropertyChanging();
					this._DeleteRule = value;
					this.SendPropertyChanged("DeleteRule");
					this.OnDeleteRuleChanged();
				}
			}
		}

		[Column(Storage = "_KindCode", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char KindCode
		{
			get
			{
				return this._KindCode;
			}
			set
			{
				if ((this._KindCode != value))
				{
					this.OnKindCodeChanging(value);
					this.SendPropertyChanging();
					this._KindCode = value;
					this.SendPropertyChanged("KindCode");
					this.OnKindCodeChanged();
				}
			}
		}

		[Column(Storage = "_DefaultDBValue", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DefaultDBValue
		{
			get
			{
				return this._DefaultDBValue;
			}
			set
			{
				if ((this._DefaultDBValue != value))
				{
					this.OnDefaultDBValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultDBValue = value;
					this.SendPropertyChanged("DefaultDBValue");
					this.OnDefaultDBValueChanged();
				}
			}
		}

		[Column(Storage = "_Description", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Association(Name = "FK_MM_FormField_ObjectProperty", Storage = "_MM_FormField", ThisKey = "ObjectPropertyID", OtherKey = "ObjectPropertyID", DeleteRule = "CASCADE")]
		public EntitySet<MM_FormField> MM_FormField
		{
			get
			{
				return this._MM_FormField;
			}
			set
			{
				this._MM_FormField.Assign(value);
			}
		}

		[Association(Name = "FK_MM_FormFieldGroup_SelectObjectProperty", Storage = "_MM_FormFieldGroup", ThisKey = "ObjectPropertyID", OtherKey = "SelectObjectPropertyID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_FormFieldGroup> MM_FormFieldGroup
		{
			get
			{
				return this._MM_FormFieldGroup;
			}
			set
			{
				this._MM_FormFieldGroup.Assign(value);
			}
		}

		[Association(Name = "FK_MM_ObjectProperty_Codifier", Storage = "_Codifier", ThisKey = "CodifierID", OtherKey = "CodifierID", IsForeignKey = true)]
		public MM_Codifier Codifier
		{
			get
			{
				return this._Codifier.Entity;
			}
			set
			{
				MM_Codifier previousValue = this._Codifier.Entity;
				if (((previousValue != value)
							|| (this._Codifier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Codifier.Entity = null;
						previousValue.MM_ObjectProperty.Remove(this);
					}
					this._Codifier.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectProperty.Add(this);
						this._CodifierID = value.CodifierID;
					}
					else
					{
						this._CodifierID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Codifier");
				}
			}
		}

		[Association(Name = "FK_MM_ObjectProperty_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_ObjectProperty.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectProperty.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_MM_ObjectProperty_ObjectType", Storage = "_ObjectType", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", IsForeignKey = true)]
		public MM_ObjectType ObjectType
		{
			get
			{
				return this._ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._ObjectType.Entity;
				if (((previousValue != value)
							|| (this._ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectType.Entity = null;
						previousValue.Properties.Remove(this);
					}
					this._ObjectType.Entity = value;
					if ((value != null))
					{
						value.Properties.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(int);
					}
					this.SendPropertyChanged("ObjectType");
				}
			}
		}

		[Association(Name = "FK_MM_ObjectProperty_RefObjectProperty", Storage = "_RefObjectProperty", ThisKey = "RefObjectPropertyID", OtherKey = "ObjectPropertyID", IsForeignKey = true)]
		public MM_ObjectProperty RefObjectProperty
		{
			get
			{
				return this._RefObjectProperty.Entity;
			}
			set
			{
				MM_ObjectProperty previousValue = this._RefObjectProperty.Entity;
				if (((previousValue != value)
							|| (this._RefObjectProperty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefObjectProperty.Entity = null;
						previousValue.ObjectProperty.Remove(this);
					}
					this._RefObjectProperty.Entity = value;
					if ((value != null))
					{
						value.ObjectProperty.Add(this);
						this._RefObjectPropertyID = value.ObjectPropertyID;
					}
					else
					{
						this._RefObjectPropertyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RefObjectProperty");
				}
			}
		}

		[Association(Name = "FK_MM_ObjectProperty_RefObjectProperty", Storage = "_ObjectProperty", ThisKey = "ObjectPropertyID", OtherKey = "RefObjectPropertyID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_ObjectProperty> ObjectProperty
		{
			get
			{
				return this._ObjectProperty;
			}
			set
			{
				this._ObjectProperty.Assign(value);
			}
		}

		[Association(Name = "FK_MM_ObjectProperty_RefObjectType", Storage = "_RefObjectType", ThisKey = "RefObjectTypeID", OtherKey = "ObjectTypeID", IsForeignKey = true)]
		public MM_ObjectType RefObjectType
		{
			get
			{
				return this._RefObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._RefObjectType.Entity;
				if (((previousValue != value)
							|| (this._RefObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefObjectType.Entity = null;
						previousValue.ObjectType.Remove(this);
					}
					this._RefObjectType.Entity = value;
					if ((value != null))
					{
						value.ObjectType.Add(this);
						this._RefObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._RefObjectTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RefObjectType");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_MM_FormField(MM_FormField entity)
		{
			this.SendPropertyChanging();
			entity.ObjectProperty = this;
		}

		private void detach_MM_FormField(MM_FormField entity)
		{
			this.SendPropertyChanging();
			entity.ObjectProperty = null;
		}

		private void attach_MM_FormFieldGroup(MM_FormFieldGroup entity)
		{
			this.SendPropertyChanging();
			entity.SelectObjectProperty = this;
		}

		private void detach_MM_FormFieldGroup(MM_FormFieldGroup entity)
		{
			this.SendPropertyChanging();
			entity.SelectObjectProperty = null;
		}

		private void attach_ObjectProperty(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.RefObjectProperty = this;
		}

		private void detach_ObjectProperty(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.RefObjectProperty = null;
		}
	}

	[Table(Name = "dbo.MM_ObjectType")]
	public partial class MM_ObjectType : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ObjectTypeID;

		private string _Title;

		private string _SysName;

		private bool _IsEnableSPM;

		private int _PackageID;

		private System.Guid _Guid;

		private bool _IsSeparateTable;

		private bool _IsTemplate;

		private string _TitlePlural;

		private System.Nullable<int> _BaseObjectTypeID;

		private string _DefaultOrderBy;

		private string _LogicalDelete;

		private bool _IsReplicate;

		private bool _IsEnableUserViews;

		private string _SecurityPackageSystemName;

		private bool _IsEnableObjectHistory;

		private string _Interface;

		private char _HistoryTypeCode;

		private bool _IsDataReplicated;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private int _SeqNo;

		private string _Description;

		private EntitySet<HST_MM_FormView> _HST_MM_FormView;

		private EntitySet<MM_DataValidation> _MM_DataValidation;

		private EntitySet<MM_FormFieldGroup> _FormFieldGroups;

		private EntitySet<MM_FormView> _FormViews;

		private EntitySet<MM_Method> _Methods;

		private EntitySet<MM_MethodGroup> _MM_MethodGroup;

		private EntitySet<MM_ObjectProperty> _Properties;

		private EntitySet<MM_ObjectProperty> _ObjectType;

		private EntityRef<MM_ObjectType> _BaseObjectType;

		private EntitySet<MM_ObjectType> _MM_ObjectType_BaseObjectType;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<MM_Package> _Package;

		private EntitySet<MM_ObjectTypeStereotypes> _MM_ObjectTypeStereotypes;

		private EntitySet<MM_ObjectTypeStereotypes> _MM_ObjectTypeStereotypes_Stereotypes;

		private EntitySet<MM_Predicate> _DataValidations;

		private EntityRef<MMA_SiteInfoobjects> _MMA_SiteInfoobjects;

		private EntityRef<MMS_ChangeLog> _MMS_ChangeLog;

		private EntityRef<MMS_ClassStereotype> _MMS_ClassStereotype;

		private EntityRef<MMS_Replication> _MMS_Replication;

		private EntityRef<MMS_Versioning> _MMS_Versioning;

		private EntityRef<SiteInfoobjects> _SiteInfoobjects;

		private EntitySet<WF_Workflow> _WF_Workflow;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnObjectTypeIDChanging(int value);
		partial void OnObjectTypeIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnIsEnableSPMChanging(bool value);
		partial void OnIsEnableSPMChanged();
		partial void OnPackageIDChanging(int value);
		partial void OnPackageIDChanged();
		partial void OnGuidChanging(System.Guid value);
		partial void OnGuidChanged();
		partial void OnIsSeparateTableChanging(bool value);
		partial void OnIsSeparateTableChanged();
		partial void OnIsTemplateChanging(bool value);
		partial void OnIsTemplateChanged();
		partial void OnTitlePluralChanging(string value);
		partial void OnTitlePluralChanged();
		partial void OnBaseObjectTypeIDChanging(System.Nullable<int> value);
		partial void OnBaseObjectTypeIDChanged();
		partial void OnDefaultOrderByChanging(string value);
		partial void OnDefaultOrderByChanged();
		partial void OnLogicalDeleteChanging(string value);
		partial void OnLogicalDeleteChanged();
		partial void OnIsReplicateChanging(bool value);
		partial void OnIsReplicateChanged();
		partial void OnIsEnableUserViewsChanging(bool value);
		partial void OnIsEnableUserViewsChanged();
		partial void OnSecurityPackageSystemNameChanging(string value);
		partial void OnSecurityPackageSystemNameChanged();
		partial void OnIsEnableObjectHistoryChanging(bool value);
		partial void OnIsEnableObjectHistoryChanged();
		partial void OnInterfaceChanging(string value);
		partial void OnInterfaceChanged();
		partial void OnHistoryTypeCodeChanging(char value);
		partial void OnHistoryTypeCodeChanged();
		partial void OnIsDataReplicatedChanging(bool value);
		partial void OnIsDataReplicatedChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		#endregion

		public MM_ObjectType()
		{
			this._HST_MM_FormView = new EntitySet<HST_MM_FormView>(new Action<HST_MM_FormView>(this.attach_HST_MM_FormView), new Action<HST_MM_FormView>(this.detach_HST_MM_FormView));
			this._MM_DataValidation = new EntitySet<MM_DataValidation>(new Action<MM_DataValidation>(this.attach_MM_DataValidation), new Action<MM_DataValidation>(this.detach_MM_DataValidation));
			this._FormFieldGroups = new EntitySet<MM_FormFieldGroup>(new Action<MM_FormFieldGroup>(this.attach_FormFieldGroups), new Action<MM_FormFieldGroup>(this.detach_FormFieldGroups));
			this._FormViews = new EntitySet<MM_FormView>(new Action<MM_FormView>(this.attach_FormViews), new Action<MM_FormView>(this.detach_FormViews));
			this._Methods = new EntitySet<MM_Method>(new Action<MM_Method>(this.attach_Methods), new Action<MM_Method>(this.detach_Methods));
			this._MM_MethodGroup = new EntitySet<MM_MethodGroup>(new Action<MM_MethodGroup>(this.attach_MM_MethodGroup), new Action<MM_MethodGroup>(this.detach_MM_MethodGroup));
			this._Properties = new EntitySet<MM_ObjectProperty>(new Action<MM_ObjectProperty>(this.attach_Properties), new Action<MM_ObjectProperty>(this.detach_Properties));
			this._ObjectType = new EntitySet<MM_ObjectProperty>(new Action<MM_ObjectProperty>(this.attach_ObjectType), new Action<MM_ObjectProperty>(this.detach_ObjectType));
			this._BaseObjectType = default(EntityRef<MM_ObjectType>);
			this._MM_ObjectType_BaseObjectType = new EntitySet<MM_ObjectType>(new Action<MM_ObjectType>(this.attach_MM_ObjectType_BaseObjectType), new Action<MM_ObjectType>(this.detach_MM_ObjectType_BaseObjectType));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Package = default(EntityRef<MM_Package>);
			this._MM_ObjectTypeStereotypes = new EntitySet<MM_ObjectTypeStereotypes>(new Action<MM_ObjectTypeStereotypes>(this.attach_MM_ObjectTypeStereotypes), new Action<MM_ObjectTypeStereotypes>(this.detach_MM_ObjectTypeStereotypes));
			this._MM_ObjectTypeStereotypes_Stereotypes = new EntitySet<MM_ObjectTypeStereotypes>(new Action<MM_ObjectTypeStereotypes>(this.attach_MM_ObjectTypeStereotypes_Stereotypes), new Action<MM_ObjectTypeStereotypes>(this.detach_MM_ObjectTypeStereotypes_Stereotypes));
			this._DataValidations = new EntitySet<MM_Predicate>(new Action<MM_Predicate>(this.attach_DataValidations), new Action<MM_Predicate>(this.detach_DataValidations));
			this._MMA_SiteInfoobjects = default(EntityRef<MMA_SiteInfoobjects>);
			this._MMS_ChangeLog = default(EntityRef<MMS_ChangeLog>);
			this._MMS_ClassStereotype = default(EntityRef<MMS_ClassStereotype>);
			this._MMS_Replication = default(EntityRef<MMS_Replication>);
			this._MMS_Versioning = default(EntityRef<MMS_Versioning>);
			this._SiteInfoobjects = default(EntityRef<SiteInfoobjects>);
			this._WF_Workflow = new EntitySet<WF_Workflow>(new Action<WF_Workflow>(this.attach_WF_Workflow), new Action<WF_Workflow>(this.detach_WF_Workflow));
			OnCreated();
		}

		[Column(Storage = "_ObjectTypeID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_IsEnableSPM", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsEnableSPM
		{
			get
			{
				return this._IsEnableSPM;
			}
			set
			{
				if ((this._IsEnableSPM != value))
				{
					this.OnIsEnableSPMChanging(value);
					this.SendPropertyChanging();
					this._IsEnableSPM = value;
					this.SendPropertyChanged("IsEnableSPM");
					this.OnIsEnableSPMChanged();
				}
			}
		}

		[Column(Storage = "_PackageID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_IsSeparateTable", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsSeparateTable
		{
			get
			{
				return this._IsSeparateTable;
			}
			set
			{
				if ((this._IsSeparateTable != value))
				{
					this.OnIsSeparateTableChanging(value);
					this.SendPropertyChanging();
					this._IsSeparateTable = value;
					this.SendPropertyChanged("IsSeparateTable");
					this.OnIsSeparateTableChanged();
				}
			}
		}

		[Column(Storage = "_IsTemplate", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsTemplate
		{
			get
			{
				return this._IsTemplate;
			}
			set
			{
				if ((this._IsTemplate != value))
				{
					this.OnIsTemplateChanging(value);
					this.SendPropertyChanging();
					this._IsTemplate = value;
					this.SendPropertyChanged("IsTemplate");
					this.OnIsTemplateChanged();
				}
			}
		}

		[Column(Storage = "_TitlePlural", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string TitlePlural
		{
			get
			{
				return this._TitlePlural;
			}
			set
			{
				if ((this._TitlePlural != value))
				{
					this.OnTitlePluralChanging(value);
					this.SendPropertyChanging();
					this._TitlePlural = value;
					this.SendPropertyChanged("TitlePlural");
					this.OnTitlePluralChanged();
				}
			}
		}

		[Column(Storage = "_BaseObjectTypeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> BaseObjectTypeID
		{
			get
			{
				return this._BaseObjectTypeID;
			}
			set
			{
				if ((this._BaseObjectTypeID != value))
				{
					if (this._BaseObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BaseObjectTypeID = value;
					this.SendPropertyChanged("BaseObjectTypeID");
					this.OnBaseObjectTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_DefaultOrderBy", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DefaultOrderBy
		{
			get
			{
				return this._DefaultOrderBy;
			}
			set
			{
				if ((this._DefaultOrderBy != value))
				{
					this.OnDefaultOrderByChanging(value);
					this.SendPropertyChanging();
					this._DefaultOrderBy = value;
					this.SendPropertyChanged("DefaultOrderBy");
					this.OnDefaultOrderByChanged();
				}
			}
		}

		[Column(Storage = "_LogicalDelete", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string LogicalDelete
		{
			get
			{
				return this._LogicalDelete;
			}
			set
			{
				if ((this._LogicalDelete != value))
				{
					this.OnLogicalDeleteChanging(value);
					this.SendPropertyChanging();
					this._LogicalDelete = value;
					this.SendPropertyChanged("LogicalDelete");
					this.OnLogicalDeleteChanged();
				}
			}
		}

		[Column(Storage = "_IsReplicate", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsReplicate
		{
			get
			{
				return this._IsReplicate;
			}
			set
			{
				if ((this._IsReplicate != value))
				{
					this.OnIsReplicateChanging(value);
					this.SendPropertyChanging();
					this._IsReplicate = value;
					this.SendPropertyChanged("IsReplicate");
					this.OnIsReplicateChanged();
				}
			}
		}

		[Column(Storage = "_IsEnableUserViews", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsEnableUserViews
		{
			get
			{
				return this._IsEnableUserViews;
			}
			set
			{
				if ((this._IsEnableUserViews != value))
				{
					this.OnIsEnableUserViewsChanging(value);
					this.SendPropertyChanging();
					this._IsEnableUserViews = value;
					this.SendPropertyChanged("IsEnableUserViews");
					this.OnIsEnableUserViewsChanged();
				}
			}
		}

		[Column(Storage = "_SecurityPackageSystemName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SecurityPackageSystemName
		{
			get
			{
				return this._SecurityPackageSystemName;
			}
			set
			{
				if ((this._SecurityPackageSystemName != value))
				{
					this.OnSecurityPackageSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SecurityPackageSystemName = value;
					this.SendPropertyChanged("SecurityPackageSystemName");
					this.OnSecurityPackageSystemNameChanged();
				}
			}
		}

		[Column(Storage = "_IsEnableObjectHistory", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsEnableObjectHistory
		{
			get
			{
				return this._IsEnableObjectHistory;
			}
			set
			{
				if ((this._IsEnableObjectHistory != value))
				{
					this.OnIsEnableObjectHistoryChanging(value);
					this.SendPropertyChanging();
					this._IsEnableObjectHistory = value;
					this.SendPropertyChanged("IsEnableObjectHistory");
					this.OnIsEnableObjectHistoryChanged();
				}
			}
		}

		[Column(Storage = "_Interface", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Interface
		{
			get
			{
				return this._Interface;
			}
			set
			{
				if ((this._Interface != value))
				{
					this.OnInterfaceChanging(value);
					this.SendPropertyChanging();
					this._Interface = value;
					this.SendPropertyChanged("Interface");
					this.OnInterfaceChanged();
				}
			}
		}

		[Column(Storage = "_HistoryTypeCode", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char HistoryTypeCode
		{
			get
			{
				return this._HistoryTypeCode;
			}
			set
			{
				if ((this._HistoryTypeCode != value))
				{
					this.OnHistoryTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._HistoryTypeCode = value;
					this.SendPropertyChanged("HistoryTypeCode");
					this.OnHistoryTypeCodeChanged();
				}
			}
		}

		[Column(Storage = "_IsDataReplicated", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDataReplicated
		{
			get
			{
				return this._IsDataReplicated;
			}
			set
			{
				if ((this._IsDataReplicated != value))
				{
					this.OnIsDataReplicatedChanging(value);
					this.SendPropertyChanging();
					this._IsDataReplicated = value;
					this.SendPropertyChanged("IsDataReplicated");
					this.OnIsDataReplicatedChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_Description", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}

		[Association(Name = "FK_HST_MM_FormView_ObjectType", Storage = "_HST_MM_FormView", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<HST_MM_FormView> HST_MM_FormView
		{
			get
			{
				return this._HST_MM_FormView;
			}
			set
			{
				this._HST_MM_FormView.Assign(value);
			}
		}

		[Association(Name = "FK_MM_DataValidation_ObjectType", Storage = "_MM_DataValidation", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_DataValidation> MM_DataValidation
		{
			get
			{
				return this._MM_DataValidation;
			}
			set
			{
				this._MM_DataValidation.Assign(value);
			}
		}

		[Association(Name = "FK_MM_FormFieldGroup_ObjectType", Storage = "_FormFieldGroups", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_FormFieldGroup> FormFieldGroups
		{
			get
			{
				return this._FormFieldGroups;
			}
			set
			{
				this._FormFieldGroups.Assign(value);
			}
		}

		[Association(Name = "FK_MM_FormView_ObjectType", Storage = "_FormViews", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_FormView> FormViews
		{
			get
			{
				return this._FormViews;
			}
			set
			{
				this._FormViews.Assign(value);
			}
		}

		[Association(Name = "FK_MM_Method_ObjectType", Storage = "_Methods", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_Method> Methods
		{
			get
			{
				return this._Methods;
			}
			set
			{
				this._Methods.Assign(value);
			}
		}

		[Association(Name = "FK_MM_MethodGroup_MM_ObjectType", Storage = "_MM_MethodGroup", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", DeleteRule = "CASCADE")]
		public EntitySet<MM_MethodGroup> MM_MethodGroup
		{
			get
			{
				return this._MM_MethodGroup;
			}
			set
			{
				this._MM_MethodGroup.Assign(value);
			}
		}

		[Association(Name = "FK_MM_ObjectProperty_ObjectType", Storage = "_Properties", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_ObjectProperty> Properties
		{
			get
			{
				return this._Properties;
			}
			set
			{
				this._Properties.Assign(value);
			}
		}

		[Association(Name = "FK_MM_ObjectProperty_RefObjectType", Storage = "_ObjectType", ThisKey = "ObjectTypeID", OtherKey = "RefObjectTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_ObjectProperty> ObjectType
		{
			get
			{
				return this._ObjectType;
			}
			set
			{
				this._ObjectType.Assign(value);
			}
		}

		[Association(Name = "FK_MM_ObjectType_BaseObjectType", Storage = "_BaseObjectType", ThisKey = "BaseObjectTypeID", OtherKey = "ObjectTypeID", IsForeignKey = true)]
		public MM_ObjectType BaseObjectType
		{
			get
			{
				return this._BaseObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._BaseObjectType.Entity;
				if (((previousValue != value)
							|| (this._BaseObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseObjectType.Entity = null;
						previousValue.MM_ObjectType_BaseObjectType.Remove(this);
					}
					this._BaseObjectType.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectType_BaseObjectType.Add(this);
						this._BaseObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._BaseObjectTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BaseObjectType");
				}
			}
		}

		[Association(Name = "FK_MM_ObjectType_BaseObjectType", Storage = "_MM_ObjectType_BaseObjectType", ThisKey = "ObjectTypeID", OtherKey = "BaseObjectTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_ObjectType> MM_ObjectType_BaseObjectType
		{
			get
			{
				return this._MM_ObjectType_BaseObjectType;
			}
			set
			{
				this._MM_ObjectType_BaseObjectType.Assign(value);
			}
		}

		[Association(Name = "FK_MM_ObjectType_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_ObjectType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_MM_ObjectType_Package", Storage = "_Package", ThisKey = "PackageID", OtherKey = "PackageID", IsForeignKey = true)]
		public MM_Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				MM_Package previousValue = this._Package.Entity;
				if (((previousValue != value)
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.ObjectTypes.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.ObjectTypes.Add(this);
						this._PackageID = value.PackageID;
					}
					else
					{
						this._PackageID = default(int);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}

		[Association(Name = "FK_MM_ObjectTypeStereotypes_MM_ObjectType", Storage = "_MM_ObjectTypeStereotypes", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", DeleteRule = "CASCADE")]
		public EntitySet<MM_ObjectTypeStereotypes> MM_ObjectTypeStereotypes
		{
			get
			{
				return this._MM_ObjectTypeStereotypes;
			}
			set
			{
				this._MM_ObjectTypeStereotypes.Assign(value);
			}
		}

		[Association(Name = "FK_MM_ObjectTypeStereotypes_Stereotypes", Storage = "_MM_ObjectTypeStereotypes_Stereotypes", ThisKey = "ObjectTypeID", OtherKey = "StereotypesID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_ObjectTypeStereotypes> MM_ObjectTypeStereotypes_Stereotypes
		{
			get
			{
				return this._MM_ObjectTypeStereotypes_Stereotypes;
			}
			set
			{
				this._MM_ObjectTypeStereotypes_Stereotypes.Assign(value);
			}
		}

		[Association(Name = "FK_MM_Predicate_ObjectType", Storage = "_DataValidations", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_Predicate> DataValidations
		{
			get
			{
				return this._DataValidations;
			}
			set
			{
				this._DataValidations.Assign(value);
			}
		}

		[Association(Name = "FK_MMA_SiteInfoobjects_MM_ObjectType", Storage = "_MMA_SiteInfoobjects", ThisKey = "ObjectTypeID", OtherKey = "SiteInfoobjectsID", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
		public MMA_SiteInfoobjects MMA_SiteInfoobjects
		{
			get
			{
				return this._MMA_SiteInfoobjects.Entity;
			}
			set
			{
				MMA_SiteInfoobjects previousValue = this._MMA_SiteInfoobjects.Entity;
				if (((previousValue != value)
							|| (this._MMA_SiteInfoobjects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MMA_SiteInfoobjects.Entity = null;
						previousValue.MM_ObjectType = null;
					}
					this._MMA_SiteInfoobjects.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectType = this;
					}
					this.SendPropertyChanged("MMA_SiteInfoobjects");
				}
			}
		}

		[Association(Name = "FK_MMS_ChangeLog_MM_ObjectType", Storage = "_MMS_ChangeLog", ThisKey = "ObjectTypeID", OtherKey = "ChangeLogID", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
		public MMS_ChangeLog MMS_ChangeLog
		{
			get
			{
				return this._MMS_ChangeLog.Entity;
			}
			set
			{
				MMS_ChangeLog previousValue = this._MMS_ChangeLog.Entity;
				if (((previousValue != value)
							|| (this._MMS_ChangeLog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MMS_ChangeLog.Entity = null;
						previousValue.MM_ObjectType = null;
					}
					this._MMS_ChangeLog.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectType = this;
					}
					this.SendPropertyChanged("MMS_ChangeLog");
				}
			}
		}

		[Association(Name = "FK_MMS_ClassStereotype_MM_ObjectType", Storage = "_MMS_ClassStereotype", ThisKey = "ObjectTypeID", OtherKey = "ClassStereotypeID", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
		public MMS_ClassStereotype MMS_ClassStereotype
		{
			get
			{
				return this._MMS_ClassStereotype.Entity;
			}
			set
			{
				MMS_ClassStereotype previousValue = this._MMS_ClassStereotype.Entity;
				if (((previousValue != value)
							|| (this._MMS_ClassStereotype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MMS_ClassStereotype.Entity = null;
						previousValue.MM_ObjectType = null;
					}
					this._MMS_ClassStereotype.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectType = this;
					}
					this.SendPropertyChanged("MMS_ClassStereotype");
				}
			}
		}

		[Association(Name = "FK_MMS_Replication_MM_ObjectType", Storage = "_MMS_Replication", ThisKey = "ObjectTypeID", OtherKey = "ReplicationID", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
		public MMS_Replication MMS_Replication
		{
			get
			{
				return this._MMS_Replication.Entity;
			}
			set
			{
				MMS_Replication previousValue = this._MMS_Replication.Entity;
				if (((previousValue != value)
							|| (this._MMS_Replication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MMS_Replication.Entity = null;
						previousValue.MM_ObjectType = null;
					}
					this._MMS_Replication.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectType = this;
					}
					this.SendPropertyChanged("MMS_Replication");
				}
			}
		}

		[Association(Name = "FK_MMS_Versioning_MM_ObjectType", Storage = "_MMS_Versioning", ThisKey = "ObjectTypeID", OtherKey = "VersioningID", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
		public MMS_Versioning MMS_Versioning
		{
			get
			{
				return this._MMS_Versioning.Entity;
			}
			set
			{
				MMS_Versioning previousValue = this._MMS_Versioning.Entity;
				if (((previousValue != value)
							|| (this._MMS_Versioning.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MMS_Versioning.Entity = null;
						previousValue.MM_ObjectType = null;
					}
					this._MMS_Versioning.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectType = this;
					}
					this.SendPropertyChanged("MMS_Versioning");
				}
			}
		}

		[Association(Name = "FK_SiteInfoobjects_MM_ObjectType", Storage = "_SiteInfoobjects", ThisKey = "ObjectTypeID", OtherKey = "SiteInfoobjectsID", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
		public SiteInfoobjects SiteInfoobjects
		{
			get
			{
				return this._SiteInfoobjects.Entity;
			}
			set
			{
				SiteInfoobjects previousValue = this._SiteInfoobjects.Entity;
				if (((previousValue != value)
							|| (this._SiteInfoobjects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SiteInfoobjects.Entity = null;
						previousValue.MM_ObjectType = null;
					}
					this._SiteInfoobjects.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectType = this;
					}
					this.SendPropertyChanged("SiteInfoobjects");
				}
			}
		}

		[Association(Name = "FK_WF_Workflow_ObjectType", Storage = "_WF_Workflow", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<WF_Workflow> WF_Workflow
		{
			get
			{
				return this._WF_Workflow;
			}
			set
			{
				this._WF_Workflow.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_HST_MM_FormView(HST_MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = this;
		}

		private void detach_HST_MM_FormView(HST_MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = null;
		}

		private void attach_MM_DataValidation(MM_DataValidation entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = this;
		}

		private void detach_MM_DataValidation(MM_DataValidation entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = null;
		}

		private void attach_FormFieldGroups(MM_FormFieldGroup entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = this;
		}

		private void detach_FormFieldGroups(MM_FormFieldGroup entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = null;
		}

		private void attach_FormViews(MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = this;
		}

		private void detach_FormViews(MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = null;
		}

		private void attach_Methods(MM_Method entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = this;
		}

		private void detach_Methods(MM_Method entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = null;
		}

		private void attach_MM_MethodGroup(MM_MethodGroup entity)
		{
			this.SendPropertyChanging();
			entity.MM_ObjectType = this;
		}

		private void detach_MM_MethodGroup(MM_MethodGroup entity)
		{
			this.SendPropertyChanging();
			entity.MM_ObjectType = null;
		}

		private void attach_Properties(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = this;
		}

		private void detach_Properties(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = null;
		}

		private void attach_ObjectType(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.RefObjectType = this;
		}

		private void detach_ObjectType(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.RefObjectType = null;
		}

		private void attach_MM_ObjectType_BaseObjectType(MM_ObjectType entity)
		{
			this.SendPropertyChanging();
			entity.BaseObjectType = this;
		}

		private void detach_MM_ObjectType_BaseObjectType(MM_ObjectType entity)
		{
			this.SendPropertyChanging();
			entity.BaseObjectType = null;
		}

		private void attach_MM_ObjectTypeStereotypes(MM_ObjectTypeStereotypes entity)
		{
			this.SendPropertyChanging();
			entity.MM_ObjectType = this;
		}

		private void detach_MM_ObjectTypeStereotypes(MM_ObjectTypeStereotypes entity)
		{
			this.SendPropertyChanging();
			entity.MM_ObjectType = null;
		}

		private void attach_MM_ObjectTypeStereotypes_Stereotypes(MM_ObjectTypeStereotypes entity)
		{
			this.SendPropertyChanging();
			entity.Stereotypes = this;
		}

		private void detach_MM_ObjectTypeStereotypes_Stereotypes(MM_ObjectTypeStereotypes entity)
		{
			this.SendPropertyChanging();
			entity.Stereotypes = null;
		}

		private void attach_DataValidations(MM_Predicate entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = this;
		}

		private void detach_DataValidations(MM_Predicate entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = null;
		}

		private void attach_WF_Workflow(WF_Workflow entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = this;
		}

		private void detach_WF_Workflow(WF_Workflow entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = null;
		}
	}

	[Table(Name = "dbo.MM_ObjectTypeStereotypes")]
	public partial class MM_ObjectTypeStereotypes : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ObjectTypeID;

		private int _StereotypesID;

		private EntityRef<MM_ObjectType> _MM_ObjectType;

		private EntityRef<MM_ObjectType> _Stereotypes;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnObjectTypeIDChanging(int value);
		partial void OnObjectTypeIDChanged();
		partial void OnStereotypesIDChanging(int value);
		partial void OnStereotypesIDChanged();
		#endregion

		public MM_ObjectTypeStereotypes()
		{
			this._MM_ObjectType = default(EntityRef<MM_ObjectType>);
			this._Stereotypes = default(EntityRef<MM_ObjectType>);
			OnCreated();
		}

		[Column(Storage = "_ObjectTypeID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._MM_ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_StereotypesID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int StereotypesID
		{
			get
			{
				return this._StereotypesID;
			}
			set
			{
				if ((this._StereotypesID != value))
				{
					if (this._Stereotypes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStereotypesIDChanging(value);
					this.SendPropertyChanging();
					this._StereotypesID = value;
					this.SendPropertyChanged("StereotypesID");
					this.OnStereotypesIDChanged();
				}
			}
		}

		[Association(Name = "FK_MM_ObjectTypeStereotypes_MM_ObjectType", Storage = "_MM_ObjectType", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", IsForeignKey = true, DeleteOnNull = true)]
		public MM_ObjectType MM_ObjectType
		{
			get
			{
				return this._MM_ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._MM_ObjectType.Entity;
				if (((previousValue != value)
							|| (this._MM_ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_ObjectType.Entity = null;
						previousValue.MM_ObjectTypeStereotypes.Remove(this);
					}
					this._MM_ObjectType.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectTypeStereotypes.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(int);
					}
					this.SendPropertyChanged("MM_ObjectType");
				}
			}
		}

		[Association(Name = "FK_MM_ObjectTypeStereotypes_Stereotypes", Storage = "_Stereotypes", ThisKey = "StereotypesID", OtherKey = "ObjectTypeID", IsForeignKey = true)]
		public MM_ObjectType Stereotypes
		{
			get
			{
				return this._Stereotypes.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._Stereotypes.Entity;
				if (((previousValue != value)
							|| (this._Stereotypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stereotypes.Entity = null;
						previousValue.MM_ObjectTypeStereotypes_Stereotypes.Remove(this);
					}
					this._Stereotypes.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectTypeStereotypes_Stereotypes.Add(this);
						this._StereotypesID = value.ObjectTypeID;
					}
					else
					{
						this._StereotypesID = default(int);
					}
					this.SendPropertyChanged("Stereotypes");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.MM_Package")]
	public partial class MM_Package : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _PackageID;

		private string _Title;

		private string _SysName;

		private System.Nullable<int> _ParentPackageID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.Guid _Guid;

		private bool _IsDataReplicated;

		private int _SeqNo;

		private string _Version;

		private EntitySet<HST_MM_FormView> _HST_MM_FormView;

		private EntitySet<MM_Codifier> _Codifiers;

		private EntitySet<MM_FormView> _MM_FormView;

		private EntitySet<MM_ObjectType> _ObjectTypes;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<MM_Package> _ParentPackage;

		private EntitySet<MM_Package> _ChildPackages;

		private EntitySet<SPM_Action> _SPM_Action;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnPackageIDChanging(int value);
		partial void OnPackageIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnParentPackageIDChanging(System.Nullable<int> value);
		partial void OnParentPackageIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnGuidChanging(System.Guid value);
		partial void OnGuidChanged();
		partial void OnIsDataReplicatedChanging(bool value);
		partial void OnIsDataReplicatedChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnVersionChanging(string value);
		partial void OnVersionChanged();
		#endregion

		public MM_Package()
		{
			this._HST_MM_FormView = new EntitySet<HST_MM_FormView>(new Action<HST_MM_FormView>(this.attach_HST_MM_FormView), new Action<HST_MM_FormView>(this.detach_HST_MM_FormView));
			this._Codifiers = new EntitySet<MM_Codifier>(new Action<MM_Codifier>(this.attach_Codifiers), new Action<MM_Codifier>(this.detach_Codifiers));
			this._MM_FormView = new EntitySet<MM_FormView>(new Action<MM_FormView>(this.attach_MM_FormView), new Action<MM_FormView>(this.detach_MM_FormView));
			this._ObjectTypes = new EntitySet<MM_ObjectType>(new Action<MM_ObjectType>(this.attach_ObjectTypes), new Action<MM_ObjectType>(this.detach_ObjectTypes));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ParentPackage = default(EntityRef<MM_Package>);
			this._ChildPackages = new EntitySet<MM_Package>(new Action<MM_Package>(this.attach_ChildPackages), new Action<MM_Package>(this.detach_ChildPackages));
			this._SPM_Action = new EntitySet<SPM_Action>(new Action<SPM_Action>(this.attach_SPM_Action), new Action<SPM_Action>(this.detach_SPM_Action));
			OnCreated();
		}

		[Column(Storage = "_PackageID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_ParentPackageID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ParentPackageID
		{
			get
			{
				return this._ParentPackageID;
			}
			set
			{
				if ((this._ParentPackageID != value))
				{
					if (this._ParentPackage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentPackageIDChanging(value);
					this.SendPropertyChanging();
					this._ParentPackageID = value;
					this.SendPropertyChanged("ParentPackageID");
					this.OnParentPackageIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_IsDataReplicated", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDataReplicated
		{
			get
			{
				return this._IsDataReplicated;
			}
			set
			{
				if ((this._IsDataReplicated != value))
				{
					this.OnIsDataReplicatedChanging(value);
					this.SendPropertyChanging();
					this._IsDataReplicated = value;
					this.SendPropertyChanged("IsDataReplicated");
					this.OnIsDataReplicatedChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_Version", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}

		[Association(Name = "FK_HST_MM_FormView_Package", Storage = "_HST_MM_FormView", ThisKey = "PackageID", OtherKey = "PackageID", DeleteRule = "NO ACTION")]
		public EntitySet<HST_MM_FormView> HST_MM_FormView
		{
			get
			{
				return this._HST_MM_FormView;
			}
			set
			{
				this._HST_MM_FormView.Assign(value);
			}
		}

		[Association(Name = "FK_MM_Codifier_Package", Storage = "_Codifiers", ThisKey = "PackageID", OtherKey = "PackageID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_Codifier> Codifiers
		{
			get
			{
				return this._Codifiers;
			}
			set
			{
				this._Codifiers.Assign(value);
			}
		}

		[Association(Name = "FK_MM_FormView_Package", Storage = "_MM_FormView", ThisKey = "PackageID", OtherKey = "PackageID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_FormView> MM_FormView
		{
			get
			{
				return this._MM_FormView;
			}
			set
			{
				this._MM_FormView.Assign(value);
			}
		}

		[Association(Name = "FK_MM_ObjectType_Package", Storage = "_ObjectTypes", ThisKey = "PackageID", OtherKey = "PackageID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_ObjectType> ObjectTypes
		{
			get
			{
				return this._ObjectTypes;
			}
			set
			{
				this._ObjectTypes.Assign(value);
			}
		}

		[Association(Name = "FK_MM_Package_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_Package.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_Package.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_MM_Package_ParentPackage", Storage = "_ParentPackage", ThisKey = "ParentPackageID", OtherKey = "PackageID", IsForeignKey = true)]
		public MM_Package ParentPackage
		{
			get
			{
				return this._ParentPackage.Entity;
			}
			set
			{
				MM_Package previousValue = this._ParentPackage.Entity;
				if (((previousValue != value)
							|| (this._ParentPackage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentPackage.Entity = null;
						previousValue.ChildPackages.Remove(this);
					}
					this._ParentPackage.Entity = value;
					if ((value != null))
					{
						value.ChildPackages.Add(this);
						this._ParentPackageID = value.PackageID;
					}
					else
					{
						this._ParentPackageID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ParentPackage");
				}
			}
		}

		[Association(Name = "FK_MM_Package_ParentPackage", Storage = "_ChildPackages", ThisKey = "PackageID", OtherKey = "ParentPackageID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_Package> ChildPackages
		{
			get
			{
				return this._ChildPackages;
			}
			set
			{
				this._ChildPackages.Assign(value);
			}
		}

		[Association(Name = "FK_SPM_Action_Package", Storage = "_SPM_Action", ThisKey = "PackageID", OtherKey = "PackageID", DeleteRule = "NO ACTION")]
		public EntitySet<SPM_Action> SPM_Action
		{
			get
			{
				return this._SPM_Action;
			}
			set
			{
				this._SPM_Action.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_HST_MM_FormView(HST_MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}

		private void detach_HST_MM_FormView(HST_MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}

		private void attach_Codifiers(MM_Codifier entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}

		private void detach_Codifiers(MM_Codifier entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}

		private void attach_MM_FormView(MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}

		private void detach_MM_FormView(MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}

		private void attach_ObjectTypes(MM_ObjectType entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}

		private void detach_ObjectTypes(MM_ObjectType entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}

		private void attach_ChildPackages(MM_Package entity)
		{
			this.SendPropertyChanging();
			entity.ParentPackage = this;
		}

		private void detach_ChildPackages(MM_Package entity)
		{
			this.SendPropertyChanging();
			entity.ParentPackage = null;
		}

		private void attach_SPM_Action(SPM_Action entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}

		private void detach_SPM_Action(SPM_Action entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}
	}

	[Table(Name = "dbo.MM_Predicate")]
	public partial class MM_Predicate : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _PredicateGUID;

		private string _Body;

		private string _DesignerData;

		private string _Message;

		private int _ObjectTypeID;

		private string _Title;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private char _Type;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<MM_ObjectType> _ObjectType;

		private EntitySet<SPM_Action> _SPM_Action;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnPredicateGUIDChanging(System.Guid value);
		partial void OnPredicateGUIDChanged();
		partial void OnBodyChanging(string value);
		partial void OnBodyChanged();
		partial void OnDesignerDataChanging(string value);
		partial void OnDesignerDataChanged();
		partial void OnMessageChanging(string value);
		partial void OnMessageChanged();
		partial void OnObjectTypeIDChanging(int value);
		partial void OnObjectTypeIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTypeChanging(char value);
		partial void OnTypeChanged();
		#endregion

		public MM_Predicate()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ObjectType = default(EntityRef<MM_ObjectType>);
			this._SPM_Action = new EntitySet<SPM_Action>(new Action<SPM_Action>(this.attach_SPM_Action), new Action<SPM_Action>(this.detach_SPM_Action));
			OnCreated();
		}

		[Column(Storage = "_PredicateGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid PredicateGUID
		{
			get
			{
				return this._PredicateGUID;
			}
			set
			{
				if ((this._PredicateGUID != value))
				{
					this.OnPredicateGUIDChanging(value);
					this.SendPropertyChanging();
					this._PredicateGUID = value;
					this.SendPropertyChanged("PredicateGUID");
					this.OnPredicateGUIDChanged();
				}
			}
		}

		[Column(Storage = "_Body", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}

		[Column(Storage = "_DesignerData", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DesignerData
		{
			get
			{
				return this._DesignerData;
			}
			set
			{
				if ((this._DesignerData != value))
				{
					this.OnDesignerDataChanging(value);
					this.SendPropertyChanging();
					this._DesignerData = value;
					this.SendPropertyChanged("DesignerData");
					this.OnDesignerDataChanged();
				}
			}
		}

		[Column(Storage = "_Message", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}

		[Column(Storage = "_ObjectTypeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Type", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}

		[Association(Name = "FK_MM_Predicate_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_Predicate.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_Predicate.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_MM_Predicate_ObjectType", Storage = "_ObjectType", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", IsForeignKey = true)]
		public MM_ObjectType ObjectType
		{
			get
			{
				return this._ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._ObjectType.Entity;
				if (((previousValue != value)
							|| (this._ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectType.Entity = null;
						previousValue.DataValidations.Remove(this);
					}
					this._ObjectType.Entity = value;
					if ((value != null))
					{
						value.DataValidations.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(int);
					}
					this.SendPropertyChanged("ObjectType");
				}
			}
		}

		[Association(Name = "FK_SPM_Action_Predicate", Storage = "_SPM_Action", ThisKey = "PredicateGUID", OtherKey = "PredicateGUID", DeleteRule = "NO ACTION")]
		public EntitySet<SPM_Action> SPM_Action
		{
			get
			{
				return this._SPM_Action;
			}
			set
			{
				this._SPM_Action.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_SPM_Action(SPM_Action entity)
		{
			this.SendPropertyChanging();
			entity.Predicate = this;
		}

		private void detach_SPM_Action(SPM_Action entity)
		{
			this.SendPropertyChanging();
			entity.Predicate = null;
		}
	}

	[Table(Name = "dbo.MM_TaggedValueType")]
	public partial class MM_TaggedValueType : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _TaggedValueTypeID;

		private string _Title;

		private string _SysName;

		private char _TypeCode;

		private char _ElementTypeCode;

		private int _GroupID;

		private System.Guid _Guid;

		private int _ControlName;

		private int _SeqNo;

		private EntityRef<MM_Group> _MM_Group;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnTaggedValueTypeIDChanging(int value);
		partial void OnTaggedValueTypeIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnTypeCodeChanging(char value);
		partial void OnTypeCodeChanged();
		partial void OnElementTypeCodeChanging(char value);
		partial void OnElementTypeCodeChanged();
		partial void OnGroupIDChanging(int value);
		partial void OnGroupIDChanged();
		partial void OnGuidChanging(System.Guid value);
		partial void OnGuidChanged();
		partial void OnControlNameChanging(int value);
		partial void OnControlNameChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		#endregion

		public MM_TaggedValueType()
		{
			this._MM_Group = default(EntityRef<MM_Group>);
			OnCreated();
		}

		[Column(Storage = "_TaggedValueTypeID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int TaggedValueTypeID
		{
			get
			{
				return this._TaggedValueTypeID;
			}
			set
			{
				if ((this._TaggedValueTypeID != value))
				{
					this.OnTaggedValueTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TaggedValueTypeID = value;
					this.SendPropertyChanged("TaggedValueTypeID");
					this.OnTaggedValueTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_TypeCode", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char TypeCode
		{
			get
			{
				return this._TypeCode;
			}
			set
			{
				if ((this._TypeCode != value))
				{
					this.OnTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._TypeCode = value;
					this.SendPropertyChanged("TypeCode");
					this.OnTypeCodeChanged();
				}
			}
		}

		[Column(Storage = "_ElementTypeCode", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char ElementTypeCode
		{
			get
			{
				return this._ElementTypeCode;
			}
			set
			{
				if ((this._ElementTypeCode != value))
				{
					this.OnElementTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._ElementTypeCode = value;
					this.SendPropertyChanged("ElementTypeCode");
					this.OnElementTypeCodeChanged();
				}
			}
		}

		[Column(Storage = "_GroupID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._MM_Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_ControlName", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ControlName
		{
			get
			{
				return this._ControlName;
			}
			set
			{
				if ((this._ControlName != value))
				{
					this.OnControlNameChanging(value);
					this.SendPropertyChanging();
					this._ControlName = value;
					this.SendPropertyChanged("ControlName");
					this.OnControlNameChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Association(Name = "FK_MM_TaggedValueType_MM_Group", Storage = "_MM_Group", ThisKey = "GroupID", OtherKey = "GroupID", IsForeignKey = true, DeleteOnNull = true)]
		public MM_Group MM_Group
		{
			get
			{
				return this._MM_Group.Entity;
			}
			set
			{
				MM_Group previousValue = this._MM_Group.Entity;
				if (((previousValue != value)
							|| (this._MM_Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_Group.Entity = null;
						previousValue.MM_TaggedValueType.Remove(this);
					}
					this._MM_Group.Entity = value;
					if ((value != null))
					{
						value.MM_TaggedValueType.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("MM_Group");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.MMA_SiteInfoobjects")]
	public partial class MMA_SiteInfoobjects : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SiteInfoobjectsID;

		private bool _IsFolder;

		private bool _IsRoot;

		private EntityRef<MM_ObjectType> _MM_ObjectType;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSiteInfoobjectsIDChanging(int value);
		partial void OnSiteInfoobjectsIDChanged();
		partial void OnIsFolderChanging(bool value);
		partial void OnIsFolderChanged();
		partial void OnIsRootChanging(bool value);
		partial void OnIsRootChanged();
		#endregion

		public MMA_SiteInfoobjects()
		{
			this._MM_ObjectType = default(EntityRef<MM_ObjectType>);
			OnCreated();
		}

		[Column(Storage = "_SiteInfoobjectsID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int SiteInfoobjectsID
		{
			get
			{
				return this._SiteInfoobjectsID;
			}
			set
			{
				if ((this._SiteInfoobjectsID != value))
				{
					if (this._MM_ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteInfoobjectsIDChanging(value);
					this.SendPropertyChanging();
					this._SiteInfoobjectsID = value;
					this.SendPropertyChanged("SiteInfoobjectsID");
					this.OnSiteInfoobjectsIDChanged();
				}
			}
		}

		[Column(Storage = "_IsFolder", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsFolder
		{
			get
			{
				return this._IsFolder;
			}
			set
			{
				if ((this._IsFolder != value))
				{
					this.OnIsFolderChanging(value);
					this.SendPropertyChanging();
					this._IsFolder = value;
					this.SendPropertyChanged("IsFolder");
					this.OnIsFolderChanged();
				}
			}
		}

		[Column(Storage = "_IsRoot", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsRoot
		{
			get
			{
				return this._IsRoot;
			}
			set
			{
				if ((this._IsRoot != value))
				{
					this.OnIsRootChanging(value);
					this.SendPropertyChanging();
					this._IsRoot = value;
					this.SendPropertyChanged("IsRoot");
					this.OnIsRootChanged();
				}
			}
		}

		[Association(Name = "FK_MMA_SiteInfoobjects_MM_ObjectType", Storage = "_MM_ObjectType", ThisKey = "SiteInfoobjectsID", OtherKey = "ObjectTypeID", IsForeignKey = true, DeleteOnNull = true)]
		public MM_ObjectType MM_ObjectType
		{
			get
			{
				return this._MM_ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._MM_ObjectType.Entity;
				if (((previousValue != value)
							|| (this._MM_ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_ObjectType.Entity = null;
						previousValue.MMA_SiteInfoobjects = null;
					}
					this._MM_ObjectType.Entity = value;
					if ((value != null))
					{
						value.MMA_SiteInfoobjects = this;
						this._SiteInfoobjectsID = value.ObjectTypeID;
					}
					else
					{
						this._SiteInfoobjectsID = default(int);
					}
					this.SendPropertyChanged("MM_ObjectType");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.MMS_ChangeLog")]
	public partial class MMS_ChangeLog : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ChangeLogID;

		private EntityRef<MM_ObjectType> _MM_ObjectType;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnChangeLogIDChanging(int value);
		partial void OnChangeLogIDChanged();
		#endregion

		public MMS_ChangeLog()
		{
			this._MM_ObjectType = default(EntityRef<MM_ObjectType>);
			OnCreated();
		}

		[Column(Storage = "_ChangeLogID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int ChangeLogID
		{
			get
			{
				return this._ChangeLogID;
			}
			set
			{
				if ((this._ChangeLogID != value))
				{
					if (this._MM_ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChangeLogIDChanging(value);
					this.SendPropertyChanging();
					this._ChangeLogID = value;
					this.SendPropertyChanged("ChangeLogID");
					this.OnChangeLogIDChanged();
				}
			}
		}

		[Association(Name = "FK_MMS_ChangeLog_MM_ObjectType", Storage = "_MM_ObjectType", ThisKey = "ChangeLogID", OtherKey = "ObjectTypeID", IsForeignKey = true, DeleteOnNull = true)]
		public MM_ObjectType MM_ObjectType
		{
			get
			{
				return this._MM_ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._MM_ObjectType.Entity;
				if (((previousValue != value)
							|| (this._MM_ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_ObjectType.Entity = null;
						previousValue.MMS_ChangeLog = null;
					}
					this._MM_ObjectType.Entity = value;
					if ((value != null))
					{
						value.MMS_ChangeLog = this;
						this._ChangeLogID = value.ObjectTypeID;
					}
					else
					{
						this._ChangeLogID = default(int);
					}
					this.SendPropertyChanged("MM_ObjectType");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.MMS_ClassStereotype")]
	public partial class MMS_ClassStereotype : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ClassStereotypeID;

		private EntityRef<MM_ObjectType> _MM_ObjectType;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnClassStereotypeIDChanging(int value);
		partial void OnClassStereotypeIDChanged();
		#endregion

		public MMS_ClassStereotype()
		{
			this._MM_ObjectType = default(EntityRef<MM_ObjectType>);
			OnCreated();
		}

		[Column(Storage = "_ClassStereotypeID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int ClassStereotypeID
		{
			get
			{
				return this._ClassStereotypeID;
			}
			set
			{
				if ((this._ClassStereotypeID != value))
				{
					if (this._MM_ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassStereotypeIDChanging(value);
					this.SendPropertyChanging();
					this._ClassStereotypeID = value;
					this.SendPropertyChanged("ClassStereotypeID");
					this.OnClassStereotypeIDChanged();
				}
			}
		}

		[Association(Name = "FK_MMS_ClassStereotype_MM_ObjectType", Storage = "_MM_ObjectType", ThisKey = "ClassStereotypeID", OtherKey = "ObjectTypeID", IsForeignKey = true, DeleteOnNull = true)]
		public MM_ObjectType MM_ObjectType
		{
			get
			{
				return this._MM_ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._MM_ObjectType.Entity;
				if (((previousValue != value)
							|| (this._MM_ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_ObjectType.Entity = null;
						previousValue.MMS_ClassStereotype = null;
					}
					this._MM_ObjectType.Entity = value;
					if ((value != null))
					{
						value.MMS_ClassStereotype = this;
						this._ClassStereotypeID = value.ObjectTypeID;
					}
					else
					{
						this._ClassStereotypeID = default(int);
					}
					this.SendPropertyChanged("MM_ObjectType");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.MMS_Replication")]
	public partial class MMS_Replication : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ReplicationID;

		private EntityRef<MM_ObjectType> _MM_ObjectType;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnReplicationIDChanging(int value);
		partial void OnReplicationIDChanged();
		#endregion

		public MMS_Replication()
		{
			this._MM_ObjectType = default(EntityRef<MM_ObjectType>);
			OnCreated();
		}

		[Column(Storage = "_ReplicationID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int ReplicationID
		{
			get
			{
				return this._ReplicationID;
			}
			set
			{
				if ((this._ReplicationID != value))
				{
					if (this._MM_ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ReplicationID = value;
					this.SendPropertyChanged("ReplicationID");
					this.OnReplicationIDChanged();
				}
			}
		}

		[Association(Name = "FK_MMS_Replication_MM_ObjectType", Storage = "_MM_ObjectType", ThisKey = "ReplicationID", OtherKey = "ObjectTypeID", IsForeignKey = true, DeleteOnNull = true)]
		public MM_ObjectType MM_ObjectType
		{
			get
			{
				return this._MM_ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._MM_ObjectType.Entity;
				if (((previousValue != value)
							|| (this._MM_ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_ObjectType.Entity = null;
						previousValue.MMS_Replication = null;
					}
					this._MM_ObjectType.Entity = value;
					if ((value != null))
					{
						value.MMS_Replication = this;
						this._ReplicationID = value.ObjectTypeID;
					}
					else
					{
						this._ReplicationID = default(int);
					}
					this.SendPropertyChanged("MM_ObjectType");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.MMS_Versioning")]
	public partial class MMS_Versioning : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _VersioningID;

		private char _Type;

		private EntityRef<MM_ObjectType> _MM_ObjectType;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnVersioningIDChanging(int value);
		partial void OnVersioningIDChanged();
		partial void OnTypeChanging(char value);
		partial void OnTypeChanged();
		#endregion

		public MMS_Versioning()
		{
			this._MM_ObjectType = default(EntityRef<MM_ObjectType>);
			OnCreated();
		}

		[Column(Storage = "_VersioningID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int VersioningID
		{
			get
			{
				return this._VersioningID;
			}
			set
			{
				if ((this._VersioningID != value))
				{
					if (this._MM_ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVersioningIDChanging(value);
					this.SendPropertyChanging();
					this._VersioningID = value;
					this.SendPropertyChanged("VersioningID");
					this.OnVersioningIDChanged();
				}
			}
		}

		[Column(Storage = "_Type", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}

		[Association(Name = "FK_MMS_Versioning_MM_ObjectType", Storage = "_MM_ObjectType", ThisKey = "VersioningID", OtherKey = "ObjectTypeID", IsForeignKey = true, DeleteOnNull = true)]
		public MM_ObjectType MM_ObjectType
		{
			get
			{
				return this._MM_ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._MM_ObjectType.Entity;
				if (((previousValue != value)
							|| (this._MM_ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_ObjectType.Entity = null;
						previousValue.MMS_Versioning = null;
					}
					this._MM_ObjectType.Entity = value;
					if ((value != null))
					{
						value.MMS_Versioning = this;
						this._VersioningID = value.ObjectTypeID;
					}
					else
					{
						this._VersioningID = default(int);
					}
					this.SendPropertyChanged("MM_ObjectType");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.N_Cache")]
	public partial class N_Cache : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.DateTime _TimeStamp;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnTimeStampChanging(System.DateTime value);
		partial void OnTimeStampChanged();
		#endregion

		public N_Cache()
		{
			OnCreated();
		}

		[Column(Storage = "_TimeStamp", DbType = "DateTime NOT NULL", IsPrimaryKey = true)]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.N_DDL")]
	public partial class N_DDL : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _DDLID;

		private string _Title;

		private System.DateTime _LastModifiedDate;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnDDLIDChanging(int value);
		partial void OnDDLIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		#endregion

		public N_DDL()
		{
			OnCreated();
		}

		[Column(Storage = "_DDLID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int DDLID
		{
			get
			{
				return this._DDLID;
			}
			set
			{
				if ((this._DDLID != value))
				{
					this.OnDDLIDChanging(value);
					this.SendPropertyChanging();
					this._DDLID = value;
					this.SendPropertyChanged("DDLID");
					this.OnDDLIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.N_DownloadLog")]
	public partial class N_DownloadLog : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _DownloadLogID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private int _FileID;

		private string _IP;

		private EntityRef<N_File> _File;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnDownloadLogIDChanging(int value);
		partial void OnDownloadLogIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnFileIDChanging(int value);
		partial void OnFileIDChanged();
		partial void OnIPChanging(string value);
		partial void OnIPChanged();
		#endregion

		public N_DownloadLog()
		{
			this._File = default(EntityRef<N_File>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_DownloadLogID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int DownloadLogID
		{
			get
			{
				return this._DownloadLogID;
			}
			set
			{
				if ((this._DownloadLogID != value))
				{
					this.OnDownloadLogIDChanging(value);
					this.SendPropertyChanging();
					this._DownloadLogID = value;
					this.SendPropertyChanged("DownloadLogID");
					this.OnDownloadLogIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_FileID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					if (this._File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}

		[Column(Storage = "_IP", DbType = "NVarChar(50)", UpdateCheck = UpdateCheck.Never)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}

		[Association(Name = "FK_N_DownloadLog_File", Storage = "_File", ThisKey = "FileID", OtherKey = "FileID", IsForeignKey = true, DeleteOnNull = true)]
		public N_File File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				N_File previousValue = this._File.Entity;
				if (((previousValue != value)
							|| (this._File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File.Entity = null;
						previousValue.N_DownloadLog.Remove(this);
					}
					this._File.Entity = value;
					if ((value != null))
					{
						value.N_DownloadLog.Add(this);
						this._FileID = value.FileID;
					}
					else
					{
						this._FileID = default(int);
					}
					this.SendPropertyChanged("File");
				}
			}
		}

		[Association(Name = "FK_N_DownloadLog_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.N_DownloadLog.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.N_DownloadLog.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.N_File")]
	public partial class N_File : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FileID;

		private long _Length;

		private string _Title;

		private System.Guid _Guid;

		private bool _IsDiskStorage;

		private string _Extension;

		private string _Path;

		private System.DateTime _LastModifiedDate;

		private System.Nullable<int> _FolderID;

		private int _LastModifiedUserID;

		private char _StorageType;

		private string _StorageParameter;

		private string _GuidPath;

		private System.Nullable<System.Guid> _FeatureGUID;

		private System.Nullable<int> _CheckedOutByID;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private int _VersionNumber;

		private System.Nullable<System.Guid> _MainGUID;

		private string _Tag;

		private int _CreatorID;

		private string _Password;

		private System.Nullable<System.DateTime> _PublishDate;

		private bool _IsDeleted;

		private System.Data.Linq.Binary _DataHash;

		private EntitySet<Article> _Article;

		private EntitySet<Article> _File;

		private EntitySet<Article> _Article_File3;

		private EntitySet<Article> _Article_File4;

		private EntitySet<Article> _Article_File5;

		private EntitySet<Article> _Article_Image;

		private EntitySet<C_FGADocument> _C_FGADocument;

		private EntitySet<C_FGADocumentSigner> _C_FGADocumentSigner;

		private EntitySet<CommodityDocument> _CommodityDocument;

		private EntitySet<Document> _Document;

		private EntitySet<DocumentData> _DocumentData;

		private EntitySet<Employee> _Employee;

		private EntitySet<Employee> _Employee_StampSample;

		private EntitySet<N_DownloadLog> _N_DownloadLog;

		private EntityRef<SPM_Subject> _CheckedOutBy;

		private EntityRef<SPM_Subject> _Creator;

		private EntityRef<N_Folder> _Folder;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<N_FileListItem> _N_FileListItem;

		private EntitySet<News> _News;

		private EntitySet<PaymentOrder> _PaymentOrder;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFileIDChanging(int value);
		partial void OnFileIDChanged();
		partial void OnLengthChanging(long value);
		partial void OnLengthChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnGuidChanging(System.Guid value);
		partial void OnGuidChanged();
		partial void OnIsDiskStorageChanging(bool value);
		partial void OnIsDiskStorageChanged();
		partial void OnExtensionChanging(string value);
		partial void OnExtensionChanged();
		partial void OnPathChanging(string value);
		partial void OnPathChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnFolderIDChanging(System.Nullable<int> value);
		partial void OnFolderIDChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnStorageTypeChanging(char value);
		partial void OnStorageTypeChanged();
		partial void OnStorageParameterChanging(string value);
		partial void OnStorageParameterChanged();
		partial void OnGuidPathChanging(string value);
		partial void OnGuidPathChanged();
		partial void OnFeatureGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnFeatureGUIDChanged();
		partial void OnCheckedOutByIDChanging(System.Nullable<int> value);
		partial void OnCheckedOutByIDChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnVersionNumberChanging(int value);
		partial void OnVersionNumberChanged();
		partial void OnMainGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnMainGUIDChanged();
		partial void OnTagChanging(string value);
		partial void OnTagChanged();
		partial void OnCreatorIDChanging(int value);
		partial void OnCreatorIDChanged();
		partial void OnPasswordChanging(string value);
		partial void OnPasswordChanged();
		partial void OnPublishDateChanging(System.Nullable<System.DateTime> value);
		partial void OnPublishDateChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnDataHashChanging(System.Data.Linq.Binary value);
		partial void OnDataHashChanged();
		#endregion

		public N_File()
		{
			this._Article = new EntitySet<Article>(new Action<Article>(this.attach_Article), new Action<Article>(this.detach_Article));
			this._File = new EntitySet<Article>(new Action<Article>(this.attach_File), new Action<Article>(this.detach_File));
			this._Article_File3 = new EntitySet<Article>(new Action<Article>(this.attach_Article_File3), new Action<Article>(this.detach_Article_File3));
			this._Article_File4 = new EntitySet<Article>(new Action<Article>(this.attach_Article_File4), new Action<Article>(this.detach_Article_File4));
			this._Article_File5 = new EntitySet<Article>(new Action<Article>(this.attach_Article_File5), new Action<Article>(this.detach_Article_File5));
			this._Article_Image = new EntitySet<Article>(new Action<Article>(this.attach_Article_Image), new Action<Article>(this.detach_Article_Image));
			this._C_FGADocument = new EntitySet<C_FGADocument>(new Action<C_FGADocument>(this.attach_C_FGADocument), new Action<C_FGADocument>(this.detach_C_FGADocument));
			this._C_FGADocumentSigner = new EntitySet<C_FGADocumentSigner>(new Action<C_FGADocumentSigner>(this.attach_C_FGADocumentSigner), new Action<C_FGADocumentSigner>(this.detach_C_FGADocumentSigner));
			this._CommodityDocument = new EntitySet<CommodityDocument>(new Action<CommodityDocument>(this.attach_CommodityDocument), new Action<CommodityDocument>(this.detach_CommodityDocument));
			this._Document = new EntitySet<Document>(new Action<Document>(this.attach_Document), new Action<Document>(this.detach_Document));
			this._DocumentData = new EntitySet<DocumentData>(new Action<DocumentData>(this.attach_DocumentData), new Action<DocumentData>(this.detach_DocumentData));
			this._Employee = new EntitySet<Employee>(new Action<Employee>(this.attach_Employee), new Action<Employee>(this.detach_Employee));
			this._Employee_StampSample = new EntitySet<Employee>(new Action<Employee>(this.attach_Employee_StampSample), new Action<Employee>(this.detach_Employee_StampSample));
			this._N_DownloadLog = new EntitySet<N_DownloadLog>(new Action<N_DownloadLog>(this.attach_N_DownloadLog), new Action<N_DownloadLog>(this.detach_N_DownloadLog));
			this._CheckedOutBy = default(EntityRef<SPM_Subject>);
			this._Creator = default(EntityRef<SPM_Subject>);
			this._Folder = default(EntityRef<N_Folder>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._N_FileListItem = new EntitySet<N_FileListItem>(new Action<N_FileListItem>(this.attach_N_FileListItem), new Action<N_FileListItem>(this.detach_N_FileListItem));
			this._News = new EntitySet<News>(new Action<News>(this.attach_News), new Action<News>(this.detach_News));
			this._PaymentOrder = new EntitySet<PaymentOrder>(new Action<PaymentOrder>(this.attach_PaymentOrder), new Action<PaymentOrder>(this.detach_PaymentOrder));
			OnCreated();
		}

		[Column(Storage = "_FileID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}

		[Column(Storage = "_Length", DbType = "BigInt NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public long Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_IsDiskStorage", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDiskStorage
		{
			get
			{
				return this._IsDiskStorage;
			}
			set
			{
				if ((this._IsDiskStorage != value))
				{
					this.OnIsDiskStorageChanging(value);
					this.SendPropertyChanging();
					this._IsDiskStorage = value;
					this.SendPropertyChanged("IsDiskStorage");
					this.OnIsDiskStorageChanged();
				}
			}
		}

		[Column(Storage = "_Extension", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this.OnExtensionChanging(value);
					this.SendPropertyChanging();
					this._Extension = value;
					this.SendPropertyChanged("Extension");
					this.OnExtensionChanged();
				}
			}
		}

		[Column(Storage = "_Path", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_FolderID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> FolderID
		{
			get
			{
				return this._FolderID;
			}
			set
			{
				if ((this._FolderID != value))
				{
					if (this._Folder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFolderIDChanging(value);
					this.SendPropertyChanging();
					this._FolderID = value;
					this.SendPropertyChanged("FolderID");
					this.OnFolderIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_StorageType", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char StorageType
		{
			get
			{
				return this._StorageType;
			}
			set
			{
				if ((this._StorageType != value))
				{
					this.OnStorageTypeChanging(value);
					this.SendPropertyChanging();
					this._StorageType = value;
					this.SendPropertyChanged("StorageType");
					this.OnStorageTypeChanged();
				}
			}
		}

		[Column(Storage = "_StorageParameter", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string StorageParameter
		{
			get
			{
				return this._StorageParameter;
			}
			set
			{
				if ((this._StorageParameter != value))
				{
					this.OnStorageParameterChanging(value);
					this.SendPropertyChanging();
					this._StorageParameter = value;
					this.SendPropertyChanged("StorageParameter");
					this.OnStorageParameterChanged();
				}
			}
		}

		[Column(Storage = "_GuidPath", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string GuidPath
		{
			get
			{
				return this._GuidPath;
			}
			set
			{
				if ((this._GuidPath != value))
				{
					this.OnGuidPathChanging(value);
					this.SendPropertyChanging();
					this._GuidPath = value;
					this.SendPropertyChanged("GuidPath");
					this.OnGuidPathChanged();
				}
			}
		}

		[Column(Storage = "_FeatureGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> FeatureGUID
		{
			get
			{
				return this._FeatureGUID;
			}
			set
			{
				if ((this._FeatureGUID != value))
				{
					this.OnFeatureGUIDChanging(value);
					this.SendPropertyChanging();
					this._FeatureGUID = value;
					this.SendPropertyChanged("FeatureGUID");
					this.OnFeatureGUIDChanged();
				}
			}
		}

		[Column(Storage = "_CheckedOutByID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CheckedOutByID
		{
			get
			{
				return this._CheckedOutByID;
			}
			set
			{
				if ((this._CheckedOutByID != value))
				{
					if (this._CheckedOutBy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCheckedOutByIDChanging(value);
					this.SendPropertyChanging();
					this._CheckedOutByID = value;
					this.SendPropertyChanged("CheckedOutByID");
					this.OnCheckedOutByIDChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_VersionNumber", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int VersionNumber
		{
			get
			{
				return this._VersionNumber;
			}
			set
			{
				if ((this._VersionNumber != value))
				{
					this.OnVersionNumberChanging(value);
					this.SendPropertyChanging();
					this._VersionNumber = value;
					this.SendPropertyChanged("VersionNumber");
					this.OnVersionNumberChanged();
				}
			}
		}

		[Column(Storage = "_MainGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> MainGUID
		{
			get
			{
				return this._MainGUID;
			}
			set
			{
				if ((this._MainGUID != value))
				{
					this.OnMainGUIDChanging(value);
					this.SendPropertyChanging();
					this._MainGUID = value;
					this.SendPropertyChanged("MainGUID");
					this.OnMainGUIDChanged();
				}
			}
		}

		[Column(Storage = "_Tag", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}

		[Column(Storage = "_CreatorID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					if (this._Creator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorID = value;
					this.SendPropertyChanged("CreatorID");
					this.OnCreatorIDChanged();
				}
			}
		}

		[Column(Storage = "_Password", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}

		[Column(Storage = "_PublishDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_DataHash", DbType = "Binary(16)", CanBeNull = true, UpdateCheck = UpdateCheck.Never)]
		public System.Data.Linq.Binary DataHash
		{
			get
			{
				return this._DataHash;
			}
			set
			{
				if ((this._DataHash != value))
				{
					this.OnDataHashChanging(value);
					this.SendPropertyChanging();
					this._DataHash = value;
					this.SendPropertyChanged("DataHash");
					this.OnDataHashChanged();
				}
			}
		}

		[Association(Name = "FK_Article_File1", Storage = "_Article", ThisKey = "FileID", OtherKey = "File1FileID", DeleteRule = "NO ACTION")]
		public EntitySet<Article> Article
		{
			get
			{
				return this._Article;
			}
			set
			{
				this._Article.Assign(value);
			}
		}

		[Association(Name = "FK_Article_File2", Storage = "_File", ThisKey = "FileID", OtherKey = "File2FileID", DeleteRule = "NO ACTION")]
		public EntitySet<Article> File
		{
			get
			{
				return this._File;
			}
			set
			{
				this._File.Assign(value);
			}
		}

		[Association(Name = "FK_Article_File3", Storage = "_Article_File3", ThisKey = "FileID", OtherKey = "File3FileID", DeleteRule = "NO ACTION")]
		public EntitySet<Article> Article_File3
		{
			get
			{
				return this._Article_File3;
			}
			set
			{
				this._Article_File3.Assign(value);
			}
		}

		[Association(Name = "FK_Article_File4", Storage = "_Article_File4", ThisKey = "FileID", OtherKey = "File4FileID", DeleteRule = "NO ACTION")]
		public EntitySet<Article> Article_File4
		{
			get
			{
				return this._Article_File4;
			}
			set
			{
				this._Article_File4.Assign(value);
			}
		}

		[Association(Name = "FK_Article_File5", Storage = "_Article_File5", ThisKey = "FileID", OtherKey = "File5FileID", DeleteRule = "NO ACTION")]
		public EntitySet<Article> Article_File5
		{
			get
			{
				return this._Article_File5;
			}
			set
			{
				this._Article_File5.Assign(value);
			}
		}

		[Association(Name = "FK_Article_Image", Storage = "_Article_Image", ThisKey = "FileID", OtherKey = "ImageFileID", DeleteRule = "NO ACTION")]
		public EntitySet<Article> Article_Image
		{
			get
			{
				return this._Article_Image;
			}
			set
			{
				this._Article_Image.Assign(value);
			}
		}

		[Association(Name = "FK_C_FGADocument_Document", Storage = "_C_FGADocument", ThisKey = "FileID", OtherKey = "DocumentFileID", DeleteRule = "NO ACTION")]
		public EntitySet<C_FGADocument> C_FGADocument
		{
			get
			{
				return this._C_FGADocument;
			}
			set
			{
				this._C_FGADocument.Assign(value);
			}
		}

		[Association(Name = "FK_C_FGADocumentSigner_Signature", Storage = "_C_FGADocumentSigner", ThisKey = "FileID", OtherKey = "SignatureFileID", DeleteRule = "NO ACTION")]
		public EntitySet<C_FGADocumentSigner> C_FGADocumentSigner
		{
			get
			{
				return this._C_FGADocumentSigner;
			}
			set
			{
				this._C_FGADocumentSigner.Assign(value);
			}
		}

		[Association(Name = "FK_CommodityDocument_File", Storage = "_CommodityDocument", ThisKey = "FileID", OtherKey = "FileFileID", DeleteRule = "NO ACTION")]
		public EntitySet<CommodityDocument> CommodityDocument
		{
			get
			{
				return this._CommodityDocument;
			}
			set
			{
				this._CommodityDocument.Assign(value);
			}
		}

		[Association(Name = "FK_Document_File", Storage = "_Document", ThisKey = "FileID", OtherKey = "FileFileID", DeleteRule = "NO ACTION")]
		public EntitySet<Document> Document
		{
			get
			{
				return this._Document;
			}
			set
			{
				this._Document.Assign(value);
			}
		}

		[Association(Name = "FK_DocumentData_File", Storage = "_DocumentData", ThisKey = "FileID", OtherKey = "FileFileID", DeleteRule = "NO ACTION")]
		public EntitySet<DocumentData> DocumentData
		{
			get
			{
				return this._DocumentData;
			}
			set
			{
				this._DocumentData.Assign(value);
			}
		}

		[Association(Name = "FK_Employee_SignSample", Storage = "_Employee", ThisKey = "FileID", OtherKey = "SignSampleFileID", DeleteRule = "NO ACTION")]
		public EntitySet<Employee> Employee
		{
			get
			{
				return this._Employee;
			}
			set
			{
				this._Employee.Assign(value);
			}
		}

		[Association(Name = "FK_Employee_StampSample", Storage = "_Employee_StampSample", ThisKey = "FileID", OtherKey = "StampSampleFileID", DeleteRule = "NO ACTION")]
		public EntitySet<Employee> Employee_StampSample
		{
			get
			{
				return this._Employee_StampSample;
			}
			set
			{
				this._Employee_StampSample.Assign(value);
			}
		}

		[Association(Name = "FK_N_DownloadLog_File", Storage = "_N_DownloadLog", ThisKey = "FileID", OtherKey = "FileID", DeleteRule = "CASCADE")]
		public EntitySet<N_DownloadLog> N_DownloadLog
		{
			get
			{
				return this._N_DownloadLog;
			}
			set
			{
				this._N_DownloadLog.Assign(value);
			}
		}

		[Association(Name = "FK_N_File_CheckedOutBy", Storage = "_CheckedOutBy", ThisKey = "CheckedOutByID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject CheckedOutBy
		{
			get
			{
				return this._CheckedOutBy.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._CheckedOutBy.Entity;
				if (((previousValue != value)
							|| (this._CheckedOutBy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CheckedOutBy.Entity = null;
						previousValue.N_File.Remove(this);
					}
					this._CheckedOutBy.Entity = value;
					if ((value != null))
					{
						value.N_File.Add(this);
						this._CheckedOutByID = value.SubjectID;
					}
					else
					{
						this._CheckedOutByID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CheckedOutBy");
				}
			}
		}

		[Association(Name = "FK_N_File_Creator", Storage = "_Creator", ThisKey = "CreatorID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject Creator
		{
			get
			{
				return this._Creator.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._Creator.Entity;
				if (((previousValue != value)
							|| (this._Creator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Creator.Entity = null;
						previousValue.N_File_Creator.Remove(this);
					}
					this._Creator.Entity = value;
					if ((value != null))
					{
						value.N_File_Creator.Add(this);
						this._CreatorID = value.SubjectID;
					}
					else
					{
						this._CreatorID = default(int);
					}
					this.SendPropertyChanged("Creator");
				}
			}
		}

		[Association(Name = "FK_N_File_Folder", Storage = "_Folder", ThisKey = "FolderID", OtherKey = "FolderID", IsForeignKey = true)]
		public N_Folder Folder
		{
			get
			{
				return this._Folder.Entity;
			}
			set
			{
				N_Folder previousValue = this._Folder.Entity;
				if (((previousValue != value)
							|| (this._Folder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Folder.Entity = null;
						previousValue.Files.Remove(this);
					}
					this._Folder.Entity = value;
					if ((value != null))
					{
						value.Files.Add(this);
						this._FolderID = value.FolderID;
					}
					else
					{
						this._FolderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Folder");
				}
			}
		}

		[Association(Name = "FK_N_File_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.N_File_LastModifiedUser.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.N_File_LastModifiedUser.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_N_FileListItem_N_File", Storage = "_N_FileListItem", ThisKey = "FileID", OtherKey = "FileID", DeleteRule = "NO ACTION")]
		public EntitySet<N_FileListItem> N_FileListItem
		{
			get
			{
				return this._N_FileListItem;
			}
			set
			{
				this._N_FileListItem.Assign(value);
			}
		}

		[Association(Name = "FK_News_Image", Storage = "_News", ThisKey = "FileID", OtherKey = "ImageFileID", DeleteRule = "NO ACTION")]
		public EntitySet<News> News
		{
			get
			{
				return this._News;
			}
			set
			{
				this._News.Assign(value);
			}
		}

		[Association(Name = "FK_PaymentOrder_Document", Storage = "_PaymentOrder", ThisKey = "FileID", OtherKey = "DocumentFileID", DeleteRule = "NO ACTION")]
		public EntitySet<PaymentOrder> PaymentOrder
		{
			get
			{
				return this._PaymentOrder;
			}
			set
			{
				this._PaymentOrder.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_Article(Article entity)
		{
			this.SendPropertyChanging();
			entity.File1 = this;
		}

		private void detach_Article(Article entity)
		{
			this.SendPropertyChanging();
			entity.File1 = null;
		}

		private void attach_File(Article entity)
		{
			this.SendPropertyChanging();
			entity.File2 = this;
		}

		private void detach_File(Article entity)
		{
			this.SendPropertyChanging();
			entity.File2 = null;
		}

		private void attach_Article_File3(Article entity)
		{
			this.SendPropertyChanging();
			entity.File3 = this;
		}

		private void detach_Article_File3(Article entity)
		{
			this.SendPropertyChanging();
			entity.File3 = null;
		}

		private void attach_Article_File4(Article entity)
		{
			this.SendPropertyChanging();
			entity.File4 = this;
		}

		private void detach_Article_File4(Article entity)
		{
			this.SendPropertyChanging();
			entity.File4 = null;
		}

		private void attach_Article_File5(Article entity)
		{
			this.SendPropertyChanging();
			entity.File5 = this;
		}

		private void detach_Article_File5(Article entity)
		{
			this.SendPropertyChanging();
			entity.File5 = null;
		}

		private void attach_Article_Image(Article entity)
		{
			this.SendPropertyChanging();
			entity.Image = this;
		}

		private void detach_Article_Image(Article entity)
		{
			this.SendPropertyChanging();
			entity.Image = null;
		}

		private void attach_C_FGADocument(C_FGADocument entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}

		private void detach_C_FGADocument(C_FGADocument entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}

		private void attach_C_FGADocumentSigner(C_FGADocumentSigner entity)
		{
			this.SendPropertyChanging();
			entity.Signature = this;
		}

		private void detach_C_FGADocumentSigner(C_FGADocumentSigner entity)
		{
			this.SendPropertyChanging();
			entity.Signature = null;
		}

		private void attach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.File = this;
		}

		private void detach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.File = null;
		}

		private void attach_Document(Document entity)
		{
			this.SendPropertyChanging();
			entity.File = this;
		}

		private void detach_Document(Document entity)
		{
			this.SendPropertyChanging();
			entity.File = null;
		}

		private void attach_DocumentData(DocumentData entity)
		{
			this.SendPropertyChanging();
			entity.File = this;
		}

		private void detach_DocumentData(DocumentData entity)
		{
			this.SendPropertyChanging();
			entity.File = null;
		}

		private void attach_Employee(Employee entity)
		{
			this.SendPropertyChanging();
			entity.SignSample = this;
		}

		private void detach_Employee(Employee entity)
		{
			this.SendPropertyChanging();
			entity.SignSample = null;
		}

		private void attach_Employee_StampSample(Employee entity)
		{
			this.SendPropertyChanging();
			entity.StampSample = this;
		}

		private void detach_Employee_StampSample(Employee entity)
		{
			this.SendPropertyChanging();
			entity.StampSample = null;
		}

		private void attach_N_DownloadLog(N_DownloadLog entity)
		{
			this.SendPropertyChanging();
			entity.File = this;
		}

		private void detach_N_DownloadLog(N_DownloadLog entity)
		{
			this.SendPropertyChanging();
			entity.File = null;
		}

		private void attach_N_FileListItem(N_FileListItem entity)
		{
			this.SendPropertyChanging();
			entity.N_File = this;
		}

		private void detach_N_FileListItem(N_FileListItem entity)
		{
			this.SendPropertyChanging();
			entity.N_File = null;
		}

		private void attach_News(News entity)
		{
			this.SendPropertyChanging();
			entity.Image = this;
		}

		private void detach_News(News entity)
		{
			this.SendPropertyChanging();
			entity.Image = null;
		}

		private void attach_PaymentOrder(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}

		private void detach_PaymentOrder(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
	}

	[Table(Name = "dbo.N_FileData")]
	public partial class N_FileData : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _FileGUID;

		private System.Data.Linq.Binary _Data;

		private string _Extension;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFileGUIDChanging(System.Guid value);
		partial void OnFileGUIDChanged();
		partial void OnDataChanging(System.Data.Linq.Binary value);
		partial void OnDataChanged();
		partial void OnExtensionChanging(string value);
		partial void OnExtensionChanged();
		#endregion

		public N_FileData()
		{
			OnCreated();
		}

		[Column(Storage = "_FileGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid FileGUID
		{
			get
			{
				return this._FileGUID;
			}
			set
			{
				if ((this._FileGUID != value))
				{
					this.OnFileGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileGUID = value;
					this.SendPropertyChanged("FileGUID");
					this.OnFileGUIDChanged();
				}
			}
		}

		[Column(Storage = "_Data", DbType = "Image", CanBeNull = true, UpdateCheck = UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}

		[Column(Storage = "_Extension", DbType = "NVarChar(50)", UpdateCheck = UpdateCheck.Never)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this.OnExtensionChanging(value);
					this.SendPropertyChanging();
					this._Extension = value;
					this.SendPropertyChanged("Extension");
					this.OnExtensionChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.N_FileLibrary")]
	public partial class N_FileLibrary : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FolderID;

		private int _MaxFileSize;

		private int _FileLibraryTypeID;

		private EntityRef<N_FileLibraryType> _FileLibraryType;

		private EntityRef<N_Folder> _N_Folder;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFolderIDChanging(int value);
		partial void OnFolderIDChanged();
		partial void OnMaxFileSizeChanging(int value);
		partial void OnMaxFileSizeChanged();
		partial void OnFileLibraryTypeIDChanging(int value);
		partial void OnFileLibraryTypeIDChanged();
		#endregion

		public N_FileLibrary()
		{
			this._FileLibraryType = default(EntityRef<N_FileLibraryType>);
			this._N_Folder = default(EntityRef<N_Folder>);
			OnCreated();
		}

		[Column(Storage = "_FolderID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int FolderID
		{
			get
			{
				return this._FolderID;
			}
			set
			{
				if ((this._FolderID != value))
				{
					if (this._N_Folder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFolderIDChanging(value);
					this.SendPropertyChanging();
					this._FolderID = value;
					this.SendPropertyChanged("FolderID");
					this.OnFolderIDChanged();
				}
			}
		}

		[Column(Storage = "_MaxFileSize", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int MaxFileSize
		{
			get
			{
				return this._MaxFileSize;
			}
			set
			{
				if ((this._MaxFileSize != value))
				{
					this.OnMaxFileSizeChanging(value);
					this.SendPropertyChanging();
					this._MaxFileSize = value;
					this.SendPropertyChanged("MaxFileSize");
					this.OnMaxFileSizeChanged();
				}
			}
		}

		[Column(Storage = "_FileLibraryTypeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int FileLibraryTypeID
		{
			get
			{
				return this._FileLibraryTypeID;
			}
			set
			{
				if ((this._FileLibraryTypeID != value))
				{
					if (this._FileLibraryType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileLibraryTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FileLibraryTypeID = value;
					this.SendPropertyChanged("FileLibraryTypeID");
					this.OnFileLibraryTypeIDChanged();
				}
			}
		}

		[Association(Name = "FK_N_FileLibrary_FileLibraryType", Storage = "_FileLibraryType", ThisKey = "FileLibraryTypeID", OtherKey = "FileLibraryTypeID", IsForeignKey = true)]
		public N_FileLibraryType FileLibraryType
		{
			get
			{
				return this._FileLibraryType.Entity;
			}
			set
			{
				N_FileLibraryType previousValue = this._FileLibraryType.Entity;
				if (((previousValue != value)
							|| (this._FileLibraryType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileLibraryType.Entity = null;
						previousValue.N_FileLibrary.Remove(this);
					}
					this._FileLibraryType.Entity = value;
					if ((value != null))
					{
						value.N_FileLibrary.Add(this);
						this._FileLibraryTypeID = value.FileLibraryTypeID;
					}
					else
					{
						this._FileLibraryTypeID = default(int);
					}
					this.SendPropertyChanged("FileLibraryType");
				}
			}
		}

		[Association(Name = "FK_N_FileLibrary_N_Folder", Storage = "_N_Folder", ThisKey = "FolderID", OtherKey = "FolderID", IsForeignKey = true, DeleteOnNull = true)]
		public N_Folder N_Folder
		{
			get
			{
				return this._N_Folder.Entity;
			}
			set
			{
				N_Folder previousValue = this._N_Folder.Entity;
				if (((previousValue != value)
							|| (this._N_Folder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._N_Folder.Entity = null;
						previousValue.N_FileLibrary = null;
					}
					this._N_Folder.Entity = value;
					if ((value != null))
					{
						value.N_FileLibrary = this;
						this._FolderID = value.FolderID;
					}
					else
					{
						this._FolderID = default(int);
					}
					this.SendPropertyChanged("N_Folder");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.N_FileLibraryType")]
	public partial class N_FileLibraryType : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FileLibraryTypeID;

		private string _Extensions;

		private string _ClassName;

		private string _Title;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private bool _IsDeleted;

		private EntitySet<N_FileLibrary> _N_FileLibrary;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFileLibraryTypeIDChanging(int value);
		partial void OnFileLibraryTypeIDChanged();
		partial void OnExtensionsChanging(string value);
		partial void OnExtensionsChanged();
		partial void OnClassNameChanging(string value);
		partial void OnClassNameChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public N_FileLibraryType()
		{
			this._N_FileLibrary = new EntitySet<N_FileLibrary>(new Action<N_FileLibrary>(this.attach_N_FileLibrary), new Action<N_FileLibrary>(this.detach_N_FileLibrary));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_FileLibraryTypeID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int FileLibraryTypeID
		{
			get
			{
				return this._FileLibraryTypeID;
			}
			set
			{
				if ((this._FileLibraryTypeID != value))
				{
					this.OnFileLibraryTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FileLibraryTypeID = value;
					this.SendPropertyChanged("FileLibraryTypeID");
					this.OnFileLibraryTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_Extensions", DbType = "NVarChar(1024) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Extensions
		{
			get
			{
				return this._Extensions;
			}
			set
			{
				if ((this._Extensions != value))
				{
					this.OnExtensionsChanging(value);
					this.SendPropertyChanging();
					this._Extensions = value;
					this.SendPropertyChanged("Extensions");
					this.OnExtensionsChanged();
				}
			}
		}

		[Column(Storage = "_ClassName", DbType = "NVarChar(1024)", UpdateCheck = UpdateCheck.Never)]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(1024) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_N_FileLibrary_FileLibraryType", Storage = "_N_FileLibrary", ThisKey = "FileLibraryTypeID", OtherKey = "FileLibraryTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<N_FileLibrary> N_FileLibrary
		{
			get
			{
				return this._N_FileLibrary;
			}
			set
			{
				this._N_FileLibrary.Assign(value);
			}
		}

		[Association(Name = "FK_N_FileLibraryType_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.N_FileLibraryType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.N_FileLibraryType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_N_FileLibrary(N_FileLibrary entity)
		{
			this.SendPropertyChanging();
			entity.FileLibraryType = this;
		}

		private void detach_N_FileLibrary(N_FileLibrary entity)
		{
			this.SendPropertyChanging();
			entity.FileLibraryType = null;
		}
	}

	[Table(Name = "dbo.N_FileList")]
	public partial class N_FileList : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FileListID;

		private EntitySet<N_FileListItem> _N_FileListItem;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFileListIDChanging(int value);
		partial void OnFileListIDChanged();
		#endregion

		public N_FileList()
		{
			this._N_FileListItem = new EntitySet<N_FileListItem>(new Action<N_FileListItem>(this.attach_N_FileListItem), new Action<N_FileListItem>(this.detach_N_FileListItem));
			OnCreated();
		}

		[Column(Storage = "_FileListID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int FileListID
		{
			get
			{
				return this._FileListID;
			}
			set
			{
				if ((this._FileListID != value))
				{
					this.OnFileListIDChanging(value);
					this.SendPropertyChanging();
					this._FileListID = value;
					this.SendPropertyChanged("FileListID");
					this.OnFileListIDChanged();
				}
			}
		}

		[Association(Name = "FK_N_FileListItem_N_FileList", Storage = "_N_FileListItem", ThisKey = "FileListID", OtherKey = "FileListID", DeleteRule = "NO ACTION")]
		public EntitySet<N_FileListItem> N_FileListItem
		{
			get
			{
				return this._N_FileListItem;
			}
			set
			{
				this._N_FileListItem.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_N_FileListItem(N_FileListItem entity)
		{
			this.SendPropertyChanging();
			entity.N_FileList = this;
		}

		private void detach_N_FileListItem(N_FileListItem entity)
		{
			this.SendPropertyChanging();
			entity.N_FileList = null;
		}
	}

	[Table(Name = "dbo.N_FileListItem")]
	public partial class N_FileListItem : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FileListID;

		private int _FileID;

		private int _SeqNo;

		private EntityRef<N_File> _N_File;

		private EntityRef<N_FileList> _N_FileList;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFileListIDChanging(int value);
		partial void OnFileListIDChanged();
		partial void OnFileIDChanging(int value);
		partial void OnFileIDChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		#endregion

		public N_FileListItem()
		{
			this._N_File = default(EntityRef<N_File>);
			this._N_FileList = default(EntityRef<N_FileList>);
			OnCreated();
		}

		[Column(Storage = "_FileListID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int FileListID
		{
			get
			{
				return this._FileListID;
			}
			set
			{
				if ((this._FileListID != value))
				{
					if (this._N_FileList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileListIDChanging(value);
					this.SendPropertyChanging();
					this._FileListID = value;
					this.SendPropertyChanged("FileListID");
					this.OnFileListIDChanged();
				}
			}
		}

		[Column(Storage = "_FileID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					if (this._N_File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Association(Name = "FK_N_FileListItem_N_File", Storage = "_N_File", ThisKey = "FileID", OtherKey = "FileID", IsForeignKey = true)]
		public N_File N_File
		{
			get
			{
				return this._N_File.Entity;
			}
			set
			{
				N_File previousValue = this._N_File.Entity;
				if (((previousValue != value)
							|| (this._N_File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._N_File.Entity = null;
						previousValue.N_FileListItem.Remove(this);
					}
					this._N_File.Entity = value;
					if ((value != null))
					{
						value.N_FileListItem.Add(this);
						this._FileID = value.FileID;
					}
					else
					{
						this._FileID = default(int);
					}
					this.SendPropertyChanged("N_File");
				}
			}
		}

		[Association(Name = "FK_N_FileListItem_N_FileList", Storage = "_N_FileList", ThisKey = "FileListID", OtherKey = "FileListID", IsForeignKey = true)]
		public N_FileList N_FileList
		{
			get
			{
				return this._N_FileList.Entity;
			}
			set
			{
				N_FileList previousValue = this._N_FileList.Entity;
				if (((previousValue != value)
							|| (this._N_FileList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._N_FileList.Entity = null;
						previousValue.N_FileListItem.Remove(this);
					}
					this._N_FileList.Entity = value;
					if ((value != null))
					{
						value.N_FileListItem.Add(this);
						this._FileListID = value.FileListID;
					}
					else
					{
						this._FileListID = default(int);
					}
					this.SendPropertyChanged("N_FileList");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.N_Filter")]
	public partial class N_Filter : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FilterID;

		private string _ListName;

		private System.Xml.Linq.XElement _FilterValue;

		private string _FilterName;

		private bool _IsDefault;

		private System.Nullable<int> _SubjectID;

		private System.Nullable<int> _Group1Column;

		private System.Nullable<char> _Group1Sort;

		private System.Nullable<int> _Group2Column;

		private System.Nullable<char> _Group2Sort;

		private string _ListParms;

		private string _Columns;

		private string _Sort;

		private int _ItemsOnPage;

		private EntityRef<SPM_Subject> _SPM_Subject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFilterIDChanging(int value);
		partial void OnFilterIDChanged();
		partial void OnListNameChanging(string value);
		partial void OnListNameChanged();
		partial void OnFilterValueChanging(System.Xml.Linq.XElement value);
		partial void OnFilterValueChanged();
		partial void OnFilterNameChanging(string value);
		partial void OnFilterNameChanged();
		partial void OnIsDefaultChanging(bool value);
		partial void OnIsDefaultChanged();
		partial void OnSubjectIDChanging(System.Nullable<int> value);
		partial void OnSubjectIDChanged();
		partial void OnGroup1ColumnChanging(System.Nullable<int> value);
		partial void OnGroup1ColumnChanged();
		partial void OnGroup1SortChanging(System.Nullable<char> value);
		partial void OnGroup1SortChanged();
		partial void OnGroup2ColumnChanging(System.Nullable<int> value);
		partial void OnGroup2ColumnChanged();
		partial void OnGroup2SortChanging(System.Nullable<char> value);
		partial void OnGroup2SortChanged();
		partial void OnListParmsChanging(string value);
		partial void OnListParmsChanged();
		partial void OnColumnsChanging(string value);
		partial void OnColumnsChanged();
		partial void OnSortChanging(string value);
		partial void OnSortChanged();
		partial void OnItemsOnPageChanging(int value);
		partial void OnItemsOnPageChanged();
		#endregion

		public N_Filter()
		{
			this._SPM_Subject = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_FilterID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int FilterID
		{
			get
			{
				return this._FilterID;
			}
			set
			{
				if ((this._FilterID != value))
				{
					this.OnFilterIDChanging(value);
					this.SendPropertyChanging();
					this._FilterID = value;
					this.SendPropertyChanged("FilterID");
					this.OnFilterIDChanged();
				}
			}
		}

		[Column(Storage = "_ListName", DbType = "VarChar(255)", UpdateCheck = UpdateCheck.Never)]
		public string ListName
		{
			get
			{
				return this._ListName;
			}
			set
			{
				if ((this._ListName != value))
				{
					this.OnListNameChanging(value);
					this.SendPropertyChanging();
					this._ListName = value;
					this.SendPropertyChanged("ListName");
					this.OnListNameChanged();
				}
			}
		}

		[Column(Storage = "_FilterValue", DbType = "Xml", CanBeNull = true, UpdateCheck = UpdateCheck.Never)]
		public System.Xml.Linq.XElement FilterValue
		{
			get
			{
				return this._FilterValue;
			}
			set
			{
				if ((this._FilterValue != value))
				{
					this.OnFilterValueChanging(value);
					this.SendPropertyChanging();
					this._FilterValue = value;
					this.SendPropertyChanged("FilterValue");
					this.OnFilterValueChanged();
				}
			}
		}

		[Column(Storage = "_FilterName", DbType = "NVarChar(50)", UpdateCheck = UpdateCheck.Never)]
		public string FilterName
		{
			get
			{
				return this._FilterName;
			}
			set
			{
				if ((this._FilterName != value))
				{
					this.OnFilterNameChanging(value);
					this.SendPropertyChanging();
					this._FilterName = value;
					this.SendPropertyChanged("FilterName");
					this.OnFilterNameChanged();
				}
			}
		}

		[Column(Storage = "_IsDefault", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}

		[Column(Storage = "_SubjectID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._SPM_Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}

		[Column(Storage = "_Group1Column", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> Group1Column
		{
			get
			{
				return this._Group1Column;
			}
			set
			{
				if ((this._Group1Column != value))
				{
					this.OnGroup1ColumnChanging(value);
					this.SendPropertyChanging();
					this._Group1Column = value;
					this.SendPropertyChanged("Group1Column");
					this.OnGroup1ColumnChanged();
				}
			}
		}

		[Column(Storage = "_Group1Sort", DbType = "Char(1)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<char> Group1Sort
		{
			get
			{
				return this._Group1Sort;
			}
			set
			{
				if ((this._Group1Sort != value))
				{
					this.OnGroup1SortChanging(value);
					this.SendPropertyChanging();
					this._Group1Sort = value;
					this.SendPropertyChanged("Group1Sort");
					this.OnGroup1SortChanged();
				}
			}
		}

		[Column(Storage = "_Group2Column", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> Group2Column
		{
			get
			{
				return this._Group2Column;
			}
			set
			{
				if ((this._Group2Column != value))
				{
					this.OnGroup2ColumnChanging(value);
					this.SendPropertyChanging();
					this._Group2Column = value;
					this.SendPropertyChanged("Group2Column");
					this.OnGroup2ColumnChanged();
				}
			}
		}

		[Column(Storage = "_Group2Sort", DbType = "Char(1)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<char> Group2Sort
		{
			get
			{
				return this._Group2Sort;
			}
			set
			{
				if ((this._Group2Sort != value))
				{
					this.OnGroup2SortChanging(value);
					this.SendPropertyChanging();
					this._Group2Sort = value;
					this.SendPropertyChanged("Group2Sort");
					this.OnGroup2SortChanged();
				}
			}
		}

		[Column(Storage = "_ListParms", DbType = "NVarChar(255)", UpdateCheck = UpdateCheck.Never)]
		public string ListParms
		{
			get
			{
				return this._ListParms;
			}
			set
			{
				if ((this._ListParms != value))
				{
					this.OnListParmsChanging(value);
					this.SendPropertyChanging();
					this._ListParms = value;
					this.SendPropertyChanged("ListParms");
					this.OnListParmsChanged();
				}
			}
		}

		[Column(Storage = "_Columns", DbType = "NVarChar(1024)", UpdateCheck = UpdateCheck.Never)]
		public string Columns
		{
			get
			{
				return this._Columns;
			}
			set
			{
				if ((this._Columns != value))
				{
					this.OnColumnsChanging(value);
					this.SendPropertyChanging();
					this._Columns = value;
					this.SendPropertyChanged("Columns");
					this.OnColumnsChanged();
				}
			}
		}

		[Column(Storage = "_Sort", DbType = "NVarChar(1024)", UpdateCheck = UpdateCheck.Never)]
		public string Sort
		{
			get
			{
				return this._Sort;
			}
			set
			{
				if ((this._Sort != value))
				{
					this.OnSortChanging(value);
					this.SendPropertyChanging();
					this._Sort = value;
					this.SendPropertyChanged("Sort");
					this.OnSortChanged();
				}
			}
		}

		[Column(Storage = "_ItemsOnPage", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ItemsOnPage
		{
			get
			{
				return this._ItemsOnPage;
			}
			set
			{
				if ((this._ItemsOnPage != value))
				{
					this.OnItemsOnPageChanging(value);
					this.SendPropertyChanging();
					this._ItemsOnPage = value;
					this.SendPropertyChanged("ItemsOnPage");
					this.OnItemsOnPageChanged();
				}
			}
		}

		[Association(Name = "FK_N_Filter_SPM_Subject", Storage = "_SPM_Subject", ThisKey = "SubjectID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject SPM_Subject
		{
			get
			{
				return this._SPM_Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._SPM_Subject.Entity;
				if (((previousValue != value)
							|| (this._SPM_Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SPM_Subject.Entity = null;
						previousValue.N_Filter.Remove(this);
					}
					this._SPM_Subject.Entity = value;
					if ((value != null))
					{
						value.N_Filter.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SPM_Subject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.N_Folder")]
	public partial class N_Folder : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FolderID;

		private System.Nullable<int> _ParentID;

		private string _Title;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _FullPath;

		private System.Guid _Guid;

		private string _GuidPath;

		private char _StorageType;

		private string _StorageParameter;

		private bool _IsReplicable;

		private System.Guid _SPMActionItemGUID;

		private bool _EnableVersioning;

		private int _CreatorID;

		private System.Nullable<System.DateTime> _PublishDate;

		private string _Tag;

		private EntitySet<N_File> _Files;

		private EntityRef<N_FileLibrary> _N_FileLibrary;

		private EntityRef<SPM_Subject> _Creator;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<N_Folder> _Parent;

		private EntitySet<N_Folder> _Folders;

		private EntitySet<N_FolderPredicate> _N_FolderPredicate;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFolderIDChanging(int value);
		partial void OnFolderIDChanged();
		partial void OnParentIDChanging(System.Nullable<int> value);
		partial void OnParentIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnFullPathChanging(string value);
		partial void OnFullPathChanged();
		partial void OnGuidChanging(System.Guid value);
		partial void OnGuidChanged();
		partial void OnGuidPathChanging(string value);
		partial void OnGuidPathChanged();
		partial void OnStorageTypeChanging(char value);
		partial void OnStorageTypeChanged();
		partial void OnStorageParameterChanging(string value);
		partial void OnStorageParameterChanged();
		partial void OnIsReplicableChanging(bool value);
		partial void OnIsReplicableChanged();
		partial void OnSPMActionItemGUIDChanging(System.Guid value);
		partial void OnSPMActionItemGUIDChanged();
		partial void OnEnableVersioningChanging(bool value);
		partial void OnEnableVersioningChanged();
		partial void OnCreatorIDChanging(int value);
		partial void OnCreatorIDChanged();
		partial void OnPublishDateChanging(System.Nullable<System.DateTime> value);
		partial void OnPublishDateChanged();
		partial void OnTagChanging(string value);
		partial void OnTagChanged();
		#endregion

		public N_Folder()
		{
			this._Files = new EntitySet<N_File>(new Action<N_File>(this.attach_Files), new Action<N_File>(this.detach_Files));
			this._N_FileLibrary = default(EntityRef<N_FileLibrary>);
			this._Creator = default(EntityRef<SPM_Subject>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Parent = default(EntityRef<N_Folder>);
			this._Folders = new EntitySet<N_Folder>(new Action<N_Folder>(this.attach_Folders), new Action<N_Folder>(this.detach_Folders));
			this._N_FolderPredicate = new EntitySet<N_FolderPredicate>(new Action<N_FolderPredicate>(this.attach_N_FolderPredicate), new Action<N_FolderPredicate>(this.detach_N_FolderPredicate));
			OnCreated();
		}

		[Column(Storage = "_FolderID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int FolderID
		{
			get
			{
				return this._FolderID;
			}
			set
			{
				if ((this._FolderID != value))
				{
					this.OnFolderIDChanging(value);
					this.SendPropertyChanging();
					this._FolderID = value;
					this.SendPropertyChanged("FolderID");
					this.OnFolderIDChanged();
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_FullPath", DbType = "NVarChar(4000)", UpdateCheck = UpdateCheck.Never)]
		public string FullPath
		{
			get
			{
				return this._FullPath;
			}
			set
			{
				if ((this._FullPath != value))
				{
					this.OnFullPathChanging(value);
					this.SendPropertyChanging();
					this._FullPath = value;
					this.SendPropertyChanged("FullPath");
					this.OnFullPathChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_GuidPath", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string GuidPath
		{
			get
			{
				return this._GuidPath;
			}
			set
			{
				if ((this._GuidPath != value))
				{
					this.OnGuidPathChanging(value);
					this.SendPropertyChanging();
					this._GuidPath = value;
					this.SendPropertyChanged("GuidPath");
					this.OnGuidPathChanged();
				}
			}
		}

		[Column(Storage = "_StorageType", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char StorageType
		{
			get
			{
				return this._StorageType;
			}
			set
			{
				if ((this._StorageType != value))
				{
					this.OnStorageTypeChanging(value);
					this.SendPropertyChanging();
					this._StorageType = value;
					this.SendPropertyChanged("StorageType");
					this.OnStorageTypeChanged();
				}
			}
		}

		[Column(Storage = "_StorageParameter", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string StorageParameter
		{
			get
			{
				return this._StorageParameter;
			}
			set
			{
				if ((this._StorageParameter != value))
				{
					this.OnStorageParameterChanging(value);
					this.SendPropertyChanging();
					this._StorageParameter = value;
					this.SendPropertyChanged("StorageParameter");
					this.OnStorageParameterChanged();
				}
			}
		}

		[Column(Storage = "_IsReplicable", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsReplicable
		{
			get
			{
				return this._IsReplicable;
			}
			set
			{
				if ((this._IsReplicable != value))
				{
					this.OnIsReplicableChanging(value);
					this.SendPropertyChanging();
					this._IsReplicable = value;
					this.SendPropertyChanged("IsReplicable");
					this.OnIsReplicableChanged();
				}
			}
		}

		[Column(Storage = "_SPMActionItemGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid SPMActionItemGUID
		{
			get
			{
				return this._SPMActionItemGUID;
			}
			set
			{
				if ((this._SPMActionItemGUID != value))
				{
					this.OnSPMActionItemGUIDChanging(value);
					this.SendPropertyChanging();
					this._SPMActionItemGUID = value;
					this.SendPropertyChanged("SPMActionItemGUID");
					this.OnSPMActionItemGUIDChanged();
				}
			}
		}

		[Column(Storage = "_EnableVersioning", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool EnableVersioning
		{
			get
			{
				return this._EnableVersioning;
			}
			set
			{
				if ((this._EnableVersioning != value))
				{
					this.OnEnableVersioningChanging(value);
					this.SendPropertyChanging();
					this._EnableVersioning = value;
					this.SendPropertyChanged("EnableVersioning");
					this.OnEnableVersioningChanged();
				}
			}
		}

		[Column(Storage = "_CreatorID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					if (this._Creator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorID = value;
					this.SendPropertyChanged("CreatorID");
					this.OnCreatorIDChanged();
				}
			}
		}

		[Column(Storage = "_PublishDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}

		[Column(Storage = "_Tag", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}

		[Association(Name = "FK_N_File_Folder", Storage = "_Files", ThisKey = "FolderID", OtherKey = "FolderID", DeleteRule = "CASCADE")]
		public EntitySet<N_File> Files
		{
			get
			{
				return this._Files;
			}
			set
			{
				this._Files.Assign(value);
			}
		}

		[Association(Name = "FK_N_FileLibrary_N_Folder", Storage = "_N_FileLibrary", ThisKey = "FolderID", OtherKey = "FolderID", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
		public N_FileLibrary N_FileLibrary
		{
			get
			{
				return this._N_FileLibrary.Entity;
			}
			set
			{
				N_FileLibrary previousValue = this._N_FileLibrary.Entity;
				if (((previousValue != value)
							|| (this._N_FileLibrary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._N_FileLibrary.Entity = null;
						previousValue.N_Folder = null;
					}
					this._N_FileLibrary.Entity = value;
					if ((value != null))
					{
						value.N_Folder = this;
					}
					this.SendPropertyChanged("N_FileLibrary");
				}
			}
		}

		[Association(Name = "FK_N_Folder_Creator", Storage = "_Creator", ThisKey = "CreatorID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject Creator
		{
			get
			{
				return this._Creator.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._Creator.Entity;
				if (((previousValue != value)
							|| (this._Creator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Creator.Entity = null;
						previousValue.N_Folder.Remove(this);
					}
					this._Creator.Entity = value;
					if ((value != null))
					{
						value.N_Folder.Add(this);
						this._CreatorID = value.SubjectID;
					}
					else
					{
						this._CreatorID = default(int);
					}
					this.SendPropertyChanged("Creator");
				}
			}
		}

		[Association(Name = "FK_N_Folder_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.N_Folder_LastModifiedUser.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.N_Folder_LastModifiedUser.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_N_Folder_Parent", Storage = "_Parent", ThisKey = "ParentID", OtherKey = "FolderID", IsForeignKey = true)]
		public N_Folder Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				N_Folder previousValue = this._Parent.Entity;
				if (((previousValue != value)
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.Folders.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.Folders.Add(this);
						this._ParentID = value.FolderID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}

		[Association(Name = "FK_N_Folder_Parent", Storage = "_Folders", ThisKey = "FolderID", OtherKey = "ParentID", DeleteRule = "NO ACTION")]
		public EntitySet<N_Folder> Folders
		{
			get
			{
				return this._Folders;
			}
			set
			{
				this._Folders.Assign(value);
			}
		}

		[Association(Name = "FK_N_FolderPredicate_Folder", Storage = "_N_FolderPredicate", ThisKey = "FolderID", OtherKey = "FolderID", DeleteRule = "CASCADE")]
		public EntitySet<N_FolderPredicate> N_FolderPredicate
		{
			get
			{
				return this._N_FolderPredicate;
			}
			set
			{
				this._N_FolderPredicate.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_Files(N_File entity)
		{
			this.SendPropertyChanging();
			entity.Folder = this;
		}

		private void detach_Files(N_File entity)
		{
			this.SendPropertyChanging();
			entity.Folder = null;
		}

		private void attach_Folders(N_Folder entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}

		private void detach_Folders(N_Folder entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}

		private void attach_N_FolderPredicate(N_FolderPredicate entity)
		{
			this.SendPropertyChanging();
			entity.Folder = this;
		}

		private void detach_N_FolderPredicate(N_FolderPredicate entity)
		{
			this.SendPropertyChanging();
			entity.Folder = null;
		}
	}

	[Table(Name = "dbo.N_FolderPredicate")]
	public partial class N_FolderPredicate : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FolderPredicateID;

		private char _FolderActionType;

		private string _PredicateCode;

		private string _Description;

		private int _FolderID;

		private EntityRef<N_Folder> _Folder;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFolderPredicateIDChanging(int value);
		partial void OnFolderPredicateIDChanged();
		partial void OnFolderActionTypeChanging(char value);
		partial void OnFolderActionTypeChanged();
		partial void OnPredicateCodeChanging(string value);
		partial void OnPredicateCodeChanged();
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		partial void OnFolderIDChanging(int value);
		partial void OnFolderIDChanged();
		#endregion

		public N_FolderPredicate()
		{
			this._Folder = default(EntityRef<N_Folder>);
			OnCreated();
		}

		[Column(Storage = "_FolderPredicateID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int FolderPredicateID
		{
			get
			{
				return this._FolderPredicateID;
			}
			set
			{
				if ((this._FolderPredicateID != value))
				{
					this.OnFolderPredicateIDChanging(value);
					this.SendPropertyChanging();
					this._FolderPredicateID = value;
					this.SendPropertyChanged("FolderPredicateID");
					this.OnFolderPredicateIDChanged();
				}
			}
		}

		[Column(Storage = "_FolderActionType", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char FolderActionType
		{
			get
			{
				return this._FolderActionType;
			}
			set
			{
				if ((this._FolderActionType != value))
				{
					this.OnFolderActionTypeChanging(value);
					this.SendPropertyChanging();
					this._FolderActionType = value;
					this.SendPropertyChanged("FolderActionType");
					this.OnFolderActionTypeChanged();
				}
			}
		}

		[Column(Storage = "_PredicateCode", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string PredicateCode
		{
			get
			{
				return this._PredicateCode;
			}
			set
			{
				if ((this._PredicateCode != value))
				{
					this.OnPredicateCodeChanging(value);
					this.SendPropertyChanging();
					this._PredicateCode = value;
					this.SendPropertyChanged("PredicateCode");
					this.OnPredicateCodeChanged();
				}
			}
		}

		[Column(Storage = "_Description", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}

		[Column(Storage = "_FolderID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int FolderID
		{
			get
			{
				return this._FolderID;
			}
			set
			{
				if ((this._FolderID != value))
				{
					if (this._Folder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFolderIDChanging(value);
					this.SendPropertyChanging();
					this._FolderID = value;
					this.SendPropertyChanged("FolderID");
					this.OnFolderIDChanged();
				}
			}
		}

		[Association(Name = "FK_N_FolderPredicate_Folder", Storage = "_Folder", ThisKey = "FolderID", OtherKey = "FolderID", IsForeignKey = true, DeleteOnNull = true)]
		public N_Folder Folder
		{
			get
			{
				return this._Folder.Entity;
			}
			set
			{
				N_Folder previousValue = this._Folder.Entity;
				if (((previousValue != value)
							|| (this._Folder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Folder.Entity = null;
						previousValue.N_FolderPredicate.Remove(this);
					}
					this._Folder.Entity = value;
					if ((value != null))
					{
						value.N_FolderPredicate.Add(this);
						this._FolderID = value.FolderID;
					}
					else
					{
						this._FolderID = default(int);
					}
					this.SendPropertyChanged("Folder");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.N_Image")]
	public partial class N_Image : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ImageID;

		private System.Guid _Guid;

		private string _Title;

		private string _AltText;

		private string _Extension;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnImageIDChanging(int value);
		partial void OnImageIDChanged();
		partial void OnGuidChanging(System.Guid value);
		partial void OnGuidChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnAltTextChanging(string value);
		partial void OnAltTextChanged();
		partial void OnExtensionChanging(string value);
		partial void OnExtensionChanged();
		#endregion

		public N_Image()
		{
			OnCreated();
		}

		[Column(Storage = "_ImageID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_AltText", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string AltText
		{
			get
			{
				return this._AltText;
			}
			set
			{
				if ((this._AltText != value))
				{
					this.OnAltTextChanging(value);
					this.SendPropertyChanging();
					this._AltText = value;
					this.SendPropertyChanged("AltText");
					this.OnAltTextChanged();
				}
			}
		}

		[Column(Storage = "_Extension", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this.OnExtensionChanging(value);
					this.SendPropertyChanging();
					this._Extension = value;
					this.SendPropertyChanged("Extension");
					this.OnExtensionChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.N_MenuItem")]
	public partial class N_MenuItem : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _MenuItemID;

		private string _Title;

		private bool _IsVisible;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private char _MenuItemType;

		private string _Url;

		private System.Nullable<int> _ParentMenuItemID;

		private System.Guid _Guid;

		private System.Nullable<int> _ActionID;

		private string _Tooltip;

		private int _SeqNo;

		private string _ImageUrl;

		private System.Nullable<int> _MethodID;

		private System.Nullable<int> _FormViewID;

		private string _Expression;

		private EntityRef<N_MenuItem> _FK_MenuItem_MenuItem;

		private EntitySet<N_MenuItem> _MenuItem;

		private EntityRef<SPM_Action> _FK_MenuItem_SPM_Action;

		private EntityRef<MM_FormView> _MM_FormView;

		private EntityRef<MM_Method> _MM_Method;

		private EntityRef<SPM_Subject> _SPM_Subject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnMenuItemIDChanging(int value);
		partial void OnMenuItemIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnIsVisibleChanging(bool value);
		partial void OnIsVisibleChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnMenuItemTypeChanging(char value);
		partial void OnMenuItemTypeChanged();
		partial void OnUrlChanging(string value);
		partial void OnUrlChanged();
		partial void OnParentMenuItemIDChanging(System.Nullable<int> value);
		partial void OnParentMenuItemIDChanged();
		partial void OnGuidChanging(System.Guid value);
		partial void OnGuidChanged();
		partial void OnActionIDChanging(System.Nullable<int> value);
		partial void OnActionIDChanged();
		partial void OnTooltipChanging(string value);
		partial void OnTooltipChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnImageUrlChanging(string value);
		partial void OnImageUrlChanged();
		partial void OnMethodIDChanging(System.Nullable<int> value);
		partial void OnMethodIDChanged();
		partial void OnFormViewIDChanging(System.Nullable<int> value);
		partial void OnFormViewIDChanged();
		partial void OnExpressionChanging(string value);
		partial void OnExpressionChanged();
		#endregion

		public N_MenuItem()
		{
			this._FK_MenuItem_MenuItem = default(EntityRef<N_MenuItem>);
			this._MenuItem = new EntitySet<N_MenuItem>(new Action<N_MenuItem>(this.attach_MenuItem), new Action<N_MenuItem>(this.detach_MenuItem));
			this._FK_MenuItem_SPM_Action = default(EntityRef<SPM_Action>);
			this._MM_FormView = default(EntityRef<MM_FormView>);
			this._MM_Method = default(EntityRef<MM_Method>);
			this._SPM_Subject = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_MenuItemID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int MenuItemID
		{
			get
			{
				return this._MenuItemID;
			}
			set
			{
				if ((this._MenuItemID != value))
				{
					this.OnMenuItemIDChanging(value);
					this.SendPropertyChanging();
					this._MenuItemID = value;
					this.SendPropertyChanged("MenuItemID");
					this.OnMenuItemIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_IsVisible", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsVisible
		{
			get
			{
				return this._IsVisible;
			}
			set
			{
				if ((this._IsVisible != value))
				{
					this.OnIsVisibleChanging(value);
					this.SendPropertyChanging();
					this._IsVisible = value;
					this.SendPropertyChanged("IsVisible");
					this.OnIsVisibleChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._SPM_Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_MenuItemType", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char MenuItemType
		{
			get
			{
				return this._MenuItemType;
			}
			set
			{
				if ((this._MenuItemType != value))
				{
					this.OnMenuItemTypeChanging(value);
					this.SendPropertyChanging();
					this._MenuItemType = value;
					this.SendPropertyChanged("MenuItemType");
					this.OnMenuItemTypeChanged();
				}
			}
		}

		[Column(Storage = "_Url", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}

		[Column(Storage = "_ParentMenuItemID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ParentMenuItemID
		{
			get
			{
				return this._ParentMenuItemID;
			}
			set
			{
				if ((this._ParentMenuItemID != value))
				{
					if (this._FK_MenuItem_MenuItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentMenuItemIDChanging(value);
					this.SendPropertyChanging();
					this._ParentMenuItemID = value;
					this.SendPropertyChanged("ParentMenuItemID");
					this.OnParentMenuItemIDChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_ActionID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					if (this._FK_MenuItem_SPM_Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}

		[Column(Storage = "_Tooltip", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Tooltip
		{
			get
			{
				return this._Tooltip;
			}
			set
			{
				if ((this._Tooltip != value))
				{
					this.OnTooltipChanging(value);
					this.SendPropertyChanging();
					this._Tooltip = value;
					this.SendPropertyChanged("Tooltip");
					this.OnTooltipChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_ImageUrl", DbType = "VarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}
			set
			{
				if ((this._ImageUrl != value))
				{
					this.OnImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ImageUrl = value;
					this.SendPropertyChanged("ImageUrl");
					this.OnImageUrlChanged();
				}
			}
		}

		[Column(Storage = "_MethodID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> MethodID
		{
			get
			{
				return this._MethodID;
			}
			set
			{
				if ((this._MethodID != value))
				{
					if (this._MM_Method.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMethodIDChanging(value);
					this.SendPropertyChanging();
					this._MethodID = value;
					this.SendPropertyChanged("MethodID");
					this.OnMethodIDChanged();
				}
			}
		}

		[Column(Storage = "_FormViewID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> FormViewID
		{
			get
			{
				return this._FormViewID;
			}
			set
			{
				if ((this._FormViewID != value))
				{
					if (this._MM_FormView.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormViewIDChanging(value);
					this.SendPropertyChanging();
					this._FormViewID = value;
					this.SendPropertyChanged("FormViewID");
					this.OnFormViewIDChanged();
				}
			}
		}

		[Column(Storage = "_Expression", DbType = "NVarChar(255)", UpdateCheck = UpdateCheck.Never)]
		public string Expression
		{
			get
			{
				return this._Expression;
			}
			set
			{
				if ((this._Expression != value))
				{
					this.OnExpressionChanging(value);
					this.SendPropertyChanging();
					this._Expression = value;
					this.SendPropertyChanged("Expression");
					this.OnExpressionChanged();
				}
			}
		}

		[Association(Storage = "_FK_MenuItem_MenuItem", ThisKey = "ParentMenuItemID", OtherKey = "MenuItemID", IsForeignKey = true)]
		public N_MenuItem FK_MenuItem_MenuItem
		{
			get
			{
				return this._FK_MenuItem_MenuItem.Entity;
			}
			set
			{
				N_MenuItem previousValue = this._FK_MenuItem_MenuItem.Entity;
				if (((previousValue != value)
							|| (this._FK_MenuItem_MenuItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FK_MenuItem_MenuItem.Entity = null;
						previousValue.MenuItem.Remove(this);
					}
					this._FK_MenuItem_MenuItem.Entity = value;
					if ((value != null))
					{
						value.MenuItem.Add(this);
						this._ParentMenuItemID = value.MenuItemID;
					}
					else
					{
						this._ParentMenuItemID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FK_MenuItem_MenuItem");
				}
			}
		}

		[Association(Name = "FK_MenuItem_MenuItem", Storage = "_MenuItem", ThisKey = "MenuItemID", OtherKey = "ParentMenuItemID", DeleteRule = "NO ACTION")]
		public EntitySet<N_MenuItem> MenuItem
		{
			get
			{
				return this._MenuItem;
			}
			set
			{
				this._MenuItem.Assign(value);
			}
		}

		[Association(Storage = "_FK_MenuItem_SPM_Action", ThisKey = "ActionID", OtherKey = "ActionID", IsForeignKey = true)]
		public SPM_Action FK_MenuItem_SPM_Action
		{
			get
			{
				return this._FK_MenuItem_SPM_Action.Entity;
			}
			set
			{
				SPM_Action previousValue = this._FK_MenuItem_SPM_Action.Entity;
				if (((previousValue != value)
							|| (this._FK_MenuItem_SPM_Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FK_MenuItem_SPM_Action.Entity = null;
						previousValue.N_MenuItem.Remove(this);
					}
					this._FK_MenuItem_SPM_Action.Entity = value;
					if ((value != null))
					{
						value.N_MenuItem.Add(this);
						this._ActionID = value.ActionID;
					}
					else
					{
						this._ActionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FK_MenuItem_SPM_Action");
				}
			}
		}

		[Association(Name = "FK_N_MenuItem_MM_FormView", Storage = "_MM_FormView", ThisKey = "FormViewID", OtherKey = "FormViewID", IsForeignKey = true)]
		public MM_FormView MM_FormView
		{
			get
			{
				return this._MM_FormView.Entity;
			}
			set
			{
				MM_FormView previousValue = this._MM_FormView.Entity;
				if (((previousValue != value)
							|| (this._MM_FormView.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_FormView.Entity = null;
						previousValue.N_MenuItem.Remove(this);
					}
					this._MM_FormView.Entity = value;
					if ((value != null))
					{
						value.N_MenuItem.Add(this);
						this._FormViewID = value.FormViewID;
					}
					else
					{
						this._FormViewID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MM_FormView");
				}
			}
		}

		[Association(Name = "FK_N_MenuItem_MM_Method", Storage = "_MM_Method", ThisKey = "MethodID", OtherKey = "MethodID", IsForeignKey = true)]
		public MM_Method MM_Method
		{
			get
			{
				return this._MM_Method.Entity;
			}
			set
			{
				MM_Method previousValue = this._MM_Method.Entity;
				if (((previousValue != value)
							|| (this._MM_Method.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_Method.Entity = null;
						previousValue.N_MenuItem.Remove(this);
					}
					this._MM_Method.Entity = value;
					if ((value != null))
					{
						value.N_MenuItem.Add(this);
						this._MethodID = value.MethodID;
					}
					else
					{
						this._MethodID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MM_Method");
				}
			}
		}

		[Association(Name = "FK_N_MenuItem_SPM_Subject", Storage = "_SPM_Subject", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject SPM_Subject
		{
			get
			{
				return this._SPM_Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._SPM_Subject.Entity;
				if (((previousValue != value)
							|| (this._SPM_Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SPM_Subject.Entity = null;
						previousValue.N_MenuItem.Remove(this);
					}
					this._SPM_Subject.Entity = value;
					if ((value != null))
					{
						value.N_MenuItem.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("SPM_Subject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.FK_MenuItem_MenuItem = this;
		}

		private void detach_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.FK_MenuItem_MenuItem = null;
		}
	}

	[Table(Name = "dbo.N_ObjectChange")]
	public partial class N_ObjectChange : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ObjectChangeID;

		private System.DateTime _LastModifiedDate;

		private string _Title;

		private string _IP;

		private string _ObjectKey;

		private string _ObjectTypeTitle;

		private string _ObjectTypeSysName;

		private string _ObjectTitle;

		private string _UserTitle;

		private string _UserLogin;

		private string _Details;

		private int _SubjectID;

		private EntitySet<N_ObjectPropertyChange> _PropertyChanges;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnObjectChangeIDChanging(int value);
		partial void OnObjectChangeIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnIPChanging(string value);
		partial void OnIPChanged();
		partial void OnObjectKeyChanging(string value);
		partial void OnObjectKeyChanged();
		partial void OnObjectTypeTitleChanging(string value);
		partial void OnObjectTypeTitleChanged();
		partial void OnObjectTypeSysNameChanging(string value);
		partial void OnObjectTypeSysNameChanged();
		partial void OnObjectTitleChanging(string value);
		partial void OnObjectTitleChanged();
		partial void OnUserTitleChanging(string value);
		partial void OnUserTitleChanged();
		partial void OnUserLoginChanging(string value);
		partial void OnUserLoginChanged();
		partial void OnDetailsChanging(string value);
		partial void OnDetailsChanged();
		partial void OnSubjectIDChanging(int value);
		partial void OnSubjectIDChanged();
		#endregion

		public N_ObjectChange()
		{
			this._PropertyChanges = new EntitySet<N_ObjectPropertyChange>(new Action<N_ObjectPropertyChange>(this.attach_PropertyChanges), new Action<N_ObjectPropertyChange>(this.detach_PropertyChanges));
			OnCreated();
		}

		[Column(Storage = "_ObjectChangeID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int ObjectChangeID
		{
			get
			{
				return this._ObjectChangeID;
			}
			set
			{
				if ((this._ObjectChangeID != value))
				{
					this.OnObjectChangeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectChangeID = value;
					this.SendPropertyChanged("ObjectChangeID");
					this.OnObjectChangeIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(500) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_IP", DbType = "NVarChar(128) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}

		[Column(Storage = "_ObjectKey", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ObjectKey
		{
			get
			{
				return this._ObjectKey;
			}
			set
			{
				if ((this._ObjectKey != value))
				{
					this.OnObjectKeyChanging(value);
					this.SendPropertyChanging();
					this._ObjectKey = value;
					this.SendPropertyChanged("ObjectKey");
					this.OnObjectKeyChanged();
				}
			}
		}

		[Column(Storage = "_ObjectTypeTitle", DbType = "NVarChar(300) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ObjectTypeTitle
		{
			get
			{
				return this._ObjectTypeTitle;
			}
			set
			{
				if ((this._ObjectTypeTitle != value))
				{
					this.OnObjectTypeTitleChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeTitle = value;
					this.SendPropertyChanged("ObjectTypeTitle");
					this.OnObjectTypeTitleChanged();
				}
			}
		}

		[Column(Storage = "_ObjectTypeSysName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ObjectTypeSysName
		{
			get
			{
				return this._ObjectTypeSysName;
			}
			set
			{
				if ((this._ObjectTypeSysName != value))
				{
					this.OnObjectTypeSysNameChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeSysName = value;
					this.SendPropertyChanged("ObjectTypeSysName");
					this.OnObjectTypeSysNameChanged();
				}
			}
		}

		[Column(Storage = "_ObjectTitle", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ObjectTitle
		{
			get
			{
				return this._ObjectTitle;
			}
			set
			{
				if ((this._ObjectTitle != value))
				{
					this.OnObjectTitleChanging(value);
					this.SendPropertyChanging();
					this._ObjectTitle = value;
					this.SendPropertyChanged("ObjectTitle");
					this.OnObjectTitleChanged();
				}
			}
		}

		[Column(Storage = "_UserTitle", DbType = "NVarChar(200) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string UserTitle
		{
			get
			{
				return this._UserTitle;
			}
			set
			{
				if ((this._UserTitle != value))
				{
					this.OnUserTitleChanging(value);
					this.SendPropertyChanging();
					this._UserTitle = value;
					this.SendPropertyChanged("UserTitle");
					this.OnUserTitleChanged();
				}
			}
		}

		[Column(Storage = "_UserLogin", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string UserLogin
		{
			get
			{
				return this._UserLogin;
			}
			set
			{
				if ((this._UserLogin != value))
				{
					this.OnUserLoginChanging(value);
					this.SendPropertyChanging();
					this._UserLogin = value;
					this.SendPropertyChanged("UserLogin");
					this.OnUserLoginChanged();
				}
			}
		}

		[Column(Storage = "_Details", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}

		[Column(Storage = "_SubjectID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}

		[Association(Name = "FK_N_ObjectPropertyChange_ObjectChange", Storage = "_PropertyChanges", ThisKey = "ObjectChangeID", OtherKey = "ObjectChangeID", DeleteRule = "NO ACTION")]
		public EntitySet<N_ObjectPropertyChange> PropertyChanges
		{
			get
			{
				return this._PropertyChanges;
			}
			set
			{
				this._PropertyChanges.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_PropertyChanges(N_ObjectPropertyChange entity)
		{
			this.SendPropertyChanging();
			entity.ObjectChange = this;
		}

		private void detach_PropertyChanges(N_ObjectPropertyChange entity)
		{
			this.SendPropertyChanging();
			entity.ObjectChange = null;
		}
	}

	[Table(Name = "dbo.N_ObjectPropertyChange")]
	public partial class N_ObjectPropertyChange : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ObjectPropertyChangeID;

		private string _Title;

		private string _PropertySysName;

		private string _OldValue;

		private string _NewValue;

		private string _OldValueTitle;

		private string _NewValueTitle;

		private int _ObjectChangeID;

		private EntityRef<N_ObjectChange> _ObjectChange;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnObjectPropertyChangeIDChanging(int value);
		partial void OnObjectPropertyChangeIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnPropertySysNameChanging(string value);
		partial void OnPropertySysNameChanged();
		partial void OnOldValueChanging(string value);
		partial void OnOldValueChanged();
		partial void OnNewValueChanging(string value);
		partial void OnNewValueChanged();
		partial void OnOldValueTitleChanging(string value);
		partial void OnOldValueTitleChanged();
		partial void OnNewValueTitleChanging(string value);
		partial void OnNewValueTitleChanged();
		partial void OnObjectChangeIDChanging(int value);
		partial void OnObjectChangeIDChanged();
		#endregion

		public N_ObjectPropertyChange()
		{
			this._ObjectChange = default(EntityRef<N_ObjectChange>);
			OnCreated();
		}

		[Column(Storage = "_ObjectPropertyChangeID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int ObjectPropertyChangeID
		{
			get
			{
				return this._ObjectPropertyChangeID;
			}
			set
			{
				if ((this._ObjectPropertyChangeID != value))
				{
					this.OnObjectPropertyChangeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectPropertyChangeID = value;
					this.SendPropertyChanged("ObjectPropertyChangeID");
					this.OnObjectPropertyChangeIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(200) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_PropertySysName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string PropertySysName
		{
			get
			{
				return this._PropertySysName;
			}
			set
			{
				if ((this._PropertySysName != value))
				{
					this.OnPropertySysNameChanging(value);
					this.SendPropertyChanging();
					this._PropertySysName = value;
					this.SendPropertyChanged("PropertySysName");
					this.OnPropertySysNameChanged();
				}
			}
		}

		[Column(Storage = "_OldValue", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string OldValue
		{
			get
			{
				return this._OldValue;
			}
			set
			{
				if ((this._OldValue != value))
				{
					this.OnOldValueChanging(value);
					this.SendPropertyChanging();
					this._OldValue = value;
					this.SendPropertyChanged("OldValue");
					this.OnOldValueChanged();
				}
			}
		}

		[Column(Storage = "_NewValue", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this.OnNewValueChanging(value);
					this.SendPropertyChanging();
					this._NewValue = value;
					this.SendPropertyChanged("NewValue");
					this.OnNewValueChanged();
				}
			}
		}

		[Column(Storage = "_OldValueTitle", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string OldValueTitle
		{
			get
			{
				return this._OldValueTitle;
			}
			set
			{
				if ((this._OldValueTitle != value))
				{
					this.OnOldValueTitleChanging(value);
					this.SendPropertyChanging();
					this._OldValueTitle = value;
					this.SendPropertyChanged("OldValueTitle");
					this.OnOldValueTitleChanged();
				}
			}
		}

		[Column(Storage = "_NewValueTitle", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string NewValueTitle
		{
			get
			{
				return this._NewValueTitle;
			}
			set
			{
				if ((this._NewValueTitle != value))
				{
					this.OnNewValueTitleChanging(value);
					this.SendPropertyChanging();
					this._NewValueTitle = value;
					this.SendPropertyChanged("NewValueTitle");
					this.OnNewValueTitleChanged();
				}
			}
		}

		[Column(Storage = "_ObjectChangeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ObjectChangeID
		{
			get
			{
				return this._ObjectChangeID;
			}
			set
			{
				if ((this._ObjectChangeID != value))
				{
					if (this._ObjectChange.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectChangeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectChangeID = value;
					this.SendPropertyChanged("ObjectChangeID");
					this.OnObjectChangeIDChanged();
				}
			}
		}

		[Association(Name = "FK_N_ObjectPropertyChange_ObjectChange", Storage = "_ObjectChange", ThisKey = "ObjectChangeID", OtherKey = "ObjectChangeID", IsForeignKey = true)]
		public N_ObjectChange ObjectChange
		{
			get
			{
				return this._ObjectChange.Entity;
			}
			set
			{
				N_ObjectChange previousValue = this._ObjectChange.Entity;
				if (((previousValue != value)
							|| (this._ObjectChange.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectChange.Entity = null;
						previousValue.PropertyChanges.Remove(this);
					}
					this._ObjectChange.Entity = value;
					if ((value != null))
					{
						value.PropertyChanges.Add(this);
						this._ObjectChangeID = value.ObjectChangeID;
					}
					else
					{
						this._ObjectChangeID = default(int);
					}
					this.SendPropertyChanged("ObjectChange");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.N_ReplicationObject")]
	public partial class N_ReplicationObject : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private string _ObjectTypeSysName;

		private string _ObjectID;

		private System.DateTime _ChangeDate;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnObjectTypeSysNameChanging(string value);
		partial void OnObjectTypeSysNameChanged();
		partial void OnObjectIDChanging(string value);
		partial void OnObjectIDChanged();
		partial void OnChangeDateChanging(System.DateTime value);
		partial void OnChangeDateChanged();
		#endregion

		public N_ReplicationObject()
		{
			OnCreated();
		}

		[Column(Storage = "_ObjectTypeSysName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
		public string ObjectTypeSysName
		{
			get
			{
				return this._ObjectTypeSysName;
			}
			set
			{
				if ((this._ObjectTypeSysName != value))
				{
					this.OnObjectTypeSysNameChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeSysName = value;
					this.SendPropertyChanged("ObjectTypeSysName");
					this.OnObjectTypeSysNameChanged();
				}
			}
		}

		[Column(Storage = "_ObjectID", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
		public string ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}

		[Column(Storage = "_ChangeDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime ChangeDate
		{
			get
			{
				return this._ChangeDate;
			}
			set
			{
				if ((this._ChangeDate != value))
				{
					this.OnChangeDateChanging(value);
					this.SendPropertyChanging();
					this._ChangeDate = value;
					this.SendPropertyChanged("ChangeDate");
					this.OnChangeDateChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.N_RssFeed")]
	public partial class N_RssFeed : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _RssFeedID;

		private string _Copyright;

		private string _Description;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _ObjectTypeSysName;

		private string _Predicate;

		private string _PubDate;

		private string _SysName;

		private string _Title;

		private int _Ttl;

		private string _ViewFormSysName;

		private string _Author;

		private string _WebMaster;

		private string _LinkParams;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnRssFeedIDChanging(int value);
		partial void OnRssFeedIDChanged();
		partial void OnCopyrightChanging(string value);
		partial void OnCopyrightChanged();
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnObjectTypeSysNameChanging(string value);
		partial void OnObjectTypeSysNameChanged();
		partial void OnPredicateChanging(string value);
		partial void OnPredicateChanged();
		partial void OnPubDateChanging(string value);
		partial void OnPubDateChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnTtlChanging(int value);
		partial void OnTtlChanged();
		partial void OnViewFormSysNameChanging(string value);
		partial void OnViewFormSysNameChanged();
		partial void OnAuthorChanging(string value);
		partial void OnAuthorChanged();
		partial void OnWebMasterChanging(string value);
		partial void OnWebMasterChanged();
		partial void OnLinkParamsChanging(string value);
		partial void OnLinkParamsChanged();
		#endregion

		public N_RssFeed()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_RssFeedID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int RssFeedID
		{
			get
			{
				return this._RssFeedID;
			}
			set
			{
				if ((this._RssFeedID != value))
				{
					this.OnRssFeedIDChanging(value);
					this.SendPropertyChanging();
					this._RssFeedID = value;
					this.SendPropertyChanged("RssFeedID");
					this.OnRssFeedIDChanged();
				}
			}
		}

		[Column(Storage = "_Copyright", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Copyright
		{
			get
			{
				return this._Copyright;
			}
			set
			{
				if ((this._Copyright != value))
				{
					this.OnCopyrightChanging(value);
					this.SendPropertyChanging();
					this._Copyright = value;
					this.SendPropertyChanged("Copyright");
					this.OnCopyrightChanged();
				}
			}
		}

		[Column(Storage = "_Description", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_ObjectTypeSysName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ObjectTypeSysName
		{
			get
			{
				return this._ObjectTypeSysName;
			}
			set
			{
				if ((this._ObjectTypeSysName != value))
				{
					this.OnObjectTypeSysNameChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeSysName = value;
					this.SendPropertyChanged("ObjectTypeSysName");
					this.OnObjectTypeSysNameChanged();
				}
			}
		}

		[Column(Storage = "_Predicate", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Predicate
		{
			get
			{
				return this._Predicate;
			}
			set
			{
				if ((this._Predicate != value))
				{
					this.OnPredicateChanging(value);
					this.SendPropertyChanging();
					this._Predicate = value;
					this.SendPropertyChanged("Predicate");
					this.OnPredicateChanged();
				}
			}
		}

		[Column(Storage = "_PubDate", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string PubDate
		{
			get
			{
				return this._PubDate;
			}
			set
			{
				if ((this._PubDate != value))
				{
					this.OnPubDateChanging(value);
					this.SendPropertyChanging();
					this._PubDate = value;
					this.SendPropertyChanged("PubDate");
					this.OnPubDateChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Ttl", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int Ttl
		{
			get
			{
				return this._Ttl;
			}
			set
			{
				if ((this._Ttl != value))
				{
					this.OnTtlChanging(value);
					this.SendPropertyChanging();
					this._Ttl = value;
					this.SendPropertyChanged("Ttl");
					this.OnTtlChanged();
				}
			}
		}

		[Column(Storage = "_ViewFormSysName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ViewFormSysName
		{
			get
			{
				return this._ViewFormSysName;
			}
			set
			{
				if ((this._ViewFormSysName != value))
				{
					this.OnViewFormSysNameChanging(value);
					this.SendPropertyChanging();
					this._ViewFormSysName = value;
					this.SendPropertyChanged("ViewFormSysName");
					this.OnViewFormSysNameChanged();
				}
			}
		}

		[Column(Storage = "_Author", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}

		[Column(Storage = "_WebMaster", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string WebMaster
		{
			get
			{
				return this._WebMaster;
			}
			set
			{
				if ((this._WebMaster != value))
				{
					this.OnWebMasterChanging(value);
					this.SendPropertyChanging();
					this._WebMaster = value;
					this.SendPropertyChanged("WebMaster");
					this.OnWebMasterChanged();
				}
			}
		}

		[Column(Storage = "_LinkParams", DbType = "NVarChar(255)", UpdateCheck = UpdateCheck.Never)]
		public string LinkParams
		{
			get
			{
				return this._LinkParams;
			}
			set
			{
				if ((this._LinkParams != value))
				{
					this.OnLinkParamsChanging(value);
					this.SendPropertyChanging();
					this._LinkParams = value;
					this.SendPropertyChanged("LinkParams");
					this.OnLinkParamsChanged();
				}
			}
		}

		[Association(Name = "FK_N_RssFeed_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.N_RssFeed.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.N_RssFeed.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.N_Settings")]
	public partial class N_Settings : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private string _SystemName;

		private string _Title;

		private string _Value;

		private bool _IsSystem;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _AcceptableValues;

		private System.Guid _SettingsGUID;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSystemNameChanging(string value);
		partial void OnSystemNameChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnValueChanging(string value);
		partial void OnValueChanged();
		partial void OnIsSystemChanging(bool value);
		partial void OnIsSystemChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnAcceptableValuesChanging(string value);
		partial void OnAcceptableValuesChanged();
		partial void OnSettingsGUIDChanging(System.Guid value);
		partial void OnSettingsGUIDChanged();
		#endregion

		public N_Settings()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_SystemName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SystemName
		{
			get
			{
				return this._SystemName;
			}
			set
			{
				if ((this._SystemName != value))
				{
					this.OnSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SystemName = value;
					this.SendPropertyChanged("SystemName");
					this.OnSystemNameChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Value", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}

		[Column(Storage = "_IsSystem", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsSystem
		{
			get
			{
				return this._IsSystem;
			}
			set
			{
				if ((this._IsSystem != value))
				{
					this.OnIsSystemChanging(value);
					this.SendPropertyChanging();
					this._IsSystem = value;
					this.SendPropertyChanged("IsSystem");
					this.OnIsSystemChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_AcceptableValues", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string AcceptableValues
		{
			get
			{
				return this._AcceptableValues;
			}
			set
			{
				if ((this._AcceptableValues != value))
				{
					this.OnAcceptableValuesChanging(value);
					this.SendPropertyChanging();
					this._AcceptableValues = value;
					this.SendPropertyChanged("AcceptableValues");
					this.OnAcceptableValuesChanged();
				}
			}
		}

		[Column(Storage = "_SettingsGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid SettingsGUID
		{
			get
			{
				return this._SettingsGUID;
			}
			set
			{
				if ((this._SettingsGUID != value))
				{
					this.OnSettingsGUIDChanging(value);
					this.SendPropertyChanging();
					this._SettingsGUID = value;
					this.SendPropertyChanged("SettingsGUID");
					this.OnSettingsGUIDChanged();
				}
			}
		}

		[Association(Name = "FK_N_Settings_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.N_Settings.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.N_Settings.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.N_SqlStatementLog")]
	public partial class N_SqlStatementLog : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SqlStatementLogID;

		private string _Title;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _IP;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSqlStatementLogIDChanging(int value);
		partial void OnSqlStatementLogIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnIPChanging(string value);
		partial void OnIPChanged();
		#endregion

		public N_SqlStatementLog()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_SqlStatementLogID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int SqlStatementLogID
		{
			get
			{
				return this._SqlStatementLogID;
			}
			set
			{
				if ((this._SqlStatementLogID != value))
				{
					this.OnSqlStatementLogIDChanging(value);
					this.SendPropertyChanging();
					this._SqlStatementLogID = value;
					this.SendPropertyChanged("SqlStatementLogID");
					this.OnSqlStatementLogIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_IP", DbType = "NVarChar(15) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}

		[Association(Name = "FK_N_SqlStatementLog_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.N_SqlStatementLog.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.N_SqlStatementLog.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.N_TableInfo")]
	public partial class N_TableInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private string _TableName;

		private System.DateTime _LastDataModify;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnTableNameChanging(string value);
		partial void OnTableNameChanged();
		partial void OnLastDataModifyChanging(System.DateTime value);
		partial void OnLastDataModifyChanged();
		#endregion

		public N_TableInfo()
		{
			OnCreated();
		}

		[Column(Storage = "_TableName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}

		[Column(Storage = "_LastDataModify", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime LastDataModify
		{
			get
			{
				return this._LastDataModify;
			}
			set
			{
				if ((this._LastDataModify != value))
				{
					this.OnLastDataModifyChanging(value);
					this.SendPropertyChanging();
					this._LastDataModify = value;
					this.SendPropertyChanged("LastDataModify");
					this.OnLastDataModifyChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.N_TextResource")]
	public partial class N_TextResource : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _TextResourceID;

		private string _Title;

		private string _SysName;

		private EntitySet<N_TextResourceData> _N_TextResourceData;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnTextResourceIDChanging(int value);
		partial void OnTextResourceIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		#endregion

		public N_TextResource()
		{
			this._N_TextResourceData = new EntitySet<N_TextResourceData>(new Action<N_TextResourceData>(this.attach_N_TextResourceData), new Action<N_TextResourceData>(this.detach_N_TextResourceData));
			OnCreated();
		}

		[Column(Storage = "_TextResourceID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int TextResourceID
		{
			get
			{
				return this._TextResourceID;
			}
			set
			{
				if ((this._TextResourceID != value))
				{
					this.OnTextResourceIDChanging(value);
					this.SendPropertyChanging();
					this._TextResourceID = value;
					this.SendPropertyChanged("TextResourceID");
					this.OnTextResourceIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Association(Name = "FK_N_TextResourceData_N_TextResource", Storage = "_N_TextResourceData", ThisKey = "TextResourceID", OtherKey = "TextResourceID", DeleteRule = "CASCADE")]
		public EntitySet<N_TextResourceData> N_TextResourceData
		{
			get
			{
				return this._N_TextResourceData;
			}
			set
			{
				this._N_TextResourceData.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_N_TextResourceData(N_TextResourceData entity)
		{
			this.SendPropertyChanging();
			entity.N_TextResource = this;
		}

		private void detach_N_TextResourceData(N_TextResourceData entity)
		{
			this.SendPropertyChanging();
			entity.N_TextResource = null;
		}
	}

	[Table(Name = "dbo.N_TextResourceData")]
	public partial class N_TextResourceData : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _N_TextResourceDataID;

		private int _TextResourceID;

		private string _LanguageCode;

		private string _Text;

		private EntityRef<C_Language> _C_Language;

		private EntityRef<N_TextResource> _N_TextResource;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnN_TextResourceDataIDChanging(int value);
		partial void OnN_TextResourceDataIDChanged();
		partial void OnTextResourceIDChanging(int value);
		partial void OnTextResourceIDChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnTextChanging(string value);
		partial void OnTextChanged();
		#endregion

		public N_TextResourceData()
		{
			this._C_Language = default(EntityRef<C_Language>);
			this._N_TextResource = default(EntityRef<N_TextResource>);
			OnCreated();
		}

		[Column(Storage = "_N_TextResourceDataID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int N_TextResourceDataID
		{
			get
			{
				return this._N_TextResourceDataID;
			}
			set
			{
				if ((this._N_TextResourceDataID != value))
				{
					this.OnN_TextResourceDataIDChanging(value);
					this.SendPropertyChanging();
					this._N_TextResourceDataID = value;
					this.SendPropertyChanged("N_TextResourceDataID");
					this.OnN_TextResourceDataIDChanged();
				}
			}
		}

		[Column(Storage = "_TextResourceID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int TextResourceID
		{
			get
			{
				return this._TextResourceID;
			}
			set
			{
				if ((this._TextResourceID != value))
				{
					if (this._N_TextResource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTextResourceIDChanging(value);
					this.SendPropertyChanging();
					this._TextResourceID = value;
					this.SendPropertyChanged("TextResourceID");
					this.OnTextResourceIDChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					if (this._C_Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_Text", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}

		[Association(Name = "FK_N_TextResourceData_C_Language", Storage = "_C_Language", ThisKey = "LanguageCode", OtherKey = "LanguageCode", IsForeignKey = true, DeleteOnNull = true)]
		public C_Language C_Language
		{
			get
			{
				return this._C_Language.Entity;
			}
			set
			{
				C_Language previousValue = this._C_Language.Entity;
				if (((previousValue != value)
							|| (this._C_Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_Language.Entity = null;
						previousValue.N_TextResourceData.Remove(this);
					}
					this._C_Language.Entity = value;
					if ((value != null))
					{
						value.N_TextResourceData.Add(this);
						this._LanguageCode = value.LanguageCode;
					}
					else
					{
						this._LanguageCode = default(string);
					}
					this.SendPropertyChanged("C_Language");
				}
			}
		}

		[Association(Name = "FK_N_TextResourceData_N_TextResource", Storage = "_N_TextResource", ThisKey = "TextResourceID", OtherKey = "TextResourceID", IsForeignKey = true, DeleteOnNull = true)]
		public N_TextResource N_TextResource
		{
			get
			{
				return this._N_TextResource.Entity;
			}
			set
			{
				N_TextResource previousValue = this._N_TextResource.Entity;
				if (((previousValue != value)
							|| (this._N_TextResource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._N_TextResource.Entity = null;
						previousValue.N_TextResourceData.Remove(this);
					}
					this._N_TextResource.Entity = value;
					if ((value != null))
					{
						value.N_TextResourceData.Add(this);
						this._TextResourceID = value.TextResourceID;
					}
					else
					{
						this._TextResourceID = default(int);
					}
					this.SendPropertyChanged("N_TextResource");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.N_TimeZone")]
	public partial class N_TimeZone : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _TimeZoneID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private int _GMTOffset;

		private string _Comment;

		private EntitySet<C_RFSubject> _C_RFSubject;

		private EntitySet<HST_N_TimeZone> _HST_N_TimeZone;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnTimeZoneIDChanging(int value);
		partial void OnTimeZoneIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnGMTOffsetChanging(int value);
		partial void OnGMTOffsetChanged();
		partial void OnCommentChanging(string value);
		partial void OnCommentChanged();
		#endregion

		public N_TimeZone()
		{
			this._C_RFSubject = new EntitySet<C_RFSubject>(new Action<C_RFSubject>(this.attach_C_RFSubject), new Action<C_RFSubject>(this.detach_C_RFSubject));
			this._HST_N_TimeZone = new EntitySet<HST_N_TimeZone>(new Action<HST_N_TimeZone>(this.attach_HST_N_TimeZone), new Action<HST_N_TimeZone>(this.detach_HST_N_TimeZone));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_TimeZoneID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int TimeZoneID
		{
			get
			{
				return this._TimeZoneID;
			}
			set
			{
				if ((this._TimeZoneID != value))
				{
					this.OnTimeZoneIDChanging(value);
					this.SendPropertyChanging();
					this._TimeZoneID = value;
					this.SendPropertyChanged("TimeZoneID");
					this.OnTimeZoneIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_GMTOffset", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int GMTOffset
		{
			get
			{
				return this._GMTOffset;
			}
			set
			{
				if ((this._GMTOffset != value))
				{
					this.OnGMTOffsetChanging(value);
					this.SendPropertyChanging();
					this._GMTOffset = value;
					this.SendPropertyChanged("GMTOffset");
					this.OnGMTOffsetChanged();
				}
			}
		}

		[Column(Storage = "_Comment", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}

		[Association(Name = "FK_C_RFSubject_TimeZone", Storage = "_C_RFSubject", ThisKey = "TimeZoneID", OtherKey = "TimeZoneID", DeleteRule = "NO ACTION")]
		public EntitySet<C_RFSubject> C_RFSubject
		{
			get
			{
				return this._C_RFSubject;
			}
			set
			{
				this._C_RFSubject.Assign(value);
			}
		}

		[Association(Name = "FK_HST_N_TimeZone_N_TimeZone", Storage = "_HST_N_TimeZone", ThisKey = "TimeZoneID", OtherKey = "TimeZoneID", DeleteRule = "CASCADE")]
		public EntitySet<HST_N_TimeZone> HST_N_TimeZone
		{
			get
			{
				return this._HST_N_TimeZone;
			}
			set
			{
				this._HST_N_TimeZone.Assign(value);
			}
		}

		[Association(Name = "FK_N_TimeZone_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.N_TimeZone.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.N_TimeZone.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_C_RFSubject(C_RFSubject entity)
		{
			this.SendPropertyChanging();
			entity.TimeZone = this;
		}

		private void detach_C_RFSubject(C_RFSubject entity)
		{
			this.SendPropertyChanging();
			entity.TimeZone = null;
		}

		private void attach_HST_N_TimeZone(HST_N_TimeZone entity)
		{
			this.SendPropertyChanging();
			entity.N_TimeZone = this;
		}

		private void detach_HST_N_TimeZone(HST_N_TimeZone entity)
		{
			this.SendPropertyChanging();
			entity.N_TimeZone = null;
		}
	}

	[Table(Name = "dbo.N_VirusScanLog")]
	public partial class N_VirusScanLog : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _VirusScanLogID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private int _ResultCode;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnVirusScanLogIDChanging(int value);
		partial void OnVirusScanLogIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnResultCodeChanging(int value);
		partial void OnResultCodeChanged();
		#endregion

		public N_VirusScanLog()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_VirusScanLogID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int VirusScanLogID
		{
			get
			{
				return this._VirusScanLogID;
			}
			set
			{
				if ((this._VirusScanLogID != value))
				{
					this.OnVirusScanLogIDChanging(value);
					this.SendPropertyChanging();
					this._VirusScanLogID = value;
					this.SendPropertyChanged("VirusScanLogID");
					this.OnVirusScanLogIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_ResultCode", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ResultCode
		{
			get
			{
				return this._ResultCode;
			}
			set
			{
				if ((this._ResultCode != value))
				{
					this.OnResultCodeChanging(value);
					this.SendPropertyChanging();
					this._ResultCode = value;
					this.SendPropertyChanged("ResultCode");
					this.OnResultCodeChanged();
				}
			}
		}

		[Association(Name = "FK_N_VirusScanLog_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.N_VirusScanLog.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.N_VirusScanLog.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.News")]
	public partial class News : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _NewsID;

		private System.Nullable<int> _ImageFileID;

		private System.DateTime _NewsDate;

		private EntityRef<N_File> _Image;

		private EntityRef<SiteObject> _SiteObject;

		private EntitySet<NewsData> _NewsData;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnNewsIDChanging(int value);
		partial void OnNewsIDChanged();
		partial void OnImageFileIDChanging(System.Nullable<int> value);
		partial void OnImageFileIDChanged();
		partial void OnNewsDateChanging(System.DateTime value);
		partial void OnNewsDateChanged();
		#endregion

		public News()
		{
			this._Image = default(EntityRef<N_File>);
			this._SiteObject = default(EntityRef<SiteObject>);
			this._NewsData = new EntitySet<NewsData>(new Action<NewsData>(this.attach_NewsData), new Action<NewsData>(this.detach_NewsData));
			OnCreated();
		}

		[Column(Storage = "_NewsID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int NewsID
		{
			get
			{
				return this._NewsID;
			}
			set
			{
				if ((this._NewsID != value))
				{
					if (this._SiteObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewsIDChanging(value);
					this.SendPropertyChanging();
					this._NewsID = value;
					this.SendPropertyChanged("NewsID");
					this.OnNewsIDChanged();
				}
			}
		}

		[Column(Storage = "_ImageFileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ImageFileID
		{
			get
			{
				return this._ImageFileID;
			}
			set
			{
				if ((this._ImageFileID != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImageFileIDChanging(value);
					this.SendPropertyChanging();
					this._ImageFileID = value;
					this.SendPropertyChanged("ImageFileID");
					this.OnImageFileIDChanged();
				}
			}
		}

		[Column(Storage = "_NewsDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime NewsDate
		{
			get
			{
				return this._NewsDate;
			}
			set
			{
				if ((this._NewsDate != value))
				{
					this.OnNewsDateChanging(value);
					this.SendPropertyChanging();
					this._NewsDate = value;
					this.SendPropertyChanged("NewsDate");
					this.OnNewsDateChanged();
				}
			}
		}

		[Association(Name = "FK_News_Image", Storage = "_Image", ThisKey = "ImageFileID", OtherKey = "FileID", IsForeignKey = true)]
		public N_File Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				N_File previousValue = this._Image.Entity;
				if (((previousValue != value)
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.News.Remove(this);
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.News.Add(this);
						this._ImageFileID = value.FileID;
					}
					else
					{
						this._ImageFileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}

		[Association(Name = "FK_News_SiteObject", Storage = "_SiteObject", ThisKey = "NewsID", OtherKey = "SiteObjectID", IsForeignKey = true, DeleteOnNull = true)]
		public SiteObject SiteObject
		{
			get
			{
				return this._SiteObject.Entity;
			}
			set
			{
				SiteObject previousValue = this._SiteObject.Entity;
				if (((previousValue != value)
							|| (this._SiteObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SiteObject.Entity = null;
						previousValue.News = null;
					}
					this._SiteObject.Entity = value;
					if ((value != null))
					{
						value.News = this;
						this._NewsID = value.SiteObjectID;
					}
					else
					{
						this._NewsID = default(int);
					}
					this.SendPropertyChanged("SiteObject");
				}
			}
		}

		[Association(Name = "FK_NewsData_News", Storage = "_NewsData", ThisKey = "NewsID", OtherKey = "NewsID", DeleteRule = "CASCADE")]
		public EntitySet<NewsData> NewsData
		{
			get
			{
				return this._NewsData;
			}
			set
			{
				this._NewsData.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_NewsData(NewsData entity)
		{
			this.SendPropertyChanging();
			entity.News = this;
		}

		private void detach_NewsData(NewsData entity)
		{
			this.SendPropertyChanging();
			entity.News = null;
		}
	}

	[Table(Name = "dbo.NewsData")]
	public partial class NewsData : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _NewsDataID;

		private int _NewsID;

		private string _LanguageCode;

		private string _ShortContent;

		private string _Content;

		private EntityRef<C_Language> _C_Language;

		private EntityRef<News> _News;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnNewsDataIDChanging(int value);
		partial void OnNewsDataIDChanged();
		partial void OnNewsIDChanging(int value);
		partial void OnNewsIDChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnShortContentChanging(string value);
		partial void OnShortContentChanged();
		partial void OnContentChanging(string value);
		partial void OnContentChanged();
		#endregion

		public NewsData()
		{
			this._C_Language = default(EntityRef<C_Language>);
			this._News = default(EntityRef<News>);
			OnCreated();
		}

		[Column(Storage = "_NewsDataID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int NewsDataID
		{
			get
			{
				return this._NewsDataID;
			}
			set
			{
				if ((this._NewsDataID != value))
				{
					this.OnNewsDataIDChanging(value);
					this.SendPropertyChanging();
					this._NewsDataID = value;
					this.SendPropertyChanged("NewsDataID");
					this.OnNewsDataIDChanged();
				}
			}
		}

		[Column(Storage = "_NewsID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int NewsID
		{
			get
			{
				return this._NewsID;
			}
			set
			{
				if ((this._NewsID != value))
				{
					if (this._News.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewsIDChanging(value);
					this.SendPropertyChanging();
					this._NewsID = value;
					this.SendPropertyChanged("NewsID");
					this.OnNewsIDChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					if (this._C_Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_ShortContent", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ShortContent
		{
			get
			{
				return this._ShortContent;
			}
			set
			{
				if ((this._ShortContent != value))
				{
					this.OnShortContentChanging(value);
					this.SendPropertyChanging();
					this._ShortContent = value;
					this.SendPropertyChanged("ShortContent");
					this.OnShortContentChanged();
				}
			}
		}

		[Column(Storage = "_Content", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}

		[Association(Name = "FK_NewsData_C_Language", Storage = "_C_Language", ThisKey = "LanguageCode", OtherKey = "LanguageCode", IsForeignKey = true, DeleteOnNull = true)]
		public C_Language C_Language
		{
			get
			{
				return this._C_Language.Entity;
			}
			set
			{
				C_Language previousValue = this._C_Language.Entity;
				if (((previousValue != value)
							|| (this._C_Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_Language.Entity = null;
						previousValue.NewsData.Remove(this);
					}
					this._C_Language.Entity = value;
					if ((value != null))
					{
						value.NewsData.Add(this);
						this._LanguageCode = value.LanguageCode;
					}
					else
					{
						this._LanguageCode = default(string);
					}
					this.SendPropertyChanged("C_Language");
				}
			}
		}

		[Association(Name = "FK_NewsData_News", Storage = "_News", ThisKey = "NewsID", OtherKey = "NewsID", IsForeignKey = true, DeleteOnNull = true)]
		public News News
		{
			get
			{
				return this._News.Entity;
			}
			set
			{
				News previousValue = this._News.Entity;
				if (((previousValue != value)
							|| (this._News.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._News.Entity = null;
						previousValue.NewsData.Remove(this);
					}
					this._News.Entity = value;
					if ((value != null))
					{
						value.NewsData.Add(this);
						this._NewsID = value.NewsID;
					}
					else
					{
						this._NewsID = default(int);
					}
					this.SendPropertyChanged("News");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.OrderDoc")]
	public partial class OrderDoc : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _OrderGUID;

		private char _OrderType;

		private string _Title;

		private System.Nullable<System.DateTime> _OrderDate;

		private System.Nullable<System.DateTime> _CreateDate;

		private System.Nullable<System.DateTime> _DeclaredFromDate;

		private System.Nullable<System.DateTime> _DeclaredValidity;

		private System.Nullable<System.DateTime> _TargetFromDate;

		private System.Nullable<System.DateTime> _TargetValidity;

		private System.Nullable<int> _LicenseTypeID;

		private System.Nullable<int> _OperationTypeID;

		private string _ContractNo;

		private System.Nullable<System.DateTime> _ContractDate;

		private string _DealerName;

		private string _DealerAddress;

		private System.Nullable<int> _Country1ID;

		private System.Nullable<int> _Country2ID;

		private System.Nullable<int> _Country3ID;

		private System.Nullable<System.Guid> _ApplicantGUID;

		private bool _CanReissurance;

		private System.Nullable<int> _QuotaCountryGroupID;

		private System.Nullable<System.Guid> _QuoteOwnerGUID;

		private System.Nullable<int> _CNCategoryID;

		private System.Nullable<int> _CNID;

		private string _CommodityComment;

		private System.Nullable<decimal> _ResolvedQuantity;

		private System.Nullable<int> _MeasureID;

		private System.Nullable<decimal> _StatisticCost;

		private System.Nullable<decimal> _ContractCost;

		private System.Nullable<int> _PaymentCurrencyID;

		private System.Nullable<decimal> _AddResolvedQuantity;

		private System.Nullable<int> _AddMeasureID;

		private string _AdditionalInfo;

		private System.Nullable<System.DateTime> _FactShippedDate;

		private System.Nullable<decimal> _FactShippedQuantity;

		private System.Nullable<bool> _IsImported;

		private System.Nullable<System.Guid> _Guid;

		private string _InnerNumber;

		private System.Nullable<decimal> _OldID;

		private System.Nullable<int> _QuotaPeriod;

		private System.Nullable<System.DateTime> _UploadDate;

		private int _ActivityID;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private bool _IsDeleted;

		private System.Nullable<System.Guid> _ApplicantChiefGUID;

		private System.Nullable<System.Guid> _QuoteOwnerChiefGUID;

		private string _FactShippedGTD;

		private System.Nullable<System.Guid> _ApplicantRepresentativeGUID;

		private System.Nullable<int> _EmployeeID;

		private System.Nullable<System.DateTime> _RegDate;

		private string _RegNo;

		private System.Nullable<System.DateTime> _ChanceryRegDate;

		private string _ChanceryRegNo;

		private System.Nullable<int> _RepresentationID;

		private System.Nullable<int> _RegEmployeeID;

		private System.Nullable<System.DateTime> _SignDate;

		private string _CurState;

		private string _IssueApplicant;

		private string _IssueAttorney;

		private System.Nullable<System.DateTime> _IssueDate;

		private System.Nullable<int> _IssueEmployeeID;

		private string _Copy_Country1_Alpha2;

		private string _Copy_Country2_Alpha2;

		private string _Copy_Country3_Alpha2;

		private string _Copy_Country1_Title;

		private string _Copy_Country2_Title;

		private string _Copy_Country3_Title;

		private string _Copy_CN_Title;

		private string _Copy_Measure_Title;

		private string _Copy_PaymentCurrency_Code;

		private string _Copy_PaymentCurrency_Title;

		private string _Copy_AddMeasure_Title;

		private System.Nullable<int> _SiteNumber;

		private string _CurStateSite;

		private string _Comment;

		private bool _Activity_IsDraft;

		private string _Activity_SysName;

		private string _Activity_Title;

		private System.Nullable<int> _FactForm_EmployeeID;

		private System.Nullable<System.DateTime> _FactForm_FormDate;

		private System.Nullable<System.DateTime> _FactForm_SignDate;

		private System.Nullable<System.DateTime> _OrderDocTransition_CreateDate;

		private string _Copy_CNCategory_Title;

		private System.Nullable<int> _FactShippedMeasureID;

		private string _Copy_OperationType_Title;

		private string _Copy_LicenseType_Title;

		private int _UniqueIndex;

		private string _Copy_Applicant_INN;

		private string _Copy_Applicant_OKPO;

		private string _Copy_Applicant_Title;

		private string _Copy_Applicant_JuridicalAddress;

		private string _Copy_Applicant_Email;

		private string _Copy_Applicant_Phone;

		private string _Copy_Applicant_PassportSerial;

		private string _Copy_Applicant_PassportNumber;

		private string _Copy_Applicant_PassportIssuedBy;

		private System.Nullable<System.DateTime> _Copy_Applicant_PassportIssuedDate;

		private string _Copy_QuotaOwner_INN;

		private string _Copy_QuotaOwner_OKPO;

		private string _Copy_QuotaOwner_Title;

		private string _Copy_QuotaOwner_JuridicalAddress;

		private string _Copy_QuotaOwner_Email;

		private string _Copy_QuotaOwner_Phone;

		private string _Copy_QuotaOwner_PassportSerial;

		private string _Copy_QuotaOwner_PassportNumber;

		private string _Copy_QuotaOwner_PassportIssuedBy;

		private System.Nullable<System.DateTime> _Copy_QuotaOwner_PassportIssuedDate;

		private string _Copy_QuotaOwner_Fax;

		private string _Copy_GIText;

		private string _StampCode;

		private string _FactForm_EmployeePost;

		private string _FactForm_EmployeeTitle;

		private string _Copy_CN_Code;

		private bool _IsSigned;

		private string _UCN;

		private System.Nullable<char> _PassportState;

		private System.Nullable<char> _OrderState;

		private string _LicenseNo;

		private string _FactData;

		private string _Email;

		private System.Nullable<int> _MFCID;

		private string _AddInfoLetter;

		private EntitySet<Appendix> _AppendixItems;

		private EntitySet<Blank> _Blanks;

		private EntitySet<CommodityDocument> _CommodityDocs;

		private EntitySet<Copy_ContractorChiefPerson> _Copy_ContractorChiefPerson;

		private EntitySet<CustomsDeclaration> _CustomsDeclaration;

		private EntitySet<Letter> _Letter;

		private EntitySet<LicenseExecution> _Execution;

		private EntityRef<WF_Activity> _Activity;

		private EntityRef<C_Measure> _AddMeasure;

		private EntityRef<HST_Contractor> _Applicant;

		private EntityRef<ContractorChiefPerson> _ApplicantChief;

		private EntityRef<ContractorChiefPerson> _ApplicantRepresentative;

		private EntityRef<C_CN> _CN;

		private EntityRef<C_CNCategory> _CNCategory;

		private EntityRef<C_Country> _Country1;

		private EntityRef<C_Country> _Country2;

		private EntityRef<C_Country> _Country3;

		private EntityRef<Employee> _Employee;

		private EntityRef<Employee> _FactForm_Employee;

		private EntityRef<C_Measure> _FactShippedMeasure;

		private EntityRef<Employee> _IssueEmployee;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<C_LicenseType> _LicenseType;

		private EntityRef<C_Measure> _Measure;

		private EntityRef<C_MFC> _MFC;

		private EntityRef<C_OperationType> _OperationType;

		private EntityRef<C_Currency> _PaymentCurrency;

		private EntityRef<C_CountryGroup> _QuotaCountryGroup;

		private EntityRef<HST_Contractor> _QuoteOwner;

		private EntityRef<ContractorChiefPerson> _QuoteOwnerChief;

		private EntityRef<Employee> _RegEmployee;

		private EntityRef<Representation> _Representation;

		private EntitySet<OrderDocAsso> _OrderDocAsso;

		private EntitySet<OrderDocAsso> _OrderGU;

		private EntitySet<OrderDocDeviation> _Declensions;

		private EntitySet<OrderDocImportSubject> _OrderDocImportSubject;

		private EntitySet<OrderDocState> _States;

		private EntitySet<OrderDocTransition> _OrderDocTransition;

		private EntitySet<PaymentOrder> _LicensePaymentOrders;

		private EntitySet<PaymentOrder> _RequestPaymentOrders;

		private EntitySet<PaymentOrderLicenses> _PaymentOrderLicenses;

		private EntitySet<PaymentOrderRequests> _PaymentOrderRequests;

		private EntitySet<QuotaRequest> _QuotaRequest;

		private EntitySet<SpecificationCommon> _SpecificationCommon;

		private EntitySet<SpecificationItem> _SpecificationItem;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnOrderGUIDChanging(System.Guid value);
		partial void OnOrderGUIDChanged();
		partial void OnOrderTypeChanging(char value);
		partial void OnOrderTypeChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
		partial void OnOrderDateChanged();
		partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
		partial void OnCreateDateChanged();
		partial void OnDeclaredFromDateChanging(System.Nullable<System.DateTime> value);
		partial void OnDeclaredFromDateChanged();
		partial void OnDeclaredValidityChanging(System.Nullable<System.DateTime> value);
		partial void OnDeclaredValidityChanged();
		partial void OnTargetFromDateChanging(System.Nullable<System.DateTime> value);
		partial void OnTargetFromDateChanged();
		partial void OnTargetValidityChanging(System.Nullable<System.DateTime> value);
		partial void OnTargetValidityChanged();
		partial void OnLicenseTypeIDChanging(System.Nullable<int> value);
		partial void OnLicenseTypeIDChanged();
		partial void OnOperationTypeIDChanging(System.Nullable<int> value);
		partial void OnOperationTypeIDChanged();
		partial void OnContractNoChanging(string value);
		partial void OnContractNoChanged();
		partial void OnContractDateChanging(System.Nullable<System.DateTime> value);
		partial void OnContractDateChanged();
		partial void OnDealerNameChanging(string value);
		partial void OnDealerNameChanged();
		partial void OnDealerAddressChanging(string value);
		partial void OnDealerAddressChanged();
		partial void OnCountry1IDChanging(System.Nullable<int> value);
		partial void OnCountry1IDChanged();
		partial void OnCountry2IDChanging(System.Nullable<int> value);
		partial void OnCountry2IDChanged();
		partial void OnCountry3IDChanging(System.Nullable<int> value);
		partial void OnCountry3IDChanged();
		partial void OnApplicantGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnApplicantGUIDChanged();
		partial void OnCanReissuranceChanging(bool value);
		partial void OnCanReissuranceChanged();
		partial void OnQuotaCountryGroupIDChanging(System.Nullable<int> value);
		partial void OnQuotaCountryGroupIDChanged();
		partial void OnQuoteOwnerGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnQuoteOwnerGUIDChanged();
		partial void OnCNCategoryIDChanging(System.Nullable<int> value);
		partial void OnCNCategoryIDChanged();
		partial void OnCNIDChanging(System.Nullable<int> value);
		partial void OnCNIDChanged();
		partial void OnCommodityCommentChanging(string value);
		partial void OnCommodityCommentChanged();
		partial void OnResolvedQuantityChanging(System.Nullable<decimal> value);
		partial void OnResolvedQuantityChanged();
		partial void OnMeasureIDChanging(System.Nullable<int> value);
		partial void OnMeasureIDChanged();
		partial void OnStatisticCostChanging(System.Nullable<decimal> value);
		partial void OnStatisticCostChanged();
		partial void OnContractCostChanging(System.Nullable<decimal> value);
		partial void OnContractCostChanged();
		partial void OnPaymentCurrencyIDChanging(System.Nullable<int> value);
		partial void OnPaymentCurrencyIDChanged();
		partial void OnAddResolvedQuantityChanging(System.Nullable<decimal> value);
		partial void OnAddResolvedQuantityChanged();
		partial void OnAddMeasureIDChanging(System.Nullable<int> value);
		partial void OnAddMeasureIDChanged();
		partial void OnAdditionalInfoChanging(string value);
		partial void OnAdditionalInfoChanged();
		partial void OnFactShippedDateChanging(System.Nullable<System.DateTime> value);
		partial void OnFactShippedDateChanged();
		partial void OnFactShippedQuantityChanging(System.Nullable<decimal> value);
		partial void OnFactShippedQuantityChanged();
		partial void OnIsImportedChanging(System.Nullable<bool> value);
		partial void OnIsImportedChanged();
		partial void OnGuidChanging(System.Nullable<System.Guid> value);
		partial void OnGuidChanged();
		partial void OnInnerNumberChanging(string value);
		partial void OnInnerNumberChanged();
		partial void OnOldIDChanging(System.Nullable<decimal> value);
		partial void OnOldIDChanged();
		partial void OnQuotaPeriodChanging(System.Nullable<int> value);
		partial void OnQuotaPeriodChanged();
		partial void OnUploadDateChanging(System.Nullable<System.DateTime> value);
		partial void OnUploadDateChanged();
		partial void OnActivityIDChanging(int value);
		partial void OnActivityIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnApplicantChiefGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnApplicantChiefGUIDChanged();
		partial void OnQuoteOwnerChiefGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnQuoteOwnerChiefGUIDChanged();
		partial void OnFactShippedGTDChanging(string value);
		partial void OnFactShippedGTDChanged();
		partial void OnApplicantRepresentativeGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnApplicantRepresentativeGUIDChanged();
		partial void OnEmployeeIDChanging(System.Nullable<int> value);
		partial void OnEmployeeIDChanged();
		partial void OnRegDateChanging(System.Nullable<System.DateTime> value);
		partial void OnRegDateChanged();
		partial void OnRegNoChanging(string value);
		partial void OnRegNoChanged();
		partial void OnChanceryRegDateChanging(System.Nullable<System.DateTime> value);
		partial void OnChanceryRegDateChanged();
		partial void OnChanceryRegNoChanging(string value);
		partial void OnChanceryRegNoChanged();
		partial void OnRepresentationIDChanging(System.Nullable<int> value);
		partial void OnRepresentationIDChanged();
		partial void OnRegEmployeeIDChanging(System.Nullable<int> value);
		partial void OnRegEmployeeIDChanged();
		partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
		partial void OnSignDateChanged();
		partial void OnCurStateChanging(string value);
		partial void OnCurStateChanged();
		partial void OnIssueApplicantChanging(string value);
		partial void OnIssueApplicantChanged();
		partial void OnIssueAttorneyChanging(string value);
		partial void OnIssueAttorneyChanged();
		partial void OnIssueDateChanging(System.Nullable<System.DateTime> value);
		partial void OnIssueDateChanged();
		partial void OnIssueEmployeeIDChanging(System.Nullable<int> value);
		partial void OnIssueEmployeeIDChanged();
		partial void OnCopy_Country1_Alpha2Changing(string value);
		partial void OnCopy_Country1_Alpha2Changed();
		partial void OnCopy_Country2_Alpha2Changing(string value);
		partial void OnCopy_Country2_Alpha2Changed();
		partial void OnCopy_Country3_Alpha2Changing(string value);
		partial void OnCopy_Country3_Alpha2Changed();
		partial void OnCopy_Country1_TitleChanging(string value);
		partial void OnCopy_Country1_TitleChanged();
		partial void OnCopy_Country2_TitleChanging(string value);
		partial void OnCopy_Country2_TitleChanged();
		partial void OnCopy_Country3_TitleChanging(string value);
		partial void OnCopy_Country3_TitleChanged();
		partial void OnCopy_CN_TitleChanging(string value);
		partial void OnCopy_CN_TitleChanged();
		partial void OnCopy_Measure_TitleChanging(string value);
		partial void OnCopy_Measure_TitleChanged();
		partial void OnCopy_PaymentCurrency_CodeChanging(string value);
		partial void OnCopy_PaymentCurrency_CodeChanged();
		partial void OnCopy_PaymentCurrency_TitleChanging(string value);
		partial void OnCopy_PaymentCurrency_TitleChanged();
		partial void OnCopy_AddMeasure_TitleChanging(string value);
		partial void OnCopy_AddMeasure_TitleChanged();
		partial void OnSiteNumberChanging(System.Nullable<int> value);
		partial void OnSiteNumberChanged();
		partial void OnCurStateSiteChanging(string value);
		partial void OnCurStateSiteChanged();
		partial void OnCommentChanging(string value);
		partial void OnCommentChanged();
		partial void OnActivity_IsDraftChanging(bool value);
		partial void OnActivity_IsDraftChanged();
		partial void OnActivity_SysNameChanging(string value);
		partial void OnActivity_SysNameChanged();
		partial void OnActivity_TitleChanging(string value);
		partial void OnActivity_TitleChanged();
		partial void OnFactForm_EmployeeIDChanging(System.Nullable<int> value);
		partial void OnFactForm_EmployeeIDChanged();
		partial void OnFactForm_FormDateChanging(System.Nullable<System.DateTime> value);
		partial void OnFactForm_FormDateChanged();
		partial void OnFactForm_SignDateChanging(System.Nullable<System.DateTime> value);
		partial void OnFactForm_SignDateChanged();
		partial void OnOrderDocTransition_CreateDateChanging(System.Nullable<System.DateTime> value);
		partial void OnOrderDocTransition_CreateDateChanged();
		partial void OnCopy_CNCategory_TitleChanging(string value);
		partial void OnCopy_CNCategory_TitleChanged();
		partial void OnFactShippedMeasureIDChanging(System.Nullable<int> value);
		partial void OnFactShippedMeasureIDChanged();
		partial void OnCopy_OperationType_TitleChanging(string value);
		partial void OnCopy_OperationType_TitleChanged();
		partial void OnCopy_LicenseType_TitleChanging(string value);
		partial void OnCopy_LicenseType_TitleChanged();
		partial void OnUniqueIndexChanging(int value);
		partial void OnUniqueIndexChanged();
		partial void OnCopy_Applicant_INNChanging(string value);
		partial void OnCopy_Applicant_INNChanged();
		partial void OnCopy_Applicant_OKPOChanging(string value);
		partial void OnCopy_Applicant_OKPOChanged();
		partial void OnCopy_Applicant_TitleChanging(string value);
		partial void OnCopy_Applicant_TitleChanged();
		partial void OnCopy_Applicant_JuridicalAddressChanging(string value);
		partial void OnCopy_Applicant_JuridicalAddressChanged();
		partial void OnCopy_Applicant_EmailChanging(string value);
		partial void OnCopy_Applicant_EmailChanged();
		partial void OnCopy_Applicant_PhoneChanging(string value);
		partial void OnCopy_Applicant_PhoneChanged();
		partial void OnCopy_Applicant_PassportSerialChanging(string value);
		partial void OnCopy_Applicant_PassportSerialChanged();
		partial void OnCopy_Applicant_PassportNumberChanging(string value);
		partial void OnCopy_Applicant_PassportNumberChanged();
		partial void OnCopy_Applicant_PassportIssuedByChanging(string value);
		partial void OnCopy_Applicant_PassportIssuedByChanged();
		partial void OnCopy_Applicant_PassportIssuedDateChanging(System.Nullable<System.DateTime> value);
		partial void OnCopy_Applicant_PassportIssuedDateChanged();
		partial void OnCopy_QuotaOwner_INNChanging(string value);
		partial void OnCopy_QuotaOwner_INNChanged();
		partial void OnCopy_QuotaOwner_OKPOChanging(string value);
		partial void OnCopy_QuotaOwner_OKPOChanged();
		partial void OnCopy_QuotaOwner_TitleChanging(string value);
		partial void OnCopy_QuotaOwner_TitleChanged();
		partial void OnCopy_QuotaOwner_JuridicalAddressChanging(string value);
		partial void OnCopy_QuotaOwner_JuridicalAddressChanged();
		partial void OnCopy_QuotaOwner_EmailChanging(string value);
		partial void OnCopy_QuotaOwner_EmailChanged();
		partial void OnCopy_QuotaOwner_PhoneChanging(string value);
		partial void OnCopy_QuotaOwner_PhoneChanged();
		partial void OnCopy_QuotaOwner_PassportSerialChanging(string value);
		partial void OnCopy_QuotaOwner_PassportSerialChanged();
		partial void OnCopy_QuotaOwner_PassportNumberChanging(string value);
		partial void OnCopy_QuotaOwner_PassportNumberChanged();
		partial void OnCopy_QuotaOwner_PassportIssuedByChanging(string value);
		partial void OnCopy_QuotaOwner_PassportIssuedByChanged();
		partial void OnCopy_QuotaOwner_PassportIssuedDateChanging(System.Nullable<System.DateTime> value);
		partial void OnCopy_QuotaOwner_PassportIssuedDateChanged();
		partial void OnCopy_QuotaOwner_FaxChanging(string value);
		partial void OnCopy_QuotaOwner_FaxChanged();
		partial void OnCopy_GITextChanging(string value);
		partial void OnCopy_GITextChanged();
		partial void OnStampCodeChanging(string value);
		partial void OnStampCodeChanged();
		partial void OnFactForm_EmployeePostChanging(string value);
		partial void OnFactForm_EmployeePostChanged();
		partial void OnFactForm_EmployeeTitleChanging(string value);
		partial void OnFactForm_EmployeeTitleChanged();
		partial void OnCopy_CN_CodeChanging(string value);
		partial void OnCopy_CN_CodeChanged();
		partial void OnIsSignedChanging(bool value);
		partial void OnIsSignedChanged();
		partial void OnUCNChanging(string value);
		partial void OnUCNChanged();
		partial void OnPassportStateChanging(System.Nullable<char> value);
		partial void OnPassportStateChanged();
		partial void OnOrderStateChanging(System.Nullable<char> value);
		partial void OnOrderStateChanged();
		partial void OnLicenseNoChanging(string value);
		partial void OnLicenseNoChanged();
		partial void OnFactDataChanging(string value);
		partial void OnFactDataChanged();
		partial void OnEmailChanging(string value);
		partial void OnEmailChanged();
		partial void OnMFCIDChanging(System.Nullable<int> value);
		partial void OnMFCIDChanged();
		partial void OnAddInfoLetterChanging(string value);
		partial void OnAddInfoLetterChanged();
		#endregion

		public OrderDoc()
		{
			this._AppendixItems = new EntitySet<Appendix>(new Action<Appendix>(this.attach_AppendixItems), new Action<Appendix>(this.detach_AppendixItems));
			this._Blanks = new EntitySet<Blank>(new Action<Blank>(this.attach_Blanks), new Action<Blank>(this.detach_Blanks));
			this._CommodityDocs = new EntitySet<CommodityDocument>(new Action<CommodityDocument>(this.attach_CommodityDocs), new Action<CommodityDocument>(this.detach_CommodityDocs));
			this._Copy_ContractorChiefPerson = new EntitySet<Copy_ContractorChiefPerson>(new Action<Copy_ContractorChiefPerson>(this.attach_Copy_ContractorChiefPerson), new Action<Copy_ContractorChiefPerson>(this.detach_Copy_ContractorChiefPerson));
			this._CustomsDeclaration = new EntitySet<CustomsDeclaration>(new Action<CustomsDeclaration>(this.attach_CustomsDeclaration), new Action<CustomsDeclaration>(this.detach_CustomsDeclaration));
			this._Letter = new EntitySet<Letter>(new Action<Letter>(this.attach_Letter), new Action<Letter>(this.detach_Letter));
			this._Execution = new EntitySet<LicenseExecution>(new Action<LicenseExecution>(this.attach_Execution), new Action<LicenseExecution>(this.detach_Execution));
			this._Activity = default(EntityRef<WF_Activity>);
			this._AddMeasure = default(EntityRef<C_Measure>);
			this._Applicant = default(EntityRef<HST_Contractor>);
			this._ApplicantChief = default(EntityRef<ContractorChiefPerson>);
			this._ApplicantRepresentative = default(EntityRef<ContractorChiefPerson>);
			this._CN = default(EntityRef<C_CN>);
			this._CNCategory = default(EntityRef<C_CNCategory>);
			this._Country1 = default(EntityRef<C_Country>);
			this._Country2 = default(EntityRef<C_Country>);
			this._Country3 = default(EntityRef<C_Country>);
			this._Employee = default(EntityRef<Employee>);
			this._FactForm_Employee = default(EntityRef<Employee>);
			this._FactShippedMeasure = default(EntityRef<C_Measure>);
			this._IssueEmployee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._LicenseType = default(EntityRef<C_LicenseType>);
			this._Measure = default(EntityRef<C_Measure>);
			this._MFC = default(EntityRef<C_MFC>);
			this._OperationType = default(EntityRef<C_OperationType>);
			this._PaymentCurrency = default(EntityRef<C_Currency>);
			this._QuotaCountryGroup = default(EntityRef<C_CountryGroup>);
			this._QuoteOwner = default(EntityRef<HST_Contractor>);
			this._QuoteOwnerChief = default(EntityRef<ContractorChiefPerson>);
			this._RegEmployee = default(EntityRef<Employee>);
			this._Representation = default(EntityRef<Representation>);
			this._OrderDocAsso = new EntitySet<OrderDocAsso>(new Action<OrderDocAsso>(this.attach_OrderDocAsso), new Action<OrderDocAsso>(this.detach_OrderDocAsso));
			this._OrderGU = new EntitySet<OrderDocAsso>(new Action<OrderDocAsso>(this.attach_OrderGU), new Action<OrderDocAsso>(this.detach_OrderGU));
			this._Declensions = new EntitySet<OrderDocDeviation>(new Action<OrderDocDeviation>(this.attach_Declensions), new Action<OrderDocDeviation>(this.detach_Declensions));
			this._OrderDocImportSubject = new EntitySet<OrderDocImportSubject>(new Action<OrderDocImportSubject>(this.attach_OrderDocImportSubject), new Action<OrderDocImportSubject>(this.detach_OrderDocImportSubject));
			this._States = new EntitySet<OrderDocState>(new Action<OrderDocState>(this.attach_States), new Action<OrderDocState>(this.detach_States));
			this._OrderDocTransition = new EntitySet<OrderDocTransition>(new Action<OrderDocTransition>(this.attach_OrderDocTransition), new Action<OrderDocTransition>(this.detach_OrderDocTransition));
			this._LicensePaymentOrders = new EntitySet<PaymentOrder>(new Action<PaymentOrder>(this.attach_LicensePaymentOrders), new Action<PaymentOrder>(this.detach_LicensePaymentOrders));
			this._RequestPaymentOrders = new EntitySet<PaymentOrder>(new Action<PaymentOrder>(this.attach_RequestPaymentOrders), new Action<PaymentOrder>(this.detach_RequestPaymentOrders));
			this._PaymentOrderLicenses = new EntitySet<PaymentOrderLicenses>(new Action<PaymentOrderLicenses>(this.attach_PaymentOrderLicenses), new Action<PaymentOrderLicenses>(this.detach_PaymentOrderLicenses));
			this._PaymentOrderRequests = new EntitySet<PaymentOrderRequests>(new Action<PaymentOrderRequests>(this.attach_PaymentOrderRequests), new Action<PaymentOrderRequests>(this.detach_PaymentOrderRequests));
			this._QuotaRequest = new EntitySet<QuotaRequest>(new Action<QuotaRequest>(this.attach_QuotaRequest), new Action<QuotaRequest>(this.detach_QuotaRequest));
			this._SpecificationCommon = new EntitySet<SpecificationCommon>(new Action<SpecificationCommon>(this.attach_SpecificationCommon), new Action<SpecificationCommon>(this.detach_SpecificationCommon));
			this._SpecificationItem = new EntitySet<SpecificationItem>(new Action<SpecificationItem>(this.attach_SpecificationItem), new Action<SpecificationItem>(this.detach_SpecificationItem));
			OnCreated();
		}

		[Column(Storage = "_OrderGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid OrderGUID
		{
			get
			{
				return this._OrderGUID;
			}
			set
			{
				if ((this._OrderGUID != value))
				{
					this.OnOrderGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderGUID = value;
					this.SendPropertyChanged("OrderGUID");
					this.OnOrderGUIDChanged();
				}
			}
		}

		[Column(Storage = "_OrderType", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char OrderType
		{
			get
			{
				return this._OrderType;
			}
			set
			{
				if ((this._OrderType != value))
				{
					this.OnOrderTypeChanging(value);
					this.SendPropertyChanging();
					this._OrderType = value;
					this.SendPropertyChanged("OrderType");
					this.OnOrderTypeChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(32)", UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_OrderDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}

		[Column(Storage = "_CreateDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}

		[Column(Storage = "_DeclaredFromDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DeclaredFromDate
		{
			get
			{
				return this._DeclaredFromDate;
			}
			set
			{
				if ((this._DeclaredFromDate != value))
				{
					this.OnDeclaredFromDateChanging(value);
					this.SendPropertyChanging();
					this._DeclaredFromDate = value;
					this.SendPropertyChanged("DeclaredFromDate");
					this.OnDeclaredFromDateChanged();
				}
			}
		}

		[Column(Storage = "_DeclaredValidity", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DeclaredValidity
		{
			get
			{
				return this._DeclaredValidity;
			}
			set
			{
				if ((this._DeclaredValidity != value))
				{
					this.OnDeclaredValidityChanging(value);
					this.SendPropertyChanging();
					this._DeclaredValidity = value;
					this.SendPropertyChanged("DeclaredValidity");
					this.OnDeclaredValidityChanged();
				}
			}
		}

		[Column(Storage = "_TargetFromDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> TargetFromDate
		{
			get
			{
				return this._TargetFromDate;
			}
			set
			{
				if ((this._TargetFromDate != value))
				{
					this.OnTargetFromDateChanging(value);
					this.SendPropertyChanging();
					this._TargetFromDate = value;
					this.SendPropertyChanged("TargetFromDate");
					this.OnTargetFromDateChanged();
				}
			}
		}

		[Column(Storage = "_TargetValidity", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> TargetValidity
		{
			get
			{
				return this._TargetValidity;
			}
			set
			{
				if ((this._TargetValidity != value))
				{
					this.OnTargetValidityChanging(value);
					this.SendPropertyChanging();
					this._TargetValidity = value;
					this.SendPropertyChanged("TargetValidity");
					this.OnTargetValidityChanged();
				}
			}
		}

		[Column(Storage = "_LicenseTypeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> LicenseTypeID
		{
			get
			{
				return this._LicenseTypeID;
			}
			set
			{
				if ((this._LicenseTypeID != value))
				{
					if (this._LicenseType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLicenseTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseTypeID = value;
					this.SendPropertyChanged("LicenseTypeID");
					this.OnLicenseTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_OperationTypeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					if (this._OperationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._OperationTypeID = value;
					this.SendPropertyChanged("OperationTypeID");
					this.OnOperationTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_ContractNo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ContractNo
		{
			get
			{
				return this._ContractNo;
			}
			set
			{
				if ((this._ContractNo != value))
				{
					this.OnContractNoChanging(value);
					this.SendPropertyChanging();
					this._ContractNo = value;
					this.SendPropertyChanged("ContractNo");
					this.OnContractNoChanged();
				}
			}
		}

		[Column(Storage = "_ContractDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ContractDate
		{
			get
			{
				return this._ContractDate;
			}
			set
			{
				if ((this._ContractDate != value))
				{
					this.OnContractDateChanging(value);
					this.SendPropertyChanging();
					this._ContractDate = value;
					this.SendPropertyChanged("ContractDate");
					this.OnContractDateChanged();
				}
			}
		}

		[Column(Storage = "_DealerName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DealerName
		{
			get
			{
				return this._DealerName;
			}
			set
			{
				if ((this._DealerName != value))
				{
					this.OnDealerNameChanging(value);
					this.SendPropertyChanging();
					this._DealerName = value;
					this.SendPropertyChanged("DealerName");
					this.OnDealerNameChanged();
				}
			}
		}

		[Column(Storage = "_DealerAddress", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DealerAddress
		{
			get
			{
				return this._DealerAddress;
			}
			set
			{
				if ((this._DealerAddress != value))
				{
					this.OnDealerAddressChanging(value);
					this.SendPropertyChanging();
					this._DealerAddress = value;
					this.SendPropertyChanged("DealerAddress");
					this.OnDealerAddressChanged();
				}
			}
		}

		[Column(Storage = "_Country1ID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> Country1ID
		{
			get
			{
				return this._Country1ID;
			}
			set
			{
				if ((this._Country1ID != value))
				{
					if (this._Country1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry1IDChanging(value);
					this.SendPropertyChanging();
					this._Country1ID = value;
					this.SendPropertyChanged("Country1ID");
					this.OnCountry1IDChanged();
				}
			}
		}

		[Column(Storage = "_Country2ID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> Country2ID
		{
			get
			{
				return this._Country2ID;
			}
			set
			{
				if ((this._Country2ID != value))
				{
					if (this._Country2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry2IDChanging(value);
					this.SendPropertyChanging();
					this._Country2ID = value;
					this.SendPropertyChanged("Country2ID");
					this.OnCountry2IDChanged();
				}
			}
		}

		[Column(Storage = "_Country3ID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> Country3ID
		{
			get
			{
				return this._Country3ID;
			}
			set
			{
				if ((this._Country3ID != value))
				{
					if (this._Country3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry3IDChanging(value);
					this.SendPropertyChanging();
					this._Country3ID = value;
					this.SendPropertyChanged("Country3ID");
					this.OnCountry3IDChanged();
				}
			}
		}

		[Column(Storage = "_ApplicantGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> ApplicantGUID
		{
			get
			{
				return this._ApplicantGUID;
			}
			set
			{
				if ((this._ApplicantGUID != value))
				{
					if (this._Applicant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicantGUIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicantGUID = value;
					this.SendPropertyChanged("ApplicantGUID");
					this.OnApplicantGUIDChanged();
				}
			}
		}

		[Column(Storage = "_CanReissurance", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool CanReissurance
		{
			get
			{
				return this._CanReissurance;
			}
			set
			{
				if ((this._CanReissurance != value))
				{
					this.OnCanReissuranceChanging(value);
					this.SendPropertyChanging();
					this._CanReissurance = value;
					this.SendPropertyChanged("CanReissurance");
					this.OnCanReissuranceChanged();
				}
			}
		}

		[Column(Storage = "_QuotaCountryGroupID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> QuotaCountryGroupID
		{
			get
			{
				return this._QuotaCountryGroupID;
			}
			set
			{
				if ((this._QuotaCountryGroupID != value))
				{
					if (this._QuotaCountryGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuotaCountryGroupIDChanging(value);
					this.SendPropertyChanging();
					this._QuotaCountryGroupID = value;
					this.SendPropertyChanged("QuotaCountryGroupID");
					this.OnQuotaCountryGroupIDChanged();
				}
			}
		}

		[Column(Storage = "_QuoteOwnerGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> QuoteOwnerGUID
		{
			get
			{
				return this._QuoteOwnerGUID;
			}
			set
			{
				if ((this._QuoteOwnerGUID != value))
				{
					if (this._QuoteOwner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuoteOwnerGUIDChanging(value);
					this.SendPropertyChanging();
					this._QuoteOwnerGUID = value;
					this.SendPropertyChanged("QuoteOwnerGUID");
					this.OnQuoteOwnerGUIDChanged();
				}
			}
		}

		[Column(Storage = "_CNCategoryID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					if (this._CNCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}

		[Column(Storage = "_CNID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CNID
		{
			get
			{
				return this._CNID;
			}
			set
			{
				if ((this._CNID != value))
				{
					if (this._CN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNIDChanging(value);
					this.SendPropertyChanging();
					this._CNID = value;
					this.SendPropertyChanged("CNID");
					this.OnCNIDChanged();
				}
			}
		}

		[Column(Storage = "_CommodityComment", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string CommodityComment
		{
			get
			{
				return this._CommodityComment;
			}
			set
			{
				if ((this._CommodityComment != value))
				{
					this.OnCommodityCommentChanging(value);
					this.SendPropertyChanging();
					this._CommodityComment = value;
					this.SendPropertyChanged("CommodityComment");
					this.OnCommodityCommentChanged();
				}
			}
		}

		[Column(Storage = "_ResolvedQuantity", DbType = "Decimal(20,7)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedQuantity
		{
			get
			{
				return this._ResolvedQuantity;
			}
			set
			{
				if ((this._ResolvedQuantity != value))
				{
					this.OnResolvedQuantityChanging(value);
					this.SendPropertyChanging();
					this._ResolvedQuantity = value;
					this.SendPropertyChanged("ResolvedQuantity");
					this.OnResolvedQuantityChanged();
				}
			}
		}

		[Column(Storage = "_MeasureID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					if (this._Measure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}

		[Column(Storage = "_StatisticCost", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> StatisticCost
		{
			get
			{
				return this._StatisticCost;
			}
			set
			{
				if ((this._StatisticCost != value))
				{
					this.OnStatisticCostChanging(value);
					this.SendPropertyChanging();
					this._StatisticCost = value;
					this.SendPropertyChanged("StatisticCost");
					this.OnStatisticCostChanged();
				}
			}
		}

		[Column(Storage = "_ContractCost", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> ContractCost
		{
			get
			{
				return this._ContractCost;
			}
			set
			{
				if ((this._ContractCost != value))
				{
					this.OnContractCostChanging(value);
					this.SendPropertyChanging();
					this._ContractCost = value;
					this.SendPropertyChanged("ContractCost");
					this.OnContractCostChanged();
				}
			}
		}

		[Column(Storage = "_PaymentCurrencyID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> PaymentCurrencyID
		{
			get
			{
				return this._PaymentCurrencyID;
			}
			set
			{
				if ((this._PaymentCurrencyID != value))
				{
					if (this._PaymentCurrency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentCurrencyID = value;
					this.SendPropertyChanged("PaymentCurrencyID");
					this.OnPaymentCurrencyIDChanged();
				}
			}
		}

		[Column(Storage = "_AddResolvedQuantity", DbType = "Decimal(20,7)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> AddResolvedQuantity
		{
			get
			{
				return this._AddResolvedQuantity;
			}
			set
			{
				if ((this._AddResolvedQuantity != value))
				{
					this.OnAddResolvedQuantityChanging(value);
					this.SendPropertyChanging();
					this._AddResolvedQuantity = value;
					this.SendPropertyChanged("AddResolvedQuantity");
					this.OnAddResolvedQuantityChanged();
				}
			}
		}

		[Column(Storage = "_AddMeasureID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> AddMeasureID
		{
			get
			{
				return this._AddMeasureID;
			}
			set
			{
				if ((this._AddMeasureID != value))
				{
					if (this._AddMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._AddMeasureID = value;
					this.SendPropertyChanged("AddMeasureID");
					this.OnAddMeasureIDChanged();
				}
			}
		}

		[Column(Storage = "_AdditionalInfo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string AdditionalInfo
		{
			get
			{
				return this._AdditionalInfo;
			}
			set
			{
				if ((this._AdditionalInfo != value))
				{
					this.OnAdditionalInfoChanging(value);
					this.SendPropertyChanging();
					this._AdditionalInfo = value;
					this.SendPropertyChanged("AdditionalInfo");
					this.OnAdditionalInfoChanged();
				}
			}
		}

		[Column(Storage = "_FactShippedDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FactShippedDate
		{
			get
			{
				return this._FactShippedDate;
			}
			set
			{
				if ((this._FactShippedDate != value))
				{
					this.OnFactShippedDateChanging(value);
					this.SendPropertyChanging();
					this._FactShippedDate = value;
					this.SendPropertyChanged("FactShippedDate");
					this.OnFactShippedDateChanged();
				}
			}
		}

		[Column(Storage = "_FactShippedQuantity", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> FactShippedQuantity
		{
			get
			{
				return this._FactShippedQuantity;
			}
			set
			{
				if ((this._FactShippedQuantity != value))
				{
					this.OnFactShippedQuantityChanging(value);
					this.SendPropertyChanging();
					this._FactShippedQuantity = value;
					this.SendPropertyChanged("FactShippedQuantity");
					this.OnFactShippedQuantityChanged();
				}
			}
		}

		[Column(Storage = "_IsImported", DbType = "Bit", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<bool> IsImported
		{
			get
			{
				return this._IsImported;
			}
			set
			{
				if ((this._IsImported != value))
				{
					this.OnIsImportedChanging(value);
					this.SendPropertyChanging();
					this._IsImported = value;
					this.SendPropertyChanged("IsImported");
					this.OnIsImportedChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_InnerNumber", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string InnerNumber
		{
			get
			{
				return this._InnerNumber;
			}
			set
			{
				if ((this._InnerNumber != value))
				{
					this.OnInnerNumberChanging(value);
					this.SendPropertyChanging();
					this._InnerNumber = value;
					this.SendPropertyChanged("InnerNumber");
					this.OnInnerNumberChanged();
				}
			}
		}

		[Column(Storage = "_OldID", DbType = "Decimal(14,0)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}

		[Column(Storage = "_QuotaPeriod", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> QuotaPeriod
		{
			get
			{
				return this._QuotaPeriod;
			}
			set
			{
				if ((this._QuotaPeriod != value))
				{
					this.OnQuotaPeriodChanging(value);
					this.SendPropertyChanging();
					this._QuotaPeriod = value;
					this.SendPropertyChanged("QuotaPeriod");
					this.OnQuotaPeriodChanged();
				}
			}
		}

		[Column(Storage = "_UploadDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> UploadDate
		{
			get
			{
				return this._UploadDate;
			}
			set
			{
				if ((this._UploadDate != value))
				{
					this.OnUploadDateChanging(value);
					this.SendPropertyChanging();
					this._UploadDate = value;
					this.SendPropertyChanged("UploadDate");
					this.OnUploadDateChanged();
				}
			}
		}

		[Column(Storage = "_ActivityID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ActivityID = value;
					this.SendPropertyChanged("ActivityID");
					this.OnActivityIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_ApplicantChiefGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> ApplicantChiefGUID
		{
			get
			{
				return this._ApplicantChiefGUID;
			}
			set
			{
				if ((this._ApplicantChiefGUID != value))
				{
					if (this._ApplicantChief.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicantChiefGUIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicantChiefGUID = value;
					this.SendPropertyChanged("ApplicantChiefGUID");
					this.OnApplicantChiefGUIDChanged();
				}
			}
		}

		[Column(Storage = "_QuoteOwnerChiefGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> QuoteOwnerChiefGUID
		{
			get
			{
				return this._QuoteOwnerChiefGUID;
			}
			set
			{
				if ((this._QuoteOwnerChiefGUID != value))
				{
					if (this._QuoteOwnerChief.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuoteOwnerChiefGUIDChanging(value);
					this.SendPropertyChanging();
					this._QuoteOwnerChiefGUID = value;
					this.SendPropertyChanged("QuoteOwnerChiefGUID");
					this.OnQuoteOwnerChiefGUIDChanged();
				}
			}
		}

		[Column(Storage = "_FactShippedGTD", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string FactShippedGTD
		{
			get
			{
				return this._FactShippedGTD;
			}
			set
			{
				if ((this._FactShippedGTD != value))
				{
					this.OnFactShippedGTDChanging(value);
					this.SendPropertyChanging();
					this._FactShippedGTD = value;
					this.SendPropertyChanged("FactShippedGTD");
					this.OnFactShippedGTDChanged();
				}
			}
		}

		[Column(Storage = "_ApplicantRepresentativeGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> ApplicantRepresentativeGUID
		{
			get
			{
				return this._ApplicantRepresentativeGUID;
			}
			set
			{
				if ((this._ApplicantRepresentativeGUID != value))
				{
					if (this._ApplicantRepresentative.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicantRepresentativeGUIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicantRepresentativeGUID = value;
					this.SendPropertyChanged("ApplicantRepresentativeGUID");
					this.OnApplicantRepresentativeGUIDChanged();
				}
			}
		}

		[Column(Storage = "_EmployeeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}

		[Column(Storage = "_RegDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this.OnRegDateChanging(value);
					this.SendPropertyChanging();
					this._RegDate = value;
					this.SendPropertyChanged("RegDate");
					this.OnRegDateChanged();
				}
			}
		}

		[Column(Storage = "_RegNo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string RegNo
		{
			get
			{
				return this._RegNo;
			}
			set
			{
				if ((this._RegNo != value))
				{
					this.OnRegNoChanging(value);
					this.SendPropertyChanging();
					this._RegNo = value;
					this.SendPropertyChanged("RegNo");
					this.OnRegNoChanged();
				}
			}
		}

		[Column(Storage = "_ChanceryRegDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ChanceryRegDate
		{
			get
			{
				return this._ChanceryRegDate;
			}
			set
			{
				if ((this._ChanceryRegDate != value))
				{
					this.OnChanceryRegDateChanging(value);
					this.SendPropertyChanging();
					this._ChanceryRegDate = value;
					this.SendPropertyChanged("ChanceryRegDate");
					this.OnChanceryRegDateChanged();
				}
			}
		}

		[Column(Storage = "_ChanceryRegNo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ChanceryRegNo
		{
			get
			{
				return this._ChanceryRegNo;
			}
			set
			{
				if ((this._ChanceryRegNo != value))
				{
					this.OnChanceryRegNoChanging(value);
					this.SendPropertyChanging();
					this._ChanceryRegNo = value;
					this.SendPropertyChanged("ChanceryRegNo");
					this.OnChanceryRegNoChanged();
				}
			}
		}

		[Column(Storage = "_RepresentationID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					if (this._Representation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentationID = value;
					this.SendPropertyChanged("RepresentationID");
					this.OnRepresentationIDChanged();
				}
			}
		}

		[Column(Storage = "_RegEmployeeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> RegEmployeeID
		{
			get
			{
				return this._RegEmployeeID;
			}
			set
			{
				if ((this._RegEmployeeID != value))
				{
					if (this._RegEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._RegEmployeeID = value;
					this.SendPropertyChanged("RegEmployeeID");
					this.OnRegEmployeeIDChanged();
				}
			}
		}

		[Column(Storage = "_SignDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}

		[Column(Storage = "_CurState", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string CurState
		{
			get
			{
				return this._CurState;
			}
			set
			{
				if ((this._CurState != value))
				{
					this.OnCurStateChanging(value);
					this.SendPropertyChanging();
					this._CurState = value;
					this.SendPropertyChanged("CurState");
					this.OnCurStateChanged();
				}
			}
		}

		[Column(Storage = "_IssueApplicant", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string IssueApplicant
		{
			get
			{
				return this._IssueApplicant;
			}
			set
			{
				if ((this._IssueApplicant != value))
				{
					this.OnIssueApplicantChanging(value);
					this.SendPropertyChanging();
					this._IssueApplicant = value;
					this.SendPropertyChanged("IssueApplicant");
					this.OnIssueApplicantChanged();
				}
			}
		}

		[Column(Storage = "_IssueAttorney", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string IssueAttorney
		{
			get
			{
				return this._IssueAttorney;
			}
			set
			{
				if ((this._IssueAttorney != value))
				{
					this.OnIssueAttorneyChanging(value);
					this.SendPropertyChanging();
					this._IssueAttorney = value;
					this.SendPropertyChanged("IssueAttorney");
					this.OnIssueAttorneyChanged();
				}
			}
		}

		[Column(Storage = "_IssueDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}

		[Column(Storage = "_IssueEmployeeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> IssueEmployeeID
		{
			get
			{
				return this._IssueEmployeeID;
			}
			set
			{
				if ((this._IssueEmployeeID != value))
				{
					if (this._IssueEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._IssueEmployeeID = value;
					this.SendPropertyChanged("IssueEmployeeID");
					this.OnIssueEmployeeIDChanged();
				}
			}
		}

		[Column(Storage = "_Copy_Country1_Alpha2", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_Country1_Alpha2
		{
			get
			{
				return this._Copy_Country1_Alpha2;
			}
			set
			{
				if ((this._Copy_Country1_Alpha2 != value))
				{
					this.OnCopy_Country1_Alpha2Changing(value);
					this.SendPropertyChanging();
					this._Copy_Country1_Alpha2 = value;
					this.SendPropertyChanged("Copy_Country1_Alpha2");
					this.OnCopy_Country1_Alpha2Changed();
				}
			}
		}

		[Column(Storage = "_Copy_Country2_Alpha2", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_Country2_Alpha2
		{
			get
			{
				return this._Copy_Country2_Alpha2;
			}
			set
			{
				if ((this._Copy_Country2_Alpha2 != value))
				{
					this.OnCopy_Country2_Alpha2Changing(value);
					this.SendPropertyChanging();
					this._Copy_Country2_Alpha2 = value;
					this.SendPropertyChanged("Copy_Country2_Alpha2");
					this.OnCopy_Country2_Alpha2Changed();
				}
			}
		}

		[Column(Storage = "_Copy_Country3_Alpha2", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_Country3_Alpha2
		{
			get
			{
				return this._Copy_Country3_Alpha2;
			}
			set
			{
				if ((this._Copy_Country3_Alpha2 != value))
				{
					this.OnCopy_Country3_Alpha2Changing(value);
					this.SendPropertyChanging();
					this._Copy_Country3_Alpha2 = value;
					this.SendPropertyChanged("Copy_Country3_Alpha2");
					this.OnCopy_Country3_Alpha2Changed();
				}
			}
		}

		[Column(Storage = "_Copy_Country1_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_Country1_Title
		{
			get
			{
				return this._Copy_Country1_Title;
			}
			set
			{
				if ((this._Copy_Country1_Title != value))
				{
					this.OnCopy_Country1_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_Country1_Title = value;
					this.SendPropertyChanged("Copy_Country1_Title");
					this.OnCopy_Country1_TitleChanged();
				}
			}
		}

		[Column(Storage = "_Copy_Country2_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_Country2_Title
		{
			get
			{
				return this._Copy_Country2_Title;
			}
			set
			{
				if ((this._Copy_Country2_Title != value))
				{
					this.OnCopy_Country2_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_Country2_Title = value;
					this.SendPropertyChanged("Copy_Country2_Title");
					this.OnCopy_Country2_TitleChanged();
				}
			}
		}

		[Column(Storage = "_Copy_Country3_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_Country3_Title
		{
			get
			{
				return this._Copy_Country3_Title;
			}
			set
			{
				if ((this._Copy_Country3_Title != value))
				{
					this.OnCopy_Country3_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_Country3_Title = value;
					this.SendPropertyChanged("Copy_Country3_Title");
					this.OnCopy_Country3_TitleChanged();
				}
			}
		}

		[Column(Storage = "_Copy_CN_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_CN_Title
		{
			get
			{
				return this._Copy_CN_Title;
			}
			set
			{
				if ((this._Copy_CN_Title != value))
				{
					this.OnCopy_CN_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_CN_Title = value;
					this.SendPropertyChanged("Copy_CN_Title");
					this.OnCopy_CN_TitleChanged();
				}
			}
		}

		[Column(Storage = "_Copy_Measure_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_Measure_Title
		{
			get
			{
				return this._Copy_Measure_Title;
			}
			set
			{
				if ((this._Copy_Measure_Title != value))
				{
					this.OnCopy_Measure_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_Measure_Title = value;
					this.SendPropertyChanged("Copy_Measure_Title");
					this.OnCopy_Measure_TitleChanged();
				}
			}
		}

		[Column(Storage = "_Copy_PaymentCurrency_Code", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_PaymentCurrency_Code
		{
			get
			{
				return this._Copy_PaymentCurrency_Code;
			}
			set
			{
				if ((this._Copy_PaymentCurrency_Code != value))
				{
					this.OnCopy_PaymentCurrency_CodeChanging(value);
					this.SendPropertyChanging();
					this._Copy_PaymentCurrency_Code = value;
					this.SendPropertyChanged("Copy_PaymentCurrency_Code");
					this.OnCopy_PaymentCurrency_CodeChanged();
				}
			}
		}

		[Column(Storage = "_Copy_PaymentCurrency_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_PaymentCurrency_Title
		{
			get
			{
				return this._Copy_PaymentCurrency_Title;
			}
			set
			{
				if ((this._Copy_PaymentCurrency_Title != value))
				{
					this.OnCopy_PaymentCurrency_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_PaymentCurrency_Title = value;
					this.SendPropertyChanged("Copy_PaymentCurrency_Title");
					this.OnCopy_PaymentCurrency_TitleChanged();
				}
			}
		}

		[Column(Storage = "_Copy_AddMeasure_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_AddMeasure_Title
		{
			get
			{
				return this._Copy_AddMeasure_Title;
			}
			set
			{
				if ((this._Copy_AddMeasure_Title != value))
				{
					this.OnCopy_AddMeasure_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_AddMeasure_Title = value;
					this.SendPropertyChanged("Copy_AddMeasure_Title");
					this.OnCopy_AddMeasure_TitleChanged();
				}
			}
		}

		[Column(Storage = "_SiteNumber", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> SiteNumber
		{
			get
			{
				return this._SiteNumber;
			}
			set
			{
				if ((this._SiteNumber != value))
				{
					this.OnSiteNumberChanging(value);
					this.SendPropertyChanging();
					this._SiteNumber = value;
					this.SendPropertyChanged("SiteNumber");
					this.OnSiteNumberChanged();
				}
			}
		}

		[Column(Storage = "_CurStateSite", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string CurStateSite
		{
			get
			{
				return this._CurStateSite;
			}
			set
			{
				if ((this._CurStateSite != value))
				{
					this.OnCurStateSiteChanging(value);
					this.SendPropertyChanging();
					this._CurStateSite = value;
					this.SendPropertyChanged("CurStateSite");
					this.OnCurStateSiteChanged();
				}
			}
		}

		[Column(Storage = "_Comment", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}

		[Column(Storage = "_Activity_IsDraft", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool Activity_IsDraft
		{
			get
			{
				return this._Activity_IsDraft;
			}
			set
			{
				if ((this._Activity_IsDraft != value))
				{
					this.OnActivity_IsDraftChanging(value);
					this.SendPropertyChanging();
					this._Activity_IsDraft = value;
					this.SendPropertyChanged("Activity_IsDraft");
					this.OnActivity_IsDraftChanged();
				}
			}
		}

		[Column(Storage = "_Activity_SysName", DbType = "NVarChar(50)", UpdateCheck = UpdateCheck.Never)]
		public string Activity_SysName
		{
			get
			{
				return this._Activity_SysName;
			}
			set
			{
				if ((this._Activity_SysName != value))
				{
					this.OnActivity_SysNameChanging(value);
					this.SendPropertyChanging();
					this._Activity_SysName = value;
					this.SendPropertyChanged("Activity_SysName");
					this.OnActivity_SysNameChanged();
				}
			}
		}

		[Column(Storage = "_Activity_Title", DbType = "NVarChar(50)", UpdateCheck = UpdateCheck.Never)]
		public string Activity_Title
		{
			get
			{
				return this._Activity_Title;
			}
			set
			{
				if ((this._Activity_Title != value))
				{
					this.OnActivity_TitleChanging(value);
					this.SendPropertyChanging();
					this._Activity_Title = value;
					this.SendPropertyChanged("Activity_Title");
					this.OnActivity_TitleChanged();
				}
			}
		}

		[Column(Storage = "_FactForm_EmployeeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> FactForm_EmployeeID
		{
			get
			{
				return this._FactForm_EmployeeID;
			}
			set
			{
				if ((this._FactForm_EmployeeID != value))
				{
					if (this._FactForm_Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactForm_EmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._FactForm_EmployeeID = value;
					this.SendPropertyChanged("FactForm_EmployeeID");
					this.OnFactForm_EmployeeIDChanged();
				}
			}
		}

		[Column(Storage = "_FactForm_FormDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FactForm_FormDate
		{
			get
			{
				return this._FactForm_FormDate;
			}
			set
			{
				if ((this._FactForm_FormDate != value))
				{
					this.OnFactForm_FormDateChanging(value);
					this.SendPropertyChanging();
					this._FactForm_FormDate = value;
					this.SendPropertyChanged("FactForm_FormDate");
					this.OnFactForm_FormDateChanged();
				}
			}
		}

		[Column(Storage = "_FactForm_SignDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FactForm_SignDate
		{
			get
			{
				return this._FactForm_SignDate;
			}
			set
			{
				if ((this._FactForm_SignDate != value))
				{
					this.OnFactForm_SignDateChanging(value);
					this.SendPropertyChanging();
					this._FactForm_SignDate = value;
					this.SendPropertyChanged("FactForm_SignDate");
					this.OnFactForm_SignDateChanged();
				}
			}
		}

		[Column(Storage = "_OrderDocTransition_CreateDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> OrderDocTransition_CreateDate
		{
			get
			{
				return this._OrderDocTransition_CreateDate;
			}
			set
			{
				if ((this._OrderDocTransition_CreateDate != value))
				{
					this.OnOrderDocTransition_CreateDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDocTransition_CreateDate = value;
					this.SendPropertyChanged("OrderDocTransition_CreateDate");
					this.OnOrderDocTransition_CreateDateChanged();
				}
			}
		}

		[Column(Storage = "_Copy_CNCategory_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_CNCategory_Title
		{
			get
			{
				return this._Copy_CNCategory_Title;
			}
			set
			{
				if ((this._Copy_CNCategory_Title != value))
				{
					this.OnCopy_CNCategory_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_CNCategory_Title = value;
					this.SendPropertyChanged("Copy_CNCategory_Title");
					this.OnCopy_CNCategory_TitleChanged();
				}
			}
		}

		[Column(Storage = "_FactShippedMeasureID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> FactShippedMeasureID
		{
			get
			{
				return this._FactShippedMeasureID;
			}
			set
			{
				if ((this._FactShippedMeasureID != value))
				{
					if (this._FactShippedMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactShippedMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._FactShippedMeasureID = value;
					this.SendPropertyChanged("FactShippedMeasureID");
					this.OnFactShippedMeasureIDChanged();
				}
			}
		}

		[Column(Storage = "_Copy_OperationType_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_OperationType_Title
		{
			get
			{
				return this._Copy_OperationType_Title;
			}
			set
			{
				if ((this._Copy_OperationType_Title != value))
				{
					this.OnCopy_OperationType_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_OperationType_Title = value;
					this.SendPropertyChanged("Copy_OperationType_Title");
					this.OnCopy_OperationType_TitleChanged();
				}
			}
		}

		[Column(Storage = "_Copy_LicenseType_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_LicenseType_Title
		{
			get
			{
				return this._Copy_LicenseType_Title;
			}
			set
			{
				if ((this._Copy_LicenseType_Title != value))
				{
					this.OnCopy_LicenseType_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_LicenseType_Title = value;
					this.SendPropertyChanged("Copy_LicenseType_Title");
					this.OnCopy_LicenseType_TitleChanged();
				}
			}
		}

		[Column(Storage = "_UniqueIndex", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int UniqueIndex
		{
			get
			{
				return this._UniqueIndex;
			}
			set
			{
				if ((this._UniqueIndex != value))
				{
					this.OnUniqueIndexChanging(value);
					this.SendPropertyChanging();
					this._UniqueIndex = value;
					this.SendPropertyChanged("UniqueIndex");
					this.OnUniqueIndexChanged();
				}
			}
		}

		[Column(Storage = "_Copy_Applicant_INN", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_Applicant_INN
		{
			get
			{
				return this._Copy_Applicant_INN;
			}
			set
			{
				if ((this._Copy_Applicant_INN != value))
				{
					this.OnCopy_Applicant_INNChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_INN = value;
					this.SendPropertyChanged("Copy_Applicant_INN");
					this.OnCopy_Applicant_INNChanged();
				}
			}
		}

		[Column(Storage = "_Copy_Applicant_OKPO", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_Applicant_OKPO
		{
			get
			{
				return this._Copy_Applicant_OKPO;
			}
			set
			{
				if ((this._Copy_Applicant_OKPO != value))
				{
					this.OnCopy_Applicant_OKPOChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_OKPO = value;
					this.SendPropertyChanged("Copy_Applicant_OKPO");
					this.OnCopy_Applicant_OKPOChanged();
				}
			}
		}

		[Column(Storage = "_Copy_Applicant_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_Applicant_Title
		{
			get
			{
				return this._Copy_Applicant_Title;
			}
			set
			{
				if ((this._Copy_Applicant_Title != value))
				{
					this.OnCopy_Applicant_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_Title = value;
					this.SendPropertyChanged("Copy_Applicant_Title");
					this.OnCopy_Applicant_TitleChanged();
				}
			}
		}

		[Column(Storage = "_Copy_Applicant_JuridicalAddress", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_Applicant_JuridicalAddress
		{
			get
			{
				return this._Copy_Applicant_JuridicalAddress;
			}
			set
			{
				if ((this._Copy_Applicant_JuridicalAddress != value))
				{
					this.OnCopy_Applicant_JuridicalAddressChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_JuridicalAddress = value;
					this.SendPropertyChanged("Copy_Applicant_JuridicalAddress");
					this.OnCopy_Applicant_JuridicalAddressChanged();
				}
			}
		}

		[Column(Storage = "_Copy_Applicant_Email", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_Applicant_Email
		{
			get
			{
				return this._Copy_Applicant_Email;
			}
			set
			{
				if ((this._Copy_Applicant_Email != value))
				{
					this.OnCopy_Applicant_EmailChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_Email = value;
					this.SendPropertyChanged("Copy_Applicant_Email");
					this.OnCopy_Applicant_EmailChanged();
				}
			}
		}

		[Column(Storage = "_Copy_Applicant_Phone", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_Applicant_Phone
		{
			get
			{
				return this._Copy_Applicant_Phone;
			}
			set
			{
				if ((this._Copy_Applicant_Phone != value))
				{
					this.OnCopy_Applicant_PhoneChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_Phone = value;
					this.SendPropertyChanged("Copy_Applicant_Phone");
					this.OnCopy_Applicant_PhoneChanged();
				}
			}
		}

		[Column(Storage = "_Copy_Applicant_PassportSerial", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_Applicant_PassportSerial
		{
			get
			{
				return this._Copy_Applicant_PassportSerial;
			}
			set
			{
				if ((this._Copy_Applicant_PassportSerial != value))
				{
					this.OnCopy_Applicant_PassportSerialChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_PassportSerial = value;
					this.SendPropertyChanged("Copy_Applicant_PassportSerial");
					this.OnCopy_Applicant_PassportSerialChanged();
				}
			}
		}

		[Column(Storage = "_Copy_Applicant_PassportNumber", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_Applicant_PassportNumber
		{
			get
			{
				return this._Copy_Applicant_PassportNumber;
			}
			set
			{
				if ((this._Copy_Applicant_PassportNumber != value))
				{
					this.OnCopy_Applicant_PassportNumberChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_PassportNumber = value;
					this.SendPropertyChanged("Copy_Applicant_PassportNumber");
					this.OnCopy_Applicant_PassportNumberChanged();
				}
			}
		}

		[Column(Storage = "_Copy_Applicant_PassportIssuedBy", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_Applicant_PassportIssuedBy
		{
			get
			{
				return this._Copy_Applicant_PassportIssuedBy;
			}
			set
			{
				if ((this._Copy_Applicant_PassportIssuedBy != value))
				{
					this.OnCopy_Applicant_PassportIssuedByChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_PassportIssuedBy = value;
					this.SendPropertyChanged("Copy_Applicant_PassportIssuedBy");
					this.OnCopy_Applicant_PassportIssuedByChanged();
				}
			}
		}

		[Column(Storage = "_Copy_Applicant_PassportIssuedDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Copy_Applicant_PassportIssuedDate
		{
			get
			{
				return this._Copy_Applicant_PassportIssuedDate;
			}
			set
			{
				if ((this._Copy_Applicant_PassportIssuedDate != value))
				{
					this.OnCopy_Applicant_PassportIssuedDateChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_PassportIssuedDate = value;
					this.SendPropertyChanged("Copy_Applicant_PassportIssuedDate");
					this.OnCopy_Applicant_PassportIssuedDateChanged();
				}
			}
		}

		[Column(Storage = "_Copy_QuotaOwner_INN", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_QuotaOwner_INN
		{
			get
			{
				return this._Copy_QuotaOwner_INN;
			}
			set
			{
				if ((this._Copy_QuotaOwner_INN != value))
				{
					this.OnCopy_QuotaOwner_INNChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_INN = value;
					this.SendPropertyChanged("Copy_QuotaOwner_INN");
					this.OnCopy_QuotaOwner_INNChanged();
				}
			}
		}

		[Column(Storage = "_Copy_QuotaOwner_OKPO", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_QuotaOwner_OKPO
		{
			get
			{
				return this._Copy_QuotaOwner_OKPO;
			}
			set
			{
				if ((this._Copy_QuotaOwner_OKPO != value))
				{
					this.OnCopy_QuotaOwner_OKPOChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_OKPO = value;
					this.SendPropertyChanged("Copy_QuotaOwner_OKPO");
					this.OnCopy_QuotaOwner_OKPOChanged();
				}
			}
		}

		[Column(Storage = "_Copy_QuotaOwner_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_QuotaOwner_Title
		{
			get
			{
				return this._Copy_QuotaOwner_Title;
			}
			set
			{
				if ((this._Copy_QuotaOwner_Title != value))
				{
					this.OnCopy_QuotaOwner_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_Title = value;
					this.SendPropertyChanged("Copy_QuotaOwner_Title");
					this.OnCopy_QuotaOwner_TitleChanged();
				}
			}
		}

		[Column(Storage = "_Copy_QuotaOwner_JuridicalAddress", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_QuotaOwner_JuridicalAddress
		{
			get
			{
				return this._Copy_QuotaOwner_JuridicalAddress;
			}
			set
			{
				if ((this._Copy_QuotaOwner_JuridicalAddress != value))
				{
					this.OnCopy_QuotaOwner_JuridicalAddressChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_JuridicalAddress = value;
					this.SendPropertyChanged("Copy_QuotaOwner_JuridicalAddress");
					this.OnCopy_QuotaOwner_JuridicalAddressChanged();
				}
			}
		}

		[Column(Storage = "_Copy_QuotaOwner_Email", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_QuotaOwner_Email
		{
			get
			{
				return this._Copy_QuotaOwner_Email;
			}
			set
			{
				if ((this._Copy_QuotaOwner_Email != value))
				{
					this.OnCopy_QuotaOwner_EmailChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_Email = value;
					this.SendPropertyChanged("Copy_QuotaOwner_Email");
					this.OnCopy_QuotaOwner_EmailChanged();
				}
			}
		}

		[Column(Storage = "_Copy_QuotaOwner_Phone", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_QuotaOwner_Phone
		{
			get
			{
				return this._Copy_QuotaOwner_Phone;
			}
			set
			{
				if ((this._Copy_QuotaOwner_Phone != value))
				{
					this.OnCopy_QuotaOwner_PhoneChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_Phone = value;
					this.SendPropertyChanged("Copy_QuotaOwner_Phone");
					this.OnCopy_QuotaOwner_PhoneChanged();
				}
			}
		}

		[Column(Storage = "_Copy_QuotaOwner_PassportSerial", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_QuotaOwner_PassportSerial
		{
			get
			{
				return this._Copy_QuotaOwner_PassportSerial;
			}
			set
			{
				if ((this._Copy_QuotaOwner_PassportSerial != value))
				{
					this.OnCopy_QuotaOwner_PassportSerialChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_PassportSerial = value;
					this.SendPropertyChanged("Copy_QuotaOwner_PassportSerial");
					this.OnCopy_QuotaOwner_PassportSerialChanged();
				}
			}
		}

		[Column(Storage = "_Copy_QuotaOwner_PassportNumber", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_QuotaOwner_PassportNumber
		{
			get
			{
				return this._Copy_QuotaOwner_PassportNumber;
			}
			set
			{
				if ((this._Copy_QuotaOwner_PassportNumber != value))
				{
					this.OnCopy_QuotaOwner_PassportNumberChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_PassportNumber = value;
					this.SendPropertyChanged("Copy_QuotaOwner_PassportNumber");
					this.OnCopy_QuotaOwner_PassportNumberChanged();
				}
			}
		}

		[Column(Storage = "_Copy_QuotaOwner_PassportIssuedBy", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_QuotaOwner_PassportIssuedBy
		{
			get
			{
				return this._Copy_QuotaOwner_PassportIssuedBy;
			}
			set
			{
				if ((this._Copy_QuotaOwner_PassportIssuedBy != value))
				{
					this.OnCopy_QuotaOwner_PassportIssuedByChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_PassportIssuedBy = value;
					this.SendPropertyChanged("Copy_QuotaOwner_PassportIssuedBy");
					this.OnCopy_QuotaOwner_PassportIssuedByChanged();
				}
			}
		}

		[Column(Storage = "_Copy_QuotaOwner_PassportIssuedDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Copy_QuotaOwner_PassportIssuedDate
		{
			get
			{
				return this._Copy_QuotaOwner_PassportIssuedDate;
			}
			set
			{
				if ((this._Copy_QuotaOwner_PassportIssuedDate != value))
				{
					this.OnCopy_QuotaOwner_PassportIssuedDateChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_PassportIssuedDate = value;
					this.SendPropertyChanged("Copy_QuotaOwner_PassportIssuedDate");
					this.OnCopy_QuotaOwner_PassportIssuedDateChanged();
				}
			}
		}

		[Column(Storage = "_Copy_QuotaOwner_Fax", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_QuotaOwner_Fax
		{
			get
			{
				return this._Copy_QuotaOwner_Fax;
			}
			set
			{
				if ((this._Copy_QuotaOwner_Fax != value))
				{
					this.OnCopy_QuotaOwner_FaxChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_Fax = value;
					this.SendPropertyChanged("Copy_QuotaOwner_Fax");
					this.OnCopy_QuotaOwner_FaxChanged();
				}
			}
		}

		[Column(Storage = "_Copy_GIText", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Copy_GIText
		{
			get
			{
				return this._Copy_GIText;
			}
			set
			{
				if ((this._Copy_GIText != value))
				{
					this.OnCopy_GITextChanging(value);
					this.SendPropertyChanging();
					this._Copy_GIText = value;
					this.SendPropertyChanged("Copy_GIText");
					this.OnCopy_GITextChanged();
				}
			}
		}

		[Column(Storage = "_StampCode", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string StampCode
		{
			get
			{
				return this._StampCode;
			}
			set
			{
				if ((this._StampCode != value))
				{
					this.OnStampCodeChanging(value);
					this.SendPropertyChanging();
					this._StampCode = value;
					this.SendPropertyChanged("StampCode");
					this.OnStampCodeChanged();
				}
			}
		}

		[Column(Storage = "_FactForm_EmployeePost", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string FactForm_EmployeePost
		{
			get
			{
				return this._FactForm_EmployeePost;
			}
			set
			{
				if ((this._FactForm_EmployeePost != value))
				{
					this.OnFactForm_EmployeePostChanging(value);
					this.SendPropertyChanging();
					this._FactForm_EmployeePost = value;
					this.SendPropertyChanged("FactForm_EmployeePost");
					this.OnFactForm_EmployeePostChanged();
				}
			}
		}

		[Column(Storage = "_FactForm_EmployeeTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string FactForm_EmployeeTitle
		{
			get
			{
				return this._FactForm_EmployeeTitle;
			}
			set
			{
				if ((this._FactForm_EmployeeTitle != value))
				{
					this.OnFactForm_EmployeeTitleChanging(value);
					this.SendPropertyChanging();
					this._FactForm_EmployeeTitle = value;
					this.SendPropertyChanged("FactForm_EmployeeTitle");
					this.OnFactForm_EmployeeTitleChanged();
				}
			}
		}

		[Column(Storage = "_Copy_CN_Code", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Copy_CN_Code
		{
			get
			{
				return this._Copy_CN_Code;
			}
			set
			{
				if ((this._Copy_CN_Code != value))
				{
					this.OnCopy_CN_CodeChanging(value);
					this.SendPropertyChanging();
					this._Copy_CN_Code = value;
					this.SendPropertyChanged("Copy_CN_Code");
					this.OnCopy_CN_CodeChanged();
				}
			}
		}

		[Column(Storage = "_IsSigned", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsSigned
		{
			get
			{
				return this._IsSigned;
			}
			set
			{
				if ((this._IsSigned != value))
				{
					this.OnIsSignedChanging(value);
					this.SendPropertyChanging();
					this._IsSigned = value;
					this.SendPropertyChanged("IsSigned");
					this.OnIsSignedChanged();
				}
			}
		}

		[Column(Storage = "_UCN", DbType = "NVarChar(20)", UpdateCheck = UpdateCheck.Never)]
		public string UCN
		{
			get
			{
				return this._UCN;
			}
			set
			{
				if ((this._UCN != value))
				{
					this.OnUCNChanging(value);
					this.SendPropertyChanging();
					this._UCN = value;
					this.SendPropertyChanged("UCN");
					this.OnUCNChanged();
				}
			}
		}

		[Column(Storage = "_PassportState", DbType = "Char(1)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<char> PassportState
		{
			get
			{
				return this._PassportState;
			}
			set
			{
				if ((this._PassportState != value))
				{
					this.OnPassportStateChanging(value);
					this.SendPropertyChanging();
					this._PassportState = value;
					this.SendPropertyChanged("PassportState");
					this.OnPassportStateChanged();
				}
			}
		}

		[Column(Storage = "_OrderState", DbType = "Char(1)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<char> OrderState
		{
			get
			{
				return this._OrderState;
			}
			set
			{
				if ((this._OrderState != value))
				{
					this.OnOrderStateChanging(value);
					this.SendPropertyChanging();
					this._OrderState = value;
					this.SendPropertyChanged("OrderState");
					this.OnOrderStateChanged();
				}
			}
		}

		[Column(Storage = "_LicenseNo", DbType = "NVarChar(32)", UpdateCheck = UpdateCheck.Never)]
		public string LicenseNo
		{
			get
			{
				return this._LicenseNo;
			}
			set
			{
				if ((this._LicenseNo != value))
				{
					this.OnLicenseNoChanging(value);
					this.SendPropertyChanging();
					this._LicenseNo = value;
					this.SendPropertyChanged("LicenseNo");
					this.OnLicenseNoChanged();
				}
			}
		}

		[Column(Storage = "_FactData", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string FactData
		{
			get
			{
				return this._FactData;
			}
			set
			{
				if ((this._FactData != value))
				{
					this.OnFactDataChanging(value);
					this.SendPropertyChanging();
					this._FactData = value;
					this.SendPropertyChanged("FactData");
					this.OnFactDataChanged();
				}
			}
		}

		[Column(Storage = "_Email", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}

		[Column(Storage = "_MFCID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> MFCID
		{
			get
			{
				return this._MFCID;
			}
			set
			{
				if ((this._MFCID != value))
				{
					if (this._MFC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMFCIDChanging(value);
					this.SendPropertyChanging();
					this._MFCID = value;
					this.SendPropertyChanged("MFCID");
					this.OnMFCIDChanged();
				}
			}
		}

		[Column(Storage = "_AddInfoLetter", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string AddInfoLetter
		{
			get
			{
				return this._AddInfoLetter;
			}
			set
			{
				if ((this._AddInfoLetter != value))
				{
					this.OnAddInfoLetterChanging(value);
					this.SendPropertyChanging();
					this._AddInfoLetter = value;
					this.SendPropertyChanged("AddInfoLetter");
					this.OnAddInfoLetterChanged();
				}
			}
		}

		[Association(Name = "FK_Appendix_OrderDoc", Storage = "_AppendixItems", ThisKey = "OrderGUID", OtherKey = "OrderDocGUID", DeleteRule = "NO ACTION")]
		public EntitySet<Appendix> AppendixItems
		{
			get
			{
				return this._AppendixItems;
			}
			set
			{
				this._AppendixItems.Assign(value);
			}
		}

		[Association(Name = "FK_Blank_OrderDoc", Storage = "_Blanks", ThisKey = "OrderGUID", OtherKey = "OrderDocGUID", DeleteRule = "NO ACTION")]
		public EntitySet<Blank> Blanks
		{
			get
			{
				return this._Blanks;
			}
			set
			{
				this._Blanks.Assign(value);
			}
		}

		[Association(Name = "FK_CommodityDocument_OrderDoc", Storage = "_CommodityDocs", ThisKey = "OrderGUID", OtherKey = "OrderDocGUID", DeleteRule = "CASCADE")]
		public EntitySet<CommodityDocument> CommodityDocs
		{
			get
			{
				return this._CommodityDocs;
			}
			set
			{
				this._CommodityDocs.Assign(value);
			}
		}

		[Association(Name = "FK_Copy_ContractorChiefPerson_OrderDoc", Storage = "_Copy_ContractorChiefPerson", ThisKey = "OrderGUID", OtherKey = "OrderDocGUID", DeleteRule = "CASCADE")]
		public EntitySet<Copy_ContractorChiefPerson> Copy_ContractorChiefPerson
		{
			get
			{
				return this._Copy_ContractorChiefPerson;
			}
			set
			{
				this._Copy_ContractorChiefPerson.Assign(value);
			}
		}

		[Association(Name = "FK_CustomsDeclaration_License", Storage = "_CustomsDeclaration", ThisKey = "OrderGUID", OtherKey = "LicenseGUID", DeleteRule = "NO ACTION")]
		public EntitySet<CustomsDeclaration> CustomsDeclaration
		{
			get
			{
				return this._CustomsDeclaration;
			}
			set
			{
				this._CustomsDeclaration.Assign(value);
			}
		}

		[Association(Name = "FK_Letter_OrderDoc", Storage = "_Letter", ThisKey = "OrderGUID", OtherKey = "OrderDocGUID", DeleteRule = "NO ACTION")]
		public EntitySet<Letter> Letter
		{
			get
			{
				return this._Letter;
			}
			set
			{
				this._Letter.Assign(value);
			}
		}

		[Association(Name = "FK_LicenseExecution_OrderDoc", Storage = "_Execution", ThisKey = "OrderGUID", OtherKey = "OrderDocGUID", DeleteRule = "CASCADE")]
		public EntitySet<LicenseExecution> Execution
		{
			get
			{
				return this._Execution;
			}
			set
			{
				this._Execution.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_Activity", Storage = "_Activity", ThisKey = "ActivityID", OtherKey = "ActivityID", IsForeignKey = true)]
		public WF_Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				WF_Activity previousValue = this._Activity.Entity;
				if (((previousValue != value)
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._ActivityID = value.ActivityID;
					}
					else
					{
						this._ActivityID = default(int);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_AddMeasure", Storage = "_AddMeasure", ThisKey = "AddMeasureID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure AddMeasure
		{
			get
			{
				return this._AddMeasure.Entity;
			}
			set
			{
				C_Measure previousValue = this._AddMeasure.Entity;
				if (((previousValue != value)
							|| (this._AddMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddMeasure.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._AddMeasure.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._AddMeasureID = value.MeasureID;
					}
					else
					{
						this._AddMeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AddMeasure");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_Applicant", Storage = "_Applicant", ThisKey = "ApplicantGUID", OtherKey = "ContractorVersionGUID", IsForeignKey = true)]
		public HST_Contractor Applicant
		{
			get
			{
				return this._Applicant.Entity;
			}
			set
			{
				HST_Contractor previousValue = this._Applicant.Entity;
				if (((previousValue != value)
							|| (this._Applicant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Applicant.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._Applicant.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._ApplicantGUID = value.ContractorVersionGUID;
					}
					else
					{
						this._ApplicantGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Applicant");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_ApplicantChief", Storage = "_ApplicantChief", ThisKey = "ApplicantChiefGUID", OtherKey = "ContractorChiefPersonGUID", IsForeignKey = true)]
		public ContractorChiefPerson ApplicantChief
		{
			get
			{
				return this._ApplicantChief.Entity;
			}
			set
			{
				ContractorChiefPerson previousValue = this._ApplicantChief.Entity;
				if (((previousValue != value)
							|| (this._ApplicantChief.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicantChief.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._ApplicantChief.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._ApplicantChiefGUID = value.ContractorChiefPersonGUID;
					}
					else
					{
						this._ApplicantChiefGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ApplicantChief");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_ApplicantRepresentative", Storage = "_ApplicantRepresentative", ThisKey = "ApplicantRepresentativeGUID", OtherKey = "ContractorChiefPersonGUID", IsForeignKey = true)]
		public ContractorChiefPerson ApplicantRepresentative
		{
			get
			{
				return this._ApplicantRepresentative.Entity;
			}
			set
			{
				ContractorChiefPerson previousValue = this._ApplicantRepresentative.Entity;
				if (((previousValue != value)
							|| (this._ApplicantRepresentative.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicantRepresentative.Entity = null;
						previousValue.ContractorChiefPersonGU.Remove(this);
					}
					this._ApplicantRepresentative.Entity = value;
					if ((value != null))
					{
						value.ContractorChiefPersonGU.Add(this);
						this._ApplicantRepresentativeGUID = value.ContractorChiefPersonGUID;
					}
					else
					{
						this._ApplicantRepresentativeGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ApplicantRepresentative");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_CN", Storage = "_CN", ThisKey = "CNID", OtherKey = "CNID", IsForeignKey = true)]
		public C_CN CN
		{
			get
			{
				return this._CN.Entity;
			}
			set
			{
				C_CN previousValue = this._CN.Entity;
				if (((previousValue != value)
							|| (this._CN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CN.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._CN.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._CNID = value.CNID;
					}
					else
					{
						this._CNID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CN");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_CNCategory", Storage = "_CNCategory", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", IsForeignKey = true)]
		public C_CNCategory CNCategory
		{
			get
			{
				return this._CNCategory.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._CNCategory.Entity;
				if (((previousValue != value)
							|| (this._CNCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategory.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._CNCategory.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._CNCategoryID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CNCategory");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_Country1", Storage = "_Country1", ThisKey = "Country1ID", OtherKey = "CountryID", IsForeignKey = true)]
		public C_Country Country1
		{
			get
			{
				return this._Country1.Entity;
			}
			set
			{
				C_Country previousValue = this._Country1.Entity;
				if (((previousValue != value)
							|| (this._Country1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country1.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._Country1.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._Country1ID = value.CountryID;
					}
					else
					{
						this._Country1ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country1");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_Country2", Storage = "_Country2", ThisKey = "Country2ID", OtherKey = "CountryID", IsForeignKey = true)]
		public C_Country Country2
		{
			get
			{
				return this._Country2.Entity;
			}
			set
			{
				C_Country previousValue = this._Country2.Entity;
				if (((previousValue != value)
							|| (this._Country2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country2.Entity = null;
						previousValue.OrderDoc_Country2.Remove(this);
					}
					this._Country2.Entity = value;
					if ((value != null))
					{
						value.OrderDoc_Country2.Add(this);
						this._Country2ID = value.CountryID;
					}
					else
					{
						this._Country2ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country2");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_Country3", Storage = "_Country3", ThisKey = "Country3ID", OtherKey = "CountryID", IsForeignKey = true)]
		public C_Country Country3
		{
			get
			{
				return this._Country3.Entity;
			}
			set
			{
				C_Country previousValue = this._Country3.Entity;
				if (((previousValue != value)
							|| (this._Country3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country3.Entity = null;
						previousValue.OrderDoc_Country3.Remove(this);
					}
					this._Country3.Entity = value;
					if ((value != null))
					{
						value.OrderDoc_Country3.Add(this);
						this._Country3ID = value.CountryID;
					}
					else
					{
						this._Country3ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country3");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_Employee", Storage = "_Employee", ThisKey = "EmployeeID", OtherKey = "EmployeeID", IsForeignKey = true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value)
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_FactForm_Employee", Storage = "_FactForm_Employee", ThisKey = "FactForm_EmployeeID", OtherKey = "EmployeeID", IsForeignKey = true)]
		public Employee FactForm_Employee
		{
			get
			{
				return this._FactForm_Employee.Entity;
			}
			set
			{
				Employee previousValue = this._FactForm_Employee.Entity;
				if (((previousValue != value)
							|| (this._FactForm_Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactForm_Employee.Entity = null;
						previousValue.OrderDoc_FactForm_Employee.Remove(this);
					}
					this._FactForm_Employee.Entity = value;
					if ((value != null))
					{
						value.OrderDoc_FactForm_Employee.Add(this);
						this._FactForm_EmployeeID = value.EmployeeID;
					}
					else
					{
						this._FactForm_EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FactForm_Employee");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_FactShippedMeasure", Storage = "_FactShippedMeasure", ThisKey = "FactShippedMeasureID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure FactShippedMeasure
		{
			get
			{
				return this._FactShippedMeasure.Entity;
			}
			set
			{
				C_Measure previousValue = this._FactShippedMeasure.Entity;
				if (((previousValue != value)
							|| (this._FactShippedMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactShippedMeasure.Entity = null;
						previousValue.OrderDoc_FactShippedMeasure.Remove(this);
					}
					this._FactShippedMeasure.Entity = value;
					if ((value != null))
					{
						value.OrderDoc_FactShippedMeasure.Add(this);
						this._FactShippedMeasureID = value.MeasureID;
					}
					else
					{
						this._FactShippedMeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FactShippedMeasure");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_IssueEmployee", Storage = "_IssueEmployee", ThisKey = "IssueEmployeeID", OtherKey = "EmployeeID", IsForeignKey = true)]
		public Employee IssueEmployee
		{
			get
			{
				return this._IssueEmployee.Entity;
			}
			set
			{
				Employee previousValue = this._IssueEmployee.Entity;
				if (((previousValue != value)
							|| (this._IssueEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IssueEmployee.Entity = null;
						previousValue.OrderDoc_IssueEmployee.Remove(this);
					}
					this._IssueEmployee.Entity = value;
					if ((value != null))
					{
						value.OrderDoc_IssueEmployee.Add(this);
						this._IssueEmployeeID = value.EmployeeID;
					}
					else
					{
						this._IssueEmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("IssueEmployee");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_LicenseType", Storage = "_LicenseType", ThisKey = "LicenseTypeID", OtherKey = "LicenseTypeID", IsForeignKey = true)]
		public C_LicenseType LicenseType
		{
			get
			{
				return this._LicenseType.Entity;
			}
			set
			{
				C_LicenseType previousValue = this._LicenseType.Entity;
				if (((previousValue != value)
							|| (this._LicenseType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LicenseType.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._LicenseType.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._LicenseTypeID = value.LicenseTypeID;
					}
					else
					{
						this._LicenseTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LicenseType");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_Measure", Storage = "_Measure", ThisKey = "MeasureID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure Measure
		{
			get
			{
				return this._Measure.Entity;
			}
			set
			{
				C_Measure previousValue = this._Measure.Entity;
				if (((previousValue != value)
							|| (this._Measure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure.Entity = null;
						previousValue.OrderDoc_Measure.Remove(this);
					}
					this._Measure.Entity = value;
					if ((value != null))
					{
						value.OrderDoc_Measure.Add(this);
						this._MeasureID = value.MeasureID;
					}
					else
					{
						this._MeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Measure");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_MFC", Storage = "_MFC", ThisKey = "MFCID", OtherKey = "MFCID", IsForeignKey = true)]
		public C_MFC MFC
		{
			get
			{
				return this._MFC.Entity;
			}
			set
			{
				C_MFC previousValue = this._MFC.Entity;
				if (((previousValue != value)
							|| (this._MFC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MFC.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._MFC.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._MFCID = value.MFCID;
					}
					else
					{
						this._MFCID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MFC");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_OperationType", Storage = "_OperationType", ThisKey = "OperationTypeID", OtherKey = "OperationTypeID", IsForeignKey = true)]
		public C_OperationType OperationType
		{
			get
			{
				return this._OperationType.Entity;
			}
			set
			{
				C_OperationType previousValue = this._OperationType.Entity;
				if (((previousValue != value)
							|| (this._OperationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperationType.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._OperationType.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._OperationTypeID = value.OperationTypeID;
					}
					else
					{
						this._OperationTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OperationType");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_PaymentCurrency", Storage = "_PaymentCurrency", ThisKey = "PaymentCurrencyID", OtherKey = "CurrencyID", IsForeignKey = true)]
		public C_Currency PaymentCurrency
		{
			get
			{
				return this._PaymentCurrency.Entity;
			}
			set
			{
				C_Currency previousValue = this._PaymentCurrency.Entity;
				if (((previousValue != value)
							|| (this._PaymentCurrency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentCurrency.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._PaymentCurrency.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._PaymentCurrencyID = value.CurrencyID;
					}
					else
					{
						this._PaymentCurrencyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PaymentCurrency");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_QuotaCountryGroup", Storage = "_QuotaCountryGroup", ThisKey = "QuotaCountryGroupID", OtherKey = "CountryGroupID", IsForeignKey = true)]
		public C_CountryGroup QuotaCountryGroup
		{
			get
			{
				return this._QuotaCountryGroup.Entity;
			}
			set
			{
				C_CountryGroup previousValue = this._QuotaCountryGroup.Entity;
				if (((previousValue != value)
							|| (this._QuotaCountryGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuotaCountryGroup.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._QuotaCountryGroup.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._QuotaCountryGroupID = value.CountryGroupID;
					}
					else
					{
						this._QuotaCountryGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("QuotaCountryGroup");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_QuoteOwner", Storage = "_QuoteOwner", ThisKey = "QuoteOwnerGUID", OtherKey = "ContractorVersionGUID", IsForeignKey = true)]
		public HST_Contractor QuoteOwner
		{
			get
			{
				return this._QuoteOwner.Entity;
			}
			set
			{
				HST_Contractor previousValue = this._QuoteOwner.Entity;
				if (((previousValue != value)
							|| (this._QuoteOwner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuoteOwner.Entity = null;
						previousValue.ContractorVersionGU.Remove(this);
					}
					this._QuoteOwner.Entity = value;
					if ((value != null))
					{
						value.ContractorVersionGU.Add(this);
						this._QuoteOwnerGUID = value.ContractorVersionGUID;
					}
					else
					{
						this._QuoteOwnerGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("QuoteOwner");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_QuoteOwnerChief", Storage = "_QuoteOwnerChief", ThisKey = "QuoteOwnerChiefGUID", OtherKey = "ContractorChiefPersonGUID", IsForeignKey = true)]
		public ContractorChiefPerson QuoteOwnerChief
		{
			get
			{
				return this._QuoteOwnerChief.Entity;
			}
			set
			{
				ContractorChiefPerson previousValue = this._QuoteOwnerChief.Entity;
				if (((previousValue != value)
							|| (this._QuoteOwnerChief.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuoteOwnerChief.Entity = null;
						previousValue.OrderDoc_QuoteOwnerChief.Remove(this);
					}
					this._QuoteOwnerChief.Entity = value;
					if ((value != null))
					{
						value.OrderDoc_QuoteOwnerChief.Add(this);
						this._QuoteOwnerChiefGUID = value.ContractorChiefPersonGUID;
					}
					else
					{
						this._QuoteOwnerChiefGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("QuoteOwnerChief");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_RegEmployee", Storage = "_RegEmployee", ThisKey = "RegEmployeeID", OtherKey = "EmployeeID", IsForeignKey = true)]
		public Employee RegEmployee
		{
			get
			{
				return this._RegEmployee.Entity;
			}
			set
			{
				Employee previousValue = this._RegEmployee.Entity;
				if (((previousValue != value)
							|| (this._RegEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegEmployee.Entity = null;
						previousValue.OrderDoc_RegEmployee.Remove(this);
					}
					this._RegEmployee.Entity = value;
					if ((value != null))
					{
						value.OrderDoc_RegEmployee.Add(this);
						this._RegEmployeeID = value.EmployeeID;
					}
					else
					{
						this._RegEmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RegEmployee");
				}
			}
		}

		[Association(Name = "FK_OrderDoc_Representation", Storage = "_Representation", ThisKey = "RepresentationID", OtherKey = "RepresentationID", IsForeignKey = true)]
		public Representation Representation
		{
			get
			{
				return this._Representation.Entity;
			}
			set
			{
				Representation previousValue = this._Representation.Entity;
				if (((previousValue != value)
							|| (this._Representation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representation.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._Representation.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._RepresentationID = value.RepresentationID;
					}
					else
					{
						this._RepresentationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Representation");
				}
			}
		}

		[Association(Name = "FK_OrderDocAsso_Child", Storage = "_OrderDocAsso", ThisKey = "OrderGUID", OtherKey = "ChildGUID", DeleteRule = "CASCADE")]
		public EntitySet<OrderDocAsso> OrderDocAsso
		{
			get
			{
				return this._OrderDocAsso;
			}
			set
			{
				this._OrderDocAsso.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDocAsso_Parent", Storage = "_OrderGU", ThisKey = "OrderGUID", OtherKey = "ParentGUID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDocAsso> OrderGU
		{
			get
			{
				return this._OrderGU;
			}
			set
			{
				this._OrderGU.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDocDeviation_OrderDoc", Storage = "_Declensions", ThisKey = "OrderGUID", OtherKey = "OrderDocGUID", DeleteRule = "CASCADE")]
		public EntitySet<OrderDocDeviation> Declensions
		{
			get
			{
				return this._Declensions;
			}
			set
			{
				this._Declensions.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDocImportSubject_OrderDoc", Storage = "_OrderDocImportSubject", ThisKey = "OrderGUID", OtherKey = "OrderDocGUID", DeleteRule = "CASCADE")]
		public EntitySet<OrderDocImportSubject> OrderDocImportSubject
		{
			get
			{
				return this._OrderDocImportSubject;
			}
			set
			{
				this._OrderDocImportSubject.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDocState_OrderDoc", Storage = "_States", ThisKey = "OrderGUID", OtherKey = "OrderDocGUID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDocState> States
		{
			get
			{
				return this._States;
			}
			set
			{
				this._States.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDocTransition_Parent", Storage = "_OrderDocTransition", ThisKey = "OrderGUID", OtherKey = "ParentGUID", DeleteRule = "CASCADE")]
		public EntitySet<OrderDocTransition> OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition;
			}
			set
			{
				this._OrderDocTransition.Assign(value);
			}
		}

		[Association(Name = "FK_PaymentOrder_License", Storage = "_LicensePaymentOrders", ThisKey = "OrderGUID", OtherKey = "LicenseGUID", DeleteRule = "NO ACTION")]
		public EntitySet<PaymentOrder> LicensePaymentOrders
		{
			get
			{
				return this._LicensePaymentOrders;
			}
			set
			{
				this._LicensePaymentOrders.Assign(value);
			}
		}

		[Association(Name = "FK_PaymentOrder_Request", Storage = "_RequestPaymentOrders", ThisKey = "OrderGUID", OtherKey = "RequestGUID", DeleteRule = "NO ACTION")]
		public EntitySet<PaymentOrder> RequestPaymentOrders
		{
			get
			{
				return this._RequestPaymentOrders;
			}
			set
			{
				this._RequestPaymentOrders.Assign(value);
			}
		}

		[Association(Name = "FK_PaymentOrderLicenses_Licenses", Storage = "_PaymentOrderLicenses", ThisKey = "OrderGUID", OtherKey = "LicensesGUID", DeleteRule = "CASCADE")]
		public EntitySet<PaymentOrderLicenses> PaymentOrderLicenses
		{
			get
			{
				return this._PaymentOrderLicenses;
			}
			set
			{
				this._PaymentOrderLicenses.Assign(value);
			}
		}

		[Association(Name = "FK_PaymentOrderRequests_Requests", Storage = "_PaymentOrderRequests", ThisKey = "OrderGUID", OtherKey = "RequestsGUID", DeleteRule = "CASCADE")]
		public EntitySet<PaymentOrderRequests> PaymentOrderRequests
		{
			get
			{
				return this._PaymentOrderRequests;
			}
			set
			{
				this._PaymentOrderRequests.Assign(value);
			}
		}

		[Association(Name = "FK_QuotaRequest_OrderDoc", Storage = "_QuotaRequest", ThisKey = "OrderGUID", OtherKey = "OrderDocGUID", DeleteRule = "CASCADE")]
		public EntitySet<QuotaRequest> QuotaRequest
		{
			get
			{
				return this._QuotaRequest;
			}
			set
			{
				this._QuotaRequest.Assign(value);
			}
		}

		[Association(Name = "FK_SpecificationCommon_OrderDoc", Storage = "_SpecificationCommon", ThisKey = "OrderGUID", OtherKey = "OrderDocGUID", DeleteRule = "NO ACTION")]
		public EntitySet<SpecificationCommon> SpecificationCommon
		{
			get
			{
				return this._SpecificationCommon;
			}
			set
			{
				this._SpecificationCommon.Assign(value);
			}
		}

		[Association(Name = "FK_SpecificationItem_OrderDoc", Storage = "_SpecificationItem", ThisKey = "OrderGUID", OtherKey = "OrderDocGUID", DeleteRule = "NO ACTION")]
		public EntitySet<SpecificationItem> SpecificationItem
		{
			get
			{
				return this._SpecificationItem;
			}
			set
			{
				this._SpecificationItem.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_AppendixItems(Appendix entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}

		private void detach_AppendixItems(Appendix entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}

		private void attach_Blanks(Blank entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}

		private void detach_Blanks(Blank entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}

		private void attach_CommodityDocs(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}

		private void detach_CommodityDocs(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}

		private void attach_Copy_ContractorChiefPerson(Copy_ContractorChiefPerson entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}

		private void detach_Copy_ContractorChiefPerson(Copy_ContractorChiefPerson entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}

		private void attach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.License = this;
		}

		private void detach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.License = null;
		}

		private void attach_Letter(Letter entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}

		private void detach_Letter(Letter entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}

		private void attach_Execution(LicenseExecution entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}

		private void detach_Execution(LicenseExecution entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}

		private void attach_OrderDocAsso(OrderDocAsso entity)
		{
			this.SendPropertyChanging();
			entity.Child = this;
		}

		private void detach_OrderDocAsso(OrderDocAsso entity)
		{
			this.SendPropertyChanging();
			entity.Child = null;
		}

		private void attach_OrderGU(OrderDocAsso entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}

		private void detach_OrderGU(OrderDocAsso entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}

		private void attach_Declensions(OrderDocDeviation entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}

		private void detach_Declensions(OrderDocDeviation entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}

		private void attach_OrderDocImportSubject(OrderDocImportSubject entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}

		private void detach_OrderDocImportSubject(OrderDocImportSubject entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}

		private void attach_States(OrderDocState entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}

		private void detach_States(OrderDocState entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}

		private void attach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}

		private void detach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}

		private void attach_LicensePaymentOrders(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.License = this;
		}

		private void detach_LicensePaymentOrders(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.License = null;
		}

		private void attach_RequestPaymentOrders(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.Request = this;
		}

		private void detach_RequestPaymentOrders(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.Request = null;
		}

		private void attach_PaymentOrderLicenses(PaymentOrderLicenses entity)
		{
			this.SendPropertyChanging();
			entity.Licenses = this;
		}

		private void detach_PaymentOrderLicenses(PaymentOrderLicenses entity)
		{
			this.SendPropertyChanging();
			entity.Licenses = null;
		}

		private void attach_PaymentOrderRequests(PaymentOrderRequests entity)
		{
			this.SendPropertyChanging();
			entity.Requests = this;
		}

		private void detach_PaymentOrderRequests(PaymentOrderRequests entity)
		{
			this.SendPropertyChanging();
			entity.Requests = null;
		}

		private void attach_QuotaRequest(QuotaRequest entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}

		private void detach_QuotaRequest(QuotaRequest entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}

		private void attach_SpecificationCommon(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}

		private void detach_SpecificationCommon(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}

		private void attach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}

		private void detach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}
	}

	[Table(Name = "dbo.OrderDocAsso")]
	public partial class OrderDocAsso : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _OrderDocAssoID;

		private System.Guid _ChildGUID;

		private System.Guid _ParentGUID;

		private char _Type;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private bool _IsDeleted;

		private EntityRef<OrderDoc> _Child;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<OrderDoc> _Parent;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnOrderDocAssoIDChanging(int value);
		partial void OnOrderDocAssoIDChanged();
		partial void OnChildGUIDChanging(System.Guid value);
		partial void OnChildGUIDChanged();
		partial void OnParentGUIDChanging(System.Guid value);
		partial void OnParentGUIDChanged();
		partial void OnTypeChanging(char value);
		partial void OnTypeChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public OrderDocAsso()
		{
			this._Child = default(EntityRef<OrderDoc>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Parent = default(EntityRef<OrderDoc>);
			OnCreated();
		}

		[Column(Storage = "_OrderDocAssoID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int OrderDocAssoID
		{
			get
			{
				return this._OrderDocAssoID;
			}
			set
			{
				if ((this._OrderDocAssoID != value))
				{
					this.OnOrderDocAssoIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocAssoID = value;
					this.SendPropertyChanged("OrderDocAssoID");
					this.OnOrderDocAssoIDChanged();
				}
			}
		}

		[Column(Storage = "_ChildGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid ChildGUID
		{
			get
			{
				return this._ChildGUID;
			}
			set
			{
				if ((this._ChildGUID != value))
				{
					if (this._Child.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildGUIDChanging(value);
					this.SendPropertyChanging();
					this._ChildGUID = value;
					this.SendPropertyChanged("ChildGUID");
					this.OnChildGUIDChanged();
				}
			}
		}

		[Column(Storage = "_ParentGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid ParentGUID
		{
			get
			{
				return this._ParentGUID;
			}
			set
			{
				if ((this._ParentGUID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentGUIDChanging(value);
					this.SendPropertyChanging();
					this._ParentGUID = value;
					this.SendPropertyChanged("ParentGUID");
					this.OnParentGUIDChanged();
				}
			}
		}

		[Column(Storage = "_Type", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_OrderDocAsso_Child", Storage = "_Child", ThisKey = "ChildGUID", OtherKey = "OrderGUID", IsForeignKey = true, DeleteOnNull = true)]
		public OrderDoc Child
		{
			get
			{
				return this._Child.Entity;
			}
			set
			{
				OrderDoc previousValue = this._Child.Entity;
				if (((previousValue != value)
							|| (this._Child.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Child.Entity = null;
						previousValue.OrderDocAsso.Remove(this);
					}
					this._Child.Entity = value;
					if ((value != null))
					{
						value.OrderDocAsso.Add(this);
						this._ChildGUID = value.OrderGUID;
					}
					else
					{
						this._ChildGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Child");
				}
			}
		}

		[Association(Name = "FK_OrderDocAsso_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.OrderDocAsso.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.OrderDocAsso.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_OrderDocAsso_Parent", Storage = "_Parent", ThisKey = "ParentGUID", OtherKey = "OrderGUID", IsForeignKey = true)]
		public OrderDoc Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				OrderDoc previousValue = this._Parent.Entity;
				if (((previousValue != value)
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.OrderGU.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.OrderGU.Add(this);
						this._ParentGUID = value.OrderGUID;
					}
					else
					{
						this._ParentGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.OrderDocDeviation")]
	public partial class OrderDocDeviation : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _OrderDocDeviationID;

		private System.DateTime _LastModifiedDate;

		private System.Guid _OrderDocGUID;

		private System.DateTime _MaxFormDate;

		private System.Nullable<System.DateTime> _ActualFormDate;

		private EntityRef<OrderDoc> _OrderDoc;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnOrderDocDeviationIDChanging(int value);
		partial void OnOrderDocDeviationIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnOrderDocGUIDChanging(System.Guid value);
		partial void OnOrderDocGUIDChanged();
		partial void OnMaxFormDateChanging(System.DateTime value);
		partial void OnMaxFormDateChanged();
		partial void OnActualFormDateChanging(System.Nullable<System.DateTime> value);
		partial void OnActualFormDateChanged();
		#endregion

		public OrderDocDeviation()
		{
			this._OrderDoc = default(EntityRef<OrderDoc>);
			OnCreated();
		}

		[Column(Storage = "_OrderDocDeviationID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int OrderDocDeviationID
		{
			get
			{
				return this._OrderDocDeviationID;
			}
			set
			{
				if ((this._OrderDocDeviationID != value))
				{
					this.OnOrderDocDeviationIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocDeviationID = value;
					this.SendPropertyChanged("OrderDocDeviationID");
					this.OnOrderDocDeviationIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_OrderDocGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}

		[Column(Storage = "_MaxFormDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime MaxFormDate
		{
			get
			{
				return this._MaxFormDate;
			}
			set
			{
				if ((this._MaxFormDate != value))
				{
					this.OnMaxFormDateChanging(value);
					this.SendPropertyChanging();
					this._MaxFormDate = value;
					this.SendPropertyChanged("MaxFormDate");
					this.OnMaxFormDateChanged();
				}
			}
		}

		[Column(Storage = "_ActualFormDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ActualFormDate
		{
			get
			{
				return this._ActualFormDate;
			}
			set
			{
				if ((this._ActualFormDate != value))
				{
					this.OnActualFormDateChanging(value);
					this.SendPropertyChanging();
					this._ActualFormDate = value;
					this.SendPropertyChanged("ActualFormDate");
					this.OnActualFormDateChanged();
				}
			}
		}

		[Association(Name = "FK_OrderDocDeviation_OrderDoc", Storage = "_OrderDoc", ThisKey = "OrderDocGUID", OtherKey = "OrderGUID", IsForeignKey = true, DeleteOnNull = true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value)
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.Declensions.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.Declensions.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.OrderDocImportSubject")]
	public partial class OrderDocImportSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _OrderDocImportSubjectID;

		private System.Guid _OrderDocGUID;

		private int _SubjectID;

		private EntityRef<OrderDoc> _OrderDoc;

		private EntityRef<SPM_Subject> _Subject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnOrderDocImportSubjectIDChanging(int value);
		partial void OnOrderDocImportSubjectIDChanged();
		partial void OnOrderDocGUIDChanging(System.Guid value);
		partial void OnOrderDocGUIDChanged();
		partial void OnSubjectIDChanging(int value);
		partial void OnSubjectIDChanged();
		#endregion

		public OrderDocImportSubject()
		{
			this._OrderDoc = default(EntityRef<OrderDoc>);
			this._Subject = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_OrderDocImportSubjectID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int OrderDocImportSubjectID
		{
			get
			{
				return this._OrderDocImportSubjectID;
			}
			set
			{
				if ((this._OrderDocImportSubjectID != value))
				{
					this.OnOrderDocImportSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocImportSubjectID = value;
					this.SendPropertyChanged("OrderDocImportSubjectID");
					this.OnOrderDocImportSubjectIDChanged();
				}
			}
		}

		[Column(Storage = "_OrderDocGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}

		[Column(Storage = "_SubjectID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}

		[Association(Name = "FK_OrderDocImportSubject_OrderDoc", Storage = "_OrderDoc", ThisKey = "OrderDocGUID", OtherKey = "OrderGUID", IsForeignKey = true, DeleteOnNull = true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value)
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.OrderDocImportSubject.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.OrderDocImportSubject.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}

		[Association(Name = "FK_OrderDocImportSubject_Subject", Storage = "_Subject", ThisKey = "SubjectID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._Subject.Entity;
				if (((previousValue != value)
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.OrderDocImportSubject.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.OrderDocImportSubject.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.OrderDocLicReplication")]
	public partial class OrderDocLicReplication : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _OrderDocGUID;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnOrderDocGUIDChanging(System.Guid value);
		partial void OnOrderDocGUIDChanged();
		#endregion

		public OrderDocLicReplication()
		{
			OnCreated();
		}

		[Column(Storage = "_OrderDocGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.OrderDocState")]
	public partial class OrderDocState : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _OrderDocStateGUID;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.Guid _OrderDocGUID;

		private string _Title;

		private System.Nullable<System.Guid> _Guid;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<OrderDoc> _OrderDoc;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnOrderDocStateGUIDChanging(System.Guid value);
		partial void OnOrderDocStateGUIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnOrderDocGUIDChanging(System.Guid value);
		partial void OnOrderDocGUIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnGuidChanging(System.Nullable<System.Guid> value);
		partial void OnGuidChanged();
		#endregion

		public OrderDocState()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDoc = default(EntityRef<OrderDoc>);
			OnCreated();
		}

		[Column(Storage = "_OrderDocStateGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid OrderDocStateGUID
		{
			get
			{
				return this._OrderDocStateGUID;
			}
			set
			{
				if ((this._OrderDocStateGUID != value))
				{
					this.OnOrderDocStateGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocStateGUID = value;
					this.SendPropertyChanged("OrderDocStateGUID");
					this.OnOrderDocStateGUIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_OrderDocGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Association(Name = "FK_OrderDocState_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.OrderDocState.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.OrderDocState.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_OrderDocState_OrderDoc", Storage = "_OrderDoc", ThisKey = "OrderDocGUID", OtherKey = "OrderGUID", IsForeignKey = true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value)
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.States.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.States.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.OrderDocTransition")]
	public partial class OrderDocTransition : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _OrderDocTransitionID;

		private System.DateTime _CreateDate;

		private string _Comment;

		private bool _IsCurrent;

		private bool _IsLast;

		private int _SeqNo;

		private System.Guid _ParentGUID;

		private int _SubjectID;

		private int _WorkflowID;

		private int _ActivityID;

		private int _TransitionID;

		private EntityRef<FactAnnulment> _FactAnnulment;

		private EntityRef<FactClose> _FactClose;

		private EntityRef<FactForm> _FactForm;

		private EntityRef<FactRegister> _FactRegister;

		private EntityRef<FactReject> _FactReject;

		private EntityRef<FactResume> _FactResume;

		private EntityRef<FactSuspend> _FactSuspend;

		private EntityRef<WF_Activity> _Activity;

		private EntityRef<OrderDoc> _Parent;

		private EntityRef<SPM_Subject> _Subject;

		private EntityRef<WF_Transition> _Transition;

		private EntityRef<WF_Workflow> _Workflow;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnOrderDocTransitionIDChanging(int value);
		partial void OnOrderDocTransitionIDChanged();
		partial void OnCreateDateChanging(System.DateTime value);
		partial void OnCreateDateChanged();
		partial void OnCommentChanging(string value);
		partial void OnCommentChanged();
		partial void OnIsCurrentChanging(bool value);
		partial void OnIsCurrentChanged();
		partial void OnIsLastChanging(bool value);
		partial void OnIsLastChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnParentGUIDChanging(System.Guid value);
		partial void OnParentGUIDChanged();
		partial void OnSubjectIDChanging(int value);
		partial void OnSubjectIDChanged();
		partial void OnWorkflowIDChanging(int value);
		partial void OnWorkflowIDChanged();
		partial void OnActivityIDChanging(int value);
		partial void OnActivityIDChanged();
		partial void OnTransitionIDChanging(int value);
		partial void OnTransitionIDChanged();
		#endregion

		public OrderDocTransition()
		{
			this._FactAnnulment = default(EntityRef<FactAnnulment>);
			this._FactClose = default(EntityRef<FactClose>);
			this._FactForm = default(EntityRef<FactForm>);
			this._FactRegister = default(EntityRef<FactRegister>);
			this._FactReject = default(EntityRef<FactReject>);
			this._FactResume = default(EntityRef<FactResume>);
			this._FactSuspend = default(EntityRef<FactSuspend>);
			this._Activity = default(EntityRef<WF_Activity>);
			this._Parent = default(EntityRef<OrderDoc>);
			this._Subject = default(EntityRef<SPM_Subject>);
			this._Transition = default(EntityRef<WF_Transition>);
			this._Workflow = default(EntityRef<WF_Workflow>);
			OnCreated();
		}

		[Column(Storage = "_OrderDocTransitionID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int OrderDocTransitionID
		{
			get
			{
				return this._OrderDocTransitionID;
			}
			set
			{
				if ((this._OrderDocTransitionID != value))
				{
					this.OnOrderDocTransitionIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocTransitionID = value;
					this.SendPropertyChanged("OrderDocTransitionID");
					this.OnOrderDocTransitionIDChanged();
				}
			}
		}

		[Column(Storage = "_CreateDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}

		[Column(Storage = "_Comment", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}

		[Column(Storage = "_IsCurrent", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsCurrent
		{
			get
			{
				return this._IsCurrent;
			}
			set
			{
				if ((this._IsCurrent != value))
				{
					this.OnIsCurrentChanging(value);
					this.SendPropertyChanging();
					this._IsCurrent = value;
					this.SendPropertyChanged("IsCurrent");
					this.OnIsCurrentChanged();
				}
			}
		}

		[Column(Storage = "_IsLast", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsLast
		{
			get
			{
				return this._IsLast;
			}
			set
			{
				if ((this._IsLast != value))
				{
					this.OnIsLastChanging(value);
					this.SendPropertyChanging();
					this._IsLast = value;
					this.SendPropertyChanged("IsLast");
					this.OnIsLastChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_ParentGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid ParentGUID
		{
			get
			{
				return this._ParentGUID;
			}
			set
			{
				if ((this._ParentGUID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentGUIDChanging(value);
					this.SendPropertyChanging();
					this._ParentGUID = value;
					this.SendPropertyChanged("ParentGUID");
					this.OnParentGUIDChanged();
				}
			}
		}

		[Column(Storage = "_SubjectID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}

		[Column(Storage = "_WorkflowID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int WorkflowID
		{
			get
			{
				return this._WorkflowID;
			}
			set
			{
				if ((this._WorkflowID != value))
				{
					if (this._Workflow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkflowIDChanging(value);
					this.SendPropertyChanging();
					this._WorkflowID = value;
					this.SendPropertyChanged("WorkflowID");
					this.OnWorkflowIDChanged();
				}
			}
		}

		[Column(Storage = "_ActivityID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ActivityID = value;
					this.SendPropertyChanged("ActivityID");
					this.OnActivityIDChanged();
				}
			}
		}

		[Column(Storage = "_TransitionID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int TransitionID
		{
			get
			{
				return this._TransitionID;
			}
			set
			{
				if ((this._TransitionID != value))
				{
					if (this._Transition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransitionIDChanging(value);
					this.SendPropertyChanging();
					this._TransitionID = value;
					this.SendPropertyChanged("TransitionID");
					this.OnTransitionIDChanged();
				}
			}
		}

		[Association(Name = "FK_FactAnnulment_OrderDocTransition", Storage = "_FactAnnulment", ThisKey = "OrderDocTransitionID", OtherKey = "FactID", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
		public FactAnnulment FactAnnulment
		{
			get
			{
				return this._FactAnnulment.Entity;
			}
			set
			{
				FactAnnulment previousValue = this._FactAnnulment.Entity;
				if (((previousValue != value)
							|| (this._FactAnnulment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactAnnulment.Entity = null;
						previousValue.OrderDocTransition = null;
					}
					this._FactAnnulment.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition = this;
					}
					this.SendPropertyChanged("FactAnnulment");
				}
			}
		}

		[Association(Name = "FK_FactClose_OrderDocTransition", Storage = "_FactClose", ThisKey = "OrderDocTransitionID", OtherKey = "FactID", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
		public FactClose FactClose
		{
			get
			{
				return this._FactClose.Entity;
			}
			set
			{
				FactClose previousValue = this._FactClose.Entity;
				if (((previousValue != value)
							|| (this._FactClose.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactClose.Entity = null;
						previousValue.OrderDocTransition = null;
					}
					this._FactClose.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition = this;
					}
					this.SendPropertyChanged("FactClose");
				}
			}
		}

		[Association(Name = "FK_FactForm_OrderDocTransition", Storage = "_FactForm", ThisKey = "OrderDocTransitionID", OtherKey = "FactID", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
		public FactForm FactForm
		{
			get
			{
				return this._FactForm.Entity;
			}
			set
			{
				FactForm previousValue = this._FactForm.Entity;
				if (((previousValue != value)
							|| (this._FactForm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactForm.Entity = null;
						previousValue.OrderDocTransition = null;
					}
					this._FactForm.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition = this;
					}
					this.SendPropertyChanged("FactForm");
				}
			}
		}

		[Association(Name = "FK_FactRegister_OrderDocTransition", Storage = "_FactRegister", ThisKey = "OrderDocTransitionID", OtherKey = "FactID", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
		public FactRegister FactRegister
		{
			get
			{
				return this._FactRegister.Entity;
			}
			set
			{
				FactRegister previousValue = this._FactRegister.Entity;
				if (((previousValue != value)
							|| (this._FactRegister.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactRegister.Entity = null;
						previousValue.OrderDocTransition = null;
					}
					this._FactRegister.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition = this;
					}
					this.SendPropertyChanged("FactRegister");
				}
			}
		}

		[Association(Name = "FK_FactReject_OrderDocTransition", Storage = "_FactReject", ThisKey = "OrderDocTransitionID", OtherKey = "FactID", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
		public FactReject FactReject
		{
			get
			{
				return this._FactReject.Entity;
			}
			set
			{
				FactReject previousValue = this._FactReject.Entity;
				if (((previousValue != value)
							|| (this._FactReject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactReject.Entity = null;
						previousValue.OrderDocTransition = null;
					}
					this._FactReject.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition = this;
					}
					this.SendPropertyChanged("FactReject");
				}
			}
		}

		[Association(Name = "FK_FactResume_OrderDocTransition", Storage = "_FactResume", ThisKey = "OrderDocTransitionID", OtherKey = "FactID", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
		public FactResume FactResume
		{
			get
			{
				return this._FactResume.Entity;
			}
			set
			{
				FactResume previousValue = this._FactResume.Entity;
				if (((previousValue != value)
							|| (this._FactResume.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactResume.Entity = null;
						previousValue.OrderDocTransition = null;
					}
					this._FactResume.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition = this;
					}
					this.SendPropertyChanged("FactResume");
				}
			}
		}

		[Association(Name = "FK_FactSuspend_OrderDocTransition", Storage = "_FactSuspend", ThisKey = "OrderDocTransitionID", OtherKey = "FactID", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
		public FactSuspend FactSuspend
		{
			get
			{
				return this._FactSuspend.Entity;
			}
			set
			{
				FactSuspend previousValue = this._FactSuspend.Entity;
				if (((previousValue != value)
							|| (this._FactSuspend.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactSuspend.Entity = null;
						previousValue.OrderDocTransition = null;
					}
					this._FactSuspend.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition = this;
					}
					this.SendPropertyChanged("FactSuspend");
				}
			}
		}

		[Association(Name = "FK_OrderDocTransition_Activity", Storage = "_Activity", ThisKey = "ActivityID", OtherKey = "ActivityID", IsForeignKey = true)]
		public WF_Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				WF_Activity previousValue = this._Activity.Entity;
				if (((previousValue != value)
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.OrderDocTransition.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition.Add(this);
						this._ActivityID = value.ActivityID;
					}
					else
					{
						this._ActivityID = default(int);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}

		[Association(Name = "FK_OrderDocTransition_Parent", Storage = "_Parent", ThisKey = "ParentGUID", OtherKey = "OrderGUID", IsForeignKey = true, DeleteOnNull = true)]
		public OrderDoc Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				OrderDoc previousValue = this._Parent.Entity;
				if (((previousValue != value)
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.OrderDocTransition.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition.Add(this);
						this._ParentGUID = value.OrderGUID;
					}
					else
					{
						this._ParentGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}

		[Association(Name = "FK_OrderDocTransition_Subject", Storage = "_Subject", ThisKey = "SubjectID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._Subject.Entity;
				if (((previousValue != value)
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.OrderDocTransition.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}

		[Association(Name = "FK_OrderDocTransition_Transition", Storage = "_Transition", ThisKey = "TransitionID", OtherKey = "TransitionID", IsForeignKey = true)]
		public WF_Transition Transition
		{
			get
			{
				return this._Transition.Entity;
			}
			set
			{
				WF_Transition previousValue = this._Transition.Entity;
				if (((previousValue != value)
							|| (this._Transition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transition.Entity = null;
						previousValue.OrderDocTransition.Remove(this);
					}
					this._Transition.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition.Add(this);
						this._TransitionID = value.TransitionID;
					}
					else
					{
						this._TransitionID = default(int);
					}
					this.SendPropertyChanged("Transition");
				}
			}
		}

		[Association(Name = "FK_OrderDocTransition_Workflow", Storage = "_Workflow", ThisKey = "WorkflowID", OtherKey = "WorkflowID", IsForeignKey = true)]
		public WF_Workflow Workflow
		{
			get
			{
				return this._Workflow.Entity;
			}
			set
			{
				WF_Workflow previousValue = this._Workflow.Entity;
				if (((previousValue != value)
							|| (this._Workflow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Workflow.Entity = null;
						previousValue.OrderDocTransition.Remove(this);
					}
					this._Workflow.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition.Add(this);
						this._WorkflowID = value.WorkflowID;
					}
					else
					{
						this._WorkflowID = default(int);
					}
					this.SendPropertyChanged("Workflow");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.PaymentOrder")]
	public partial class PaymentOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _PaymentOrderGUID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.DateTime _Date;

		private string _Number;

		private System.Guid _ContractorGUID;

		private System.Nullable<System.Guid> _RequestGUID;

		private System.Nullable<System.Guid> _LicenseGUID;

		private string _PayerBankDetails;

		private string _RecipientDetails;

		private char _PaymentPurpose;

		private decimal _Amount;

		private System.Nullable<int> _DocumentFileID;

		private bool _IsConfirm;

		private System.Nullable<int> _RepresentationID;

		private bool _IsSent;

		private EntityRef<Contractor> _Contractor;

		private EntityRef<N_File> _Document;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<OrderDoc> _License;

		private EntityRef<Representation> _Representation;

		private EntityRef<OrderDoc> _Request;

		private EntitySet<PaymentOrderLicenses> _PaymentOrderLicenses;

		private EntitySet<PaymentOrderRequests> _PaymentOrderRequests;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnPaymentOrderGUIDChanging(System.Guid value);
		partial void OnPaymentOrderGUIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnDateChanging(System.DateTime value);
		partial void OnDateChanged();
		partial void OnNumberChanging(string value);
		partial void OnNumberChanged();
		partial void OnContractorGUIDChanging(System.Guid value);
		partial void OnContractorGUIDChanged();
		partial void OnRequestGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnRequestGUIDChanged();
		partial void OnLicenseGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnLicenseGUIDChanged();
		partial void OnPayerBankDetailsChanging(string value);
		partial void OnPayerBankDetailsChanged();
		partial void OnRecipientDetailsChanging(string value);
		partial void OnRecipientDetailsChanged();
		partial void OnPaymentPurposeChanging(char value);
		partial void OnPaymentPurposeChanged();
		partial void OnAmountChanging(decimal value);
		partial void OnAmountChanged();
		partial void OnDocumentFileIDChanging(System.Nullable<int> value);
		partial void OnDocumentFileIDChanged();
		partial void OnIsConfirmChanging(bool value);
		partial void OnIsConfirmChanged();
		partial void OnRepresentationIDChanging(System.Nullable<int> value);
		partial void OnRepresentationIDChanged();
		partial void OnIsSentChanging(bool value);
		partial void OnIsSentChanged();
		#endregion

		public PaymentOrder()
		{
			this._Contractor = default(EntityRef<Contractor>);
			this._Document = default(EntityRef<N_File>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._License = default(EntityRef<OrderDoc>);
			this._Representation = default(EntityRef<Representation>);
			this._Request = default(EntityRef<OrderDoc>);
			this._PaymentOrderLicenses = new EntitySet<PaymentOrderLicenses>(new Action<PaymentOrderLicenses>(this.attach_PaymentOrderLicenses), new Action<PaymentOrderLicenses>(this.detach_PaymentOrderLicenses));
			this._PaymentOrderRequests = new EntitySet<PaymentOrderRequests>(new Action<PaymentOrderRequests>(this.attach_PaymentOrderRequests), new Action<PaymentOrderRequests>(this.detach_PaymentOrderRequests));
			OnCreated();
		}

		[Column(Storage = "_PaymentOrderGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid PaymentOrderGUID
		{
			get
			{
				return this._PaymentOrderGUID;
			}
			set
			{
				if ((this._PaymentOrderGUID != value))
				{
					this.OnPaymentOrderGUIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentOrderGUID = value;
					this.SendPropertyChanged("PaymentOrderGUID");
					this.OnPaymentOrderGUIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Date", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}

		[Column(Storage = "_Number", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}

		[Column(Storage = "_ContractorGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorGUID = value;
					this.SendPropertyChanged("ContractorGUID");
					this.OnContractorGUIDChanged();
				}
			}
		}

		[Column(Storage = "_RequestGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> RequestGUID
		{
			get
			{
				return this._RequestGUID;
			}
			set
			{
				if ((this._RequestGUID != value))
				{
					if (this._Request.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestGUIDChanging(value);
					this.SendPropertyChanging();
					this._RequestGUID = value;
					this.SendPropertyChanged("RequestGUID");
					this.OnRequestGUIDChanged();
				}
			}
		}

		[Column(Storage = "_LicenseGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> LicenseGUID
		{
			get
			{
				return this._LicenseGUID;
			}
			set
			{
				if ((this._LicenseGUID != value))
				{
					if (this._License.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLicenseGUIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseGUID = value;
					this.SendPropertyChanged("LicenseGUID");
					this.OnLicenseGUIDChanged();
				}
			}
		}

		[Column(Storage = "_PayerBankDetails", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string PayerBankDetails
		{
			get
			{
				return this._PayerBankDetails;
			}
			set
			{
				if ((this._PayerBankDetails != value))
				{
					this.OnPayerBankDetailsChanging(value);
					this.SendPropertyChanging();
					this._PayerBankDetails = value;
					this.SendPropertyChanged("PayerBankDetails");
					this.OnPayerBankDetailsChanged();
				}
			}
		}

		[Column(Storage = "_RecipientDetails", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string RecipientDetails
		{
			get
			{
				return this._RecipientDetails;
			}
			set
			{
				if ((this._RecipientDetails != value))
				{
					this.OnRecipientDetailsChanging(value);
					this.SendPropertyChanging();
					this._RecipientDetails = value;
					this.SendPropertyChanged("RecipientDetails");
					this.OnRecipientDetailsChanged();
				}
			}
		}

		[Column(Storage = "_PaymentPurpose", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char PaymentPurpose
		{
			get
			{
				return this._PaymentPurpose;
			}
			set
			{
				if ((this._PaymentPurpose != value))
				{
					this.OnPaymentPurposeChanging(value);
					this.SendPropertyChanging();
					this._PaymentPurpose = value;
					this.SendPropertyChanged("PaymentPurpose");
					this.OnPaymentPurposeChanged();
				}
			}
		}

		[Column(Storage = "_Amount", DbType = "Decimal(15,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}

		[Column(Storage = "_DocumentFileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> DocumentFileID
		{
			get
			{
				return this._DocumentFileID;
			}
			set
			{
				if ((this._DocumentFileID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentFileIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentFileID = value;
					this.SendPropertyChanged("DocumentFileID");
					this.OnDocumentFileIDChanged();
				}
			}
		}

		[Column(Storage = "_IsConfirm", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsConfirm
		{
			get
			{
				return this._IsConfirm;
			}
			set
			{
				if ((this._IsConfirm != value))
				{
					this.OnIsConfirmChanging(value);
					this.SendPropertyChanging();
					this._IsConfirm = value;
					this.SendPropertyChanged("IsConfirm");
					this.OnIsConfirmChanged();
				}
			}
		}

		[Column(Storage = "_RepresentationID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					if (this._Representation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentationID = value;
					this.SendPropertyChanged("RepresentationID");
					this.OnRepresentationIDChanged();
				}
			}
		}

		[Column(Storage = "_IsSent", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsSent
		{
			get
			{
				return this._IsSent;
			}
			set
			{
				if ((this._IsSent != value))
				{
					this.OnIsSentChanging(value);
					this.SendPropertyChanging();
					this._IsSent = value;
					this.SendPropertyChanged("IsSent");
					this.OnIsSentChanged();
				}
			}
		}

		[Association(Name = "FK_PaymentOrder_Contractor", Storage = "_Contractor", ThisKey = "ContractorGUID", OtherKey = "ContractorGUID", IsForeignKey = true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value)
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.PaymentOrder.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.PaymentOrder.Add(this);
						this._ContractorGUID = value.ContractorGUID;
					}
					else
					{
						this._ContractorGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}

		[Association(Name = "FK_PaymentOrder_Document", Storage = "_Document", ThisKey = "DocumentFileID", OtherKey = "FileID", IsForeignKey = true)]
		public N_File Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				N_File previousValue = this._Document.Entity;
				if (((previousValue != value)
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.PaymentOrder.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.PaymentOrder.Add(this);
						this._DocumentFileID = value.FileID;
					}
					else
					{
						this._DocumentFileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}

		[Association(Name = "FK_PaymentOrder_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.PaymentOrder.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.PaymentOrder.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_PaymentOrder_License", Storage = "_License", ThisKey = "LicenseGUID", OtherKey = "OrderGUID", IsForeignKey = true)]
		public OrderDoc License
		{
			get
			{
				return this._License.Entity;
			}
			set
			{
				OrderDoc previousValue = this._License.Entity;
				if (((previousValue != value)
							|| (this._License.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._License.Entity = null;
						previousValue.LicensePaymentOrders.Remove(this);
					}
					this._License.Entity = value;
					if ((value != null))
					{
						value.LicensePaymentOrders.Add(this);
						this._LicenseGUID = value.OrderGUID;
					}
					else
					{
						this._LicenseGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("License");
				}
			}
		}

		[Association(Name = "FK_PaymentOrder_Representation", Storage = "_Representation", ThisKey = "RepresentationID", OtherKey = "RepresentationID", IsForeignKey = true)]
		public Representation Representation
		{
			get
			{
				return this._Representation.Entity;
			}
			set
			{
				Representation previousValue = this._Representation.Entity;
				if (((previousValue != value)
							|| (this._Representation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representation.Entity = null;
						previousValue.PaymentOrder.Remove(this);
					}
					this._Representation.Entity = value;
					if ((value != null))
					{
						value.PaymentOrder.Add(this);
						this._RepresentationID = value.RepresentationID;
					}
					else
					{
						this._RepresentationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Representation");
				}
			}
		}

		[Association(Name = "FK_PaymentOrder_Request", Storage = "_Request", ThisKey = "RequestGUID", OtherKey = "OrderGUID", IsForeignKey = true)]
		public OrderDoc Request
		{
			get
			{
				return this._Request.Entity;
			}
			set
			{
				OrderDoc previousValue = this._Request.Entity;
				if (((previousValue != value)
							|| (this._Request.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Request.Entity = null;
						previousValue.RequestPaymentOrders.Remove(this);
					}
					this._Request.Entity = value;
					if ((value != null))
					{
						value.RequestPaymentOrders.Add(this);
						this._RequestGUID = value.OrderGUID;
					}
					else
					{
						this._RequestGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Request");
				}
			}
		}

		[Association(Name = "FK_PaymentOrderLicenses_PaymentOrder", Storage = "_PaymentOrderLicenses", ThisKey = "PaymentOrderGUID", OtherKey = "PaymentOrderGUID", DeleteRule = "CASCADE")]
		public EntitySet<PaymentOrderLicenses> PaymentOrderLicenses
		{
			get
			{
				return this._PaymentOrderLicenses;
			}
			set
			{
				this._PaymentOrderLicenses.Assign(value);
			}
		}

		[Association(Name = "FK_PaymentOrderRequests_PaymentOrder", Storage = "_PaymentOrderRequests", ThisKey = "PaymentOrderGUID", OtherKey = "PaymentOrderGUID", DeleteRule = "CASCADE")]
		public EntitySet<PaymentOrderRequests> PaymentOrderRequests
		{
			get
			{
				return this._PaymentOrderRequests;
			}
			set
			{
				this._PaymentOrderRequests.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_PaymentOrderLicenses(PaymentOrderLicenses entity)
		{
			this.SendPropertyChanging();
			entity.PaymentOrder = this;
		}

		private void detach_PaymentOrderLicenses(PaymentOrderLicenses entity)
		{
			this.SendPropertyChanging();
			entity.PaymentOrder = null;
		}

		private void attach_PaymentOrderRequests(PaymentOrderRequests entity)
		{
			this.SendPropertyChanging();
			entity.PaymentOrder = this;
		}

		private void detach_PaymentOrderRequests(PaymentOrderRequests entity)
		{
			this.SendPropertyChanging();
			entity.PaymentOrder = null;
		}
	}

	[Table(Name = "dbo.PaymentOrderLicenses")]
	public partial class PaymentOrderLicenses : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _PaymentOrderGUID;

		private System.Guid _LicensesGUID;

		private EntityRef<OrderDoc> _Licenses;

		private EntityRef<PaymentOrder> _PaymentOrder;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnPaymentOrderGUIDChanging(System.Guid value);
		partial void OnPaymentOrderGUIDChanged();
		partial void OnLicensesGUIDChanging(System.Guid value);
		partial void OnLicensesGUIDChanged();
		#endregion

		public PaymentOrderLicenses()
		{
			this._Licenses = default(EntityRef<OrderDoc>);
			this._PaymentOrder = default(EntityRef<PaymentOrder>);
			OnCreated();
		}

		[Column(Storage = "_PaymentOrderGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid PaymentOrderGUID
		{
			get
			{
				return this._PaymentOrderGUID;
			}
			set
			{
				if ((this._PaymentOrderGUID != value))
				{
					if (this._PaymentOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentOrderGUIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentOrderGUID = value;
					this.SendPropertyChanged("PaymentOrderGUID");
					this.OnPaymentOrderGUIDChanged();
				}
			}
		}

		[Column(Storage = "_LicensesGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid LicensesGUID
		{
			get
			{
				return this._LicensesGUID;
			}
			set
			{
				if ((this._LicensesGUID != value))
				{
					if (this._Licenses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLicensesGUIDChanging(value);
					this.SendPropertyChanging();
					this._LicensesGUID = value;
					this.SendPropertyChanged("LicensesGUID");
					this.OnLicensesGUIDChanged();
				}
			}
		}

		[Association(Name = "FK_PaymentOrderLicenses_Licenses", Storage = "_Licenses", ThisKey = "LicensesGUID", OtherKey = "OrderGUID", IsForeignKey = true, DeleteOnNull = true)]
		public OrderDoc Licenses
		{
			get
			{
				return this._Licenses.Entity;
			}
			set
			{
				OrderDoc previousValue = this._Licenses.Entity;
				if (((previousValue != value)
							|| (this._Licenses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Licenses.Entity = null;
						previousValue.PaymentOrderLicenses.Remove(this);
					}
					this._Licenses.Entity = value;
					if ((value != null))
					{
						value.PaymentOrderLicenses.Add(this);
						this._LicensesGUID = value.OrderGUID;
					}
					else
					{
						this._LicensesGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Licenses");
				}
			}
		}

		[Association(Name = "FK_PaymentOrderLicenses_PaymentOrder", Storage = "_PaymentOrder", ThisKey = "PaymentOrderGUID", OtherKey = "PaymentOrderGUID", IsForeignKey = true, DeleteOnNull = true)]
		public PaymentOrder PaymentOrder
		{
			get
			{
				return this._PaymentOrder.Entity;
			}
			set
			{
				PaymentOrder previousValue = this._PaymentOrder.Entity;
				if (((previousValue != value)
							|| (this._PaymentOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentOrder.Entity = null;
						previousValue.PaymentOrderLicenses.Remove(this);
					}
					this._PaymentOrder.Entity = value;
					if ((value != null))
					{
						value.PaymentOrderLicenses.Add(this);
						this._PaymentOrderGUID = value.PaymentOrderGUID;
					}
					else
					{
						this._PaymentOrderGUID = default(System.Guid);
					}
					this.SendPropertyChanged("PaymentOrder");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.PaymentOrderRequests")]
	public partial class PaymentOrderRequests : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _PaymentOrderGUID;

		private System.Guid _RequestsGUID;

		private EntityRef<PaymentOrder> _PaymentOrder;

		private EntityRef<OrderDoc> _Requests;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnPaymentOrderGUIDChanging(System.Guid value);
		partial void OnPaymentOrderGUIDChanged();
		partial void OnRequestsGUIDChanging(System.Guid value);
		partial void OnRequestsGUIDChanged();
		#endregion

		public PaymentOrderRequests()
		{
			this._PaymentOrder = default(EntityRef<PaymentOrder>);
			this._Requests = default(EntityRef<OrderDoc>);
			OnCreated();
		}

		[Column(Storage = "_PaymentOrderGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid PaymentOrderGUID
		{
			get
			{
				return this._PaymentOrderGUID;
			}
			set
			{
				if ((this._PaymentOrderGUID != value))
				{
					if (this._PaymentOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentOrderGUIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentOrderGUID = value;
					this.SendPropertyChanged("PaymentOrderGUID");
					this.OnPaymentOrderGUIDChanged();
				}
			}
		}

		[Column(Storage = "_RequestsGUID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
		public System.Guid RequestsGUID
		{
			get
			{
				return this._RequestsGUID;
			}
			set
			{
				if ((this._RequestsGUID != value))
				{
					if (this._Requests.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestsGUIDChanging(value);
					this.SendPropertyChanging();
					this._RequestsGUID = value;
					this.SendPropertyChanged("RequestsGUID");
					this.OnRequestsGUIDChanged();
				}
			}
		}

		[Association(Name = "FK_PaymentOrderRequests_PaymentOrder", Storage = "_PaymentOrder", ThisKey = "PaymentOrderGUID", OtherKey = "PaymentOrderGUID", IsForeignKey = true, DeleteOnNull = true)]
		public PaymentOrder PaymentOrder
		{
			get
			{
				return this._PaymentOrder.Entity;
			}
			set
			{
				PaymentOrder previousValue = this._PaymentOrder.Entity;
				if (((previousValue != value)
							|| (this._PaymentOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentOrder.Entity = null;
						previousValue.PaymentOrderRequests.Remove(this);
					}
					this._PaymentOrder.Entity = value;
					if ((value != null))
					{
						value.PaymentOrderRequests.Add(this);
						this._PaymentOrderGUID = value.PaymentOrderGUID;
					}
					else
					{
						this._PaymentOrderGUID = default(System.Guid);
					}
					this.SendPropertyChanged("PaymentOrder");
				}
			}
		}

		[Association(Name = "FK_PaymentOrderRequests_Requests", Storage = "_Requests", ThisKey = "RequestsGUID", OtherKey = "OrderGUID", IsForeignKey = true, DeleteOnNull = true)]
		public OrderDoc Requests
		{
			get
			{
				return this._Requests.Entity;
			}
			set
			{
				OrderDoc previousValue = this._Requests.Entity;
				if (((previousValue != value)
							|| (this._Requests.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Requests.Entity = null;
						previousValue.PaymentOrderRequests.Remove(this);
					}
					this._Requests.Entity = value;
					if ((value != null))
					{
						value.PaymentOrderRequests.Add(this);
						this._RequestsGUID = value.OrderGUID;
					}
					else
					{
						this._RequestsGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Requests");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.PerfomanceStat")]
	public partial class PerfomanceStat : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _PerfomanceStatID;

		private string _Mode;

		private string _Action;

		private string _MachineName;

		private string _RequestType;

		private int _TotalCount;

		private int _TotalSqlRequestCount;

		private int _TotalExecutionTime;

		private System.DateTime _LastAccessDateTime;

		private long _TotalRequestContentLength;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnPerfomanceStatIDChanging(int value);
		partial void OnPerfomanceStatIDChanged();
		partial void OnModeChanging(string value);
		partial void OnModeChanged();
		partial void OnActionChanging(string value);
		partial void OnActionChanged();
		partial void OnMachineNameChanging(string value);
		partial void OnMachineNameChanged();
		partial void OnRequestTypeChanging(string value);
		partial void OnRequestTypeChanged();
		partial void OnTotalCountChanging(int value);
		partial void OnTotalCountChanged();
		partial void OnTotalSqlRequestCountChanging(int value);
		partial void OnTotalSqlRequestCountChanged();
		partial void OnTotalExecutionTimeChanging(int value);
		partial void OnTotalExecutionTimeChanged();
		partial void OnLastAccessDateTimeChanging(System.DateTime value);
		partial void OnLastAccessDateTimeChanged();
		partial void OnTotalRequestContentLengthChanging(long value);
		partial void OnTotalRequestContentLengthChanged();
		#endregion

		public PerfomanceStat()
		{
			OnCreated();
		}

		[Column(Storage = "_PerfomanceStatID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int PerfomanceStatID
		{
			get
			{
				return this._PerfomanceStatID;
			}
			set
			{
				if ((this._PerfomanceStatID != value))
				{
					this.OnPerfomanceStatIDChanging(value);
					this.SendPropertyChanging();
					this._PerfomanceStatID = value;
					this.SendPropertyChanged("PerfomanceStatID");
					this.OnPerfomanceStatIDChanged();
				}
			}
		}

		[Column(Storage = "_Mode", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Mode
		{
			get
			{
				return this._Mode;
			}
			set
			{
				if ((this._Mode != value))
				{
					this.OnModeChanging(value);
					this.SendPropertyChanging();
					this._Mode = value;
					this.SendPropertyChanged("Mode");
					this.OnModeChanged();
				}
			}
		}

		[Column(Storage = "_Action", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}

		[Column(Storage = "_MachineName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}

		[Column(Storage = "_RequestType", DbType = "NVarChar(10) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string RequestType
		{
			get
			{
				return this._RequestType;
			}
			set
			{
				if ((this._RequestType != value))
				{
					this.OnRequestTypeChanging(value);
					this.SendPropertyChanging();
					this._RequestType = value;
					this.SendPropertyChanged("RequestType");
					this.OnRequestTypeChanged();
				}
			}
		}

		[Column(Storage = "_TotalCount", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int TotalCount
		{
			get
			{
				return this._TotalCount;
			}
			set
			{
				if ((this._TotalCount != value))
				{
					this.OnTotalCountChanging(value);
					this.SendPropertyChanging();
					this._TotalCount = value;
					this.SendPropertyChanged("TotalCount");
					this.OnTotalCountChanged();
				}
			}
		}

		[Column(Storage = "_TotalSqlRequestCount", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int TotalSqlRequestCount
		{
			get
			{
				return this._TotalSqlRequestCount;
			}
			set
			{
				if ((this._TotalSqlRequestCount != value))
				{
					this.OnTotalSqlRequestCountChanging(value);
					this.SendPropertyChanging();
					this._TotalSqlRequestCount = value;
					this.SendPropertyChanged("TotalSqlRequestCount");
					this.OnTotalSqlRequestCountChanged();
				}
			}
		}

		[Column(Storage = "_TotalExecutionTime", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int TotalExecutionTime
		{
			get
			{
				return this._TotalExecutionTime;
			}
			set
			{
				if ((this._TotalExecutionTime != value))
				{
					this.OnTotalExecutionTimeChanging(value);
					this.SendPropertyChanging();
					this._TotalExecutionTime = value;
					this.SendPropertyChanged("TotalExecutionTime");
					this.OnTotalExecutionTimeChanged();
				}
			}
		}

		[Column(Storage = "_LastAccessDateTime", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime LastAccessDateTime
		{
			get
			{
				return this._LastAccessDateTime;
			}
			set
			{
				if ((this._LastAccessDateTime != value))
				{
					this.OnLastAccessDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LastAccessDateTime = value;
					this.SendPropertyChanged("LastAccessDateTime");
					this.OnLastAccessDateTimeChanged();
				}
			}
		}

		[Column(Storage = "_TotalRequestContentLength", DbType = "BigInt NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public long TotalRequestContentLength
		{
			get
			{
				return this._TotalRequestContentLength;
			}
			set
			{
				if ((this._TotalRequestContentLength != value))
				{
					this.OnTotalRequestContentLengthChanging(value);
					this.SendPropertyChanging();
					this._TotalRequestContentLength = value;
					this.SendPropertyChanged("TotalRequestContentLength");
					this.OnTotalRequestContentLengthChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.Quota")]
	public partial class Quota : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _QuotaID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private int _QuoteCategoryID;

		private int _CNCategoryID;

		private int _OperationTypeID;

		private decimal _AllocatedVolume;

		private int _MeasureID;

		private System.DateTime _StartDate;

		private System.DateTime _EndDate;

		private System.DateTime _LicenseRegStart;

		private System.DateTime _LicenseRegEnd;

		private System.DateTime _CreateDate;

		private int _QuotaYear;

		private EntityRef<C_CNCategory> _CNCategory;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<C_Measure> _Measure;

		private EntityRef<C_OperationType> _OperationType;

		private EntityRef<C_QuoteCategory> _QuoteCategory;

		private EntitySet<QuotaDistribution> _Distribution;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnQuotaIDChanging(int value);
		partial void OnQuotaIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnQuoteCategoryIDChanging(int value);
		partial void OnQuoteCategoryIDChanged();
		partial void OnCNCategoryIDChanging(int value);
		partial void OnCNCategoryIDChanged();
		partial void OnOperationTypeIDChanging(int value);
		partial void OnOperationTypeIDChanged();
		partial void OnAllocatedVolumeChanging(decimal value);
		partial void OnAllocatedVolumeChanged();
		partial void OnMeasureIDChanging(int value);
		partial void OnMeasureIDChanged();
		partial void OnStartDateChanging(System.DateTime value);
		partial void OnStartDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnLicenseRegStartChanging(System.DateTime value);
		partial void OnLicenseRegStartChanged();
		partial void OnLicenseRegEndChanging(System.DateTime value);
		partial void OnLicenseRegEndChanged();
		partial void OnCreateDateChanging(System.DateTime value);
		partial void OnCreateDateChanged();
		partial void OnQuotaYearChanging(int value);
		partial void OnQuotaYearChanged();
		#endregion

		public Quota()
		{
			this._CNCategory = default(EntityRef<C_CNCategory>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Measure = default(EntityRef<C_Measure>);
			this._OperationType = default(EntityRef<C_OperationType>);
			this._QuoteCategory = default(EntityRef<C_QuoteCategory>);
			this._Distribution = new EntitySet<QuotaDistribution>(new Action<QuotaDistribution>(this.attach_Distribution), new Action<QuotaDistribution>(this.detach_Distribution));
			OnCreated();
		}

		[Column(Storage = "_QuotaID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int QuotaID
		{
			get
			{
				return this._QuotaID;
			}
			set
			{
				if ((this._QuotaID != value))
				{
					this.OnQuotaIDChanging(value);
					this.SendPropertyChanging();
					this._QuotaID = value;
					this.SendPropertyChanged("QuotaID");
					this.OnQuotaIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_QuoteCategoryID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int QuoteCategoryID
		{
			get
			{
				return this._QuoteCategoryID;
			}
			set
			{
				if ((this._QuoteCategoryID != value))
				{
					if (this._QuoteCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuoteCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._QuoteCategoryID = value;
					this.SendPropertyChanged("QuoteCategoryID");
					this.OnQuoteCategoryIDChanged();
				}
			}
		}

		[Column(Storage = "_CNCategoryID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					if (this._CNCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}

		[Column(Storage = "_OperationTypeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					if (this._OperationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._OperationTypeID = value;
					this.SendPropertyChanged("OperationTypeID");
					this.OnOperationTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_AllocatedVolume", DbType = "Decimal(18,5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public decimal AllocatedVolume
		{
			get
			{
				return this._AllocatedVolume;
			}
			set
			{
				if ((this._AllocatedVolume != value))
				{
					this.OnAllocatedVolumeChanging(value);
					this.SendPropertyChanging();
					this._AllocatedVolume = value;
					this.SendPropertyChanged("AllocatedVolume");
					this.OnAllocatedVolumeChanged();
				}
			}
		}

		[Column(Storage = "_MeasureID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					if (this._Measure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}

		[Column(Storage = "_StartDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_LicenseRegStart", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime LicenseRegStart
		{
			get
			{
				return this._LicenseRegStart;
			}
			set
			{
				if ((this._LicenseRegStart != value))
				{
					this.OnLicenseRegStartChanging(value);
					this.SendPropertyChanging();
					this._LicenseRegStart = value;
					this.SendPropertyChanged("LicenseRegStart");
					this.OnLicenseRegStartChanged();
				}
			}
		}

		[Column(Storage = "_LicenseRegEnd", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime LicenseRegEnd
		{
			get
			{
				return this._LicenseRegEnd;
			}
			set
			{
				if ((this._LicenseRegEnd != value))
				{
					this.OnLicenseRegEndChanging(value);
					this.SendPropertyChanging();
					this._LicenseRegEnd = value;
					this.SendPropertyChanged("LicenseRegEnd");
					this.OnLicenseRegEndChanged();
				}
			}
		}

		[Column(Storage = "_CreateDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}

		[Column(Storage = "_QuotaYear", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int QuotaYear
		{
			get
			{
				return this._QuotaYear;
			}
			set
			{
				if ((this._QuotaYear != value))
				{
					this.OnQuotaYearChanging(value);
					this.SendPropertyChanging();
					this._QuotaYear = value;
					this.SendPropertyChanged("QuotaYear");
					this.OnQuotaYearChanged();
				}
			}
		}

		[Association(Name = "FK_Quota_CNCategory", Storage = "_CNCategory", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", IsForeignKey = true)]
		public C_CNCategory CNCategory
		{
			get
			{
				return this._CNCategory.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._CNCategory.Entity;
				if (((previousValue != value)
							|| (this._CNCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategory.Entity = null;
						previousValue.Quota.Remove(this);
					}
					this._CNCategory.Entity = value;
					if ((value != null))
					{
						value.Quota.Add(this);
						this._CNCategoryID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoryID = default(int);
					}
					this.SendPropertyChanged("CNCategory");
				}
			}
		}

		[Association(Name = "FK_Quota_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.Quota.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.Quota.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_Quota_Measure", Storage = "_Measure", ThisKey = "MeasureID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure Measure
		{
			get
			{
				return this._Measure.Entity;
			}
			set
			{
				C_Measure previousValue = this._Measure.Entity;
				if (((previousValue != value)
							|| (this._Measure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure.Entity = null;
						previousValue.Quota.Remove(this);
					}
					this._Measure.Entity = value;
					if ((value != null))
					{
						value.Quota.Add(this);
						this._MeasureID = value.MeasureID;
					}
					else
					{
						this._MeasureID = default(int);
					}
					this.SendPropertyChanged("Measure");
				}
			}
		}

		[Association(Name = "FK_Quota_OperationType", Storage = "_OperationType", ThisKey = "OperationTypeID", OtherKey = "OperationTypeID", IsForeignKey = true)]
		public C_OperationType OperationType
		{
			get
			{
				return this._OperationType.Entity;
			}
			set
			{
				C_OperationType previousValue = this._OperationType.Entity;
				if (((previousValue != value)
							|| (this._OperationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperationType.Entity = null;
						previousValue.Quota.Remove(this);
					}
					this._OperationType.Entity = value;
					if ((value != null))
					{
						value.Quota.Add(this);
						this._OperationTypeID = value.OperationTypeID;
					}
					else
					{
						this._OperationTypeID = default(int);
					}
					this.SendPropertyChanged("OperationType");
				}
			}
		}

		[Association(Name = "FK_Quota_QuoteCategory", Storage = "_QuoteCategory", ThisKey = "QuoteCategoryID", OtherKey = "QuoteCategoryID", IsForeignKey = true)]
		public C_QuoteCategory QuoteCategory
		{
			get
			{
				return this._QuoteCategory.Entity;
			}
			set
			{
				C_QuoteCategory previousValue = this._QuoteCategory.Entity;
				if (((previousValue != value)
							|| (this._QuoteCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuoteCategory.Entity = null;
						previousValue.Quota.Remove(this);
					}
					this._QuoteCategory.Entity = value;
					if ((value != null))
					{
						value.Quota.Add(this);
						this._QuoteCategoryID = value.QuoteCategoryID;
					}
					else
					{
						this._QuoteCategoryID = default(int);
					}
					this.SendPropertyChanged("QuoteCategory");
				}
			}
		}

		[Association(Name = "FK_QuotaDistribution_Quota", Storage = "_Distribution", ThisKey = "QuotaID", OtherKey = "QuotaID", DeleteRule = "CASCADE")]
		public EntitySet<QuotaDistribution> Distribution
		{
			get
			{
				return this._Distribution;
			}
			set
			{
				this._Distribution.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_Distribution(QuotaDistribution entity)
		{
			this.SendPropertyChanging();
			entity.Quota = this;
		}

		private void detach_Distribution(QuotaDistribution entity)
		{
			this.SendPropertyChanging();
			entity.Quota = null;
		}
	}

	[Table(Name = "dbo.QuotaDistribution")]
	public partial class QuotaDistribution : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _QuotaDistributionID;

		private int _QuotaID;

		private int _CountryGroupID;

		private System.Nullable<System.Guid> _ContractorGUID;

		private decimal _Volume;

		private int _SeqNo;

		private EntityRef<Contractor> _Contractor;

		private EntityRef<C_CountryGroup> _CountryGroup;

		private EntityRef<Quota> _Quota;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnQuotaDistributionIDChanging(int value);
		partial void OnQuotaDistributionIDChanged();
		partial void OnQuotaIDChanging(int value);
		partial void OnQuotaIDChanged();
		partial void OnCountryGroupIDChanging(int value);
		partial void OnCountryGroupIDChanged();
		partial void OnContractorGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnContractorGUIDChanged();
		partial void OnVolumeChanging(decimal value);
		partial void OnVolumeChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		#endregion

		public QuotaDistribution()
		{
			this._Contractor = default(EntityRef<Contractor>);
			this._CountryGroup = default(EntityRef<C_CountryGroup>);
			this._Quota = default(EntityRef<Quota>);
			OnCreated();
		}

		[Column(Storage = "_QuotaDistributionID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int QuotaDistributionID
		{
			get
			{
				return this._QuotaDistributionID;
			}
			set
			{
				if ((this._QuotaDistributionID != value))
				{
					this.OnQuotaDistributionIDChanging(value);
					this.SendPropertyChanging();
					this._QuotaDistributionID = value;
					this.SendPropertyChanged("QuotaDistributionID");
					this.OnQuotaDistributionIDChanged();
				}
			}
		}

		[Column(Storage = "_QuotaID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int QuotaID
		{
			get
			{
				return this._QuotaID;
			}
			set
			{
				if ((this._QuotaID != value))
				{
					if (this._Quota.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuotaIDChanging(value);
					this.SendPropertyChanging();
					this._QuotaID = value;
					this.SendPropertyChanged("QuotaID");
					this.OnQuotaIDChanged();
				}
			}
		}

		[Column(Storage = "_CountryGroupID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CountryGroupID
		{
			get
			{
				return this._CountryGroupID;
			}
			set
			{
				if ((this._CountryGroupID != value))
				{
					if (this._CountryGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryGroupIDChanging(value);
					this.SendPropertyChanging();
					this._CountryGroupID = value;
					this.SendPropertyChanged("CountryGroupID");
					this.OnCountryGroupIDChanged();
				}
			}
		}

		[Column(Storage = "_ContractorGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorGUID = value;
					this.SendPropertyChanged("ContractorGUID");
					this.OnContractorGUIDChanged();
				}
			}
		}

		[Column(Storage = "_Volume", DbType = "Decimal(18,5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public decimal Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Association(Name = "FK_QuotaDistribution_Contractor", Storage = "_Contractor", ThisKey = "ContractorGUID", OtherKey = "ContractorGUID", IsForeignKey = true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value)
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.QuotaDistribution.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.QuotaDistribution.Add(this);
						this._ContractorGUID = value.ContractorGUID;
					}
					else
					{
						this._ContractorGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}

		[Association(Name = "FK_QuotaDistribution_CountryGroup", Storage = "_CountryGroup", ThisKey = "CountryGroupID", OtherKey = "CountryGroupID", IsForeignKey = true)]
		public C_CountryGroup CountryGroup
		{
			get
			{
				return this._CountryGroup.Entity;
			}
			set
			{
				C_CountryGroup previousValue = this._CountryGroup.Entity;
				if (((previousValue != value)
							|| (this._CountryGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryGroup.Entity = null;
						previousValue.QuotaDistribution.Remove(this);
					}
					this._CountryGroup.Entity = value;
					if ((value != null))
					{
						value.QuotaDistribution.Add(this);
						this._CountryGroupID = value.CountryGroupID;
					}
					else
					{
						this._CountryGroupID = default(int);
					}
					this.SendPropertyChanged("CountryGroup");
				}
			}
		}

		[Association(Name = "FK_QuotaDistribution_Quota", Storage = "_Quota", ThisKey = "QuotaID", OtherKey = "QuotaID", IsForeignKey = true, DeleteOnNull = true)]
		public Quota Quota
		{
			get
			{
				return this._Quota.Entity;
			}
			set
			{
				Quota previousValue = this._Quota.Entity;
				if (((previousValue != value)
							|| (this._Quota.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quota.Entity = null;
						previousValue.Distribution.Remove(this);
					}
					this._Quota.Entity = value;
					if ((value != null))
					{
						value.Distribution.Add(this);
						this._QuotaID = value.QuotaID;
					}
					else
					{
						this._QuotaID = default(int);
					}
					this.SendPropertyChanged("Quota");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.QuotaRedistribution")]
	public partial class QuotaRedistribution : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _QuotaRedistributionID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.DateTime _CreateDate;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private int _CNCategoryID;

		private int _CountryGroupID;

		private int _OperationTypeID;

		private decimal _RedistributionPercent;

		private string _Comment;

		private int _QuotaYear;

		private EntityRef<C_CNCategory> _CNCategory;

		private EntityRef<C_CountryGroup> _CountryGroup;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<C_OperationType> _OperationType;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnQuotaRedistributionIDChanging(int value);
		partial void OnQuotaRedistributionIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnCreateDateChanging(System.DateTime value);
		partial void OnCreateDateChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnCNCategoryIDChanging(int value);
		partial void OnCNCategoryIDChanged();
		partial void OnCountryGroupIDChanging(int value);
		partial void OnCountryGroupIDChanged();
		partial void OnOperationTypeIDChanging(int value);
		partial void OnOperationTypeIDChanged();
		partial void OnRedistributionPercentChanging(decimal value);
		partial void OnRedistributionPercentChanged();
		partial void OnCommentChanging(string value);
		partial void OnCommentChanged();
		partial void OnQuotaYearChanging(int value);
		partial void OnQuotaYearChanged();
		#endregion

		public QuotaRedistribution()
		{
			this._CNCategory = default(EntityRef<C_CNCategory>);
			this._CountryGroup = default(EntityRef<C_CountryGroup>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OperationType = default(EntityRef<C_OperationType>);
			OnCreated();
		}

		[Column(Storage = "_QuotaRedistributionID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int QuotaRedistributionID
		{
			get
			{
				return this._QuotaRedistributionID;
			}
			set
			{
				if ((this._QuotaRedistributionID != value))
				{
					this.OnQuotaRedistributionIDChanging(value);
					this.SendPropertyChanging();
					this._QuotaRedistributionID = value;
					this.SendPropertyChanged("QuotaRedistributionID");
					this.OnQuotaRedistributionIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_CreateDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_CNCategoryID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					if (this._CNCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}

		[Column(Storage = "_CountryGroupID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CountryGroupID
		{
			get
			{
				return this._CountryGroupID;
			}
			set
			{
				if ((this._CountryGroupID != value))
				{
					if (this._CountryGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryGroupIDChanging(value);
					this.SendPropertyChanging();
					this._CountryGroupID = value;
					this.SendPropertyChanged("CountryGroupID");
					this.OnCountryGroupIDChanged();
				}
			}
		}

		[Column(Storage = "_OperationTypeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					if (this._OperationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._OperationTypeID = value;
					this.SendPropertyChanged("OperationTypeID");
					this.OnOperationTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_RedistributionPercent", DbType = "Decimal(7,4) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public decimal RedistributionPercent
		{
			get
			{
				return this._RedistributionPercent;
			}
			set
			{
				if ((this._RedistributionPercent != value))
				{
					this.OnRedistributionPercentChanging(value);
					this.SendPropertyChanging();
					this._RedistributionPercent = value;
					this.SendPropertyChanged("RedistributionPercent");
					this.OnRedistributionPercentChanged();
				}
			}
		}

		[Column(Storage = "_Comment", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}

		[Column(Storage = "_QuotaYear", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int QuotaYear
		{
			get
			{
				return this._QuotaYear;
			}
			set
			{
				if ((this._QuotaYear != value))
				{
					this.OnQuotaYearChanging(value);
					this.SendPropertyChanging();
					this._QuotaYear = value;
					this.SendPropertyChanged("QuotaYear");
					this.OnQuotaYearChanged();
				}
			}
		}

		[Association(Name = "FK_QuotaRedistribution_CNCategory", Storage = "_CNCategory", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", IsForeignKey = true)]
		public C_CNCategory CNCategory
		{
			get
			{
				return this._CNCategory.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._CNCategory.Entity;
				if (((previousValue != value)
							|| (this._CNCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategory.Entity = null;
						previousValue.QuotaRedistribution.Remove(this);
					}
					this._CNCategory.Entity = value;
					if ((value != null))
					{
						value.QuotaRedistribution.Add(this);
						this._CNCategoryID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoryID = default(int);
					}
					this.SendPropertyChanged("CNCategory");
				}
			}
		}

		[Association(Name = "FK_QuotaRedistribution_CountryGroup", Storage = "_CountryGroup", ThisKey = "CountryGroupID", OtherKey = "CountryGroupID", IsForeignKey = true)]
		public C_CountryGroup CountryGroup
		{
			get
			{
				return this._CountryGroup.Entity;
			}
			set
			{
				C_CountryGroup previousValue = this._CountryGroup.Entity;
				if (((previousValue != value)
							|| (this._CountryGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryGroup.Entity = null;
						previousValue.QuotaRedistribution.Remove(this);
					}
					this._CountryGroup.Entity = value;
					if ((value != null))
					{
						value.QuotaRedistribution.Add(this);
						this._CountryGroupID = value.CountryGroupID;
					}
					else
					{
						this._CountryGroupID = default(int);
					}
					this.SendPropertyChanged("CountryGroup");
				}
			}
		}

		[Association(Name = "FK_QuotaRedistribution_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.QuotaRedistribution.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.QuotaRedistribution.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_QuotaRedistribution_OperationType", Storage = "_OperationType", ThisKey = "OperationTypeID", OtherKey = "OperationTypeID", IsForeignKey = true)]
		public C_OperationType OperationType
		{
			get
			{
				return this._OperationType.Entity;
			}
			set
			{
				C_OperationType previousValue = this._OperationType.Entity;
				if (((previousValue != value)
							|| (this._OperationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperationType.Entity = null;
						previousValue.QuotaRedistribution.Remove(this);
					}
					this._OperationType.Entity = value;
					if ((value != null))
					{
						value.QuotaRedistribution.Add(this);
						this._OperationTypeID = value.OperationTypeID;
					}
					else
					{
						this._OperationTypeID = default(int);
					}
					this.SendPropertyChanged("OperationType");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.QuotaRequest")]
	public partial class QuotaRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _QuotaRequestID;

		private System.Nullable<int> _QuotaYear;

		private System.Nullable<int> _SubjectID;

		private System.Nullable<int> _OperationTypeID;

		private System.Nullable<int> _CNCategoryID;

		private System.Nullable<int> _CountryGroupID;

		private System.DateTime _LastModifiedDate;

		private bool _IsDeleted;

		private string _Response;

		private System.Nullable<System.Guid> _OrderDocGUID;

		private System.Nullable<System.DateTime> _CreateDate;

		private System.Nullable<System.DateTime> _ResponseDate;

		private int _LastModifiedUserID;

		private System.Nullable<System.Guid> _ContractorGUID;

		private System.Nullable<decimal> _Quantity;

		private int _RequestType;

		private EntityRef<C_CNCategory> _CNCategory;

		private EntityRef<Contractor> _Contractor;

		private EntityRef<C_CountryGroup> _CountryGroup;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<C_OperationType> _OperationType;

		private EntityRef<OrderDoc> _OrderDoc;

		private EntityRef<SPM_Subject> _Subject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnQuotaRequestIDChanging(int value);
		partial void OnQuotaRequestIDChanged();
		partial void OnQuotaYearChanging(System.Nullable<int> value);
		partial void OnQuotaYearChanged();
		partial void OnSubjectIDChanging(System.Nullable<int> value);
		partial void OnSubjectIDChanged();
		partial void OnOperationTypeIDChanging(System.Nullable<int> value);
		partial void OnOperationTypeIDChanged();
		partial void OnCNCategoryIDChanging(System.Nullable<int> value);
		partial void OnCNCategoryIDChanged();
		partial void OnCountryGroupIDChanging(System.Nullable<int> value);
		partial void OnCountryGroupIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnResponseChanging(string value);
		partial void OnResponseChanged();
		partial void OnOrderDocGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnOrderDocGUIDChanged();
		partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
		partial void OnCreateDateChanged();
		partial void OnResponseDateChanging(System.Nullable<System.DateTime> value);
		partial void OnResponseDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnContractorGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnContractorGUIDChanged();
		partial void OnQuantityChanging(System.Nullable<decimal> value);
		partial void OnQuantityChanged();
		partial void OnRequestTypeChanging(int value);
		partial void OnRequestTypeChanged();
		#endregion

		public QuotaRequest()
		{
			this._CNCategory = default(EntityRef<C_CNCategory>);
			this._Contractor = default(EntityRef<Contractor>);
			this._CountryGroup = default(EntityRef<C_CountryGroup>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OperationType = default(EntityRef<C_OperationType>);
			this._OrderDoc = default(EntityRef<OrderDoc>);
			this._Subject = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_QuotaRequestID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int QuotaRequestID
		{
			get
			{
				return this._QuotaRequestID;
			}
			set
			{
				if ((this._QuotaRequestID != value))
				{
					this.OnQuotaRequestIDChanging(value);
					this.SendPropertyChanging();
					this._QuotaRequestID = value;
					this.SendPropertyChanged("QuotaRequestID");
					this.OnQuotaRequestIDChanged();
				}
			}
		}

		[Column(Storage = "_QuotaYear", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> QuotaYear
		{
			get
			{
				return this._QuotaYear;
			}
			set
			{
				if ((this._QuotaYear != value))
				{
					this.OnQuotaYearChanging(value);
					this.SendPropertyChanging();
					this._QuotaYear = value;
					this.SendPropertyChanged("QuotaYear");
					this.OnQuotaYearChanged();
				}
			}
		}

		[Column(Storage = "_SubjectID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}

		[Column(Storage = "_OperationTypeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					if (this._OperationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._OperationTypeID = value;
					this.SendPropertyChanged("OperationTypeID");
					this.OnOperationTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_CNCategoryID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					if (this._CNCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}

		[Column(Storage = "_CountryGroupID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CountryGroupID
		{
			get
			{
				return this._CountryGroupID;
			}
			set
			{
				if ((this._CountryGroupID != value))
				{
					if (this._CountryGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryGroupIDChanging(value);
					this.SendPropertyChanging();
					this._CountryGroupID = value;
					this.SendPropertyChanged("CountryGroupID");
					this.OnCountryGroupIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_Response", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Response
		{
			get
			{
				return this._Response;
			}
			set
			{
				if ((this._Response != value))
				{
					this.OnResponseChanging(value);
					this.SendPropertyChanging();
					this._Response = value;
					this.SendPropertyChanged("Response");
					this.OnResponseChanged();
				}
			}
		}

		[Column(Storage = "_OrderDocGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}

		[Column(Storage = "_CreateDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}

		[Column(Storage = "_ResponseDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ResponseDate
		{
			get
			{
				return this._ResponseDate;
			}
			set
			{
				if ((this._ResponseDate != value))
				{
					this.OnResponseDateChanging(value);
					this.SendPropertyChanging();
					this._ResponseDate = value;
					this.SendPropertyChanged("ResponseDate");
					this.OnResponseDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_ContractorGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorGUID = value;
					this.SendPropertyChanged("ContractorGUID");
					this.OnContractorGUIDChanged();
				}
			}
		}

		[Column(Storage = "_Quantity", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}

		[Column(Storage = "_RequestType", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int RequestType
		{
			get
			{
				return this._RequestType;
			}
			set
			{
				if ((this._RequestType != value))
				{
					this.OnRequestTypeChanging(value);
					this.SendPropertyChanging();
					this._RequestType = value;
					this.SendPropertyChanged("RequestType");
					this.OnRequestTypeChanged();
				}
			}
		}

		[Association(Name = "FK_QuotaRequest_CNCategory", Storage = "_CNCategory", ThisKey = "CNCategoryID", OtherKey = "CNCategoryID", IsForeignKey = true)]
		public C_CNCategory CNCategory
		{
			get
			{
				return this._CNCategory.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._CNCategory.Entity;
				if (((previousValue != value)
							|| (this._CNCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategory.Entity = null;
						previousValue.QuotaRequest.Remove(this);
					}
					this._CNCategory.Entity = value;
					if ((value != null))
					{
						value.QuotaRequest.Add(this);
						this._CNCategoryID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CNCategory");
				}
			}
		}

		[Association(Name = "FK_QuotaRequest_Contractor", Storage = "_Contractor", ThisKey = "ContractorGUID", OtherKey = "ContractorGUID", IsForeignKey = true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value)
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.QuotaRequest.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.QuotaRequest.Add(this);
						this._ContractorGUID = value.ContractorGUID;
					}
					else
					{
						this._ContractorGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}

		[Association(Name = "FK_QuotaRequest_CountryGroup", Storage = "_CountryGroup", ThisKey = "CountryGroupID", OtherKey = "CountryGroupID", IsForeignKey = true)]
		public C_CountryGroup CountryGroup
		{
			get
			{
				return this._CountryGroup.Entity;
			}
			set
			{
				C_CountryGroup previousValue = this._CountryGroup.Entity;
				if (((previousValue != value)
							|| (this._CountryGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryGroup.Entity = null;
						previousValue.QuotaRequest.Remove(this);
					}
					this._CountryGroup.Entity = value;
					if ((value != null))
					{
						value.QuotaRequest.Add(this);
						this._CountryGroupID = value.CountryGroupID;
					}
					else
					{
						this._CountryGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CountryGroup");
				}
			}
		}

		[Association(Name = "FK_QuotaRequest_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.QuotaRequest.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.QuotaRequest.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_QuotaRequest_OperationType", Storage = "_OperationType", ThisKey = "OperationTypeID", OtherKey = "OperationTypeID", IsForeignKey = true)]
		public C_OperationType OperationType
		{
			get
			{
				return this._OperationType.Entity;
			}
			set
			{
				C_OperationType previousValue = this._OperationType.Entity;
				if (((previousValue != value)
							|| (this._OperationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperationType.Entity = null;
						previousValue.QuotaRequest.Remove(this);
					}
					this._OperationType.Entity = value;
					if ((value != null))
					{
						value.QuotaRequest.Add(this);
						this._OperationTypeID = value.OperationTypeID;
					}
					else
					{
						this._OperationTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OperationType");
				}
			}
		}

		[Association(Name = "FK_QuotaRequest_OrderDoc", Storage = "_OrderDoc", ThisKey = "OrderDocGUID", OtherKey = "OrderGUID", IsForeignKey = true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value)
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.QuotaRequest.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.QuotaRequest.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}

		[Association(Name = "FK_QuotaRequest_Subject", Storage = "_Subject", ThisKey = "SubjectID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._Subject.Entity;
				if (((previousValue != value)
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.QuotaRequest_Subject.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.QuotaRequest_Subject.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.R_OrderDoc_Execution")]
	public partial class R_OrderDoc_Execution
	{

		private string _Title;

		private System.Nullable<System.Guid> _ApplicantGUID;

		private System.Nullable<int> _LicenseTypeID;

		private System.Nullable<int> _OperationTypeID;

		private System.Nullable<System.DateTime> _TargetValidity;

		private System.Nullable<int> _RepresentationID;

		private System.Guid _OrderGUID;

		public R_OrderDoc_Execution()
		{
		}

		[Column(Storage = "_Title", DbType = "NVarChar(32)", UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}

		[Column(Storage = "_ApplicantGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> ApplicantGUID
		{
			get
			{
				return this._ApplicantGUID;
			}
			set
			{
				if ((this._ApplicantGUID != value))
				{
					this._ApplicantGUID = value;
				}
			}
		}

		[Column(Storage = "_LicenseTypeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> LicenseTypeID
		{
			get
			{
				return this._LicenseTypeID;
			}
			set
			{
				if ((this._LicenseTypeID != value))
				{
					this._LicenseTypeID = value;
				}
			}
		}

		[Column(Storage = "_OperationTypeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					this._OperationTypeID = value;
				}
			}
		}

		[Column(Storage = "_TargetValidity", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> TargetValidity
		{
			get
			{
				return this._TargetValidity;
			}
			set
			{
				if ((this._TargetValidity != value))
				{
					this._TargetValidity = value;
				}
			}
		}

		[Column(Storage = "_RepresentationID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					this._RepresentationID = value;
				}
			}
		}

		[Column(Storage = "_OrderGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid OrderGUID
		{
			get
			{
				return this._OrderGUID;
			}
			set
			{
				if ((this._OrderGUID != value))
				{
					this._OrderGUID = value;
				}
			}
		}
	}

	[Table(Name = "dbo.ReplicatedFile")]
	public partial class ReplicatedFile : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ReplicatedFileID;

		private string _Extension;

		private string _FolderTitle;

		private System.Guid _Guid;

		private int _Length;

		private string _Title;

		private System.Data.Linq.Binary _Data;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnReplicatedFileIDChanging(int value);
		partial void OnReplicatedFileIDChanged();
		partial void OnExtensionChanging(string value);
		partial void OnExtensionChanged();
		partial void OnFolderTitleChanging(string value);
		partial void OnFolderTitleChanged();
		partial void OnGuidChanging(System.Guid value);
		partial void OnGuidChanged();
		partial void OnLengthChanging(int value);
		partial void OnLengthChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnDataChanging(System.Data.Linq.Binary value);
		partial void OnDataChanged();
		#endregion

		public ReplicatedFile()
		{
			OnCreated();
		}

		[Column(Storage = "_ReplicatedFileID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int ReplicatedFileID
		{
			get
			{
				return this._ReplicatedFileID;
			}
			set
			{
				if ((this._ReplicatedFileID != value))
				{
					this.OnReplicatedFileIDChanging(value);
					this.SendPropertyChanging();
					this._ReplicatedFileID = value;
					this.SendPropertyChanged("ReplicatedFileID");
					this.OnReplicatedFileIDChanged();
				}
			}
		}

		[Column(Storage = "_Extension", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this.OnExtensionChanging(value);
					this.SendPropertyChanging();
					this._Extension = value;
					this.SendPropertyChanged("Extension");
					this.OnExtensionChanged();
				}
			}
		}

		[Column(Storage = "_FolderTitle", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string FolderTitle
		{
			get
			{
				return this._FolderTitle;
			}
			set
			{
				if ((this._FolderTitle != value))
				{
					this.OnFolderTitleChanging(value);
					this.SendPropertyChanging();
					this._FolderTitle = value;
					this.SendPropertyChanged("FolderTitle");
					this.OnFolderTitleChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_Length", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Data", DbType = "Image", CanBeNull = true, UpdateCheck = UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.Representation")]
	public partial class Representation : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _RepresentationID;

		private int _RFSubjectID;

		private string _Title;

		private string _Address;

		private string _Phone;

		private string _Fax;

		private string _Email;

		private string _AddInfo;

		private System.Nullable<int> _ParentID;

		private string _ShortName;

		private System.DateTime _LastModifiedDate;

		private System.Nullable<decimal> _OldID;

		private int _LastModifiedUserID;

		private System.Nullable<int> _ChiefPersonID;

		private string _OKPO;

		private string _OGRN;

		private string _INN;

		private string _DepartmentCode;

		private string _DepartmentCodeFull;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private System.Guid _MasterObjectGUID;

		private string _BankTitle;

		private string _BankAddress;

		private string _BankBIK;

		private string _BankAccount;

		private string _BankCorrespondentAccount;

		private string _RecipientTitle;

		private string _RecipientINN;

		private string _RecipientOKATO;

		private string _KPP;

		private bool _IsDeleted;

		private EntitySet<Blank> _Blank;

		private EntitySet<C_CNCategoryItemRepresentations> _C_CNCategoryItemRepresentations;

		private EntitySet<C_CNCategoryRepresentations> _C_CNCategoryRepresentations;

		private EntitySet<Contractor> _Contractor;

		private EntitySet<Employee> _Employees;

		private EntitySet<HST_Contractor> _HST_Contractor;

		private EntitySet<OrderDoc> _OrderDoc;

		private EntitySet<PaymentOrder> _PaymentOrder;

		private EntityRef<Employee> _ChiefPerson;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<Representation> _Parent;

		private EntitySet<Representation> _Representation_Parent;

		private EntityRef<C_RFSubject> _RFSubject;

		private EntitySet<UserInfo> _UserInfo;

		private EntitySet<VisitRecord> _VisitRecord;

		private EntitySet<FullRepresentation> _FullRepresentation;

		private EntitySet<FullRepresentation> _R_1040;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnRepresentationIDChanging(int value);
		partial void OnRepresentationIDChanged();
		partial void OnRFSubjectIDChanging(int value);
		partial void OnRFSubjectIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnAddressChanging(string value);
		partial void OnAddressChanged();
		partial void OnPhoneChanging(string value);
		partial void OnPhoneChanged();
		partial void OnFaxChanging(string value);
		partial void OnFaxChanged();
		partial void OnEmailChanging(string value);
		partial void OnEmailChanged();
		partial void OnAddInfoChanging(string value);
		partial void OnAddInfoChanged();
		partial void OnParentIDChanging(System.Nullable<int> value);
		partial void OnParentIDChanged();
		partial void OnShortNameChanging(string value);
		partial void OnShortNameChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnOldIDChanging(System.Nullable<decimal> value);
		partial void OnOldIDChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnChiefPersonIDChanging(System.Nullable<int> value);
		partial void OnChiefPersonIDChanged();
		partial void OnOKPOChanging(string value);
		partial void OnOKPOChanged();
		partial void OnOGRNChanging(string value);
		partial void OnOGRNChanged();
		partial void OnINNChanging(string value);
		partial void OnINNChanged();
		partial void OnDepartmentCodeChanging(string value);
		partial void OnDepartmentCodeChanged();
		partial void OnDepartmentCodeFullChanging(string value);
		partial void OnDepartmentCodeFullChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnMasterObjectGUIDChanging(System.Guid value);
		partial void OnMasterObjectGUIDChanged();
		partial void OnBankTitleChanging(string value);
		partial void OnBankTitleChanged();
		partial void OnBankAddressChanging(string value);
		partial void OnBankAddressChanged();
		partial void OnBankBIKChanging(string value);
		partial void OnBankBIKChanged();
		partial void OnBankAccountChanging(string value);
		partial void OnBankAccountChanged();
		partial void OnBankCorrespondentAccountChanging(string value);
		partial void OnBankCorrespondentAccountChanged();
		partial void OnRecipientTitleChanging(string value);
		partial void OnRecipientTitleChanged();
		partial void OnRecipientINNChanging(string value);
		partial void OnRecipientINNChanged();
		partial void OnRecipientOKATOChanging(string value);
		partial void OnRecipientOKATOChanged();
		partial void OnKPPChanging(string value);
		partial void OnKPPChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public Representation()
		{
			this._Blank = new EntitySet<Blank>(new Action<Blank>(this.attach_Blank), new Action<Blank>(this.detach_Blank));
			this._C_CNCategoryItemRepresentations = new EntitySet<C_CNCategoryItemRepresentations>(new Action<C_CNCategoryItemRepresentations>(this.attach_C_CNCategoryItemRepresentations), new Action<C_CNCategoryItemRepresentations>(this.detach_C_CNCategoryItemRepresentations));
			this._C_CNCategoryRepresentations = new EntitySet<C_CNCategoryRepresentations>(new Action<C_CNCategoryRepresentations>(this.attach_C_CNCategoryRepresentations), new Action<C_CNCategoryRepresentations>(this.detach_C_CNCategoryRepresentations));
			this._Contractor = new EntitySet<Contractor>(new Action<Contractor>(this.attach_Contractor), new Action<Contractor>(this.detach_Contractor));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._HST_Contractor = new EntitySet<HST_Contractor>(new Action<HST_Contractor>(this.attach_HST_Contractor), new Action<HST_Contractor>(this.detach_HST_Contractor));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._PaymentOrder = new EntitySet<PaymentOrder>(new Action<PaymentOrder>(this.attach_PaymentOrder), new Action<PaymentOrder>(this.detach_PaymentOrder));
			this._ChiefPerson = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Parent = default(EntityRef<Representation>);
			this._Representation_Parent = new EntitySet<Representation>(new Action<Representation>(this.attach_Representation_Parent), new Action<Representation>(this.detach_Representation_Parent));
			this._RFSubject = default(EntityRef<C_RFSubject>);
			this._UserInfo = new EntitySet<UserInfo>(new Action<UserInfo>(this.attach_UserInfo), new Action<UserInfo>(this.detach_UserInfo));
			this._VisitRecord = new EntitySet<VisitRecord>(new Action<VisitRecord>(this.attach_VisitRecord), new Action<VisitRecord>(this.detach_VisitRecord));
			this._FullRepresentation = new EntitySet<FullRepresentation>(new Action<FullRepresentation>(this.attach_FullRepresentation), new Action<FullRepresentation>(this.detach_FullRepresentation));
			this._R_1040 = new EntitySet<FullRepresentation>(new Action<FullRepresentation>(this.attach_R_1040), new Action<FullRepresentation>(this.detach_R_1040));
			OnCreated();
		}

		[Column(Storage = "_RepresentationID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					this.OnRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentationID = value;
					this.SendPropertyChanged("RepresentationID");
					this.OnRepresentationIDChanged();
				}
			}
		}

		[Column(Storage = "_RFSubjectID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int RFSubjectID
		{
			get
			{
				return this._RFSubjectID;
			}
			set
			{
				if ((this._RFSubjectID != value))
				{
					if (this._RFSubject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRFSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._RFSubjectID = value;
					this.SendPropertyChanged("RFSubjectID");
					this.OnRFSubjectIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(200) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Address", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}

		[Column(Storage = "_Phone", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}

		[Column(Storage = "_Fax", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}

		[Column(Storage = "_Email", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}

		[Column(Storage = "_AddInfo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string AddInfo
		{
			get
			{
				return this._AddInfo;
			}
			set
			{
				if ((this._AddInfo != value))
				{
					this.OnAddInfoChanging(value);
					this.SendPropertyChanging();
					this._AddInfo = value;
					this.SendPropertyChanged("AddInfo");
					this.OnAddInfoChanged();
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}

		[Column(Storage = "_ShortName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_OldID", DbType = "Decimal(14,0)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_ChiefPersonID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ChiefPersonID
		{
			get
			{
				return this._ChiefPersonID;
			}
			set
			{
				if ((this._ChiefPersonID != value))
				{
					if (this._ChiefPerson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChiefPersonIDChanging(value);
					this.SendPropertyChanging();
					this._ChiefPersonID = value;
					this.SendPropertyChanged("ChiefPersonID");
					this.OnChiefPersonIDChanged();
				}
			}
		}

		[Column(Storage = "_OKPO", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string OKPO
		{
			get
			{
				return this._OKPO;
			}
			set
			{
				if ((this._OKPO != value))
				{
					this.OnOKPOChanging(value);
					this.SendPropertyChanging();
					this._OKPO = value;
					this.SendPropertyChanged("OKPO");
					this.OnOKPOChanged();
				}
			}
		}

		[Column(Storage = "_OGRN", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string OGRN
		{
			get
			{
				return this._OGRN;
			}
			set
			{
				if ((this._OGRN != value))
				{
					this.OnOGRNChanging(value);
					this.SendPropertyChanging();
					this._OGRN = value;
					this.SendPropertyChanged("OGRN");
					this.OnOGRNChanged();
				}
			}
		}

		[Column(Storage = "_INN", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string INN
		{
			get
			{
				return this._INN;
			}
			set
			{
				if ((this._INN != value))
				{
					this.OnINNChanging(value);
					this.SendPropertyChanging();
					this._INN = value;
					this.SendPropertyChanged("INN");
					this.OnINNChanged();
				}
			}
		}

		[Column(Storage = "_DepartmentCode", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DepartmentCode
		{
			get
			{
				return this._DepartmentCode;
			}
			set
			{
				if ((this._DepartmentCode != value))
				{
					this.OnDepartmentCodeChanging(value);
					this.SendPropertyChanging();
					this._DepartmentCode = value;
					this.SendPropertyChanged("DepartmentCode");
					this.OnDepartmentCodeChanged();
				}
			}
		}

		[Column(Storage = "_DepartmentCodeFull", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DepartmentCodeFull
		{
			get
			{
				return this._DepartmentCodeFull;
			}
			set
			{
				if ((this._DepartmentCodeFull != value))
				{
					this.OnDepartmentCodeFullChanging(value);
					this.SendPropertyChanging();
					this._DepartmentCodeFull = value;
					this.SendPropertyChanged("DepartmentCodeFull");
					this.OnDepartmentCodeFullChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_MasterObjectGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}

		[Column(Storage = "_BankTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BankTitle
		{
			get
			{
				return this._BankTitle;
			}
			set
			{
				if ((this._BankTitle != value))
				{
					this.OnBankTitleChanging(value);
					this.SendPropertyChanging();
					this._BankTitle = value;
					this.SendPropertyChanged("BankTitle");
					this.OnBankTitleChanged();
				}
			}
		}

		[Column(Storage = "_BankAddress", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BankAddress
		{
			get
			{
				return this._BankAddress;
			}
			set
			{
				if ((this._BankAddress != value))
				{
					this.OnBankAddressChanging(value);
					this.SendPropertyChanging();
					this._BankAddress = value;
					this.SendPropertyChanged("BankAddress");
					this.OnBankAddressChanged();
				}
			}
		}

		[Column(Storage = "_BankBIK", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BankBIK
		{
			get
			{
				return this._BankBIK;
			}
			set
			{
				if ((this._BankBIK != value))
				{
					this.OnBankBIKChanging(value);
					this.SendPropertyChanging();
					this._BankBIK = value;
					this.SendPropertyChanged("BankBIK");
					this.OnBankBIKChanged();
				}
			}
		}

		[Column(Storage = "_BankAccount", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BankAccount
		{
			get
			{
				return this._BankAccount;
			}
			set
			{
				if ((this._BankAccount != value))
				{
					this.OnBankAccountChanging(value);
					this.SendPropertyChanging();
					this._BankAccount = value;
					this.SendPropertyChanged("BankAccount");
					this.OnBankAccountChanged();
				}
			}
		}

		[Column(Storage = "_BankCorrespondentAccount", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BankCorrespondentAccount
		{
			get
			{
				return this._BankCorrespondentAccount;
			}
			set
			{
				if ((this._BankCorrespondentAccount != value))
				{
					this.OnBankCorrespondentAccountChanging(value);
					this.SendPropertyChanging();
					this._BankCorrespondentAccount = value;
					this.SendPropertyChanged("BankCorrespondentAccount");
					this.OnBankCorrespondentAccountChanged();
				}
			}
		}

		[Column(Storage = "_RecipientTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string RecipientTitle
		{
			get
			{
				return this._RecipientTitle;
			}
			set
			{
				if ((this._RecipientTitle != value))
				{
					this.OnRecipientTitleChanging(value);
					this.SendPropertyChanging();
					this._RecipientTitle = value;
					this.SendPropertyChanged("RecipientTitle");
					this.OnRecipientTitleChanged();
				}
			}
		}

		[Column(Storage = "_RecipientINN", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string RecipientINN
		{
			get
			{
				return this._RecipientINN;
			}
			set
			{
				if ((this._RecipientINN != value))
				{
					this.OnRecipientINNChanging(value);
					this.SendPropertyChanging();
					this._RecipientINN = value;
					this.SendPropertyChanged("RecipientINN");
					this.OnRecipientINNChanged();
				}
			}
		}

		[Column(Storage = "_RecipientOKATO", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string RecipientOKATO
		{
			get
			{
				return this._RecipientOKATO;
			}
			set
			{
				if ((this._RecipientOKATO != value))
				{
					this.OnRecipientOKATOChanging(value);
					this.SendPropertyChanging();
					this._RecipientOKATO = value;
					this.SendPropertyChanged("RecipientOKATO");
					this.OnRecipientOKATOChanged();
				}
			}
		}

		[Column(Storage = "_KPP", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string KPP
		{
			get
			{
				return this._KPP;
			}
			set
			{
				if ((this._KPP != value))
				{
					this.OnKPPChanging(value);
					this.SendPropertyChanging();
					this._KPP = value;
					this.SendPropertyChanged("KPP");
					this.OnKPPChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_Blank_Representation", Storage = "_Blank", ThisKey = "RepresentationID", OtherKey = "RepresentationID", DeleteRule = "NO ACTION")]
		public EntitySet<Blank> Blank
		{
			get
			{
				return this._Blank;
			}
			set
			{
				this._Blank.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNCategoryItemRepresentations_Representations", Storage = "_C_CNCategoryItemRepresentations", ThisKey = "RepresentationID", OtherKey = "RepresentationsID", DeleteRule = "CASCADE")]
		public EntitySet<C_CNCategoryItemRepresentations> C_CNCategoryItemRepresentations
		{
			get
			{
				return this._C_CNCategoryItemRepresentations;
			}
			set
			{
				this._C_CNCategoryItemRepresentations.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNCategoryRepresentations_Representations", Storage = "_C_CNCategoryRepresentations", ThisKey = "RepresentationID", OtherKey = "RepresentationsID", DeleteRule = "CASCADE")]
		public EntitySet<C_CNCategoryRepresentations> C_CNCategoryRepresentations
		{
			get
			{
				return this._C_CNCategoryRepresentations;
			}
			set
			{
				this._C_CNCategoryRepresentations.Assign(value);
			}
		}

		[Association(Name = "FK_Contractor_CreatorRepresentation", Storage = "_Contractor", ThisKey = "RepresentationID", OtherKey = "CreatorRepresentationID", DeleteRule = "NO ACTION")]
		public EntitySet<Contractor> Contractor
		{
			get
			{
				return this._Contractor;
			}
			set
			{
				this._Contractor.Assign(value);
			}
		}

		[Association(Name = "FK_Employee_Representation", Storage = "_Employees", ThisKey = "RepresentationID", OtherKey = "RepresentationID", DeleteRule = "NO ACTION")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}

		[Association(Name = "FK_HST_Contractor_CreatorRepresentation", Storage = "_HST_Contractor", ThisKey = "RepresentationID", OtherKey = "CreatorRepresentationID", DeleteRule = "NO ACTION")]
		public EntitySet<HST_Contractor> HST_Contractor
		{
			get
			{
				return this._HST_Contractor;
			}
			set
			{
				this._HST_Contractor.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_Representation", Storage = "_OrderDoc", ThisKey = "RepresentationID", OtherKey = "RepresentationID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}

		[Association(Name = "FK_PaymentOrder_Representation", Storage = "_PaymentOrder", ThisKey = "RepresentationID", OtherKey = "RepresentationID", DeleteRule = "NO ACTION")]
		public EntitySet<PaymentOrder> PaymentOrder
		{
			get
			{
				return this._PaymentOrder;
			}
			set
			{
				this._PaymentOrder.Assign(value);
			}
		}

		[Association(Name = "FK_Representation_ChiefPerson", Storage = "_ChiefPerson", ThisKey = "ChiefPersonID", OtherKey = "EmployeeID", IsForeignKey = true)]
		public Employee ChiefPerson
		{
			get
			{
				return this._ChiefPerson.Entity;
			}
			set
			{
				Employee previousValue = this._ChiefPerson.Entity;
				if (((previousValue != value)
							|| (this._ChiefPerson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChiefPerson.Entity = null;
						previousValue.Representation_ChiefPerson.Remove(this);
					}
					this._ChiefPerson.Entity = value;
					if ((value != null))
					{
						value.Representation_ChiefPerson.Add(this);
						this._ChiefPersonID = value.EmployeeID;
					}
					else
					{
						this._ChiefPersonID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ChiefPerson");
				}
			}
		}

		[Association(Name = "FK_Representation_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.Representation.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.Representation.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_Representation_Parent", Storage = "_Parent", ThisKey = "ParentID", OtherKey = "RepresentationID", IsForeignKey = true)]
		public Representation Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				Representation previousValue = this._Parent.Entity;
				if (((previousValue != value)
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.Representation_Parent.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.Representation_Parent.Add(this);
						this._ParentID = value.RepresentationID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}

		[Association(Name = "FK_Representation_Parent", Storage = "_Representation_Parent", ThisKey = "RepresentationID", OtherKey = "ParentID", DeleteRule = "NO ACTION")]
		public EntitySet<Representation> Representation_Parent
		{
			get
			{
				return this._Representation_Parent;
			}
			set
			{
				this._Representation_Parent.Assign(value);
			}
		}

		[Association(Name = "FK_Representation_RFSubject", Storage = "_RFSubject", ThisKey = "RFSubjectID", OtherKey = "RFSubjectID", IsForeignKey = true)]
		public C_RFSubject RFSubject
		{
			get
			{
				return this._RFSubject.Entity;
			}
			set
			{
				C_RFSubject previousValue = this._RFSubject.Entity;
				if (((previousValue != value)
							|| (this._RFSubject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RFSubject.Entity = null;
						previousValue.Representation.Remove(this);
					}
					this._RFSubject.Entity = value;
					if ((value != null))
					{
						value.Representation.Add(this);
						this._RFSubjectID = value.RFSubjectID;
					}
					else
					{
						this._RFSubjectID = default(int);
					}
					this.SendPropertyChanged("RFSubject");
				}
			}
		}

		[Association(Name = "FK_UserInfo_Representation", Storage = "_UserInfo", ThisKey = "RepresentationID", OtherKey = "RepresentationID", DeleteRule = "NO ACTION")]
		public EntitySet<UserInfo> UserInfo
		{
			get
			{
				return this._UserInfo;
			}
			set
			{
				this._UserInfo.Assign(value);
			}
		}

		[Association(Name = "FK_VisitRecord_Representation", Storage = "_VisitRecord", ThisKey = "RepresentationID", OtherKey = "RepresentationID", DeleteRule = "NO ACTION")]
		public EntitySet<VisitRecord> VisitRecord
		{
			get
			{
				return this._VisitRecord;
			}
			set
			{
				this._VisitRecord.Assign(value);
			}
		}

		[Association(Name = "R_1039", Storage = "_FullRepresentation", ThisKey = "RepresentationID", OtherKey = "ParentRepresentationID", DeleteRule = "NO ACTION")]
		public EntitySet<FullRepresentation> FullRepresentation
		{
			get
			{
				return this._FullRepresentation;
			}
			set
			{
				this._FullRepresentation.Assign(value);
			}
		}

		[Association(Storage = "_R_1040", ThisKey = "RepresentationID", OtherKey = "ChildRepresentationID", DeleteRule = "CASCADE")]
		public EntitySet<FullRepresentation> R_1040
		{
			get
			{
				return this._R_1040;
			}
			set
			{
				this._R_1040.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_Blank(Blank entity)
		{
			this.SendPropertyChanging();
			entity.Representation = this;
		}

		private void detach_Blank(Blank entity)
		{
			this.SendPropertyChanging();
			entity.Representation = null;
		}

		private void attach_C_CNCategoryItemRepresentations(C_CNCategoryItemRepresentations entity)
		{
			this.SendPropertyChanging();
			entity.Representations = this;
		}

		private void detach_C_CNCategoryItemRepresentations(C_CNCategoryItemRepresentations entity)
		{
			this.SendPropertyChanging();
			entity.Representations = null;
		}

		private void attach_C_CNCategoryRepresentations(C_CNCategoryRepresentations entity)
		{
			this.SendPropertyChanging();
			entity.Representations = this;
		}

		private void detach_C_CNCategoryRepresentations(C_CNCategoryRepresentations entity)
		{
			this.SendPropertyChanging();
			entity.Representations = null;
		}

		private void attach_Contractor(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.CreatorRepresentation = this;
		}

		private void detach_Contractor(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.CreatorRepresentation = null;
		}

		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Representation = this;
		}

		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Representation = null;
		}

		private void attach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.CreatorRepresentation = this;
		}

		private void detach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.CreatorRepresentation = null;
		}

		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Representation = this;
		}

		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Representation = null;
		}

		private void attach_PaymentOrder(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.Representation = this;
		}

		private void detach_PaymentOrder(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.Representation = null;
		}

		private void attach_Representation_Parent(Representation entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}

		private void detach_Representation_Parent(Representation entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}

		private void attach_UserInfo(UserInfo entity)
		{
			this.SendPropertyChanging();
			entity.Representation = this;
		}

		private void detach_UserInfo(UserInfo entity)
		{
			this.SendPropertyChanging();
			entity.Representation = null;
		}

		private void attach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.Representation = this;
		}

		private void detach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.Representation = null;
		}

		private void attach_FullRepresentation(FullRepresentation entity)
		{
			this.SendPropertyChanging();
			entity.R_1039 = this;
		}

		private void detach_FullRepresentation(FullRepresentation entity)
		{
			this.SendPropertyChanging();
			entity.R_1039 = null;
		}

		private void attach_R_1040(FullRepresentation entity)
		{
			this.SendPropertyChanging();
			entity.R_1040 = this;
		}

		private void detach_R_1040(FullRepresentation entity)
		{
			this.SendPropertyChanging();
			entity.R_1040 = null;
		}
	}

	[Table(Name = "dbo.RFSubject")]
	public partial class RFSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _RFSubjectID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Code;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<RFSubjectData> _RFSubjectData;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnRFSubjectIDChanging(int value);
		partial void OnRFSubjectIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnCodeChanging(string value);
		partial void OnCodeChanged();
		#endregion

		public RFSubject()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._RFSubjectData = new EntitySet<RFSubjectData>(new Action<RFSubjectData>(this.attach_RFSubjectData), new Action<RFSubjectData>(this.detach_RFSubjectData));
			OnCreated();
		}

		[Column(Storage = "_RFSubjectID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int RFSubjectID
		{
			get
			{
				return this._RFSubjectID;
			}
			set
			{
				if ((this._RFSubjectID != value))
				{
					this.OnRFSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._RFSubjectID = value;
					this.SendPropertyChanged("RFSubjectID");
					this.OnRFSubjectIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Code", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}

		[Association(Name = "FK_RFSubject_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.RFSubject.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.RFSubject.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_RFSubjectData_RFSubject", Storage = "_RFSubjectData", ThisKey = "RFSubjectID", OtherKey = "RFSubjectID", DeleteRule = "CASCADE")]
		public EntitySet<RFSubjectData> RFSubjectData
		{
			get
			{
				return this._RFSubjectData;
			}
			set
			{
				this._RFSubjectData.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_RFSubjectData(RFSubjectData entity)
		{
			this.SendPropertyChanging();
			entity.RFSubject = this;
		}

		private void detach_RFSubjectData(RFSubjectData entity)
		{
			this.SendPropertyChanging();
			entity.RFSubject = null;
		}
	}

	[Table(Name = "dbo.RFSubjectData")]
	public partial class RFSubjectData : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _RFSubjectDataID;

		private int _RFSubjectID;

		private string _LanguageCode;

		private string _Title;

		private EntityRef<C_Language> _C_Language;

		private EntityRef<RFSubject> _RFSubject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnRFSubjectDataIDChanging(int value);
		partial void OnRFSubjectDataIDChanged();
		partial void OnRFSubjectIDChanging(int value);
		partial void OnRFSubjectIDChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		#endregion

		public RFSubjectData()
		{
			this._C_Language = default(EntityRef<C_Language>);
			this._RFSubject = default(EntityRef<RFSubject>);
			OnCreated();
		}

		[Column(Storage = "_RFSubjectDataID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int RFSubjectDataID
		{
			get
			{
				return this._RFSubjectDataID;
			}
			set
			{
				if ((this._RFSubjectDataID != value))
				{
					this.OnRFSubjectDataIDChanging(value);
					this.SendPropertyChanging();
					this._RFSubjectDataID = value;
					this.SendPropertyChanged("RFSubjectDataID");
					this.OnRFSubjectDataIDChanged();
				}
			}
		}

		[Column(Storage = "_RFSubjectID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int RFSubjectID
		{
			get
			{
				return this._RFSubjectID;
			}
			set
			{
				if ((this._RFSubjectID != value))
				{
					if (this._RFSubject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRFSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._RFSubjectID = value;
					this.SendPropertyChanged("RFSubjectID");
					this.OnRFSubjectIDChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					if (this._C_Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(1000) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Association(Name = "FK_RFSubjectData_C_Language", Storage = "_C_Language", ThisKey = "LanguageCode", OtherKey = "LanguageCode", IsForeignKey = true, DeleteOnNull = true)]
		public C_Language C_Language
		{
			get
			{
				return this._C_Language.Entity;
			}
			set
			{
				C_Language previousValue = this._C_Language.Entity;
				if (((previousValue != value)
							|| (this._C_Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_Language.Entity = null;
						previousValue.RFSubjectData.Remove(this);
					}
					this._C_Language.Entity = value;
					if ((value != null))
					{
						value.RFSubjectData.Add(this);
						this._LanguageCode = value.LanguageCode;
					}
					else
					{
						this._LanguageCode = default(string);
					}
					this.SendPropertyChanged("C_Language");
				}
			}
		}

		[Association(Name = "FK_RFSubjectData_RFSubject", Storage = "_RFSubject", ThisKey = "RFSubjectID", OtherKey = "RFSubjectID", IsForeignKey = true, DeleteOnNull = true)]
		public RFSubject RFSubject
		{
			get
			{
				return this._RFSubject.Entity;
			}
			set
			{
				RFSubject previousValue = this._RFSubject.Entity;
				if (((previousValue != value)
							|| (this._RFSubject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RFSubject.Entity = null;
						previousValue.RFSubjectData.Remove(this);
					}
					this._RFSubject.Entity = value;
					if ((value != null))
					{
						value.RFSubjectData.Add(this);
						this._RFSubjectID = value.RFSubjectID;
					}
					else
					{
						this._RFSubjectID = default(int);
					}
					this.SendPropertyChanged("RFSubject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.SimplePage")]
	public partial class SimplePage : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SimplePageID;

		private string _SysName;

		private EntityRef<SiteObject> _SiteObject;

		private EntitySet<SimplePageData> _SimplePageData;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSimplePageIDChanging(int value);
		partial void OnSimplePageIDChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		#endregion

		public SimplePage()
		{
			this._SiteObject = default(EntityRef<SiteObject>);
			this._SimplePageData = new EntitySet<SimplePageData>(new Action<SimplePageData>(this.attach_SimplePageData), new Action<SimplePageData>(this.detach_SimplePageData));
			OnCreated();
		}

		[Column(Storage = "_SimplePageID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int SimplePageID
		{
			get
			{
				return this._SimplePageID;
			}
			set
			{
				if ((this._SimplePageID != value))
				{
					if (this._SiteObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSimplePageIDChanging(value);
					this.SendPropertyChanging();
					this._SimplePageID = value;
					this.SendPropertyChanged("SimplePageID");
					this.OnSimplePageIDChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Association(Name = "FK_SimplePage_SiteObject", Storage = "_SiteObject", ThisKey = "SimplePageID", OtherKey = "SiteObjectID", IsForeignKey = true, DeleteOnNull = true)]
		public SiteObject SiteObject
		{
			get
			{
				return this._SiteObject.Entity;
			}
			set
			{
				SiteObject previousValue = this._SiteObject.Entity;
				if (((previousValue != value)
							|| (this._SiteObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SiteObject.Entity = null;
						previousValue.SimplePage = null;
					}
					this._SiteObject.Entity = value;
					if ((value != null))
					{
						value.SimplePage = this;
						this._SimplePageID = value.SiteObjectID;
					}
					else
					{
						this._SimplePageID = default(int);
					}
					this.SendPropertyChanged("SiteObject");
				}
			}
		}

		[Association(Name = "FK_SimplePageData_SimplePage", Storage = "_SimplePageData", ThisKey = "SimplePageID", OtherKey = "SimplePageID", DeleteRule = "CASCADE")]
		public EntitySet<SimplePageData> SimplePageData
		{
			get
			{
				return this._SimplePageData;
			}
			set
			{
				this._SimplePageData.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_SimplePageData(SimplePageData entity)
		{
			this.SendPropertyChanging();
			entity.SimplePage = this;
		}

		private void detach_SimplePageData(SimplePageData entity)
		{
			this.SendPropertyChanging();
			entity.SimplePage = null;
		}
	}

	[Table(Name = "dbo.SimplePageData")]
	public partial class SimplePageData : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SimplePageDataID;

		private int _SimplePageID;

		private string _LanguageCode;

		private string _Content;

		private EntityRef<C_Language> _C_Language;

		private EntityRef<SimplePage> _SimplePage;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSimplePageDataIDChanging(int value);
		partial void OnSimplePageDataIDChanged();
		partial void OnSimplePageIDChanging(int value);
		partial void OnSimplePageIDChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnContentChanging(string value);
		partial void OnContentChanged();
		#endregion

		public SimplePageData()
		{
			this._C_Language = default(EntityRef<C_Language>);
			this._SimplePage = default(EntityRef<SimplePage>);
			OnCreated();
		}

		[Column(Storage = "_SimplePageDataID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int SimplePageDataID
		{
			get
			{
				return this._SimplePageDataID;
			}
			set
			{
				if ((this._SimplePageDataID != value))
				{
					this.OnSimplePageDataIDChanging(value);
					this.SendPropertyChanging();
					this._SimplePageDataID = value;
					this.SendPropertyChanged("SimplePageDataID");
					this.OnSimplePageDataIDChanged();
				}
			}
		}

		[Column(Storage = "_SimplePageID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SimplePageID
		{
			get
			{
				return this._SimplePageID;
			}
			set
			{
				if ((this._SimplePageID != value))
				{
					if (this._SimplePage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSimplePageIDChanging(value);
					this.SendPropertyChanging();
					this._SimplePageID = value;
					this.SendPropertyChanged("SimplePageID");
					this.OnSimplePageIDChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					if (this._C_Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_Content", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}

		[Association(Name = "FK_SimplePageData_C_Language", Storage = "_C_Language", ThisKey = "LanguageCode", OtherKey = "LanguageCode", IsForeignKey = true, DeleteOnNull = true)]
		public C_Language C_Language
		{
			get
			{
				return this._C_Language.Entity;
			}
			set
			{
				C_Language previousValue = this._C_Language.Entity;
				if (((previousValue != value)
							|| (this._C_Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_Language.Entity = null;
						previousValue.SimplePageData.Remove(this);
					}
					this._C_Language.Entity = value;
					if ((value != null))
					{
						value.SimplePageData.Add(this);
						this._LanguageCode = value.LanguageCode;
					}
					else
					{
						this._LanguageCode = default(string);
					}
					this.SendPropertyChanged("C_Language");
				}
			}
		}

		[Association(Name = "FK_SimplePageData_SimplePage", Storage = "_SimplePage", ThisKey = "SimplePageID", OtherKey = "SimplePageID", IsForeignKey = true, DeleteOnNull = true)]
		public SimplePage SimplePage
		{
			get
			{
				return this._SimplePage.Entity;
			}
			set
			{
				SimplePage previousValue = this._SimplePage.Entity;
				if (((previousValue != value)
							|| (this._SimplePage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SimplePage.Entity = null;
						previousValue.SimplePageData.Remove(this);
					}
					this._SimplePage.Entity = value;
					if ((value != null))
					{
						value.SimplePageData.Add(this);
						this._SimplePageID = value.SimplePageID;
					}
					else
					{
						this._SimplePageID = default(int);
					}
					this.SendPropertyChanged("SimplePage");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.SiteInfoobjects")]
	public partial class SiteInfoobjects : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SiteInfoobjectsID;

		private System.Nullable<bool> _IsFolder;

		private System.Nullable<bool> _IsRoot;

		private EntityRef<MM_ObjectType> _MM_ObjectType;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSiteInfoobjectsIDChanging(int value);
		partial void OnSiteInfoobjectsIDChanged();
		partial void OnIsFolderChanging(System.Nullable<bool> value);
		partial void OnIsFolderChanged();
		partial void OnIsRootChanging(System.Nullable<bool> value);
		partial void OnIsRootChanged();
		#endregion

		public SiteInfoobjects()
		{
			this._MM_ObjectType = default(EntityRef<MM_ObjectType>);
			OnCreated();
		}

		[Column(Storage = "_SiteInfoobjectsID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int SiteInfoobjectsID
		{
			get
			{
				return this._SiteInfoobjectsID;
			}
			set
			{
				if ((this._SiteInfoobjectsID != value))
				{
					if (this._MM_ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteInfoobjectsIDChanging(value);
					this.SendPropertyChanging();
					this._SiteInfoobjectsID = value;
					this.SendPropertyChanged("SiteInfoobjectsID");
					this.OnSiteInfoobjectsIDChanged();
				}
			}
		}

		[Column(Storage = "_IsFolder", DbType = "Bit", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<bool> IsFolder
		{
			get
			{
				return this._IsFolder;
			}
			set
			{
				if ((this._IsFolder != value))
				{
					this.OnIsFolderChanging(value);
					this.SendPropertyChanging();
					this._IsFolder = value;
					this.SendPropertyChanged("IsFolder");
					this.OnIsFolderChanged();
				}
			}
		}

		[Column(Storage = "_IsRoot", DbType = "Bit", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<bool> IsRoot
		{
			get
			{
				return this._IsRoot;
			}
			set
			{
				if ((this._IsRoot != value))
				{
					this.OnIsRootChanging(value);
					this.SendPropertyChanging();
					this._IsRoot = value;
					this.SendPropertyChanged("IsRoot");
					this.OnIsRootChanged();
				}
			}
		}

		[Association(Name = "FK_SiteInfoobjects_MM_ObjectType", Storage = "_MM_ObjectType", ThisKey = "SiteInfoobjectsID", OtherKey = "ObjectTypeID", IsForeignKey = true, DeleteOnNull = true)]
		public MM_ObjectType MM_ObjectType
		{
			get
			{
				return this._MM_ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._MM_ObjectType.Entity;
				if (((previousValue != value)
							|| (this._MM_ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_ObjectType.Entity = null;
						previousValue.SiteInfoobjects = null;
					}
					this._MM_ObjectType.Entity = value;
					if ((value != null))
					{
						value.SiteInfoobjects = this;
						this._SiteInfoobjectsID = value.ObjectTypeID;
					}
					else
					{
						this._SiteInfoobjectsID = default(int);
					}
					this.SendPropertyChanged("MM_ObjectType");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.SiteItem")]
	public partial class SiteItem : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SiteItemID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private int _ParentID;

		private string _Content;

		private string _SysName;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<SiteItemsFolder> _Parent;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSiteItemIDChanging(int value);
		partial void OnSiteItemIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnParentIDChanging(int value);
		partial void OnParentIDChanged();
		partial void OnContentChanging(string value);
		partial void OnContentChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		#endregion

		public SiteItem()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Parent = default(EntityRef<SiteItemsFolder>);
			OnCreated();
		}

		[Column(Storage = "_SiteItemID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int SiteItemID
		{
			get
			{
				return this._SiteItemID;
			}
			set
			{
				if ((this._SiteItemID != value))
				{
					this.OnSiteItemIDChanging(value);
					this.SendPropertyChanging();
					this._SiteItemID = value;
					this.SendPropertyChanged("SiteItemID");
					this.OnSiteItemIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}

		[Column(Storage = "_Content", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Association(Name = "FK_SiteItem_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.SiteItem.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.SiteItem.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_SiteItem_Parent", Storage = "_Parent", ThisKey = "ParentID", OtherKey = "SiteItemsFolderID", IsForeignKey = true)]
		public SiteItemsFolder Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				SiteItemsFolder previousValue = this._Parent.Entity;
				if (((previousValue != value)
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.SiteItem.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.SiteItem.Add(this);
						this._ParentID = value.SiteItemsFolderID;
					}
					else
					{
						this._ParentID = default(int);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.SiteItemHtml")]
	public partial class SiteItemHtml : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SiteItemHtmlID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private int _ParentID;

		private string _Content;

		private string _SysName;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<SiteItemHtmlFolder> _Parent;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSiteItemHtmlIDChanging(int value);
		partial void OnSiteItemHtmlIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnParentIDChanging(int value);
		partial void OnParentIDChanged();
		partial void OnContentChanging(string value);
		partial void OnContentChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		#endregion

		public SiteItemHtml()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Parent = default(EntityRef<SiteItemHtmlFolder>);
			OnCreated();
		}

		[Column(Storage = "_SiteItemHtmlID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int SiteItemHtmlID
		{
			get
			{
				return this._SiteItemHtmlID;
			}
			set
			{
				if ((this._SiteItemHtmlID != value))
				{
					this.OnSiteItemHtmlIDChanging(value);
					this.SendPropertyChanging();
					this._SiteItemHtmlID = value;
					this.SendPropertyChanged("SiteItemHtmlID");
					this.OnSiteItemHtmlIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}

		[Column(Storage = "_Content", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Association(Name = "FK_SiteItemHtml_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.SiteItemHtml.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.SiteItemHtml.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_SiteItemHtml_Parent", Storage = "_Parent", ThisKey = "ParentID", OtherKey = "SiteItemHtmlFolderID", IsForeignKey = true)]
		public SiteItemHtmlFolder Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				SiteItemHtmlFolder previousValue = this._Parent.Entity;
				if (((previousValue != value)
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.SiteItemsHtml.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.SiteItemsHtml.Add(this);
						this._ParentID = value.SiteItemHtmlFolderID;
					}
					else
					{
						this._ParentID = default(int);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.SiteItemHtmlFolder")]
	public partial class SiteItemHtmlFolder : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SiteItemHtmlFolderID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private string _SysName;

		private EntitySet<SiteItemHtml> _SiteItemsHtml;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSiteItemHtmlFolderIDChanging(int value);
		partial void OnSiteItemHtmlFolderIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		#endregion

		public SiteItemHtmlFolder()
		{
			this._SiteItemsHtml = new EntitySet<SiteItemHtml>(new Action<SiteItemHtml>(this.attach_SiteItemsHtml), new Action<SiteItemHtml>(this.detach_SiteItemsHtml));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_SiteItemHtmlFolderID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int SiteItemHtmlFolderID
		{
			get
			{
				return this._SiteItemHtmlFolderID;
			}
			set
			{
				if ((this._SiteItemHtmlFolderID != value))
				{
					this.OnSiteItemHtmlFolderIDChanging(value);
					this.SendPropertyChanging();
					this._SiteItemHtmlFolderID = value;
					this.SendPropertyChanged("SiteItemHtmlFolderID");
					this.OnSiteItemHtmlFolderIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Association(Name = "FK_SiteItemHtml_Parent", Storage = "_SiteItemsHtml", ThisKey = "SiteItemHtmlFolderID", OtherKey = "ParentID", DeleteRule = "NO ACTION")]
		public EntitySet<SiteItemHtml> SiteItemsHtml
		{
			get
			{
				return this._SiteItemsHtml;
			}
			set
			{
				this._SiteItemsHtml.Assign(value);
			}
		}

		[Association(Name = "FK_SiteItemHtmlFolder_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.SiteItemHtmlFolder.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.SiteItemHtmlFolder.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_SiteItemsHtml(SiteItemHtml entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}

		private void detach_SiteItemsHtml(SiteItemHtml entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
	}

	[Table(Name = "dbo.SiteItemsFolder")]
	public partial class SiteItemsFolder : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SiteItemsFolderID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private string _SysName;

		private EntitySet<SiteItem> _SiteItem;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSiteItemsFolderIDChanging(int value);
		partial void OnSiteItemsFolderIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		#endregion

		public SiteItemsFolder()
		{
			this._SiteItem = new EntitySet<SiteItem>(new Action<SiteItem>(this.attach_SiteItem), new Action<SiteItem>(this.detach_SiteItem));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_SiteItemsFolderID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int SiteItemsFolderID
		{
			get
			{
				return this._SiteItemsFolderID;
			}
			set
			{
				if ((this._SiteItemsFolderID != value))
				{
					this.OnSiteItemsFolderIDChanging(value);
					this.SendPropertyChanging();
					this._SiteItemsFolderID = value;
					this.SendPropertyChanged("SiteItemsFolderID");
					this.OnSiteItemsFolderIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Association(Name = "FK_SiteItem_Parent", Storage = "_SiteItem", ThisKey = "SiteItemsFolderID", OtherKey = "ParentID", DeleteRule = "NO ACTION")]
		public EntitySet<SiteItem> SiteItem
		{
			get
			{
				return this._SiteItem;
			}
			set
			{
				this._SiteItem.Assign(value);
			}
		}

		[Association(Name = "FK_SiteItemsFolder_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.SiteItemsFolder.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.SiteItemsFolder.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_SiteItem(SiteItem entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}

		private void detach_SiteItem(SiteItem entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
	}

	[Table(Name = "dbo.SiteObject")]
	public partial class SiteObject : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SiteObjectID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private int _SeqNo;

		private int _ParentID;

		private string _ClassName;

		private bool _IsPublished;

		private System.DateTime _CreateDate;

		private System.Nullable<System.DateTime> _PublishDate;

		private EntityRef<Article> _Article;

		private EntityRef<Document> _Document;

		private EntityRef<News> _News;

		private EntityRef<SimplePage> _SimplePage;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<SiteSection> _Parent;

		private EntitySet<SiteObjectData> _SiteObjectData;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSiteObjectIDChanging(int value);
		partial void OnSiteObjectIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnParentIDChanging(int value);
		partial void OnParentIDChanged();
		partial void OnClassNameChanging(string value);
		partial void OnClassNameChanged();
		partial void OnIsPublishedChanging(bool value);
		partial void OnIsPublishedChanged();
		partial void OnCreateDateChanging(System.DateTime value);
		partial void OnCreateDateChanged();
		partial void OnPublishDateChanging(System.Nullable<System.DateTime> value);
		partial void OnPublishDateChanged();
		#endregion

		public SiteObject()
		{
			this._Article = default(EntityRef<Article>);
			this._Document = default(EntityRef<Document>);
			this._News = default(EntityRef<News>);
			this._SimplePage = default(EntityRef<SimplePage>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Parent = default(EntityRef<SiteSection>);
			this._SiteObjectData = new EntitySet<SiteObjectData>(new Action<SiteObjectData>(this.attach_SiteObjectData), new Action<SiteObjectData>(this.detach_SiteObjectData));
			OnCreated();
		}

		[Column(Storage = "_SiteObjectID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int SiteObjectID
		{
			get
			{
				return this._SiteObjectID;
			}
			set
			{
				if ((this._SiteObjectID != value))
				{
					this.OnSiteObjectIDChanging(value);
					this.SendPropertyChanging();
					this._SiteObjectID = value;
					this.SendPropertyChanged("SiteObjectID");
					this.OnSiteObjectIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}

		[Column(Storage = "_ClassName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}

		[Column(Storage = "_IsPublished", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsPublished
		{
			get
			{
				return this._IsPublished;
			}
			set
			{
				if ((this._IsPublished != value))
				{
					this.OnIsPublishedChanging(value);
					this.SendPropertyChanging();
					this._IsPublished = value;
					this.SendPropertyChanged("IsPublished");
					this.OnIsPublishedChanged();
				}
			}
		}

		[Column(Storage = "_CreateDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}

		[Column(Storage = "_PublishDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}

		[Association(Name = "FK_Article_SiteObject", Storage = "_Article", ThisKey = "SiteObjectID", OtherKey = "ArticleID", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value)
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.SiteObject = null;
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.SiteObject = this;
					}
					this.SendPropertyChanged("Article");
				}
			}
		}

		[Association(Name = "FK_Document_SiteObject", Storage = "_Document", ThisKey = "SiteObjectID", OtherKey = "DocumentID", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value)
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.SiteObject = null;
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.SiteObject = this;
					}
					this.SendPropertyChanged("Document");
				}
			}
		}

		[Association(Name = "FK_News_SiteObject", Storage = "_News", ThisKey = "SiteObjectID", OtherKey = "NewsID", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
		public News News
		{
			get
			{
				return this._News.Entity;
			}
			set
			{
				News previousValue = this._News.Entity;
				if (((previousValue != value)
							|| (this._News.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._News.Entity = null;
						previousValue.SiteObject = null;
					}
					this._News.Entity = value;
					if ((value != null))
					{
						value.SiteObject = this;
					}
					this.SendPropertyChanged("News");
				}
			}
		}

		[Association(Name = "FK_SimplePage_SiteObject", Storage = "_SimplePage", ThisKey = "SiteObjectID", OtherKey = "SimplePageID", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
		public SimplePage SimplePage
		{
			get
			{
				return this._SimplePage.Entity;
			}
			set
			{
				SimplePage previousValue = this._SimplePage.Entity;
				if (((previousValue != value)
							|| (this._SimplePage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SimplePage.Entity = null;
						previousValue.SiteObject = null;
					}
					this._SimplePage.Entity = value;
					if ((value != null))
					{
						value.SiteObject = this;
					}
					this.SendPropertyChanged("SimplePage");
				}
			}
		}

		[Association(Name = "FK_SiteObject_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.SiteObject.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.SiteObject.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_SiteObject_Parent", Storage = "_Parent", ThisKey = "ParentID", OtherKey = "SiteSectionID", IsForeignKey = true)]
		public SiteSection Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				SiteSection previousValue = this._Parent.Entity;
				if (((previousValue != value)
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.SiteObjects.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.SiteObjects.Add(this);
						this._ParentID = value.SiteSectionID;
					}
					else
					{
						this._ParentID = default(int);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}

		[Association(Name = "FK_SiteObjectData_SiteObject", Storage = "_SiteObjectData", ThisKey = "SiteObjectID", OtherKey = "SiteObjectID", DeleteRule = "CASCADE")]
		public EntitySet<SiteObjectData> SiteObjectData
		{
			get
			{
				return this._SiteObjectData;
			}
			set
			{
				this._SiteObjectData.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_SiteObjectData(SiteObjectData entity)
		{
			this.SendPropertyChanging();
			entity.SiteObject = this;
		}

		private void detach_SiteObjectData(SiteObjectData entity)
		{
			this.SendPropertyChanging();
			entity.SiteObject = null;
		}
	}

	[Table(Name = "dbo.SiteObjectData")]
	public partial class SiteObjectData : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SiteObjectDataID;

		private int _SiteObjectID;

		private string _LanguageCode;

		private string _Title;

		private string _SubTitle;

		private EntityRef<C_Language> _C_Language;

		private EntityRef<SiteObject> _SiteObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSiteObjectDataIDChanging(int value);
		partial void OnSiteObjectDataIDChanged();
		partial void OnSiteObjectIDChanging(int value);
		partial void OnSiteObjectIDChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSubTitleChanging(string value);
		partial void OnSubTitleChanged();
		#endregion

		public SiteObjectData()
		{
			this._C_Language = default(EntityRef<C_Language>);
			this._SiteObject = default(EntityRef<SiteObject>);
			OnCreated();
		}

		[Column(Storage = "_SiteObjectDataID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int SiteObjectDataID
		{
			get
			{
				return this._SiteObjectDataID;
			}
			set
			{
				if ((this._SiteObjectDataID != value))
				{
					this.OnSiteObjectDataIDChanging(value);
					this.SendPropertyChanging();
					this._SiteObjectDataID = value;
					this.SendPropertyChanged("SiteObjectDataID");
					this.OnSiteObjectDataIDChanged();
				}
			}
		}

		[Column(Storage = "_SiteObjectID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SiteObjectID
		{
			get
			{
				return this._SiteObjectID;
			}
			set
			{
				if ((this._SiteObjectID != value))
				{
					if (this._SiteObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteObjectIDChanging(value);
					this.SendPropertyChanging();
					this._SiteObjectID = value;
					this.SendPropertyChanged("SiteObjectID");
					this.OnSiteObjectIDChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					if (this._C_Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SubTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SubTitle
		{
			get
			{
				return this._SubTitle;
			}
			set
			{
				if ((this._SubTitle != value))
				{
					this.OnSubTitleChanging(value);
					this.SendPropertyChanging();
					this._SubTitle = value;
					this.SendPropertyChanged("SubTitle");
					this.OnSubTitleChanged();
				}
			}
		}

		[Association(Name = "FK_SiteObjectData_C_Language", Storage = "_C_Language", ThisKey = "LanguageCode", OtherKey = "LanguageCode", IsForeignKey = true, DeleteOnNull = true)]
		public C_Language C_Language
		{
			get
			{
				return this._C_Language.Entity;
			}
			set
			{
				C_Language previousValue = this._C_Language.Entity;
				if (((previousValue != value)
							|| (this._C_Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_Language.Entity = null;
						previousValue.SiteObjectData.Remove(this);
					}
					this._C_Language.Entity = value;
					if ((value != null))
					{
						value.SiteObjectData.Add(this);
						this._LanguageCode = value.LanguageCode;
					}
					else
					{
						this._LanguageCode = default(string);
					}
					this.SendPropertyChanged("C_Language");
				}
			}
		}

		[Association(Name = "FK_SiteObjectData_SiteObject", Storage = "_SiteObject", ThisKey = "SiteObjectID", OtherKey = "SiteObjectID", IsForeignKey = true, DeleteOnNull = true)]
		public SiteObject SiteObject
		{
			get
			{
				return this._SiteObject.Entity;
			}
			set
			{
				SiteObject previousValue = this._SiteObject.Entity;
				if (((previousValue != value)
							|| (this._SiteObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SiteObject.Entity = null;
						previousValue.SiteObjectData.Remove(this);
					}
					this._SiteObject.Entity = value;
					if ((value != null))
					{
						value.SiteObjectData.Add(this);
						this._SiteObjectID = value.SiteObjectID;
					}
					else
					{
						this._SiteObjectID = default(int);
					}
					this.SendPropertyChanged("SiteObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.SiteSection")]
	public partial class SiteSection : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SiteSectionID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.Nullable<int> _ParentID;

		private System.DateTime _CreateDate;

		private int _SeqNo;

		private string _SysName;

		private System.Nullable<System.DateTime> _PublishDate;

		private bool _ShowInSiteMap;

		private bool _ShowInNavigation;

		private bool _IsPublished;

		private string _SiteObjectsClasses;

		private string _ViewName;

		private string _Description;

		private string _Keywords;

		private string _PageTitle;

		private EntitySet<SiteObject> _SiteObjects;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<SiteSection> _Parent;

		private EntitySet<SiteSection> _SiteSections;

		private EntitySet<SiteSectionBind> _SiteSectionBind;

		private EntitySet<SiteSectionData> _SiteSectionData;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSiteSectionIDChanging(int value);
		partial void OnSiteSectionIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnParentIDChanging(System.Nullable<int> value);
		partial void OnParentIDChanged();
		partial void OnCreateDateChanging(System.DateTime value);
		partial void OnCreateDateChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnPublishDateChanging(System.Nullable<System.DateTime> value);
		partial void OnPublishDateChanged();
		partial void OnShowInSiteMapChanging(bool value);
		partial void OnShowInSiteMapChanged();
		partial void OnShowInNavigationChanging(bool value);
		partial void OnShowInNavigationChanged();
		partial void OnIsPublishedChanging(bool value);
		partial void OnIsPublishedChanged();
		partial void OnSiteObjectsClassesChanging(string value);
		partial void OnSiteObjectsClassesChanged();
		partial void OnViewNameChanging(string value);
		partial void OnViewNameChanged();
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		partial void OnKeywordsChanging(string value);
		partial void OnKeywordsChanged();
		partial void OnPageTitleChanging(string value);
		partial void OnPageTitleChanged();
		#endregion

		public SiteSection()
		{
			this._SiteObjects = new EntitySet<SiteObject>(new Action<SiteObject>(this.attach_SiteObjects), new Action<SiteObject>(this.detach_SiteObjects));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Parent = default(EntityRef<SiteSection>);
			this._SiteSections = new EntitySet<SiteSection>(new Action<SiteSection>(this.attach_SiteSections), new Action<SiteSection>(this.detach_SiteSections));
			this._SiteSectionBind = new EntitySet<SiteSectionBind>(new Action<SiteSectionBind>(this.attach_SiteSectionBind), new Action<SiteSectionBind>(this.detach_SiteSectionBind));
			this._SiteSectionData = new EntitySet<SiteSectionData>(new Action<SiteSectionData>(this.attach_SiteSectionData), new Action<SiteSectionData>(this.detach_SiteSectionData));
			OnCreated();
		}

		[Column(Storage = "_SiteSectionID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int SiteSectionID
		{
			get
			{
				return this._SiteSectionID;
			}
			set
			{
				if ((this._SiteSectionID != value))
				{
					this.OnSiteSectionIDChanging(value);
					this.SendPropertyChanging();
					this._SiteSectionID = value;
					this.SendPropertyChanged("SiteSectionID");
					this.OnSiteSectionIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}

		[Column(Storage = "_CreateDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(255)", UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_PublishDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}

		[Column(Storage = "_ShowInSiteMap", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool ShowInSiteMap
		{
			get
			{
				return this._ShowInSiteMap;
			}
			set
			{
				if ((this._ShowInSiteMap != value))
				{
					this.OnShowInSiteMapChanging(value);
					this.SendPropertyChanging();
					this._ShowInSiteMap = value;
					this.SendPropertyChanged("ShowInSiteMap");
					this.OnShowInSiteMapChanged();
				}
			}
		}

		[Column(Storage = "_ShowInNavigation", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool ShowInNavigation
		{
			get
			{
				return this._ShowInNavigation;
			}
			set
			{
				if ((this._ShowInNavigation != value))
				{
					this.OnShowInNavigationChanging(value);
					this.SendPropertyChanging();
					this._ShowInNavigation = value;
					this.SendPropertyChanged("ShowInNavigation");
					this.OnShowInNavigationChanged();
				}
			}
		}

		[Column(Storage = "_IsPublished", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsPublished
		{
			get
			{
				return this._IsPublished;
			}
			set
			{
				if ((this._IsPublished != value))
				{
					this.OnIsPublishedChanging(value);
					this.SendPropertyChanging();
					this._IsPublished = value;
					this.SendPropertyChanged("IsPublished");
					this.OnIsPublishedChanged();
				}
			}
		}

		[Column(Storage = "_SiteObjectsClasses", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SiteObjectsClasses
		{
			get
			{
				return this._SiteObjectsClasses;
			}
			set
			{
				if ((this._SiteObjectsClasses != value))
				{
					this.OnSiteObjectsClassesChanging(value);
					this.SendPropertyChanging();
					this._SiteObjectsClasses = value;
					this.SendPropertyChanged("SiteObjectsClasses");
					this.OnSiteObjectsClassesChanged();
				}
			}
		}

		[Column(Storage = "_ViewName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ViewName
		{
			get
			{
				return this._ViewName;
			}
			set
			{
				if ((this._ViewName != value))
				{
					this.OnViewNameChanging(value);
					this.SendPropertyChanging();
					this._ViewName = value;
					this.SendPropertyChanged("ViewName");
					this.OnViewNameChanged();
				}
			}
		}

		[Column(Storage = "_Description", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}

		[Column(Storage = "_Keywords", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				if ((this._Keywords != value))
				{
					this.OnKeywordsChanging(value);
					this.SendPropertyChanging();
					this._Keywords = value;
					this.SendPropertyChanged("Keywords");
					this.OnKeywordsChanged();
				}
			}
		}

		[Column(Storage = "_PageTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string PageTitle
		{
			get
			{
				return this._PageTitle;
			}
			set
			{
				if ((this._PageTitle != value))
				{
					this.OnPageTitleChanging(value);
					this.SendPropertyChanging();
					this._PageTitle = value;
					this.SendPropertyChanged("PageTitle");
					this.OnPageTitleChanged();
				}
			}
		}

		[Association(Name = "FK_SiteObject_Parent", Storage = "_SiteObjects", ThisKey = "SiteSectionID", OtherKey = "ParentID", DeleteRule = "NO ACTION")]
		public EntitySet<SiteObject> SiteObjects
		{
			get
			{
				return this._SiteObjects;
			}
			set
			{
				this._SiteObjects.Assign(value);
			}
		}

		[Association(Name = "FK_SiteSection_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.SiteSection.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.SiteSection.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_SiteSection_Parent", Storage = "_Parent", ThisKey = "ParentID", OtherKey = "SiteSectionID", IsForeignKey = true)]
		public SiteSection Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				SiteSection previousValue = this._Parent.Entity;
				if (((previousValue != value)
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.SiteSections.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.SiteSections.Add(this);
						this._ParentID = value.SiteSectionID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}

		[Association(Name = "FK_SiteSection_Parent", Storage = "_SiteSections", ThisKey = "SiteSectionID", OtherKey = "ParentID", DeleteRule = "NO ACTION")]
		public EntitySet<SiteSection> SiteSections
		{
			get
			{
				return this._SiteSections;
			}
			set
			{
				this._SiteSections.Assign(value);
			}
		}

		[Association(Name = "FK_SiteSectionBind_SiteSection", Storage = "_SiteSectionBind", ThisKey = "SiteSectionID", OtherKey = "SiteSectionID", DeleteRule = "CASCADE")]
		public EntitySet<SiteSectionBind> SiteSectionBind
		{
			get
			{
				return this._SiteSectionBind;
			}
			set
			{
				this._SiteSectionBind.Assign(value);
			}
		}

		[Association(Name = "FK_SiteSectionData_SiteSection", Storage = "_SiteSectionData", ThisKey = "SiteSectionID", OtherKey = "SiteSectionID", DeleteRule = "CASCADE")]
		public EntitySet<SiteSectionData> SiteSectionData
		{
			get
			{
				return this._SiteSectionData;
			}
			set
			{
				this._SiteSectionData.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_SiteObjects(SiteObject entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}

		private void detach_SiteObjects(SiteObject entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}

		private void attach_SiteSections(SiteSection entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}

		private void detach_SiteSections(SiteSection entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}

		private void attach_SiteSectionBind(SiteSectionBind entity)
		{
			this.SendPropertyChanging();
			entity.SiteSection = this;
		}

		private void detach_SiteSectionBind(SiteSectionBind entity)
		{
			this.SendPropertyChanging();
			entity.SiteSection = null;
		}

		private void attach_SiteSectionData(SiteSectionData entity)
		{
			this.SendPropertyChanging();
			entity.SiteSection = this;
		}

		private void detach_SiteSectionData(SiteSectionData entity)
		{
			this.SendPropertyChanging();
			entity.SiteSection = null;
		}
	}

	[Table(Name = "dbo.SiteSectionBind")]
	public partial class SiteSectionBind : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SiteSectionBindID;

		private string _ClassName;

		private System.Guid _ObjectGUID;

		private int _SiteSectionID;

		private EntityRef<SiteSection> _SiteSection;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSiteSectionBindIDChanging(int value);
		partial void OnSiteSectionBindIDChanged();
		partial void OnClassNameChanging(string value);
		partial void OnClassNameChanged();
		partial void OnObjectGUIDChanging(System.Guid value);
		partial void OnObjectGUIDChanged();
		partial void OnSiteSectionIDChanging(int value);
		partial void OnSiteSectionIDChanged();
		#endregion

		public SiteSectionBind()
		{
			this._SiteSection = default(EntityRef<SiteSection>);
			OnCreated();
		}

		[Column(Storage = "_SiteSectionBindID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int SiteSectionBindID
		{
			get
			{
				return this._SiteSectionBindID;
			}
			set
			{
				if ((this._SiteSectionBindID != value))
				{
					this.OnSiteSectionBindIDChanging(value);
					this.SendPropertyChanging();
					this._SiteSectionBindID = value;
					this.SendPropertyChanged("SiteSectionBindID");
					this.OnSiteSectionBindIDChanged();
				}
			}
		}

		[Column(Storage = "_ClassName", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}

		[Column(Storage = "_ObjectGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid ObjectGUID
		{
			get
			{
				return this._ObjectGUID;
			}
			set
			{
				if ((this._ObjectGUID != value))
				{
					this.OnObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectGUID = value;
					this.SendPropertyChanged("ObjectGUID");
					this.OnObjectGUIDChanged();
				}
			}
		}

		[Column(Storage = "_SiteSectionID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SiteSectionID
		{
			get
			{
				return this._SiteSectionID;
			}
			set
			{
				if ((this._SiteSectionID != value))
				{
					if (this._SiteSection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteSectionIDChanging(value);
					this.SendPropertyChanging();
					this._SiteSectionID = value;
					this.SendPropertyChanged("SiteSectionID");
					this.OnSiteSectionIDChanged();
				}
			}
		}

		[Association(Name = "FK_SiteSectionBind_SiteSection", Storage = "_SiteSection", ThisKey = "SiteSectionID", OtherKey = "SiteSectionID", IsForeignKey = true, DeleteOnNull = true)]
		public SiteSection SiteSection
		{
			get
			{
				return this._SiteSection.Entity;
			}
			set
			{
				SiteSection previousValue = this._SiteSection.Entity;
				if (((previousValue != value)
							|| (this._SiteSection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SiteSection.Entity = null;
						previousValue.SiteSectionBind.Remove(this);
					}
					this._SiteSection.Entity = value;
					if ((value != null))
					{
						value.SiteSectionBind.Add(this);
						this._SiteSectionID = value.SiteSectionID;
					}
					else
					{
						this._SiteSectionID = default(int);
					}
					this.SendPropertyChanged("SiteSection");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.SiteSectionData")]
	public partial class SiteSectionData : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SiteSectionDataID;

		private int _SiteSectionID;

		private string _LanguageCode;

		private string _Title;

		private string _FullPath;

		private EntityRef<C_Language> _C_Language;

		private EntityRef<SiteSection> _SiteSection;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSiteSectionDataIDChanging(int value);
		partial void OnSiteSectionDataIDChanged();
		partial void OnSiteSectionIDChanging(int value);
		partial void OnSiteSectionIDChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnFullPathChanging(string value);
		partial void OnFullPathChanged();
		#endregion

		public SiteSectionData()
		{
			this._C_Language = default(EntityRef<C_Language>);
			this._SiteSection = default(EntityRef<SiteSection>);
			OnCreated();
		}

		[Column(Storage = "_SiteSectionDataID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int SiteSectionDataID
		{
			get
			{
				return this._SiteSectionDataID;
			}
			set
			{
				if ((this._SiteSectionDataID != value))
				{
					this.OnSiteSectionDataIDChanging(value);
					this.SendPropertyChanging();
					this._SiteSectionDataID = value;
					this.SendPropertyChanged("SiteSectionDataID");
					this.OnSiteSectionDataIDChanged();
				}
			}
		}

		[Column(Storage = "_SiteSectionID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SiteSectionID
		{
			get
			{
				return this._SiteSectionID;
			}
			set
			{
				if ((this._SiteSectionID != value))
				{
					if (this._SiteSection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteSectionIDChanging(value);
					this.SendPropertyChanging();
					this._SiteSectionID = value;
					this.SendPropertyChanged("SiteSectionID");
					this.OnSiteSectionIDChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					if (this._C_Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(512) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_FullPath", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string FullPath
		{
			get
			{
				return this._FullPath;
			}
			set
			{
				if ((this._FullPath != value))
				{
					this.OnFullPathChanging(value);
					this.SendPropertyChanging();
					this._FullPath = value;
					this.SendPropertyChanged("FullPath");
					this.OnFullPathChanged();
				}
			}
		}

		[Association(Name = "FK_SiteSectionData_C_Language", Storage = "_C_Language", ThisKey = "LanguageCode", OtherKey = "LanguageCode", IsForeignKey = true, DeleteOnNull = true)]
		public C_Language C_Language
		{
			get
			{
				return this._C_Language.Entity;
			}
			set
			{
				C_Language previousValue = this._C_Language.Entity;
				if (((previousValue != value)
							|| (this._C_Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_Language.Entity = null;
						previousValue.SiteSectionData.Remove(this);
					}
					this._C_Language.Entity = value;
					if ((value != null))
					{
						value.SiteSectionData.Add(this);
						this._LanguageCode = value.LanguageCode;
					}
					else
					{
						this._LanguageCode = default(string);
					}
					this.SendPropertyChanged("C_Language");
				}
			}
		}

		[Association(Name = "FK_SiteSectionData_SiteSection", Storage = "_SiteSection", ThisKey = "SiteSectionID", OtherKey = "SiteSectionID", IsForeignKey = true, DeleteOnNull = true)]
		public SiteSection SiteSection
		{
			get
			{
				return this._SiteSection.Entity;
			}
			set
			{
				SiteSection previousValue = this._SiteSection.Entity;
				if (((previousValue != value)
							|| (this._SiteSection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SiteSection.Entity = null;
						previousValue.SiteSectionData.Remove(this);
					}
					this._SiteSection.Entity = value;
					if ((value != null))
					{
						value.SiteSectionData.Add(this);
						this._SiteSectionID = value.SiteSectionID;
					}
					else
					{
						this._SiteSectionID = default(int);
					}
					this.SendPropertyChanged("SiteSection");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.SpecificationCommon")]
	public partial class SpecificationCommon : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SpecificationCommonID;

		private System.Nullable<System.Guid> _OrderDocGUID;

		private System.Nullable<int> _MeasureID;

		private System.Nullable<int> _AdditionalMeasureID;

		private System.Nullable<int> _CurrencyID;

		private int _OldID;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private bool _IsDeleted;

		private EntityRef<C_Measure> _AdditionalMeasure;

		private EntityRef<C_Currency> _Currency;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<C_Measure> _Measure;

		private EntityRef<OrderDoc> _OrderDoc;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSpecificationCommonIDChanging(int value);
		partial void OnSpecificationCommonIDChanged();
		partial void OnOrderDocGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnOrderDocGUIDChanged();
		partial void OnMeasureIDChanging(System.Nullable<int> value);
		partial void OnMeasureIDChanged();
		partial void OnAdditionalMeasureIDChanging(System.Nullable<int> value);
		partial void OnAdditionalMeasureIDChanged();
		partial void OnCurrencyIDChanging(System.Nullable<int> value);
		partial void OnCurrencyIDChanged();
		partial void OnOldIDChanging(int value);
		partial void OnOldIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public SpecificationCommon()
		{
			this._AdditionalMeasure = default(EntityRef<C_Measure>);
			this._Currency = default(EntityRef<C_Currency>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Measure = default(EntityRef<C_Measure>);
			this._OrderDoc = default(EntityRef<OrderDoc>);
			OnCreated();
		}

		[Column(Storage = "_SpecificationCommonID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int SpecificationCommonID
		{
			get
			{
				return this._SpecificationCommonID;
			}
			set
			{
				if ((this._SpecificationCommonID != value))
				{
					this.OnSpecificationCommonIDChanging(value);
					this.SendPropertyChanging();
					this._SpecificationCommonID = value;
					this.SendPropertyChanged("SpecificationCommonID");
					this.OnSpecificationCommonIDChanged();
				}
			}
		}

		[Column(Storage = "_OrderDocGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}

		[Column(Storage = "_MeasureID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					if (this._Measure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}

		[Column(Storage = "_AdditionalMeasureID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> AdditionalMeasureID
		{
			get
			{
				return this._AdditionalMeasureID;
			}
			set
			{
				if ((this._AdditionalMeasureID != value))
				{
					if (this._AdditionalMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdditionalMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._AdditionalMeasureID = value;
					this.SendPropertyChanged("AdditionalMeasureID");
					this.OnAdditionalMeasureIDChanged();
				}
			}
		}

		[Column(Storage = "_CurrencyID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}

		[Column(Storage = "_OldID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_SpecificationCommon_AdditionalMeasure", Storage = "_AdditionalMeasure", ThisKey = "AdditionalMeasureID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure AdditionalMeasure
		{
			get
			{
				return this._AdditionalMeasure.Entity;
			}
			set
			{
				C_Measure previousValue = this._AdditionalMeasure.Entity;
				if (((previousValue != value)
							|| (this._AdditionalMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AdditionalMeasure.Entity = null;
						previousValue.SpecificationCommon.Remove(this);
					}
					this._AdditionalMeasure.Entity = value;
					if ((value != null))
					{
						value.SpecificationCommon.Add(this);
						this._AdditionalMeasureID = value.MeasureID;
					}
					else
					{
						this._AdditionalMeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AdditionalMeasure");
				}
			}
		}

		[Association(Name = "FK_SpecificationCommon_Currency", Storage = "_Currency", ThisKey = "CurrencyID", OtherKey = "CurrencyID", IsForeignKey = true)]
		public C_Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				C_Currency previousValue = this._Currency.Entity;
				if (((previousValue != value)
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.SpecificationCommon.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.SpecificationCommon.Add(this);
						this._CurrencyID = value.CurrencyID;
					}
					else
					{
						this._CurrencyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}

		[Association(Name = "FK_SpecificationCommon_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.SpecificationCommon.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.SpecificationCommon.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_SpecificationCommon_Measure", Storage = "_Measure", ThisKey = "MeasureID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure Measure
		{
			get
			{
				return this._Measure.Entity;
			}
			set
			{
				C_Measure previousValue = this._Measure.Entity;
				if (((previousValue != value)
							|| (this._Measure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure.Entity = null;
						previousValue.SpecificationCommon_Measure.Remove(this);
					}
					this._Measure.Entity = value;
					if ((value != null))
					{
						value.SpecificationCommon_Measure.Add(this);
						this._MeasureID = value.MeasureID;
					}
					else
					{
						this._MeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Measure");
				}
			}
		}

		[Association(Name = "FK_SpecificationCommon_OrderDoc", Storage = "_OrderDoc", ThisKey = "OrderDocGUID", OtherKey = "OrderGUID", IsForeignKey = true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value)
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.SpecificationCommon.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.SpecificationCommon.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.SpecificationItem")]
	public partial class SpecificationItem : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SpecificationItemID;

		private System.Guid _OrderDocGUID;

		private string _CommodityName;

		private System.Nullable<int> _CountryID;

		private System.Nullable<int> _MeasureID;

		private System.Nullable<decimal> _ResolvedQuantity;

		private System.Nullable<decimal> _InvoiceCost;

		private System.Nullable<decimal> _StatisticCost;

		private string _AddInfo;

		private System.Nullable<int> _AdditionalMeasureID;

		private System.Nullable<decimal> _AdditionalResolvedQuantity;

		private System.Nullable<int> _Measure3ID;

		private System.Nullable<decimal> _ResolvedQuantity3;

		private System.Nullable<int> _SeqNo;

		private System.Nullable<decimal> _Price;

		private System.Nullable<decimal> _Discount;

		private System.Nullable<int> _CurrencyID;

		private System.Nullable<decimal> _Strength;

		private System.Nullable<int> _CNID;

		private int _OldID;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private bool _IsDeleted;

		private EntityRef<C_Measure> _AdditionalMeasure;

		private EntityRef<C_CN> _CN;

		private EntityRef<C_Country> _Country;

		private EntityRef<C_Currency> _Currency;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<C_Measure> _Measure;

		private EntityRef<C_Measure> _Measure3;

		private EntityRef<OrderDoc> _OrderDoc;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSpecificationItemIDChanging(int value);
		partial void OnSpecificationItemIDChanged();
		partial void OnOrderDocGUIDChanging(System.Guid value);
		partial void OnOrderDocGUIDChanged();
		partial void OnCommodityNameChanging(string value);
		partial void OnCommodityNameChanged();
		partial void OnCountryIDChanging(System.Nullable<int> value);
		partial void OnCountryIDChanged();
		partial void OnMeasureIDChanging(System.Nullable<int> value);
		partial void OnMeasureIDChanged();
		partial void OnResolvedQuantityChanging(System.Nullable<decimal> value);
		partial void OnResolvedQuantityChanged();
		partial void OnInvoiceCostChanging(System.Nullable<decimal> value);
		partial void OnInvoiceCostChanged();
		partial void OnStatisticCostChanging(System.Nullable<decimal> value);
		partial void OnStatisticCostChanged();
		partial void OnAddInfoChanging(string value);
		partial void OnAddInfoChanged();
		partial void OnAdditionalMeasureIDChanging(System.Nullable<int> value);
		partial void OnAdditionalMeasureIDChanged();
		partial void OnAdditionalResolvedQuantityChanging(System.Nullable<decimal> value);
		partial void OnAdditionalResolvedQuantityChanged();
		partial void OnMeasure3IDChanging(System.Nullable<int> value);
		partial void OnMeasure3IDChanged();
		partial void OnResolvedQuantity3Changing(System.Nullable<decimal> value);
		partial void OnResolvedQuantity3Changed();
		partial void OnSeqNoChanging(System.Nullable<int> value);
		partial void OnSeqNoChanged();
		partial void OnPriceChanging(System.Nullable<decimal> value);
		partial void OnPriceChanged();
		partial void OnDiscountChanging(System.Nullable<decimal> value);
		partial void OnDiscountChanged();
		partial void OnCurrencyIDChanging(System.Nullable<int> value);
		partial void OnCurrencyIDChanged();
		partial void OnStrengthChanging(System.Nullable<decimal> value);
		partial void OnStrengthChanged();
		partial void OnCNIDChanging(System.Nullable<int> value);
		partial void OnCNIDChanged();
		partial void OnOldIDChanging(int value);
		partial void OnOldIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public SpecificationItem()
		{
			this._AdditionalMeasure = default(EntityRef<C_Measure>);
			this._CN = default(EntityRef<C_CN>);
			this._Country = default(EntityRef<C_Country>);
			this._Currency = default(EntityRef<C_Currency>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Measure = default(EntityRef<C_Measure>);
			this._Measure3 = default(EntityRef<C_Measure>);
			this._OrderDoc = default(EntityRef<OrderDoc>);
			OnCreated();
		}

		[Column(Storage = "_SpecificationItemID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int SpecificationItemID
		{
			get
			{
				return this._SpecificationItemID;
			}
			set
			{
				if ((this._SpecificationItemID != value))
				{
					this.OnSpecificationItemIDChanging(value);
					this.SendPropertyChanging();
					this._SpecificationItemID = value;
					this.SendPropertyChanged("SpecificationItemID");
					this.OnSpecificationItemIDChanged();
				}
			}
		}

		[Column(Storage = "_OrderDocGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}

		[Column(Storage = "_CommodityName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string CommodityName
		{
			get
			{
				return this._CommodityName;
			}
			set
			{
				if ((this._CommodityName != value))
				{
					this.OnCommodityNameChanging(value);
					this.SendPropertyChanging();
					this._CommodityName = value;
					this.SendPropertyChanged("CommodityName");
					this.OnCommodityNameChanged();
				}
			}
		}

		[Column(Storage = "_CountryID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}

		[Column(Storage = "_MeasureID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					if (this._Measure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}

		[Column(Storage = "_ResolvedQuantity", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedQuantity
		{
			get
			{
				return this._ResolvedQuantity;
			}
			set
			{
				if ((this._ResolvedQuantity != value))
				{
					this.OnResolvedQuantityChanging(value);
					this.SendPropertyChanging();
					this._ResolvedQuantity = value;
					this.SendPropertyChanged("ResolvedQuantity");
					this.OnResolvedQuantityChanged();
				}
			}
		}

		[Column(Storage = "_InvoiceCost", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> InvoiceCost
		{
			get
			{
				return this._InvoiceCost;
			}
			set
			{
				if ((this._InvoiceCost != value))
				{
					this.OnInvoiceCostChanging(value);
					this.SendPropertyChanging();
					this._InvoiceCost = value;
					this.SendPropertyChanged("InvoiceCost");
					this.OnInvoiceCostChanged();
				}
			}
		}

		[Column(Storage = "_StatisticCost", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> StatisticCost
		{
			get
			{
				return this._StatisticCost;
			}
			set
			{
				if ((this._StatisticCost != value))
				{
					this.OnStatisticCostChanging(value);
					this.SendPropertyChanging();
					this._StatisticCost = value;
					this.SendPropertyChanged("StatisticCost");
					this.OnStatisticCostChanged();
				}
			}
		}

		[Column(Storage = "_AddInfo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string AddInfo
		{
			get
			{
				return this._AddInfo;
			}
			set
			{
				if ((this._AddInfo != value))
				{
					this.OnAddInfoChanging(value);
					this.SendPropertyChanging();
					this._AddInfo = value;
					this.SendPropertyChanged("AddInfo");
					this.OnAddInfoChanged();
				}
			}
		}

		[Column(Storage = "_AdditionalMeasureID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> AdditionalMeasureID
		{
			get
			{
				return this._AdditionalMeasureID;
			}
			set
			{
				if ((this._AdditionalMeasureID != value))
				{
					if (this._AdditionalMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdditionalMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._AdditionalMeasureID = value;
					this.SendPropertyChanged("AdditionalMeasureID");
					this.OnAdditionalMeasureIDChanged();
				}
			}
		}

		[Column(Storage = "_AdditionalResolvedQuantity", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> AdditionalResolvedQuantity
		{
			get
			{
				return this._AdditionalResolvedQuantity;
			}
			set
			{
				if ((this._AdditionalResolvedQuantity != value))
				{
					this.OnAdditionalResolvedQuantityChanging(value);
					this.SendPropertyChanging();
					this._AdditionalResolvedQuantity = value;
					this.SendPropertyChanged("AdditionalResolvedQuantity");
					this.OnAdditionalResolvedQuantityChanged();
				}
			}
		}

		[Column(Storage = "_Measure3ID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> Measure3ID
		{
			get
			{
				return this._Measure3ID;
			}
			set
			{
				if ((this._Measure3ID != value))
				{
					if (this._Measure3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasure3IDChanging(value);
					this.SendPropertyChanging();
					this._Measure3ID = value;
					this.SendPropertyChanged("Measure3ID");
					this.OnMeasure3IDChanged();
				}
			}
		}

		[Column(Storage = "_ResolvedQuantity3", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedQuantity3
		{
			get
			{
				return this._ResolvedQuantity3;
			}
			set
			{
				if ((this._ResolvedQuantity3 != value))
				{
					this.OnResolvedQuantity3Changing(value);
					this.SendPropertyChanging();
					this._ResolvedQuantity3 = value;
					this.SendPropertyChanged("ResolvedQuantity3");
					this.OnResolvedQuantity3Changed();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_Price", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}

		[Column(Storage = "_Discount", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}

		[Column(Storage = "_CurrencyID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}

		[Column(Storage = "_Strength", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> Strength
		{
			get
			{
				return this._Strength;
			}
			set
			{
				if ((this._Strength != value))
				{
					this.OnStrengthChanging(value);
					this.SendPropertyChanging();
					this._Strength = value;
					this.SendPropertyChanged("Strength");
					this.OnStrengthChanged();
				}
			}
		}

		[Column(Storage = "_CNID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CNID
		{
			get
			{
				return this._CNID;
			}
			set
			{
				if ((this._CNID != value))
				{
					if (this._CN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNIDChanging(value);
					this.SendPropertyChanging();
					this._CNID = value;
					this.SendPropertyChanged("CNID");
					this.OnCNIDChanged();
				}
			}
		}

		[Column(Storage = "_OldID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_SpecificationItem_AdditionalMeasure", Storage = "_AdditionalMeasure", ThisKey = "AdditionalMeasureID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure AdditionalMeasure
		{
			get
			{
				return this._AdditionalMeasure.Entity;
			}
			set
			{
				C_Measure previousValue = this._AdditionalMeasure.Entity;
				if (((previousValue != value)
							|| (this._AdditionalMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AdditionalMeasure.Entity = null;
						previousValue.SpecificationItem.Remove(this);
					}
					this._AdditionalMeasure.Entity = value;
					if ((value != null))
					{
						value.SpecificationItem.Add(this);
						this._AdditionalMeasureID = value.MeasureID;
					}
					else
					{
						this._AdditionalMeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AdditionalMeasure");
				}
			}
		}

		[Association(Name = "FK_SpecificationItem_CN", Storage = "_CN", ThisKey = "CNID", OtherKey = "CNID", IsForeignKey = true)]
		public C_CN CN
		{
			get
			{
				return this._CN.Entity;
			}
			set
			{
				C_CN previousValue = this._CN.Entity;
				if (((previousValue != value)
							|| (this._CN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CN.Entity = null;
						previousValue.SpecificationItem.Remove(this);
					}
					this._CN.Entity = value;
					if ((value != null))
					{
						value.SpecificationItem.Add(this);
						this._CNID = value.CNID;
					}
					else
					{
						this._CNID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CN");
				}
			}
		}

		[Association(Name = "FK_SpecificationItem_Country", Storage = "_Country", ThisKey = "CountryID", OtherKey = "CountryID", IsForeignKey = true)]
		public C_Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				C_Country previousValue = this._Country.Entity;
				if (((previousValue != value)
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.SpecificationItem.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.SpecificationItem.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}

		[Association(Name = "FK_SpecificationItem_Currency", Storage = "_Currency", ThisKey = "CurrencyID", OtherKey = "CurrencyID", IsForeignKey = true)]
		public C_Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				C_Currency previousValue = this._Currency.Entity;
				if (((previousValue != value)
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.SpecificationItem.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.SpecificationItem.Add(this);
						this._CurrencyID = value.CurrencyID;
					}
					else
					{
						this._CurrencyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}

		[Association(Name = "FK_SpecificationItem_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.SpecificationItem.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.SpecificationItem.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_SpecificationItem_Measure", Storage = "_Measure", ThisKey = "MeasureID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure Measure
		{
			get
			{
				return this._Measure.Entity;
			}
			set
			{
				C_Measure previousValue = this._Measure.Entity;
				if (((previousValue != value)
							|| (this._Measure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure.Entity = null;
						previousValue.SpecificationItem_Measure.Remove(this);
					}
					this._Measure.Entity = value;
					if ((value != null))
					{
						value.SpecificationItem_Measure.Add(this);
						this._MeasureID = value.MeasureID;
					}
					else
					{
						this._MeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Measure");
				}
			}
		}

		[Association(Name = "FK_SpecificationItem_Measure3", Storage = "_Measure3", ThisKey = "Measure3ID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure Measure3
		{
			get
			{
				return this._Measure3.Entity;
			}
			set
			{
				C_Measure previousValue = this._Measure3.Entity;
				if (((previousValue != value)
							|| (this._Measure3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure3.Entity = null;
						previousValue.SpecificationItem_Measure3.Remove(this);
					}
					this._Measure3.Entity = value;
					if ((value != null))
					{
						value.SpecificationItem_Measure3.Add(this);
						this._Measure3ID = value.MeasureID;
					}
					else
					{
						this._Measure3ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Measure3");
				}
			}
		}

		[Association(Name = "FK_SpecificationItem_OrderDoc", Storage = "_OrderDoc", ThisKey = "OrderDocGUID", OtherKey = "OrderGUID", IsForeignKey = true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value)
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.SpecificationItem.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.SpecificationItem.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.SPM_Action")]
	public partial class SPM_Action : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ActionID;

		private string _Title;

		private int _Type;

		private string _SystemName;

		private System.Nullable<int> _CategoryID;

		private System.Nullable<System.Guid> _ItemGUID;

		private int _ActionTypeID;

		private System.Nullable<System.Guid> _ClassGUID;

		private System.Nullable<System.Guid> _PredicateGUID;

		private System.Nullable<int> _PackageID;

		private System.Nullable<System.Guid> _SubCategoryGUID;

		private EntitySet<N_MenuItem> _N_MenuItem;

		private EntityRef<MM_Package> _Package;

		private EntityRef<MM_Predicate> _Predicate;

		private EntitySet<SPM_ActionAsso> _SPM_ActionAsso;

		private EntitySet<SPM_ActionAsso> _Action;

		private EntitySet<SPM_RoleAccess> _SPM_RoleAccess;

		private EntitySet<SPM_SubjectAccess> _SPM_SubjectAccess;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnActionIDChanging(int value);
		partial void OnActionIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnTypeChanging(int value);
		partial void OnTypeChanged();
		partial void OnSystemNameChanging(string value);
		partial void OnSystemNameChanged();
		partial void OnCategoryIDChanging(System.Nullable<int> value);
		partial void OnCategoryIDChanged();
		partial void OnItemGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnItemGUIDChanged();
		partial void OnActionTypeIDChanging(int value);
		partial void OnActionTypeIDChanged();
		partial void OnClassGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnClassGUIDChanged();
		partial void OnPredicateGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnPredicateGUIDChanged();
		partial void OnPackageIDChanging(System.Nullable<int> value);
		partial void OnPackageIDChanged();
		partial void OnSubCategoryGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnSubCategoryGUIDChanged();
		#endregion

		public SPM_Action()
		{
			this._N_MenuItem = new EntitySet<N_MenuItem>(new Action<N_MenuItem>(this.attach_N_MenuItem), new Action<N_MenuItem>(this.detach_N_MenuItem));
			this._Package = default(EntityRef<MM_Package>);
			this._Predicate = default(EntityRef<MM_Predicate>);
			this._SPM_ActionAsso = new EntitySet<SPM_ActionAsso>(new Action<SPM_ActionAsso>(this.attach_SPM_ActionAsso), new Action<SPM_ActionAsso>(this.detach_SPM_ActionAsso));
			this._Action = new EntitySet<SPM_ActionAsso>(new Action<SPM_ActionAsso>(this.attach_Action), new Action<SPM_ActionAsso>(this.detach_Action));
			this._SPM_RoleAccess = new EntitySet<SPM_RoleAccess>(new Action<SPM_RoleAccess>(this.attach_SPM_RoleAccess), new Action<SPM_RoleAccess>(this.detach_SPM_RoleAccess));
			this._SPM_SubjectAccess = new EntitySet<SPM_SubjectAccess>(new Action<SPM_SubjectAccess>(this.attach_SPM_SubjectAccess), new Action<SPM_SubjectAccess>(this.detach_SPM_SubjectAccess));
			OnCreated();
		}

		[Column(Storage = "_ActionID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Type", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}

		[Column(Storage = "_SystemName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SystemName
		{
			get
			{
				return this._SystemName;
			}
			set
			{
				if ((this._SystemName != value))
				{
					this.OnSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SystemName = value;
					this.SendPropertyChanged("SystemName");
					this.OnSystemNameChanged();
				}
			}
		}

		[Column(Storage = "_CategoryID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}

		[Column(Storage = "_ItemGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> ItemGUID
		{
			get
			{
				return this._ItemGUID;
			}
			set
			{
				if ((this._ItemGUID != value))
				{
					this.OnItemGUIDChanging(value);
					this.SendPropertyChanging();
					this._ItemGUID = value;
					this.SendPropertyChanged("ItemGUID");
					this.OnItemGUIDChanged();
				}
			}
		}

		[Column(Storage = "_ActionTypeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ActionTypeID
		{
			get
			{
				return this._ActionTypeID;
			}
			set
			{
				if ((this._ActionTypeID != value))
				{
					this.OnActionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ActionTypeID = value;
					this.SendPropertyChanged("ActionTypeID");
					this.OnActionTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_ClassGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> ClassGUID
		{
			get
			{
				return this._ClassGUID;
			}
			set
			{
				if ((this._ClassGUID != value))
				{
					this.OnClassGUIDChanging(value);
					this.SendPropertyChanging();
					this._ClassGUID = value;
					this.SendPropertyChanged("ClassGUID");
					this.OnClassGUIDChanged();
				}
			}
		}

		[Column(Storage = "_PredicateGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> PredicateGUID
		{
			get
			{
				return this._PredicateGUID;
			}
			set
			{
				if ((this._PredicateGUID != value))
				{
					if (this._Predicate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPredicateGUIDChanging(value);
					this.SendPropertyChanging();
					this._PredicateGUID = value;
					this.SendPropertyChanged("PredicateGUID");
					this.OnPredicateGUIDChanged();
				}
			}
		}

		[Column(Storage = "_PackageID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}

		[Column(Storage = "_SubCategoryGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> SubCategoryGUID
		{
			get
			{
				return this._SubCategoryGUID;
			}
			set
			{
				if ((this._SubCategoryGUID != value))
				{
					this.OnSubCategoryGUIDChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryGUID = value;
					this.SendPropertyChanged("SubCategoryGUID");
					this.OnSubCategoryGUIDChanged();
				}
			}
		}

		[Association(Name = "FK_MenuItem_SPM_Action", Storage = "_N_MenuItem", ThisKey = "ActionID", OtherKey = "ActionID", DeleteRule = "NO ACTION")]
		public EntitySet<N_MenuItem> N_MenuItem
		{
			get
			{
				return this._N_MenuItem;
			}
			set
			{
				this._N_MenuItem.Assign(value);
			}
		}

		[Association(Name = "FK_SPM_Action_Package", Storage = "_Package", ThisKey = "PackageID", OtherKey = "PackageID", IsForeignKey = true)]
		public MM_Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				MM_Package previousValue = this._Package.Entity;
				if (((previousValue != value)
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.SPM_Action.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.SPM_Action.Add(this);
						this._PackageID = value.PackageID;
					}
					else
					{
						this._PackageID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}

		[Association(Name = "FK_SPM_Action_Predicate", Storage = "_Predicate", ThisKey = "PredicateGUID", OtherKey = "PredicateGUID", IsForeignKey = true)]
		public MM_Predicate Predicate
		{
			get
			{
				return this._Predicate.Entity;
			}
			set
			{
				MM_Predicate previousValue = this._Predicate.Entity;
				if (((previousValue != value)
							|| (this._Predicate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Predicate.Entity = null;
						previousValue.SPM_Action.Remove(this);
					}
					this._Predicate.Entity = value;
					if ((value != null))
					{
						value.SPM_Action.Add(this);
						this._PredicateGUID = value.PredicateGUID;
					}
					else
					{
						this._PredicateGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Predicate");
				}
			}
		}

		[Association(Name = "FK_SPM_ActionAsso_Action", Storage = "_SPM_ActionAsso", ThisKey = "ActionID", OtherKey = "ActionID", DeleteRule = "CASCADE")]
		public EntitySet<SPM_ActionAsso> SPM_ActionAsso
		{
			get
			{
				return this._SPM_ActionAsso;
			}
			set
			{
				this._SPM_ActionAsso.Assign(value);
			}
		}

		[Association(Name = "FK_SPM_ActionAsso_ParentAction", Storage = "_Action", ThisKey = "ActionID", OtherKey = "ParentActionID", DeleteRule = "NO ACTION")]
		public EntitySet<SPM_ActionAsso> Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				this._Action.Assign(value);
			}
		}

		[Association(Name = "FK_SPM_RoleAccess_Action", Storage = "_SPM_RoleAccess", ThisKey = "ActionID", OtherKey = "ActionID", DeleteRule = "CASCADE")]
		public EntitySet<SPM_RoleAccess> SPM_RoleAccess
		{
			get
			{
				return this._SPM_RoleAccess;
			}
			set
			{
				this._SPM_RoleAccess.Assign(value);
			}
		}

		[Association(Name = "FK_SPM_SubjectAccess_SPM_Action", Storage = "_SPM_SubjectAccess", ThisKey = "ActionID", OtherKey = "ActionID", DeleteRule = "NO ACTION")]
		public EntitySet<SPM_SubjectAccess> SPM_SubjectAccess
		{
			get
			{
				return this._SPM_SubjectAccess;
			}
			set
			{
				this._SPM_SubjectAccess.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_N_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.FK_MenuItem_SPM_Action = this;
		}

		private void detach_N_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.FK_MenuItem_SPM_Action = null;
		}

		private void attach_SPM_ActionAsso(SPM_ActionAsso entity)
		{
			this.SendPropertyChanging();
			entity.Action = this;
		}

		private void detach_SPM_ActionAsso(SPM_ActionAsso entity)
		{
			this.SendPropertyChanging();
			entity.Action = null;
		}

		private void attach_Action(SPM_ActionAsso entity)
		{
			this.SendPropertyChanging();
			entity.ParentAction = this;
		}

		private void detach_Action(SPM_ActionAsso entity)
		{
			this.SendPropertyChanging();
			entity.ParentAction = null;
		}

		private void attach_SPM_RoleAccess(SPM_RoleAccess entity)
		{
			this.SendPropertyChanging();
			entity.Action = this;
		}

		private void detach_SPM_RoleAccess(SPM_RoleAccess entity)
		{
			this.SendPropertyChanging();
			entity.Action = null;
		}

		private void attach_SPM_SubjectAccess(SPM_SubjectAccess entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Action = this;
		}

		private void detach_SPM_SubjectAccess(SPM_SubjectAccess entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Action = null;
		}
	}

	[Table(Name = "dbo.SPM_ActionAsso")]
	public partial class SPM_ActionAsso : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ActionID;

		private int _ParentActionID;

		private EntityRef<SPM_Action> _Action;

		private EntityRef<SPM_Action> _ParentAction;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnActionIDChanging(int value);
		partial void OnActionIDChanged();
		partial void OnParentActionIDChanging(int value);
		partial void OnParentActionIDChanged();
		#endregion

		public SPM_ActionAsso()
		{
			this._Action = default(EntityRef<SPM_Action>);
			this._ParentAction = default(EntityRef<SPM_Action>);
			OnCreated();
		}

		[Column(Storage = "_ActionID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					if (this._Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}

		[Column(Storage = "_ParentActionID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int ParentActionID
		{
			get
			{
				return this._ParentActionID;
			}
			set
			{
				if ((this._ParentActionID != value))
				{
					if (this._ParentAction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentActionIDChanging(value);
					this.SendPropertyChanging();
					this._ParentActionID = value;
					this.SendPropertyChanged("ParentActionID");
					this.OnParentActionIDChanged();
				}
			}
		}

		[Association(Name = "FK_SPM_ActionAsso_Action", Storage = "_Action", ThisKey = "ActionID", OtherKey = "ActionID", IsForeignKey = true, DeleteOnNull = true)]
		public SPM_Action Action
		{
			get
			{
				return this._Action.Entity;
			}
			set
			{
				SPM_Action previousValue = this._Action.Entity;
				if (((previousValue != value)
							|| (this._Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Action.Entity = null;
						previousValue.SPM_ActionAsso.Remove(this);
					}
					this._Action.Entity = value;
					if ((value != null))
					{
						value.SPM_ActionAsso.Add(this);
						this._ActionID = value.ActionID;
					}
					else
					{
						this._ActionID = default(int);
					}
					this.SendPropertyChanged("Action");
				}
			}
		}

		[Association(Name = "FK_SPM_ActionAsso_ParentAction", Storage = "_ParentAction", ThisKey = "ParentActionID", OtherKey = "ActionID", IsForeignKey = true)]
		public SPM_Action ParentAction
		{
			get
			{
				return this._ParentAction.Entity;
			}
			set
			{
				SPM_Action previousValue = this._ParentAction.Entity;
				if (((previousValue != value)
							|| (this._ParentAction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentAction.Entity = null;
						previousValue.Action.Remove(this);
					}
					this._ParentAction.Entity = value;
					if ((value != null))
					{
						value.Action.Add(this);
						this._ParentActionID = value.ActionID;
					}
					else
					{
						this._ParentActionID = default(int);
					}
					this.SendPropertyChanged("ParentAction");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.SPM_ActionRoleAccess")]
	public partial class SPM_ActionRoleAccess
	{

		private System.Nullable<System.Guid> _SecurableObjectGUID;

		private int _ActionTypeID;

		private int _RoleID;

		public SPM_ActionRoleAccess()
		{
		}

		[Column(Storage = "_SecurableObjectGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> SecurableObjectGUID
		{
			get
			{
				return this._SecurableObjectGUID;
			}
			set
			{
				if ((this._SecurableObjectGUID != value))
				{
					this._SecurableObjectGUID = value;
				}
			}
		}

		[Column(Storage = "_ActionTypeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ActionTypeID
		{
			get
			{
				return this._ActionTypeID;
			}
			set
			{
				if ((this._ActionTypeID != value))
				{
					this._ActionTypeID = value;
				}
			}
		}

		[Column(Storage = "_RoleID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
	}

	[Table(Name = "dbo.SPM_AvailableRoleForGrant")]
	public partial class SPM_AvailableRoleForGrant : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _RoleID;

		private int _RoleForGrantID;

		private EntityRef<SPM_Role> _Role;

		private EntityRef<SPM_Role> _RoleForGrant;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnRoleIDChanging(int value);
		partial void OnRoleIDChanged();
		partial void OnRoleForGrantIDChanging(int value);
		partial void OnRoleForGrantIDChanged();
		#endregion

		public SPM_AvailableRoleForGrant()
		{
			this._Role = default(EntityRef<SPM_Role>);
			this._RoleForGrant = default(EntityRef<SPM_Role>);
			OnCreated();
		}

		[Column(Storage = "_RoleID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}

		[Column(Storage = "_RoleForGrantID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int RoleForGrantID
		{
			get
			{
				return this._RoleForGrantID;
			}
			set
			{
				if ((this._RoleForGrantID != value))
				{
					if (this._RoleForGrant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleForGrantIDChanging(value);
					this.SendPropertyChanging();
					this._RoleForGrantID = value;
					this.SendPropertyChanged("RoleForGrantID");
					this.OnRoleForGrantIDChanged();
				}
			}
		}

		[Association(Name = "FK_SPM_AvailableRoleForGrant_Role", Storage = "_Role", ThisKey = "RoleID", OtherKey = "RoleID", IsForeignKey = true)]
		public SPM_Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				SPM_Role previousValue = this._Role.Entity;
				if (((previousValue != value)
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.SPM_AvailableRoleForGrant.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.SPM_AvailableRoleForGrant.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}

		[Association(Name = "FK_SPM_AvailableRoleForGrant_RoleForGrant", Storage = "_RoleForGrant", ThisKey = "RoleForGrantID", OtherKey = "RoleID", IsForeignKey = true)]
		public SPM_Role RoleForGrant
		{
			get
			{
				return this._RoleForGrant.Entity;
			}
			set
			{
				SPM_Role previousValue = this._RoleForGrant.Entity;
				if (((previousValue != value)
							|| (this._RoleForGrant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleForGrant.Entity = null;
						previousValue.Role.Remove(this);
					}
					this._RoleForGrant.Entity = value;
					if ((value != null))
					{
						value.Role.Add(this);
						this._RoleForGrantID = value.RoleID;
					}
					else
					{
						this._RoleForGrantID = default(int);
					}
					this.SendPropertyChanged("RoleForGrant");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.SPM_C_RoleType")]
	public partial class SPM_C_RoleType : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _RoleTypeID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private string _SysName;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntitySet<SPM_Role> _SPM_Role;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnRoleTypeIDChanging(int value);
		partial void OnRoleTypeIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		#endregion

		public SPM_C_RoleType()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._SPM_Role = new EntitySet<SPM_Role>(new Action<SPM_Role>(this.attach_SPM_Role), new Action<SPM_Role>(this.detach_SPM_Role));
			OnCreated();
		}

		[Column(Storage = "_RoleTypeID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int RoleTypeID
		{
			get
			{
				return this._RoleTypeID;
			}
			set
			{
				if ((this._RoleTypeID != value))
				{
					this.OnRoleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RoleTypeID = value;
					this.SendPropertyChanged("RoleTypeID");
					this.OnRoleTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Association(Name = "FK_SPM_C_RoleType_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.SPM_C_RoleType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.SPM_C_RoleType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_SPM_Role_RoleType", Storage = "_SPM_Role", ThisKey = "RoleTypeID", OtherKey = "RoleTypeID", DeleteRule = "NO ACTION")]
		public EntitySet<SPM_Role> SPM_Role
		{
			get
			{
				return this._SPM_Role;
			}
			set
			{
				this._SPM_Role.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_SPM_Role(SPM_Role entity)
		{
			this.SendPropertyChanging();
			entity.RoleType = this;
		}

		private void detach_SPM_Role(SPM_Role entity)
		{
			this.SendPropertyChanging();
			entity.RoleType = null;
		}
	}

	[Table(Name = "dbo.SPM_CasheFlag")]
	public partial class SPM_CasheFlag
	{

		private bool _IsChange;

		public SPM_CasheFlag()
		{
		}

		[Column(Storage = "_IsChange", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsChange
		{
			get
			{
				return this._IsChange;
			}
			set
			{
				if ((this._IsChange != value))
				{
					this._IsChange = value;
				}
			}
		}
	}

	[Table(Name = "dbo.SPM_Role")]
	public partial class SPM_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _RoleID;

		private string _Title;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _SysName;

		private System.Nullable<int> _RoleGroupID;

		private int _SeqNo;

		private string _Description;

		private int _RoleTypeID;

		private string _SID;

		private int _RoleForGrantCondition;

		private EntitySet<SPM_AvailableRoleForGrant> _SPM_AvailableRoleForGrant;

		private EntitySet<SPM_AvailableRoleForGrant> _Role;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<SPM_RoleGroup> _RoleGroup;

		private EntityRef<SPM_C_RoleType> _RoleType;

		private EntitySet<SPM_RoleAccess> _SPM_RoleAccess;

		private EntitySet<SPM_RoleAsso> _SPM_RoleAsso;

		private EntitySet<SPM_RoleAsso> _SPM_RoleAsso_Role;

		private EntitySet<SPM_SubjectRole> _SPM_SubjectRole;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnRoleIDChanging(int value);
		partial void OnRoleIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnRoleGroupIDChanging(System.Nullable<int> value);
		partial void OnRoleGroupIDChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		partial void OnRoleTypeIDChanging(int value);
		partial void OnRoleTypeIDChanged();
		partial void OnSIDChanging(string value);
		partial void OnSIDChanged();
		partial void OnRoleForGrantConditionChanging(int value);
		partial void OnRoleForGrantConditionChanged();
		#endregion

		public SPM_Role()
		{
			this._SPM_AvailableRoleForGrant = new EntitySet<SPM_AvailableRoleForGrant>(new Action<SPM_AvailableRoleForGrant>(this.attach_SPM_AvailableRoleForGrant), new Action<SPM_AvailableRoleForGrant>(this.detach_SPM_AvailableRoleForGrant));
			this._Role = new EntitySet<SPM_AvailableRoleForGrant>(new Action<SPM_AvailableRoleForGrant>(this.attach_Role), new Action<SPM_AvailableRoleForGrant>(this.detach_Role));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._RoleGroup = default(EntityRef<SPM_RoleGroup>);
			this._RoleType = default(EntityRef<SPM_C_RoleType>);
			this._SPM_RoleAccess = new EntitySet<SPM_RoleAccess>(new Action<SPM_RoleAccess>(this.attach_SPM_RoleAccess), new Action<SPM_RoleAccess>(this.detach_SPM_RoleAccess));
			this._SPM_RoleAsso = new EntitySet<SPM_RoleAsso>(new Action<SPM_RoleAsso>(this.attach_SPM_RoleAsso), new Action<SPM_RoleAsso>(this.detach_SPM_RoleAsso));
			this._SPM_RoleAsso_Role = new EntitySet<SPM_RoleAsso>(new Action<SPM_RoleAsso>(this.attach_SPM_RoleAsso_Role), new Action<SPM_RoleAsso>(this.detach_SPM_RoleAsso_Role));
			this._SPM_SubjectRole = new EntitySet<SPM_SubjectRole>(new Action<SPM_SubjectRole>(this.attach_SPM_SubjectRole), new Action<SPM_SubjectRole>(this.detach_SPM_SubjectRole));
			OnCreated();
		}

		[Column(Storage = "_RoleID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_RoleGroupID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> RoleGroupID
		{
			get
			{
				return this._RoleGroupID;
			}
			set
			{
				if ((this._RoleGroupID != value))
				{
					if (this._RoleGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleGroupIDChanging(value);
					this.SendPropertyChanging();
					this._RoleGroupID = value;
					this.SendPropertyChanged("RoleGroupID");
					this.OnRoleGroupIDChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_Description", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}

		[Column(Storage = "_RoleTypeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int RoleTypeID
		{
			get
			{
				return this._RoleTypeID;
			}
			set
			{
				if ((this._RoleTypeID != value))
				{
					if (this._RoleType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RoleTypeID = value;
					this.SendPropertyChanged("RoleTypeID");
					this.OnRoleTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_SID", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SID
		{
			get
			{
				return this._SID;
			}
			set
			{
				if ((this._SID != value))
				{
					this.OnSIDChanging(value);
					this.SendPropertyChanging();
					this._SID = value;
					this.SendPropertyChanged("SID");
					this.OnSIDChanged();
				}
			}
		}

		[Column(Storage = "_RoleForGrantCondition", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int RoleForGrantCondition
		{
			get
			{
				return this._RoleForGrantCondition;
			}
			set
			{
				if ((this._RoleForGrantCondition != value))
				{
					this.OnRoleForGrantConditionChanging(value);
					this.SendPropertyChanging();
					this._RoleForGrantCondition = value;
					this.SendPropertyChanged("RoleForGrantCondition");
					this.OnRoleForGrantConditionChanged();
				}
			}
		}

		[Association(Name = "FK_SPM_AvailableRoleForGrant_Role", Storage = "_SPM_AvailableRoleForGrant", ThisKey = "RoleID", OtherKey = "RoleID", DeleteRule = "NO ACTION")]
		public EntitySet<SPM_AvailableRoleForGrant> SPM_AvailableRoleForGrant
		{
			get
			{
				return this._SPM_AvailableRoleForGrant;
			}
			set
			{
				this._SPM_AvailableRoleForGrant.Assign(value);
			}
		}

		[Association(Name = "FK_SPM_AvailableRoleForGrant_RoleForGrant", Storage = "_Role", ThisKey = "RoleID", OtherKey = "RoleForGrantID", DeleteRule = "NO ACTION")]
		public EntitySet<SPM_AvailableRoleForGrant> Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				this._Role.Assign(value);
			}
		}

		[Association(Name = "FK_SPM_Role_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.SPM_Role.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.SPM_Role.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_SPM_Role_RoleGroup", Storage = "_RoleGroup", ThisKey = "RoleGroupID", OtherKey = "RoleGroupID", IsForeignKey = true)]
		public SPM_RoleGroup RoleGroup
		{
			get
			{
				return this._RoleGroup.Entity;
			}
			set
			{
				SPM_RoleGroup previousValue = this._RoleGroup.Entity;
				if (((previousValue != value)
							|| (this._RoleGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleGroup.Entity = null;
						previousValue.Roles.Remove(this);
					}
					this._RoleGroup.Entity = value;
					if ((value != null))
					{
						value.Roles.Add(this);
						this._RoleGroupID = value.RoleGroupID;
					}
					else
					{
						this._RoleGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RoleGroup");
				}
			}
		}

		[Association(Name = "FK_SPM_Role_RoleType", Storage = "_RoleType", ThisKey = "RoleTypeID", OtherKey = "RoleTypeID", IsForeignKey = true)]
		public SPM_C_RoleType RoleType
		{
			get
			{
				return this._RoleType.Entity;
			}
			set
			{
				SPM_C_RoleType previousValue = this._RoleType.Entity;
				if (((previousValue != value)
							|| (this._RoleType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleType.Entity = null;
						previousValue.SPM_Role.Remove(this);
					}
					this._RoleType.Entity = value;
					if ((value != null))
					{
						value.SPM_Role.Add(this);
						this._RoleTypeID = value.RoleTypeID;
					}
					else
					{
						this._RoleTypeID = default(int);
					}
					this.SendPropertyChanged("RoleType");
				}
			}
		}

		[Association(Name = "FK_SPM_RoleAccess_Role", Storage = "_SPM_RoleAccess", ThisKey = "RoleID", OtherKey = "RoleID", DeleteRule = "CASCADE")]
		public EntitySet<SPM_RoleAccess> SPM_RoleAccess
		{
			get
			{
				return this._SPM_RoleAccess;
			}
			set
			{
				this._SPM_RoleAccess.Assign(value);
			}
		}

		[Association(Name = "FK_SPM_RoleAsso_ParentRole", Storage = "_SPM_RoleAsso", ThisKey = "RoleID", OtherKey = "ParentRoleID", DeleteRule = "NO ACTION")]
		public EntitySet<SPM_RoleAsso> SPM_RoleAsso
		{
			get
			{
				return this._SPM_RoleAsso;
			}
			set
			{
				this._SPM_RoleAsso.Assign(value);
			}
		}

		[Association(Name = "FK_SPM_RoleAsso_Role", Storage = "_SPM_RoleAsso_Role", ThisKey = "RoleID", OtherKey = "RoleID", DeleteRule = "NO ACTION")]
		public EntitySet<SPM_RoleAsso> SPM_RoleAsso_Role
		{
			get
			{
				return this._SPM_RoleAsso_Role;
			}
			set
			{
				this._SPM_RoleAsso_Role.Assign(value);
			}
		}

		[Association(Name = "FK_SPM_SubjectRole_Role", Storage = "_SPM_SubjectRole", ThisKey = "RoleID", OtherKey = "RoleID", DeleteRule = "NO ACTION")]
		public EntitySet<SPM_SubjectRole> SPM_SubjectRole
		{
			get
			{
				return this._SPM_SubjectRole;
			}
			set
			{
				this._SPM_SubjectRole.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_SPM_AvailableRoleForGrant(SPM_AvailableRoleForGrant entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}

		private void detach_SPM_AvailableRoleForGrant(SPM_AvailableRoleForGrant entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}

		private void attach_Role(SPM_AvailableRoleForGrant entity)
		{
			this.SendPropertyChanging();
			entity.RoleForGrant = this;
		}

		private void detach_Role(SPM_AvailableRoleForGrant entity)
		{
			this.SendPropertyChanging();
			entity.RoleForGrant = null;
		}

		private void attach_SPM_RoleAccess(SPM_RoleAccess entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}

		private void detach_SPM_RoleAccess(SPM_RoleAccess entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}

		private void attach_SPM_RoleAsso(SPM_RoleAsso entity)
		{
			this.SendPropertyChanging();
			entity.ParentRole = this;
		}

		private void detach_SPM_RoleAsso(SPM_RoleAsso entity)
		{
			this.SendPropertyChanging();
			entity.ParentRole = null;
		}

		private void attach_SPM_RoleAsso_Role(SPM_RoleAsso entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}

		private void detach_SPM_RoleAsso_Role(SPM_RoleAsso entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}

		private void attach_SPM_SubjectRole(SPM_SubjectRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}

		private void detach_SPM_SubjectRole(SPM_SubjectRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}

	[Table(Name = "dbo.SPM_RoleAccess")]
	public partial class SPM_RoleAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ActionID;

		private int _RoleID;

		private EntityRef<SPM_Action> _Action;

		private EntityRef<SPM_Role> _Role;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnActionIDChanging(int value);
		partial void OnActionIDChanged();
		partial void OnRoleIDChanging(int value);
		partial void OnRoleIDChanged();
		#endregion

		public SPM_RoleAccess()
		{
			this._Action = default(EntityRef<SPM_Action>);
			this._Role = default(EntityRef<SPM_Role>);
			OnCreated();
		}

		[Column(Storage = "_ActionID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					if (this._Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}

		[Column(Storage = "_RoleID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}

		[Association(Name = "FK_SPM_RoleAccess_Action", Storage = "_Action", ThisKey = "ActionID", OtherKey = "ActionID", IsForeignKey = true, DeleteOnNull = true)]
		public SPM_Action Action
		{
			get
			{
				return this._Action.Entity;
			}
			set
			{
				SPM_Action previousValue = this._Action.Entity;
				if (((previousValue != value)
							|| (this._Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Action.Entity = null;
						previousValue.SPM_RoleAccess.Remove(this);
					}
					this._Action.Entity = value;
					if ((value != null))
					{
						value.SPM_RoleAccess.Add(this);
						this._ActionID = value.ActionID;
					}
					else
					{
						this._ActionID = default(int);
					}
					this.SendPropertyChanged("Action");
				}
			}
		}

		[Association(Name = "FK_SPM_RoleAccess_Role", Storage = "_Role", ThisKey = "RoleID", OtherKey = "RoleID", IsForeignKey = true, DeleteOnNull = true)]
		public SPM_Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				SPM_Role previousValue = this._Role.Entity;
				if (((previousValue != value)
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.SPM_RoleAccess.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.SPM_RoleAccess.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.SPM_RoleAsso")]
	public partial class SPM_RoleAsso : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _RoleID;

		private int _ParentRoleID;

		private EntityRef<SPM_Role> _ParentRole;

		private EntityRef<SPM_Role> _Role;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnRoleIDChanging(int value);
		partial void OnRoleIDChanged();
		partial void OnParentRoleIDChanging(int value);
		partial void OnParentRoleIDChanged();
		#endregion

		public SPM_RoleAsso()
		{
			this._ParentRole = default(EntityRef<SPM_Role>);
			this._Role = default(EntityRef<SPM_Role>);
			OnCreated();
		}

		[Column(Storage = "_RoleID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}

		[Column(Storage = "_ParentRoleID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int ParentRoleID
		{
			get
			{
				return this._ParentRoleID;
			}
			set
			{
				if ((this._ParentRoleID != value))
				{
					if (this._ParentRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentRoleIDChanging(value);
					this.SendPropertyChanging();
					this._ParentRoleID = value;
					this.SendPropertyChanged("ParentRoleID");
					this.OnParentRoleIDChanged();
				}
			}
		}

		[Association(Name = "FK_SPM_RoleAsso_ParentRole", Storage = "_ParentRole", ThisKey = "ParentRoleID", OtherKey = "RoleID", IsForeignKey = true)]
		public SPM_Role ParentRole
		{
			get
			{
				return this._ParentRole.Entity;
			}
			set
			{
				SPM_Role previousValue = this._ParentRole.Entity;
				if (((previousValue != value)
							|| (this._ParentRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentRole.Entity = null;
						previousValue.SPM_RoleAsso.Remove(this);
					}
					this._ParentRole.Entity = value;
					if ((value != null))
					{
						value.SPM_RoleAsso.Add(this);
						this._ParentRoleID = value.RoleID;
					}
					else
					{
						this._ParentRoleID = default(int);
					}
					this.SendPropertyChanged("ParentRole");
				}
			}
		}

		[Association(Name = "FK_SPM_RoleAsso_Role", Storage = "_Role", ThisKey = "RoleID", OtherKey = "RoleID", IsForeignKey = true)]
		public SPM_Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				SPM_Role previousValue = this._Role.Entity;
				if (((previousValue != value)
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.SPM_RoleAsso_Role.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.SPM_RoleAsso_Role.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.SPM_RoleGroup")]
	public partial class SPM_RoleGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _RoleGroupID;

		private string _Title;

		private int _SeqNo;

		private EntitySet<SPM_Role> _Roles;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnRoleGroupIDChanging(int value);
		partial void OnRoleGroupIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		#endregion

		public SPM_RoleGroup()
		{
			this._Roles = new EntitySet<SPM_Role>(new Action<SPM_Role>(this.attach_Roles), new Action<SPM_Role>(this.detach_Roles));
			OnCreated();
		}

		[Column(Storage = "_RoleGroupID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int RoleGroupID
		{
			get
			{
				return this._RoleGroupID;
			}
			set
			{
				if ((this._RoleGroupID != value))
				{
					this.OnRoleGroupIDChanging(value);
					this.SendPropertyChanging();
					this._RoleGroupID = value;
					this.SendPropertyChanged("RoleGroupID");
					this.OnRoleGroupIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(200) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Association(Name = "FK_SPM_Role_RoleGroup", Storage = "_Roles", ThisKey = "RoleGroupID", OtherKey = "RoleGroupID", DeleteRule = "NO ACTION")]
		public EntitySet<SPM_Role> Roles
		{
			get
			{
				return this._Roles;
			}
			set
			{
				this._Roles.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_Roles(SPM_Role entity)
		{
			this.SendPropertyChanging();
			entity.RoleGroup = this;
		}

		private void detach_Roles(SPM_Role entity)
		{
			this.SendPropertyChanging();
			entity.RoleGroup = null;
		}
	}

	[Table(Name = "dbo.SPM_Subject")]
	public partial class SPM_Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SubjectID;

		private string _SID;

		private string _SystemName;

		private string _Title;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.Data.Linq.Binary _PasswordHash;

		private string _RegMagicString;

		private System.Nullable<System.DateTime> _RegDate;

		private bool _IsActive;

		private string _EMail;

		private bool _MustChangePassword;

		private System.Nullable<System.DateTime> _PasswordExpDate;

		private EntitySet<Appendix> _Appendix;

		private EntitySet<AppendixQuantity> _AppendixQuantity;

		private EntitySet<Blank> _Blank;

		private EntitySet<BlankTransition> _BlankTransition;

		private EntitySet<C_AnnulmentReason> _C_AnnulmentReason;

		private EntitySet<C_CatalogRestriction> _C_CatalogRestriction;

		private EntitySet<C_CN> _C_CN;

		private EntitySet<C_CNCategory> _C_CNCategory;

		private EntitySet<C_CNCategoryDocument> _C_CNCategoryDocument;

		private EntitySet<C_CNCategoryFGADocument> _C_CNCategoryFGADocument;

		private EntitySet<C_CNCategoryItem> _C_CNCategoryItem;

		private EntitySet<C_CNGroup> _C_CNGroup;

		private EntitySet<C_CNType> _C_CNType;

		private EntitySet<C_Country> _C_Country;

		private EntitySet<C_CountryGroup> _C_CountryGroup;

		private EntitySet<C_Crypto> _C_Crypto;

		private EntitySet<C_Currency> _C_Currency;

		private EntitySet<C_CustomHouse> _C_CustomHouse;

		private EntitySet<C_CustomHouseContact> _C_CustomHouseContact;

		private EntitySet<C_DocumentSourceType> _C_DocumentSourceType;

		private EntitySet<C_DocumentType> _C_DocumentType;

		private EntitySet<C_FGA> _C_FGA;

		private EntitySet<C_FGADocument> _C_FGADocument;

		private EntitySet<C_FGADocumentSigner> _C_FGADocumentSigner;

		private EntitySet<C_Help> _C_Help;

		private EntitySet<C_LawOrgan> _C_LawOrgan;

		private EntitySet<C_LegalDocument> _C_LegalDocument;

		private EntitySet<C_LegalDocumentType> _C_LegalDocumentType;

		private EntitySet<C_LicenseType> _C_LicenseType;

		private EntitySet<C_MaxTargetValidity> _C_MaxTargetValidity;

		private EntitySet<C_Measure> _C_Measure;

		private EntitySet<C_MFC> _C_MFC;

		private EntitySet<C_OperationType> _C_OperationType;

		private EntitySet<C_QuoteCategory> _C_QuoteCategory;

		private EntitySet<C_RES> _C_RES;

		private EntitySet<C_RFSubject> _C_RFSubject;

		private EntitySet<C_Tariff> _C_Tariff;

		private EntitySet<C_UseType> _C_UseType;

		private EntitySet<C_VisitPurpose> _C_VisitPurpose;

		private EntitySet<CommodityDocument> _CommodityDocument;

		private EntitySet<Contractor> _Contractor;

		private EntitySet<ContractorChiefPerson> _ContractorChiefPerson;

		private EntitySet<ControlParameters> _ControlParameters;

		private EntitySet<Copy_ContractorChiefPerson> _Copy_ContractorChiefPerson;

		private EntitySet<CustomsDeclaration> _CustomsDeclaration;

		private EntitySet<Employee> _Employee;

		private EntitySet<Employee> _Subject;

		private EntitySet<EsiaActivateLog> _EsiaActivateLog;

		private EntitySet<FactAnnulment> _FactAnnulment;

		private EntitySet<FactClose> _FactClose;

		private EntitySet<FactForm> _FactForm;

		private EntitySet<FactRegister> _FactRegister;

		private EntitySet<FactReject> _FactReject;

		private EntitySet<FactResume> _FactResume;

		private EntitySet<FactSuspend> _FactSuspend;

		private EntitySet<ForeignAuthorization> _ForeignAuthorization;

		private EntitySet<HST_Contractor> _HST_Contractor;

		private EntitySet<HST_MM_FormView> _HST_MM_FormView;

		private EntitySet<HST_N_TimeZone> _HST_N_TimeZone;

		private EntitySet<INT_Command> _INT_Command;

		private EntitySet<INT_Handler> _INT_Handler;

		private EntitySet<INT_System> _INT_System;

		private EntitySet<LicenseExecution> _LicenseExecution;

		private EntitySet<MM_Codifier> _MM_Codifier;

		private EntitySet<MM_CodifierValue> _MM_CodifierValue;

		private EntitySet<MM_DataValidation> _MM_DataValidation;

		private EntitySet<MM_FormField> _MM_FormField;

		private EntitySet<MM_FormFieldAttribute> _MM_FormFieldAttribute;

		private EntitySet<MM_FormFieldGroup> _MM_FormFieldGroup;

		private EntitySet<MM_FormView> _MM_FormView;

		private EntitySet<MM_MethodParameter> _MM_MethodParameter;

		private EntitySet<MM_ObjectProperty> _MM_ObjectProperty;

		private EntitySet<MM_ObjectType> _MM_ObjectType;

		private EntitySet<MM_Package> _MM_Package;

		private EntitySet<MM_Predicate> _MM_Predicate;

		private EntitySet<N_DownloadLog> _N_DownloadLog;

		private EntitySet<N_File> _N_File;

		private EntitySet<N_File> _N_File_Creator;

		private EntitySet<N_File> _N_File_LastModifiedUser;

		private EntitySet<N_FileLibraryType> _N_FileLibraryType;

		private EntitySet<N_Filter> _N_Filter;

		private EntitySet<N_Folder> _N_Folder;

		private EntitySet<N_Folder> _N_Folder_LastModifiedUser;

		private EntitySet<N_MenuItem> _N_MenuItem;

		private EntitySet<N_RssFeed> _N_RssFeed;

		private EntitySet<N_Settings> _N_Settings;

		private EntitySet<N_SqlStatementLog> _N_SqlStatementLog;

		private EntitySet<N_TimeZone> _N_TimeZone;

		private EntitySet<N_VirusScanLog> _N_VirusScanLog;

		private EntitySet<OrderDoc> _OrderDoc;

		private EntitySet<OrderDocAsso> _OrderDocAsso;

		private EntitySet<OrderDocImportSubject> _OrderDocImportSubject;

		private EntitySet<OrderDocState> _OrderDocState;

		private EntitySet<OrderDocTransition> _OrderDocTransition;

		private EntitySet<PaymentOrder> _PaymentOrder;

		private EntitySet<Quota> _Quota;

		private EntitySet<QuotaRedistribution> _QuotaRedistribution;

		private EntitySet<QuotaRequest> _QuotaRequest;

		private EntitySet<QuotaRequest> _QuotaRequest_Subject;

		private EntitySet<Representation> _Representation;

		private EntitySet<RFSubject> _RFSubject;

		private EntitySet<SiteItem> _SiteItem;

		private EntitySet<SiteItemHtml> _SiteItemHtml;

		private EntitySet<SiteItemHtmlFolder> _SiteItemHtmlFolder;

		private EntitySet<SiteItemsFolder> _SiteItemsFolder;

		private EntitySet<SiteObject> _SiteObject;

		private EntitySet<SiteSection> _SiteSection;

		private EntitySet<SpecificationCommon> _SpecificationCommon;

		private EntitySet<SpecificationItem> _SpecificationItem;

		private EntitySet<SPM_C_RoleType> _SPM_C_RoleType;

		private EntitySet<SPM_Role> _SPM_Role;

		private EntitySet<SPM_SubjectAccess> _SPM_SubjectAccess;

		private EntitySet<SPM_SubjectDelegate> _SPM_SubjectDelegate;

		private EntitySet<SPM_SubjectDelegate> _SPM_SubjectDelegate_DelegatedTo;

		private EntitySet<SPM_SubjectDelegate> _SPM_SubjectDelegate_LastModifiedUser;

		private EntitySet<SPM_SubjectRole> _SPM_SubjectRole;

		private EntitySet<TechSupportLog> _TechSupportLog;

		private EntitySet<TechSupportLog> _TechSupportLog_Responsible;

		private EntitySet<TM_TaskExecution> _TM_TaskExecution;

		private EntitySet<UserActivity> _UserActivity;

		private EntityRef<UserInfo> _UserInfo;

		private EntitySet<VisitRecord> _VisitRecord;

		private EntitySet<VisitTime> _VisitTime;

		private EntitySet<WF_Activity> _WF_Activity;

		private EntitySet<WF_Transition> _WF_Transition;

		private EntitySet<WF_Workflow> _WF_Workflow;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSubjectIDChanging(int value);
		partial void OnSubjectIDChanged();
		partial void OnSIDChanging(string value);
		partial void OnSIDChanged();
		partial void OnSystemNameChanging(string value);
		partial void OnSystemNameChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnPasswordHashChanging(System.Data.Linq.Binary value);
		partial void OnPasswordHashChanged();
		partial void OnRegMagicStringChanging(string value);
		partial void OnRegMagicStringChanged();
		partial void OnRegDateChanging(System.Nullable<System.DateTime> value);
		partial void OnRegDateChanged();
		partial void OnIsActiveChanging(bool value);
		partial void OnIsActiveChanged();
		partial void OnEMailChanging(string value);
		partial void OnEMailChanged();
		partial void OnMustChangePasswordChanging(bool value);
		partial void OnMustChangePasswordChanged();
		partial void OnPasswordExpDateChanging(System.Nullable<System.DateTime> value);
		partial void OnPasswordExpDateChanged();
		#endregion

		public SPM_Subject()
		{
			this._Appendix = new EntitySet<Appendix>(new Action<Appendix>(this.attach_Appendix), new Action<Appendix>(this.detach_Appendix));
			this._AppendixQuantity = new EntitySet<AppendixQuantity>(new Action<AppendixQuantity>(this.attach_AppendixQuantity), new Action<AppendixQuantity>(this.detach_AppendixQuantity));
			this._Blank = new EntitySet<Blank>(new Action<Blank>(this.attach_Blank), new Action<Blank>(this.detach_Blank));
			this._BlankTransition = new EntitySet<BlankTransition>(new Action<BlankTransition>(this.attach_BlankTransition), new Action<BlankTransition>(this.detach_BlankTransition));
			this._C_AnnulmentReason = new EntitySet<C_AnnulmentReason>(new Action<C_AnnulmentReason>(this.attach_C_AnnulmentReason), new Action<C_AnnulmentReason>(this.detach_C_AnnulmentReason));
			this._C_CatalogRestriction = new EntitySet<C_CatalogRestriction>(new Action<C_CatalogRestriction>(this.attach_C_CatalogRestriction), new Action<C_CatalogRestriction>(this.detach_C_CatalogRestriction));
			this._C_CN = new EntitySet<C_CN>(new Action<C_CN>(this.attach_C_CN), new Action<C_CN>(this.detach_C_CN));
			this._C_CNCategory = new EntitySet<C_CNCategory>(new Action<C_CNCategory>(this.attach_C_CNCategory), new Action<C_CNCategory>(this.detach_C_CNCategory));
			this._C_CNCategoryDocument = new EntitySet<C_CNCategoryDocument>(new Action<C_CNCategoryDocument>(this.attach_C_CNCategoryDocument), new Action<C_CNCategoryDocument>(this.detach_C_CNCategoryDocument));
			this._C_CNCategoryFGADocument = new EntitySet<C_CNCategoryFGADocument>(new Action<C_CNCategoryFGADocument>(this.attach_C_CNCategoryFGADocument), new Action<C_CNCategoryFGADocument>(this.detach_C_CNCategoryFGADocument));
			this._C_CNCategoryItem = new EntitySet<C_CNCategoryItem>(new Action<C_CNCategoryItem>(this.attach_C_CNCategoryItem), new Action<C_CNCategoryItem>(this.detach_C_CNCategoryItem));
			this._C_CNGroup = new EntitySet<C_CNGroup>(new Action<C_CNGroup>(this.attach_C_CNGroup), new Action<C_CNGroup>(this.detach_C_CNGroup));
			this._C_CNType = new EntitySet<C_CNType>(new Action<C_CNType>(this.attach_C_CNType), new Action<C_CNType>(this.detach_C_CNType));
			this._C_Country = new EntitySet<C_Country>(new Action<C_Country>(this.attach_C_Country), new Action<C_Country>(this.detach_C_Country));
			this._C_CountryGroup = new EntitySet<C_CountryGroup>(new Action<C_CountryGroup>(this.attach_C_CountryGroup), new Action<C_CountryGroup>(this.detach_C_CountryGroup));
			this._C_Crypto = new EntitySet<C_Crypto>(new Action<C_Crypto>(this.attach_C_Crypto), new Action<C_Crypto>(this.detach_C_Crypto));
			this._C_Currency = new EntitySet<C_Currency>(new Action<C_Currency>(this.attach_C_Currency), new Action<C_Currency>(this.detach_C_Currency));
			this._C_CustomHouse = new EntitySet<C_CustomHouse>(new Action<C_CustomHouse>(this.attach_C_CustomHouse), new Action<C_CustomHouse>(this.detach_C_CustomHouse));
			this._C_CustomHouseContact = new EntitySet<C_CustomHouseContact>(new Action<C_CustomHouseContact>(this.attach_C_CustomHouseContact), new Action<C_CustomHouseContact>(this.detach_C_CustomHouseContact));
			this._C_DocumentSourceType = new EntitySet<C_DocumentSourceType>(new Action<C_DocumentSourceType>(this.attach_C_DocumentSourceType), new Action<C_DocumentSourceType>(this.detach_C_DocumentSourceType));
			this._C_DocumentType = new EntitySet<C_DocumentType>(new Action<C_DocumentType>(this.attach_C_DocumentType), new Action<C_DocumentType>(this.detach_C_DocumentType));
			this._C_FGA = new EntitySet<C_FGA>(new Action<C_FGA>(this.attach_C_FGA), new Action<C_FGA>(this.detach_C_FGA));
			this._C_FGADocument = new EntitySet<C_FGADocument>(new Action<C_FGADocument>(this.attach_C_FGADocument), new Action<C_FGADocument>(this.detach_C_FGADocument));
			this._C_FGADocumentSigner = new EntitySet<C_FGADocumentSigner>(new Action<C_FGADocumentSigner>(this.attach_C_FGADocumentSigner), new Action<C_FGADocumentSigner>(this.detach_C_FGADocumentSigner));
			this._C_Help = new EntitySet<C_Help>(new Action<C_Help>(this.attach_C_Help), new Action<C_Help>(this.detach_C_Help));
			this._C_LawOrgan = new EntitySet<C_LawOrgan>(new Action<C_LawOrgan>(this.attach_C_LawOrgan), new Action<C_LawOrgan>(this.detach_C_LawOrgan));
			this._C_LegalDocument = new EntitySet<C_LegalDocument>(new Action<C_LegalDocument>(this.attach_C_LegalDocument), new Action<C_LegalDocument>(this.detach_C_LegalDocument));
			this._C_LegalDocumentType = new EntitySet<C_LegalDocumentType>(new Action<C_LegalDocumentType>(this.attach_C_LegalDocumentType), new Action<C_LegalDocumentType>(this.detach_C_LegalDocumentType));
			this._C_LicenseType = new EntitySet<C_LicenseType>(new Action<C_LicenseType>(this.attach_C_LicenseType), new Action<C_LicenseType>(this.detach_C_LicenseType));
			this._C_MaxTargetValidity = new EntitySet<C_MaxTargetValidity>(new Action<C_MaxTargetValidity>(this.attach_C_MaxTargetValidity), new Action<C_MaxTargetValidity>(this.detach_C_MaxTargetValidity));
			this._C_Measure = new EntitySet<C_Measure>(new Action<C_Measure>(this.attach_C_Measure), new Action<C_Measure>(this.detach_C_Measure));
			this._C_MFC = new EntitySet<C_MFC>(new Action<C_MFC>(this.attach_C_MFC), new Action<C_MFC>(this.detach_C_MFC));
			this._C_OperationType = new EntitySet<C_OperationType>(new Action<C_OperationType>(this.attach_C_OperationType), new Action<C_OperationType>(this.detach_C_OperationType));
			this._C_QuoteCategory = new EntitySet<C_QuoteCategory>(new Action<C_QuoteCategory>(this.attach_C_QuoteCategory), new Action<C_QuoteCategory>(this.detach_C_QuoteCategory));
			this._C_RES = new EntitySet<C_RES>(new Action<C_RES>(this.attach_C_RES), new Action<C_RES>(this.detach_C_RES));
			this._C_RFSubject = new EntitySet<C_RFSubject>(new Action<C_RFSubject>(this.attach_C_RFSubject), new Action<C_RFSubject>(this.detach_C_RFSubject));
			this._C_Tariff = new EntitySet<C_Tariff>(new Action<C_Tariff>(this.attach_C_Tariff), new Action<C_Tariff>(this.detach_C_Tariff));
			this._C_UseType = new EntitySet<C_UseType>(new Action<C_UseType>(this.attach_C_UseType), new Action<C_UseType>(this.detach_C_UseType));
			this._C_VisitPurpose = new EntitySet<C_VisitPurpose>(new Action<C_VisitPurpose>(this.attach_C_VisitPurpose), new Action<C_VisitPurpose>(this.detach_C_VisitPurpose));
			this._CommodityDocument = new EntitySet<CommodityDocument>(new Action<CommodityDocument>(this.attach_CommodityDocument), new Action<CommodityDocument>(this.detach_CommodityDocument));
			this._Contractor = new EntitySet<Contractor>(new Action<Contractor>(this.attach_Contractor), new Action<Contractor>(this.detach_Contractor));
			this._ContractorChiefPerson = new EntitySet<ContractorChiefPerson>(new Action<ContractorChiefPerson>(this.attach_ContractorChiefPerson), new Action<ContractorChiefPerson>(this.detach_ContractorChiefPerson));
			this._ControlParameters = new EntitySet<ControlParameters>(new Action<ControlParameters>(this.attach_ControlParameters), new Action<ControlParameters>(this.detach_ControlParameters));
			this._Copy_ContractorChiefPerson = new EntitySet<Copy_ContractorChiefPerson>(new Action<Copy_ContractorChiefPerson>(this.attach_Copy_ContractorChiefPerson), new Action<Copy_ContractorChiefPerson>(this.detach_Copy_ContractorChiefPerson));
			this._CustomsDeclaration = new EntitySet<CustomsDeclaration>(new Action<CustomsDeclaration>(this.attach_CustomsDeclaration), new Action<CustomsDeclaration>(this.detach_CustomsDeclaration));
			this._Employee = new EntitySet<Employee>(new Action<Employee>(this.attach_Employee), new Action<Employee>(this.detach_Employee));
			this._Subject = new EntitySet<Employee>(new Action<Employee>(this.attach_Subject), new Action<Employee>(this.detach_Subject));
			this._EsiaActivateLog = new EntitySet<EsiaActivateLog>(new Action<EsiaActivateLog>(this.attach_EsiaActivateLog), new Action<EsiaActivateLog>(this.detach_EsiaActivateLog));
			this._FactAnnulment = new EntitySet<FactAnnulment>(new Action<FactAnnulment>(this.attach_FactAnnulment), new Action<FactAnnulment>(this.detach_FactAnnulment));
			this._FactClose = new EntitySet<FactClose>(new Action<FactClose>(this.attach_FactClose), new Action<FactClose>(this.detach_FactClose));
			this._FactForm = new EntitySet<FactForm>(new Action<FactForm>(this.attach_FactForm), new Action<FactForm>(this.detach_FactForm));
			this._FactRegister = new EntitySet<FactRegister>(new Action<FactRegister>(this.attach_FactRegister), new Action<FactRegister>(this.detach_FactRegister));
			this._FactReject = new EntitySet<FactReject>(new Action<FactReject>(this.attach_FactReject), new Action<FactReject>(this.detach_FactReject));
			this._FactResume = new EntitySet<FactResume>(new Action<FactResume>(this.attach_FactResume), new Action<FactResume>(this.detach_FactResume));
			this._FactSuspend = new EntitySet<FactSuspend>(new Action<FactSuspend>(this.attach_FactSuspend), new Action<FactSuspend>(this.detach_FactSuspend));
			this._ForeignAuthorization = new EntitySet<ForeignAuthorization>(new Action<ForeignAuthorization>(this.attach_ForeignAuthorization), new Action<ForeignAuthorization>(this.detach_ForeignAuthorization));
			this._HST_Contractor = new EntitySet<HST_Contractor>(new Action<HST_Contractor>(this.attach_HST_Contractor), new Action<HST_Contractor>(this.detach_HST_Contractor));
			this._HST_MM_FormView = new EntitySet<HST_MM_FormView>(new Action<HST_MM_FormView>(this.attach_HST_MM_FormView), new Action<HST_MM_FormView>(this.detach_HST_MM_FormView));
			this._HST_N_TimeZone = new EntitySet<HST_N_TimeZone>(new Action<HST_N_TimeZone>(this.attach_HST_N_TimeZone), new Action<HST_N_TimeZone>(this.detach_HST_N_TimeZone));
			this._INT_Command = new EntitySet<INT_Command>(new Action<INT_Command>(this.attach_INT_Command), new Action<INT_Command>(this.detach_INT_Command));
			this._INT_Handler = new EntitySet<INT_Handler>(new Action<INT_Handler>(this.attach_INT_Handler), new Action<INT_Handler>(this.detach_INT_Handler));
			this._INT_System = new EntitySet<INT_System>(new Action<INT_System>(this.attach_INT_System), new Action<INT_System>(this.detach_INT_System));
			this._LicenseExecution = new EntitySet<LicenseExecution>(new Action<LicenseExecution>(this.attach_LicenseExecution), new Action<LicenseExecution>(this.detach_LicenseExecution));
			this._MM_Codifier = new EntitySet<MM_Codifier>(new Action<MM_Codifier>(this.attach_MM_Codifier), new Action<MM_Codifier>(this.detach_MM_Codifier));
			this._MM_CodifierValue = new EntitySet<MM_CodifierValue>(new Action<MM_CodifierValue>(this.attach_MM_CodifierValue), new Action<MM_CodifierValue>(this.detach_MM_CodifierValue));
			this._MM_DataValidation = new EntitySet<MM_DataValidation>(new Action<MM_DataValidation>(this.attach_MM_DataValidation), new Action<MM_DataValidation>(this.detach_MM_DataValidation));
			this._MM_FormField = new EntitySet<MM_FormField>(new Action<MM_FormField>(this.attach_MM_FormField), new Action<MM_FormField>(this.detach_MM_FormField));
			this._MM_FormFieldAttribute = new EntitySet<MM_FormFieldAttribute>(new Action<MM_FormFieldAttribute>(this.attach_MM_FormFieldAttribute), new Action<MM_FormFieldAttribute>(this.detach_MM_FormFieldAttribute));
			this._MM_FormFieldGroup = new EntitySet<MM_FormFieldGroup>(new Action<MM_FormFieldGroup>(this.attach_MM_FormFieldGroup), new Action<MM_FormFieldGroup>(this.detach_MM_FormFieldGroup));
			this._MM_FormView = new EntitySet<MM_FormView>(new Action<MM_FormView>(this.attach_MM_FormView), new Action<MM_FormView>(this.detach_MM_FormView));
			this._MM_MethodParameter = new EntitySet<MM_MethodParameter>(new Action<MM_MethodParameter>(this.attach_MM_MethodParameter), new Action<MM_MethodParameter>(this.detach_MM_MethodParameter));
			this._MM_ObjectProperty = new EntitySet<MM_ObjectProperty>(new Action<MM_ObjectProperty>(this.attach_MM_ObjectProperty), new Action<MM_ObjectProperty>(this.detach_MM_ObjectProperty));
			this._MM_ObjectType = new EntitySet<MM_ObjectType>(new Action<MM_ObjectType>(this.attach_MM_ObjectType), new Action<MM_ObjectType>(this.detach_MM_ObjectType));
			this._MM_Package = new EntitySet<MM_Package>(new Action<MM_Package>(this.attach_MM_Package), new Action<MM_Package>(this.detach_MM_Package));
			this._MM_Predicate = new EntitySet<MM_Predicate>(new Action<MM_Predicate>(this.attach_MM_Predicate), new Action<MM_Predicate>(this.detach_MM_Predicate));
			this._N_DownloadLog = new EntitySet<N_DownloadLog>(new Action<N_DownloadLog>(this.attach_N_DownloadLog), new Action<N_DownloadLog>(this.detach_N_DownloadLog));
			this._N_File = new EntitySet<N_File>(new Action<N_File>(this.attach_N_File), new Action<N_File>(this.detach_N_File));
			this._N_File_Creator = new EntitySet<N_File>(new Action<N_File>(this.attach_N_File_Creator), new Action<N_File>(this.detach_N_File_Creator));
			this._N_File_LastModifiedUser = new EntitySet<N_File>(new Action<N_File>(this.attach_N_File_LastModifiedUser), new Action<N_File>(this.detach_N_File_LastModifiedUser));
			this._N_FileLibraryType = new EntitySet<N_FileLibraryType>(new Action<N_FileLibraryType>(this.attach_N_FileLibraryType), new Action<N_FileLibraryType>(this.detach_N_FileLibraryType));
			this._N_Filter = new EntitySet<N_Filter>(new Action<N_Filter>(this.attach_N_Filter), new Action<N_Filter>(this.detach_N_Filter));
			this._N_Folder = new EntitySet<N_Folder>(new Action<N_Folder>(this.attach_N_Folder), new Action<N_Folder>(this.detach_N_Folder));
			this._N_Folder_LastModifiedUser = new EntitySet<N_Folder>(new Action<N_Folder>(this.attach_N_Folder_LastModifiedUser), new Action<N_Folder>(this.detach_N_Folder_LastModifiedUser));
			this._N_MenuItem = new EntitySet<N_MenuItem>(new Action<N_MenuItem>(this.attach_N_MenuItem), new Action<N_MenuItem>(this.detach_N_MenuItem));
			this._N_RssFeed = new EntitySet<N_RssFeed>(new Action<N_RssFeed>(this.attach_N_RssFeed), new Action<N_RssFeed>(this.detach_N_RssFeed));
			this._N_Settings = new EntitySet<N_Settings>(new Action<N_Settings>(this.attach_N_Settings), new Action<N_Settings>(this.detach_N_Settings));
			this._N_SqlStatementLog = new EntitySet<N_SqlStatementLog>(new Action<N_SqlStatementLog>(this.attach_N_SqlStatementLog), new Action<N_SqlStatementLog>(this.detach_N_SqlStatementLog));
			this._N_TimeZone = new EntitySet<N_TimeZone>(new Action<N_TimeZone>(this.attach_N_TimeZone), new Action<N_TimeZone>(this.detach_N_TimeZone));
			this._N_VirusScanLog = new EntitySet<N_VirusScanLog>(new Action<N_VirusScanLog>(this.attach_N_VirusScanLog), new Action<N_VirusScanLog>(this.detach_N_VirusScanLog));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._OrderDocAsso = new EntitySet<OrderDocAsso>(new Action<OrderDocAsso>(this.attach_OrderDocAsso), new Action<OrderDocAsso>(this.detach_OrderDocAsso));
			this._OrderDocImportSubject = new EntitySet<OrderDocImportSubject>(new Action<OrderDocImportSubject>(this.attach_OrderDocImportSubject), new Action<OrderDocImportSubject>(this.detach_OrderDocImportSubject));
			this._OrderDocState = new EntitySet<OrderDocState>(new Action<OrderDocState>(this.attach_OrderDocState), new Action<OrderDocState>(this.detach_OrderDocState));
			this._OrderDocTransition = new EntitySet<OrderDocTransition>(new Action<OrderDocTransition>(this.attach_OrderDocTransition), new Action<OrderDocTransition>(this.detach_OrderDocTransition));
			this._PaymentOrder = new EntitySet<PaymentOrder>(new Action<PaymentOrder>(this.attach_PaymentOrder), new Action<PaymentOrder>(this.detach_PaymentOrder));
			this._Quota = new EntitySet<Quota>(new Action<Quota>(this.attach_Quota), new Action<Quota>(this.detach_Quota));
			this._QuotaRedistribution = new EntitySet<QuotaRedistribution>(new Action<QuotaRedistribution>(this.attach_QuotaRedistribution), new Action<QuotaRedistribution>(this.detach_QuotaRedistribution));
			this._QuotaRequest = new EntitySet<QuotaRequest>(new Action<QuotaRequest>(this.attach_QuotaRequest), new Action<QuotaRequest>(this.detach_QuotaRequest));
			this._QuotaRequest_Subject = new EntitySet<QuotaRequest>(new Action<QuotaRequest>(this.attach_QuotaRequest_Subject), new Action<QuotaRequest>(this.detach_QuotaRequest_Subject));
			this._Representation = new EntitySet<Representation>(new Action<Representation>(this.attach_Representation), new Action<Representation>(this.detach_Representation));
			this._RFSubject = new EntitySet<RFSubject>(new Action<RFSubject>(this.attach_RFSubject), new Action<RFSubject>(this.detach_RFSubject));
			this._SiteItem = new EntitySet<SiteItem>(new Action<SiteItem>(this.attach_SiteItem), new Action<SiteItem>(this.detach_SiteItem));
			this._SiteItemHtml = new EntitySet<SiteItemHtml>(new Action<SiteItemHtml>(this.attach_SiteItemHtml), new Action<SiteItemHtml>(this.detach_SiteItemHtml));
			this._SiteItemHtmlFolder = new EntitySet<SiteItemHtmlFolder>(new Action<SiteItemHtmlFolder>(this.attach_SiteItemHtmlFolder), new Action<SiteItemHtmlFolder>(this.detach_SiteItemHtmlFolder));
			this._SiteItemsFolder = new EntitySet<SiteItemsFolder>(new Action<SiteItemsFolder>(this.attach_SiteItemsFolder), new Action<SiteItemsFolder>(this.detach_SiteItemsFolder));
			this._SiteObject = new EntitySet<SiteObject>(new Action<SiteObject>(this.attach_SiteObject), new Action<SiteObject>(this.detach_SiteObject));
			this._SiteSection = new EntitySet<SiteSection>(new Action<SiteSection>(this.attach_SiteSection), new Action<SiteSection>(this.detach_SiteSection));
			this._SpecificationCommon = new EntitySet<SpecificationCommon>(new Action<SpecificationCommon>(this.attach_SpecificationCommon), new Action<SpecificationCommon>(this.detach_SpecificationCommon));
			this._SpecificationItem = new EntitySet<SpecificationItem>(new Action<SpecificationItem>(this.attach_SpecificationItem), new Action<SpecificationItem>(this.detach_SpecificationItem));
			this._SPM_C_RoleType = new EntitySet<SPM_C_RoleType>(new Action<SPM_C_RoleType>(this.attach_SPM_C_RoleType), new Action<SPM_C_RoleType>(this.detach_SPM_C_RoleType));
			this._SPM_Role = new EntitySet<SPM_Role>(new Action<SPM_Role>(this.attach_SPM_Role), new Action<SPM_Role>(this.detach_SPM_Role));
			this._SPM_SubjectAccess = new EntitySet<SPM_SubjectAccess>(new Action<SPM_SubjectAccess>(this.attach_SPM_SubjectAccess), new Action<SPM_SubjectAccess>(this.detach_SPM_SubjectAccess));
			this._SPM_SubjectDelegate = new EntitySet<SPM_SubjectDelegate>(new Action<SPM_SubjectDelegate>(this.attach_SPM_SubjectDelegate), new Action<SPM_SubjectDelegate>(this.detach_SPM_SubjectDelegate));
			this._SPM_SubjectDelegate_DelegatedTo = new EntitySet<SPM_SubjectDelegate>(new Action<SPM_SubjectDelegate>(this.attach_SPM_SubjectDelegate_DelegatedTo), new Action<SPM_SubjectDelegate>(this.detach_SPM_SubjectDelegate_DelegatedTo));
			this._SPM_SubjectDelegate_LastModifiedUser = new EntitySet<SPM_SubjectDelegate>(new Action<SPM_SubjectDelegate>(this.attach_SPM_SubjectDelegate_LastModifiedUser), new Action<SPM_SubjectDelegate>(this.detach_SPM_SubjectDelegate_LastModifiedUser));
			this._SPM_SubjectRole = new EntitySet<SPM_SubjectRole>(new Action<SPM_SubjectRole>(this.attach_SPM_SubjectRole), new Action<SPM_SubjectRole>(this.detach_SPM_SubjectRole));
			this._TechSupportLog = new EntitySet<TechSupportLog>(new Action<TechSupportLog>(this.attach_TechSupportLog), new Action<TechSupportLog>(this.detach_TechSupportLog));
			this._TechSupportLog_Responsible = new EntitySet<TechSupportLog>(new Action<TechSupportLog>(this.attach_TechSupportLog_Responsible), new Action<TechSupportLog>(this.detach_TechSupportLog_Responsible));
			this._TM_TaskExecution = new EntitySet<TM_TaskExecution>(new Action<TM_TaskExecution>(this.attach_TM_TaskExecution), new Action<TM_TaskExecution>(this.detach_TM_TaskExecution));
			this._UserActivity = new EntitySet<UserActivity>(new Action<UserActivity>(this.attach_UserActivity), new Action<UserActivity>(this.detach_UserActivity));
			this._UserInfo = default(EntityRef<UserInfo>);
			this._VisitRecord = new EntitySet<VisitRecord>(new Action<VisitRecord>(this.attach_VisitRecord), new Action<VisitRecord>(this.detach_VisitRecord));
			this._VisitTime = new EntitySet<VisitTime>(new Action<VisitTime>(this.attach_VisitTime), new Action<VisitTime>(this.detach_VisitTime));
			this._WF_Activity = new EntitySet<WF_Activity>(new Action<WF_Activity>(this.attach_WF_Activity), new Action<WF_Activity>(this.detach_WF_Activity));
			this._WF_Transition = new EntitySet<WF_Transition>(new Action<WF_Transition>(this.attach_WF_Transition), new Action<WF_Transition>(this.detach_WF_Transition));
			this._WF_Workflow = new EntitySet<WF_Workflow>(new Action<WF_Workflow>(this.attach_WF_Workflow), new Action<WF_Workflow>(this.detach_WF_Workflow));
			OnCreated();
		}

		[Column(Storage = "_SubjectID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}

		[Column(Storage = "_SID", DbType = "VarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SID
		{
			get
			{
				return this._SID;
			}
			set
			{
				if ((this._SID != value))
				{
					this.OnSIDChanging(value);
					this.SendPropertyChanging();
					this._SID = value;
					this.SendPropertyChanged("SID");
					this.OnSIDChanged();
				}
			}
		}

		[Column(Storage = "_SystemName", DbType = "VarChar(255)", UpdateCheck = UpdateCheck.Never)]
		public string SystemName
		{
			get
			{
				return this._SystemName;
			}
			set
			{
				if ((this._SystemName != value))
				{
					this.OnSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SystemName = value;
					this.SendPropertyChanged("SystemName");
					this.OnSystemNameChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "VarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_PasswordHash", DbType = "VarBinary(1024)", CanBeNull = true, UpdateCheck = UpdateCheck.Never)]
		public System.Data.Linq.Binary PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}

		[Column(Storage = "_RegMagicString", DbType = "NVarChar(255)", UpdateCheck = UpdateCheck.Never)]
		public string RegMagicString
		{
			get
			{
				return this._RegMagicString;
			}
			set
			{
				if ((this._RegMagicString != value))
				{
					this.OnRegMagicStringChanging(value);
					this.SendPropertyChanging();
					this._RegMagicString = value;
					this.SendPropertyChanged("RegMagicString");
					this.OnRegMagicStringChanged();
				}
			}
		}

		[Column(Storage = "_RegDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this.OnRegDateChanging(value);
					this.SendPropertyChanging();
					this._RegDate = value;
					this.SendPropertyChanged("RegDate");
					this.OnRegDateChanged();
				}
			}
		}

		[Column(Storage = "_IsActive", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}

		[Column(Storage = "_EMail", DbType = "NVarChar(255)", UpdateCheck = UpdateCheck.Never)]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}

		[Column(Storage = "_MustChangePassword", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool MustChangePassword
		{
			get
			{
				return this._MustChangePassword;
			}
			set
			{
				if ((this._MustChangePassword != value))
				{
					this.OnMustChangePasswordChanging(value);
					this.SendPropertyChanging();
					this._MustChangePassword = value;
					this.SendPropertyChanged("MustChangePassword");
					this.OnMustChangePasswordChanged();
				}
			}
		}

		[Column(Storage = "_PasswordExpDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PasswordExpDate
		{
			get
			{
				return this._PasswordExpDate;
			}
			set
			{
				if ((this._PasswordExpDate != value))
				{
					this.OnPasswordExpDateChanging(value);
					this.SendPropertyChanging();
					this._PasswordExpDate = value;
					this.SendPropertyChanged("PasswordExpDate");
					this.OnPasswordExpDateChanged();
				}
			}
		}

		[Association(Name = "FK_Appendix_LastModifiedUser", Storage = "_Appendix", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<Appendix> Appendix
		{
			get
			{
				return this._Appendix;
			}
			set
			{
				this._Appendix.Assign(value);
			}
		}

		[Association(Name = "FK_AppendixQuantity_LastModifiedUser", Storage = "_AppendixQuantity", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<AppendixQuantity> AppendixQuantity
		{
			get
			{
				return this._AppendixQuantity;
			}
			set
			{
				this._AppendixQuantity.Assign(value);
			}
		}

		[Association(Name = "FK_Blank_LastModifiedUser", Storage = "_Blank", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<Blank> Blank
		{
			get
			{
				return this._Blank;
			}
			set
			{
				this._Blank.Assign(value);
			}
		}

		[Association(Name = "FK_BlankTransition_Subject", Storage = "_BlankTransition", ThisKey = "SubjectID", OtherKey = "SubjectID", DeleteRule = "NO ACTION")]
		public EntitySet<BlankTransition> BlankTransition
		{
			get
			{
				return this._BlankTransition;
			}
			set
			{
				this._BlankTransition.Assign(value);
			}
		}

		[Association(Name = "FK_C_AnnulmentReason_LastModifiedUser", Storage = "_C_AnnulmentReason", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_AnnulmentReason> C_AnnulmentReason
		{
			get
			{
				return this._C_AnnulmentReason;
			}
			set
			{
				this._C_AnnulmentReason.Assign(value);
			}
		}

		[Association(Name = "FK_C_CatalogRestriction_LastModifiedUser", Storage = "_C_CatalogRestriction", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CatalogRestriction> C_CatalogRestriction
		{
			get
			{
				return this._C_CatalogRestriction;
			}
			set
			{
				this._C_CatalogRestriction.Assign(value);
			}
		}

		[Association(Name = "FK_C_CN_LastModifiedUser", Storage = "_C_CN", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CN> C_CN
		{
			get
			{
				return this._C_CN;
			}
			set
			{
				this._C_CN.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNCategory_LastModifiedUser", Storage = "_C_CNCategory", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CNCategory> C_CNCategory
		{
			get
			{
				return this._C_CNCategory;
			}
			set
			{
				this._C_CNCategory.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNCategoryDocument_LastModifiedUser", Storage = "_C_CNCategoryDocument", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CNCategoryDocument> C_CNCategoryDocument
		{
			get
			{
				return this._C_CNCategoryDocument;
			}
			set
			{
				this._C_CNCategoryDocument.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNCategoryFGADocument_LastModifiedUser", Storage = "_C_CNCategoryFGADocument", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CNCategoryFGADocument> C_CNCategoryFGADocument
		{
			get
			{
				return this._C_CNCategoryFGADocument;
			}
			set
			{
				this._C_CNCategoryFGADocument.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNCategoryItem_LastModifiedUser", Storage = "_C_CNCategoryItem", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CNCategoryItem> C_CNCategoryItem
		{
			get
			{
				return this._C_CNCategoryItem;
			}
			set
			{
				this._C_CNCategoryItem.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNGroup_LastModifiedUser", Storage = "_C_CNGroup", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CNGroup> C_CNGroup
		{
			get
			{
				return this._C_CNGroup;
			}
			set
			{
				this._C_CNGroup.Assign(value);
			}
		}

		[Association(Name = "FK_C_CNType_LastModifiedUser", Storage = "_C_CNType", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CNType> C_CNType
		{
			get
			{
				return this._C_CNType;
			}
			set
			{
				this._C_CNType.Assign(value);
			}
		}

		[Association(Name = "FK_C_Country_LastModifiedUser", Storage = "_C_Country", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_Country> C_Country
		{
			get
			{
				return this._C_Country;
			}
			set
			{
				this._C_Country.Assign(value);
			}
		}

		[Association(Name = "FK_C_CountryGroup_LastModifiedUser", Storage = "_C_CountryGroup", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CountryGroup> C_CountryGroup
		{
			get
			{
				return this._C_CountryGroup;
			}
			set
			{
				this._C_CountryGroup.Assign(value);
			}
		}

		[Association(Name = "FK_C_Crypto_LastModifiedUser", Storage = "_C_Crypto", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_Crypto> C_Crypto
		{
			get
			{
				return this._C_Crypto;
			}
			set
			{
				this._C_Crypto.Assign(value);
			}
		}

		[Association(Name = "FK_C_Currency_LastModifiedUser", Storage = "_C_Currency", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_Currency> C_Currency
		{
			get
			{
				return this._C_Currency;
			}
			set
			{
				this._C_Currency.Assign(value);
			}
		}

		[Association(Name = "FK_C_CustomHouse_LastModifiedUser", Storage = "_C_CustomHouse", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CustomHouse> C_CustomHouse
		{
			get
			{
				return this._C_CustomHouse;
			}
			set
			{
				this._C_CustomHouse.Assign(value);
			}
		}

		[Association(Name = "FK_C_CustomHouseContact_LastModifiedUser", Storage = "_C_CustomHouseContact", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_CustomHouseContact> C_CustomHouseContact
		{
			get
			{
				return this._C_CustomHouseContact;
			}
			set
			{
				this._C_CustomHouseContact.Assign(value);
			}
		}

		[Association(Name = "FK_C_DocumentSourceType_LastModifiedUser", Storage = "_C_DocumentSourceType", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_DocumentSourceType> C_DocumentSourceType
		{
			get
			{
				return this._C_DocumentSourceType;
			}
			set
			{
				this._C_DocumentSourceType.Assign(value);
			}
		}

		[Association(Name = "FK_C_DocumentType_LastModifiedUser", Storage = "_C_DocumentType", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_DocumentType> C_DocumentType
		{
			get
			{
				return this._C_DocumentType;
			}
			set
			{
				this._C_DocumentType.Assign(value);
			}
		}

		[Association(Name = "FK_C_FGA_LastModifiedUser", Storage = "_C_FGA", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_FGA> C_FGA
		{
			get
			{
				return this._C_FGA;
			}
			set
			{
				this._C_FGA.Assign(value);
			}
		}

		[Association(Name = "FK_C_FGADocument_LastModifiedUser", Storage = "_C_FGADocument", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_FGADocument> C_FGADocument
		{
			get
			{
				return this._C_FGADocument;
			}
			set
			{
				this._C_FGADocument.Assign(value);
			}
		}

		[Association(Name = "FK_C_FGADocumentSigner_LastModifiedUser", Storage = "_C_FGADocumentSigner", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_FGADocumentSigner> C_FGADocumentSigner
		{
			get
			{
				return this._C_FGADocumentSigner;
			}
			set
			{
				this._C_FGADocumentSigner.Assign(value);
			}
		}

		[Association(Name = "FK_C_Help_LastModifiedUser", Storage = "_C_Help", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_Help> C_Help
		{
			get
			{
				return this._C_Help;
			}
			set
			{
				this._C_Help.Assign(value);
			}
		}

		[Association(Name = "FK_C_LawOrgan_LastModifiedUser", Storage = "_C_LawOrgan", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_LawOrgan> C_LawOrgan
		{
			get
			{
				return this._C_LawOrgan;
			}
			set
			{
				this._C_LawOrgan.Assign(value);
			}
		}

		[Association(Name = "FK_C_LegalDocument_LastModifiedUser", Storage = "_C_LegalDocument", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_LegalDocument> C_LegalDocument
		{
			get
			{
				return this._C_LegalDocument;
			}
			set
			{
				this._C_LegalDocument.Assign(value);
			}
		}

		[Association(Name = "FK_C_LegalDocumentType_LastModifiedUser", Storage = "_C_LegalDocumentType", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_LegalDocumentType> C_LegalDocumentType
		{
			get
			{
				return this._C_LegalDocumentType;
			}
			set
			{
				this._C_LegalDocumentType.Assign(value);
			}
		}

		[Association(Name = "FK_C_LicenseType_LastModifiedUser", Storage = "_C_LicenseType", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_LicenseType> C_LicenseType
		{
			get
			{
				return this._C_LicenseType;
			}
			set
			{
				this._C_LicenseType.Assign(value);
			}
		}

		[Association(Name = "FK_C_MaxTargetValidity_LastModifiedUser", Storage = "_C_MaxTargetValidity", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_MaxTargetValidity> C_MaxTargetValidity
		{
			get
			{
				return this._C_MaxTargetValidity;
			}
			set
			{
				this._C_MaxTargetValidity.Assign(value);
			}
		}

		[Association(Name = "FK_C_Measure_LastModifiedUser", Storage = "_C_Measure", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_Measure> C_Measure
		{
			get
			{
				return this._C_Measure;
			}
			set
			{
				this._C_Measure.Assign(value);
			}
		}

		[Association(Name = "FK_C_MFC_LastModifiedUser", Storage = "_C_MFC", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_MFC> C_MFC
		{
			get
			{
				return this._C_MFC;
			}
			set
			{
				this._C_MFC.Assign(value);
			}
		}

		[Association(Name = "FK_C_OperationType_LastModifiedUser", Storage = "_C_OperationType", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_OperationType> C_OperationType
		{
			get
			{
				return this._C_OperationType;
			}
			set
			{
				this._C_OperationType.Assign(value);
			}
		}

		[Association(Name = "FK_C_QuoteCategory_LastModifiedUser", Storage = "_C_QuoteCategory", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_QuoteCategory> C_QuoteCategory
		{
			get
			{
				return this._C_QuoteCategory;
			}
			set
			{
				this._C_QuoteCategory.Assign(value);
			}
		}

		[Association(Name = "FK_C_RES_LastModifiedUser", Storage = "_C_RES", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_RES> C_RES
		{
			get
			{
				return this._C_RES;
			}
			set
			{
				this._C_RES.Assign(value);
			}
		}

		[Association(Name = "FK_C_RFSubject_LastModifiedUser", Storage = "_C_RFSubject", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_RFSubject> C_RFSubject
		{
			get
			{
				return this._C_RFSubject;
			}
			set
			{
				this._C_RFSubject.Assign(value);
			}
		}

		[Association(Name = "FK_C_Tariff_LastModifiedUser", Storage = "_C_Tariff", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_Tariff> C_Tariff
		{
			get
			{
				return this._C_Tariff;
			}
			set
			{
				this._C_Tariff.Assign(value);
			}
		}

		[Association(Name = "FK_C_UseType_LastModifiedUser", Storage = "_C_UseType", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_UseType> C_UseType
		{
			get
			{
				return this._C_UseType;
			}
			set
			{
				this._C_UseType.Assign(value);
			}
		}

		[Association(Name = "FK_C_VisitPurpose_LastModifiedUser", Storage = "_C_VisitPurpose", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<C_VisitPurpose> C_VisitPurpose
		{
			get
			{
				return this._C_VisitPurpose;
			}
			set
			{
				this._C_VisitPurpose.Assign(value);
			}
		}

		[Association(Name = "FK_CommodityDocument_LastModifiedUser", Storage = "_CommodityDocument", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<CommodityDocument> CommodityDocument
		{
			get
			{
				return this._CommodityDocument;
			}
			set
			{
				this._CommodityDocument.Assign(value);
			}
		}

		[Association(Name = "FK_Contractor_LastModifiedUser", Storage = "_Contractor", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<Contractor> Contractor
		{
			get
			{
				return this._Contractor;
			}
			set
			{
				this._Contractor.Assign(value);
			}
		}

		[Association(Name = "FK_ContractorChiefPerson_LastModifiedUser", Storage = "_ContractorChiefPerson", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<ContractorChiefPerson> ContractorChiefPerson
		{
			get
			{
				return this._ContractorChiefPerson;
			}
			set
			{
				this._ContractorChiefPerson.Assign(value);
			}
		}

		[Association(Name = "FK_ControlParameters_LastModifiedUser", Storage = "_ControlParameters", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<ControlParameters> ControlParameters
		{
			get
			{
				return this._ControlParameters;
			}
			set
			{
				this._ControlParameters.Assign(value);
			}
		}

		[Association(Name = "FK_Copy_ContractorChiefPerson_LastModifiedUser", Storage = "_Copy_ContractorChiefPerson", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<Copy_ContractorChiefPerson> Copy_ContractorChiefPerson
		{
			get
			{
				return this._Copy_ContractorChiefPerson;
			}
			set
			{
				this._Copy_ContractorChiefPerson.Assign(value);
			}
		}

		[Association(Name = "FK_CustomsDeclaration_LastModifiedUser", Storage = "_CustomsDeclaration", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<CustomsDeclaration> CustomsDeclaration
		{
			get
			{
				return this._CustomsDeclaration;
			}
			set
			{
				this._CustomsDeclaration.Assign(value);
			}
		}

		[Association(Name = "FK_Employee_LastModifiedUser", Storage = "_Employee", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<Employee> Employee
		{
			get
			{
				return this._Employee;
			}
			set
			{
				this._Employee.Assign(value);
			}
		}

		[Association(Name = "FK_Employee_SPM_Subject", Storage = "_Subject", ThisKey = "SubjectID", OtherKey = "SPM_SubjectID", DeleteRule = "NO ACTION")]
		public EntitySet<Employee> Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				this._Subject.Assign(value);
			}
		}

		[Association(Name = "FK_EsiaActivateLog_LastModifiedUser", Storage = "_EsiaActivateLog", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<EsiaActivateLog> EsiaActivateLog
		{
			get
			{
				return this._EsiaActivateLog;
			}
			set
			{
				this._EsiaActivateLog.Assign(value);
			}
		}

		[Association(Name = "FK_FactAnnulment_LastModifiedUser", Storage = "_FactAnnulment", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<FactAnnulment> FactAnnulment
		{
			get
			{
				return this._FactAnnulment;
			}
			set
			{
				this._FactAnnulment.Assign(value);
			}
		}

		[Association(Name = "FK_FactClose_LastModifiedUser", Storage = "_FactClose", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<FactClose> FactClose
		{
			get
			{
				return this._FactClose;
			}
			set
			{
				this._FactClose.Assign(value);
			}
		}

		[Association(Name = "FK_FactForm_LastModifiedUser", Storage = "_FactForm", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<FactForm> FactForm
		{
			get
			{
				return this._FactForm;
			}
			set
			{
				this._FactForm.Assign(value);
			}
		}

		[Association(Name = "FK_FactRegister_LastModifiedUser", Storage = "_FactRegister", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<FactRegister> FactRegister
		{
			get
			{
				return this._FactRegister;
			}
			set
			{
				this._FactRegister.Assign(value);
			}
		}

		[Association(Name = "FK_FactReject_LastModifiedUser", Storage = "_FactReject", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<FactReject> FactReject
		{
			get
			{
				return this._FactReject;
			}
			set
			{
				this._FactReject.Assign(value);
			}
		}

		[Association(Name = "FK_FactResume_LastModifiedUser", Storage = "_FactResume", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<FactResume> FactResume
		{
			get
			{
				return this._FactResume;
			}
			set
			{
				this._FactResume.Assign(value);
			}
		}

		[Association(Name = "FK_FactSuspend_LastModifiedUser", Storage = "_FactSuspend", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<FactSuspend> FactSuspend
		{
			get
			{
				return this._FactSuspend;
			}
			set
			{
				this._FactSuspend.Assign(value);
			}
		}

		[Association(Name = "FK_ForeignAuthorization_LastModifiedUser", Storage = "_ForeignAuthorization", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<ForeignAuthorization> ForeignAuthorization
		{
			get
			{
				return this._ForeignAuthorization;
			}
			set
			{
				this._ForeignAuthorization.Assign(value);
			}
		}

		[Association(Name = "FK_HST_Contractor_LastModifiedUser", Storage = "_HST_Contractor", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<HST_Contractor> HST_Contractor
		{
			get
			{
				return this._HST_Contractor;
			}
			set
			{
				this._HST_Contractor.Assign(value);
			}
		}

		[Association(Name = "FK_HST_MM_FormView_LastModifiedUser", Storage = "_HST_MM_FormView", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<HST_MM_FormView> HST_MM_FormView
		{
			get
			{
				return this._HST_MM_FormView;
			}
			set
			{
				this._HST_MM_FormView.Assign(value);
			}
		}

		[Association(Name = "FK_HST_N_TimeZone_LastModifiedUser", Storage = "_HST_N_TimeZone", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<HST_N_TimeZone> HST_N_TimeZone
		{
			get
			{
				return this._HST_N_TimeZone;
			}
			set
			{
				this._HST_N_TimeZone.Assign(value);
			}
		}

		[Association(Name = "FK_INT_Command_LastModifiedUser", Storage = "_INT_Command", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<INT_Command> INT_Command
		{
			get
			{
				return this._INT_Command;
			}
			set
			{
				this._INT_Command.Assign(value);
			}
		}

		[Association(Name = "FK_INT_Handler_LastModifiedUser", Storage = "_INT_Handler", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<INT_Handler> INT_Handler
		{
			get
			{
				return this._INT_Handler;
			}
			set
			{
				this._INT_Handler.Assign(value);
			}
		}

		[Association(Name = "FK_INT_System_LastModifiedUser", Storage = "_INT_System", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<INT_System> INT_System
		{
			get
			{
				return this._INT_System;
			}
			set
			{
				this._INT_System.Assign(value);
			}
		}

		[Association(Name = "FK_LicenseExecution_LastModifiedUser", Storage = "_LicenseExecution", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<LicenseExecution> LicenseExecution
		{
			get
			{
				return this._LicenseExecution;
			}
			set
			{
				this._LicenseExecution.Assign(value);
			}
		}

		[Association(Name = "FK_MM_Codifier_LastModifiedUser", Storage = "_MM_Codifier", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_Codifier> MM_Codifier
		{
			get
			{
				return this._MM_Codifier;
			}
			set
			{
				this._MM_Codifier.Assign(value);
			}
		}

		[Association(Name = "FK_MM_CodifierValue_LastModifiedUser", Storage = "_MM_CodifierValue", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_CodifierValue> MM_CodifierValue
		{
			get
			{
				return this._MM_CodifierValue;
			}
			set
			{
				this._MM_CodifierValue.Assign(value);
			}
		}

		[Association(Name = "FK_MM_DataValidation_LastModifiedUser", Storage = "_MM_DataValidation", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_DataValidation> MM_DataValidation
		{
			get
			{
				return this._MM_DataValidation;
			}
			set
			{
				this._MM_DataValidation.Assign(value);
			}
		}

		[Association(Name = "FK_MM_FormField_LastModifiedUser", Storage = "_MM_FormField", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_FormField> MM_FormField
		{
			get
			{
				return this._MM_FormField;
			}
			set
			{
				this._MM_FormField.Assign(value);
			}
		}

		[Association(Name = "FK_MM_FormFieldAttribute_LastModifiedUser", Storage = "_MM_FormFieldAttribute", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_FormFieldAttribute> MM_FormFieldAttribute
		{
			get
			{
				return this._MM_FormFieldAttribute;
			}
			set
			{
				this._MM_FormFieldAttribute.Assign(value);
			}
		}

		[Association(Name = "FK_MM_FormFieldGroup_LastModifiedUser", Storage = "_MM_FormFieldGroup", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_FormFieldGroup> MM_FormFieldGroup
		{
			get
			{
				return this._MM_FormFieldGroup;
			}
			set
			{
				this._MM_FormFieldGroup.Assign(value);
			}
		}

		[Association(Name = "FK_MM_FormView_LastModifiedUser", Storage = "_MM_FormView", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_FormView> MM_FormView
		{
			get
			{
				return this._MM_FormView;
			}
			set
			{
				this._MM_FormView.Assign(value);
			}
		}

		[Association(Name = "FK_MM_MethodParameter_LastModifiedUser", Storage = "_MM_MethodParameter", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_MethodParameter> MM_MethodParameter
		{
			get
			{
				return this._MM_MethodParameter;
			}
			set
			{
				this._MM_MethodParameter.Assign(value);
			}
		}

		[Association(Name = "FK_MM_ObjectProperty_LastModifiedUser", Storage = "_MM_ObjectProperty", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_ObjectProperty> MM_ObjectProperty
		{
			get
			{
				return this._MM_ObjectProperty;
			}
			set
			{
				this._MM_ObjectProperty.Assign(value);
			}
		}

		[Association(Name = "FK_MM_ObjectType_LastModifiedUser", Storage = "_MM_ObjectType", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_ObjectType> MM_ObjectType
		{
			get
			{
				return this._MM_ObjectType;
			}
			set
			{
				this._MM_ObjectType.Assign(value);
			}
		}

		[Association(Name = "FK_MM_Package_LastModifiedUser", Storage = "_MM_Package", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_Package> MM_Package
		{
			get
			{
				return this._MM_Package;
			}
			set
			{
				this._MM_Package.Assign(value);
			}
		}

		[Association(Name = "FK_MM_Predicate_LastModifiedUser", Storage = "_MM_Predicate", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<MM_Predicate> MM_Predicate
		{
			get
			{
				return this._MM_Predicate;
			}
			set
			{
				this._MM_Predicate.Assign(value);
			}
		}

		[Association(Name = "FK_N_DownloadLog_LastModifiedUser", Storage = "_N_DownloadLog", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<N_DownloadLog> N_DownloadLog
		{
			get
			{
				return this._N_DownloadLog;
			}
			set
			{
				this._N_DownloadLog.Assign(value);
			}
		}

		[Association(Name = "FK_N_File_CheckedOutBy", Storage = "_N_File", ThisKey = "SubjectID", OtherKey = "CheckedOutByID", DeleteRule = "NO ACTION")]
		public EntitySet<N_File> N_File
		{
			get
			{
				return this._N_File;
			}
			set
			{
				this._N_File.Assign(value);
			}
		}

		[Association(Name = "FK_N_File_Creator", Storage = "_N_File_Creator", ThisKey = "SubjectID", OtherKey = "CreatorID", DeleteRule = "NO ACTION")]
		public EntitySet<N_File> N_File_Creator
		{
			get
			{
				return this._N_File_Creator;
			}
			set
			{
				this._N_File_Creator.Assign(value);
			}
		}

		[Association(Name = "FK_N_File_LastModifiedUser", Storage = "_N_File_LastModifiedUser", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<N_File> N_File_LastModifiedUser
		{
			get
			{
				return this._N_File_LastModifiedUser;
			}
			set
			{
				this._N_File_LastModifiedUser.Assign(value);
			}
		}

		[Association(Name = "FK_N_FileLibraryType_LastModifiedUser", Storage = "_N_FileLibraryType", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<N_FileLibraryType> N_FileLibraryType
		{
			get
			{
				return this._N_FileLibraryType;
			}
			set
			{
				this._N_FileLibraryType.Assign(value);
			}
		}

		[Association(Name = "FK_N_Filter_SPM_Subject", Storage = "_N_Filter", ThisKey = "SubjectID", OtherKey = "SubjectID", DeleteRule = "NO ACTION")]
		public EntitySet<N_Filter> N_Filter
		{
			get
			{
				return this._N_Filter;
			}
			set
			{
				this._N_Filter.Assign(value);
			}
		}

		[Association(Name = "FK_N_Folder_Creator", Storage = "_N_Folder", ThisKey = "SubjectID", OtherKey = "CreatorID", DeleteRule = "NO ACTION")]
		public EntitySet<N_Folder> N_Folder
		{
			get
			{
				return this._N_Folder;
			}
			set
			{
				this._N_Folder.Assign(value);
			}
		}

		[Association(Name = "FK_N_Folder_LastModifiedUser", Storage = "_N_Folder_LastModifiedUser", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<N_Folder> N_Folder_LastModifiedUser
		{
			get
			{
				return this._N_Folder_LastModifiedUser;
			}
			set
			{
				this._N_Folder_LastModifiedUser.Assign(value);
			}
		}

		[Association(Name = "FK_N_MenuItem_SPM_Subject", Storage = "_N_MenuItem", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<N_MenuItem> N_MenuItem
		{
			get
			{
				return this._N_MenuItem;
			}
			set
			{
				this._N_MenuItem.Assign(value);
			}
		}

		[Association(Name = "FK_N_RssFeed_LastModifiedUser", Storage = "_N_RssFeed", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<N_RssFeed> N_RssFeed
		{
			get
			{
				return this._N_RssFeed;
			}
			set
			{
				this._N_RssFeed.Assign(value);
			}
		}

		[Association(Name = "FK_N_Settings_LastModifiedUser", Storage = "_N_Settings", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<N_Settings> N_Settings
		{
			get
			{
				return this._N_Settings;
			}
			set
			{
				this._N_Settings.Assign(value);
			}
		}

		[Association(Name = "FK_N_SqlStatementLog_LastModifiedUser", Storage = "_N_SqlStatementLog", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<N_SqlStatementLog> N_SqlStatementLog
		{
			get
			{
				return this._N_SqlStatementLog;
			}
			set
			{
				this._N_SqlStatementLog.Assign(value);
			}
		}

		[Association(Name = "FK_N_TimeZone_LastModifiedUser", Storage = "_N_TimeZone", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<N_TimeZone> N_TimeZone
		{
			get
			{
				return this._N_TimeZone;
			}
			set
			{
				this._N_TimeZone.Assign(value);
			}
		}

		[Association(Name = "FK_N_VirusScanLog_LastModifiedUser", Storage = "_N_VirusScanLog", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<N_VirusScanLog> N_VirusScanLog
		{
			get
			{
				return this._N_VirusScanLog;
			}
			set
			{
				this._N_VirusScanLog.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_LastModifiedUser", Storage = "_OrderDoc", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDocAsso_LastModifiedUser", Storage = "_OrderDocAsso", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDocAsso> OrderDocAsso
		{
			get
			{
				return this._OrderDocAsso;
			}
			set
			{
				this._OrderDocAsso.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDocImportSubject_Subject", Storage = "_OrderDocImportSubject", ThisKey = "SubjectID", OtherKey = "SubjectID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDocImportSubject> OrderDocImportSubject
		{
			get
			{
				return this._OrderDocImportSubject;
			}
			set
			{
				this._OrderDocImportSubject.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDocState_LastModifiedUser", Storage = "_OrderDocState", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDocState> OrderDocState
		{
			get
			{
				return this._OrderDocState;
			}
			set
			{
				this._OrderDocState.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDocTransition_Subject", Storage = "_OrderDocTransition", ThisKey = "SubjectID", OtherKey = "SubjectID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDocTransition> OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition;
			}
			set
			{
				this._OrderDocTransition.Assign(value);
			}
		}

		[Association(Name = "FK_PaymentOrder_LastModifiedUser", Storage = "_PaymentOrder", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<PaymentOrder> PaymentOrder
		{
			get
			{
				return this._PaymentOrder;
			}
			set
			{
				this._PaymentOrder.Assign(value);
			}
		}

		[Association(Name = "FK_Quota_LastModifiedUser", Storage = "_Quota", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<Quota> Quota
		{
			get
			{
				return this._Quota;
			}
			set
			{
				this._Quota.Assign(value);
			}
		}

		[Association(Name = "FK_QuotaRedistribution_LastModifiedUser", Storage = "_QuotaRedistribution", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<QuotaRedistribution> QuotaRedistribution
		{
			get
			{
				return this._QuotaRedistribution;
			}
			set
			{
				this._QuotaRedistribution.Assign(value);
			}
		}

		[Association(Name = "FK_QuotaRequest_LastModifiedUser", Storage = "_QuotaRequest", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<QuotaRequest> QuotaRequest
		{
			get
			{
				return this._QuotaRequest;
			}
			set
			{
				this._QuotaRequest.Assign(value);
			}
		}

		[Association(Name = "FK_QuotaRequest_Subject", Storage = "_QuotaRequest_Subject", ThisKey = "SubjectID", OtherKey = "SubjectID", DeleteRule = "NO ACTION")]
		public EntitySet<QuotaRequest> QuotaRequest_Subject
		{
			get
			{
				return this._QuotaRequest_Subject;
			}
			set
			{
				this._QuotaRequest_Subject.Assign(value);
			}
		}

		[Association(Name = "FK_Representation_LastModifiedUser", Storage = "_Representation", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<Representation> Representation
		{
			get
			{
				return this._Representation;
			}
			set
			{
				this._Representation.Assign(value);
			}
		}

		[Association(Name = "FK_RFSubject_LastModifiedUser", Storage = "_RFSubject", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<RFSubject> RFSubject
		{
			get
			{
				return this._RFSubject;
			}
			set
			{
				this._RFSubject.Assign(value);
			}
		}

		[Association(Name = "FK_SiteItem_LastModifiedUser", Storage = "_SiteItem", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<SiteItem> SiteItem
		{
			get
			{
				return this._SiteItem;
			}
			set
			{
				this._SiteItem.Assign(value);
			}
		}

		[Association(Name = "FK_SiteItemHtml_LastModifiedUser", Storage = "_SiteItemHtml", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<SiteItemHtml> SiteItemHtml
		{
			get
			{
				return this._SiteItemHtml;
			}
			set
			{
				this._SiteItemHtml.Assign(value);
			}
		}

		[Association(Name = "FK_SiteItemHtmlFolder_LastModifiedUser", Storage = "_SiteItemHtmlFolder", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<SiteItemHtmlFolder> SiteItemHtmlFolder
		{
			get
			{
				return this._SiteItemHtmlFolder;
			}
			set
			{
				this._SiteItemHtmlFolder.Assign(value);
			}
		}

		[Association(Name = "FK_SiteItemsFolder_LastModifiedUser", Storage = "_SiteItemsFolder", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<SiteItemsFolder> SiteItemsFolder
		{
			get
			{
				return this._SiteItemsFolder;
			}
			set
			{
				this._SiteItemsFolder.Assign(value);
			}
		}

		[Association(Name = "FK_SiteObject_LastModifiedUser", Storage = "_SiteObject", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<SiteObject> SiteObject
		{
			get
			{
				return this._SiteObject;
			}
			set
			{
				this._SiteObject.Assign(value);
			}
		}

		[Association(Name = "FK_SiteSection_LastModifiedUser", Storage = "_SiteSection", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<SiteSection> SiteSection
		{
			get
			{
				return this._SiteSection;
			}
			set
			{
				this._SiteSection.Assign(value);
			}
		}

		[Association(Name = "FK_SpecificationCommon_LastModifiedUser", Storage = "_SpecificationCommon", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<SpecificationCommon> SpecificationCommon
		{
			get
			{
				return this._SpecificationCommon;
			}
			set
			{
				this._SpecificationCommon.Assign(value);
			}
		}

		[Association(Name = "FK_SpecificationItem_LastModifiedUser", Storage = "_SpecificationItem", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<SpecificationItem> SpecificationItem
		{
			get
			{
				return this._SpecificationItem;
			}
			set
			{
				this._SpecificationItem.Assign(value);
			}
		}

		[Association(Name = "FK_SPM_C_RoleType_LastModifiedUser", Storage = "_SPM_C_RoleType", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<SPM_C_RoleType> SPM_C_RoleType
		{
			get
			{
				return this._SPM_C_RoleType;
			}
			set
			{
				this._SPM_C_RoleType.Assign(value);
			}
		}

		[Association(Name = "FK_SPM_Role_LastModifiedUser", Storage = "_SPM_Role", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<SPM_Role> SPM_Role
		{
			get
			{
				return this._SPM_Role;
			}
			set
			{
				this._SPM_Role.Assign(value);
			}
		}

		[Association(Name = "FK_SPM_SubjectAccess_SPM_Subject", Storage = "_SPM_SubjectAccess", ThisKey = "SubjectID", OtherKey = "SubjectID", DeleteRule = "NO ACTION")]
		public EntitySet<SPM_SubjectAccess> SPM_SubjectAccess
		{
			get
			{
				return this._SPM_SubjectAccess;
			}
			set
			{
				this._SPM_SubjectAccess.Assign(value);
			}
		}

		[Association(Name = "FK_SPM_SubjectDelegate_DelegatedFrom", Storage = "_SPM_SubjectDelegate", ThisKey = "SubjectID", OtherKey = "DelegatedFromID", DeleteRule = "NO ACTION")]
		public EntitySet<SPM_SubjectDelegate> SPM_SubjectDelegate
		{
			get
			{
				return this._SPM_SubjectDelegate;
			}
			set
			{
				this._SPM_SubjectDelegate.Assign(value);
			}
		}

		[Association(Name = "FK_SPM_SubjectDelegate_DelegatedTo", Storage = "_SPM_SubjectDelegate_DelegatedTo", ThisKey = "SubjectID", OtherKey = "DelegatedToID", DeleteRule = "NO ACTION")]
		public EntitySet<SPM_SubjectDelegate> SPM_SubjectDelegate_DelegatedTo
		{
			get
			{
				return this._SPM_SubjectDelegate_DelegatedTo;
			}
			set
			{
				this._SPM_SubjectDelegate_DelegatedTo.Assign(value);
			}
		}

		[Association(Name = "FK_SPM_SubjectDelegate_LastModifiedUser", Storage = "_SPM_SubjectDelegate_LastModifiedUser", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<SPM_SubjectDelegate> SPM_SubjectDelegate_LastModifiedUser
		{
			get
			{
				return this._SPM_SubjectDelegate_LastModifiedUser;
			}
			set
			{
				this._SPM_SubjectDelegate_LastModifiedUser.Assign(value);
			}
		}

		[Association(Name = "FK_SPM_SubjectRole_Subject", Storage = "_SPM_SubjectRole", ThisKey = "SubjectID", OtherKey = "SubjectID", DeleteRule = "CASCADE")]
		public EntitySet<SPM_SubjectRole> SPM_SubjectRole
		{
			get
			{
				return this._SPM_SubjectRole;
			}
			set
			{
				this._SPM_SubjectRole.Assign(value);
			}
		}

		[Association(Name = "FK_TechSupportLog_LastModifiedUser", Storage = "_TechSupportLog", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<TechSupportLog> TechSupportLog
		{
			get
			{
				return this._TechSupportLog;
			}
			set
			{
				this._TechSupportLog.Assign(value);
			}
		}

		[Association(Name = "FK_TechSupportLog_Responsible", Storage = "_TechSupportLog_Responsible", ThisKey = "SubjectID", OtherKey = "ResponsibleID", DeleteRule = "NO ACTION")]
		public EntitySet<TechSupportLog> TechSupportLog_Responsible
		{
			get
			{
				return this._TechSupportLog_Responsible;
			}
			set
			{
				this._TechSupportLog_Responsible.Assign(value);
			}
		}

		[Association(Name = "FK_TM_TaskExecution_LastModifiedUser", Storage = "_TM_TaskExecution", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<TM_TaskExecution> TM_TaskExecution
		{
			get
			{
				return this._TM_TaskExecution;
			}
			set
			{
				this._TM_TaskExecution.Assign(value);
			}
		}

		[Association(Name = "FK_UserActivity_LastModifiedUser", Storage = "_UserActivity", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<UserActivity> UserActivity
		{
			get
			{
				return this._UserActivity;
			}
			set
			{
				this._UserActivity.Assign(value);
			}
		}

		[Association(Name = "FK_UserInfo_SPM_Subject", Storage = "_UserInfo", ThisKey = "SubjectID", OtherKey = "UserInfoID", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
		public UserInfo UserInfo
		{
			get
			{
				return this._UserInfo.Entity;
			}
			set
			{
				UserInfo previousValue = this._UserInfo.Entity;
				if (((previousValue != value)
							|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserInfo.Entity = null;
						previousValue.SPM_Subject = null;
					}
					this._UserInfo.Entity = value;
					if ((value != null))
					{
						value.SPM_Subject = this;
					}
					this.SendPropertyChanged("UserInfo");
				}
			}
		}

		[Association(Name = "FK_VisitRecord_LastModifiedUser", Storage = "_VisitRecord", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<VisitRecord> VisitRecord
		{
			get
			{
				return this._VisitRecord;
			}
			set
			{
				this._VisitRecord.Assign(value);
			}
		}

		[Association(Name = "FK_VisitTime_LastModifiedUser", Storage = "_VisitTime", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<VisitTime> VisitTime
		{
			get
			{
				return this._VisitTime;
			}
			set
			{
				this._VisitTime.Assign(value);
			}
		}

		[Association(Name = "FK_WF_Activity_LastModifiedUser", Storage = "_WF_Activity", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<WF_Activity> WF_Activity
		{
			get
			{
				return this._WF_Activity;
			}
			set
			{
				this._WF_Activity.Assign(value);
			}
		}

		[Association(Name = "FK_WF_Transition_LastModifiedUser", Storage = "_WF_Transition", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<WF_Transition> WF_Transition
		{
			get
			{
				return this._WF_Transition;
			}
			set
			{
				this._WF_Transition.Assign(value);
			}
		}

		[Association(Name = "FK_WF_Workflow_LastModifiedUser", Storage = "_WF_Workflow", ThisKey = "SubjectID", OtherKey = "LastModifiedUserID", DeleteRule = "NO ACTION")]
		public EntitySet<WF_Workflow> WF_Workflow
		{
			get
			{
				return this._WF_Workflow;
			}
			set
			{
				this._WF_Workflow.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_Appendix(Appendix entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_Appendix(Appendix entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_AppendixQuantity(AppendixQuantity entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_AppendixQuantity(AppendixQuantity entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_Blank(Blank entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_Blank(Blank entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}

		private void detach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}

		private void attach_C_AnnulmentReason(C_AnnulmentReason entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_AnnulmentReason(C_AnnulmentReason entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_CatalogRestriction(C_CatalogRestriction entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_CatalogRestriction(C_CatalogRestriction entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_CN(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_CN(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_CNCategory(C_CNCategory entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_CNCategory(C_CNCategory entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_CNCategoryDocument(C_CNCategoryDocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_CNCategoryDocument(C_CNCategoryDocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_CNCategoryFGADocument(C_CNCategoryFGADocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_CNCategoryFGADocument(C_CNCategoryFGADocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_CNCategoryItem(C_CNCategoryItem entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_CNCategoryItem(C_CNCategoryItem entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_CNGroup(C_CNGroup entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_CNGroup(C_CNGroup entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_CNType(C_CNType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_CNType(C_CNType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_Country(C_Country entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_Country(C_Country entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_CountryGroup(C_CountryGroup entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_CountryGroup(C_CountryGroup entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_Crypto(C_Crypto entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_Crypto(C_Crypto entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_Currency(C_Currency entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_Currency(C_Currency entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_CustomHouse(C_CustomHouse entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_CustomHouse(C_CustomHouse entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_CustomHouseContact(C_CustomHouseContact entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_CustomHouseContact(C_CustomHouseContact entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_DocumentSourceType(C_DocumentSourceType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_DocumentSourceType(C_DocumentSourceType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_DocumentType(C_DocumentType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_DocumentType(C_DocumentType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_FGA(C_FGA entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_FGA(C_FGA entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_FGADocument(C_FGADocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_FGADocument(C_FGADocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_FGADocumentSigner(C_FGADocumentSigner entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_FGADocumentSigner(C_FGADocumentSigner entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_Help(C_Help entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_Help(C_Help entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_LawOrgan(C_LawOrgan entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_LawOrgan(C_LawOrgan entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_LegalDocument(C_LegalDocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_LegalDocument(C_LegalDocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_LegalDocumentType(C_LegalDocumentType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_LegalDocumentType(C_LegalDocumentType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_LicenseType(C_LicenseType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_LicenseType(C_LicenseType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_MaxTargetValidity(C_MaxTargetValidity entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_MaxTargetValidity(C_MaxTargetValidity entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_Measure(C_Measure entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_Measure(C_Measure entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_MFC(C_MFC entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_MFC(C_MFC entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_OperationType(C_OperationType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_OperationType(C_OperationType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_QuoteCategory(C_QuoteCategory entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_QuoteCategory(C_QuoteCategory entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_RES(C_RES entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_RES(C_RES entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_RFSubject(C_RFSubject entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_RFSubject(C_RFSubject entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_Tariff(C_Tariff entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_Tariff(C_Tariff entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_UseType(C_UseType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_UseType(C_UseType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_C_VisitPurpose(C_VisitPurpose entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_C_VisitPurpose(C_VisitPurpose entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_Contractor(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_Contractor(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_ContractorChiefPerson(ContractorChiefPerson entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_ContractorChiefPerson(ContractorChiefPerson entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_ControlParameters(ControlParameters entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_ControlParameters(ControlParameters entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_Copy_ContractorChiefPerson(Copy_ContractorChiefPerson entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_Copy_ContractorChiefPerson(Copy_ContractorChiefPerson entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_Employee(Employee entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_Employee(Employee entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_Subject(Employee entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Subject = this;
		}

		private void detach_Subject(Employee entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Subject = null;
		}

		private void attach_EsiaActivateLog(EsiaActivateLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_EsiaActivateLog(EsiaActivateLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_FactAnnulment(FactAnnulment entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_FactAnnulment(FactAnnulment entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_FactClose(FactClose entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_FactClose(FactClose entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_FactForm(FactForm entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_FactForm(FactForm entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_FactRegister(FactRegister entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_FactRegister(FactRegister entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_FactReject(FactReject entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_FactReject(FactReject entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_FactResume(FactResume entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_FactResume(FactResume entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_FactSuspend(FactSuspend entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_FactSuspend(FactSuspend entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_HST_MM_FormView(HST_MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_HST_MM_FormView(HST_MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_HST_N_TimeZone(HST_N_TimeZone entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_HST_N_TimeZone(HST_N_TimeZone entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_INT_Command(INT_Command entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_INT_Command(INT_Command entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_INT_Handler(INT_Handler entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_INT_Handler(INT_Handler entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_INT_System(INT_System entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_INT_System(INT_System entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_LicenseExecution(LicenseExecution entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_LicenseExecution(LicenseExecution entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_MM_Codifier(MM_Codifier entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_MM_Codifier(MM_Codifier entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_MM_CodifierValue(MM_CodifierValue entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_MM_CodifierValue(MM_CodifierValue entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_MM_DataValidation(MM_DataValidation entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_MM_DataValidation(MM_DataValidation entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_MM_FormField(MM_FormField entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_MM_FormField(MM_FormField entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_MM_FormFieldAttribute(MM_FormFieldAttribute entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_MM_FormFieldAttribute(MM_FormFieldAttribute entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_MM_FormFieldGroup(MM_FormFieldGroup entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_MM_FormFieldGroup(MM_FormFieldGroup entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_MM_FormView(MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_MM_FormView(MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_MM_MethodParameter(MM_MethodParameter entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_MM_MethodParameter(MM_MethodParameter entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_MM_ObjectProperty(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_MM_ObjectProperty(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_MM_ObjectType(MM_ObjectType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_MM_ObjectType(MM_ObjectType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_MM_Package(MM_Package entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_MM_Package(MM_Package entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_MM_Predicate(MM_Predicate entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_MM_Predicate(MM_Predicate entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_N_DownloadLog(N_DownloadLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_N_DownloadLog(N_DownloadLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_N_File(N_File entity)
		{
			this.SendPropertyChanging();
			entity.CheckedOutBy = this;
		}

		private void detach_N_File(N_File entity)
		{
			this.SendPropertyChanging();
			entity.CheckedOutBy = null;
		}

		private void attach_N_File_Creator(N_File entity)
		{
			this.SendPropertyChanging();
			entity.Creator = this;
		}

		private void detach_N_File_Creator(N_File entity)
		{
			this.SendPropertyChanging();
			entity.Creator = null;
		}

		private void attach_N_File_LastModifiedUser(N_File entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_N_File_LastModifiedUser(N_File entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_N_FileLibraryType(N_FileLibraryType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_N_FileLibraryType(N_FileLibraryType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_N_Filter(N_Filter entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Subject = this;
		}

		private void detach_N_Filter(N_Filter entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Subject = null;
		}

		private void attach_N_Folder(N_Folder entity)
		{
			this.SendPropertyChanging();
			entity.Creator = this;
		}

		private void detach_N_Folder(N_Folder entity)
		{
			this.SendPropertyChanging();
			entity.Creator = null;
		}

		private void attach_N_Folder_LastModifiedUser(N_Folder entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_N_Folder_LastModifiedUser(N_Folder entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_N_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Subject = this;
		}

		private void detach_N_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Subject = null;
		}

		private void attach_N_RssFeed(N_RssFeed entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_N_RssFeed(N_RssFeed entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_N_Settings(N_Settings entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_N_Settings(N_Settings entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_N_SqlStatementLog(N_SqlStatementLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_N_SqlStatementLog(N_SqlStatementLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_N_TimeZone(N_TimeZone entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_N_TimeZone(N_TimeZone entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_N_VirusScanLog(N_VirusScanLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_N_VirusScanLog(N_VirusScanLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_OrderDocAsso(OrderDocAsso entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_OrderDocAsso(OrderDocAsso entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_OrderDocImportSubject(OrderDocImportSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}

		private void detach_OrderDocImportSubject(OrderDocImportSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}

		private void attach_OrderDocState(OrderDocState entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_OrderDocState(OrderDocState entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}

		private void detach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}

		private void attach_PaymentOrder(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_PaymentOrder(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_QuotaRedistribution(QuotaRedistribution entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_QuotaRedistribution(QuotaRedistribution entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_QuotaRequest(QuotaRequest entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_QuotaRequest(QuotaRequest entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_QuotaRequest_Subject(QuotaRequest entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}

		private void detach_QuotaRequest_Subject(QuotaRequest entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}

		private void attach_Representation(Representation entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_Representation(Representation entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_RFSubject(RFSubject entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_RFSubject(RFSubject entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_SiteItem(SiteItem entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_SiteItem(SiteItem entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_SiteItemHtml(SiteItemHtml entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_SiteItemHtml(SiteItemHtml entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_SiteItemHtmlFolder(SiteItemHtmlFolder entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_SiteItemHtmlFolder(SiteItemHtmlFolder entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_SiteItemsFolder(SiteItemsFolder entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_SiteItemsFolder(SiteItemsFolder entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_SiteObject(SiteObject entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_SiteObject(SiteObject entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_SiteSection(SiteSection entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_SiteSection(SiteSection entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_SpecificationCommon(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_SpecificationCommon(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_SPM_C_RoleType(SPM_C_RoleType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_SPM_C_RoleType(SPM_C_RoleType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_SPM_Role(SPM_Role entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_SPM_Role(SPM_Role entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_SPM_SubjectAccess(SPM_SubjectAccess entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Subject = this;
		}

		private void detach_SPM_SubjectAccess(SPM_SubjectAccess entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Subject = null;
		}

		private void attach_SPM_SubjectDelegate(SPM_SubjectDelegate entity)
		{
			this.SendPropertyChanging();
			entity.DelegatedFrom = this;
		}

		private void detach_SPM_SubjectDelegate(SPM_SubjectDelegate entity)
		{
			this.SendPropertyChanging();
			entity.DelegatedFrom = null;
		}

		private void attach_SPM_SubjectDelegate_DelegatedTo(SPM_SubjectDelegate entity)
		{
			this.SendPropertyChanging();
			entity.DelegatedTo = this;
		}

		private void detach_SPM_SubjectDelegate_DelegatedTo(SPM_SubjectDelegate entity)
		{
			this.SendPropertyChanging();
			entity.DelegatedTo = null;
		}

		private void attach_SPM_SubjectDelegate_LastModifiedUser(SPM_SubjectDelegate entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_SPM_SubjectDelegate_LastModifiedUser(SPM_SubjectDelegate entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_SPM_SubjectRole(SPM_SubjectRole entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}

		private void detach_SPM_SubjectRole(SPM_SubjectRole entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}

		private void attach_TechSupportLog(TechSupportLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_TechSupportLog(TechSupportLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_TechSupportLog_Responsible(TechSupportLog entity)
		{
			this.SendPropertyChanging();
			entity.Responsible = this;
		}

		private void detach_TechSupportLog_Responsible(TechSupportLog entity)
		{
			this.SendPropertyChanging();
			entity.Responsible = null;
		}

		private void attach_TM_TaskExecution(TM_TaskExecution entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_TM_TaskExecution(TM_TaskExecution entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_UserActivity(UserActivity entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_UserActivity(UserActivity entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_VisitTime(VisitTime entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_VisitTime(VisitTime entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_WF_Activity(WF_Activity entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_WF_Activity(WF_Activity entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_WF_Transition(WF_Transition entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_WF_Transition(WF_Transition entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}

		private void attach_WF_Workflow(WF_Workflow entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}

		private void detach_WF_Workflow(WF_Workflow entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
	}

	[Table(Name = "dbo.SPM_SubjectAccess")]
	public partial class SPM_SubjectAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SubjectID;

		private int _ActionID;

		private EntityRef<SPM_Action> _SPM_Action;

		private EntityRef<SPM_Subject> _SPM_Subject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSubjectIDChanging(int value);
		partial void OnSubjectIDChanged();
		partial void OnActionIDChanging(int value);
		partial void OnActionIDChanged();
		#endregion

		public SPM_SubjectAccess()
		{
			this._SPM_Action = default(EntityRef<SPM_Action>);
			this._SPM_Subject = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_SubjectID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._SPM_Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}

		[Column(Storage = "_ActionID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					if (this._SPM_Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}

		[Association(Name = "FK_SPM_SubjectAccess_SPM_Action", Storage = "_SPM_Action", ThisKey = "ActionID", OtherKey = "ActionID", IsForeignKey = true)]
		public SPM_Action SPM_Action
		{
			get
			{
				return this._SPM_Action.Entity;
			}
			set
			{
				SPM_Action previousValue = this._SPM_Action.Entity;
				if (((previousValue != value)
							|| (this._SPM_Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SPM_Action.Entity = null;
						previousValue.SPM_SubjectAccess.Remove(this);
					}
					this._SPM_Action.Entity = value;
					if ((value != null))
					{
						value.SPM_SubjectAccess.Add(this);
						this._ActionID = value.ActionID;
					}
					else
					{
						this._ActionID = default(int);
					}
					this.SendPropertyChanged("SPM_Action");
				}
			}
		}

		[Association(Name = "FK_SPM_SubjectAccess_SPM_Subject", Storage = "_SPM_Subject", ThisKey = "SubjectID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject SPM_Subject
		{
			get
			{
				return this._SPM_Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._SPM_Subject.Entity;
				if (((previousValue != value)
							|| (this._SPM_Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SPM_Subject.Entity = null;
						previousValue.SPM_SubjectAccess.Remove(this);
					}
					this._SPM_Subject.Entity = value;
					if ((value != null))
					{
						value.SPM_SubjectAccess.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("SPM_Subject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.SPM_SubjectDelegate")]
	public partial class SPM_SubjectDelegate : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SubjectDelegateID;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private int _DelegatedToID;

		private int _DelegatedFromID;

		private System.DateTime _BeginDate;

		private System.DateTime _EndDate;

		private bool _IsDeleted;

		private EntityRef<SPM_Subject> _DelegatedFrom;

		private EntityRef<SPM_Subject> _DelegatedTo;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSubjectDelegateIDChanging(int value);
		partial void OnSubjectDelegateIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnDelegatedToIDChanging(int value);
		partial void OnDelegatedToIDChanged();
		partial void OnDelegatedFromIDChanging(int value);
		partial void OnDelegatedFromIDChanged();
		partial void OnBeginDateChanging(System.DateTime value);
		partial void OnBeginDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		#endregion

		public SPM_SubjectDelegate()
		{
			this._DelegatedFrom = default(EntityRef<SPM_Subject>);
			this._DelegatedTo = default(EntityRef<SPM_Subject>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_SubjectDelegateID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int SubjectDelegateID
		{
			get
			{
				return this._SubjectDelegateID;
			}
			set
			{
				if ((this._SubjectDelegateID != value))
				{
					this.OnSubjectDelegateIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectDelegateID = value;
					this.SendPropertyChanged("SubjectDelegateID");
					this.OnSubjectDelegateIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_DelegatedToID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int DelegatedToID
		{
			get
			{
				return this._DelegatedToID;
			}
			set
			{
				if ((this._DelegatedToID != value))
				{
					if (this._DelegatedTo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDelegatedToIDChanging(value);
					this.SendPropertyChanging();
					this._DelegatedToID = value;
					this.SendPropertyChanged("DelegatedToID");
					this.OnDelegatedToIDChanged();
				}
			}
		}

		[Column(Storage = "_DelegatedFromID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int DelegatedFromID
		{
			get
			{
				return this._DelegatedFromID;
			}
			set
			{
				if ((this._DelegatedFromID != value))
				{
					if (this._DelegatedFrom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDelegatedFromIDChanging(value);
					this.SendPropertyChanging();
					this._DelegatedFromID = value;
					this.SendPropertyChanged("DelegatedFromID");
					this.OnDelegatedFromIDChanged();
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", AutoSync = AutoSync.Always, DbType = "Bit NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Association(Name = "FK_SPM_SubjectDelegate_DelegatedFrom", Storage = "_DelegatedFrom", ThisKey = "DelegatedFromID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject DelegatedFrom
		{
			get
			{
				return this._DelegatedFrom.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._DelegatedFrom.Entity;
				if (((previousValue != value)
							|| (this._DelegatedFrom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DelegatedFrom.Entity = null;
						previousValue.SPM_SubjectDelegate.Remove(this);
					}
					this._DelegatedFrom.Entity = value;
					if ((value != null))
					{
						value.SPM_SubjectDelegate.Add(this);
						this._DelegatedFromID = value.SubjectID;
					}
					else
					{
						this._DelegatedFromID = default(int);
					}
					this.SendPropertyChanged("DelegatedFrom");
				}
			}
		}

		[Association(Name = "FK_SPM_SubjectDelegate_DelegatedTo", Storage = "_DelegatedTo", ThisKey = "DelegatedToID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject DelegatedTo
		{
			get
			{
				return this._DelegatedTo.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._DelegatedTo.Entity;
				if (((previousValue != value)
							|| (this._DelegatedTo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DelegatedTo.Entity = null;
						previousValue.SPM_SubjectDelegate_DelegatedTo.Remove(this);
					}
					this._DelegatedTo.Entity = value;
					if ((value != null))
					{
						value.SPM_SubjectDelegate_DelegatedTo.Add(this);
						this._DelegatedToID = value.SubjectID;
					}
					else
					{
						this._DelegatedToID = default(int);
					}
					this.SendPropertyChanged("DelegatedTo");
				}
			}
		}

		[Association(Name = "FK_SPM_SubjectDelegate_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.SPM_SubjectDelegate_LastModifiedUser.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.SPM_SubjectDelegate_LastModifiedUser.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.SPM_SubjectRole")]
	public partial class SPM_SubjectRole : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SubjectID;

		private int _RoleID;

		private EntityRef<SPM_Role> _Role;

		private EntityRef<SPM_Subject> _Subject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSubjectIDChanging(int value);
		partial void OnSubjectIDChanged();
		partial void OnRoleIDChanging(int value);
		partial void OnRoleIDChanged();
		#endregion

		public SPM_SubjectRole()
		{
			this._Role = default(EntityRef<SPM_Role>);
			this._Subject = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_SubjectID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}

		[Column(Storage = "_RoleID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}

		[Association(Name = "FK_SPM_SubjectRole_Role", Storage = "_Role", ThisKey = "RoleID", OtherKey = "RoleID", IsForeignKey = true)]
		public SPM_Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				SPM_Role previousValue = this._Role.Entity;
				if (((previousValue != value)
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.SPM_SubjectRole.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.SPM_SubjectRole.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}

		[Association(Name = "FK_SPM_SubjectRole_Subject", Storage = "_Subject", ThisKey = "SubjectID", OtherKey = "SubjectID", IsForeignKey = true, DeleteOnNull = true)]
		public SPM_Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._Subject.Entity;
				if (((previousValue != value)
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.SPM_SubjectRole.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.SPM_SubjectRole.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.TechSupportLog")]
	public partial class TechSupportLog : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _TechSupportLogID;

		private string _Email;

		private string _FIO;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Login;

		private string _OrderDocTitle;

		private string _Title;

		private System.Nullable<System.DateTime> _CreateDate;

		private string _Comments;

		private System.Nullable<int> _ResponsibleID;

		private System.Nullable<System.DateTime> _CloseDate;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<SPM_Subject> _Responsible;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnTechSupportLogIDChanging(int value);
		partial void OnTechSupportLogIDChanged();
		partial void OnEmailChanging(string value);
		partial void OnEmailChanged();
		partial void OnFIOChanging(string value);
		partial void OnFIOChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnLoginChanging(string value);
		partial void OnLoginChanged();
		partial void OnOrderDocTitleChanging(string value);
		partial void OnOrderDocTitleChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
		partial void OnCreateDateChanged();
		partial void OnCommentsChanging(string value);
		partial void OnCommentsChanged();
		partial void OnResponsibleIDChanging(System.Nullable<int> value);
		partial void OnResponsibleIDChanged();
		partial void OnCloseDateChanging(System.Nullable<System.DateTime> value);
		partial void OnCloseDateChanged();
		#endregion

		public TechSupportLog()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Responsible = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_TechSupportLogID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int TechSupportLogID
		{
			get
			{
				return this._TechSupportLogID;
			}
			set
			{
				if ((this._TechSupportLogID != value))
				{
					this.OnTechSupportLogIDChanging(value);
					this.SendPropertyChanging();
					this._TechSupportLogID = value;
					this.SendPropertyChanged("TechSupportLogID");
					this.OnTechSupportLogIDChanged();
				}
			}
		}

		[Column(Storage = "_Email", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}

		[Column(Storage = "_FIO", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string FIO
		{
			get
			{
				return this._FIO;
			}
			set
			{
				if ((this._FIO != value))
				{
					this.OnFIOChanging(value);
					this.SendPropertyChanging();
					this._FIO = value;
					this.SendPropertyChanged("FIO");
					this.OnFIOChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Login", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}

		[Column(Storage = "_OrderDocTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string OrderDocTitle
		{
			get
			{
				return this._OrderDocTitle;
			}
			set
			{
				if ((this._OrderDocTitle != value))
				{
					this.OnOrderDocTitleChanging(value);
					this.SendPropertyChanging();
					this._OrderDocTitle = value;
					this.SendPropertyChanged("OrderDocTitle");
					this.OnOrderDocTitleChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_CreateDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}

		[Column(Storage = "_Comments", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}

		[Column(Storage = "_ResponsibleID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ResponsibleID
		{
			get
			{
				return this._ResponsibleID;
			}
			set
			{
				if ((this._ResponsibleID != value))
				{
					if (this._Responsible.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResponsibleIDChanging(value);
					this.SendPropertyChanging();
					this._ResponsibleID = value;
					this.SendPropertyChanged("ResponsibleID");
					this.OnResponsibleIDChanged();
				}
			}
		}

		[Column(Storage = "_CloseDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CloseDate
		{
			get
			{
				return this._CloseDate;
			}
			set
			{
				if ((this._CloseDate != value))
				{
					this.OnCloseDateChanging(value);
					this.SendPropertyChanging();
					this._CloseDate = value;
					this.SendPropertyChanged("CloseDate");
					this.OnCloseDateChanged();
				}
			}
		}

		[Association(Name = "FK_TechSupportLog_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.TechSupportLog.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.TechSupportLog.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_TechSupportLog_Responsible", Storage = "_Responsible", ThisKey = "ResponsibleID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject Responsible
		{
			get
			{
				return this._Responsible.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._Responsible.Entity;
				if (((previousValue != value)
							|| (this._Responsible.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Responsible.Entity = null;
						previousValue.TechSupportLog_Responsible.Remove(this);
					}
					this._Responsible.Entity = value;
					if ((value != null))
					{
						value.TechSupportLog_Responsible.Add(this);
						this._ResponsibleID = value.SubjectID;
					}
					else
					{
						this._ResponsibleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Responsible");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.TM_Task")]
	public partial class TM_Task : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _TaskID;

		private string _Title;

		private string _Class;

		private bool _StartType;

		private string _Method;

		private int _Interval;

		private System.Nullable<System.DateTime> _LastStartDate;

		private bool _IsSuccessfull;

		private bool _IsActive;

		private bool _StartFromService;

		private System.Nullable<int> _ErrorLogID;

		private int _ExecutionTimeout;

		private EntitySet<TM_TaskExecution> _TM_TaskExecution;

		private EntitySet<TM_TaskParameter> _Parameters;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnTaskIDChanging(int value);
		partial void OnTaskIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnClassChanging(string value);
		partial void OnClassChanged();
		partial void OnStartTypeChanging(bool value);
		partial void OnStartTypeChanged();
		partial void OnMethodChanging(string value);
		partial void OnMethodChanged();
		partial void OnIntervalChanging(int value);
		partial void OnIntervalChanged();
		partial void OnLastStartDateChanging(System.Nullable<System.DateTime> value);
		partial void OnLastStartDateChanged();
		partial void OnIsSuccessfullChanging(bool value);
		partial void OnIsSuccessfullChanged();
		partial void OnIsActiveChanging(bool value);
		partial void OnIsActiveChanged();
		partial void OnStartFromServiceChanging(bool value);
		partial void OnStartFromServiceChanged();
		partial void OnErrorLogIDChanging(System.Nullable<int> value);
		partial void OnErrorLogIDChanged();
		partial void OnExecutionTimeoutChanging(int value);
		partial void OnExecutionTimeoutChanged();
		#endregion

		public TM_Task()
		{
			this._TM_TaskExecution = new EntitySet<TM_TaskExecution>(new Action<TM_TaskExecution>(this.attach_TM_TaskExecution), new Action<TM_TaskExecution>(this.detach_TM_TaskExecution));
			this._Parameters = new EntitySet<TM_TaskParameter>(new Action<TM_TaskParameter>(this.attach_Parameters), new Action<TM_TaskParameter>(this.detach_Parameters));
			OnCreated();
		}

		[Column(Storage = "_TaskID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(100) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_Class", DbType = "NVarChar(150) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}

		[Column(Storage = "_StartType", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool StartType
		{
			get
			{
				return this._StartType;
			}
			set
			{
				if ((this._StartType != value))
				{
					this.OnStartTypeChanging(value);
					this.SendPropertyChanging();
					this._StartType = value;
					this.SendPropertyChanged("StartType");
					this.OnStartTypeChanged();
				}
			}
		}

		[Column(Storage = "_Method", DbType = "NVarChar(100) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}

		[Column(Storage = "_Interval", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int Interval
		{
			get
			{
				return this._Interval;
			}
			set
			{
				if ((this._Interval != value))
				{
					this.OnIntervalChanging(value);
					this.SendPropertyChanging();
					this._Interval = value;
					this.SendPropertyChanged("Interval");
					this.OnIntervalChanged();
				}
			}
		}

		[Column(Storage = "_LastStartDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastStartDate
		{
			get
			{
				return this._LastStartDate;
			}
			set
			{
				if ((this._LastStartDate != value))
				{
					this.OnLastStartDateChanging(value);
					this.SendPropertyChanging();
					this._LastStartDate = value;
					this.SendPropertyChanged("LastStartDate");
					this.OnLastStartDateChanged();
				}
			}
		}

		[Column(Storage = "_IsSuccessfull", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsSuccessfull
		{
			get
			{
				return this._IsSuccessfull;
			}
			set
			{
				if ((this._IsSuccessfull != value))
				{
					this.OnIsSuccessfullChanging(value);
					this.SendPropertyChanging();
					this._IsSuccessfull = value;
					this.SendPropertyChanged("IsSuccessfull");
					this.OnIsSuccessfullChanged();
				}
			}
		}

		[Column(Storage = "_IsActive", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}

		[Column(Storage = "_StartFromService", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool StartFromService
		{
			get
			{
				return this._StartFromService;
			}
			set
			{
				if ((this._StartFromService != value))
				{
					this.OnStartFromServiceChanging(value);
					this.SendPropertyChanging();
					this._StartFromService = value;
					this.SendPropertyChanged("StartFromService");
					this.OnStartFromServiceChanged();
				}
			}
		}

		[Column(Storage = "_ErrorLogID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ErrorLogID
		{
			get
			{
				return this._ErrorLogID;
			}
			set
			{
				if ((this._ErrorLogID != value))
				{
					this.OnErrorLogIDChanging(value);
					this.SendPropertyChanging();
					this._ErrorLogID = value;
					this.SendPropertyChanged("ErrorLogID");
					this.OnErrorLogIDChanged();
				}
			}
		}

		[Column(Storage = "_ExecutionTimeout", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ExecutionTimeout
		{
			get
			{
				return this._ExecutionTimeout;
			}
			set
			{
				if ((this._ExecutionTimeout != value))
				{
					this.OnExecutionTimeoutChanging(value);
					this.SendPropertyChanging();
					this._ExecutionTimeout = value;
					this.SendPropertyChanged("ExecutionTimeout");
					this.OnExecutionTimeoutChanged();
				}
			}
		}

		[Association(Name = "FK_TM_TaskExecution_Task", Storage = "_TM_TaskExecution", ThisKey = "TaskID", OtherKey = "TaskID", DeleteRule = "CASCADE")]
		public EntitySet<TM_TaskExecution> TM_TaskExecution
		{
			get
			{
				return this._TM_TaskExecution;
			}
			set
			{
				this._TM_TaskExecution.Assign(value);
			}
		}

		[Association(Name = "FK_TM_TaskParameter_Parent", Storage = "_Parameters", ThisKey = "TaskID", OtherKey = "ParentID", DeleteRule = "NO ACTION")]
		public EntitySet<TM_TaskParameter> Parameters
		{
			get
			{
				return this._Parameters;
			}
			set
			{
				this._Parameters.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_TM_TaskExecution(TM_TaskExecution entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}

		private void detach_TM_TaskExecution(TM_TaskExecution entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}

		private void attach_Parameters(TM_TaskParameter entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}

		private void detach_Parameters(TM_TaskParameter entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
	}

	[Table(Name = "dbo.TM_TaskExecution")]
	public partial class TM_TaskExecution : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _TaskExecutionID;

		private System.DateTime _StartDate;

		private System.Nullable<System.DateTime> _FinishDate;

		private bool _IsSuccessfull;

		private string _MachineName;

		private string _ResultXml;

		private string _ExecutionLog;

		private int _TaskID;

		private int _LastModifiedUserID;

		private System.DateTime _LastModifiedDate;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<TM_Task> _Task;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnTaskExecutionIDChanging(int value);
		partial void OnTaskExecutionIDChanged();
		partial void OnStartDateChanging(System.DateTime value);
		partial void OnStartDateChanged();
		partial void OnFinishDateChanging(System.Nullable<System.DateTime> value);
		partial void OnFinishDateChanged();
		partial void OnIsSuccessfullChanging(bool value);
		partial void OnIsSuccessfullChanged();
		partial void OnMachineNameChanging(string value);
		partial void OnMachineNameChanged();
		partial void OnResultXmlChanging(string value);
		partial void OnResultXmlChanged();
		partial void OnExecutionLogChanging(string value);
		partial void OnExecutionLogChanged();
		partial void OnTaskIDChanging(int value);
		partial void OnTaskIDChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		#endregion

		public TM_TaskExecution()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Task = default(EntityRef<TM_Task>);
			OnCreated();
		}

		[Column(Storage = "_TaskExecutionID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int TaskExecutionID
		{
			get
			{
				return this._TaskExecutionID;
			}
			set
			{
				if ((this._TaskExecutionID != value))
				{
					this.OnTaskExecutionIDChanging(value);
					this.SendPropertyChanging();
					this._TaskExecutionID = value;
					this.SendPropertyChanged("TaskExecutionID");
					this.OnTaskExecutionIDChanged();
				}
			}
		}

		[Column(Storage = "_StartDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}

		[Column(Storage = "_FinishDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FinishDate
		{
			get
			{
				return this._FinishDate;
			}
			set
			{
				if ((this._FinishDate != value))
				{
					this.OnFinishDateChanging(value);
					this.SendPropertyChanging();
					this._FinishDate = value;
					this.SendPropertyChanged("FinishDate");
					this.OnFinishDateChanged();
				}
			}
		}

		[Column(Storage = "_IsSuccessfull", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsSuccessfull
		{
			get
			{
				return this._IsSuccessfull;
			}
			set
			{
				if ((this._IsSuccessfull != value))
				{
					this.OnIsSuccessfullChanging(value);
					this.SendPropertyChanging();
					this._IsSuccessfull = value;
					this.SendPropertyChanged("IsSuccessfull");
					this.OnIsSuccessfullChanged();
				}
			}
		}

		[Column(Storage = "_MachineName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}

		[Column(Storage = "_ResultXml", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ResultXml
		{
			get
			{
				return this._ResultXml;
			}
			set
			{
				if ((this._ResultXml != value))
				{
					this.OnResultXmlChanging(value);
					this.SendPropertyChanging();
					this._ResultXml = value;
					this.SendPropertyChanged("ResultXml");
					this.OnResultXmlChanged();
				}
			}
		}

		[Column(Storage = "_ExecutionLog", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ExecutionLog
		{
			get
			{
				return this._ExecutionLog;
			}
			set
			{
				if ((this._ExecutionLog != value))
				{
					this.OnExecutionLogChanging(value);
					this.SendPropertyChanging();
					this._ExecutionLog = value;
					this.SendPropertyChanged("ExecutionLog");
					this.OnExecutionLogChanged();
				}
			}
		}

		[Column(Storage = "_TaskID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Association(Name = "FK_TM_TaskExecution_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.TM_TaskExecution.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.TM_TaskExecution.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_TM_TaskExecution_Task", Storage = "_Task", ThisKey = "TaskID", OtherKey = "TaskID", IsForeignKey = true, DeleteOnNull = true)]
		public TM_Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				TM_Task previousValue = this._Task.Entity;
				if (((previousValue != value)
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.TM_TaskExecution.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.TM_TaskExecution.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.TM_TaskParameter")]
	public partial class TM_TaskParameter : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _TaskParameterID;

		private string _Title;

		private string _SysName;

		private string _Value;

		private int _ParentID;

		private int _SeqNo;

		private EntityRef<TM_Task> _Parent;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnTaskParameterIDChanging(int value);
		partial void OnTaskParameterIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnValueChanging(string value);
		partial void OnValueChanged();
		partial void OnParentIDChanging(int value);
		partial void OnParentIDChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		#endregion

		public TM_TaskParameter()
		{
			this._Parent = default(EntityRef<TM_Task>);
			OnCreated();
		}

		[Column(Storage = "_TaskParameterID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int TaskParameterID
		{
			get
			{
				return this._TaskParameterID;
			}
			set
			{
				if ((this._TaskParameterID != value))
				{
					this.OnTaskParameterIDChanging(value);
					this.SendPropertyChanging();
					this._TaskParameterID = value;
					this.SendPropertyChanged("TaskParameterID");
					this.OnTaskParameterIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(100) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_Value", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Association(Name = "FK_TM_TaskParameter_Parent", Storage = "_Parent", ThisKey = "ParentID", OtherKey = "TaskID", IsForeignKey = true)]
		public TM_Task Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				TM_Task previousValue = this._Parent.Entity;
				if (((previousValue != value)
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.Parameters.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.Parameters.Add(this);
						this._ParentID = value.TaskID;
					}
					else
					{
						this._ParentID = default(int);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.TraceLog")]
	public partial class TraceLog : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _TraceLogID;

		private System.DateTime _Timestamp;

		private string _MachineName;

		private int _SubjectID;

		private System.Nullable<System.Guid> _OrderDocGUID;

		private string _TraceText;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnTraceLogIDChanging(int value);
		partial void OnTraceLogIDChanged();
		partial void OnTimestampChanging(System.DateTime value);
		partial void OnTimestampChanged();
		partial void OnMachineNameChanging(string value);
		partial void OnMachineNameChanged();
		partial void OnSubjectIDChanging(int value);
		partial void OnSubjectIDChanged();
		partial void OnOrderDocGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnOrderDocGUIDChanged();
		partial void OnTraceTextChanging(string value);
		partial void OnTraceTextChanged();
		#endregion

		public TraceLog()
		{
			OnCreated();
		}

		[Column(Storage = "_TraceLogID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int TraceLogID
		{
			get
			{
				return this._TraceLogID;
			}
			set
			{
				if ((this._TraceLogID != value))
				{
					this.OnTraceLogIDChanging(value);
					this.SendPropertyChanging();
					this._TraceLogID = value;
					this.SendPropertyChanged("TraceLogID");
					this.OnTraceLogIDChanged();
				}
			}
		}

		[Column(Storage = "_Timestamp", DbType = "DateTime2(7) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}

		[Column(Storage = "_MachineName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}

		[Column(Storage = "_SubjectID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}

		[Column(Storage = "_OrderDocGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}

		[Column(Storage = "_TraceText", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string TraceText
		{
			get
			{
				return this._TraceText;
			}
			set
			{
				if ((this._TraceText != value))
				{
					this.OnTraceTextChanging(value);
					this.SendPropertyChanging();
					this._TraceText = value;
					this.SendPropertyChanged("TraceText");
					this.OnTraceTextChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.UserActivity")]
	public partial class UserActivity : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _UserActivityID;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private string _ObjectKey;

		private string _ObjectTypeSysName;

		private string _Action;

		private string _UserTitle;

		private string _ObjectTypeTitle;

		private string _IP;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnUserActivityIDChanging(int value);
		partial void OnUserActivityIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnObjectKeyChanging(string value);
		partial void OnObjectKeyChanged();
		partial void OnObjectTypeSysNameChanging(string value);
		partial void OnObjectTypeSysNameChanged();
		partial void OnActionChanging(string value);
		partial void OnActionChanged();
		partial void OnUserTitleChanging(string value);
		partial void OnUserTitleChanged();
		partial void OnObjectTypeTitleChanging(string value);
		partial void OnObjectTypeTitleChanged();
		partial void OnIPChanging(string value);
		partial void OnIPChanged();
		#endregion

		public UserActivity()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_UserActivityID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int UserActivityID
		{
			get
			{
				return this._UserActivityID;
			}
			set
			{
				if ((this._UserActivityID != value))
				{
					this.OnUserActivityIDChanging(value);
					this.SendPropertyChanging();
					this._UserActivityID = value;
					this.SendPropertyChanged("UserActivityID");
					this.OnUserActivityIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_ObjectKey", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ObjectKey
		{
			get
			{
				return this._ObjectKey;
			}
			set
			{
				if ((this._ObjectKey != value))
				{
					this.OnObjectKeyChanging(value);
					this.SendPropertyChanging();
					this._ObjectKey = value;
					this.SendPropertyChanged("ObjectKey");
					this.OnObjectKeyChanged();
				}
			}
		}

		[Column(Storage = "_ObjectTypeSysName", DbType = "NVarChar(50)", UpdateCheck = UpdateCheck.Never)]
		public string ObjectTypeSysName
		{
			get
			{
				return this._ObjectTypeSysName;
			}
			set
			{
				if ((this._ObjectTypeSysName != value))
				{
					this.OnObjectTypeSysNameChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeSysName = value;
					this.SendPropertyChanged("ObjectTypeSysName");
					this.OnObjectTypeSysNameChanged();
				}
			}
		}

		[Column(Storage = "_Action", DbType = "NVarChar(250) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}

		[Column(Storage = "_UserTitle", DbType = "NVarChar(150) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string UserTitle
		{
			get
			{
				return this._UserTitle;
			}
			set
			{
				if ((this._UserTitle != value))
				{
					this.OnUserTitleChanging(value);
					this.SendPropertyChanging();
					this._UserTitle = value;
					this.SendPropertyChanged("UserTitle");
					this.OnUserTitleChanged();
				}
			}
		}

		[Column(Storage = "_ObjectTypeTitle", DbType = "NVarChar(100) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ObjectTypeTitle
		{
			get
			{
				return this._ObjectTypeTitle;
			}
			set
			{
				if ((this._ObjectTypeTitle != value))
				{
					this.OnObjectTypeTitleChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeTitle = value;
					this.SendPropertyChanged("ObjectTypeTitle");
					this.OnObjectTypeTitleChanged();
				}
			}
		}

		[Column(Storage = "_IP", DbType = "NVarChar(128) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}

		[Association(Name = "FK_UserActivity_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.UserActivity.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.UserActivity.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.UserInfo")]
	public partial class UserInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _UserInfoID;

		private string _Phone;

		private string _Post;

		private System.Nullable<System.Guid> _ContractorGUID;

		private char _Type;

		private System.Nullable<int> _RFSubjectID;

		private System.Nullable<int> _RepresentationID;

		private bool _IsESIA;

		private EntityRef<HST_Contractor> _Contractor;

		private EntityRef<Representation> _Representation;

		private EntityRef<C_RFSubject> _RFSubject;

		private EntityRef<SPM_Subject> _SPM_Subject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnUserInfoIDChanging(int value);
		partial void OnUserInfoIDChanged();
		partial void OnPhoneChanging(string value);
		partial void OnPhoneChanged();
		partial void OnPostChanging(string value);
		partial void OnPostChanged();
		partial void OnContractorGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnContractorGUIDChanged();
		partial void OnTypeChanging(char value);
		partial void OnTypeChanged();
		partial void OnRFSubjectIDChanging(System.Nullable<int> value);
		partial void OnRFSubjectIDChanged();
		partial void OnRepresentationIDChanging(System.Nullable<int> value);
		partial void OnRepresentationIDChanged();
		partial void OnIsESIAChanging(bool value);
		partial void OnIsESIAChanged();
		#endregion

		public UserInfo()
		{
			this._Contractor = default(EntityRef<HST_Contractor>);
			this._Representation = default(EntityRef<Representation>);
			this._RFSubject = default(EntityRef<C_RFSubject>);
			this._SPM_Subject = default(EntityRef<SPM_Subject>);
			OnCreated();
		}

		[Column(Storage = "_UserInfoID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int UserInfoID
		{
			get
			{
				return this._UserInfoID;
			}
			set
			{
				if ((this._UserInfoID != value))
				{
					if (this._SPM_Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserInfoIDChanging(value);
					this.SendPropertyChanging();
					this._UserInfoID = value;
					this.SendPropertyChanged("UserInfoID");
					this.OnUserInfoIDChanged();
				}
			}
		}

		[Column(Storage = "_Phone", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}

		[Column(Storage = "_Post", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				if ((this._Post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._Post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}

		[Column(Storage = "_ContractorGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorGUID = value;
					this.SendPropertyChanged("ContractorGUID");
					this.OnContractorGUIDChanged();
				}
			}
		}

		[Column(Storage = "_Type", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}

		[Column(Storage = "_RFSubjectID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> RFSubjectID
		{
			get
			{
				return this._RFSubjectID;
			}
			set
			{
				if ((this._RFSubjectID != value))
				{
					if (this._RFSubject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRFSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._RFSubjectID = value;
					this.SendPropertyChanged("RFSubjectID");
					this.OnRFSubjectIDChanged();
				}
			}
		}

		[Column(Storage = "_RepresentationID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					if (this._Representation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentationID = value;
					this.SendPropertyChanged("RepresentationID");
					this.OnRepresentationIDChanged();
				}
			}
		}

		[Column(Storage = "_IsESIA", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsESIA
		{
			get
			{
				return this._IsESIA;
			}
			set
			{
				if ((this._IsESIA != value))
				{
					this.OnIsESIAChanging(value);
					this.SendPropertyChanging();
					this._IsESIA = value;
					this.SendPropertyChanged("IsESIA");
					this.OnIsESIAChanged();
				}
			}
		}

		[Association(Name = "FK_UserInfo_Contractor", Storage = "_Contractor", ThisKey = "ContractorGUID", OtherKey = "ContractorVersionGUID", IsForeignKey = true)]
		public HST_Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				HST_Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value)
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.UserInfo.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.UserInfo.Add(this);
						this._ContractorGUID = value.ContractorVersionGUID;
					}
					else
					{
						this._ContractorGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}

		[Association(Name = "FK_UserInfo_Representation", Storage = "_Representation", ThisKey = "RepresentationID", OtherKey = "RepresentationID", IsForeignKey = true)]
		public Representation Representation
		{
			get
			{
				return this._Representation.Entity;
			}
			set
			{
				Representation previousValue = this._Representation.Entity;
				if (((previousValue != value)
							|| (this._Representation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representation.Entity = null;
						previousValue.UserInfo.Remove(this);
					}
					this._Representation.Entity = value;
					if ((value != null))
					{
						value.UserInfo.Add(this);
						this._RepresentationID = value.RepresentationID;
					}
					else
					{
						this._RepresentationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Representation");
				}
			}
		}

		[Association(Name = "FK_UserInfo_RFSubject", Storage = "_RFSubject", ThisKey = "RFSubjectID", OtherKey = "RFSubjectID", IsForeignKey = true)]
		public C_RFSubject RFSubject
		{
			get
			{
				return this._RFSubject.Entity;
			}
			set
			{
				C_RFSubject previousValue = this._RFSubject.Entity;
				if (((previousValue != value)
							|| (this._RFSubject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RFSubject.Entity = null;
						previousValue.UserInfo.Remove(this);
					}
					this._RFSubject.Entity = value;
					if ((value != null))
					{
						value.UserInfo.Add(this);
						this._RFSubjectID = value.RFSubjectID;
					}
					else
					{
						this._RFSubjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RFSubject");
				}
			}
		}

		[Association(Name = "FK_UserInfo_SPM_Subject", Storage = "_SPM_Subject", ThisKey = "UserInfoID", OtherKey = "SubjectID", IsForeignKey = true, DeleteOnNull = true)]
		public SPM_Subject SPM_Subject
		{
			get
			{
				return this._SPM_Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._SPM_Subject.Entity;
				if (((previousValue != value)
							|| (this._SPM_Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SPM_Subject.Entity = null;
						previousValue.UserInfo = null;
					}
					this._SPM_Subject.Entity = value;
					if ((value != null))
					{
						value.UserInfo = this;
						this._UserInfoID = value.SubjectID;
					}
					else
					{
						this._UserInfoID = default(int);
					}
					this.SendPropertyChanged("SPM_Subject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_Article")]
	public partial class V_Article : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ArticleID;

		private System.Nullable<int> _File1FileID;

		private System.Nullable<int> _File2FileID;

		private System.Nullable<int> _File3FileID;

		private System.Nullable<int> _File4FileID;

		private System.Nullable<int> _File5FileID;

		private System.Nullable<int> _ImageFileID;

		private string _LanguageCode;

		private string _Content;

		private string _Summary;

		private int _SiteObjectID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private string _Title;

		private int _LastModifiedUserID;

		private int _SeqNo;

		private int _ParentID;

		private string _ClassName;

		private bool _IsPublished;

		private string _SubTitle;

		private System.DateTime _CreateDate;

		private System.Nullable<System.DateTime> _PublishDate;

		private EntityRef<Article> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnArticleIDChanging(int value);
		partial void OnArticleIDChanged();
		partial void OnFile1FileIDChanging(System.Nullable<int> value);
		partial void OnFile1FileIDChanged();
		partial void OnFile2FileIDChanging(System.Nullable<int> value);
		partial void OnFile2FileIDChanged();
		partial void OnFile3FileIDChanging(System.Nullable<int> value);
		partial void OnFile3FileIDChanged();
		partial void OnFile4FileIDChanging(System.Nullable<int> value);
		partial void OnFile4FileIDChanged();
		partial void OnFile5FileIDChanging(System.Nullable<int> value);
		partial void OnFile5FileIDChanged();
		partial void OnImageFileIDChanging(System.Nullable<int> value);
		partial void OnImageFileIDChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnContentChanging(string value);
		partial void OnContentChanged();
		partial void OnSummaryChanging(string value);
		partial void OnSummaryChanged();
		partial void OnSiteObjectIDChanging(int value);
		partial void OnSiteObjectIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnParentIDChanging(int value);
		partial void OnParentIDChanged();
		partial void OnClassNameChanging(string value);
		partial void OnClassNameChanged();
		partial void OnIsPublishedChanging(bool value);
		partial void OnIsPublishedChanged();
		partial void OnSubTitleChanging(string value);
		partial void OnSubTitleChanged();
		partial void OnCreateDateChanging(System.DateTime value);
		partial void OnCreateDateChanged();
		partial void OnPublishDateChanging(System.Nullable<System.DateTime> value);
		partial void OnPublishDateChanged();
		#endregion

		public V_Article()
		{
			this._MainObject = default(EntityRef<Article>);
			OnCreated();
		}

		[Column(Storage = "_ArticleID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int ArticleID
		{
			get
			{
				return this._ArticleID;
			}
			set
			{
				if ((this._ArticleID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArticleIDChanging(value);
					this.SendPropertyChanging();
					this._ArticleID = value;
					this.SendPropertyChanged("ArticleID");
					this.OnArticleIDChanged();
				}
			}
		}

		[Column(Storage = "_File1FileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> File1FileID
		{
			get
			{
				return this._File1FileID;
			}
			set
			{
				if ((this._File1FileID != value))
				{
					this.OnFile1FileIDChanging(value);
					this.SendPropertyChanging();
					this._File1FileID = value;
					this.SendPropertyChanged("File1FileID");
					this.OnFile1FileIDChanged();
				}
			}
		}

		[Column(Storage = "_File2FileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> File2FileID
		{
			get
			{
				return this._File2FileID;
			}
			set
			{
				if ((this._File2FileID != value))
				{
					this.OnFile2FileIDChanging(value);
					this.SendPropertyChanging();
					this._File2FileID = value;
					this.SendPropertyChanged("File2FileID");
					this.OnFile2FileIDChanged();
				}
			}
		}

		[Column(Storage = "_File3FileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> File3FileID
		{
			get
			{
				return this._File3FileID;
			}
			set
			{
				if ((this._File3FileID != value))
				{
					this.OnFile3FileIDChanging(value);
					this.SendPropertyChanging();
					this._File3FileID = value;
					this.SendPropertyChanged("File3FileID");
					this.OnFile3FileIDChanged();
				}
			}
		}

		[Column(Storage = "_File4FileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> File4FileID
		{
			get
			{
				return this._File4FileID;
			}
			set
			{
				if ((this._File4FileID != value))
				{
					this.OnFile4FileIDChanging(value);
					this.SendPropertyChanging();
					this._File4FileID = value;
					this.SendPropertyChanged("File4FileID");
					this.OnFile4FileIDChanged();
				}
			}
		}

		[Column(Storage = "_File5FileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> File5FileID
		{
			get
			{
				return this._File5FileID;
			}
			set
			{
				if ((this._File5FileID != value))
				{
					this.OnFile5FileIDChanging(value);
					this.SendPropertyChanging();
					this._File5FileID = value;
					this.SendPropertyChanged("File5FileID");
					this.OnFile5FileIDChanged();
				}
			}
		}

		[Column(Storage = "_ImageFileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ImageFileID
		{
			get
			{
				return this._ImageFileID;
			}
			set
			{
				if ((this._ImageFileID != value))
				{
					this.OnImageFileIDChanging(value);
					this.SendPropertyChanging();
					this._ImageFileID = value;
					this.SendPropertyChanged("ImageFileID");
					this.OnImageFileIDChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_Content", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}

		[Column(Storage = "_Summary", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}

		[Column(Storage = "_SiteObjectID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SiteObjectID
		{
			get
			{
				return this._SiteObjectID;
			}
			set
			{
				if ((this._SiteObjectID != value))
				{
					this.OnSiteObjectIDChanging(value);
					this.SendPropertyChanging();
					this._SiteObjectID = value;
					this.SendPropertyChanged("SiteObjectID");
					this.OnSiteObjectIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}

		[Column(Storage = "_ClassName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}

		[Column(Storage = "_IsPublished", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsPublished
		{
			get
			{
				return this._IsPublished;
			}
			set
			{
				if ((this._IsPublished != value))
				{
					this.OnIsPublishedChanging(value);
					this.SendPropertyChanging();
					this._IsPublished = value;
					this.SendPropertyChanged("IsPublished");
					this.OnIsPublishedChanged();
				}
			}
		}

		[Column(Storage = "_SubTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SubTitle
		{
			get
			{
				return this._SubTitle;
			}
			set
			{
				if ((this._SubTitle != value))
				{
					this.OnSubTitleChanging(value);
					this.SendPropertyChanging();
					this._SubTitle = value;
					this.SendPropertyChanged("SubTitle");
					this.OnSubTitleChanged();
				}
			}
		}

		[Column(Storage = "_CreateDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}

		[Column(Storage = "_PublishDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}

		[Association(Name = "FK_V_Article_MainObject", Storage = "_MainObject", ThisKey = "ArticleID", OtherKey = "ArticleID", IsForeignKey = true)]
		public Article MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_AvailableRoleForGrant")]
	public partial class V_AvailableRoleForGrant
	{

		private int _RoleID;

		private int _RoleForGrantID;

		public V_AvailableRoleForGrant()
		{
		}

		[Column(Storage = "_RoleID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}

		[Column(Storage = "_RoleForGrantID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int RoleForGrantID
		{
			get
			{
				return this._RoleForGrantID;
			}
			set
			{
				if ((this._RoleForGrantID != value))
				{
					this._RoleForGrantID = value;
				}
			}
		}
	}

	[Table(Name = "dbo.V_ContractorPayment")]
	public partial class V_ContractorPayment
	{

		private System.Guid _ContractorGUID;

		private string _INN;

		private string _Title;

		private System.Nullable<decimal> _Balance;

		private System.Nullable<System.DateTime> _LastPaymentDate;

		public V_ContractorPayment()
		{
		}

		[Column(Storage = "_ContractorGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					this._ContractorGUID = value;
				}
			}
		}

		[Column(Storage = "_INN", DbType = "NVarChar(12) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string INN
		{
			get
			{
				return this._INN;
			}
			set
			{
				if ((this._INN != value))
				{
					this._INN = value;
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}

		[Column(Storage = "_Balance", DbType = "Decimal(38,2)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this._Balance = value;
				}
			}
		}

		[Column(Storage = "_LastPaymentDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastPaymentDate
		{
			get
			{
				return this._LastPaymentDate;
			}
			set
			{
				if ((this._LastPaymentDate != value))
				{
					this._LastPaymentDate = value;
				}
			}
		}
	}

	[Table(Name = "dbo.V_DbFile")]
	public partial class V_DbFile
	{

		private string _Title;

		private string _Extension;

		private string _LastModifiedUserTitle;

		private System.Guid _ID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private long _Size;

		private string _Path;

		private System.Nullable<System.Guid> _ParentID;

		private int _IsValid;

		private System.Guid _SPMActionItemGUID;

		private string _FullPath;

		private string _Tag;

		private int _VersionNumber;

		private System.Nullable<System.Guid> _MainID;

		private System.Nullable<int> _CheckedOutByID;

		private string _CheckedOutBy;

		private System.Nullable<System.Guid> _FeatureGUID;

		private System.Nullable<System.DateTime> _PublishDate;

		private int _CreatorID;

		private string _Creator;

		private System.Data.Linq.Binary _DataHash;

		public V_DbFile()
		{
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}

		[Column(Storage = "_Extension", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this._Extension = value;
				}
			}
		}

		[Column(Storage = "_LastModifiedUserTitle", DbType = "VarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string LastModifiedUserTitle
		{
			get
			{
				return this._LastModifiedUserTitle;
			}
			set
			{
				if ((this._LastModifiedUserTitle != value))
				{
					this._LastModifiedUserTitle = value;
				}
			}
		}

		[Column(Storage = "_ID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this._IsDeleted = value;
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this._LastModifiedDate = value;
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this._LastModifiedUserID = value;
				}
			}
		}

		[Column(Storage = "_Size", DbType = "BigInt NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public long Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this._Size = value;
				}
			}
		}

		[Column(Storage = "_Path", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this._Path = value;
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}

		[Column(Storage = "_IsValid", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int IsValid
		{
			get
			{
				return this._IsValid;
			}
			set
			{
				if ((this._IsValid != value))
				{
					this._IsValid = value;
				}
			}
		}

		[Column(Storage = "_SPMActionItemGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid SPMActionItemGUID
		{
			get
			{
				return this._SPMActionItemGUID;
			}
			set
			{
				if ((this._SPMActionItemGUID != value))
				{
					this._SPMActionItemGUID = value;
				}
			}
		}

		[Column(Storage = "_FullPath", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string FullPath
		{
			get
			{
				return this._FullPath;
			}
			set
			{
				if ((this._FullPath != value))
				{
					this._FullPath = value;
				}
			}
		}

		[Column(Storage = "_Tag", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this._Tag = value;
				}
			}
		}

		[Column(Storage = "_VersionNumber", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int VersionNumber
		{
			get
			{
				return this._VersionNumber;
			}
			set
			{
				if ((this._VersionNumber != value))
				{
					this._VersionNumber = value;
				}
			}
		}

		[Column(Storage = "_MainID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> MainID
		{
			get
			{
				return this._MainID;
			}
			set
			{
				if ((this._MainID != value))
				{
					this._MainID = value;
				}
			}
		}

		[Column(Storage = "_CheckedOutByID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CheckedOutByID
		{
			get
			{
				return this._CheckedOutByID;
			}
			set
			{
				if ((this._CheckedOutByID != value))
				{
					this._CheckedOutByID = value;
				}
			}
		}

		[Column(Storage = "_CheckedOutBy", DbType = "VarChar(255)", UpdateCheck = UpdateCheck.Never)]
		public string CheckedOutBy
		{
			get
			{
				return this._CheckedOutBy;
			}
			set
			{
				if ((this._CheckedOutBy != value))
				{
					this._CheckedOutBy = value;
				}
			}
		}

		[Column(Storage = "_FeatureGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> FeatureGUID
		{
			get
			{
				return this._FeatureGUID;
			}
			set
			{
				if ((this._FeatureGUID != value))
				{
					this._FeatureGUID = value;
				}
			}
		}

		[Column(Storage = "_PublishDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this._PublishDate = value;
				}
			}
		}

		[Column(Storage = "_CreatorID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					this._CreatorID = value;
				}
			}
		}

		[Column(Storage = "_Creator", DbType = "VarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this._Creator = value;
				}
			}
		}

		[Column(Storage = "_DataHash", DbType = "Binary(16)", CanBeNull = true, UpdateCheck = UpdateCheck.Never)]
		public System.Data.Linq.Binary DataHash
		{
			get
			{
				return this._DataHash;
			}
			set
			{
				if ((this._DataHash != value))
				{
					this._DataHash = value;
				}
			}
		}
	}

	[Table(Name = "dbo.V_DbFolder")]
	public partial class V_DbFolder
	{

		private string _Title;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private bool _IsDeleted;

		private System.Nullable<long> _Size;

		private string _LastModifiedUserTitle;

		private System.Guid _ID;

		private string _Path;

		private System.Nullable<System.Guid> _ParentID;

		private string _FullPath;

		private int _IsValid;

		private char _StorageType;

		private string _StorageParameter;

		private System.Guid _SPMActionItemGUID;

		private bool _EnableVersioning;

		private System.Nullable<int> _FileCount;

		private string _Tag;

		private System.Nullable<System.DateTime> _PublishDate;

		private int _CreatorID;

		private string _Creator;

		public V_DbFolder()
		{
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this._LastModifiedDate = value;
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this._LastModifiedUserID = value;
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this._IsDeleted = value;
				}
			}
		}

		[Column(Storage = "_Size", DbType = "BigInt", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<long> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this._Size = value;
				}
			}
		}

		[Column(Storage = "_LastModifiedUserTitle", DbType = "VarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string LastModifiedUserTitle
		{
			get
			{
				return this._LastModifiedUserTitle;
			}
			set
			{
				if ((this._LastModifiedUserTitle != value))
				{
					this._LastModifiedUserTitle = value;
				}
			}
		}

		[Column(Storage = "_ID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}

		[Column(Storage = "_Path", DbType = "NVarChar(4000)", UpdateCheck = UpdateCheck.Never)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this._Path = value;
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}

		[Column(Storage = "_FullPath", DbType = "NVarChar(4000)", UpdateCheck = UpdateCheck.Never)]
		public string FullPath
		{
			get
			{
				return this._FullPath;
			}
			set
			{
				if ((this._FullPath != value))
				{
					this._FullPath = value;
				}
			}
		}

		[Column(Storage = "_IsValid", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int IsValid
		{
			get
			{
				return this._IsValid;
			}
			set
			{
				if ((this._IsValid != value))
				{
					this._IsValid = value;
				}
			}
		}

		[Column(Storage = "_StorageType", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char StorageType
		{
			get
			{
				return this._StorageType;
			}
			set
			{
				if ((this._StorageType != value))
				{
					this._StorageType = value;
				}
			}
		}

		[Column(Storage = "_StorageParameter", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string StorageParameter
		{
			get
			{
				return this._StorageParameter;
			}
			set
			{
				if ((this._StorageParameter != value))
				{
					this._StorageParameter = value;
				}
			}
		}

		[Column(Storage = "_SPMActionItemGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid SPMActionItemGUID
		{
			get
			{
				return this._SPMActionItemGUID;
			}
			set
			{
				if ((this._SPMActionItemGUID != value))
				{
					this._SPMActionItemGUID = value;
				}
			}
		}

		[Column(Storage = "_EnableVersioning", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool EnableVersioning
		{
			get
			{
				return this._EnableVersioning;
			}
			set
			{
				if ((this._EnableVersioning != value))
				{
					this._EnableVersioning = value;
				}
			}
		}

		[Column(Storage = "_FileCount", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> FileCount
		{
			get
			{
				return this._FileCount;
			}
			set
			{
				if ((this._FileCount != value))
				{
					this._FileCount = value;
				}
			}
		}

		[Column(Storage = "_Tag", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this._Tag = value;
				}
			}
		}

		[Column(Storage = "_PublishDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this._PublishDate = value;
				}
			}
		}

		[Column(Storage = "_CreatorID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					this._CreatorID = value;
				}
			}
		}

		[Column(Storage = "_Creator", DbType = "VarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this._Creator = value;
				}
			}
		}
	}

	[Table(Name = "dbo.V_DbItem")]
	public partial class V_DbItem
	{

		private string _Title;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private bool _IsDeleted;

		private System.Nullable<long> _Length;

		private string _LastModifiedUserTitle;

		private int _Type;

		private System.Guid _Guid;

		private string _Path;

		private System.Nullable<System.Guid> _ParentID;

		private string _Extension;

		private System.Nullable<System.Guid> _SPMActionItemGUID;

		private bool _EnableVersioning;

		private string _FullPath;

		private System.Nullable<int> _CheckedOutByID;

		private string _CheckedOutBy;

		private string _Tag;

		private System.Nullable<System.DateTime> _PublishDate;

		private int _CreatorID;

		private string _Creator;

		private System.Data.Linq.Binary _DataHash;

		public V_DbItem()
		{
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this._LastModifiedDate = value;
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this._LastModifiedUserID = value;
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this._IsDeleted = value;
				}
			}
		}

		[Column(Storage = "_Length", DbType = "BigInt", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<long> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this._Length = value;
				}
			}
		}

		[Column(Storage = "_LastModifiedUserTitle", DbType = "VarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string LastModifiedUserTitle
		{
			get
			{
				return this._LastModifiedUserTitle;
			}
			set
			{
				if ((this._LastModifiedUserTitle != value))
				{
					this._LastModifiedUserTitle = value;
				}
			}
		}

		[Column(Storage = "_Type", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this._Guid = value;
				}
			}
		}

		[Column(Storage = "_Path", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this._Path = value;
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}

		[Column(Storage = "_Extension", DbType = "NVarChar(50)", UpdateCheck = UpdateCheck.Never)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this._Extension = value;
				}
			}
		}

		[Column(Storage = "_SPMActionItemGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> SPMActionItemGUID
		{
			get
			{
				return this._SPMActionItemGUID;
			}
			set
			{
				if ((this._SPMActionItemGUID != value))
				{
					this._SPMActionItemGUID = value;
				}
			}
		}

		[Column(Storage = "_EnableVersioning", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool EnableVersioning
		{
			get
			{
				return this._EnableVersioning;
			}
			set
			{
				if ((this._EnableVersioning != value))
				{
					this._EnableVersioning = value;
				}
			}
		}

		[Column(Storage = "_FullPath", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string FullPath
		{
			get
			{
				return this._FullPath;
			}
			set
			{
				if ((this._FullPath != value))
				{
					this._FullPath = value;
				}
			}
		}

		[Column(Storage = "_CheckedOutByID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CheckedOutByID
		{
			get
			{
				return this._CheckedOutByID;
			}
			set
			{
				if ((this._CheckedOutByID != value))
				{
					this._CheckedOutByID = value;
				}
			}
		}

		[Column(Storage = "_CheckedOutBy", DbType = "VarChar(255)", UpdateCheck = UpdateCheck.Never)]
		public string CheckedOutBy
		{
			get
			{
				return this._CheckedOutBy;
			}
			set
			{
				if ((this._CheckedOutBy != value))
				{
					this._CheckedOutBy = value;
				}
			}
		}

		[Column(Storage = "_Tag", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this._Tag = value;
				}
			}
		}

		[Column(Storage = "_PublishDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this._PublishDate = value;
				}
			}
		}

		[Column(Storage = "_CreatorID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					this._CreatorID = value;
				}
			}
		}

		[Column(Storage = "_Creator", DbType = "VarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this._Creator = value;
				}
			}
		}

		[Column(Storage = "_DataHash", DbType = "Binary(16)", CanBeNull = true, UpdateCheck = UpdateCheck.Never)]
		public System.Data.Linq.Binary DataHash
		{
			get
			{
				return this._DataHash;
			}
			set
			{
				if ((this._DataHash != value))
				{
					this._DataHash = value;
				}
			}
		}
	}

	[Table(Name = "dbo.V_Document")]
	public partial class V_Document : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _DocumentID;

		private System.DateTime _DocDate;

		private System.Nullable<int> _FileFileID;

		private string _LanguageCode;

		private string _ClassName;

		private System.DateTime _CreateDate;

		private bool _IsDeleted;

		private bool _IsPublished;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private int _ParentID;

		private System.Nullable<System.DateTime> _PublishDate;

		private int _SeqNo;

		private string _SubTitle;

		private string _Title;

		private EntityRef<Document> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnDocumentIDChanging(int value);
		partial void OnDocumentIDChanged();
		partial void OnDocDateChanging(System.DateTime value);
		partial void OnDocDateChanged();
		partial void OnFileFileIDChanging(System.Nullable<int> value);
		partial void OnFileFileIDChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnClassNameChanging(string value);
		partial void OnClassNameChanged();
		partial void OnCreateDateChanging(System.DateTime value);
		partial void OnCreateDateChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnIsPublishedChanging(bool value);
		partial void OnIsPublishedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnParentIDChanging(int value);
		partial void OnParentIDChanged();
		partial void OnPublishDateChanging(System.Nullable<System.DateTime> value);
		partial void OnPublishDateChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnSubTitleChanging(string value);
		partial void OnSubTitleChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		#endregion

		public V_Document()
		{
			this._MainObject = default(EntityRef<Document>);
			OnCreated();
		}

		[Column(Storage = "_DocumentID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}

		[Column(Storage = "_DocDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this.OnDocDateChanging(value);
					this.SendPropertyChanging();
					this._DocDate = value;
					this.SendPropertyChanged("DocDate");
					this.OnDocDateChanged();
				}
			}
		}

		[Column(Storage = "_FileFileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> FileFileID
		{
			get
			{
				return this._FileFileID;
			}
			set
			{
				if ((this._FileFileID != value))
				{
					this.OnFileFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileFileID = value;
					this.SendPropertyChanged("FileFileID");
					this.OnFileFileIDChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_ClassName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}

		[Column(Storage = "_CreateDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_IsPublished", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsPublished
		{
			get
			{
				return this._IsPublished;
			}
			set
			{
				if ((this._IsPublished != value))
				{
					this.OnIsPublishedChanging(value);
					this.SendPropertyChanging();
					this._IsPublished = value;
					this.SendPropertyChanged("IsPublished");
					this.OnIsPublishedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}

		[Column(Storage = "_PublishDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_SubTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SubTitle
		{
			get
			{
				return this._SubTitle;
			}
			set
			{
				if ((this._SubTitle != value))
				{
					this.OnSubTitleChanging(value);
					this.SendPropertyChanging();
					this._SubTitle = value;
					this.SendPropertyChanged("SubTitle");
					this.OnSubTitleChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Association(Name = "FK_V_Document_MainObject", Storage = "_MainObject", ThisKey = "DocumentID", OtherKey = "DocumentID", IsForeignKey = true)]
		public Document MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_Documents")]
	public partial class V_Documents
	{

		private System.Guid _FileGUID;

		private System.Guid _ContractorGUID;

		private string _ContractorTitle;

		private string _ContractorINN;

		private System.Nullable<System.DateTime> _DocDate;

		private string _DocNo;

		private int _FGADocumentID;

		private System.Nullable<int> _FGAID;

		private string _FGATitle;

		private long _Length;

		private string _Extension;

		private string _FileTitle;

		private string _FGADocumentTitle;

		private System.Nullable<System.DateTime> _BeginDate;

		private System.Nullable<System.DateTime> _EndDate;

		private System.Nullable<decimal> _ResolvedQuantity;

		private System.DateTime _FileDate;

		private int _SourceTypeID;

		private System.Nullable<int> _MeasureID;

		private System.Nullable<System.Guid> _SignatureGUID;

		private System.Nullable<System.DateTime> _SignDate;

		private string _Info;

		public V_Documents()
		{
		}

		[Column(Storage = "_FileGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid FileGUID
		{
			get
			{
				return this._FileGUID;
			}
			set
			{
				if ((this._FileGUID != value))
				{
					this._FileGUID = value;
				}
			}
		}

		[Column(Storage = "_ContractorGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					this._ContractorGUID = value;
				}
			}
		}

		[Column(Storage = "_ContractorTitle", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ContractorTitle
		{
			get
			{
				return this._ContractorTitle;
			}
			set
			{
				if ((this._ContractorTitle != value))
				{
					this._ContractorTitle = value;
				}
			}
		}

		[Column(Storage = "_ContractorINN", DbType = "NVarChar(12) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ContractorINN
		{
			get
			{
				return this._ContractorINN;
			}
			set
			{
				if ((this._ContractorINN != value))
				{
					this._ContractorINN = value;
				}
			}
		}

		[Column(Storage = "_DocDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this._DocDate = value;
				}
			}
		}

		[Column(Storage = "_DocNo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DocNo
		{
			get
			{
				return this._DocNo;
			}
			set
			{
				if ((this._DocNo != value))
				{
					this._DocNo = value;
				}
			}
		}

		[Column(Storage = "_FGADocumentID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int FGADocumentID
		{
			get
			{
				return this._FGADocumentID;
			}
			set
			{
				if ((this._FGADocumentID != value))
				{
					this._FGADocumentID = value;
				}
			}
		}

		[Column(Storage = "_FGAID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> FGAID
		{
			get
			{
				return this._FGAID;
			}
			set
			{
				if ((this._FGAID != value))
				{
					this._FGAID = value;
				}
			}
		}

		[Column(Storage = "_FGATitle", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string FGATitle
		{
			get
			{
				return this._FGATitle;
			}
			set
			{
				if ((this._FGATitle != value))
				{
					this._FGATitle = value;
				}
			}
		}

		[Column(Storage = "_Length", DbType = "BigInt NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public long Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this._Length = value;
				}
			}
		}

		[Column(Storage = "_Extension", DbType = "NVarChar(4000)", UpdateCheck = UpdateCheck.Never)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this._Extension = value;
				}
			}
		}

		[Column(Storage = "_FileTitle", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string FileTitle
		{
			get
			{
				return this._FileTitle;
			}
			set
			{
				if ((this._FileTitle != value))
				{
					this._FileTitle = value;
				}
			}
		}

		[Column(Storage = "_FGADocumentTitle", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string FGADocumentTitle
		{
			get
			{
				return this._FGADocumentTitle;
			}
			set
			{
				if ((this._FGADocumentTitle != value))
				{
					this._FGADocumentTitle = value;
				}
			}
		}

		[Column(Storage = "_BeginDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this._BeginDate = value;
				}
			}
		}

		[Column(Storage = "_EndDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this._EndDate = value;
				}
			}
		}

		[Column(Storage = "_ResolvedQuantity", DbType = "Decimal(20,7)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedQuantity
		{
			get
			{
				return this._ResolvedQuantity;
			}
			set
			{
				if ((this._ResolvedQuantity != value))
				{
					this._ResolvedQuantity = value;
				}
			}
		}

		[Column(Storage = "_FileDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime FileDate
		{
			get
			{
				return this._FileDate;
			}
			set
			{
				if ((this._FileDate != value))
				{
					this._FileDate = value;
				}
			}
		}

		[Column(Storage = "_SourceTypeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SourceTypeID
		{
			get
			{
				return this._SourceTypeID;
			}
			set
			{
				if ((this._SourceTypeID != value))
				{
					this._SourceTypeID = value;
				}
			}
		}

		[Column(Storage = "_MeasureID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					this._MeasureID = value;
				}
			}
		}

		[Column(Storage = "_SignatureGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> SignatureGUID
		{
			get
			{
				return this._SignatureGUID;
			}
			set
			{
				if ((this._SignatureGUID != value))
				{
					this._SignatureGUID = value;
				}
			}
		}

		[Column(Storage = "_SignDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this._SignDate = value;
				}
			}
		}

		[Column(Storage = "_Info", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this._Info = value;
				}
			}
		}
	}

	[Table(Name = "dbo.V_FactAnnulment")]
	public partial class V_FactAnnulment : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FactID;

		private System.Nullable<System.DateTime> _AnnulmentDate;

		private int _AnnulmentReasonID;

		private System.Nullable<System.DateTime> _BasisDate;

		private string _BasisNo;

		private string _BasisTitle;

		private string _BasisType;

		private System.Nullable<int> _EmployeeID;

		private System.Nullable<System.DateTime> _FactShippedDate;

		private System.Nullable<decimal> _FactShippedQuantity;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.Nullable<System.DateTime> _SignDate;

		private System.Nullable<int> _FactShippedMeasureID;

		private string _LanguageCode;

		private EntityRef<C_AnnulmentReason> _AnnulmentReason;

		private EntityRef<Employee> _Employee;

		private EntityRef<C_Measure> _FactShippedMeasure;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<FactAnnulment> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFactIDChanging(int value);
		partial void OnFactIDChanged();
		partial void OnAnnulmentDateChanging(System.Nullable<System.DateTime> value);
		partial void OnAnnulmentDateChanged();
		partial void OnAnnulmentReasonIDChanging(int value);
		partial void OnAnnulmentReasonIDChanged();
		partial void OnBasisDateChanging(System.Nullable<System.DateTime> value);
		partial void OnBasisDateChanged();
		partial void OnBasisNoChanging(string value);
		partial void OnBasisNoChanged();
		partial void OnBasisTitleChanging(string value);
		partial void OnBasisTitleChanged();
		partial void OnBasisTypeChanging(string value);
		partial void OnBasisTypeChanged();
		partial void OnEmployeeIDChanging(System.Nullable<int> value);
		partial void OnEmployeeIDChanged();
		partial void OnFactShippedDateChanging(System.Nullable<System.DateTime> value);
		partial void OnFactShippedDateChanged();
		partial void OnFactShippedQuantityChanging(System.Nullable<decimal> value);
		partial void OnFactShippedQuantityChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
		partial void OnSignDateChanged();
		partial void OnFactShippedMeasureIDChanging(System.Nullable<int> value);
		partial void OnFactShippedMeasureIDChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		#endregion

		public V_FactAnnulment()
		{
			this._AnnulmentReason = default(EntityRef<C_AnnulmentReason>);
			this._Employee = default(EntityRef<Employee>);
			this._FactShippedMeasure = default(EntityRef<C_Measure>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MainObject = default(EntityRef<FactAnnulment>);
			OnCreated();
		}

		[Column(Storage = "_FactID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}

		[Column(Storage = "_AnnulmentDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> AnnulmentDate
		{
			get
			{
				return this._AnnulmentDate;
			}
			set
			{
				if ((this._AnnulmentDate != value))
				{
					this.OnAnnulmentDateChanging(value);
					this.SendPropertyChanging();
					this._AnnulmentDate = value;
					this.SendPropertyChanged("AnnulmentDate");
					this.OnAnnulmentDateChanged();
				}
			}
		}

		[Column(Storage = "_AnnulmentReasonID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int AnnulmentReasonID
		{
			get
			{
				return this._AnnulmentReasonID;
			}
			set
			{
				if ((this._AnnulmentReasonID != value))
				{
					if (this._AnnulmentReason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnnulmentReasonIDChanging(value);
					this.SendPropertyChanging();
					this._AnnulmentReasonID = value;
					this.SendPropertyChanged("AnnulmentReasonID");
					this.OnAnnulmentReasonIDChanged();
				}
			}
		}

		[Column(Storage = "_BasisDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BasisDate
		{
			get
			{
				return this._BasisDate;
			}
			set
			{
				if ((this._BasisDate != value))
				{
					this.OnBasisDateChanging(value);
					this.SendPropertyChanging();
					this._BasisDate = value;
					this.SendPropertyChanged("BasisDate");
					this.OnBasisDateChanged();
				}
			}
		}

		[Column(Storage = "_BasisNo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BasisNo
		{
			get
			{
				return this._BasisNo;
			}
			set
			{
				if ((this._BasisNo != value))
				{
					this.OnBasisNoChanging(value);
					this.SendPropertyChanging();
					this._BasisNo = value;
					this.SendPropertyChanged("BasisNo");
					this.OnBasisNoChanged();
				}
			}
		}

		[Column(Storage = "_BasisTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BasisTitle
		{
			get
			{
				return this._BasisTitle;
			}
			set
			{
				if ((this._BasisTitle != value))
				{
					this.OnBasisTitleChanging(value);
					this.SendPropertyChanging();
					this._BasisTitle = value;
					this.SendPropertyChanged("BasisTitle");
					this.OnBasisTitleChanged();
				}
			}
		}

		[Column(Storage = "_BasisType", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BasisType
		{
			get
			{
				return this._BasisType;
			}
			set
			{
				if ((this._BasisType != value))
				{
					this.OnBasisTypeChanging(value);
					this.SendPropertyChanging();
					this._BasisType = value;
					this.SendPropertyChanged("BasisType");
					this.OnBasisTypeChanged();
				}
			}
		}

		[Column(Storage = "_EmployeeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}

		[Column(Storage = "_FactShippedDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FactShippedDate
		{
			get
			{
				return this._FactShippedDate;
			}
			set
			{
				if ((this._FactShippedDate != value))
				{
					this.OnFactShippedDateChanging(value);
					this.SendPropertyChanging();
					this._FactShippedDate = value;
					this.SendPropertyChanged("FactShippedDate");
					this.OnFactShippedDateChanged();
				}
			}
		}

		[Column(Storage = "_FactShippedQuantity", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> FactShippedQuantity
		{
			get
			{
				return this._FactShippedQuantity;
			}
			set
			{
				if ((this._FactShippedQuantity != value))
				{
					this.OnFactShippedQuantityChanging(value);
					this.SendPropertyChanging();
					this._FactShippedQuantity = value;
					this.SendPropertyChanged("FactShippedQuantity");
					this.OnFactShippedQuantityChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_SignDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}

		[Column(Storage = "_FactShippedMeasureID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> FactShippedMeasureID
		{
			get
			{
				return this._FactShippedMeasureID;
			}
			set
			{
				if ((this._FactShippedMeasureID != value))
				{
					if (this._FactShippedMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactShippedMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._FactShippedMeasureID = value;
					this.SendPropertyChanged("FactShippedMeasureID");
					this.OnFactShippedMeasureIDChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Association(Name = "FK_V_FactAnnulment_AnnulmentReason", Storage = "_AnnulmentReason", ThisKey = "AnnulmentReasonID", OtherKey = "AnnulmentReasonID", IsForeignKey = true)]
		public C_AnnulmentReason AnnulmentReason
		{
			get
			{
				return this._AnnulmentReason.Entity;
			}
			set
			{
				if ((this._AnnulmentReason.Entity != value))
				{
					this.SendPropertyChanging();
					this._AnnulmentReason.Entity = value;
					this.SendPropertyChanged("AnnulmentReason");
				}
			}
		}

		[Association(Name = "FK_V_FactAnnulment_Employee", Storage = "_Employee", ThisKey = "EmployeeID", OtherKey = "EmployeeID", IsForeignKey = true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				if ((this._Employee.Entity != value))
				{
					this.SendPropertyChanging();
					this._Employee.Entity = value;
					this.SendPropertyChanged("Employee");
				}
			}
		}

		[Association(Name = "FK_V_FactAnnulment_FactShippedMeasure", Storage = "_FactShippedMeasure", ThisKey = "FactShippedMeasureID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure FactShippedMeasure
		{
			get
			{
				return this._FactShippedMeasure.Entity;
			}
			set
			{
				if ((this._FactShippedMeasure.Entity != value))
				{
					this.SendPropertyChanging();
					this._FactShippedMeasure.Entity = value;
					this.SendPropertyChanged("FactShippedMeasure");
				}
			}
		}

		[Association(Name = "FK_V_FactAnnulment_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				if ((this._LastModifiedUser.Entity != value))
				{
					this.SendPropertyChanging();
					this._LastModifiedUser.Entity = value;
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_V_FactAnnulment_MainObject", Storage = "_MainObject", ThisKey = "FactID", OtherKey = "FactID", IsForeignKey = true)]
		public FactAnnulment MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_FactClose")]
	public partial class V_FactClose : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FactID;

		private System.Nullable<System.DateTime> _FactShippedDate;

		private System.Nullable<decimal> _FactShippedQuantity;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.Nullable<int> _FactShippedMeasureID;

		private string _LanguageCode;

		private EntityRef<C_Measure> _FactShippedMeasure;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<FactClose> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFactIDChanging(int value);
		partial void OnFactIDChanged();
		partial void OnFactShippedDateChanging(System.Nullable<System.DateTime> value);
		partial void OnFactShippedDateChanged();
		partial void OnFactShippedQuantityChanging(System.Nullable<decimal> value);
		partial void OnFactShippedQuantityChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnFactShippedMeasureIDChanging(System.Nullable<int> value);
		partial void OnFactShippedMeasureIDChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		#endregion

		public V_FactClose()
		{
			this._FactShippedMeasure = default(EntityRef<C_Measure>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MainObject = default(EntityRef<FactClose>);
			OnCreated();
		}

		[Column(Storage = "_FactID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}

		[Column(Storage = "_FactShippedDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FactShippedDate
		{
			get
			{
				return this._FactShippedDate;
			}
			set
			{
				if ((this._FactShippedDate != value))
				{
					this.OnFactShippedDateChanging(value);
					this.SendPropertyChanging();
					this._FactShippedDate = value;
					this.SendPropertyChanged("FactShippedDate");
					this.OnFactShippedDateChanged();
				}
			}
		}

		[Column(Storage = "_FactShippedQuantity", DbType = "Decimal(18,5)", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<decimal> FactShippedQuantity
		{
			get
			{
				return this._FactShippedQuantity;
			}
			set
			{
				if ((this._FactShippedQuantity != value))
				{
					this.OnFactShippedQuantityChanging(value);
					this.SendPropertyChanging();
					this._FactShippedQuantity = value;
					this.SendPropertyChanged("FactShippedQuantity");
					this.OnFactShippedQuantityChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_FactShippedMeasureID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> FactShippedMeasureID
		{
			get
			{
				return this._FactShippedMeasureID;
			}
			set
			{
				if ((this._FactShippedMeasureID != value))
				{
					if (this._FactShippedMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactShippedMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._FactShippedMeasureID = value;
					this.SendPropertyChanged("FactShippedMeasureID");
					this.OnFactShippedMeasureIDChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Association(Name = "FK_V_FactClose_FactShippedMeasure", Storage = "_FactShippedMeasure", ThisKey = "FactShippedMeasureID", OtherKey = "MeasureID", IsForeignKey = true)]
		public C_Measure FactShippedMeasure
		{
			get
			{
				return this._FactShippedMeasure.Entity;
			}
			set
			{
				if ((this._FactShippedMeasure.Entity != value))
				{
					this.SendPropertyChanging();
					this._FactShippedMeasure.Entity = value;
					this.SendPropertyChanged("FactShippedMeasure");
				}
			}
		}

		[Association(Name = "FK_V_FactClose_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				if ((this._LastModifiedUser.Entity != value))
				{
					this.SendPropertyChanging();
					this._LastModifiedUser.Entity = value;
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_V_FactClose_MainObject", Storage = "_MainObject", ThisKey = "FactID", OtherKey = "FactID", IsForeignKey = true)]
		public FactClose MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_FactForm")]
	public partial class V_FactForm : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FactID;

		private System.Nullable<System.DateTime> _SignDate;

		private System.DateTime _LastModifiedDate;

		private bool _IsDeleted;

		private int _LastModifiedUserID;

		private System.Nullable<int> _EmployeeID;

		private System.Nullable<System.Guid> _BlankGUID;

		private System.Nullable<System.DateTime> _FormDate;

		private string _EmployeePost;

		private string _EmployeeTitle;

		private string _LanguageCode;

		private EntityRef<Blank> _Blank;

		private EntityRef<Employee> _Employee;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<FactForm> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFactIDChanging(int value);
		partial void OnFactIDChanged();
		partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
		partial void OnSignDateChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnEmployeeIDChanging(System.Nullable<int> value);
		partial void OnEmployeeIDChanged();
		partial void OnBlankGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnBlankGUIDChanged();
		partial void OnFormDateChanging(System.Nullable<System.DateTime> value);
		partial void OnFormDateChanged();
		partial void OnEmployeePostChanging(string value);
		partial void OnEmployeePostChanged();
		partial void OnEmployeeTitleChanging(string value);
		partial void OnEmployeeTitleChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		#endregion

		public V_FactForm()
		{
			this._Blank = default(EntityRef<Blank>);
			this._Employee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MainObject = default(EntityRef<FactForm>);
			OnCreated();
		}

		[Column(Storage = "_FactID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}

		[Column(Storage = "_SignDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_EmployeeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}

		[Column(Storage = "_BlankGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> BlankGUID
		{
			get
			{
				return this._BlankGUID;
			}
			set
			{
				if ((this._BlankGUID != value))
				{
					if (this._Blank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlankGUIDChanging(value);
					this.SendPropertyChanging();
					this._BlankGUID = value;
					this.SendPropertyChanged("BlankGUID");
					this.OnBlankGUIDChanged();
				}
			}
		}

		[Column(Storage = "_FormDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FormDate
		{
			get
			{
				return this._FormDate;
			}
			set
			{
				if ((this._FormDate != value))
				{
					this.OnFormDateChanging(value);
					this.SendPropertyChanging();
					this._FormDate = value;
					this.SendPropertyChanged("FormDate");
					this.OnFormDateChanged();
				}
			}
		}

		[Column(Storage = "_EmployeePost", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string EmployeePost
		{
			get
			{
				return this._EmployeePost;
			}
			set
			{
				if ((this._EmployeePost != value))
				{
					this.OnEmployeePostChanging(value);
					this.SendPropertyChanging();
					this._EmployeePost = value;
					this.SendPropertyChanged("EmployeePost");
					this.OnEmployeePostChanged();
				}
			}
		}

		[Column(Storage = "_EmployeeTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string EmployeeTitle
		{
			get
			{
				return this._EmployeeTitle;
			}
			set
			{
				if ((this._EmployeeTitle != value))
				{
					this.OnEmployeeTitleChanging(value);
					this.SendPropertyChanging();
					this._EmployeeTitle = value;
					this.SendPropertyChanged("EmployeeTitle");
					this.OnEmployeeTitleChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Association(Name = "FK_V_FactForm_Blank", Storage = "_Blank", ThisKey = "BlankGUID", OtherKey = "BlankGUID", IsForeignKey = true)]
		public Blank Blank
		{
			get
			{
				return this._Blank.Entity;
			}
			set
			{
				if ((this._Blank.Entity != value))
				{
					this.SendPropertyChanging();
					this._Blank.Entity = value;
					this.SendPropertyChanged("Blank");
				}
			}
		}

		[Association(Name = "FK_V_FactForm_Employee", Storage = "_Employee", ThisKey = "EmployeeID", OtherKey = "EmployeeID", IsForeignKey = true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				if ((this._Employee.Entity != value))
				{
					this.SendPropertyChanging();
					this._Employee.Entity = value;
					this.SendPropertyChanged("Employee");
				}
			}
		}

		[Association(Name = "FK_V_FactForm_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				if ((this._LastModifiedUser.Entity != value))
				{
					this.SendPropertyChanging();
					this._LastModifiedUser.Entity = value;
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_V_FactForm_MainObject", Storage = "_MainObject", ThisKey = "FactID", OtherKey = "FactID", IsForeignKey = true)]
		public FactForm MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_FactRegister")]
	public partial class V_FactRegister : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FactID;

		private System.DateTime _LastModifiedDate;

		private bool _IsDeleted;

		private int _LastModifiedUserID;

		private string _LanguageCode;

		private int _OrderDocTransitionID;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<FactRegister> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFactIDChanging(int value);
		partial void OnFactIDChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnOrderDocTransitionIDChanging(int value);
		partial void OnOrderDocTransitionIDChanged();
		#endregion

		public V_FactRegister()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MainObject = default(EntityRef<FactRegister>);
			OnCreated();
		}

		[Column(Storage = "_FactID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_OrderDocTransitionID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int OrderDocTransitionID
		{
			get
			{
				return this._OrderDocTransitionID;
			}
			set
			{
				if ((this._OrderDocTransitionID != value))
				{
					this.OnOrderDocTransitionIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocTransitionID = value;
					this.SendPropertyChanged("OrderDocTransitionID");
					this.OnOrderDocTransitionIDChanged();
				}
			}
		}

		[Association(Name = "FK_V_FactRegister_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				if ((this._LastModifiedUser.Entity != value))
				{
					this.SendPropertyChanging();
					this._LastModifiedUser.Entity = value;
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_V_FactRegister_MainObject", Storage = "_MainObject", ThisKey = "FactID", OtherKey = "FactID", IsForeignKey = true)]
		public FactRegister MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_FactReject")]
	public partial class V_FactReject : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FactID;

		private System.Nullable<int> _EmployeeID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.Nullable<System.DateTime> _SignDate;

		private string _LanguageCode;

		private int _OrderDocTransitionID;

		private EntityRef<Employee> _Employee;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<FactReject> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFactIDChanging(int value);
		partial void OnFactIDChanged();
		partial void OnEmployeeIDChanging(System.Nullable<int> value);
		partial void OnEmployeeIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
		partial void OnSignDateChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnOrderDocTransitionIDChanging(int value);
		partial void OnOrderDocTransitionIDChanged();
		#endregion

		public V_FactReject()
		{
			this._Employee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MainObject = default(EntityRef<FactReject>);
			OnCreated();
		}

		[Column(Storage = "_FactID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}

		[Column(Storage = "_EmployeeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_SignDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_OrderDocTransitionID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int OrderDocTransitionID
		{
			get
			{
				return this._OrderDocTransitionID;
			}
			set
			{
				if ((this._OrderDocTransitionID != value))
				{
					this.OnOrderDocTransitionIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocTransitionID = value;
					this.SendPropertyChanged("OrderDocTransitionID");
					this.OnOrderDocTransitionIDChanged();
				}
			}
		}

		[Association(Name = "FK_V_FactReject_Employee", Storage = "_Employee", ThisKey = "EmployeeID", OtherKey = "EmployeeID", IsForeignKey = true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				if ((this._Employee.Entity != value))
				{
					this.SendPropertyChanging();
					this._Employee.Entity = value;
					this.SendPropertyChanged("Employee");
				}
			}
		}

		[Association(Name = "FK_V_FactReject_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				if ((this._LastModifiedUser.Entity != value))
				{
					this.SendPropertyChanging();
					this._LastModifiedUser.Entity = value;
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_V_FactReject_MainObject", Storage = "_MainObject", ThisKey = "FactID", OtherKey = "FactID", IsForeignKey = true)]
		public FactReject MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_FactResume")]
	public partial class V_FactResume : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FactID;

		private System.Nullable<System.DateTime> _BasisDate;

		private string _BasisNo;

		private string _BasisTitle;

		private string _BasisType;

		private System.Nullable<int> _EmployeeID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.Nullable<System.DateTime> _SignDate;

		private string _LanguageCode;

		private int _OrderDocTransitionID;

		private EntityRef<Employee> _Employee;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<FactResume> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFactIDChanging(int value);
		partial void OnFactIDChanged();
		partial void OnBasisDateChanging(System.Nullable<System.DateTime> value);
		partial void OnBasisDateChanged();
		partial void OnBasisNoChanging(string value);
		partial void OnBasisNoChanged();
		partial void OnBasisTitleChanging(string value);
		partial void OnBasisTitleChanged();
		partial void OnBasisTypeChanging(string value);
		partial void OnBasisTypeChanged();
		partial void OnEmployeeIDChanging(System.Nullable<int> value);
		partial void OnEmployeeIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
		partial void OnSignDateChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnOrderDocTransitionIDChanging(int value);
		partial void OnOrderDocTransitionIDChanged();
		#endregion

		public V_FactResume()
		{
			this._Employee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MainObject = default(EntityRef<FactResume>);
			OnCreated();
		}

		[Column(Storage = "_FactID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}

		[Column(Storage = "_BasisDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BasisDate
		{
			get
			{
				return this._BasisDate;
			}
			set
			{
				if ((this._BasisDate != value))
				{
					this.OnBasisDateChanging(value);
					this.SendPropertyChanging();
					this._BasisDate = value;
					this.SendPropertyChanged("BasisDate");
					this.OnBasisDateChanged();
				}
			}
		}

		[Column(Storage = "_BasisNo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BasisNo
		{
			get
			{
				return this._BasisNo;
			}
			set
			{
				if ((this._BasisNo != value))
				{
					this.OnBasisNoChanging(value);
					this.SendPropertyChanging();
					this._BasisNo = value;
					this.SendPropertyChanged("BasisNo");
					this.OnBasisNoChanged();
				}
			}
		}

		[Column(Storage = "_BasisTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BasisTitle
		{
			get
			{
				return this._BasisTitle;
			}
			set
			{
				if ((this._BasisTitle != value))
				{
					this.OnBasisTitleChanging(value);
					this.SendPropertyChanging();
					this._BasisTitle = value;
					this.SendPropertyChanged("BasisTitle");
					this.OnBasisTitleChanged();
				}
			}
		}

		[Column(Storage = "_BasisType", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BasisType
		{
			get
			{
				return this._BasisType;
			}
			set
			{
				if ((this._BasisType != value))
				{
					this.OnBasisTypeChanging(value);
					this.SendPropertyChanging();
					this._BasisType = value;
					this.SendPropertyChanged("BasisType");
					this.OnBasisTypeChanged();
				}
			}
		}

		[Column(Storage = "_EmployeeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_SignDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_OrderDocTransitionID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int OrderDocTransitionID
		{
			get
			{
				return this._OrderDocTransitionID;
			}
			set
			{
				if ((this._OrderDocTransitionID != value))
				{
					this.OnOrderDocTransitionIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocTransitionID = value;
					this.SendPropertyChanged("OrderDocTransitionID");
					this.OnOrderDocTransitionIDChanged();
				}
			}
		}

		[Association(Name = "FK_V_FactResume_Employee", Storage = "_Employee", ThisKey = "EmployeeID", OtherKey = "EmployeeID", IsForeignKey = true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				if ((this._Employee.Entity != value))
				{
					this.SendPropertyChanging();
					this._Employee.Entity = value;
					this.SendPropertyChanged("Employee");
				}
			}
		}

		[Association(Name = "FK_V_FactResume_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				if ((this._LastModifiedUser.Entity != value))
				{
					this.SendPropertyChanging();
					this._LastModifiedUser.Entity = value;
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_V_FactResume_MainObject", Storage = "_MainObject", ThisKey = "FactID", OtherKey = "FactID", IsForeignKey = true)]
		public FactResume MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_FactSuspend")]
	public partial class V_FactSuspend : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FactID;

		private System.Nullable<System.DateTime> _BasisDate;

		private string _BasisNo;

		private string _BasisTitle;

		private string _BasisType;

		private System.Nullable<int> _EmployeeID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private char _ReasonType;

		private System.Nullable<System.DateTime> _SignDate;

		private string _LanguageCode;

		private int _OrderDocTransitionID;

		private EntityRef<Employee> _Employee;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<FactSuspend> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFactIDChanging(int value);
		partial void OnFactIDChanged();
		partial void OnBasisDateChanging(System.Nullable<System.DateTime> value);
		partial void OnBasisDateChanged();
		partial void OnBasisNoChanging(string value);
		partial void OnBasisNoChanged();
		partial void OnBasisTitleChanging(string value);
		partial void OnBasisTitleChanged();
		partial void OnBasisTypeChanging(string value);
		partial void OnBasisTypeChanged();
		partial void OnEmployeeIDChanging(System.Nullable<int> value);
		partial void OnEmployeeIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnReasonTypeChanging(char value);
		partial void OnReasonTypeChanged();
		partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
		partial void OnSignDateChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnOrderDocTransitionIDChanging(int value);
		partial void OnOrderDocTransitionIDChanged();
		#endregion

		public V_FactSuspend()
		{
			this._Employee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MainObject = default(EntityRef<FactSuspend>);
			OnCreated();
		}

		[Column(Storage = "_FactID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}

		[Column(Storage = "_BasisDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BasisDate
		{
			get
			{
				return this._BasisDate;
			}
			set
			{
				if ((this._BasisDate != value))
				{
					this.OnBasisDateChanging(value);
					this.SendPropertyChanging();
					this._BasisDate = value;
					this.SendPropertyChanged("BasisDate");
					this.OnBasisDateChanged();
				}
			}
		}

		[Column(Storage = "_BasisNo", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BasisNo
		{
			get
			{
				return this._BasisNo;
			}
			set
			{
				if ((this._BasisNo != value))
				{
					this.OnBasisNoChanging(value);
					this.SendPropertyChanging();
					this._BasisNo = value;
					this.SendPropertyChanged("BasisNo");
					this.OnBasisNoChanged();
				}
			}
		}

		[Column(Storage = "_BasisTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BasisTitle
		{
			get
			{
				return this._BasisTitle;
			}
			set
			{
				if ((this._BasisTitle != value))
				{
					this.OnBasisTitleChanging(value);
					this.SendPropertyChanging();
					this._BasisTitle = value;
					this.SendPropertyChanged("BasisTitle");
					this.OnBasisTitleChanged();
				}
			}
		}

		[Column(Storage = "_BasisType", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string BasisType
		{
			get
			{
				return this._BasisType;
			}
			set
			{
				if ((this._BasisType != value))
				{
					this.OnBasisTypeChanging(value);
					this.SendPropertyChanging();
					this._BasisType = value;
					this.SendPropertyChanged("BasisType");
					this.OnBasisTypeChanged();
				}
			}
		}

		[Column(Storage = "_EmployeeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_ReasonType", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char ReasonType
		{
			get
			{
				return this._ReasonType;
			}
			set
			{
				if ((this._ReasonType != value))
				{
					this.OnReasonTypeChanging(value);
					this.SendPropertyChanging();
					this._ReasonType = value;
					this.SendPropertyChanged("ReasonType");
					this.OnReasonTypeChanged();
				}
			}
		}

		[Column(Storage = "_SignDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_OrderDocTransitionID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int OrderDocTransitionID
		{
			get
			{
				return this._OrderDocTransitionID;
			}
			set
			{
				if ((this._OrderDocTransitionID != value))
				{
					this.OnOrderDocTransitionIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocTransitionID = value;
					this.SendPropertyChanged("OrderDocTransitionID");
					this.OnOrderDocTransitionIDChanged();
				}
			}
		}

		[Association(Name = "FK_V_FactSuspend_Employee", Storage = "_Employee", ThisKey = "EmployeeID", OtherKey = "EmployeeID", IsForeignKey = true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				if ((this._Employee.Entity != value))
				{
					this.SendPropertyChanging();
					this._Employee.Entity = value;
					this.SendPropertyChanged("Employee");
				}
			}
		}

		[Association(Name = "FK_V_FactSuspend_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				if ((this._LastModifiedUser.Entity != value))
				{
					this.SendPropertyChanging();
					this._LastModifiedUser.Entity = value;
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_V_FactSuspend_MainObject", Storage = "_MainObject", ThisKey = "FactID", OtherKey = "FactID", IsForeignKey = true)]
		public FactSuspend MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_MMA_SiteInfoobjects")]
	public partial class V_MMA_SiteInfoobjects
	{

		private int _SiteInfoobjectsID;

		private bool _IsFolder;

		private bool _IsRoot;

		private string _LanguageCode;

		private int _ObjectTypeID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private string _SysName;

		private int _PackageID;

		private bool _IsEnableSPM;

		private System.Guid _Guid;

		private bool _IsSeparateTable;

		private bool _IsTemplate;

		private System.Nullable<int> _BaseObjectTypeID;

		public V_MMA_SiteInfoobjects()
		{
		}

		[Column(Storage = "_SiteInfoobjectsID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SiteInfoobjectsID
		{
			get
			{
				return this._SiteInfoobjectsID;
			}
			set
			{
				if ((this._SiteInfoobjectsID != value))
				{
					this._SiteInfoobjectsID = value;
				}
			}
		}

		[Column(Storage = "_IsFolder", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsFolder
		{
			get
			{
				return this._IsFolder;
			}
			set
			{
				if ((this._IsFolder != value))
				{
					this._IsFolder = value;
				}
			}
		}

		[Column(Storage = "_IsRoot", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsRoot
		{
			get
			{
				return this._IsRoot;
			}
			set
			{
				if ((this._IsRoot != value))
				{
					this._IsRoot = value;
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this._LanguageCode = value;
				}
			}
		}

		[Column(Storage = "_ObjectTypeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					this._ObjectTypeID = value;
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this._IsDeleted = value;
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this._LastModifiedDate = value;
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this._LastModifiedUserID = value;
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this._SysName = value;
				}
			}
		}

		[Column(Storage = "_PackageID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					this._PackageID = value;
				}
			}
		}

		[Column(Storage = "_IsEnableSPM", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsEnableSPM
		{
			get
			{
				return this._IsEnableSPM;
			}
			set
			{
				if ((this._IsEnableSPM != value))
				{
					this._IsEnableSPM = value;
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this._Guid = value;
				}
			}
		}

		[Column(Storage = "_IsSeparateTable", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsSeparateTable
		{
			get
			{
				return this._IsSeparateTable;
			}
			set
			{
				if ((this._IsSeparateTable != value))
				{
					this._IsSeparateTable = value;
				}
			}
		}

		[Column(Storage = "_IsTemplate", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsTemplate
		{
			get
			{
				return this._IsTemplate;
			}
			set
			{
				if ((this._IsTemplate != value))
				{
					this._IsTemplate = value;
				}
			}
		}

		[Column(Storage = "_BaseObjectTypeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> BaseObjectTypeID
		{
			get
			{
				return this._BaseObjectTypeID;
			}
			set
			{
				if ((this._BaseObjectTypeID != value))
				{
					this._BaseObjectTypeID = value;
				}
			}
		}
	}

	[Table(Name = "dbo.V_MMS_ChangeLog")]
	public partial class V_MMS_ChangeLog : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ChangeLogID;

		private string _LanguageCode;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private string _Title;

		private string _SysName;

		private bool _IsEnableSPM;

		private System.Guid _Guid;

		private bool _IsSeparateTable;

		private bool _IsTemplate;

		private System.Nullable<int> _BaseObjectTypeID;

		private int _LastModifiedUserID;

		private string _TitlePlural;

		private string _DefaultOrderBy;

		private string _LogicalDelete;

		private bool _IsReplicate;

		private bool _IsEnableUserViews;

		private string _SecurityPackageSystemName;

		private bool _IsEnableObjectHistory;

		private string _Interface;

		private char _HistoryTypeCode;

		private bool _IsDataReplicated;

		private int _SeqNo;

		private string _Description;

		private int _PackageID;

		private EntityRef<MMS_ChangeLog> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnChangeLogIDChanging(int value);
		partial void OnChangeLogIDChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnIsEnableSPMChanging(bool value);
		partial void OnIsEnableSPMChanged();
		partial void OnGuidChanging(System.Guid value);
		partial void OnGuidChanged();
		partial void OnIsSeparateTableChanging(bool value);
		partial void OnIsSeparateTableChanged();
		partial void OnIsTemplateChanging(bool value);
		partial void OnIsTemplateChanged();
		partial void OnBaseObjectTypeIDChanging(System.Nullable<int> value);
		partial void OnBaseObjectTypeIDChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitlePluralChanging(string value);
		partial void OnTitlePluralChanged();
		partial void OnDefaultOrderByChanging(string value);
		partial void OnDefaultOrderByChanged();
		partial void OnLogicalDeleteChanging(string value);
		partial void OnLogicalDeleteChanged();
		partial void OnIsReplicateChanging(bool value);
		partial void OnIsReplicateChanged();
		partial void OnIsEnableUserViewsChanging(bool value);
		partial void OnIsEnableUserViewsChanged();
		partial void OnSecurityPackageSystemNameChanging(string value);
		partial void OnSecurityPackageSystemNameChanged();
		partial void OnIsEnableObjectHistoryChanging(bool value);
		partial void OnIsEnableObjectHistoryChanged();
		partial void OnInterfaceChanging(string value);
		partial void OnInterfaceChanged();
		partial void OnHistoryTypeCodeChanging(char value);
		partial void OnHistoryTypeCodeChanged();
		partial void OnIsDataReplicatedChanging(bool value);
		partial void OnIsDataReplicatedChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		partial void OnPackageIDChanging(int value);
		partial void OnPackageIDChanged();
		#endregion

		public V_MMS_ChangeLog()
		{
			this._MainObject = default(EntityRef<MMS_ChangeLog>);
			OnCreated();
		}

		[Column(Storage = "_ChangeLogID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int ChangeLogID
		{
			get
			{
				return this._ChangeLogID;
			}
			set
			{
				if ((this._ChangeLogID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChangeLogIDChanging(value);
					this.SendPropertyChanging();
					this._ChangeLogID = value;
					this.SendPropertyChanged("ChangeLogID");
					this.OnChangeLogIDChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_IsEnableSPM", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsEnableSPM
		{
			get
			{
				return this._IsEnableSPM;
			}
			set
			{
				if ((this._IsEnableSPM != value))
				{
					this.OnIsEnableSPMChanging(value);
					this.SendPropertyChanging();
					this._IsEnableSPM = value;
					this.SendPropertyChanged("IsEnableSPM");
					this.OnIsEnableSPMChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_IsSeparateTable", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsSeparateTable
		{
			get
			{
				return this._IsSeparateTable;
			}
			set
			{
				if ((this._IsSeparateTable != value))
				{
					this.OnIsSeparateTableChanging(value);
					this.SendPropertyChanging();
					this._IsSeparateTable = value;
					this.SendPropertyChanged("IsSeparateTable");
					this.OnIsSeparateTableChanged();
				}
			}
		}

		[Column(Storage = "_IsTemplate", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsTemplate
		{
			get
			{
				return this._IsTemplate;
			}
			set
			{
				if ((this._IsTemplate != value))
				{
					this.OnIsTemplateChanging(value);
					this.SendPropertyChanging();
					this._IsTemplate = value;
					this.SendPropertyChanged("IsTemplate");
					this.OnIsTemplateChanged();
				}
			}
		}

		[Column(Storage = "_BaseObjectTypeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> BaseObjectTypeID
		{
			get
			{
				return this._BaseObjectTypeID;
			}
			set
			{
				if ((this._BaseObjectTypeID != value))
				{
					this.OnBaseObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BaseObjectTypeID = value;
					this.SendPropertyChanged("BaseObjectTypeID");
					this.OnBaseObjectTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_TitlePlural", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string TitlePlural
		{
			get
			{
				return this._TitlePlural;
			}
			set
			{
				if ((this._TitlePlural != value))
				{
					this.OnTitlePluralChanging(value);
					this.SendPropertyChanging();
					this._TitlePlural = value;
					this.SendPropertyChanged("TitlePlural");
					this.OnTitlePluralChanged();
				}
			}
		}

		[Column(Storage = "_DefaultOrderBy", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DefaultOrderBy
		{
			get
			{
				return this._DefaultOrderBy;
			}
			set
			{
				if ((this._DefaultOrderBy != value))
				{
					this.OnDefaultOrderByChanging(value);
					this.SendPropertyChanging();
					this._DefaultOrderBy = value;
					this.SendPropertyChanged("DefaultOrderBy");
					this.OnDefaultOrderByChanged();
				}
			}
		}

		[Column(Storage = "_LogicalDelete", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string LogicalDelete
		{
			get
			{
				return this._LogicalDelete;
			}
			set
			{
				if ((this._LogicalDelete != value))
				{
					this.OnLogicalDeleteChanging(value);
					this.SendPropertyChanging();
					this._LogicalDelete = value;
					this.SendPropertyChanged("LogicalDelete");
					this.OnLogicalDeleteChanged();
				}
			}
		}

		[Column(Storage = "_IsReplicate", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsReplicate
		{
			get
			{
				return this._IsReplicate;
			}
			set
			{
				if ((this._IsReplicate != value))
				{
					this.OnIsReplicateChanging(value);
					this.SendPropertyChanging();
					this._IsReplicate = value;
					this.SendPropertyChanged("IsReplicate");
					this.OnIsReplicateChanged();
				}
			}
		}

		[Column(Storage = "_IsEnableUserViews", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsEnableUserViews
		{
			get
			{
				return this._IsEnableUserViews;
			}
			set
			{
				if ((this._IsEnableUserViews != value))
				{
					this.OnIsEnableUserViewsChanging(value);
					this.SendPropertyChanging();
					this._IsEnableUserViews = value;
					this.SendPropertyChanged("IsEnableUserViews");
					this.OnIsEnableUserViewsChanged();
				}
			}
		}

		[Column(Storage = "_SecurityPackageSystemName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SecurityPackageSystemName
		{
			get
			{
				return this._SecurityPackageSystemName;
			}
			set
			{
				if ((this._SecurityPackageSystemName != value))
				{
					this.OnSecurityPackageSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SecurityPackageSystemName = value;
					this.SendPropertyChanged("SecurityPackageSystemName");
					this.OnSecurityPackageSystemNameChanged();
				}
			}
		}

		[Column(Storage = "_IsEnableObjectHistory", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsEnableObjectHistory
		{
			get
			{
				return this._IsEnableObjectHistory;
			}
			set
			{
				if ((this._IsEnableObjectHistory != value))
				{
					this.OnIsEnableObjectHistoryChanging(value);
					this.SendPropertyChanging();
					this._IsEnableObjectHistory = value;
					this.SendPropertyChanged("IsEnableObjectHistory");
					this.OnIsEnableObjectHistoryChanged();
				}
			}
		}

		[Column(Storage = "_Interface", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Interface
		{
			get
			{
				return this._Interface;
			}
			set
			{
				if ((this._Interface != value))
				{
					this.OnInterfaceChanging(value);
					this.SendPropertyChanging();
					this._Interface = value;
					this.SendPropertyChanged("Interface");
					this.OnInterfaceChanged();
				}
			}
		}

		[Column(Storage = "_HistoryTypeCode", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char HistoryTypeCode
		{
			get
			{
				return this._HistoryTypeCode;
			}
			set
			{
				if ((this._HistoryTypeCode != value))
				{
					this.OnHistoryTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._HistoryTypeCode = value;
					this.SendPropertyChanged("HistoryTypeCode");
					this.OnHistoryTypeCodeChanged();
				}
			}
		}

		[Column(Storage = "_IsDataReplicated", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDataReplicated
		{
			get
			{
				return this._IsDataReplicated;
			}
			set
			{
				if ((this._IsDataReplicated != value))
				{
					this.OnIsDataReplicatedChanging(value);
					this.SendPropertyChanging();
					this._IsDataReplicated = value;
					this.SendPropertyChanged("IsDataReplicated");
					this.OnIsDataReplicatedChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_Description", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}

		[Column(Storage = "_PackageID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}

		[Association(Name = "FK_V_MMS_ChangeLog_MainObject", Storage = "_MainObject", ThisKey = "ChangeLogID", OtherKey = "ChangeLogID", IsForeignKey = true)]
		public MMS_ChangeLog MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_MMS_ClassStereotype")]
	public partial class V_MMS_ClassStereotype : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ClassStereotypeID;

		private string _LanguageCode;

		private System.Nullable<int> _BaseObjectTypeID;

		private string _DefaultOrderBy;

		private string _Description;

		private System.Guid _Guid;

		private char _HistoryTypeCode;

		private string _Interface;

		private bool _IsDataReplicated;

		private bool _IsDeleted;

		private bool _IsEnableObjectHistory;

		private bool _IsEnableSPM;

		private bool _IsEnableUserViews;

		private bool _IsReplicate;

		private bool _IsSeparateTable;

		private bool _IsTemplate;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _LogicalDelete;

		private int _PackageID;

		private string _SecurityPackageSystemName;

		private int _SeqNo;

		private string _SysName;

		private string _Title;

		private string _TitlePlural;

		private EntityRef<MMS_ClassStereotype> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnClassStereotypeIDChanging(int value);
		partial void OnClassStereotypeIDChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnBaseObjectTypeIDChanging(System.Nullable<int> value);
		partial void OnBaseObjectTypeIDChanged();
		partial void OnDefaultOrderByChanging(string value);
		partial void OnDefaultOrderByChanged();
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		partial void OnGuidChanging(System.Guid value);
		partial void OnGuidChanged();
		partial void OnHistoryTypeCodeChanging(char value);
		partial void OnHistoryTypeCodeChanged();
		partial void OnInterfaceChanging(string value);
		partial void OnInterfaceChanged();
		partial void OnIsDataReplicatedChanging(bool value);
		partial void OnIsDataReplicatedChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnIsEnableObjectHistoryChanging(bool value);
		partial void OnIsEnableObjectHistoryChanged();
		partial void OnIsEnableSPMChanging(bool value);
		partial void OnIsEnableSPMChanged();
		partial void OnIsEnableUserViewsChanging(bool value);
		partial void OnIsEnableUserViewsChanged();
		partial void OnIsReplicateChanging(bool value);
		partial void OnIsReplicateChanged();
		partial void OnIsSeparateTableChanging(bool value);
		partial void OnIsSeparateTableChanged();
		partial void OnIsTemplateChanging(bool value);
		partial void OnIsTemplateChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnLogicalDeleteChanging(string value);
		partial void OnLogicalDeleteChanged();
		partial void OnPackageIDChanging(int value);
		partial void OnPackageIDChanged();
		partial void OnSecurityPackageSystemNameChanging(string value);
		partial void OnSecurityPackageSystemNameChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnTitlePluralChanging(string value);
		partial void OnTitlePluralChanged();
		#endregion

		public V_MMS_ClassStereotype()
		{
			this._MainObject = default(EntityRef<MMS_ClassStereotype>);
			OnCreated();
		}

		[Column(Storage = "_ClassStereotypeID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int ClassStereotypeID
		{
			get
			{
				return this._ClassStereotypeID;
			}
			set
			{
				if ((this._ClassStereotypeID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassStereotypeIDChanging(value);
					this.SendPropertyChanging();
					this._ClassStereotypeID = value;
					this.SendPropertyChanged("ClassStereotypeID");
					this.OnClassStereotypeIDChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_BaseObjectTypeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> BaseObjectTypeID
		{
			get
			{
				return this._BaseObjectTypeID;
			}
			set
			{
				if ((this._BaseObjectTypeID != value))
				{
					this.OnBaseObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BaseObjectTypeID = value;
					this.SendPropertyChanged("BaseObjectTypeID");
					this.OnBaseObjectTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_DefaultOrderBy", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DefaultOrderBy
		{
			get
			{
				return this._DefaultOrderBy;
			}
			set
			{
				if ((this._DefaultOrderBy != value))
				{
					this.OnDefaultOrderByChanging(value);
					this.SendPropertyChanging();
					this._DefaultOrderBy = value;
					this.SendPropertyChanged("DefaultOrderBy");
					this.OnDefaultOrderByChanged();
				}
			}
		}

		[Column(Storage = "_Description", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_HistoryTypeCode", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char HistoryTypeCode
		{
			get
			{
				return this._HistoryTypeCode;
			}
			set
			{
				if ((this._HistoryTypeCode != value))
				{
					this.OnHistoryTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._HistoryTypeCode = value;
					this.SendPropertyChanged("HistoryTypeCode");
					this.OnHistoryTypeCodeChanged();
				}
			}
		}

		[Column(Storage = "_Interface", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Interface
		{
			get
			{
				return this._Interface;
			}
			set
			{
				if ((this._Interface != value))
				{
					this.OnInterfaceChanging(value);
					this.SendPropertyChanging();
					this._Interface = value;
					this.SendPropertyChanged("Interface");
					this.OnInterfaceChanged();
				}
			}
		}

		[Column(Storage = "_IsDataReplicated", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDataReplicated
		{
			get
			{
				return this._IsDataReplicated;
			}
			set
			{
				if ((this._IsDataReplicated != value))
				{
					this.OnIsDataReplicatedChanging(value);
					this.SendPropertyChanging();
					this._IsDataReplicated = value;
					this.SendPropertyChanged("IsDataReplicated");
					this.OnIsDataReplicatedChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_IsEnableObjectHistory", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsEnableObjectHistory
		{
			get
			{
				return this._IsEnableObjectHistory;
			}
			set
			{
				if ((this._IsEnableObjectHistory != value))
				{
					this.OnIsEnableObjectHistoryChanging(value);
					this.SendPropertyChanging();
					this._IsEnableObjectHistory = value;
					this.SendPropertyChanged("IsEnableObjectHistory");
					this.OnIsEnableObjectHistoryChanged();
				}
			}
		}

		[Column(Storage = "_IsEnableSPM", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsEnableSPM
		{
			get
			{
				return this._IsEnableSPM;
			}
			set
			{
				if ((this._IsEnableSPM != value))
				{
					this.OnIsEnableSPMChanging(value);
					this.SendPropertyChanging();
					this._IsEnableSPM = value;
					this.SendPropertyChanged("IsEnableSPM");
					this.OnIsEnableSPMChanged();
				}
			}
		}

		[Column(Storage = "_IsEnableUserViews", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsEnableUserViews
		{
			get
			{
				return this._IsEnableUserViews;
			}
			set
			{
				if ((this._IsEnableUserViews != value))
				{
					this.OnIsEnableUserViewsChanging(value);
					this.SendPropertyChanging();
					this._IsEnableUserViews = value;
					this.SendPropertyChanged("IsEnableUserViews");
					this.OnIsEnableUserViewsChanged();
				}
			}
		}

		[Column(Storage = "_IsReplicate", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsReplicate
		{
			get
			{
				return this._IsReplicate;
			}
			set
			{
				if ((this._IsReplicate != value))
				{
					this.OnIsReplicateChanging(value);
					this.SendPropertyChanging();
					this._IsReplicate = value;
					this.SendPropertyChanged("IsReplicate");
					this.OnIsReplicateChanged();
				}
			}
		}

		[Column(Storage = "_IsSeparateTable", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsSeparateTable
		{
			get
			{
				return this._IsSeparateTable;
			}
			set
			{
				if ((this._IsSeparateTable != value))
				{
					this.OnIsSeparateTableChanging(value);
					this.SendPropertyChanging();
					this._IsSeparateTable = value;
					this.SendPropertyChanged("IsSeparateTable");
					this.OnIsSeparateTableChanged();
				}
			}
		}

		[Column(Storage = "_IsTemplate", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsTemplate
		{
			get
			{
				return this._IsTemplate;
			}
			set
			{
				if ((this._IsTemplate != value))
				{
					this.OnIsTemplateChanging(value);
					this.SendPropertyChanging();
					this._IsTemplate = value;
					this.SendPropertyChanged("IsTemplate");
					this.OnIsTemplateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_LogicalDelete", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string LogicalDelete
		{
			get
			{
				return this._LogicalDelete;
			}
			set
			{
				if ((this._LogicalDelete != value))
				{
					this.OnLogicalDeleteChanging(value);
					this.SendPropertyChanging();
					this._LogicalDelete = value;
					this.SendPropertyChanged("LogicalDelete");
					this.OnLogicalDeleteChanged();
				}
			}
		}

		[Column(Storage = "_PackageID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}

		[Column(Storage = "_SecurityPackageSystemName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SecurityPackageSystemName
		{
			get
			{
				return this._SecurityPackageSystemName;
			}
			set
			{
				if ((this._SecurityPackageSystemName != value))
				{
					this.OnSecurityPackageSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SecurityPackageSystemName = value;
					this.SendPropertyChanged("SecurityPackageSystemName");
					this.OnSecurityPackageSystemNameChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_TitlePlural", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string TitlePlural
		{
			get
			{
				return this._TitlePlural;
			}
			set
			{
				if ((this._TitlePlural != value))
				{
					this.OnTitlePluralChanging(value);
					this.SendPropertyChanging();
					this._TitlePlural = value;
					this.SendPropertyChanged("TitlePlural");
					this.OnTitlePluralChanged();
				}
			}
		}

		[Association(Name = "FK_V_MMS_ClassStereotype_MainObject", Storage = "_MainObject", ThisKey = "ClassStereotypeID", OtherKey = "ClassStereotypeID", IsForeignKey = true)]
		public MMS_ClassStereotype MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_MMS_Replication")]
	public partial class V_MMS_Replication : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ReplicationID;

		private string _LanguageCode;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private string _Title;

		private string _SysName;

		private bool _IsEnableSPM;

		private System.Guid _Guid;

		private bool _IsSeparateTable;

		private bool _IsTemplate;

		private System.Nullable<int> _BaseObjectTypeID;

		private int _LastModifiedUserID;

		private string _TitlePlural;

		private string _DefaultOrderBy;

		private string _LogicalDelete;

		private bool _IsReplicate;

		private bool _IsEnableUserViews;

		private string _SecurityPackageSystemName;

		private bool _IsEnableObjectHistory;

		private string _Interface;

		private char _HistoryTypeCode;

		private bool _IsDataReplicated;

		private int _SeqNo;

		private string _Description;

		private int _PackageID;

		private EntityRef<MMS_Replication> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnReplicationIDChanging(int value);
		partial void OnReplicationIDChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnIsEnableSPMChanging(bool value);
		partial void OnIsEnableSPMChanged();
		partial void OnGuidChanging(System.Guid value);
		partial void OnGuidChanged();
		partial void OnIsSeparateTableChanging(bool value);
		partial void OnIsSeparateTableChanged();
		partial void OnIsTemplateChanging(bool value);
		partial void OnIsTemplateChanged();
		partial void OnBaseObjectTypeIDChanging(System.Nullable<int> value);
		partial void OnBaseObjectTypeIDChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitlePluralChanging(string value);
		partial void OnTitlePluralChanged();
		partial void OnDefaultOrderByChanging(string value);
		partial void OnDefaultOrderByChanged();
		partial void OnLogicalDeleteChanging(string value);
		partial void OnLogicalDeleteChanged();
		partial void OnIsReplicateChanging(bool value);
		partial void OnIsReplicateChanged();
		partial void OnIsEnableUserViewsChanging(bool value);
		partial void OnIsEnableUserViewsChanged();
		partial void OnSecurityPackageSystemNameChanging(string value);
		partial void OnSecurityPackageSystemNameChanged();
		partial void OnIsEnableObjectHistoryChanging(bool value);
		partial void OnIsEnableObjectHistoryChanged();
		partial void OnInterfaceChanging(string value);
		partial void OnInterfaceChanged();
		partial void OnHistoryTypeCodeChanging(char value);
		partial void OnHistoryTypeCodeChanged();
		partial void OnIsDataReplicatedChanging(bool value);
		partial void OnIsDataReplicatedChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		partial void OnPackageIDChanging(int value);
		partial void OnPackageIDChanged();
		#endregion

		public V_MMS_Replication()
		{
			this._MainObject = default(EntityRef<MMS_Replication>);
			OnCreated();
		}

		[Column(Storage = "_ReplicationID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int ReplicationID
		{
			get
			{
				return this._ReplicationID;
			}
			set
			{
				if ((this._ReplicationID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ReplicationID = value;
					this.SendPropertyChanged("ReplicationID");
					this.OnReplicationIDChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_IsEnableSPM", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsEnableSPM
		{
			get
			{
				return this._IsEnableSPM;
			}
			set
			{
				if ((this._IsEnableSPM != value))
				{
					this.OnIsEnableSPMChanging(value);
					this.SendPropertyChanging();
					this._IsEnableSPM = value;
					this.SendPropertyChanged("IsEnableSPM");
					this.OnIsEnableSPMChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_IsSeparateTable", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsSeparateTable
		{
			get
			{
				return this._IsSeparateTable;
			}
			set
			{
				if ((this._IsSeparateTable != value))
				{
					this.OnIsSeparateTableChanging(value);
					this.SendPropertyChanging();
					this._IsSeparateTable = value;
					this.SendPropertyChanged("IsSeparateTable");
					this.OnIsSeparateTableChanged();
				}
			}
		}

		[Column(Storage = "_IsTemplate", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsTemplate
		{
			get
			{
				return this._IsTemplate;
			}
			set
			{
				if ((this._IsTemplate != value))
				{
					this.OnIsTemplateChanging(value);
					this.SendPropertyChanging();
					this._IsTemplate = value;
					this.SendPropertyChanged("IsTemplate");
					this.OnIsTemplateChanged();
				}
			}
		}

		[Column(Storage = "_BaseObjectTypeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> BaseObjectTypeID
		{
			get
			{
				return this._BaseObjectTypeID;
			}
			set
			{
				if ((this._BaseObjectTypeID != value))
				{
					this.OnBaseObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BaseObjectTypeID = value;
					this.SendPropertyChanged("BaseObjectTypeID");
					this.OnBaseObjectTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_TitlePlural", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string TitlePlural
		{
			get
			{
				return this._TitlePlural;
			}
			set
			{
				if ((this._TitlePlural != value))
				{
					this.OnTitlePluralChanging(value);
					this.SendPropertyChanging();
					this._TitlePlural = value;
					this.SendPropertyChanged("TitlePlural");
					this.OnTitlePluralChanged();
				}
			}
		}

		[Column(Storage = "_DefaultOrderBy", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DefaultOrderBy
		{
			get
			{
				return this._DefaultOrderBy;
			}
			set
			{
				if ((this._DefaultOrderBy != value))
				{
					this.OnDefaultOrderByChanging(value);
					this.SendPropertyChanging();
					this._DefaultOrderBy = value;
					this.SendPropertyChanged("DefaultOrderBy");
					this.OnDefaultOrderByChanged();
				}
			}
		}

		[Column(Storage = "_LogicalDelete", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string LogicalDelete
		{
			get
			{
				return this._LogicalDelete;
			}
			set
			{
				if ((this._LogicalDelete != value))
				{
					this.OnLogicalDeleteChanging(value);
					this.SendPropertyChanging();
					this._LogicalDelete = value;
					this.SendPropertyChanged("LogicalDelete");
					this.OnLogicalDeleteChanged();
				}
			}
		}

		[Column(Storage = "_IsReplicate", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsReplicate
		{
			get
			{
				return this._IsReplicate;
			}
			set
			{
				if ((this._IsReplicate != value))
				{
					this.OnIsReplicateChanging(value);
					this.SendPropertyChanging();
					this._IsReplicate = value;
					this.SendPropertyChanged("IsReplicate");
					this.OnIsReplicateChanged();
				}
			}
		}

		[Column(Storage = "_IsEnableUserViews", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsEnableUserViews
		{
			get
			{
				return this._IsEnableUserViews;
			}
			set
			{
				if ((this._IsEnableUserViews != value))
				{
					this.OnIsEnableUserViewsChanging(value);
					this.SendPropertyChanging();
					this._IsEnableUserViews = value;
					this.SendPropertyChanged("IsEnableUserViews");
					this.OnIsEnableUserViewsChanged();
				}
			}
		}

		[Column(Storage = "_SecurityPackageSystemName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SecurityPackageSystemName
		{
			get
			{
				return this._SecurityPackageSystemName;
			}
			set
			{
				if ((this._SecurityPackageSystemName != value))
				{
					this.OnSecurityPackageSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SecurityPackageSystemName = value;
					this.SendPropertyChanged("SecurityPackageSystemName");
					this.OnSecurityPackageSystemNameChanged();
				}
			}
		}

		[Column(Storage = "_IsEnableObjectHistory", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsEnableObjectHistory
		{
			get
			{
				return this._IsEnableObjectHistory;
			}
			set
			{
				if ((this._IsEnableObjectHistory != value))
				{
					this.OnIsEnableObjectHistoryChanging(value);
					this.SendPropertyChanging();
					this._IsEnableObjectHistory = value;
					this.SendPropertyChanged("IsEnableObjectHistory");
					this.OnIsEnableObjectHistoryChanged();
				}
			}
		}

		[Column(Storage = "_Interface", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Interface
		{
			get
			{
				return this._Interface;
			}
			set
			{
				if ((this._Interface != value))
				{
					this.OnInterfaceChanging(value);
					this.SendPropertyChanging();
					this._Interface = value;
					this.SendPropertyChanged("Interface");
					this.OnInterfaceChanged();
				}
			}
		}

		[Column(Storage = "_HistoryTypeCode", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char HistoryTypeCode
		{
			get
			{
				return this._HistoryTypeCode;
			}
			set
			{
				if ((this._HistoryTypeCode != value))
				{
					this.OnHistoryTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._HistoryTypeCode = value;
					this.SendPropertyChanged("HistoryTypeCode");
					this.OnHistoryTypeCodeChanged();
				}
			}
		}

		[Column(Storage = "_IsDataReplicated", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDataReplicated
		{
			get
			{
				return this._IsDataReplicated;
			}
			set
			{
				if ((this._IsDataReplicated != value))
				{
					this.OnIsDataReplicatedChanging(value);
					this.SendPropertyChanging();
					this._IsDataReplicated = value;
					this.SendPropertyChanged("IsDataReplicated");
					this.OnIsDataReplicatedChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_Description", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}

		[Column(Storage = "_PackageID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}

		[Association(Name = "FK_V_MMS_Replication_MainObject", Storage = "_MainObject", ThisKey = "ReplicationID", OtherKey = "ReplicationID", IsForeignKey = true)]
		public MMS_Replication MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_MMS_Versioning")]
	public partial class V_MMS_Versioning : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _VersioningID;

		private char _Type;

		private string _LanguageCode;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private string _Title;

		private string _SysName;

		private bool _IsEnableSPM;

		private System.Guid _Guid;

		private bool _IsSeparateTable;

		private bool _IsTemplate;

		private System.Nullable<int> _BaseObjectTypeID;

		private int _LastModifiedUserID;

		private string _TitlePlural;

		private string _DefaultOrderBy;

		private string _LogicalDelete;

		private bool _IsReplicate;

		private bool _IsEnableUserViews;

		private string _SecurityPackageSystemName;

		private bool _IsEnableObjectHistory;

		private string _Interface;

		private char _HistoryTypeCode;

		private bool _IsDataReplicated;

		private int _SeqNo;

		private string _Description;

		private int _PackageID;

		private EntityRef<MMS_Versioning> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnVersioningIDChanging(int value);
		partial void OnVersioningIDChanged();
		partial void OnTypeChanging(char value);
		partial void OnTypeChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnIsEnableSPMChanging(bool value);
		partial void OnIsEnableSPMChanged();
		partial void OnGuidChanging(System.Guid value);
		partial void OnGuidChanged();
		partial void OnIsSeparateTableChanging(bool value);
		partial void OnIsSeparateTableChanged();
		partial void OnIsTemplateChanging(bool value);
		partial void OnIsTemplateChanged();
		partial void OnBaseObjectTypeIDChanging(System.Nullable<int> value);
		partial void OnBaseObjectTypeIDChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitlePluralChanging(string value);
		partial void OnTitlePluralChanged();
		partial void OnDefaultOrderByChanging(string value);
		partial void OnDefaultOrderByChanged();
		partial void OnLogicalDeleteChanging(string value);
		partial void OnLogicalDeleteChanged();
		partial void OnIsReplicateChanging(bool value);
		partial void OnIsReplicateChanged();
		partial void OnIsEnableUserViewsChanging(bool value);
		partial void OnIsEnableUserViewsChanged();
		partial void OnSecurityPackageSystemNameChanging(string value);
		partial void OnSecurityPackageSystemNameChanged();
		partial void OnIsEnableObjectHistoryChanging(bool value);
		partial void OnIsEnableObjectHistoryChanged();
		partial void OnInterfaceChanging(string value);
		partial void OnInterfaceChanged();
		partial void OnHistoryTypeCodeChanging(char value);
		partial void OnHistoryTypeCodeChanged();
		partial void OnIsDataReplicatedChanging(bool value);
		partial void OnIsDataReplicatedChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		partial void OnPackageIDChanging(int value);
		partial void OnPackageIDChanged();
		#endregion

		public V_MMS_Versioning()
		{
			this._MainObject = default(EntityRef<MMS_Versioning>);
			OnCreated();
		}

		[Column(Storage = "_VersioningID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int VersioningID
		{
			get
			{
				return this._VersioningID;
			}
			set
			{
				if ((this._VersioningID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVersioningIDChanging(value);
					this.SendPropertyChanging();
					this._VersioningID = value;
					this.SendPropertyChanged("VersioningID");
					this.OnVersioningIDChanged();
				}
			}
		}

		[Column(Storage = "_Type", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_IsEnableSPM", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsEnableSPM
		{
			get
			{
				return this._IsEnableSPM;
			}
			set
			{
				if ((this._IsEnableSPM != value))
				{
					this.OnIsEnableSPMChanging(value);
					this.SendPropertyChanging();
					this._IsEnableSPM = value;
					this.SendPropertyChanged("IsEnableSPM");
					this.OnIsEnableSPMChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_IsSeparateTable", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsSeparateTable
		{
			get
			{
				return this._IsSeparateTable;
			}
			set
			{
				if ((this._IsSeparateTable != value))
				{
					this.OnIsSeparateTableChanging(value);
					this.SendPropertyChanging();
					this._IsSeparateTable = value;
					this.SendPropertyChanged("IsSeparateTable");
					this.OnIsSeparateTableChanged();
				}
			}
		}

		[Column(Storage = "_IsTemplate", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsTemplate
		{
			get
			{
				return this._IsTemplate;
			}
			set
			{
				if ((this._IsTemplate != value))
				{
					this.OnIsTemplateChanging(value);
					this.SendPropertyChanging();
					this._IsTemplate = value;
					this.SendPropertyChanged("IsTemplate");
					this.OnIsTemplateChanged();
				}
			}
		}

		[Column(Storage = "_BaseObjectTypeID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> BaseObjectTypeID
		{
			get
			{
				return this._BaseObjectTypeID;
			}
			set
			{
				if ((this._BaseObjectTypeID != value))
				{
					this.OnBaseObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BaseObjectTypeID = value;
					this.SendPropertyChanged("BaseObjectTypeID");
					this.OnBaseObjectTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_TitlePlural", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string TitlePlural
		{
			get
			{
				return this._TitlePlural;
			}
			set
			{
				if ((this._TitlePlural != value))
				{
					this.OnTitlePluralChanging(value);
					this.SendPropertyChanging();
					this._TitlePlural = value;
					this.SendPropertyChanged("TitlePlural");
					this.OnTitlePluralChanged();
				}
			}
		}

		[Column(Storage = "_DefaultOrderBy", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string DefaultOrderBy
		{
			get
			{
				return this._DefaultOrderBy;
			}
			set
			{
				if ((this._DefaultOrderBy != value))
				{
					this.OnDefaultOrderByChanging(value);
					this.SendPropertyChanging();
					this._DefaultOrderBy = value;
					this.SendPropertyChanged("DefaultOrderBy");
					this.OnDefaultOrderByChanged();
				}
			}
		}

		[Column(Storage = "_LogicalDelete", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string LogicalDelete
		{
			get
			{
				return this._LogicalDelete;
			}
			set
			{
				if ((this._LogicalDelete != value))
				{
					this.OnLogicalDeleteChanging(value);
					this.SendPropertyChanging();
					this._LogicalDelete = value;
					this.SendPropertyChanged("LogicalDelete");
					this.OnLogicalDeleteChanged();
				}
			}
		}

		[Column(Storage = "_IsReplicate", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsReplicate
		{
			get
			{
				return this._IsReplicate;
			}
			set
			{
				if ((this._IsReplicate != value))
				{
					this.OnIsReplicateChanging(value);
					this.SendPropertyChanging();
					this._IsReplicate = value;
					this.SendPropertyChanged("IsReplicate");
					this.OnIsReplicateChanged();
				}
			}
		}

		[Column(Storage = "_IsEnableUserViews", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsEnableUserViews
		{
			get
			{
				return this._IsEnableUserViews;
			}
			set
			{
				if ((this._IsEnableUserViews != value))
				{
					this.OnIsEnableUserViewsChanging(value);
					this.SendPropertyChanging();
					this._IsEnableUserViews = value;
					this.SendPropertyChanged("IsEnableUserViews");
					this.OnIsEnableUserViewsChanged();
				}
			}
		}

		[Column(Storage = "_SecurityPackageSystemName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SecurityPackageSystemName
		{
			get
			{
				return this._SecurityPackageSystemName;
			}
			set
			{
				if ((this._SecurityPackageSystemName != value))
				{
					this.OnSecurityPackageSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SecurityPackageSystemName = value;
					this.SendPropertyChanged("SecurityPackageSystemName");
					this.OnSecurityPackageSystemNameChanged();
				}
			}
		}

		[Column(Storage = "_IsEnableObjectHistory", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsEnableObjectHistory
		{
			get
			{
				return this._IsEnableObjectHistory;
			}
			set
			{
				if ((this._IsEnableObjectHistory != value))
				{
					this.OnIsEnableObjectHistoryChanging(value);
					this.SendPropertyChanging();
					this._IsEnableObjectHistory = value;
					this.SendPropertyChanged("IsEnableObjectHistory");
					this.OnIsEnableObjectHistoryChanged();
				}
			}
		}

		[Column(Storage = "_Interface", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Interface
		{
			get
			{
				return this._Interface;
			}
			set
			{
				if ((this._Interface != value))
				{
					this.OnInterfaceChanging(value);
					this.SendPropertyChanging();
					this._Interface = value;
					this.SendPropertyChanged("Interface");
					this.OnInterfaceChanged();
				}
			}
		}

		[Column(Storage = "_HistoryTypeCode", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char HistoryTypeCode
		{
			get
			{
				return this._HistoryTypeCode;
			}
			set
			{
				if ((this._HistoryTypeCode != value))
				{
					this.OnHistoryTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._HistoryTypeCode = value;
					this.SendPropertyChanged("HistoryTypeCode");
					this.OnHistoryTypeCodeChanged();
				}
			}
		}

		[Column(Storage = "_IsDataReplicated", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDataReplicated
		{
			get
			{
				return this._IsDataReplicated;
			}
			set
			{
				if ((this._IsDataReplicated != value))
				{
					this.OnIsDataReplicatedChanging(value);
					this.SendPropertyChanging();
					this._IsDataReplicated = value;
					this.SendPropertyChanged("IsDataReplicated");
					this.OnIsDataReplicatedChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_Description", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}

		[Column(Storage = "_PackageID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}

		[Association(Name = "FK_V_MMS_Versioning_MainObject", Storage = "_MainObject", ThisKey = "VersioningID", OtherKey = "VersioningID", IsForeignKey = true)]
		public MMS_Versioning MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_N_FileLibrary")]
	public partial class V_N_FileLibrary : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _FolderID;

		private int _MaxFileSize;

		private int _FileLibraryTypeID;

		private string _LanguageCode;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Title;

		private System.Nullable<int> _ParentID;

		private string _FullPath;

		private char _StorageType;

		private string _StorageParameter;

		private System.Guid _Guid;

		private string _GuidPath;

		private EntityRef<N_FileLibraryType> _FileLibraryType;

		private EntityRef<N_FileLibrary> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFolderIDChanging(int value);
		partial void OnFolderIDChanged();
		partial void OnMaxFileSizeChanging(int value);
		partial void OnMaxFileSizeChanged();
		partial void OnFileLibraryTypeIDChanging(int value);
		partial void OnFileLibraryTypeIDChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnParentIDChanging(System.Nullable<int> value);
		partial void OnParentIDChanged();
		partial void OnFullPathChanging(string value);
		partial void OnFullPathChanged();
		partial void OnStorageTypeChanging(char value);
		partial void OnStorageTypeChanged();
		partial void OnStorageParameterChanging(string value);
		partial void OnStorageParameterChanged();
		partial void OnGuidChanging(System.Guid value);
		partial void OnGuidChanged();
		partial void OnGuidPathChanging(string value);
		partial void OnGuidPathChanged();
		#endregion

		public V_N_FileLibrary()
		{
			this._FileLibraryType = default(EntityRef<N_FileLibraryType>);
			this._MainObject = default(EntityRef<N_FileLibrary>);
			OnCreated();
		}

		[Column(Storage = "_FolderID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int FolderID
		{
			get
			{
				return this._FolderID;
			}
			set
			{
				if ((this._FolderID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFolderIDChanging(value);
					this.SendPropertyChanging();
					this._FolderID = value;
					this.SendPropertyChanged("FolderID");
					this.OnFolderIDChanged();
				}
			}
		}

		[Column(Storage = "_MaxFileSize", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int MaxFileSize
		{
			get
			{
				return this._MaxFileSize;
			}
			set
			{
				if ((this._MaxFileSize != value))
				{
					this.OnMaxFileSizeChanging(value);
					this.SendPropertyChanging();
					this._MaxFileSize = value;
					this.SendPropertyChanged("MaxFileSize");
					this.OnMaxFileSizeChanged();
				}
			}
		}

		[Column(Storage = "_FileLibraryTypeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int FileLibraryTypeID
		{
			get
			{
				return this._FileLibraryTypeID;
			}
			set
			{
				if ((this._FileLibraryTypeID != value))
				{
					if (this._FileLibraryType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileLibraryTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FileLibraryTypeID = value;
					this.SendPropertyChanged("FileLibraryTypeID");
					this.OnFileLibraryTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}

		[Column(Storage = "_FullPath", DbType = "NVarChar(4000)", UpdateCheck = UpdateCheck.Never)]
		public string FullPath
		{
			get
			{
				return this._FullPath;
			}
			set
			{
				if ((this._FullPath != value))
				{
					this.OnFullPathChanging(value);
					this.SendPropertyChanging();
					this._FullPath = value;
					this.SendPropertyChanged("FullPath");
					this.OnFullPathChanged();
				}
			}
		}

		[Column(Storage = "_StorageType", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char StorageType
		{
			get
			{
				return this._StorageType;
			}
			set
			{
				if ((this._StorageType != value))
				{
					this.OnStorageTypeChanging(value);
					this.SendPropertyChanging();
					this._StorageType = value;
					this.SendPropertyChanged("StorageType");
					this.OnStorageTypeChanged();
				}
			}
		}

		[Column(Storage = "_StorageParameter", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string StorageParameter
		{
			get
			{
				return this._StorageParameter;
			}
			set
			{
				if ((this._StorageParameter != value))
				{
					this.OnStorageParameterChanging(value);
					this.SendPropertyChanging();
					this._StorageParameter = value;
					this.SendPropertyChanged("StorageParameter");
					this.OnStorageParameterChanged();
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}

		[Column(Storage = "_GuidPath", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string GuidPath
		{
			get
			{
				return this._GuidPath;
			}
			set
			{
				if ((this._GuidPath != value))
				{
					this.OnGuidPathChanging(value);
					this.SendPropertyChanging();
					this._GuidPath = value;
					this.SendPropertyChanged("GuidPath");
					this.OnGuidPathChanged();
				}
			}
		}

		[Association(Name = "FK_V_N_FileLibrary_FileLibraryType", Storage = "_FileLibraryType", ThisKey = "FileLibraryTypeID", OtherKey = "FileLibraryTypeID", IsForeignKey = true)]
		public N_FileLibraryType FileLibraryType
		{
			get
			{
				return this._FileLibraryType.Entity;
			}
			set
			{
				if ((this._FileLibraryType.Entity != value))
				{
					this.SendPropertyChanging();
					this._FileLibraryType.Entity = value;
					this.SendPropertyChanged("FileLibraryType");
				}
			}
		}

		[Association(Name = "FK_V_N_FileLibrary_MainObject", Storage = "_MainObject", ThisKey = "FolderID", OtherKey = "FolderID", IsForeignKey = true)]
		public N_FileLibrary MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_N_FolderFile")]
	public partial class V_N_FolderFile
	{

		private int _ID;

		private string _Title;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.Nullable<int> _ParentID;

		private bool _IsDeleted;

		private string _Extension;

		private long _Length;

		private string _LastModifiedUserTitle;

		private int _IsFile;

		private System.Guid _Guid;

		public V_N_FolderFile()
		{
		}

		[Column(Storage = "_ID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this._LastModifiedDate = value;
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this._LastModifiedUserID = value;
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this._IsDeleted = value;
				}
			}
		}

		[Column(Storage = "_Extension", DbType = "NVarChar(50)", UpdateCheck = UpdateCheck.Never)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this._Extension = value;
				}
			}
		}

		[Column(Storage = "_Length", DbType = "BigInt NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public long Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this._Length = value;
				}
			}
		}

		[Column(Storage = "_LastModifiedUserTitle", DbType = "VarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string LastModifiedUserTitle
		{
			get
			{
				return this._LastModifiedUserTitle;
			}
			set
			{
				if ((this._LastModifiedUserTitle != value))
				{
					this._LastModifiedUserTitle = value;
				}
			}
		}

		[Column(Storage = "_IsFile", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int IsFile
		{
			get
			{
				return this._IsFile;
			}
			set
			{
				if ((this._IsFile != value))
				{
					this._IsFile = value;
				}
			}
		}

		[Column(Storage = "_Guid", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this._Guid = value;
				}
			}
		}
	}

	[Table(Name = "dbo.V_N_FullFolder")]
	public partial class V_N_FullFolder
	{

		private System.Nullable<int> _FolderID;

		private System.Nullable<int> _ParentID;

		private System.Nullable<int> _ArcLen;

		public V_N_FullFolder()
		{
		}

		[Column(Storage = "_FolderID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> FolderID
		{
			get
			{
				return this._FolderID;
			}
			set
			{
				if ((this._FolderID != value))
				{
					this._FolderID = value;
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}

		[Column(Storage = "_ArcLen", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ArcLen
		{
			get
			{
				return this._ArcLen;
			}
			set
			{
				if ((this._ArcLen != value))
				{
					this._ArcLen = value;
				}
			}
		}
	}

	[Table(Name = "dbo.V_N_TextResource")]
	public partial class V_N_TextResource : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _TextResourceID;

		private string _Title;

		private string _SysName;

		private string _LanguageCode;

		private string _Text;

		private EntityRef<N_TextResource> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnTextResourceIDChanging(int value);
		partial void OnTextResourceIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnTextChanging(string value);
		partial void OnTextChanged();
		#endregion

		public V_N_TextResource()
		{
			this._MainObject = default(EntityRef<N_TextResource>);
			OnCreated();
		}

		[Column(Storage = "_TextResourceID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int TextResourceID
		{
			get
			{
				return this._TextResourceID;
			}
			set
			{
				if ((this._TextResourceID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTextResourceIDChanging(value);
					this.SendPropertyChanging();
					this._TextResourceID = value;
					this.SendPropertyChanged("TextResourceID");
					this.OnTextResourceIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_Text", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}

		[Association(Name = "FK_V_N_TextResource_MainObject", Storage = "_MainObject", ThisKey = "TextResourceID", OtherKey = "TextResourceID", IsForeignKey = true)]
		public N_TextResource MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_News")]
	public partial class V_News : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _NewsID;

		private System.Nullable<int> _ImageFileID;

		private System.DateTime _NewsDate;

		private string _LanguageCode;

		private string _ShortContent;

		private string _Content;

		private int _SiteObjectID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private string _Title;

		private int _LastModifiedUserID;

		private int _SeqNo;

		private int _ParentID;

		private string _ClassName;

		private bool _IsPublished;

		private string _SubTitle;

		private System.DateTime _CreateDate;

		private System.Nullable<System.DateTime> _PublishDate;

		private EntityRef<News> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnNewsIDChanging(int value);
		partial void OnNewsIDChanged();
		partial void OnImageFileIDChanging(System.Nullable<int> value);
		partial void OnImageFileIDChanged();
		partial void OnNewsDateChanging(System.DateTime value);
		partial void OnNewsDateChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnShortContentChanging(string value);
		partial void OnShortContentChanged();
		partial void OnContentChanging(string value);
		partial void OnContentChanged();
		partial void OnSiteObjectIDChanging(int value);
		partial void OnSiteObjectIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnParentIDChanging(int value);
		partial void OnParentIDChanged();
		partial void OnClassNameChanging(string value);
		partial void OnClassNameChanged();
		partial void OnIsPublishedChanging(bool value);
		partial void OnIsPublishedChanged();
		partial void OnSubTitleChanging(string value);
		partial void OnSubTitleChanged();
		partial void OnCreateDateChanging(System.DateTime value);
		partial void OnCreateDateChanged();
		partial void OnPublishDateChanging(System.Nullable<System.DateTime> value);
		partial void OnPublishDateChanged();
		#endregion

		public V_News()
		{
			this._MainObject = default(EntityRef<News>);
			OnCreated();
		}

		[Column(Storage = "_NewsID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int NewsID
		{
			get
			{
				return this._NewsID;
			}
			set
			{
				if ((this._NewsID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewsIDChanging(value);
					this.SendPropertyChanging();
					this._NewsID = value;
					this.SendPropertyChanged("NewsID");
					this.OnNewsIDChanged();
				}
			}
		}

		[Column(Storage = "_ImageFileID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ImageFileID
		{
			get
			{
				return this._ImageFileID;
			}
			set
			{
				if ((this._ImageFileID != value))
				{
					this.OnImageFileIDChanging(value);
					this.SendPropertyChanging();
					this._ImageFileID = value;
					this.SendPropertyChanged("ImageFileID");
					this.OnImageFileIDChanged();
				}
			}
		}

		[Column(Storage = "_NewsDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime NewsDate
		{
			get
			{
				return this._NewsDate;
			}
			set
			{
				if ((this._NewsDate != value))
				{
					this.OnNewsDateChanging(value);
					this.SendPropertyChanging();
					this._NewsDate = value;
					this.SendPropertyChanged("NewsDate");
					this.OnNewsDateChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_ShortContent", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ShortContent
		{
			get
			{
				return this._ShortContent;
			}
			set
			{
				if ((this._ShortContent != value))
				{
					this.OnShortContentChanging(value);
					this.SendPropertyChanging();
					this._ShortContent = value;
					this.SendPropertyChanged("ShortContent");
					this.OnShortContentChanged();
				}
			}
		}

		[Column(Storage = "_Content", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}

		[Column(Storage = "_SiteObjectID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SiteObjectID
		{
			get
			{
				return this._SiteObjectID;
			}
			set
			{
				if ((this._SiteObjectID != value))
				{
					this.OnSiteObjectIDChanging(value);
					this.SendPropertyChanging();
					this._SiteObjectID = value;
					this.SendPropertyChanged("SiteObjectID");
					this.OnSiteObjectIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}

		[Column(Storage = "_ClassName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}

		[Column(Storage = "_IsPublished", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsPublished
		{
			get
			{
				return this._IsPublished;
			}
			set
			{
				if ((this._IsPublished != value))
				{
					this.OnIsPublishedChanging(value);
					this.SendPropertyChanging();
					this._IsPublished = value;
					this.SendPropertyChanged("IsPublished");
					this.OnIsPublishedChanged();
				}
			}
		}

		[Column(Storage = "_SubTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SubTitle
		{
			get
			{
				return this._SubTitle;
			}
			set
			{
				if ((this._SubTitle != value))
				{
					this.OnSubTitleChanging(value);
					this.SendPropertyChanging();
					this._SubTitle = value;
					this.SendPropertyChanged("SubTitle");
					this.OnSubTitleChanged();
				}
			}
		}

		[Column(Storage = "_CreateDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}

		[Column(Storage = "_PublishDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}

		[Association(Name = "FK_V_News_MainObject", Storage = "_MainObject", ThisKey = "NewsID", OtherKey = "NewsID", IsForeignKey = true)]
		public News MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_RFSubject")]
	public partial class V_RFSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _RFSubjectID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _Code;

		private string _LanguageCode;

		private string _Title;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<RFSubject> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnRFSubjectIDChanging(int value);
		partial void OnRFSubjectIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnCodeChanging(string value);
		partial void OnCodeChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		#endregion

		public V_RFSubject()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MainObject = default(EntityRef<RFSubject>);
			OnCreated();
		}

		[Column(Storage = "_RFSubjectID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int RFSubjectID
		{
			get
			{
				return this._RFSubjectID;
			}
			set
			{
				if ((this._RFSubjectID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRFSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._RFSubjectID = value;
					this.SendPropertyChanged("RFSubjectID");
					this.OnRFSubjectIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_Code", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(1000)", UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Association(Name = "FK_V_RFSubject_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				if ((this._LastModifiedUser.Entity != value))
				{
					this.SendPropertyChanging();
					this._LastModifiedUser.Entity = value;
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_V_RFSubject_MainObject", Storage = "_MainObject", ThisKey = "RFSubjectID", OtherKey = "RFSubjectID", IsForeignKey = true)]
		public RFSubject MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_SimplePage")]
	public partial class V_SimplePage : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SimplePageID;

		private string _SysName;

		private string _LanguageCode;

		private string _Content;

		private int _SiteObjectID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private string _Title;

		private int _LastModifiedUserID;

		private int _SeqNo;

		private int _ParentID;

		private string _ClassName;

		private bool _IsPublished;

		private string _SubTitle;

		private System.DateTime _CreateDate;

		private System.Nullable<System.DateTime> _PublishDate;

		private EntityRef<SimplePage> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSimplePageIDChanging(int value);
		partial void OnSimplePageIDChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnContentChanging(string value);
		partial void OnContentChanged();
		partial void OnSiteObjectIDChanging(int value);
		partial void OnSiteObjectIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnParentIDChanging(int value);
		partial void OnParentIDChanged();
		partial void OnClassNameChanging(string value);
		partial void OnClassNameChanged();
		partial void OnIsPublishedChanging(bool value);
		partial void OnIsPublishedChanged();
		partial void OnSubTitleChanging(string value);
		partial void OnSubTitleChanged();
		partial void OnCreateDateChanging(System.DateTime value);
		partial void OnCreateDateChanged();
		partial void OnPublishDateChanging(System.Nullable<System.DateTime> value);
		partial void OnPublishDateChanged();
		#endregion

		public V_SimplePage()
		{
			this._MainObject = default(EntityRef<SimplePage>);
			OnCreated();
		}

		[Column(Storage = "_SimplePageID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int SimplePageID
		{
			get
			{
				return this._SimplePageID;
			}
			set
			{
				if ((this._SimplePageID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSimplePageIDChanging(value);
					this.SendPropertyChanging();
					this._SimplePageID = value;
					this.SendPropertyChanged("SimplePageID");
					this.OnSimplePageIDChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_Content", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}

		[Column(Storage = "_SiteObjectID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SiteObjectID
		{
			get
			{
				return this._SiteObjectID;
			}
			set
			{
				if ((this._SiteObjectID != value))
				{
					this.OnSiteObjectIDChanging(value);
					this.SendPropertyChanging();
					this._SiteObjectID = value;
					this.SendPropertyChanged("SiteObjectID");
					this.OnSiteObjectIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}

		[Column(Storage = "_ClassName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}

		[Column(Storage = "_IsPublished", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsPublished
		{
			get
			{
				return this._IsPublished;
			}
			set
			{
				if ((this._IsPublished != value))
				{
					this.OnIsPublishedChanging(value);
					this.SendPropertyChanging();
					this._IsPublished = value;
					this.SendPropertyChanged("IsPublished");
					this.OnIsPublishedChanged();
				}
			}
		}

		[Column(Storage = "_SubTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SubTitle
		{
			get
			{
				return this._SubTitle;
			}
			set
			{
				if ((this._SubTitle != value))
				{
					this.OnSubTitleChanging(value);
					this.SendPropertyChanging();
					this._SubTitle = value;
					this.SendPropertyChanged("SubTitle");
					this.OnSubTitleChanged();
				}
			}
		}

		[Column(Storage = "_CreateDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}

		[Column(Storage = "_PublishDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}

		[Association(Name = "FK_V_SimplePage_MainObject", Storage = "_MainObject", ThisKey = "SimplePageID", OtherKey = "SimplePageID", IsForeignKey = true)]
		public SimplePage MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_SiteObject")]
	public partial class V_SiteObject : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SiteObjectID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private int _SeqNo;

		private int _ParentID;

		private string _ClassName;

		private bool _IsPublished;

		private System.DateTime _CreateDate;

		private System.Nullable<System.DateTime> _PublishDate;

		private string _LanguageCode;

		private string _Title;

		private string _SubTitle;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<V_SiteSection> _Parent;

		private EntityRef<SiteObject> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSiteObjectIDChanging(int value);
		partial void OnSiteObjectIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnParentIDChanging(int value);
		partial void OnParentIDChanged();
		partial void OnClassNameChanging(string value);
		partial void OnClassNameChanged();
		partial void OnIsPublishedChanging(bool value);
		partial void OnIsPublishedChanged();
		partial void OnCreateDateChanging(System.DateTime value);
		partial void OnCreateDateChanged();
		partial void OnPublishDateChanging(System.Nullable<System.DateTime> value);
		partial void OnPublishDateChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSubTitleChanging(string value);
		partial void OnSubTitleChanged();
		#endregion

		public V_SiteObject()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Parent = default(EntityRef<V_SiteSection>);
			this._MainObject = default(EntityRef<SiteObject>);
			OnCreated();
		}

		[Column(Storage = "_SiteObjectID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int SiteObjectID
		{
			get
			{
				return this._SiteObjectID;
			}
			set
			{
				if ((this._SiteObjectID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteObjectIDChanging(value);
					this.SendPropertyChanging();
					this._SiteObjectID = value;
					this.SendPropertyChanged("SiteObjectID");
					this.OnSiteObjectIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}

		[Column(Storage = "_ClassName", DbType = "NVarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}

		[Column(Storage = "_IsPublished", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsPublished
		{
			get
			{
				return this._IsPublished;
			}
			set
			{
				if ((this._IsPublished != value))
				{
					this.OnIsPublishedChanging(value);
					this.SendPropertyChanging();
					this._IsPublished = value;
					this.SendPropertyChanged("IsPublished");
					this.OnIsPublishedChanged();
				}
			}
		}

		[Column(Storage = "_CreateDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}

		[Column(Storage = "_PublishDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SubTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SubTitle
		{
			get
			{
				return this._SubTitle;
			}
			set
			{
				if ((this._SubTitle != value))
				{
					this.OnSubTitleChanging(value);
					this.SendPropertyChanging();
					this._SubTitle = value;
					this.SendPropertyChanged("SubTitle");
					this.OnSubTitleChanged();
				}
			}
		}

		[Association(Name = "FK_V_SiteObject_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				if ((this._LastModifiedUser.Entity != value))
				{
					this.SendPropertyChanging();
					this._LastModifiedUser.Entity = value;
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_V_SiteObject_Parent", Storage = "_Parent", ThisKey = "ParentID,LanguageCode", OtherKey = "SiteSectionID,LanguageCode", IsForeignKey = true)]
		public V_SiteSection Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				if ((this._Parent.Entity != value))
				{
					this.SendPropertyChanging();
					this._Parent.Entity = value;
					this.SendPropertyChanged("Parent");
				}
			}
		}

		[Association(Name = "FK_V_SiteObject_MainObject", Storage = "_MainObject", ThisKey = "SiteObjectID", OtherKey = "SiteObjectID", IsForeignKey = true)]
		public SiteObject MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_SiteSection")]
	public partial class V_SiteSection : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _SiteSectionID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.Nullable<int> _ParentID;

		private System.DateTime _CreateDate;

		private int _SeqNo;

		private string _SysName;

		private System.Nullable<System.DateTime> _PublishDate;

		private bool _ShowInSiteMap;

		private bool _ShowInNavigation;

		private bool _IsPublished;

		private string _SiteObjectsClasses;

		private string _ViewName;

		private string _Description;

		private string _Keywords;

		private string _PageTitle;

		private string _LanguageCode;

		private string _Title;

		private string _FullPath;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<V_SiteSection> _Parent;

		private EntitySet<V_SiteObject> _SiteObjects;

		private EntitySet<V_SiteSection> _SiteSections;

		private EntityRef<SiteSection> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSiteSectionIDChanging(int value);
		partial void OnSiteSectionIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnParentIDChanging(System.Nullable<int> value);
		partial void OnParentIDChanged();
		partial void OnCreateDateChanging(System.DateTime value);
		partial void OnCreateDateChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnPublishDateChanging(System.Nullable<System.DateTime> value);
		partial void OnPublishDateChanged();
		partial void OnShowInSiteMapChanging(bool value);
		partial void OnShowInSiteMapChanged();
		partial void OnShowInNavigationChanging(bool value);
		partial void OnShowInNavigationChanged();
		partial void OnIsPublishedChanging(bool value);
		partial void OnIsPublishedChanged();
		partial void OnSiteObjectsClassesChanging(string value);
		partial void OnSiteObjectsClassesChanged();
		partial void OnViewNameChanging(string value);
		partial void OnViewNameChanged();
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		partial void OnKeywordsChanging(string value);
		partial void OnKeywordsChanged();
		partial void OnPageTitleChanging(string value);
		partial void OnPageTitleChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnFullPathChanging(string value);
		partial void OnFullPathChanged();
		#endregion

		public V_SiteSection()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Parent = default(EntityRef<V_SiteSection>);
			this._SiteObjects = new EntitySet<V_SiteObject>();
			this._SiteSections = new EntitySet<V_SiteSection>();
			this._MainObject = default(EntityRef<SiteSection>);
			OnCreated();
		}

		[Column(Storage = "_SiteSectionID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int SiteSectionID
		{
			get
			{
				return this._SiteSectionID;
			}
			set
			{
				if ((this._SiteSectionID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteSectionIDChanging(value);
					this.SendPropertyChanging();
					this._SiteSectionID = value;
					this.SendPropertyChanged("SiteSectionID");
					this.OnSiteSectionIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}

		[Column(Storage = "_CreateDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(255)", UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_PublishDate", DbType = "DateTime", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}

		[Column(Storage = "_ShowInSiteMap", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool ShowInSiteMap
		{
			get
			{
				return this._ShowInSiteMap;
			}
			set
			{
				if ((this._ShowInSiteMap != value))
				{
					this.OnShowInSiteMapChanging(value);
					this.SendPropertyChanging();
					this._ShowInSiteMap = value;
					this.SendPropertyChanged("ShowInSiteMap");
					this.OnShowInSiteMapChanged();
				}
			}
		}

		[Column(Storage = "_ShowInNavigation", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool ShowInNavigation
		{
			get
			{
				return this._ShowInNavigation;
			}
			set
			{
				if ((this._ShowInNavigation != value))
				{
					this.OnShowInNavigationChanging(value);
					this.SendPropertyChanging();
					this._ShowInNavigation = value;
					this.SendPropertyChanged("ShowInNavigation");
					this.OnShowInNavigationChanged();
				}
			}
		}

		[Column(Storage = "_IsPublished", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsPublished
		{
			get
			{
				return this._IsPublished;
			}
			set
			{
				if ((this._IsPublished != value))
				{
					this.OnIsPublishedChanging(value);
					this.SendPropertyChanging();
					this._IsPublished = value;
					this.SendPropertyChanged("IsPublished");
					this.OnIsPublishedChanged();
				}
			}
		}

		[Column(Storage = "_SiteObjectsClasses", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string SiteObjectsClasses
		{
			get
			{
				return this._SiteObjectsClasses;
			}
			set
			{
				if ((this._SiteObjectsClasses != value))
				{
					this.OnSiteObjectsClassesChanging(value);
					this.SendPropertyChanging();
					this._SiteObjectsClasses = value;
					this.SendPropertyChanged("SiteObjectsClasses");
					this.OnSiteObjectsClassesChanged();
				}
			}
		}

		[Column(Storage = "_ViewName", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string ViewName
		{
			get
			{
				return this._ViewName;
			}
			set
			{
				if ((this._ViewName != value))
				{
					this.OnViewNameChanging(value);
					this.SendPropertyChanging();
					this._ViewName = value;
					this.SendPropertyChanged("ViewName");
					this.OnViewNameChanged();
				}
			}
		}

		[Column(Storage = "_Description", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}

		[Column(Storage = "_Keywords", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				if ((this._Keywords != value))
				{
					this.OnKeywordsChanging(value);
					this.SendPropertyChanging();
					this._Keywords = value;
					this.SendPropertyChanged("Keywords");
					this.OnKeywordsChanged();
				}
			}
		}

		[Column(Storage = "_PageTitle", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string PageTitle
		{
			get
			{
				return this._PageTitle;
			}
			set
			{
				if ((this._PageTitle != value))
				{
					this.OnPageTitleChanging(value);
					this.SendPropertyChanging();
					this._PageTitle = value;
					this.SendPropertyChanged("PageTitle");
					this.OnPageTitleChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(512)", UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_FullPath", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string FullPath
		{
			get
			{
				return this._FullPath;
			}
			set
			{
				if ((this._FullPath != value))
				{
					this.OnFullPathChanging(value);
					this.SendPropertyChanging();
					this._FullPath = value;
					this.SendPropertyChanged("FullPath");
					this.OnFullPathChanged();
				}
			}
		}

		[Association(Name = "FK_V_SiteSection_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				if ((this._LastModifiedUser.Entity != value))
				{
					this.SendPropertyChanging();
					this._LastModifiedUser.Entity = value;
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_V_SiteSection_Parent", Storage = "_Parent", ThisKey = "ParentID,LanguageCode", OtherKey = "SiteSectionID,LanguageCode", IsForeignKey = true)]
		public V_SiteSection Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				if ((this._Parent.Entity != value))
				{
					this.SendPropertyChanging();
					this._Parent.Entity = value;
					this.SendPropertyChanged("Parent");
				}
			}
		}

		[Association(Name = "FK_V_SiteSection_SiteObjects", Storage = "_SiteObjects", ThisKey = "SiteSectionID,LanguageCode", OtherKey = "ParentID,LanguageCode")]
		public EntitySet<V_SiteObject> SiteObjects
		{
			get
			{
				return this._SiteObjects;
			}
			set
			{
				this._SiteObjects.Assign(value);
			}
		}

		[Association(Name = "FK_V_SiteSection_SiteSections", Storage = "_SiteSections", ThisKey = "SiteSectionID,LanguageCode", OtherKey = "ParentID,LanguageCode")]
		public EntitySet<V_SiteSection> SiteSections
		{
			get
			{
				return this._SiteSections;
			}
			set
			{
				this._SiteSections.Assign(value);
			}
		}

		[Association(Name = "FK_V_SiteSection_MainObject", Storage = "_MainObject", ThisKey = "SiteSectionID", OtherKey = "SiteSectionID", IsForeignKey = true)]
		public SiteSection MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.V_SPM_AllRoleAsso")]
	public partial class V_SPM_AllRoleAsso
	{

		private System.Nullable<int> _ParentRoleID;

		private System.Nullable<int> _RoleID;

		public V_SPM_AllRoleAsso()
		{
		}

		[Column(Storage = "_ParentRoleID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ParentRoleID
		{
			get
			{
				return this._ParentRoleID;
			}
			set
			{
				if ((this._ParentRoleID != value))
				{
					this._ParentRoleID = value;
				}
			}
		}

		[Column(Storage = "_RoleID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
	}

	[Table(Name = "dbo.V_SPM_AllSubjectRole")]
	public partial class V_SPM_AllSubjectRole
	{

		private System.Nullable<int> _SubjectID;

		private System.Nullable<int> _RoleID;

		public V_SPM_AllSubjectRole()
		{
		}

		[Column(Storage = "_SubjectID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					this._SubjectID = value;
				}
			}
		}

		[Column(Storage = "_RoleID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
	}

	[Table(Name = "dbo.V_UserInfo")]
	public partial class V_UserInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _UserInfoID;

		private string _Phone;

		private string _Post;

		private System.Nullable<System.Guid> _ContractorGUID;

		private char _Type;

		private System.Nullable<int> _RFSubjectID;

		private System.Nullable<int> _RepresentationID;

		private bool _IsESIA;

		private string _LanguageCode;

		private string _EMail;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private string _SID;

		private string _SystemName;

		private string _Title;

		private EntityRef<Contractor> _Contractor;

		private EntityRef<Representation> _Representation;

		private EntityRef<C_RFSubject> _RFSubject;

		private EntityRef<UserInfo> _MainObject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnUserInfoIDChanging(int value);
		partial void OnUserInfoIDChanged();
		partial void OnPhoneChanging(string value);
		partial void OnPhoneChanged();
		partial void OnPostChanging(string value);
		partial void OnPostChanged();
		partial void OnContractorGUIDChanging(System.Nullable<System.Guid> value);
		partial void OnContractorGUIDChanged();
		partial void OnTypeChanging(char value);
		partial void OnTypeChanged();
		partial void OnRFSubjectIDChanging(System.Nullable<int> value);
		partial void OnRFSubjectIDChanged();
		partial void OnRepresentationIDChanging(System.Nullable<int> value);
		partial void OnRepresentationIDChanged();
		partial void OnIsESIAChanging(bool value);
		partial void OnIsESIAChanged();
		partial void OnLanguageCodeChanging(string value);
		partial void OnLanguageCodeChanged();
		partial void OnEMailChanging(string value);
		partial void OnEMailChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnSIDChanging(string value);
		partial void OnSIDChanged();
		partial void OnSystemNameChanging(string value);
		partial void OnSystemNameChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		#endregion

		public V_UserInfo()
		{
			this._Contractor = default(EntityRef<Contractor>);
			this._Representation = default(EntityRef<Representation>);
			this._RFSubject = default(EntityRef<C_RFSubject>);
			this._MainObject = default(EntityRef<UserInfo>);
			OnCreated();
		}

		[Column(Storage = "_UserInfoID", DbType = "Int NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public int UserInfoID
		{
			get
			{
				return this._UserInfoID;
			}
			set
			{
				if ((this._UserInfoID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserInfoIDChanging(value);
					this.SendPropertyChanging();
					this._UserInfoID = value;
					this.SendPropertyChanged("UserInfoID");
					this.OnUserInfoIDChanged();
				}
			}
		}

		[Column(Storage = "_Phone", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}

		[Column(Storage = "_Post", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				if ((this._Post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._Post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}

		[Column(Storage = "_ContractorGUID", DbType = "UniqueIdentifier", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<System.Guid> ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorGUID = value;
					this.SendPropertyChanged("ContractorGUID");
					this.OnContractorGUIDChanged();
				}
			}
		}

		[Column(Storage = "_Type", DbType = "Char(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}

		[Column(Storage = "_RFSubjectID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> RFSubjectID
		{
			get
			{
				return this._RFSubjectID;
			}
			set
			{
				if ((this._RFSubjectID != value))
				{
					if (this._RFSubject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRFSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._RFSubjectID = value;
					this.SendPropertyChanged("RFSubjectID");
					this.OnRFSubjectIDChanged();
				}
			}
		}

		[Column(Storage = "_RepresentationID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					if (this._Representation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentationID = value;
					this.SendPropertyChanged("RepresentationID");
					this.OnRepresentationIDChanged();
				}
			}
		}

		[Column(Storage = "_IsESIA", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsESIA
		{
			get
			{
				return this._IsESIA;
			}
			set
			{
				if ((this._IsESIA != value))
				{
					this.OnIsESIAChanging(value);
					this.SendPropertyChanging();
					this._IsESIA = value;
					this.SendPropertyChanged("IsESIA");
					this.OnIsESIAChanged();
				}
			}
		}

		[Column(Storage = "_LanguageCode", DbType = "NChar(2) NOT NULL", CanBeNull = false, IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}

		[Column(Storage = "_EMail", DbType = "NVarChar(255)", UpdateCheck = UpdateCheck.Never)]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_SID", DbType = "VarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SID
		{
			get
			{
				return this._SID;
			}
			set
			{
				if ((this._SID != value))
				{
					this.OnSIDChanging(value);
					this.SendPropertyChanging();
					this._SID = value;
					this.SendPropertyChanged("SID");
					this.OnSIDChanged();
				}
			}
		}

		[Column(Storage = "_SystemName", DbType = "VarChar(255)", UpdateCheck = UpdateCheck.Never)]
		public string SystemName
		{
			get
			{
				return this._SystemName;
			}
			set
			{
				if ((this._SystemName != value))
				{
					this.OnSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SystemName = value;
					this.SendPropertyChanged("SystemName");
					this.OnSystemNameChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "VarChar(255) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Association(Name = "FK_V_UserInfo_Contractor", Storage = "_Contractor", ThisKey = "ContractorGUID", OtherKey = "ContractorGUID", IsForeignKey = true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				if ((this._Contractor.Entity != value))
				{
					this.SendPropertyChanging();
					this._Contractor.Entity = value;
					this.SendPropertyChanged("Contractor");
				}
			}
		}

		[Association(Name = "FK_V_UserInfo_Representation", Storage = "_Representation", ThisKey = "RepresentationID", OtherKey = "RepresentationID", IsForeignKey = true)]
		public Representation Representation
		{
			get
			{
				return this._Representation.Entity;
			}
			set
			{
				if ((this._Representation.Entity != value))
				{
					this.SendPropertyChanging();
					this._Representation.Entity = value;
					this.SendPropertyChanged("Representation");
				}
			}
		}

		[Association(Name = "FK_V_UserInfo_RFSubject", Storage = "_RFSubject", ThisKey = "RFSubjectID", OtherKey = "RFSubjectID", IsForeignKey = true)]
		public C_RFSubject RFSubject
		{
			get
			{
				return this._RFSubject.Entity;
			}
			set
			{
				if ((this._RFSubject.Entity != value))
				{
					this.SendPropertyChanging();
					this._RFSubject.Entity = value;
					this.SendPropertyChanged("RFSubject");
				}
			}
		}

		[Association(Name = "FK_V_UserInfo_MainObject", Storage = "_MainObject", ThisKey = "UserInfoID", OtherKey = "UserInfoID", IsForeignKey = true)]
		public UserInfo MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.VisitRecord")]
	public partial class VisitRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _VisitRecordID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.DateTime _CreateDate;

		private int _RepresentationID;

		private int _EmployeeID;

		private int _VisitPurposeID;

		private System.DateTime _VisitDate;

		private string _Surname;

		private string _Firstname;

		private string _Patronymic;

		private string _Comment;

		private System.Nullable<int> _ApplicantID;

		private string _Phone;

		private string _Email;

		private int _Method;

		private System.Guid _ContactorGUID;

		private string _Visitor;

		private string _VisitorPost;

		private string _Cabinet;

		private int _VisitID;

		private System.Nullable<int> _CountDoc;

		private string _NumberDoc;

		private string _Title;

		private EntityRef<Contractor> _Contactor;

		private EntityRef<Employee> _Employee;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<Representation> _Representation;

		private EntityRef<C_VisitPurpose> _VisitPurpose;

		private EntitySet<VisitTime> _VisitDates;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnVisitRecordIDChanging(int value);
		partial void OnVisitRecordIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnCreateDateChanging(System.DateTime value);
		partial void OnCreateDateChanged();
		partial void OnRepresentationIDChanging(int value);
		partial void OnRepresentationIDChanged();
		partial void OnEmployeeIDChanging(int value);
		partial void OnEmployeeIDChanged();
		partial void OnVisitPurposeIDChanging(int value);
		partial void OnVisitPurposeIDChanged();
		partial void OnVisitDateChanging(System.DateTime value);
		partial void OnVisitDateChanged();
		partial void OnSurnameChanging(string value);
		partial void OnSurnameChanged();
		partial void OnFirstnameChanging(string value);
		partial void OnFirstnameChanged();
		partial void OnPatronymicChanging(string value);
		partial void OnPatronymicChanged();
		partial void OnCommentChanging(string value);
		partial void OnCommentChanged();
		partial void OnApplicantIDChanging(System.Nullable<int> value);
		partial void OnApplicantIDChanged();
		partial void OnPhoneChanging(string value);
		partial void OnPhoneChanged();
		partial void OnEmailChanging(string value);
		partial void OnEmailChanged();
		partial void OnMethodChanging(int value);
		partial void OnMethodChanged();
		partial void OnContactorGUIDChanging(System.Guid value);
		partial void OnContactorGUIDChanged();
		partial void OnVisitorChanging(string value);
		partial void OnVisitorChanged();
		partial void OnVisitorPostChanging(string value);
		partial void OnVisitorPostChanged();
		partial void OnCabinetChanging(string value);
		partial void OnCabinetChanged();
		partial void OnVisitIDChanging(int value);
		partial void OnVisitIDChanged();
		partial void OnCountDocChanging(System.Nullable<int> value);
		partial void OnCountDocChanged();
		partial void OnNumberDocChanging(string value);
		partial void OnNumberDocChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		#endregion

		public VisitRecord()
		{
			this._Contactor = default(EntityRef<Contractor>);
			this._Employee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Representation = default(EntityRef<Representation>);
			this._VisitPurpose = default(EntityRef<C_VisitPurpose>);
			this._VisitDates = new EntitySet<VisitTime>(new Action<VisitTime>(this.attach_VisitDates), new Action<VisitTime>(this.detach_VisitDates));
			OnCreated();
		}

		[Column(Storage = "_VisitRecordID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int VisitRecordID
		{
			get
			{
				return this._VisitRecordID;
			}
			set
			{
				if ((this._VisitRecordID != value))
				{
					this.OnVisitRecordIDChanging(value);
					this.SendPropertyChanging();
					this._VisitRecordID = value;
					this.SendPropertyChanged("VisitRecordID");
					this.OnVisitRecordIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_CreateDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}

		[Column(Storage = "_RepresentationID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					if (this._Representation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentationID = value;
					this.SendPropertyChanged("RepresentationID");
					this.OnRepresentationIDChanged();
				}
			}
		}

		[Column(Storage = "_EmployeeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}

		[Column(Storage = "_VisitPurposeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int VisitPurposeID
		{
			get
			{
				return this._VisitPurposeID;
			}
			set
			{
				if ((this._VisitPurposeID != value))
				{
					if (this._VisitPurpose.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitPurposeIDChanging(value);
					this.SendPropertyChanging();
					this._VisitPurposeID = value;
					this.SendPropertyChanged("VisitPurposeID");
					this.OnVisitPurposeIDChanged();
				}
			}
		}

		[Column(Storage = "_VisitDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime VisitDate
		{
			get
			{
				return this._VisitDate;
			}
			set
			{
				if ((this._VisitDate != value))
				{
					this.OnVisitDateChanging(value);
					this.SendPropertyChanging();
					this._VisitDate = value;
					this.SendPropertyChanged("VisitDate");
					this.OnVisitDateChanged();
				}
			}
		}

		[Column(Storage = "_Surname", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}

		[Column(Storage = "_Firstname", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}

		[Column(Storage = "_Patronymic", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}

		[Column(Storage = "_Comment", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}

		[Column(Storage = "_ApplicantID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ApplicantID
		{
			get
			{
				return this._ApplicantID;
			}
			set
			{
				if ((this._ApplicantID != value))
				{
					this.OnApplicantIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicantID = value;
					this.SendPropertyChanged("ApplicantID");
					this.OnApplicantIDChanged();
				}
			}
		}

		[Column(Storage = "_Phone", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}

		[Column(Storage = "_Email", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}

		[Column(Storage = "_Method", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}

		[Column(Storage = "_ContactorGUID", DbType = "UniqueIdentifier NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.Guid ContactorGUID
		{
			get
			{
				return this._ContactorGUID;
			}
			set
			{
				if ((this._ContactorGUID != value))
				{
					if (this._Contactor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContactorGUID = value;
					this.SendPropertyChanged("ContactorGUID");
					this.OnContactorGUIDChanged();
				}
			}
		}

		[Column(Storage = "_Visitor", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Visitor
		{
			get
			{
				return this._Visitor;
			}
			set
			{
				if ((this._Visitor != value))
				{
					this.OnVisitorChanging(value);
					this.SendPropertyChanging();
					this._Visitor = value;
					this.SendPropertyChanged("Visitor");
					this.OnVisitorChanged();
				}
			}
		}

		[Column(Storage = "_VisitorPost", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string VisitorPost
		{
			get
			{
				return this._VisitorPost;
			}
			set
			{
				if ((this._VisitorPost != value))
				{
					this.OnVisitorPostChanging(value);
					this.SendPropertyChanging();
					this._VisitorPost = value;
					this.SendPropertyChanged("VisitorPost");
					this.OnVisitorPostChanged();
				}
			}
		}

		[Column(Storage = "_Cabinet", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Cabinet
		{
			get
			{
				return this._Cabinet;
			}
			set
			{
				if ((this._Cabinet != value))
				{
					this.OnCabinetChanging(value);
					this.SendPropertyChanging();
					this._Cabinet = value;
					this.SendPropertyChanged("Cabinet");
					this.OnCabinetChanged();
				}
			}
		}

		[Column(Storage = "_VisitID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}

		[Column(Storage = "_CountDoc", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> CountDoc
		{
			get
			{
				return this._CountDoc;
			}
			set
			{
				if ((this._CountDoc != value))
				{
					this.OnCountDocChanging(value);
					this.SendPropertyChanging();
					this._CountDoc = value;
					this.SendPropertyChanged("CountDoc");
					this.OnCountDocChanged();
				}
			}
		}

		[Column(Storage = "_NumberDoc", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string NumberDoc
		{
			get
			{
				return this._NumberDoc;
			}
			set
			{
				if ((this._NumberDoc != value))
				{
					this.OnNumberDocChanging(value);
					this.SendPropertyChanging();
					this._NumberDoc = value;
					this.SendPropertyChanged("NumberDoc");
					this.OnNumberDocChanged();
				}
			}
		}

		[Column(Storage = "_Title", AutoSync = AutoSync.Always, DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, IsDbGenerated = true, UpdateCheck = UpdateCheck.Never, Expression = "(isnull(([Surname]+isnull((\' \'+substring([Firstname],(1),(1)))+\'.\',\'\'))+isnull((\'" +
			" \'+substring([Patronymic],(1),(1)))+\'.\',\'\'),\'\'))")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Association(Name = "FK_VisitRecord_Contactor", Storage = "_Contactor", ThisKey = "ContactorGUID", OtherKey = "ContractorGUID", IsForeignKey = true)]
		public Contractor Contactor
		{
			get
			{
				return this._Contactor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contactor.Entity;
				if (((previousValue != value)
							|| (this._Contactor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contactor.Entity = null;
						previousValue.VisitRecord.Remove(this);
					}
					this._Contactor.Entity = value;
					if ((value != null))
					{
						value.VisitRecord.Add(this);
						this._ContactorGUID = value.ContractorGUID;
					}
					else
					{
						this._ContactorGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Contactor");
				}
			}
		}

		[Association(Name = "FK_VisitRecord_Employee", Storage = "_Employee", ThisKey = "EmployeeID", OtherKey = "EmployeeID", IsForeignKey = true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value)
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.VisitRecord.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.VisitRecord.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}

		[Association(Name = "FK_VisitRecord_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.VisitRecord.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.VisitRecord.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_VisitRecord_Representation", Storage = "_Representation", ThisKey = "RepresentationID", OtherKey = "RepresentationID", IsForeignKey = true)]
		public Representation Representation
		{
			get
			{
				return this._Representation.Entity;
			}
			set
			{
				Representation previousValue = this._Representation.Entity;
				if (((previousValue != value)
							|| (this._Representation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representation.Entity = null;
						previousValue.VisitRecord.Remove(this);
					}
					this._Representation.Entity = value;
					if ((value != null))
					{
						value.VisitRecord.Add(this);
						this._RepresentationID = value.RepresentationID;
					}
					else
					{
						this._RepresentationID = default(int);
					}
					this.SendPropertyChanged("Representation");
				}
			}
		}

		[Association(Name = "FK_VisitRecord_VisitPurpose", Storage = "_VisitPurpose", ThisKey = "VisitPurposeID", OtherKey = "VisitPurposeID", IsForeignKey = true)]
		public C_VisitPurpose VisitPurpose
		{
			get
			{
				return this._VisitPurpose.Entity;
			}
			set
			{
				C_VisitPurpose previousValue = this._VisitPurpose.Entity;
				if (((previousValue != value)
							|| (this._VisitPurpose.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VisitPurpose.Entity = null;
						previousValue.VisitRecord.Remove(this);
					}
					this._VisitPurpose.Entity = value;
					if ((value != null))
					{
						value.VisitRecord.Add(this);
						this._VisitPurposeID = value.VisitPurposeID;
					}
					else
					{
						this._VisitPurposeID = default(int);
					}
					this.SendPropertyChanged("VisitPurpose");
				}
			}
		}

		[Association(Name = "FK_VisitTime_VisitRecord", Storage = "_VisitDates", ThisKey = "VisitRecordID", OtherKey = "VisitRecordID", DeleteRule = "NO ACTION")]
		public EntitySet<VisitTime> VisitDates
		{
			get
			{
				return this._VisitDates;
			}
			set
			{
				this._VisitDates.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_VisitDates(VisitTime entity)
		{
			this.SendPropertyChanging();
			entity.VisitRecord = this;
		}

		private void detach_VisitDates(VisitTime entity)
		{
			this.SendPropertyChanging();
			entity.VisitRecord = null;
		}
	}

	[Table(Name = "dbo.VisitTime")]
	public partial class VisitTime : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _VisitTimeID;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private System.DateTime _VisitDate;

		private int _VisitRecordID;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<VisitRecord> _VisitRecord;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnVisitTimeIDChanging(int value);
		partial void OnVisitTimeIDChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnVisitDateChanging(System.DateTime value);
		partial void OnVisitDateChanged();
		partial void OnVisitRecordIDChanging(int value);
		partial void OnVisitRecordIDChanged();
		#endregion

		public VisitTime()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._VisitRecord = default(EntityRef<VisitRecord>);
			OnCreated();
		}

		[Column(Storage = "_VisitTimeID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int VisitTimeID
		{
			get
			{
				return this._VisitTimeID;
			}
			set
			{
				if ((this._VisitTimeID != value))
				{
					this.OnVisitTimeIDChanging(value);
					this.SendPropertyChanging();
					this._VisitTimeID = value;
					this.SendPropertyChanged("VisitTimeID");
					this.OnVisitTimeIDChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_VisitDate", DbType = "DateTime NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public System.DateTime VisitDate
		{
			get
			{
				return this._VisitDate;
			}
			set
			{
				if ((this._VisitDate != value))
				{
					this.OnVisitDateChanging(value);
					this.SendPropertyChanging();
					this._VisitDate = value;
					this.SendPropertyChanged("VisitDate");
					this.OnVisitDateChanged();
				}
			}
		}

		[Column(Storage = "_VisitRecordID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int VisitRecordID
		{
			get
			{
				return this._VisitRecordID;
			}
			set
			{
				if ((this._VisitRecordID != value))
				{
					if (this._VisitRecord.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitRecordIDChanging(value);
					this.SendPropertyChanging();
					this._VisitRecordID = value;
					this.SendPropertyChanged("VisitRecordID");
					this.OnVisitRecordIDChanged();
				}
			}
		}

		[Association(Name = "FK_VisitTime_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.VisitTime.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.VisitTime.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_VisitTime_VisitRecord", Storage = "_VisitRecord", ThisKey = "VisitRecordID", OtherKey = "VisitRecordID", IsForeignKey = true)]
		public VisitRecord VisitRecord
		{
			get
			{
				return this._VisitRecord.Entity;
			}
			set
			{
				VisitRecord previousValue = this._VisitRecord.Entity;
				if (((previousValue != value)
							|| (this._VisitRecord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VisitRecord.Entity = null;
						previousValue.VisitDates.Remove(this);
					}
					this._VisitRecord.Entity = value;
					if ((value != null))
					{
						value.VisitDates.Add(this);
						this._VisitRecordID = value.VisitRecordID;
					}
					else
					{
						this._VisitRecordID = default(int);
					}
					this.SendPropertyChanged("VisitRecord");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[Table(Name = "dbo.WF_Activity")]
	public partial class WF_Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ActivityID;

		private int _WorkflowID;

		private string _Title;

		private string _SysName;

		private System.Nullable<int> _ParentActivityID;

		private bool _IsActive;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private int _SeqNo;

		private EntitySet<Blank> _Blank;

		private EntitySet<BlankTransition> _BlankTransition;

		private EntitySet<OrderDoc> _OrderDoc;

		private EntitySet<OrderDocTransition> _OrderDocTransition;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<WF_Activity> _ParentActivity;

		private EntitySet<WF_Activity> _ChildActivities;

		private EntityRef<WF_Workflow> _Workflow;

		private EntitySet<WF_Transition> _WF_Transition;

		private EntitySet<WF_Transition> _WF_Transition_TargetActivity;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnActivityIDChanging(int value);
		partial void OnActivityIDChanged();
		partial void OnWorkflowIDChanging(int value);
		partial void OnWorkflowIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnParentActivityIDChanging(System.Nullable<int> value);
		partial void OnParentActivityIDChanged();
		partial void OnIsActiveChanging(bool value);
		partial void OnIsActiveChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		#endregion

		public WF_Activity()
		{
			this._Blank = new EntitySet<Blank>(new Action<Blank>(this.attach_Blank), new Action<Blank>(this.detach_Blank));
			this._BlankTransition = new EntitySet<BlankTransition>(new Action<BlankTransition>(this.attach_BlankTransition), new Action<BlankTransition>(this.detach_BlankTransition));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._OrderDocTransition = new EntitySet<OrderDocTransition>(new Action<OrderDocTransition>(this.attach_OrderDocTransition), new Action<OrderDocTransition>(this.detach_OrderDocTransition));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ParentActivity = default(EntityRef<WF_Activity>);
			this._ChildActivities = new EntitySet<WF_Activity>(new Action<WF_Activity>(this.attach_ChildActivities), new Action<WF_Activity>(this.detach_ChildActivities));
			this._Workflow = default(EntityRef<WF_Workflow>);
			this._WF_Transition = new EntitySet<WF_Transition>(new Action<WF_Transition>(this.attach_WF_Transition), new Action<WF_Transition>(this.detach_WF_Transition));
			this._WF_Transition_TargetActivity = new EntitySet<WF_Transition>(new Action<WF_Transition>(this.attach_WF_Transition_TargetActivity), new Action<WF_Transition>(this.detach_WF_Transition_TargetActivity));
			OnCreated();
		}

		[Column(Storage = "_ActivityID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					this.OnActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ActivityID = value;
					this.SendPropertyChanged("ActivityID");
					this.OnActivityIDChanged();
				}
			}
		}

		[Column(Storage = "_WorkflowID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int WorkflowID
		{
			get
			{
				return this._WorkflowID;
			}
			set
			{
				if ((this._WorkflowID != value))
				{
					if (this._Workflow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkflowIDChanging(value);
					this.SendPropertyChanging();
					this._WorkflowID = value;
					this.SendPropertyChanged("WorkflowID");
					this.OnWorkflowIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(100) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_ParentActivityID", DbType = "Int", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<int> ParentActivityID
		{
			get
			{
				return this._ParentActivityID;
			}
			set
			{
				if ((this._ParentActivityID != value))
				{
					if (this._ParentActivity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ParentActivityID = value;
					this.SendPropertyChanged("ParentActivityID");
					this.OnParentActivityIDChanged();
				}
			}
		}

		[Column(Storage = "_IsActive", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Association(Name = "FK_Blank_Activity", Storage = "_Blank", ThisKey = "ActivityID", OtherKey = "ActivityID", DeleteRule = "NO ACTION")]
		public EntitySet<Blank> Blank
		{
			get
			{
				return this._Blank;
			}
			set
			{
				this._Blank.Assign(value);
			}
		}

		[Association(Name = "FK_BlankTransition_Activity", Storage = "_BlankTransition", ThisKey = "ActivityID", OtherKey = "ActivityID", DeleteRule = "NO ACTION")]
		public EntitySet<BlankTransition> BlankTransition
		{
			get
			{
				return this._BlankTransition;
			}
			set
			{
				this._BlankTransition.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDoc_Activity", Storage = "_OrderDoc", ThisKey = "ActivityID", OtherKey = "ActivityID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDocTransition_Activity", Storage = "_OrderDocTransition", ThisKey = "ActivityID", OtherKey = "ActivityID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDocTransition> OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition;
			}
			set
			{
				this._OrderDocTransition.Assign(value);
			}
		}

		[Association(Name = "FK_WF_Activity_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.WF_Activity.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.WF_Activity.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_WF_Activity_ParentActivity", Storage = "_ParentActivity", ThisKey = "ParentActivityID", OtherKey = "ActivityID", IsForeignKey = true)]
		public WF_Activity ParentActivity
		{
			get
			{
				return this._ParentActivity.Entity;
			}
			set
			{
				WF_Activity previousValue = this._ParentActivity.Entity;
				if (((previousValue != value)
							|| (this._ParentActivity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentActivity.Entity = null;
						previousValue.ChildActivities.Remove(this);
					}
					this._ParentActivity.Entity = value;
					if ((value != null))
					{
						value.ChildActivities.Add(this);
						this._ParentActivityID = value.ActivityID;
					}
					else
					{
						this._ParentActivityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ParentActivity");
				}
			}
		}

		[Association(Name = "FK_WF_Activity_ParentActivity", Storage = "_ChildActivities", ThisKey = "ActivityID", OtherKey = "ParentActivityID", DeleteRule = "NO ACTION")]
		public EntitySet<WF_Activity> ChildActivities
		{
			get
			{
				return this._ChildActivities;
			}
			set
			{
				this._ChildActivities.Assign(value);
			}
		}

		[Association(Name = "FK_WF_Activity_Workflow", Storage = "_Workflow", ThisKey = "WorkflowID", OtherKey = "WorkflowID", IsForeignKey = true)]
		public WF_Workflow Workflow
		{
			get
			{
				return this._Workflow.Entity;
			}
			set
			{
				WF_Workflow previousValue = this._Workflow.Entity;
				if (((previousValue != value)
							|| (this._Workflow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Workflow.Entity = null;
						previousValue.Activities.Remove(this);
					}
					this._Workflow.Entity = value;
					if ((value != null))
					{
						value.Activities.Add(this);
						this._WorkflowID = value.WorkflowID;
					}
					else
					{
						this._WorkflowID = default(int);
					}
					this.SendPropertyChanged("Workflow");
				}
			}
		}

		[Association(Name = "FK_WF_Transition_Parent", Storage = "_WF_Transition", ThisKey = "ActivityID", OtherKey = "ParentID", DeleteRule = "NO ACTION")]
		public EntitySet<WF_Transition> WF_Transition
		{
			get
			{
				return this._WF_Transition;
			}
			set
			{
				this._WF_Transition.Assign(value);
			}
		}

		[Association(Name = "FK_WF_Transition_TargetActivity", Storage = "_WF_Transition_TargetActivity", ThisKey = "ActivityID", OtherKey = "TargetActivityID", DeleteRule = "NO ACTION")]
		public EntitySet<WF_Transition> WF_Transition_TargetActivity
		{
			get
			{
				return this._WF_Transition_TargetActivity;
			}
			set
			{
				this._WF_Transition_TargetActivity.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_Blank(Blank entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}

		private void detach_Blank(Blank entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}

		private void attach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}

		private void detach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}

		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}

		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}

		private void attach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}

		private void detach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}

		private void attach_ChildActivities(WF_Activity entity)
		{
			this.SendPropertyChanging();
			entity.ParentActivity = this;
		}

		private void detach_ChildActivities(WF_Activity entity)
		{
			this.SendPropertyChanging();
			entity.ParentActivity = null;
		}

		private void attach_WF_Transition(WF_Transition entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}

		private void detach_WF_Transition(WF_Transition entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}

		private void attach_WF_Transition_TargetActivity(WF_Transition entity)
		{
			this.SendPropertyChanging();
			entity.TargetActivity = this;
		}

		private void detach_WF_Transition_TargetActivity(WF_Transition entity)
		{
			this.SendPropertyChanging();
			entity.TargetActivity = null;
		}
	}

	[Table(Name = "dbo.WF_Transition")]
	public partial class WF_Transition : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _TransitionID;

		private string _Title;

		private bool _IsActive;

		private int _SeqNo;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private int _ParentID;

		private int _TargetActivityID;

		private EntitySet<BlankTransition> _BlankTransition;

		private EntitySet<OrderDocTransition> _OrderDocTransition;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<WF_Activity> _Parent;

		private EntityRef<WF_Activity> _TargetActivity;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnTransitionIDChanging(int value);
		partial void OnTransitionIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnIsActiveChanging(bool value);
		partial void OnIsActiveChanged();
		partial void OnSeqNoChanging(int value);
		partial void OnSeqNoChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		partial void OnParentIDChanging(int value);
		partial void OnParentIDChanged();
		partial void OnTargetActivityIDChanging(int value);
		partial void OnTargetActivityIDChanged();
		#endregion

		public WF_Transition()
		{
			this._BlankTransition = new EntitySet<BlankTransition>(new Action<BlankTransition>(this.attach_BlankTransition), new Action<BlankTransition>(this.detach_BlankTransition));
			this._OrderDocTransition = new EntitySet<OrderDocTransition>(new Action<OrderDocTransition>(this.attach_OrderDocTransition), new Action<OrderDocTransition>(this.detach_OrderDocTransition));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Parent = default(EntityRef<WF_Activity>);
			this._TargetActivity = default(EntityRef<WF_Activity>);
			OnCreated();
		}

		[Column(Storage = "_TransitionID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int TransitionID
		{
			get
			{
				return this._TransitionID;
			}
			set
			{
				if ((this._TransitionID != value))
				{
					this.OnTransitionIDChanging(value);
					this.SendPropertyChanging();
					this._TransitionID = value;
					this.SendPropertyChanged("TransitionID");
					this.OnTransitionIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_IsActive", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}

		[Column(Storage = "_SeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Column(Storage = "_ParentID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}

		[Column(Storage = "_TargetActivityID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int TargetActivityID
		{
			get
			{
				return this._TargetActivityID;
			}
			set
			{
				if ((this._TargetActivityID != value))
				{
					if (this._TargetActivity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTargetActivityIDChanging(value);
					this.SendPropertyChanging();
					this._TargetActivityID = value;
					this.SendPropertyChanged("TargetActivityID");
					this.OnTargetActivityIDChanged();
				}
			}
		}

		[Association(Name = "FK_BlankTransition_Transition", Storage = "_BlankTransition", ThisKey = "TransitionID", OtherKey = "TransitionID", DeleteRule = "NO ACTION")]
		public EntitySet<BlankTransition> BlankTransition
		{
			get
			{
				return this._BlankTransition;
			}
			set
			{
				this._BlankTransition.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDocTransition_Transition", Storage = "_OrderDocTransition", ThisKey = "TransitionID", OtherKey = "TransitionID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDocTransition> OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition;
			}
			set
			{
				this._OrderDocTransition.Assign(value);
			}
		}

		[Association(Name = "FK_WF_Transition_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.WF_Transition.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.WF_Transition.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_WF_Transition_Parent", Storage = "_Parent", ThisKey = "ParentID", OtherKey = "ActivityID", IsForeignKey = true)]
		public WF_Activity Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				WF_Activity previousValue = this._Parent.Entity;
				if (((previousValue != value)
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.WF_Transition.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.WF_Transition.Add(this);
						this._ParentID = value.ActivityID;
					}
					else
					{
						this._ParentID = default(int);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}

		[Association(Name = "FK_WF_Transition_TargetActivity", Storage = "_TargetActivity", ThisKey = "TargetActivityID", OtherKey = "ActivityID", IsForeignKey = true)]
		public WF_Activity TargetActivity
		{
			get
			{
				return this._TargetActivity.Entity;
			}
			set
			{
				WF_Activity previousValue = this._TargetActivity.Entity;
				if (((previousValue != value)
							|| (this._TargetActivity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TargetActivity.Entity = null;
						previousValue.WF_Transition_TargetActivity.Remove(this);
					}
					this._TargetActivity.Entity = value;
					if ((value != null))
					{
						value.WF_Transition_TargetActivity.Add(this);
						this._TargetActivityID = value.ActivityID;
					}
					else
					{
						this._TargetActivityID = default(int);
					}
					this.SendPropertyChanged("TargetActivity");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Transition = this;
		}

		private void detach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Transition = null;
		}

		private void attach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Transition = this;
		}

		private void detach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Transition = null;
		}
	}

	[Table(Name = "dbo.WF_Workflow")]
	public partial class WF_Workflow : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _WorkflowID;

		private int _ObjectTypeID;

		private string _Title;

		private string _SysName;

		private bool _IsActive;

		private bool _IsDeleted;

		private System.DateTime _LastModifiedDate;

		private int _LastModifiedUserID;

		private EntitySet<BlankTransition> _BlankTransition;

		private EntitySet<OrderDocTransition> _OrderDocTransition;

		private EntitySet<WF_Activity> _Activities;

		private EntityRef<SPM_Subject> _LastModifiedUser;

		private EntityRef<MM_ObjectType> _ObjectType;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnWorkflowIDChanging(int value);
		partial void OnWorkflowIDChanged();
		partial void OnObjectTypeIDChanging(int value);
		partial void OnObjectTypeIDChanged();
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		partial void OnSysNameChanging(string value);
		partial void OnSysNameChanged();
		partial void OnIsActiveChanging(bool value);
		partial void OnIsActiveChanged();
		partial void OnIsDeletedChanging(bool value);
		partial void OnIsDeletedChanged();
		partial void OnLastModifiedDateChanging(System.DateTime value);
		partial void OnLastModifiedDateChanged();
		partial void OnLastModifiedUserIDChanging(int value);
		partial void OnLastModifiedUserIDChanged();
		#endregion

		public WF_Workflow()
		{
			this._BlankTransition = new EntitySet<BlankTransition>(new Action<BlankTransition>(this.attach_BlankTransition), new Action<BlankTransition>(this.detach_BlankTransition));
			this._OrderDocTransition = new EntitySet<OrderDocTransition>(new Action<OrderDocTransition>(this.attach_OrderDocTransition), new Action<OrderDocTransition>(this.detach_OrderDocTransition));
			this._Activities = new EntitySet<WF_Activity>(new Action<WF_Activity>(this.attach_Activities), new Action<WF_Activity>(this.detach_Activities));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ObjectType = default(EntityRef<MM_ObjectType>);
			OnCreated();
		}

		[Column(Storage = "_WorkflowID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
		public int WorkflowID
		{
			get
			{
				return this._WorkflowID;
			}
			set
			{
				if ((this._WorkflowID != value))
				{
					this.OnWorkflowIDChanging(value);
					this.SendPropertyChanging();
					this._WorkflowID = value;
					this.SendPropertyChanged("WorkflowID");
					this.OnWorkflowIDChanged();
				}
			}
		}

		[Column(Storage = "_ObjectTypeID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}

		[Column(Storage = "_Title", DbType = "NVarChar(100) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}

		[Column(Storage = "_SysName", DbType = "NVarChar(100) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}

		[Column(Storage = "_IsActive", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}

		[Column(Storage = "_IsDeleted", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedDate", DbType = "DateTime NOT NULL")]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}

		[Column(Storage = "_LastModifiedUserID", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}

		[Association(Name = "FK_BlankTransition_Workflow", Storage = "_BlankTransition", ThisKey = "WorkflowID", OtherKey = "WorkflowID", DeleteRule = "NO ACTION")]
		public EntitySet<BlankTransition> BlankTransition
		{
			get
			{
				return this._BlankTransition;
			}
			set
			{
				this._BlankTransition.Assign(value);
			}
		}

		[Association(Name = "FK_OrderDocTransition_Workflow", Storage = "_OrderDocTransition", ThisKey = "WorkflowID", OtherKey = "WorkflowID", DeleteRule = "NO ACTION")]
		public EntitySet<OrderDocTransition> OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition;
			}
			set
			{
				this._OrderDocTransition.Assign(value);
			}
		}

		[Association(Name = "FK_WF_Activity_Workflow", Storage = "_Activities", ThisKey = "WorkflowID", OtherKey = "WorkflowID", DeleteRule = "NO ACTION")]
		public EntitySet<WF_Activity> Activities
		{
			get
			{
				return this._Activities;
			}
			set
			{
				this._Activities.Assign(value);
			}
		}

		[Association(Name = "FK_WF_Workflow_LastModifiedUser", Storage = "_LastModifiedUser", ThisKey = "LastModifiedUserID", OtherKey = "SubjectID", IsForeignKey = true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value)
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.WF_Workflow.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.WF_Workflow.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}

		[Association(Name = "FK_WF_Workflow_ObjectType", Storage = "_ObjectType", ThisKey = "ObjectTypeID", OtherKey = "ObjectTypeID", IsForeignKey = true)]
		public MM_ObjectType ObjectType
		{
			get
			{
				return this._ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._ObjectType.Entity;
				if (((previousValue != value)
							|| (this._ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectType.Entity = null;
						previousValue.WF_Workflow.Remove(this);
					}
					this._ObjectType.Entity = value;
					if ((value != null))
					{
						value.WF_Workflow.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(int);
					}
					this.SendPropertyChanged("ObjectType");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Workflow = this;
		}

		private void detach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Workflow = null;
		}

		private void attach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Workflow = this;
		}

		private void detach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Workflow = null;
		}

		private void attach_Activities(WF_Activity entity)
		{
			this.SendPropertyChanging();
			entity.Workflow = this;
		}

		private void detach_Activities(WF_Activity entity)
		{
			this.SendPropertyChanging();
			entity.Workflow = null;
		}
	}

	public partial class RequestExport2012Result
	{

		private System.Xml.Linq.XElement _Column1;

		public RequestExport2012Result()
		{
		}

		[Column(Name = "", Storage = "_Column1", DbType = "Xml", CanBeNull = true, UpdateCheck = UpdateCheck.Never)]
		public System.Xml.Linq.XElement Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}

	public partial class RequestExport2016Result
	{

		private System.Xml.Linq.XElement _Column1;

		public RequestExport2016Result()
		{
		}

		[Column(Name = "", Storage = "_Column1", DbType = "Xml", CanBeNull = true, UpdateCheck = UpdateCheck.Never)]
		public System.Xml.Linq.XElement Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}

	public partial class SplitResult
	{

		private System.Nullable<short> _RowID;

		private string _Value;

		public SplitResult()
		{
		}

		[Column(Storage = "_RowID", DbType = "SmallInt", UpdateCheck = UpdateCheck.Never)]
		public System.Nullable<short> RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this._RowID = value;
				}
			}
		}

		[Column(Storage = "_Value", DbType = "VarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
	}

	public partial class Usp_modelResult
	{

		private System.Xml.Linq.XElement _Column1;

		public Usp_modelResult()
		{
		}

		[Column(Name = "", Storage = "_Column1", DbType = "Xml", CanBeNull = true, UpdateCheck = UpdateCheck.Never)]
		public System.Xml.Linq.XElement Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
