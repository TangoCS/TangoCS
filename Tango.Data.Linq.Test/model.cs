#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8762
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Solution.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="lic")]
	public partial class modelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAppendix(Appendix instance);
    partial void UpdateAppendix(Appendix instance);
    partial void DeleteAppendix(Appendix instance);
    partial void InsertAppendixCommDocs(AppendixCommDocs instance);
    partial void UpdateAppendixCommDocs(AppendixCommDocs instance);
    partial void DeleteAppendixCommDocs(AppendixCommDocs instance);
    partial void InsertAppendixQuantity(AppendixQuantity instance);
    partial void UpdateAppendixQuantity(AppendixQuantity instance);
    partial void DeleteAppendixQuantity(AppendixQuantity instance);
    partial void InsertBlank(Blank instance);
    partial void UpdateBlank(Blank instance);
    partial void DeleteBlank(Blank instance);
    partial void InsertBlankTransition(BlankTransition instance);
    partial void UpdateBlankTransition(BlankTransition instance);
    partial void DeleteBlankTransition(BlankTransition instance);
    partial void InsertC_AnnulmentReason(C_AnnulmentReason instance);
    partial void UpdateC_AnnulmentReason(C_AnnulmentReason instance);
    partial void DeleteC_AnnulmentReason(C_AnnulmentReason instance);
    partial void InsertC_CatalogRestriction(C_CatalogRestriction instance);
    partial void UpdateC_CatalogRestriction(C_CatalogRestriction instance);
    partial void DeleteC_CatalogRestriction(C_CatalogRestriction instance);
    partial void InsertC_CatalogRestrictionCNCategories(C_CatalogRestrictionCNCategories instance);
    partial void UpdateC_CatalogRestrictionCNCategories(C_CatalogRestrictionCNCategories instance);
    partial void DeleteC_CatalogRestrictionCNCategories(C_CatalogRestrictionCNCategories instance);
    partial void InsertC_CN(C_CN instance);
    partial void UpdateC_CN(C_CN instance);
    partial void DeleteC_CN(C_CN instance);
    partial void InsertC_CNCategory(C_CNCategory instance);
    partial void UpdateC_CNCategory(C_CNCategory instance);
    partial void DeleteC_CNCategory(C_CNCategory instance);
    partial void InsertC_CNCategoryCN(C_CNCategoryCN instance);
    partial void UpdateC_CNCategoryCN(C_CNCategoryCN instance);
    partial void DeleteC_CNCategoryCN(C_CNCategoryCN instance);
    partial void InsertC_CNCategoryDocument(C_CNCategoryDocument instance);
    partial void UpdateC_CNCategoryDocument(C_CNCategoryDocument instance);
    partial void DeleteC_CNCategoryDocument(C_CNCategoryDocument instance);
    partial void InsertC_CNCategoryFGADocument(C_CNCategoryFGADocument instance);
    partial void UpdateC_CNCategoryFGADocument(C_CNCategoryFGADocument instance);
    partial void DeleteC_CNCategoryFGADocument(C_CNCategoryFGADocument instance);
    partial void InsertC_CNCategoryItem(C_CNCategoryItem instance);
    partial void UpdateC_CNCategoryItem(C_CNCategoryItem instance);
    partial void DeleteC_CNCategoryItem(C_CNCategoryItem instance);
    partial void InsertC_CNCategoryItemRepresentations(C_CNCategoryItemRepresentations instance);
    partial void UpdateC_CNCategoryItemRepresentations(C_CNCategoryItemRepresentations instance);
    partial void DeleteC_CNCategoryItemRepresentations(C_CNCategoryItemRepresentations instance);
    partial void InsertC_CNCategoryOperationType(C_CNCategoryOperationType instance);
    partial void UpdateC_CNCategoryOperationType(C_CNCategoryOperationType instance);
    partial void DeleteC_CNCategoryOperationType(C_CNCategoryOperationType instance);
    partial void InsertC_CNGroup(C_CNGroup instance);
    partial void UpdateC_CNGroup(C_CNGroup instance);
    partial void DeleteC_CNGroup(C_CNGroup instance);
    partial void InsertC_CNGroupCN(C_CNGroupCN instance);
    partial void UpdateC_CNGroupCN(C_CNGroupCN instance);
    partial void DeleteC_CNGroupCN(C_CNGroupCN instance);
    partial void InsertC_CNType(C_CNType instance);
    partial void UpdateC_CNType(C_CNType instance);
    partial void DeleteC_CNType(C_CNType instance);
    partial void InsertC_Country(C_Country instance);
    partial void UpdateC_Country(C_Country instance);
    partial void DeleteC_Country(C_Country instance);
    partial void InsertC_CountryGroup(C_CountryGroup instance);
    partial void UpdateC_CountryGroup(C_CountryGroup instance);
    partial void DeleteC_CountryGroup(C_CountryGroup instance);
    partial void InsertC_CountryGroupCountries(C_CountryGroupCountries instance);
    partial void UpdateC_CountryGroupCountries(C_CountryGroupCountries instance);
    partial void DeleteC_CountryGroupCountries(C_CountryGroupCountries instance);
    partial void InsertC_Crypto(C_Crypto instance);
    partial void UpdateC_Crypto(C_Crypto instance);
    partial void DeleteC_Crypto(C_Crypto instance);
    partial void InsertC_Currency(C_Currency instance);
    partial void UpdateC_Currency(C_Currency instance);
    partial void DeleteC_Currency(C_Currency instance);
    partial void InsertC_CustomHouse(C_CustomHouse instance);
    partial void UpdateC_CustomHouse(C_CustomHouse instance);
    partial void DeleteC_CustomHouse(C_CustomHouse instance);
    partial void InsertC_CustomHouseContact(C_CustomHouseContact instance);
    partial void UpdateC_CustomHouseContact(C_CustomHouseContact instance);
    partial void DeleteC_CustomHouseContact(C_CustomHouseContact instance);
    partial void InsertC_DocumentSourceType(C_DocumentSourceType instance);
    partial void UpdateC_DocumentSourceType(C_DocumentSourceType instance);
    partial void DeleteC_DocumentSourceType(C_DocumentSourceType instance);
    partial void InsertC_DocumentType(C_DocumentType instance);
    partial void UpdateC_DocumentType(C_DocumentType instance);
    partial void DeleteC_DocumentType(C_DocumentType instance);
    partial void InsertC_FGA(C_FGA instance);
    partial void UpdateC_FGA(C_FGA instance);
    partial void DeleteC_FGA(C_FGA instance);
    partial void InsertC_FGACNCategory(C_FGACNCategory instance);
    partial void UpdateC_FGACNCategory(C_FGACNCategory instance);
    partial void DeleteC_FGACNCategory(C_FGACNCategory instance);
    partial void InsertC_FGADocument(C_FGADocument instance);
    partial void UpdateC_FGADocument(C_FGADocument instance);
    partial void DeleteC_FGADocument(C_FGADocument instance);
    partial void InsertC_FGADocumentSigner(C_FGADocumentSigner instance);
    partial void UpdateC_FGADocumentSigner(C_FGADocumentSigner instance);
    partial void DeleteC_FGADocumentSigner(C_FGADocumentSigner instance);
    partial void InsertC_FtsCN(C_FtsCN instance);
    partial void UpdateC_FtsCN(C_FtsCN instance);
    partial void DeleteC_FtsCN(C_FtsCN instance);
    partial void InsertC_FtsCountry(C_FtsCountry instance);
    partial void UpdateC_FtsCountry(C_FtsCountry instance);
    partial void DeleteC_FtsCountry(C_FtsCountry instance);
    partial void InsertC_FtsCountryGroup(C_FtsCountryGroup instance);
    partial void UpdateC_FtsCountryGroup(C_FtsCountryGroup instance);
    partial void DeleteC_FtsCountryGroup(C_FtsCountryGroup instance);
    partial void InsertC_FtsCountryGroupCountries(C_FtsCountryGroupCountries instance);
    partial void UpdateC_FtsCountryGroupCountries(C_FtsCountryGroupCountries instance);
    partial void DeleteC_FtsCountryGroupCountries(C_FtsCountryGroupCountries instance);
    partial void InsertC_FtsCustomHouse(C_FtsCustomHouse instance);
    partial void UpdateC_FtsCustomHouse(C_FtsCustomHouse instance);
    partial void DeleteC_FtsCustomHouse(C_FtsCustomHouse instance);
    partial void InsertC_Help(C_Help instance);
    partial void UpdateC_Help(C_Help instance);
    partial void DeleteC_Help(C_Help instance);
    partial void InsertC_HelpData(C_HelpData instance);
    partial void UpdateC_HelpData(C_HelpData instance);
    partial void DeleteC_HelpData(C_HelpData instance);
    partial void InsertC_Language(C_Language instance);
    partial void UpdateC_Language(C_Language instance);
    partial void DeleteC_Language(C_Language instance);
    partial void InsertC_LawOrgan(C_LawOrgan instance);
    partial void UpdateC_LawOrgan(C_LawOrgan instance);
    partial void DeleteC_LawOrgan(C_LawOrgan instance);
    partial void InsertC_LegalDocument(C_LegalDocument instance);
    partial void UpdateC_LegalDocument(C_LegalDocument instance);
    partial void DeleteC_LegalDocument(C_LegalDocument instance);
    partial void InsertC_LegalDocumentCNCategories(C_LegalDocumentCNCategories instance);
    partial void UpdateC_LegalDocumentCNCategories(C_LegalDocumentCNCategories instance);
    partial void DeleteC_LegalDocumentCNCategories(C_LegalDocumentCNCategories instance);
    partial void InsertC_LegalDocumentCNGroups(C_LegalDocumentCNGroups instance);
    partial void UpdateC_LegalDocumentCNGroups(C_LegalDocumentCNGroups instance);
    partial void DeleteC_LegalDocumentCNGroups(C_LegalDocumentCNGroups instance);
    partial void InsertC_LegalDocumentRestrictions(C_LegalDocumentRestrictions instance);
    partial void UpdateC_LegalDocumentRestrictions(C_LegalDocumentRestrictions instance);
    partial void DeleteC_LegalDocumentRestrictions(C_LegalDocumentRestrictions instance);
    partial void InsertC_LegalDocumentType(C_LegalDocumentType instance);
    partial void UpdateC_LegalDocumentType(C_LegalDocumentType instance);
    partial void DeleteC_LegalDocumentType(C_LegalDocumentType instance);
    partial void InsertC_LicenseType(C_LicenseType instance);
    partial void UpdateC_LicenseType(C_LicenseType instance);
    partial void DeleteC_LicenseType(C_LicenseType instance);
    partial void InsertC_MaxTargetValidity(C_MaxTargetValidity instance);
    partial void UpdateC_MaxTargetValidity(C_MaxTargetValidity instance);
    partial void DeleteC_MaxTargetValidity(C_MaxTargetValidity instance);
    partial void InsertC_Measure(C_Measure instance);
    partial void UpdateC_Measure(C_Measure instance);
    partial void DeleteC_Measure(C_Measure instance);
    partial void InsertC_MFC(C_MFC instance);
    partial void UpdateC_MFC(C_MFC instance);
    partial void DeleteC_MFC(C_MFC instance);
    partial void InsertC_OperationType(C_OperationType instance);
    partial void UpdateC_OperationType(C_OperationType instance);
    partial void DeleteC_OperationType(C_OperationType instance);
    partial void InsertC_QuoteCategory(C_QuoteCategory instance);
    partial void UpdateC_QuoteCategory(C_QuoteCategory instance);
    partial void DeleteC_QuoteCategory(C_QuoteCategory instance);
    partial void InsertC_RES(C_RES instance);
    partial void UpdateC_RES(C_RES instance);
    partial void DeleteC_RES(C_RES instance);
    partial void InsertC_RFSubject(C_RFSubject instance);
    partial void UpdateC_RFSubject(C_RFSubject instance);
    partial void DeleteC_RFSubject(C_RFSubject instance);
    partial void InsertC_Tariff(C_Tariff instance);
    partial void UpdateC_Tariff(C_Tariff instance);
    partial void DeleteC_Tariff(C_Tariff instance);
    partial void InsertC_UseType(C_UseType instance);
    partial void UpdateC_UseType(C_UseType instance);
    partial void DeleteC_UseType(C_UseType instance);
    partial void InsertC_VisitPurpose(C_VisitPurpose instance);
    partial void UpdateC_VisitPurpose(C_VisitPurpose instance);
    partial void DeleteC_VisitPurpose(C_VisitPurpose instance);
    partial void InsertC_VisitWeek(C_VisitWeek instance);
    partial void UpdateC_VisitWeek(C_VisitWeek instance);
    partial void DeleteC_VisitWeek(C_VisitWeek instance);
    partial void InsertCalendarDay(CalendarDay instance);
    partial void UpdateCalendarDay(CalendarDay instance);
    partial void DeleteCalendarDay(CalendarDay instance);
    partial void InsertCertificateInfo(CertificateInfo instance);
    partial void UpdateCertificateInfo(CertificateInfo instance);
    partial void DeleteCertificateInfo(CertificateInfo instance);
    partial void InsertCommodityDocument(CommodityDocument instance);
    partial void UpdateCommodityDocument(CommodityDocument instance);
    partial void DeleteCommodityDocument(CommodityDocument instance);
    partial void InsertContractor(Contractor instance);
    partial void UpdateContractor(Contractor instance);
    partial void DeleteContractor(Contractor instance);
    partial void InsertContractorChiefPerson(ContractorChiefPerson instance);
    partial void UpdateContractorChiefPerson(ContractorChiefPerson instance);
    partial void DeleteContractorChiefPerson(ContractorChiefPerson instance);
    partial void InsertControlParameters(ControlParameters instance);
    partial void UpdateControlParameters(ControlParameters instance);
    partial void DeleteControlParameters(ControlParameters instance);
    partial void InsertCopy_ContractorChiefPerson(Copy_ContractorChiefPerson instance);
    partial void UpdateCopy_ContractorChiefPerson(Copy_ContractorChiefPerson instance);
    partial void DeleteCopy_ContractorChiefPerson(Copy_ContractorChiefPerson instance);
    partial void InsertCurriculum(Curriculum instance);
    partial void UpdateCurriculum(Curriculum instance);
    partial void DeleteCurriculum(Curriculum instance);
    partial void InsertCurriculumQuestion(CurriculumQuestion instance);
    partial void UpdateCurriculumQuestion(CurriculumQuestion instance);
    partial void DeleteCurriculumQuestion(CurriculumQuestion instance);
    partial void InsertCurriculumQuestionAnswer(CurriculumQuestionAnswer instance);
    partial void UpdateCurriculumQuestionAnswer(CurriculumQuestionAnswer instance);
    partial void DeleteCurriculumQuestionAnswer(CurriculumQuestionAnswer instance);
    partial void InsertCurriculumRoles(CurriculumRoles instance);
    partial void UpdateCurriculumRoles(CurriculumRoles instance);
    partial void DeleteCurriculumRoles(CurriculumRoles instance);
    partial void InsertCustomsDeclaration(CustomsDeclaration instance);
    partial void UpdateCustomsDeclaration(CustomsDeclaration instance);
    partial void DeleteCustomsDeclaration(CustomsDeclaration instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertErrorLog(ErrorLog instance);
    partial void UpdateErrorLog(ErrorLog instance);
    partial void DeleteErrorLog(ErrorLog instance);
    partial void InsertFactAnnulment(FactAnnulment instance);
    partial void UpdateFactAnnulment(FactAnnulment instance);
    partial void DeleteFactAnnulment(FactAnnulment instance);
    partial void InsertFactClose(FactClose instance);
    partial void UpdateFactClose(FactClose instance);
    partial void DeleteFactClose(FactClose instance);
    partial void InsertFactForm(FactForm instance);
    partial void UpdateFactForm(FactForm instance);
    partial void DeleteFactForm(FactForm instance);
    partial void InsertFactRegister(FactRegister instance);
    partial void UpdateFactRegister(FactRegister instance);
    partial void DeleteFactRegister(FactRegister instance);
    partial void InsertFactReject(FactReject instance);
    partial void UpdateFactReject(FactReject instance);
    partial void DeleteFactReject(FactReject instance);
    partial void InsertFactResume(FactResume instance);
    partial void UpdateFactResume(FactResume instance);
    partial void DeleteFactResume(FactResume instance);
    partial void InsertFactSuspend(FactSuspend instance);
    partial void UpdateFactSuspend(FactSuspend instance);
    partial void DeleteFactSuspend(FactSuspend instance);
    partial void InsertForeignAuthorization(ForeignAuthorization instance);
    partial void UpdateForeignAuthorization(ForeignAuthorization instance);
    partial void DeleteForeignAuthorization(ForeignAuthorization instance);
    partial void InsertFTSExportLog(FTSExportLog instance);
    partial void UpdateFTSExportLog(FTSExportLog instance);
    partial void DeleteFTSExportLog(FTSExportLog instance);
    partial void InsertFullCN(FullCN instance);
    partial void UpdateFullCN(FullCN instance);
    partial void DeleteFullCN(FullCN instance);
    partial void InsertFullRepresentation(FullRepresentation instance);
    partial void UpdateFullRepresentation(FullRepresentation instance);
    partial void DeleteFullRepresentation(FullRepresentation instance);
    partial void InsertHST_Contractor(HST_Contractor instance);
    partial void UpdateHST_Contractor(HST_Contractor instance);
    partial void DeleteHST_Contractor(HST_Contractor instance);
    partial void InsertHST_MM_FormView(HST_MM_FormView instance);
    partial void UpdateHST_MM_FormView(HST_MM_FormView instance);
    partial void DeleteHST_MM_FormView(HST_MM_FormView instance);
    partial void InsertHST_N_TimeZone(HST_N_TimeZone instance);
    partial void UpdateHST_N_TimeZone(HST_N_TimeZone instance);
    partial void DeleteHST_N_TimeZone(HST_N_TimeZone instance);
    partial void InsertINT_Command(INT_Command instance);
    partial void UpdateINT_Command(INT_Command instance);
    partial void DeleteINT_Command(INT_Command instance);
    partial void InsertINT_Handler(INT_Handler instance);
    partial void UpdateINT_Handler(INT_Handler instance);
    partial void DeleteINT_Handler(INT_Handler instance);
    partial void InsertINT_Log(INT_Log instance);
    partial void UpdateINT_Log(INT_Log instance);
    partial void DeleteINT_Log(INT_Log instance);
    partial void InsertINT_System(INT_System instance);
    partial void UpdateINT_System(INT_System instance);
    partial void DeleteINT_System(INT_System instance);
    partial void InsertLetter(Letter instance);
    partial void UpdateLetter(Letter instance);
    partial void DeleteLetter(Letter instance);
    partial void InsertLicenseExecution(LicenseExecution instance);
    partial void UpdateLicenseExecution(LicenseExecution instance);
    partial void DeleteLicenseExecution(LicenseExecution instance);
    partial void InsertMailMessage(MailMessage instance);
    partial void UpdateMailMessage(MailMessage instance);
    partial void DeleteMailMessage(MailMessage instance);
    partial void InsertMailTemplate(MailTemplate instance);
    partial void UpdateMailTemplate(MailTemplate instance);
    partial void DeleteMailTemplate(MailTemplate instance);
    partial void InsertMM_Codifier(MM_Codifier instance);
    partial void UpdateMM_Codifier(MM_Codifier instance);
    partial void DeleteMM_Codifier(MM_Codifier instance);
    partial void InsertMM_CodifierValue(MM_CodifierValue instance);
    partial void UpdateMM_CodifierValue(MM_CodifierValue instance);
    partial void DeleteMM_CodifierValue(MM_CodifierValue instance);
    partial void InsertMM_DataValidation(MM_DataValidation instance);
    partial void UpdateMM_DataValidation(MM_DataValidation instance);
    partial void DeleteMM_DataValidation(MM_DataValidation instance);
    partial void InsertMM_FormField(MM_FormField instance);
    partial void UpdateMM_FormField(MM_FormField instance);
    partial void DeleteMM_FormField(MM_FormField instance);
    partial void InsertMM_FormFieldAttribute(MM_FormFieldAttribute instance);
    partial void UpdateMM_FormFieldAttribute(MM_FormFieldAttribute instance);
    partial void DeleteMM_FormFieldAttribute(MM_FormFieldAttribute instance);
    partial void InsertMM_FormFieldGroup(MM_FormFieldGroup instance);
    partial void UpdateMM_FormFieldGroup(MM_FormFieldGroup instance);
    partial void DeleteMM_FormFieldGroup(MM_FormFieldGroup instance);
    partial void InsertMM_FormView(MM_FormView instance);
    partial void UpdateMM_FormView(MM_FormView instance);
    partial void DeleteMM_FormView(MM_FormView instance);
    partial void InsertMM_Group(MM_Group instance);
    partial void UpdateMM_Group(MM_Group instance);
    partial void DeleteMM_Group(MM_Group instance);
    partial void InsertMM_GroupAsso(MM_GroupAsso instance);
    partial void UpdateMM_GroupAsso(MM_GroupAsso instance);
    partial void DeleteMM_GroupAsso(MM_GroupAsso instance);
    partial void InsertMM_Method(MM_Method instance);
    partial void UpdateMM_Method(MM_Method instance);
    partial void DeleteMM_Method(MM_Method instance);
    partial void InsertMM_MethodGroup(MM_MethodGroup instance);
    partial void UpdateMM_MethodGroup(MM_MethodGroup instance);
    partial void DeleteMM_MethodGroup(MM_MethodGroup instance);
    partial void InsertMM_MethodGroupItem(MM_MethodGroupItem instance);
    partial void UpdateMM_MethodGroupItem(MM_MethodGroupItem instance);
    partial void DeleteMM_MethodGroupItem(MM_MethodGroupItem instance);
    partial void InsertMM_MethodParameter(MM_MethodParameter instance);
    partial void UpdateMM_MethodParameter(MM_MethodParameter instance);
    partial void DeleteMM_MethodParameter(MM_MethodParameter instance);
    partial void InsertMM_ObjectProperty(MM_ObjectProperty instance);
    partial void UpdateMM_ObjectProperty(MM_ObjectProperty instance);
    partial void DeleteMM_ObjectProperty(MM_ObjectProperty instance);
    partial void InsertMM_ObjectType(MM_ObjectType instance);
    partial void UpdateMM_ObjectType(MM_ObjectType instance);
    partial void DeleteMM_ObjectType(MM_ObjectType instance);
    partial void InsertMM_ObjectTypeStereotypes(MM_ObjectTypeStereotypes instance);
    partial void UpdateMM_ObjectTypeStereotypes(MM_ObjectTypeStereotypes instance);
    partial void DeleteMM_ObjectTypeStereotypes(MM_ObjectTypeStereotypes instance);
    partial void InsertMM_Package(MM_Package instance);
    partial void UpdateMM_Package(MM_Package instance);
    partial void DeleteMM_Package(MM_Package instance);
    partial void InsertMM_Predicate(MM_Predicate instance);
    partial void UpdateMM_Predicate(MM_Predicate instance);
    partial void DeleteMM_Predicate(MM_Predicate instance);
    partial void InsertMM_TaggedValueType(MM_TaggedValueType instance);
    partial void UpdateMM_TaggedValueType(MM_TaggedValueType instance);
    partial void DeleteMM_TaggedValueType(MM_TaggedValueType instance);
    partial void InsertMMA_SiteInfoobjects(MMA_SiteInfoobjects instance);
    partial void UpdateMMA_SiteInfoobjects(MMA_SiteInfoobjects instance);
    partial void DeleteMMA_SiteInfoobjects(MMA_SiteInfoobjects instance);
    partial void InsertMMS_ChangeLog(MMS_ChangeLog instance);
    partial void UpdateMMS_ChangeLog(MMS_ChangeLog instance);
    partial void DeleteMMS_ChangeLog(MMS_ChangeLog instance);
    partial void InsertMMS_ClassStereotype(MMS_ClassStereotype instance);
    partial void UpdateMMS_ClassStereotype(MMS_ClassStereotype instance);
    partial void DeleteMMS_ClassStereotype(MMS_ClassStereotype instance);
    partial void InsertMMS_Replication(MMS_Replication instance);
    partial void UpdateMMS_Replication(MMS_Replication instance);
    partial void DeleteMMS_Replication(MMS_Replication instance);
    partial void InsertMMS_Versioning(MMS_Versioning instance);
    partial void UpdateMMS_Versioning(MMS_Versioning instance);
    partial void DeleteMMS_Versioning(MMS_Versioning instance);
    partial void InsertN_Cache(N_Cache instance);
    partial void UpdateN_Cache(N_Cache instance);
    partial void DeleteN_Cache(N_Cache instance);
    partial void InsertN_DDL(N_DDL instance);
    partial void UpdateN_DDL(N_DDL instance);
    partial void DeleteN_DDL(N_DDL instance);
    partial void InsertN_DownloadLog(N_DownloadLog instance);
    partial void UpdateN_DownloadLog(N_DownloadLog instance);
    partial void DeleteN_DownloadLog(N_DownloadLog instance);
    partial void InsertN_File(N_File instance);
    partial void UpdateN_File(N_File instance);
    partial void DeleteN_File(N_File instance);
    partial void InsertN_FileData(N_FileData instance);
    partial void UpdateN_FileData(N_FileData instance);
    partial void DeleteN_FileData(N_FileData instance);
    partial void InsertN_FileLibrary(N_FileLibrary instance);
    partial void UpdateN_FileLibrary(N_FileLibrary instance);
    partial void DeleteN_FileLibrary(N_FileLibrary instance);
    partial void InsertN_FileLibraryType(N_FileLibraryType instance);
    partial void UpdateN_FileLibraryType(N_FileLibraryType instance);
    partial void DeleteN_FileLibraryType(N_FileLibraryType instance);
    partial void InsertN_FileList(N_FileList instance);
    partial void UpdateN_FileList(N_FileList instance);
    partial void DeleteN_FileList(N_FileList instance);
    partial void InsertN_FileListItem(N_FileListItem instance);
    partial void UpdateN_FileListItem(N_FileListItem instance);
    partial void DeleteN_FileListItem(N_FileListItem instance);
    partial void InsertN_Filter(N_Filter instance);
    partial void UpdateN_Filter(N_Filter instance);
    partial void DeleteN_Filter(N_Filter instance);
    partial void InsertN_Folder(N_Folder instance);
    partial void UpdateN_Folder(N_Folder instance);
    partial void DeleteN_Folder(N_Folder instance);
    partial void InsertN_FolderPredicate(N_FolderPredicate instance);
    partial void UpdateN_FolderPredicate(N_FolderPredicate instance);
    partial void DeleteN_FolderPredicate(N_FolderPredicate instance);
    partial void InsertN_Image(N_Image instance);
    partial void UpdateN_Image(N_Image instance);
    partial void DeleteN_Image(N_Image instance);
    partial void InsertN_MenuItem(N_MenuItem instance);
    partial void UpdateN_MenuItem(N_MenuItem instance);
    partial void DeleteN_MenuItem(N_MenuItem instance);
    partial void InsertN_NeighborSystem(N_NeighborSystem instance);
    partial void UpdateN_NeighborSystem(N_NeighborSystem instance);
    partial void DeleteN_NeighborSystem(N_NeighborSystem instance);
    partial void InsertN_ObjectChange(N_ObjectChange instance);
    partial void UpdateN_ObjectChange(N_ObjectChange instance);
    partial void DeleteN_ObjectChange(N_ObjectChange instance);
    partial void InsertN_ObjectPropertyChange(N_ObjectPropertyChange instance);
    partial void UpdateN_ObjectPropertyChange(N_ObjectPropertyChange instance);
    partial void DeleteN_ObjectPropertyChange(N_ObjectPropertyChange instance);
    partial void InsertN_ReplicationLogItem(N_ReplicationLogItem instance);
    partial void UpdateN_ReplicationLogItem(N_ReplicationLogItem instance);
    partial void DeleteN_ReplicationLogItem(N_ReplicationLogItem instance);
    partial void InsertN_ReplicationObject(N_ReplicationObject instance);
    partial void UpdateN_ReplicationObject(N_ReplicationObject instance);
    partial void DeleteN_ReplicationObject(N_ReplicationObject instance);
    partial void InsertN_RssFeed(N_RssFeed instance);
    partial void UpdateN_RssFeed(N_RssFeed instance);
    partial void DeleteN_RssFeed(N_RssFeed instance);
    partial void InsertN_Settings(N_Settings instance);
    partial void UpdateN_Settings(N_Settings instance);
    partial void DeleteN_Settings(N_Settings instance);
    partial void InsertN_SqlStatementLog(N_SqlStatementLog instance);
    partial void UpdateN_SqlStatementLog(N_SqlStatementLog instance);
    partial void DeleteN_SqlStatementLog(N_SqlStatementLog instance);
    partial void InsertN_TableInfo(N_TableInfo instance);
    partial void UpdateN_TableInfo(N_TableInfo instance);
    partial void DeleteN_TableInfo(N_TableInfo instance);
    partial void InsertN_TextResource(N_TextResource instance);
    partial void UpdateN_TextResource(N_TextResource instance);
    partial void DeleteN_TextResource(N_TextResource instance);
    partial void InsertN_TextResourceData(N_TextResourceData instance);
    partial void UpdateN_TextResourceData(N_TextResourceData instance);
    partial void DeleteN_TextResourceData(N_TextResourceData instance);
    partial void InsertN_TimeZone(N_TimeZone instance);
    partial void UpdateN_TimeZone(N_TimeZone instance);
    partial void DeleteN_TimeZone(N_TimeZone instance);
    partial void InsertN_VirusScanLog(N_VirusScanLog instance);
    partial void UpdateN_VirusScanLog(N_VirusScanLog instance);
    partial void DeleteN_VirusScanLog(N_VirusScanLog instance);
    partial void InsertOrderDoc(OrderDoc instance);
    partial void UpdateOrderDoc(OrderDoc instance);
    partial void DeleteOrderDoc(OrderDoc instance);
    partial void InsertOrderDocAsso(OrderDocAsso instance);
    partial void UpdateOrderDocAsso(OrderDocAsso instance);
    partial void DeleteOrderDocAsso(OrderDocAsso instance);
    partial void InsertOrderDocBankReplication(OrderDocBankReplication instance);
    partial void UpdateOrderDocBankReplication(OrderDocBankReplication instance);
    partial void DeleteOrderDocBankReplication(OrderDocBankReplication instance);
    partial void InsertOrderDocDeviation(OrderDocDeviation instance);
    partial void UpdateOrderDocDeviation(OrderDocDeviation instance);
    partial void DeleteOrderDocDeviation(OrderDocDeviation instance);
    partial void InsertOrderDocImportSubject(OrderDocImportSubject instance);
    partial void UpdateOrderDocImportSubject(OrderDocImportSubject instance);
    partial void DeleteOrderDocImportSubject(OrderDocImportSubject instance);
    partial void InsertOrderDocPassport(OrderDocPassport instance);
    partial void UpdateOrderDocPassport(OrderDocPassport instance);
    partial void DeleteOrderDocPassport(OrderDocPassport instance);
    partial void InsertOrderDocReplicationLog(OrderDocReplicationLog instance);
    partial void UpdateOrderDocReplicationLog(OrderDocReplicationLog instance);
    partial void DeleteOrderDocReplicationLog(OrderDocReplicationLog instance);
    partial void InsertOrderDocResponsible(OrderDocResponsible instance);
    partial void UpdateOrderDocResponsible(OrderDocResponsible instance);
    partial void DeleteOrderDocResponsible(OrderDocResponsible instance);
    partial void InsertOrderDocState(OrderDocState instance);
    partial void UpdateOrderDocState(OrderDocState instance);
    partial void DeleteOrderDocState(OrderDocState instance);
    partial void InsertOrderDocTransition(OrderDocTransition instance);
    partial void UpdateOrderDocTransition(OrderDocTransition instance);
    partial void DeleteOrderDocTransition(OrderDocTransition instance);
    partial void InsertOrderDocWebReplication(OrderDocWebReplication instance);
    partial void UpdateOrderDocWebReplication(OrderDocWebReplication instance);
    partial void DeleteOrderDocWebReplication(OrderDocWebReplication instance);
    partial void InsertPaymentOrder(PaymentOrder instance);
    partial void UpdatePaymentOrder(PaymentOrder instance);
    partial void DeletePaymentOrder(PaymentOrder instance);
    partial void InsertPaymentOrderLicenses(PaymentOrderLicenses instance);
    partial void UpdatePaymentOrderLicenses(PaymentOrderLicenses instance);
    partial void DeletePaymentOrderLicenses(PaymentOrderLicenses instance);
    partial void InsertPaymentOrderRequests(PaymentOrderRequests instance);
    partial void UpdatePaymentOrderRequests(PaymentOrderRequests instance);
    partial void DeletePaymentOrderRequests(PaymentOrderRequests instance);
    partial void InsertPerfomanceStat(PerfomanceStat instance);
    partial void UpdatePerfomanceStat(PerfomanceStat instance);
    partial void DeletePerfomanceStat(PerfomanceStat instance);
    partial void InsertQuota(Quota instance);
    partial void UpdateQuota(Quota instance);
    partial void DeleteQuota(Quota instance);
    partial void InsertQuotaDistribution(QuotaDistribution instance);
    partial void UpdateQuotaDistribution(QuotaDistribution instance);
    partial void DeleteQuotaDistribution(QuotaDistribution instance);
    partial void InsertQuotaEvent(QuotaEvent instance);
    partial void UpdateQuotaEvent(QuotaEvent instance);
    partial void DeleteQuotaEvent(QuotaEvent instance);
    partial void InsertQuotaRedistribution(QuotaRedistribution instance);
    partial void UpdateQuotaRedistribution(QuotaRedistribution instance);
    partial void DeleteQuotaRedistribution(QuotaRedistribution instance);
    partial void InsertQuotaUse2Info(QuotaUse2Info instance);
    partial void UpdateQuotaUse2Info(QuotaUse2Info instance);
    partial void DeleteQuotaUse2Info(QuotaUse2Info instance);
    partial void InsertR_FGADocument(R_FGADocument instance);
    partial void UpdateR_FGADocument(R_FGADocument instance);
    partial void DeleteR_FGADocument(R_FGADocument instance);
    partial void InsertR_FGADocumentCN(R_FGADocumentCN instance);
    partial void UpdateR_FGADocumentCN(R_FGADocumentCN instance);
    partial void DeleteR_FGADocumentCN(R_FGADocumentCN instance);
    partial void InsertR_FGADocumentCNCategory(R_FGADocumentCNCategory instance);
    partial void UpdateR_FGADocumentCNCategory(R_FGADocumentCNCategory instance);
    partial void DeleteR_FGADocumentCNCategory(R_FGADocumentCNCategory instance);
    partial void InsertR_FGADocumentContractor(R_FGADocumentContractor instance);
    partial void UpdateR_FGADocumentContractor(R_FGADocumentContractor instance);
    partial void DeleteR_FGADocumentContractor(R_FGADocumentContractor instance);
    partial void InsertR_FGADocumentOrderDoc(R_FGADocumentOrderDoc instance);
    partial void UpdateR_FGADocumentOrderDoc(R_FGADocumentOrderDoc instance);
    partial void DeleteR_FGADocumentOrderDoc(R_FGADocumentOrderDoc instance);
    partial void InsertR_FGADocumentRepresentation(R_FGADocumentRepresentation instance);
    partial void UpdateR_FGADocumentRepresentation(R_FGADocumentRepresentation instance);
    partial void DeleteR_FGADocumentRepresentation(R_FGADocumentRepresentation instance);
    partial void InsertR_QuotableOrderDoc_Param(R_QuotableOrderDoc_Param instance);
    partial void UpdateR_QuotableOrderDoc_Param(R_QuotableOrderDoc_Param instance);
    partial void DeleteR_QuotableOrderDoc_Param(R_QuotableOrderDoc_Param instance);
    partial void InsertReplicatedFile(ReplicatedFile instance);
    partial void UpdateReplicatedFile(ReplicatedFile instance);
    partial void DeleteReplicatedFile(ReplicatedFile instance);
    partial void InsertRepresentation(Representation instance);
    partial void UpdateRepresentation(Representation instance);
    partial void DeleteRepresentation(Representation instance);
    partial void InsertSpecificationCommon(SpecificationCommon instance);
    partial void UpdateSpecificationCommon(SpecificationCommon instance);
    partial void DeleteSpecificationCommon(SpecificationCommon instance);
    partial void InsertSpecificationItem(SpecificationItem instance);
    partial void UpdateSpecificationItem(SpecificationItem instance);
    partial void DeleteSpecificationItem(SpecificationItem instance);
    partial void InsertSPM_Action(SPM_Action instance);
    partial void UpdateSPM_Action(SPM_Action instance);
    partial void DeleteSPM_Action(SPM_Action instance);
    partial void InsertSPM_ActionAsso(SPM_ActionAsso instance);
    partial void UpdateSPM_ActionAsso(SPM_ActionAsso instance);
    partial void DeleteSPM_ActionAsso(SPM_ActionAsso instance);
    partial void InsertSPM_AvailableRoleForGrant(SPM_AvailableRoleForGrant instance);
    partial void UpdateSPM_AvailableRoleForGrant(SPM_AvailableRoleForGrant instance);
    partial void DeleteSPM_AvailableRoleForGrant(SPM_AvailableRoleForGrant instance);
    partial void InsertSPM_C_RoleType(SPM_C_RoleType instance);
    partial void UpdateSPM_C_RoleType(SPM_C_RoleType instance);
    partial void DeleteSPM_C_RoleType(SPM_C_RoleType instance);
    partial void InsertSPM_Role(SPM_Role instance);
    partial void UpdateSPM_Role(SPM_Role instance);
    partial void DeleteSPM_Role(SPM_Role instance);
    partial void InsertSPM_RoleAccess(SPM_RoleAccess instance);
    partial void UpdateSPM_RoleAccess(SPM_RoleAccess instance);
    partial void DeleteSPM_RoleAccess(SPM_RoleAccess instance);
    partial void InsertSPM_RoleAsso(SPM_RoleAsso instance);
    partial void UpdateSPM_RoleAsso(SPM_RoleAsso instance);
    partial void DeleteSPM_RoleAsso(SPM_RoleAsso instance);
    partial void InsertSPM_RoleGroup(SPM_RoleGroup instance);
    partial void UpdateSPM_RoleGroup(SPM_RoleGroup instance);
    partial void DeleteSPM_RoleGroup(SPM_RoleGroup instance);
    partial void InsertSPM_Subject(SPM_Subject instance);
    partial void UpdateSPM_Subject(SPM_Subject instance);
    partial void DeleteSPM_Subject(SPM_Subject instance);
    partial void InsertSPM_SubjectAccess(SPM_SubjectAccess instance);
    partial void UpdateSPM_SubjectAccess(SPM_SubjectAccess instance);
    partial void DeleteSPM_SubjectAccess(SPM_SubjectAccess instance);
    partial void InsertSPM_SubjectDelegate(SPM_SubjectDelegate instance);
    partial void UpdateSPM_SubjectDelegate(SPM_SubjectDelegate instance);
    partial void DeleteSPM_SubjectDelegate(SPM_SubjectDelegate instance);
    partial void InsertSPM_SubjectRole(SPM_SubjectRole instance);
    partial void UpdateSPM_SubjectRole(SPM_SubjectRole instance);
    partial void DeleteSPM_SubjectRole(SPM_SubjectRole instance);
    partial void InsertTM_Task(TM_Task instance);
    partial void UpdateTM_Task(TM_Task instance);
    partial void DeleteTM_Task(TM_Task instance);
    partial void InsertTM_TaskExecution(TM_TaskExecution instance);
    partial void UpdateTM_TaskExecution(TM_TaskExecution instance);
    partial void DeleteTM_TaskExecution(TM_TaskExecution instance);
    partial void InsertTM_TaskParameter(TM_TaskParameter instance);
    partial void UpdateTM_TaskParameter(TM_TaskParameter instance);
    partial void DeleteTM_TaskParameter(TM_TaskParameter instance);
    partial void InsertTraceLog(TraceLog instance);
    partial void UpdateTraceLog(TraceLog instance);
    partial void DeleteTraceLog(TraceLog instance);
    partial void InsertTraining(Training instance);
    partial void UpdateTraining(Training instance);
    partial void DeleteTraining(Training instance);
    partial void InsertTrainingAnswer(TrainingAnswer instance);
    partial void UpdateTrainingAnswer(TrainingAnswer instance);
    partial void DeleteTrainingAnswer(TrainingAnswer instance);
    partial void InsertTreasuryPayment(TreasuryPayment instance);
    partial void UpdateTreasuryPayment(TreasuryPayment instance);
    partial void DeleteTreasuryPayment(TreasuryPayment instance);
    partial void InsertTreasuryPaymentLicense(TreasuryPaymentLicense instance);
    partial void UpdateTreasuryPaymentLicense(TreasuryPaymentLicense instance);
    partial void DeleteTreasuryPaymentLicense(TreasuryPaymentLicense instance);
    partial void InsertTreasuryPaymentRequest(TreasuryPaymentRequest instance);
    partial void UpdateTreasuryPaymentRequest(TreasuryPaymentRequest instance);
    partial void DeleteTreasuryPaymentRequest(TreasuryPaymentRequest instance);
    partial void InsertUserActivity(UserActivity instance);
    partial void UpdateUserActivity(UserActivity instance);
    partial void DeleteUserActivity(UserActivity instance);
    partial void InsertUserInfo(UserInfo instance);
    partial void UpdateUserInfo(UserInfo instance);
    partial void DeleteUserInfo(UserInfo instance);
    partial void InsertV_C_Help(V_C_Help instance);
    partial void UpdateV_C_Help(V_C_Help instance);
    partial void DeleteV_C_Help(V_C_Help instance);
    partial void InsertV_FactAnnulment(V_FactAnnulment instance);
    partial void UpdateV_FactAnnulment(V_FactAnnulment instance);
    partial void DeleteV_FactAnnulment(V_FactAnnulment instance);
    partial void InsertV_FactClose(V_FactClose instance);
    partial void UpdateV_FactClose(V_FactClose instance);
    partial void DeleteV_FactClose(V_FactClose instance);
    partial void InsertV_FactForm(V_FactForm instance);
    partial void UpdateV_FactForm(V_FactForm instance);
    partial void DeleteV_FactForm(V_FactForm instance);
    partial void InsertV_FactRegister(V_FactRegister instance);
    partial void UpdateV_FactRegister(V_FactRegister instance);
    partial void DeleteV_FactRegister(V_FactRegister instance);
    partial void InsertV_FactReject(V_FactReject instance);
    partial void UpdateV_FactReject(V_FactReject instance);
    partial void DeleteV_FactReject(V_FactReject instance);
    partial void InsertV_FactResume(V_FactResume instance);
    partial void UpdateV_FactResume(V_FactResume instance);
    partial void DeleteV_FactResume(V_FactResume instance);
    partial void InsertV_FactSuspend(V_FactSuspend instance);
    partial void UpdateV_FactSuspend(V_FactSuspend instance);
    partial void DeleteV_FactSuspend(V_FactSuspend instance);
    partial void InsertV_MMS_ChangeLog(V_MMS_ChangeLog instance);
    partial void UpdateV_MMS_ChangeLog(V_MMS_ChangeLog instance);
    partial void DeleteV_MMS_ChangeLog(V_MMS_ChangeLog instance);
    partial void InsertV_MMS_ClassStereotype(V_MMS_ClassStereotype instance);
    partial void UpdateV_MMS_ClassStereotype(V_MMS_ClassStereotype instance);
    partial void DeleteV_MMS_ClassStereotype(V_MMS_ClassStereotype instance);
    partial void InsertV_MMS_Replication(V_MMS_Replication instance);
    partial void UpdateV_MMS_Replication(V_MMS_Replication instance);
    partial void DeleteV_MMS_Replication(V_MMS_Replication instance);
    partial void InsertV_MMS_Versioning(V_MMS_Versioning instance);
    partial void UpdateV_MMS_Versioning(V_MMS_Versioning instance);
    partial void DeleteV_MMS_Versioning(V_MMS_Versioning instance);
    partial void InsertV_N_FileLibrary(V_N_FileLibrary instance);
    partial void UpdateV_N_FileLibrary(V_N_FileLibrary instance);
    partial void DeleteV_N_FileLibrary(V_N_FileLibrary instance);
    partial void InsertV_N_TextResource(V_N_TextResource instance);
    partial void UpdateV_N_TextResource(V_N_TextResource instance);
    partial void DeleteV_N_TextResource(V_N_TextResource instance);
    partial void InsertV_UserInfo(V_UserInfo instance);
    partial void UpdateV_UserInfo(V_UserInfo instance);
    partial void DeleteV_UserInfo(V_UserInfo instance);
    partial void InsertVisitException(VisitException instance);
    partial void UpdateVisitException(VisitException instance);
    partial void DeleteVisitException(VisitException instance);
    partial void InsertVisitRecord(VisitRecord instance);
    partial void UpdateVisitRecord(VisitRecord instance);
    partial void DeleteVisitRecord(VisitRecord instance);
    partial void InsertVisitSchedule(VisitSchedule instance);
    partial void UpdateVisitSchedule(VisitSchedule instance);
    partial void DeleteVisitSchedule(VisitSchedule instance);
    partial void InsertVisitSchedulePurposes(VisitSchedulePurposes instance);
    partial void UpdateVisitSchedulePurposes(VisitSchedulePurposes instance);
    partial void DeleteVisitSchedulePurposes(VisitSchedulePurposes instance);
    partial void InsertVisitTime(VisitTime instance);
    partial void UpdateVisitTime(VisitTime instance);
    partial void DeleteVisitTime(VisitTime instance);
    partial void InsertWF_Activity(WF_Activity instance);
    partial void UpdateWF_Activity(WF_Activity instance);
    partial void DeleteWF_Activity(WF_Activity instance);
    partial void InsertWF_Transition(WF_Transition instance);
    partial void UpdateWF_Transition(WF_Transition instance);
    partial void DeleteWF_Transition(WF_Transition instance);
    partial void InsertWF_Workflow(WF_Workflow instance);
    partial void UpdateWF_Workflow(WF_Workflow instance);
    partial void DeleteWF_Workflow(WF_Workflow instance);
    #endregion
		
		public modelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public modelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public modelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public modelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Appendix> Appendix
		{
			get
			{
				return this.GetTable<Appendix>();
			}
		}
		
		public System.Data.Linq.Table<AppendixCommDocs> AppendixCommDocs
		{
			get
			{
				return this.GetTable<AppendixCommDocs>();
			}
		}
		
		public System.Data.Linq.Table<AppendixQuantity> AppendixQuantity
		{
			get
			{
				return this.GetTable<AppendixQuantity>();
			}
		}
		
		public System.Data.Linq.Table<Blank> Blank
		{
			get
			{
				return this.GetTable<Blank>();
			}
		}
		
		public System.Data.Linq.Table<BlankTransition> BlankTransition
		{
			get
			{
				return this.GetTable<BlankTransition>();
			}
		}
		
		public System.Data.Linq.Table<C_AnnulmentReason> C_AnnulmentReason
		{
			get
			{
				return this.GetTable<C_AnnulmentReason>();
			}
		}
		
		public System.Data.Linq.Table<C_CatalogRestriction> C_CatalogRestriction
		{
			get
			{
				return this.GetTable<C_CatalogRestriction>();
			}
		}
		
		public System.Data.Linq.Table<C_CatalogRestrictionCNCategories> C_CatalogRestrictionCNCategories
		{
			get
			{
				return this.GetTable<C_CatalogRestrictionCNCategories>();
			}
		}
		
		public System.Data.Linq.Table<C_CN> C_CN
		{
			get
			{
				return this.GetTable<C_CN>();
			}
		}
		
		public System.Data.Linq.Table<C_CNCategory> C_CNCategory
		{
			get
			{
				return this.GetTable<C_CNCategory>();
			}
		}
		
		public System.Data.Linq.Table<C_CNCategoryCN> C_CNCategoryCN
		{
			get
			{
				return this.GetTable<C_CNCategoryCN>();
			}
		}
		
		public System.Data.Linq.Table<C_CNCategoryDocument> C_CNCategoryDocument
		{
			get
			{
				return this.GetTable<C_CNCategoryDocument>();
			}
		}
		
		public System.Data.Linq.Table<C_CNCategoryFGADocument> C_CNCategoryFGADocument
		{
			get
			{
				return this.GetTable<C_CNCategoryFGADocument>();
			}
		}
		
		public System.Data.Linq.Table<C_CNCategoryItem> C_CNCategoryItem
		{
			get
			{
				return this.GetTable<C_CNCategoryItem>();
			}
		}
		
		public System.Data.Linq.Table<C_CNCategoryItemRepresentations> C_CNCategoryItemRepresentations
		{
			get
			{
				return this.GetTable<C_CNCategoryItemRepresentations>();
			}
		}
		
		public System.Data.Linq.Table<C_CNCategoryOperationType> C_CNCategoryOperationType
		{
			get
			{
				return this.GetTable<C_CNCategoryOperationType>();
			}
		}
		
		public System.Data.Linq.Table<C_CNGroup> C_CNGroup
		{
			get
			{
				return this.GetTable<C_CNGroup>();
			}
		}
		
		public System.Data.Linq.Table<C_CNGroupCN> C_CNGroupCN
		{
			get
			{
				return this.GetTable<C_CNGroupCN>();
			}
		}
		
		public System.Data.Linq.Table<C_CNType> C_CNType
		{
			get
			{
				return this.GetTable<C_CNType>();
			}
		}
		
		public System.Data.Linq.Table<C_Country> C_Country
		{
			get
			{
				return this.GetTable<C_Country>();
			}
		}
		
		public System.Data.Linq.Table<C_CountryGroup> C_CountryGroup
		{
			get
			{
				return this.GetTable<C_CountryGroup>();
			}
		}
		
		public System.Data.Linq.Table<C_CountryGroupCountries> C_CountryGroupCountries
		{
			get
			{
				return this.GetTable<C_CountryGroupCountries>();
			}
		}
		
		public System.Data.Linq.Table<C_Crypto> C_Crypto
		{
			get
			{
				return this.GetTable<C_Crypto>();
			}
		}
		
		public System.Data.Linq.Table<C_Currency> C_Currency
		{
			get
			{
				return this.GetTable<C_Currency>();
			}
		}
		
		public System.Data.Linq.Table<C_CustomHouse> C_CustomHouse
		{
			get
			{
				return this.GetTable<C_CustomHouse>();
			}
		}
		
		public System.Data.Linq.Table<C_CustomHouseContact> C_CustomHouseContact
		{
			get
			{
				return this.GetTable<C_CustomHouseContact>();
			}
		}
		
		public System.Data.Linq.Table<C_DocumentSourceType> C_DocumentSourceType
		{
			get
			{
				return this.GetTable<C_DocumentSourceType>();
			}
		}
		
		public System.Data.Linq.Table<C_DocumentType> C_DocumentType
		{
			get
			{
				return this.GetTable<C_DocumentType>();
			}
		}
		
		public System.Data.Linq.Table<C_FGA> C_FGA
		{
			get
			{
				return this.GetTable<C_FGA>();
			}
		}
		
		public System.Data.Linq.Table<C_FGACNCategory> C_FGACNCategory
		{
			get
			{
				return this.GetTable<C_FGACNCategory>();
			}
		}
		
		public System.Data.Linq.Table<C_FGADocument> C_FGADocument
		{
			get
			{
				return this.GetTable<C_FGADocument>();
			}
		}
		
		public System.Data.Linq.Table<C_FGADocumentSigner> C_FGADocumentSigner
		{
			get
			{
				return this.GetTable<C_FGADocumentSigner>();
			}
		}
		
		public System.Data.Linq.Table<C_FtsCN> C_FtsCN
		{
			get
			{
				return this.GetTable<C_FtsCN>();
			}
		}
		
		public System.Data.Linq.Table<C_FtsCountry> C_FtsCountry
		{
			get
			{
				return this.GetTable<C_FtsCountry>();
			}
		}
		
		public System.Data.Linq.Table<C_FtsCountryGroup> C_FtsCountryGroup
		{
			get
			{
				return this.GetTable<C_FtsCountryGroup>();
			}
		}
		
		public System.Data.Linq.Table<C_FtsCountryGroupCountries> C_FtsCountryGroupCountries
		{
			get
			{
				return this.GetTable<C_FtsCountryGroupCountries>();
			}
		}
		
		public System.Data.Linq.Table<C_FtsCustomHouse> C_FtsCustomHouse
		{
			get
			{
				return this.GetTable<C_FtsCustomHouse>();
			}
		}
		
		public System.Data.Linq.Table<C_Help> C_Help
		{
			get
			{
				return this.GetTable<C_Help>();
			}
		}
		
		public System.Data.Linq.Table<C_HelpData> C_HelpData
		{
			get
			{
				return this.GetTable<C_HelpData>();
			}
		}
		
		public System.Data.Linq.Table<C_Language> C_Language
		{
			get
			{
				return this.GetTable<C_Language>();
			}
		}
		
		public System.Data.Linq.Table<C_LawOrgan> C_LawOrgan
		{
			get
			{
				return this.GetTable<C_LawOrgan>();
			}
		}
		
		public System.Data.Linq.Table<C_LegalDocument> C_LegalDocument
		{
			get
			{
				return this.GetTable<C_LegalDocument>();
			}
		}
		
		public System.Data.Linq.Table<C_LegalDocumentCNCategories> C_LegalDocumentCNCategories
		{
			get
			{
				return this.GetTable<C_LegalDocumentCNCategories>();
			}
		}
		
		public System.Data.Linq.Table<C_LegalDocumentCNGroups> C_LegalDocumentCNGroups
		{
			get
			{
				return this.GetTable<C_LegalDocumentCNGroups>();
			}
		}
		
		public System.Data.Linq.Table<C_LegalDocumentRestrictions> C_LegalDocumentRestrictions
		{
			get
			{
				return this.GetTable<C_LegalDocumentRestrictions>();
			}
		}
		
		public System.Data.Linq.Table<C_LegalDocumentType> C_LegalDocumentType
		{
			get
			{
				return this.GetTable<C_LegalDocumentType>();
			}
		}
		
		public System.Data.Linq.Table<C_LicenseType> C_LicenseType
		{
			get
			{
				return this.GetTable<C_LicenseType>();
			}
		}
		
		public System.Data.Linq.Table<C_MaxTargetValidity> C_MaxTargetValidity
		{
			get
			{
				return this.GetTable<C_MaxTargetValidity>();
			}
		}
		
		public System.Data.Linq.Table<C_Measure> C_Measure
		{
			get
			{
				return this.GetTable<C_Measure>();
			}
		}
		
		public System.Data.Linq.Table<C_MFC> C_MFC
		{
			get
			{
				return this.GetTable<C_MFC>();
			}
		}
		
		public System.Data.Linq.Table<C_OperationType> C_OperationType
		{
			get
			{
				return this.GetTable<C_OperationType>();
			}
		}
		
		public System.Data.Linq.Table<C_QuoteCategory> C_QuoteCategory
		{
			get
			{
				return this.GetTable<C_QuoteCategory>();
			}
		}
		
		public System.Data.Linq.Table<C_RES> C_RES
		{
			get
			{
				return this.GetTable<C_RES>();
			}
		}
		
		public System.Data.Linq.Table<C_RFSubject> C_RFSubject
		{
			get
			{
				return this.GetTable<C_RFSubject>();
			}
		}
		
		public System.Data.Linq.Table<C_Tariff> C_Tariff
		{
			get
			{
				return this.GetTable<C_Tariff>();
			}
		}
		
		public System.Data.Linq.Table<C_UseType> C_UseType
		{
			get
			{
				return this.GetTable<C_UseType>();
			}
		}
		
		public System.Data.Linq.Table<C_VisitPurpose> C_VisitPurpose
		{
			get
			{
				return this.GetTable<C_VisitPurpose>();
			}
		}
		
		public System.Data.Linq.Table<C_VisitWeek> C_VisitWeek
		{
			get
			{
				return this.GetTable<C_VisitWeek>();
			}
		}
		
		public System.Data.Linq.Table<CalendarDay> CalendarDay
		{
			get
			{
				return this.GetTable<CalendarDay>();
			}
		}
		
		public System.Data.Linq.Table<CertificateInfo> CertificateInfo
		{
			get
			{
				return this.GetTable<CertificateInfo>();
			}
		}
		
		public System.Data.Linq.Table<CommodityDocument> CommodityDocument
		{
			get
			{
				return this.GetTable<CommodityDocument>();
			}
		}
		
		public System.Data.Linq.Table<Contractor> Contractor
		{
			get
			{
				return this.GetTable<Contractor>();
			}
		}
		
		public System.Data.Linq.Table<ContractorChiefPerson> ContractorChiefPerson
		{
			get
			{
				return this.GetTable<ContractorChiefPerson>();
			}
		}
		
		public System.Data.Linq.Table<ControlParameters> ControlParameters
		{
			get
			{
				return this.GetTable<ControlParameters>();
			}
		}
		
		public System.Data.Linq.Table<Copy_ContractorChiefPerson> Copy_ContractorChiefPerson
		{
			get
			{
				return this.GetTable<Copy_ContractorChiefPerson>();
			}
		}
		
		public System.Data.Linq.Table<Curriculum> Curriculum
		{
			get
			{
				return this.GetTable<Curriculum>();
			}
		}
		
		public System.Data.Linq.Table<CurriculumQuestion> CurriculumQuestion
		{
			get
			{
				return this.GetTable<CurriculumQuestion>();
			}
		}
		
		public System.Data.Linq.Table<CurriculumQuestionAnswer> CurriculumQuestionAnswer
		{
			get
			{
				return this.GetTable<CurriculumQuestionAnswer>();
			}
		}
		
		public System.Data.Linq.Table<CurriculumRoles> CurriculumRoles
		{
			get
			{
				return this.GetTable<CurriculumRoles>();
			}
		}
		
		public System.Data.Linq.Table<CustomsDeclaration> CustomsDeclaration
		{
			get
			{
				return this.GetTable<CustomsDeclaration>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employee
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<ErrorLog> ErrorLog
		{
			get
			{
				return this.GetTable<ErrorLog>();
			}
		}
		
		public System.Data.Linq.Table<FactAnnulment> FactAnnulment
		{
			get
			{
				return this.GetTable<FactAnnulment>();
			}
		}
		
		public System.Data.Linq.Table<FactClose> FactClose
		{
			get
			{
				return this.GetTable<FactClose>();
			}
		}
		
		public System.Data.Linq.Table<FactForm> FactForm
		{
			get
			{
				return this.GetTable<FactForm>();
			}
		}
		
		public System.Data.Linq.Table<FactRegister> FactRegister
		{
			get
			{
				return this.GetTable<FactRegister>();
			}
		}
		
		public System.Data.Linq.Table<FactReject> FactReject
		{
			get
			{
				return this.GetTable<FactReject>();
			}
		}
		
		public System.Data.Linq.Table<FactResume> FactResume
		{
			get
			{
				return this.GetTable<FactResume>();
			}
		}
		
		public System.Data.Linq.Table<FactSuspend> FactSuspend
		{
			get
			{
				return this.GetTable<FactSuspend>();
			}
		}
		
		public System.Data.Linq.Table<ForeignAuthorization> ForeignAuthorization
		{
			get
			{
				return this.GetTable<ForeignAuthorization>();
			}
		}
		
		public System.Data.Linq.Table<FTSExportLog> FTSExportLog
		{
			get
			{
				return this.GetTable<FTSExportLog>();
			}
		}
		
		public System.Data.Linq.Table<FullCN> FullCN
		{
			get
			{
				return this.GetTable<FullCN>();
			}
		}
		
		public System.Data.Linq.Table<FullRepresentation> FullRepresentation
		{
			get
			{
				return this.GetTable<FullRepresentation>();
			}
		}
		
		public System.Data.Linq.Table<HST_Contractor> HST_Contractor
		{
			get
			{
				return this.GetTable<HST_Contractor>();
			}
		}
		
		public System.Data.Linq.Table<HST_MM_FormView> HST_MM_FormView
		{
			get
			{
				return this.GetTable<HST_MM_FormView>();
			}
		}
		
		public System.Data.Linq.Table<HST_N_TimeZone> HST_N_TimeZone
		{
			get
			{
				return this.GetTable<HST_N_TimeZone>();
			}
		}
		
		public System.Data.Linq.Table<INT_Command> INT_Command
		{
			get
			{
				return this.GetTable<INT_Command>();
			}
		}
		
		public System.Data.Linq.Table<INT_Handler> INT_Handler
		{
			get
			{
				return this.GetTable<INT_Handler>();
			}
		}
		
		public System.Data.Linq.Table<INT_Log> INT_Log
		{
			get
			{
				return this.GetTable<INT_Log>();
			}
		}
		
		public System.Data.Linq.Table<INT_System> INT_System
		{
			get
			{
				return this.GetTable<INT_System>();
			}
		}
		
		public System.Data.Linq.Table<Letter> Letter
		{
			get
			{
				return this.GetTable<Letter>();
			}
		}
		
		public System.Data.Linq.Table<LicenseExecution> LicenseExecution
		{
			get
			{
				return this.GetTable<LicenseExecution>();
			}
		}
		
		public System.Data.Linq.Table<MailMessage> MailMessage
		{
			get
			{
				return this.GetTable<MailMessage>();
			}
		}
		
		public System.Data.Linq.Table<MailTemplate> MailTemplate
		{
			get
			{
				return this.GetTable<MailTemplate>();
			}
		}
		
		public System.Data.Linq.Table<MM_Codifier> MM_Codifier
		{
			get
			{
				return this.GetTable<MM_Codifier>();
			}
		}
		
		public System.Data.Linq.Table<MM_CodifierValue> MM_CodifierValue
		{
			get
			{
				return this.GetTable<MM_CodifierValue>();
			}
		}
		
		public System.Data.Linq.Table<MM_DataValidation> MM_DataValidation
		{
			get
			{
				return this.GetTable<MM_DataValidation>();
			}
		}
		
		public System.Data.Linq.Table<MM_FormField> MM_FormField
		{
			get
			{
				return this.GetTable<MM_FormField>();
			}
		}
		
		public System.Data.Linq.Table<MM_FormFieldAttribute> MM_FormFieldAttribute
		{
			get
			{
				return this.GetTable<MM_FormFieldAttribute>();
			}
		}
		
		public System.Data.Linq.Table<MM_FormFieldGroup> MM_FormFieldGroup
		{
			get
			{
				return this.GetTable<MM_FormFieldGroup>();
			}
		}
		
		public System.Data.Linq.Table<MM_FormView> MM_FormView
		{
			get
			{
				return this.GetTable<MM_FormView>();
			}
		}
		
		public System.Data.Linq.Table<MM_Group> MM_Group
		{
			get
			{
				return this.GetTable<MM_Group>();
			}
		}
		
		public System.Data.Linq.Table<MM_GroupAsso> MM_GroupAsso
		{
			get
			{
				return this.GetTable<MM_GroupAsso>();
			}
		}
		
		public System.Data.Linq.Table<MM_Method> MM_Method
		{
			get
			{
				return this.GetTable<MM_Method>();
			}
		}
		
		public System.Data.Linq.Table<MM_MethodGroup> MM_MethodGroup
		{
			get
			{
				return this.GetTable<MM_MethodGroup>();
			}
		}
		
		public System.Data.Linq.Table<MM_MethodGroupItem> MM_MethodGroupItem
		{
			get
			{
				return this.GetTable<MM_MethodGroupItem>();
			}
		}
		
		public System.Data.Linq.Table<MM_MethodParameter> MM_MethodParameter
		{
			get
			{
				return this.GetTable<MM_MethodParameter>();
			}
		}
		
		public System.Data.Linq.Table<MM_ObjectProperty> MM_ObjectProperty
		{
			get
			{
				return this.GetTable<MM_ObjectProperty>();
			}
		}
		
		public System.Data.Linq.Table<MM_ObjectType> MM_ObjectType
		{
			get
			{
				return this.GetTable<MM_ObjectType>();
			}
		}
		
		public System.Data.Linq.Table<MM_ObjectTypeStereotypes> MM_ObjectTypeStereotypes
		{
			get
			{
				return this.GetTable<MM_ObjectTypeStereotypes>();
			}
		}
		
		public System.Data.Linq.Table<MM_Package> MM_Package
		{
			get
			{
				return this.GetTable<MM_Package>();
			}
		}
		
		public System.Data.Linq.Table<MM_Predicate> MM_Predicate
		{
			get
			{
				return this.GetTable<MM_Predicate>();
			}
		}
		
		public System.Data.Linq.Table<MM_TaggedValueType> MM_TaggedValueType
		{
			get
			{
				return this.GetTable<MM_TaggedValueType>();
			}
		}
		
		public System.Data.Linq.Table<MMA_SiteInfoobjects> MMA_SiteInfoobjects
		{
			get
			{
				return this.GetTable<MMA_SiteInfoobjects>();
			}
		}
		
		public System.Data.Linq.Table<MMS_ChangeLog> MMS_ChangeLog
		{
			get
			{
				return this.GetTable<MMS_ChangeLog>();
			}
		}
		
		public System.Data.Linq.Table<MMS_ClassStereotype> MMS_ClassStereotype
		{
			get
			{
				return this.GetTable<MMS_ClassStereotype>();
			}
		}
		
		public System.Data.Linq.Table<MMS_Replication> MMS_Replication
		{
			get
			{
				return this.GetTable<MMS_Replication>();
			}
		}
		
		public System.Data.Linq.Table<MMS_Versioning> MMS_Versioning
		{
			get
			{
				return this.GetTable<MMS_Versioning>();
			}
		}
		
		public System.Data.Linq.Table<N_Cache> N_Cache
		{
			get
			{
				return this.GetTable<N_Cache>();
			}
		}
		
		public System.Data.Linq.Table<N_DDL> N_DDL
		{
			get
			{
				return this.GetTable<N_DDL>();
			}
		}
		
		public System.Data.Linq.Table<N_DownloadLog> N_DownloadLog
		{
			get
			{
				return this.GetTable<N_DownloadLog>();
			}
		}
		
		public System.Data.Linq.Table<N_File> N_File
		{
			get
			{
				return this.GetTable<N_File>();
			}
		}
		
		public System.Data.Linq.Table<N_FileData> N_FileData
		{
			get
			{
				return this.GetTable<N_FileData>();
			}
		}
		
		public System.Data.Linq.Table<N_FileLibrary> N_FileLibrary
		{
			get
			{
				return this.GetTable<N_FileLibrary>();
			}
		}
		
		public System.Data.Linq.Table<N_FileLibraryType> N_FileLibraryType
		{
			get
			{
				return this.GetTable<N_FileLibraryType>();
			}
		}
		
		public System.Data.Linq.Table<N_FileList> N_FileList
		{
			get
			{
				return this.GetTable<N_FileList>();
			}
		}
		
		public System.Data.Linq.Table<N_FileListItem> N_FileListItem
		{
			get
			{
				return this.GetTable<N_FileListItem>();
			}
		}
		
		public System.Data.Linq.Table<N_Filter> N_Filter
		{
			get
			{
				return this.GetTable<N_Filter>();
			}
		}
		
		public System.Data.Linq.Table<N_Folder> N_Folder
		{
			get
			{
				return this.GetTable<N_Folder>();
			}
		}
		
		public System.Data.Linq.Table<N_FolderPredicate> N_FolderPredicate
		{
			get
			{
				return this.GetTable<N_FolderPredicate>();
			}
		}
		
		public System.Data.Linq.Table<N_Image> N_Image
		{
			get
			{
				return this.GetTable<N_Image>();
			}
		}
		
		public System.Data.Linq.Table<N_MenuItem> N_MenuItem
		{
			get
			{
				return this.GetTable<N_MenuItem>();
			}
		}
		
		public System.Data.Linq.Table<N_NeighborSystem> N_NeighborSystem
		{
			get
			{
				return this.GetTable<N_NeighborSystem>();
			}
		}
		
		public System.Data.Linq.Table<N_ObjectChange> N_ObjectChange
		{
			get
			{
				return this.GetTable<N_ObjectChange>();
			}
		}
		
		public System.Data.Linq.Table<N_ObjectPropertyChange> N_ObjectPropertyChange
		{
			get
			{
				return this.GetTable<N_ObjectPropertyChange>();
			}
		}
		
		public System.Data.Linq.Table<N_ReplicationLogItem> N_ReplicationLogItem
		{
			get
			{
				return this.GetTable<N_ReplicationLogItem>();
			}
		}
		
		public System.Data.Linq.Table<N_ReplicationObject> N_ReplicationObject
		{
			get
			{
				return this.GetTable<N_ReplicationObject>();
			}
		}
		
		public System.Data.Linq.Table<N_RssFeed> N_RssFeed
		{
			get
			{
				return this.GetTable<N_RssFeed>();
			}
		}
		
		public System.Data.Linq.Table<N_Settings> N_Settings
		{
			get
			{
				return this.GetTable<N_Settings>();
			}
		}
		
		public System.Data.Linq.Table<N_SqlStatementLog> N_SqlStatementLog
		{
			get
			{
				return this.GetTable<N_SqlStatementLog>();
			}
		}
		
		public System.Data.Linq.Table<N_TableInfo> N_TableInfo
		{
			get
			{
				return this.GetTable<N_TableInfo>();
			}
		}
		
		public System.Data.Linq.Table<N_TextResource> N_TextResource
		{
			get
			{
				return this.GetTable<N_TextResource>();
			}
		}
		
		public System.Data.Linq.Table<N_TextResourceData> N_TextResourceData
		{
			get
			{
				return this.GetTable<N_TextResourceData>();
			}
		}
		
		public System.Data.Linq.Table<N_TimeZone> N_TimeZone
		{
			get
			{
				return this.GetTable<N_TimeZone>();
			}
		}
		
		public System.Data.Linq.Table<N_VirusScanLog> N_VirusScanLog
		{
			get
			{
				return this.GetTable<N_VirusScanLog>();
			}
		}
		
		public System.Data.Linq.Table<OrderDoc> OrderDoc
		{
			get
			{
				return this.GetTable<OrderDoc>();
			}
		}
		
		public System.Data.Linq.Table<OrderDocAsso> OrderDocAsso
		{
			get
			{
				return this.GetTable<OrderDocAsso>();
			}
		}
		
		public System.Data.Linq.Table<OrderDocBankReplication> OrderDocBankReplication
		{
			get
			{
				return this.GetTable<OrderDocBankReplication>();
			}
		}
		
		public System.Data.Linq.Table<OrderDocDeviation> OrderDocDeviation
		{
			get
			{
				return this.GetTable<OrderDocDeviation>();
			}
		}
		
		public System.Data.Linq.Table<OrderDocImportSubject> OrderDocImportSubject
		{
			get
			{
				return this.GetTable<OrderDocImportSubject>();
			}
		}
		
		public System.Data.Linq.Table<OrderDocPassport> OrderDocPassport
		{
			get
			{
				return this.GetTable<OrderDocPassport>();
			}
		}
		
		public System.Data.Linq.Table<OrderDocReplicationLog> OrderDocReplicationLog
		{
			get
			{
				return this.GetTable<OrderDocReplicationLog>();
			}
		}
		
		public System.Data.Linq.Table<OrderDocResponsible> OrderDocResponsible
		{
			get
			{
				return this.GetTable<OrderDocResponsible>();
			}
		}
		
		public System.Data.Linq.Table<OrderDocState> OrderDocState
		{
			get
			{
				return this.GetTable<OrderDocState>();
			}
		}
		
		public System.Data.Linq.Table<OrderDocTransition> OrderDocTransition
		{
			get
			{
				return this.GetTable<OrderDocTransition>();
			}
		}
		
		public System.Data.Linq.Table<OrderDocWebReplication> OrderDocWebReplication
		{
			get
			{
				return this.GetTable<OrderDocWebReplication>();
			}
		}
		
		public System.Data.Linq.Table<PaymentOrder> PaymentOrder
		{
			get
			{
				return this.GetTable<PaymentOrder>();
			}
		}
		
		public System.Data.Linq.Table<PaymentOrderLicenses> PaymentOrderLicenses
		{
			get
			{
				return this.GetTable<PaymentOrderLicenses>();
			}
		}
		
		public System.Data.Linq.Table<PaymentOrderRequests> PaymentOrderRequests
		{
			get
			{
				return this.GetTable<PaymentOrderRequests>();
			}
		}
		
		public System.Data.Linq.Table<PerfomanceStat> PerfomanceStat
		{
			get
			{
				return this.GetTable<PerfomanceStat>();
			}
		}
		
		public System.Data.Linq.Table<Quota> Quota
		{
			get
			{
				return this.GetTable<Quota>();
			}
		}
		
		public System.Data.Linq.Table<QuotaDistribution> QuotaDistribution
		{
			get
			{
				return this.GetTable<QuotaDistribution>();
			}
		}
		
		public System.Data.Linq.Table<QuotaEvent> QuotaEvent
		{
			get
			{
				return this.GetTable<QuotaEvent>();
			}
		}
		
		public System.Data.Linq.Table<QuotaRedistribution> QuotaRedistribution
		{
			get
			{
				return this.GetTable<QuotaRedistribution>();
			}
		}
		
		public System.Data.Linq.Table<QuotaUse2Info> QuotaUse2Info
		{
			get
			{
				return this.GetTable<QuotaUse2Info>();
			}
		}
		
		public System.Data.Linq.Table<R_Blank> R_Blank
		{
			get
			{
				return this.GetTable<R_Blank>();
			}
		}
		
		public System.Data.Linq.Table<R_FGADocument> R_FGADocument
		{
			get
			{
				return this.GetTable<R_FGADocument>();
			}
		}
		
		public System.Data.Linq.Table<R_FGADocumentCN> R_FGADocumentCN
		{
			get
			{
				return this.GetTable<R_FGADocumentCN>();
			}
		}
		
		public System.Data.Linq.Table<R_FGADocumentCNCategory> R_FGADocumentCNCategory
		{
			get
			{
				return this.GetTable<R_FGADocumentCNCategory>();
			}
		}
		
		public System.Data.Linq.Table<R_FGADocumentContractor> R_FGADocumentContractor
		{
			get
			{
				return this.GetTable<R_FGADocumentContractor>();
			}
		}
		
		public System.Data.Linq.Table<R_FGADocumentOrderDoc> R_FGADocumentOrderDoc
		{
			get
			{
				return this.GetTable<R_FGADocumentOrderDoc>();
			}
		}
		
		public System.Data.Linq.Table<R_FGADocumentRepresentation> R_FGADocumentRepresentation
		{
			get
			{
				return this.GetTable<R_FGADocumentRepresentation>();
			}
		}
		
		public System.Data.Linq.Table<R_OrderDoc_Commodity> R_OrderDoc_Commodity
		{
			get
			{
				return this.GetTable<R_OrderDoc_Commodity>();
			}
		}
		
		public System.Data.Linq.Table<R_OrderDoc_Execution> R_OrderDoc_Execution
		{
			get
			{
				return this.GetTable<R_OrderDoc_Execution>();
			}
		}
		
		public System.Data.Linq.Table<R_OrderDoc_RequestsLicenses> R_OrderDoc_RequestsLicenses
		{
			get
			{
				return this.GetTable<R_OrderDoc_RequestsLicenses>();
			}
		}
		
		public System.Data.Linq.Table<R_OrderDoc_RequestsLicenses_Backup2014_11_20> R_OrderDoc_RequestsLicenses_Backup2014_11_20
		{
			get
			{
				return this.GetTable<R_OrderDoc_RequestsLicenses_Backup2014_11_20>();
			}
		}
		
		public System.Data.Linq.Table<R_OrderDocDeviation> R_OrderDocDeviation
		{
			get
			{
				return this.GetTable<R_OrderDocDeviation>();
			}
		}
		
		public System.Data.Linq.Table<R_PaymentOrders> R_PaymentOrders
		{
			get
			{
				return this.GetTable<R_PaymentOrders>();
			}
		}
		
		public System.Data.Linq.Table<R_QuotableOrderDoc> R_QuotableOrderDoc
		{
			get
			{
				return this.GetTable<R_QuotableOrderDoc>();
			}
		}
		
		public System.Data.Linq.Table<R_QuotableOrderDoc_Param> R_QuotableOrderDoc_Param
		{
			get
			{
				return this.GetTable<R_QuotableOrderDoc_Param>();
			}
		}
		
		public System.Data.Linq.Table<R_QuotaUse> R_QuotaUse
		{
			get
			{
				return this.GetTable<R_QuotaUse>();
			}
		}
		
		public System.Data.Linq.Table<R_QuotaUse_sub> R_QuotaUse_sub
		{
			get
			{
				return this.GetTable<R_QuotaUse_sub>();
			}
		}
		
		public System.Data.Linq.Table<R_QuotaUse2> R_QuotaUse2
		{
			get
			{
				return this.GetTable<R_QuotaUse2>();
			}
		}
		
		public System.Data.Linq.Table<R_QuotaUse2_View> R_QuotaUse2_View
		{
			get
			{
				return this.GetTable<R_QuotaUse2_View>();
			}
		}
		
		public System.Data.Linq.Table<R_VisitRecord> R_VisitRecord
		{
			get
			{
				return this.GetTable<R_VisitRecord>();
			}
		}
		
		public System.Data.Linq.Table<ReplicatedFile> ReplicatedFile
		{
			get
			{
				return this.GetTable<ReplicatedFile>();
			}
		}
		
		public System.Data.Linq.Table<Representation> Representation
		{
			get
			{
				return this.GetTable<Representation>();
			}
		}
		
		public System.Data.Linq.Table<SpecificationCommon> SpecificationCommon
		{
			get
			{
				return this.GetTable<SpecificationCommon>();
			}
		}
		
		public System.Data.Linq.Table<SpecificationItem> SpecificationItem
		{
			get
			{
				return this.GetTable<SpecificationItem>();
			}
		}
		
		public System.Data.Linq.Table<SPM_Action> SPM_Action
		{
			get
			{
				return this.GetTable<SPM_Action>();
			}
		}
		
		public System.Data.Linq.Table<SPM_ActionAsso> SPM_ActionAsso
		{
			get
			{
				return this.GetTable<SPM_ActionAsso>();
			}
		}
		
		public System.Data.Linq.Table<SPM_ActionRoleAccess> SPM_ActionRoleAccess
		{
			get
			{
				return this.GetTable<SPM_ActionRoleAccess>();
			}
		}
		
		public System.Data.Linq.Table<SPM_AvailableRoleForGrant> SPM_AvailableRoleForGrant
		{
			get
			{
				return this.GetTable<SPM_AvailableRoleForGrant>();
			}
		}
		
		public System.Data.Linq.Table<SPM_C_RoleType> SPM_C_RoleType
		{
			get
			{
				return this.GetTable<SPM_C_RoleType>();
			}
		}
		
		public System.Data.Linq.Table<SPM_CasheFlag> SPM_CasheFlag
		{
			get
			{
				return this.GetTable<SPM_CasheFlag>();
			}
		}
		
		public System.Data.Linq.Table<SPM_Role> SPM_Role
		{
			get
			{
				return this.GetTable<SPM_Role>();
			}
		}
		
		public System.Data.Linq.Table<SPM_RoleAccess> SPM_RoleAccess
		{
			get
			{
				return this.GetTable<SPM_RoleAccess>();
			}
		}
		
		public System.Data.Linq.Table<SPM_RoleAsso> SPM_RoleAsso
		{
			get
			{
				return this.GetTable<SPM_RoleAsso>();
			}
		}
		
		public System.Data.Linq.Table<SPM_RoleGroup> SPM_RoleGroup
		{
			get
			{
				return this.GetTable<SPM_RoleGroup>();
			}
		}
		
		public System.Data.Linq.Table<SPM_Subject> SPM_Subject
		{
			get
			{
				return this.GetTable<SPM_Subject>();
			}
		}
		
		public System.Data.Linq.Table<SPM_SubjectAccess> SPM_SubjectAccess
		{
			get
			{
				return this.GetTable<SPM_SubjectAccess>();
			}
		}
		
		public System.Data.Linq.Table<SPM_SubjectDelegate> SPM_SubjectDelegate
		{
			get
			{
				return this.GetTable<SPM_SubjectDelegate>();
			}
		}
		
		public System.Data.Linq.Table<SPM_SubjectRole> SPM_SubjectRole
		{
			get
			{
				return this.GetTable<SPM_SubjectRole>();
			}
		}
		
		public System.Data.Linq.Table<TM_Task> TM_Task
		{
			get
			{
				return this.GetTable<TM_Task>();
			}
		}
		
		public System.Data.Linq.Table<TM_TaskExecution> TM_TaskExecution
		{
			get
			{
				return this.GetTable<TM_TaskExecution>();
			}
		}
		
		public System.Data.Linq.Table<TM_TaskParameter> TM_TaskParameter
		{
			get
			{
				return this.GetTable<TM_TaskParameter>();
			}
		}
		
		public System.Data.Linq.Table<TNVED1> TNVED1
		{
			get
			{
				return this.GetTable<TNVED1>();
			}
		}
		
		public System.Data.Linq.Table<TNVED2> TNVED2
		{
			get
			{
				return this.GetTable<TNVED2>();
			}
		}
		
		public System.Data.Linq.Table<TNVED3> TNVED3
		{
			get
			{
				return this.GetTable<TNVED3>();
			}
		}
		
		public System.Data.Linq.Table<TNVED4> TNVED4
		{
			get
			{
				return this.GetTable<TNVED4>();
			}
		}
		
		public System.Data.Linq.Table<TNVED6> TNVED6
		{
			get
			{
				return this.GetTable<TNVED6>();
			}
		}
		
		public System.Data.Linq.Table<TraceLog> TraceLog
		{
			get
			{
				return this.GetTable<TraceLog>();
			}
		}
		
		public System.Data.Linq.Table<Training> Training
		{
			get
			{
				return this.GetTable<Training>();
			}
		}
		
		public System.Data.Linq.Table<TrainingAnswer> TrainingAnswer
		{
			get
			{
				return this.GetTable<TrainingAnswer>();
			}
		}
		
		public System.Data.Linq.Table<TreasuryPayment> TreasuryPayment
		{
			get
			{
				return this.GetTable<TreasuryPayment>();
			}
		}
		
		public System.Data.Linq.Table<TreasuryPaymentLicense> TreasuryPaymentLicense
		{
			get
			{
				return this.GetTable<TreasuryPaymentLicense>();
			}
		}
		
		public System.Data.Linq.Table<TreasuryPaymentRequest> TreasuryPaymentRequest
		{
			get
			{
				return this.GetTable<TreasuryPaymentRequest>();
			}
		}
		
		public System.Data.Linq.Table<UserActivity> UserActivity
		{
			get
			{
				return this.GetTable<UserActivity>();
			}
		}
		
		public System.Data.Linq.Table<UserInfo> UserInfo
		{
			get
			{
				return this.GetTable<UserInfo>();
			}
		}
		
		public System.Data.Linq.Table<V_AvailableRoleForGrant> V_AvailableRoleForGrant
		{
			get
			{
				return this.GetTable<V_AvailableRoleForGrant>();
			}
		}
		
		public System.Data.Linq.Table<V_C_Help> V_C_Help
		{
			get
			{
				return this.GetTable<V_C_Help>();
			}
		}
		
		public System.Data.Linq.Table<V_Calendar> V_Calendar
		{
			get
			{
				return this.GetTable<V_Calendar>();
			}
		}
		
		public System.Data.Linq.Table<V_ContractorPayment> V_ContractorPayment
		{
			get
			{
				return this.GetTable<V_ContractorPayment>();
			}
		}
		
		public System.Data.Linq.Table<V_DbFile> V_DbFile
		{
			get
			{
				return this.GetTable<V_DbFile>();
			}
		}
		
		public System.Data.Linq.Table<V_DbFolder> V_DbFolder
		{
			get
			{
				return this.GetTable<V_DbFolder>();
			}
		}
		
		public System.Data.Linq.Table<V_DbItem> V_DbItem
		{
			get
			{
				return this.GetTable<V_DbItem>();
			}
		}
		
		public System.Data.Linq.Table<V_Documents> V_Documents
		{
			get
			{
				return this.GetTable<V_Documents>();
			}
		}
		
		public System.Data.Linq.Table<V_ElectronicJournal> V_ElectronicJournal
		{
			get
			{
				return this.GetTable<V_ElectronicJournal>();
			}
		}
		
		public System.Data.Linq.Table<V_FactAnnulment> V_FactAnnulment
		{
			get
			{
				return this.GetTable<V_FactAnnulment>();
			}
		}
		
		public System.Data.Linq.Table<V_FactClose> V_FactClose
		{
			get
			{
				return this.GetTable<V_FactClose>();
			}
		}
		
		public System.Data.Linq.Table<V_FactForm> V_FactForm
		{
			get
			{
				return this.GetTable<V_FactForm>();
			}
		}
		
		public System.Data.Linq.Table<V_FactRegister> V_FactRegister
		{
			get
			{
				return this.GetTable<V_FactRegister>();
			}
		}
		
		public System.Data.Linq.Table<V_FactReject> V_FactReject
		{
			get
			{
				return this.GetTable<V_FactReject>();
			}
		}
		
		public System.Data.Linq.Table<V_FactResume> V_FactResume
		{
			get
			{
				return this.GetTable<V_FactResume>();
			}
		}
		
		public System.Data.Linq.Table<V_FactSuspend> V_FactSuspend
		{
			get
			{
				return this.GetTable<V_FactSuspend>();
			}
		}
		
		public System.Data.Linq.Table<V_MMA_SiteInfoobjects> V_MMA_SiteInfoobjects
		{
			get
			{
				return this.GetTable<V_MMA_SiteInfoobjects>();
			}
		}
		
		public System.Data.Linq.Table<V_MMS_ChangeLog> V_MMS_ChangeLog
		{
			get
			{
				return this.GetTable<V_MMS_ChangeLog>();
			}
		}
		
		public System.Data.Linq.Table<V_MMS_ClassStereotype> V_MMS_ClassStereotype
		{
			get
			{
				return this.GetTable<V_MMS_ClassStereotype>();
			}
		}
		
		public System.Data.Linq.Table<V_MMS_Replication> V_MMS_Replication
		{
			get
			{
				return this.GetTable<V_MMS_Replication>();
			}
		}
		
		public System.Data.Linq.Table<V_MMS_Versioning> V_MMS_Versioning
		{
			get
			{
				return this.GetTable<V_MMS_Versioning>();
			}
		}
		
		public System.Data.Linq.Table<V_N_FileLibrary> V_N_FileLibrary
		{
			get
			{
				return this.GetTable<V_N_FileLibrary>();
			}
		}
		
		public System.Data.Linq.Table<V_N_FolderFile> V_N_FolderFile
		{
			get
			{
				return this.GetTable<V_N_FolderFile>();
			}
		}
		
		public System.Data.Linq.Table<V_N_FullFolder> V_N_FullFolder
		{
			get
			{
				return this.GetTable<V_N_FullFolder>();
			}
		}
		
		public System.Data.Linq.Table<V_N_TextResource> V_N_TextResource
		{
			get
			{
				return this.GetTable<V_N_TextResource>();
			}
		}
		
		public System.Data.Linq.Table<V_OrderDocDeviation> V_OrderDocDeviation
		{
			get
			{
				return this.GetTable<V_OrderDocDeviation>();
			}
		}
		
		public System.Data.Linq.Table<V_OrderValidity> V_OrderValidity
		{
			get
			{
				return this.GetTable<V_OrderValidity>();
			}
		}
		
		public System.Data.Linq.Table<V_SPM_AllRoleAsso> V_SPM_AllRoleAsso
		{
			get
			{
				return this.GetTable<V_SPM_AllRoleAsso>();
			}
		}
		
		public System.Data.Linq.Table<V_SPM_AllSubjectRole> V_SPM_AllSubjectRole
		{
			get
			{
				return this.GetTable<V_SPM_AllSubjectRole>();
			}
		}
		
		public System.Data.Linq.Table<V_UserInfo> V_UserInfo
		{
			get
			{
				return this.GetTable<V_UserInfo>();
			}
		}
		
		public System.Data.Linq.Table<VisitException> VisitException
		{
			get
			{
				return this.GetTable<VisitException>();
			}
		}
		
		public System.Data.Linq.Table<VisitRecord> VisitRecord
		{
			get
			{
				return this.GetTable<VisitRecord>();
			}
		}
		
		public System.Data.Linq.Table<VisitSchedule> VisitSchedule
		{
			get
			{
				return this.GetTable<VisitSchedule>();
			}
		}
		
		public System.Data.Linq.Table<VisitSchedulePurposes> VisitSchedulePurposes
		{
			get
			{
				return this.GetTable<VisitSchedulePurposes>();
			}
		}
		
		public System.Data.Linq.Table<VisitTime> VisitTime
		{
			get
			{
				return this.GetTable<VisitTime>();
			}
		}
		
		public System.Data.Linq.Table<WF_Activity> WF_Activity
		{
			get
			{
				return this.GetTable<WF_Activity>();
			}
		}
		
		public System.Data.Linq.Table<WF_Transition> WF_Transition
		{
			get
			{
				return this.GetTable<WF_Transition>();
			}
		}
		
		public System.Data.Linq.Table<WF_Workflow> WF_Workflow
		{
			get
			{
				return this.GetTable<WF_Workflow>();
			}
		}
		
		[Function(Name="dbo.AddWorkDaysToDate", IsComposable=true)]
		public IQueryable<AddWorkDaysToDateResult> AddWorkDaysToDate([Parameter(Name="StartDate", DbType="DateTime")] System.Nullable<System.DateTime> startDate, [Parameter(Name="DaysCnt", DbType="Int")] System.Nullable<int> daysCnt)
		{
			return this.CreateMethodCallQuery<AddWorkDaysToDateResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, daysCnt);
		}
		
		[Function(Name="dbo.blank_BindAndForm")]
		[return: Parameter(DbType="Int")]
		public int Blank_BindAndForm([Parameter(Name="SerialNo", DbType="NVarChar(20)")] string serialNo, [Parameter(Name="Number", DbType="NVarChar(20)")] string number, [Parameter(Name="LicTitle", DbType="NVarChar(20)")] string licTitle)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), serialNo, number, licTitle);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.blank_UnbindAndApportion")]
		[return: Parameter(DbType="Int")]
		public int Blank_UnbindAndApportion([Parameter(Name="SerialNo", DbType="NVarChar(20)")] string serialNo, [Parameter(Name="Number", DbType="NVarChar(20)")] string number)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), serialNo, number);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.blank_UnbindAndDamage")]
		[return: Parameter(DbType="Int")]
		public int Blank_UnbindAndDamage([Parameter(Name="SerialNo", DbType="NVarChar(20)")] string serialNo, [Parameter(Name="Number", DbType="NVarChar(20)")] string number)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), serialNo, number);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Contractor_CreateHistoryVersion")]
		[return: Parameter(DbType="Int")]
		public int Contractor_CreateHistoryVersion([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> guid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), guid);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.DeviationTitle", IsComposable=true)]
		[return: Parameter(DbType="NVarChar(20)")]
		public string DeviationTitle([Parameter(DbType="Int")] System.Nullable<int> dev)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dev).ReturnValue));
		}
		
		[Function(Name="dbo.f_hashbytesMAX", IsComposable=true)]
		[return: Parameter(DbType="VarBinary(16)")]
		public System.Data.Linq.Binary F_hashbytesMAX([Parameter(Name="string", DbType="NVarChar(MAX)")] string @string)
		{
			return ((System.Data.Linq.Binary)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), @string).ReturnValue));
		}
		
		[Function(Name="dbo.FirstWord", IsComposable=true)]
		[return: Parameter(DbType="VarChar(MAX)")]
		public string FirstWord([Parameter(DbType="VarChar(MAX)")] string value)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), value).ReturnValue));
		}
		
		[Function(Name="dbo.fn_diagramobjects", IsComposable=true)]
		[return: Parameter(DbType="Int")]
		public System.Nullable<int> Fn_diagramobjects()
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
		
		[Function(Name="dbo.FTSExport")]
		[ResultType(typeof(FTSExportResult))]
		public IMultipleResults FTSExport([Parameter(DbType="DateTime")] System.Nullable<System.DateTime> startdate, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> finishdate, [Parameter(DbType="NVarChar(MAX)")] string cnids, [Parameter(DbType="NVarChar(MAX)")] string licno, [Parameter(DbType="Int")] System.Nullable<int> datetype)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startdate, finishdate, cnids, licno, datetype);
			return ((IMultipleResults)(result.ReturnValue));
		}
		
		[Function(Name="dbo.FTSExport2010")]
		public ISingleResult<FTSExport2010Result> FTSExport2010([Parameter(DbType="DateTime")] System.Nullable<System.DateTime> startdate, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> finishdate, [Parameter(DbType="NVarChar(MAX)")] string cnids, [Parameter(DbType="NVarChar(MAX)")] string licno, [Parameter(DbType="Int")] System.Nullable<int> datetype)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startdate, finishdate, cnids, licno, datetype);
			return ((ISingleResult<FTSExport2010Result>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.FTSExport2012")]
		public ISingleResult<FTSExport2012Result> FTSExport2012([Parameter(DbType="DateTime")] System.Nullable<System.DateTime> startdate, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> finishdate, [Parameter(DbType="NVarChar(MAX)")] string cnids, [Parameter(DbType="NVarChar(MAX)")] string licno, [Parameter(DbType="Int")] System.Nullable<int> datetype)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startdate, finishdate, cnids, licno, datetype);
			return ((ISingleResult<FTSExport2012Result>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.FTSExportLicInfo")]
		public ISingleResult<FTSExportLicInfoResult> FTSExportLicInfo([Parameter(DbType="DateTime")] System.Nullable<System.DateTime> startdate, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> finishdate, [Parameter(DbType="NVarChar(MAX)")] string cnids, [Parameter(DbType="NVarChar(MAX)")] string licno, [Parameter(DbType="Int")] System.Nullable<int> datetype)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startdate, finishdate, cnids, licno, datetype);
			return ((ISingleResult<FTSExportLicInfoResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.FTSImport_CN")]
		[return: Parameter(DbType="Int")]
		public int FTSImport_CN()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.FTSImport_Country")]
		[return: Parameter(DbType="Int")]
		public int FTSImport_Country()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.FTSImport_CustomHouse")]
		[return: Parameter(DbType="Int")]
		public int FTSImport_CustomHouse()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.getFederalDistrict", IsComposable=true)]
		[return: Parameter(DbType="NVarChar(50)")]
		public string GetFederalDistrict([Parameter(DbType="NVarChar(50)")] string inn)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), inn).ReturnValue));
		}
		
		[Function(Name="dbo.mm_createformfield")]
		[return: Parameter(DbType="Int")]
		public int Mm_createformfield([Parameter(DbType="Int")] System.Nullable<int> propertyid, [Parameter(DbType="Bit")] System.Nullable<bool> l, [Parameter(DbType="Bit")] System.Nullable<bool> e, [Parameter(DbType="Bit")] System.Nullable<bool> v)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), propertyid, l, e, v);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.mm_createproperty")]
		[return: Parameter(DbType="Int")]
		public int Mm_createproperty([Parameter(DbType="NVarChar(255)")] string classname, [Parameter(DbType="NVarChar(255)")] string name, [Parameter(DbType="NVarChar(255)")] string title, [Parameter(DbType="Char(1)")] string type, [Parameter(DbType="NVarChar(255)")] string defaultvalue, [Parameter(DbType="NVarChar(255)")] string refclassname, [Parameter(DbType="Int")] System.Nullable<int> lowerbound, [Parameter(DbType="Int")] System.Nullable<int> upperbound)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), classname, name, title, type, defaultvalue, refclassname, lowerbound, upperbound);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.MM_FormView_CreateHistoryVersion")]
		[return: Parameter(DbType="Int")]
		public int MM_FormView_CreateHistoryVersion([Parameter(DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.N_TimeZone_CreateHistoryVersion")]
		[return: Parameter(DbType="Int")]
		public int N_TimeZone_CreateHistoryVersion([Parameter(DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.SortNumber", IsComposable=true)]
		[return: Parameter(DbType="VarChar(50)")]
		public string SortNumber([Parameter(DbType="VarChar(50)")] string indexnum)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), indexnum).ReturnValue));
		}
		
		[Function(Name="dbo.Split", IsComposable=true)]
		public IQueryable<SplitResult> Split([Parameter(Name="Delimiter", DbType="VarChar(5)")] string delimiter, [Parameter(Name="List", DbType="VarChar(MAX)")] string list)
		{
			return this.CreateMethodCallQuery<SplitResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), delimiter, list);
		}
		
		[Function(Name="dbo.spm_CreateAction")]
		[return: Parameter(DbType="Int")]
		public int Spm_CreateAction([Parameter(DbType="NVarChar(50)")] string objectTypeSysName, [Parameter(DbType="NVarChar(50)")] string methodSysName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), objectTypeSysName, methodSysName);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spm_GetActionID", IsComposable=true)]
		[return: Parameter(DbType="Int")]
		public System.Nullable<int> Spm_GetActionID([Parameter(DbType="NVarChar(50)")] string objectTypeSysName, [Parameter(DbType="NVarChar(50)")] string methodSysName)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), objectTypeSysName, methodSysName).ReturnValue));
		}
		
		[Function(Name="dbo.Trace")]
		[return: Parameter(DbType="Int")]
		public int Trace([Parameter(DbType="NVarChar(50)")] string machinename, [Parameter(DbType="Int")] System.Nullable<int> subjectid, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> orderDocGUID, [Parameter(DbType="NVarChar(MAX)")] string traceText)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), machinename, subjectid, orderDocGUID, traceText);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.UpdateNsi")]
		[return: Parameter(DbType="Int")]
		public int UpdateNsi([Parameter(DbType="Int")] System.Nullable<int> userid, [Parameter(DbType="NVarChar(255)")] string classname)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userid, classname);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.UpdateQuotaUse")]
		[return: Parameter(DbType="Int")]
		public int UpdateQuotaUse([Parameter(Name="QuotaYear", DbType="Int")] System.Nullable<int> quotaYear, [Parameter(Name="ReportDate", DbType="Date")] System.Nullable<System.DateTime> reportDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), quotaYear, reportDate);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.usf_getxml_fts_licensereason", IsComposable=true)]
		[return: Parameter(DbType="VarChar(4000)")]
		public string Usf_getxml_fts_licensereason([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> guid)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), guid).ReturnValue));
		}
		
		[Function(Name="dbo.usf_getxml_licstatus", IsComposable=true)]
		[return: Parameter(DbType="VarChar(50)")]
		public string Usf_getxml_licstatus([Parameter(DbType="Int")] System.Nullable<int> id)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id).ReturnValue));
		}
		
		[Function(Name="dbo.usf_IsCountryGroupChanged", IsComposable=true)]
		[return: Parameter(DbType="Bit")]
		public System.Nullable<bool> Usf_IsCountryGroupChanged([Parameter(DbType="Int")] System.Nullable<int> fcgid)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fcgid).ReturnValue));
		}
		
		[Function(Name="dbo.usp_dbschema")]
		public ISingleResult<Usp_dbschemaResult> Usp_dbschema([Parameter(DbType="Char(10)")] string schema)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schema);
			return ((ISingleResult<Usp_dbschemaResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.usp_Fill_R_FGADocument")]
		[return: Parameter(DbType="Int")]
		public int Usp_Fill_R_FGADocument()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.usp_model")]
		public ISingleResult<Usp_modelResult> Usp_model()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Usp_modelResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.WritePerfomanceStat")]
		[return: Parameter(DbType="Int")]
		public int WritePerfomanceStat([Parameter(Name="Mode", DbType="NVarChar(50)")] string mode, [Parameter(Name="Action", DbType="NVarChar(50)")] string action, [Parameter(Name="MachineName", DbType="NVarChar(50)")] string machineName, [Parameter(Name="RequestType", DbType="NVarChar(10)")] string requestType, [Parameter(Name="TotalSqlRequestCount", DbType="Int")] System.Nullable<int> totalSqlRequestCount, [Parameter(Name="TotalExecutionTime", DbType="Int")] System.Nullable<int> totalExecutionTime, [Parameter(Name="LastAccessDateTime", DbType="DateTime")] System.Nullable<System.DateTime> lastAccessDateTime, [Parameter(Name="TotalRequestContentLength", DbType="BigInt")] System.Nullable<long> totalRequestContentLength)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), mode, action, machineName, requestType, totalSqlRequestCount, totalExecutionTime, lastAccessDateTime, totalRequestContentLength);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Appendix")]
	public partial class Appendix : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AppendixGUID;
		
		private System.Guid _OrderDocGUID;
		
		private string _Title;
		
		private System.Nullable<decimal> _InvoiceCost;
		
		private System.Nullable<decimal> _Discount;
		
		private System.Nullable<int> _CountryID;
		
		private string _Company;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private int _SeqNo;
		
		private System.Nullable<System.Guid> _Guid;
		
		private System.Nullable<decimal> _OldID;
		
		private int _TitlePartsCount;
		
		private EntityRef<C_Country> _Country;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<OrderDoc> _OrderDoc;
		
		private EntitySet<AppendixCommDocs> _AppendixCommDocs;
		
		private EntitySet<AppendixQuantity> _AppendixQuantity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppendixGUIDChanging(System.Guid value);
    partial void OnAppendixGUIDChanged();
    partial void OnOrderDocGUIDChanging(System.Guid value);
    partial void OnOrderDocGUIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnInvoiceCostChanging(System.Nullable<decimal> value);
    partial void OnInvoiceCostChanged();
    partial void OnDiscountChanging(System.Nullable<decimal> value);
    partial void OnDiscountChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnGuidChanging(System.Nullable<System.Guid> value);
    partial void OnGuidChanged();
    partial void OnOldIDChanging(System.Nullable<decimal> value);
    partial void OnOldIDChanged();
    partial void OnTitlePartsCountChanging(int value);
    partial void OnTitlePartsCountChanged();
    #endregion
		
		public Appendix()
		{
			this._Country = default(EntityRef<C_Country>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDoc = default(EntityRef<OrderDoc>);
			this._AppendixCommDocs = new EntitySet<AppendixCommDocs>(new Action<AppendixCommDocs>(this.attach_AppendixCommDocs), new Action<AppendixCommDocs>(this.detach_AppendixCommDocs));
			this._AppendixQuantity = new EntitySet<AppendixQuantity>(new Action<AppendixQuantity>(this.attach_AppendixQuantity), new Action<AppendixQuantity>(this.detach_AppendixQuantity));
			OnCreated();
		}
		
		[Column(Storage="_AppendixGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AppendixGUID
		{
			get
			{
				return this._AppendixGUID;
			}
			set
			{
				if ((this._AppendixGUID != value))
				{
					this.OnAppendixGUIDChanging(value);
					this.SendPropertyChanging();
					this._AppendixGUID = value;
					this.SendPropertyChanged("AppendixGUID");
					this.OnAppendixGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDocGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceCost", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> InvoiceCost
		{
			get
			{
				return this._InvoiceCost;
			}
			set
			{
				if ((this._InvoiceCost != value))
				{
					this.OnInvoiceCostChanging(value);
					this.SendPropertyChanging();
					this._InvoiceCost = value;
					this.SendPropertyChanged("InvoiceCost");
					this.OnInvoiceCostChanged();
				}
			}
		}
		
		[Column(Storage="_Discount", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Company", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_OldID", DbType="Decimal(14,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}
		
		[Column(Storage="_TitlePartsCount", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TitlePartsCount
		{
			get
			{
				return this._TitlePartsCount;
			}
			set
			{
				if ((this._TitlePartsCount != value))
				{
					this.OnTitlePartsCountChanging(value);
					this.SendPropertyChanging();
					this._TitlePartsCount = value;
					this.SendPropertyChanged("TitlePartsCount");
					this.OnTitlePartsCountChanged();
				}
			}
		}
		
		[Association(Name="FK_Appendix_Country", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public C_Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				C_Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Appendix.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Appendix.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="FK_Appendix_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.Appendix.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.Appendix.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_Appendix_OrderDoc", Storage="_OrderDoc", ThisKey="OrderDocGUID", OtherKey="OrderGUID", IsForeignKey=true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value) 
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.AppendixItems.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.AppendixItems.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}
		
		[Association(Name="FK_AppendixCommDocs_Appendix", Storage="_AppendixCommDocs", ThisKey="AppendixGUID", OtherKey="AppendixGUID", DeleteRule="CASCADE")]
		public EntitySet<AppendixCommDocs> AppendixCommDocs
		{
			get
			{
				return this._AppendixCommDocs;
			}
			set
			{
				this._AppendixCommDocs.Assign(value);
			}
		}
		
		[Association(Name="FK_AppendixQuantity_Appendix", Storage="_AppendixQuantity", ThisKey="AppendixGUID", OtherKey="AppendixGUID", DeleteRule="CASCADE")]
		public EntitySet<AppendixQuantity> AppendixQuantity
		{
			get
			{
				return this._AppendixQuantity;
			}
			set
			{
				this._AppendixQuantity.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppendixCommDocs(AppendixCommDocs entity)
		{
			this.SendPropertyChanging();
			entity.Appendix = this;
		}
		
		private void detach_AppendixCommDocs(AppendixCommDocs entity)
		{
			this.SendPropertyChanging();
			entity.Appendix = null;
		}
		
		private void attach_AppendixQuantity(AppendixQuantity entity)
		{
			this.SendPropertyChanging();
			entity.Appendix = this;
		}
		
		private void detach_AppendixQuantity(AppendixQuantity entity)
		{
			this.SendPropertyChanging();
			entity.Appendix = null;
		}
	}
	
	[Table(Name="dbo.AppendixCommDocs")]
	public partial class AppendixCommDocs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AppendixGUID;
		
		private System.Guid _CommDocsGUID;
		
		private EntityRef<Appendix> _Appendix;
		
		private EntityRef<CommodityDocument> _CommDocs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppendixGUIDChanging(System.Guid value);
    partial void OnAppendixGUIDChanged();
    partial void OnCommDocsGUIDChanging(System.Guid value);
    partial void OnCommDocsGUIDChanged();
    #endregion
		
		public AppendixCommDocs()
		{
			this._Appendix = default(EntityRef<Appendix>);
			this._CommDocs = default(EntityRef<CommodityDocument>);
			OnCreated();
		}
		
		[Column(Storage="_AppendixGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AppendixGUID
		{
			get
			{
				return this._AppendixGUID;
			}
			set
			{
				if ((this._AppendixGUID != value))
				{
					if (this._Appendix.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppendixGUIDChanging(value);
					this.SendPropertyChanging();
					this._AppendixGUID = value;
					this.SendPropertyChanged("AppendixGUID");
					this.OnAppendixGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_CommDocsGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CommDocsGUID
		{
			get
			{
				return this._CommDocsGUID;
			}
			set
			{
				if ((this._CommDocsGUID != value))
				{
					if (this._CommDocs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommDocsGUIDChanging(value);
					this.SendPropertyChanging();
					this._CommDocsGUID = value;
					this.SendPropertyChanged("CommDocsGUID");
					this.OnCommDocsGUIDChanged();
				}
			}
		}
		
		[Association(Name="FK_AppendixCommDocs_Appendix", Storage="_Appendix", ThisKey="AppendixGUID", OtherKey="AppendixGUID", IsForeignKey=true, DeleteOnNull=true)]
		public Appendix Appendix
		{
			get
			{
				return this._Appendix.Entity;
			}
			set
			{
				Appendix previousValue = this._Appendix.Entity;
				if (((previousValue != value) 
							|| (this._Appendix.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Appendix.Entity = null;
						previousValue.AppendixCommDocs.Remove(this);
					}
					this._Appendix.Entity = value;
					if ((value != null))
					{
						value.AppendixCommDocs.Add(this);
						this._AppendixGUID = value.AppendixGUID;
					}
					else
					{
						this._AppendixGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Appendix");
				}
			}
		}
		
		[Association(Name="FK_AppendixCommDocs_CommDocs", Storage="_CommDocs", ThisKey="CommDocsGUID", OtherKey="CommodityDocumentGUID", IsForeignKey=true, DeleteOnNull=true)]
		public CommodityDocument CommDocs
		{
			get
			{
				return this._CommDocs.Entity;
			}
			set
			{
				CommodityDocument previousValue = this._CommDocs.Entity;
				if (((previousValue != value) 
							|| (this._CommDocs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommDocs.Entity = null;
						previousValue.AppendixCommDocs.Remove(this);
					}
					this._CommDocs.Entity = value;
					if ((value != null))
					{
						value.AppendixCommDocs.Add(this);
						this._CommDocsGUID = value.CommodityDocumentGUID;
					}
					else
					{
						this._CommDocsGUID = default(System.Guid);
					}
					this.SendPropertyChanged("CommDocs");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AppendixQuantity")]
	public partial class AppendixQuantity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AppendixQuantityID;
		
		private System.Guid _AppendixGUID;
		
		private decimal _ResolvedQuantity;
		
		private int _MeasureID;
		
		private System.Nullable<int> _BoxMeasureID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private System.Nullable<System.Guid> _Guid;
		
		private string _Copy_Measure_Title;
		
		private string _Copy_BoxMeasure_Title;
		
		private EntityRef<Appendix> _Appendix;
		
		private EntityRef<C_Measure> _BoxMeasure;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<C_Measure> _Measure;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppendixQuantityIDChanging(int value);
    partial void OnAppendixQuantityIDChanged();
    partial void OnAppendixGUIDChanging(System.Guid value);
    partial void OnAppendixGUIDChanged();
    partial void OnResolvedQuantityChanging(decimal value);
    partial void OnResolvedQuantityChanged();
    partial void OnMeasureIDChanging(int value);
    partial void OnMeasureIDChanged();
    partial void OnBoxMeasureIDChanging(System.Nullable<int> value);
    partial void OnBoxMeasureIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnGuidChanging(System.Nullable<System.Guid> value);
    partial void OnGuidChanged();
    partial void OnCopy_Measure_TitleChanging(string value);
    partial void OnCopy_Measure_TitleChanged();
    partial void OnCopy_BoxMeasure_TitleChanging(string value);
    partial void OnCopy_BoxMeasure_TitleChanged();
    #endregion
		
		public AppendixQuantity()
		{
			this._Appendix = default(EntityRef<Appendix>);
			this._BoxMeasure = default(EntityRef<C_Measure>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Measure = default(EntityRef<C_Measure>);
			OnCreated();
		}
		
		[Column(Storage="_AppendixQuantityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AppendixQuantityID
		{
			get
			{
				return this._AppendixQuantityID;
			}
			set
			{
				if ((this._AppendixQuantityID != value))
				{
					this.OnAppendixQuantityIDChanging(value);
					this.SendPropertyChanging();
					this._AppendixQuantityID = value;
					this.SendPropertyChanged("AppendixQuantityID");
					this.OnAppendixQuantityIDChanged();
				}
			}
		}
		
		[Column(Storage="_AppendixGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid AppendixGUID
		{
			get
			{
				return this._AppendixGUID;
			}
			set
			{
				if ((this._AppendixGUID != value))
				{
					if (this._Appendix.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppendixGUIDChanging(value);
					this.SendPropertyChanging();
					this._AppendixGUID = value;
					this.SendPropertyChanged("AppendixGUID");
					this.OnAppendixGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_ResolvedQuantity", DbType="Decimal(20,7) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal ResolvedQuantity
		{
			get
			{
				return this._ResolvedQuantity;
			}
			set
			{
				if ((this._ResolvedQuantity != value))
				{
					this.OnResolvedQuantityChanging(value);
					this.SendPropertyChanging();
					this._ResolvedQuantity = value;
					this.SendPropertyChanged("ResolvedQuantity");
					this.OnResolvedQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					if (this._Measure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_BoxMeasureID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> BoxMeasureID
		{
			get
			{
				return this._BoxMeasureID;
			}
			set
			{
				if ((this._BoxMeasureID != value))
				{
					if (this._BoxMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoxMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._BoxMeasureID = value;
					this.SendPropertyChanged("BoxMeasureID");
					this.OnBoxMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_Measure_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_Measure_Title
		{
			get
			{
				return this._Copy_Measure_Title;
			}
			set
			{
				if ((this._Copy_Measure_Title != value))
				{
					this.OnCopy_Measure_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_Measure_Title = value;
					this.SendPropertyChanged("Copy_Measure_Title");
					this.OnCopy_Measure_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_BoxMeasure_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_BoxMeasure_Title
		{
			get
			{
				return this._Copy_BoxMeasure_Title;
			}
			set
			{
				if ((this._Copy_BoxMeasure_Title != value))
				{
					this.OnCopy_BoxMeasure_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_BoxMeasure_Title = value;
					this.SendPropertyChanged("Copy_BoxMeasure_Title");
					this.OnCopy_BoxMeasure_TitleChanged();
				}
			}
		}
		
		[Association(Name="FK_AppendixQuantity_Appendix", Storage="_Appendix", ThisKey="AppendixGUID", OtherKey="AppendixGUID", IsForeignKey=true, DeleteOnNull=true)]
		public Appendix Appendix
		{
			get
			{
				return this._Appendix.Entity;
			}
			set
			{
				Appendix previousValue = this._Appendix.Entity;
				if (((previousValue != value) 
							|| (this._Appendix.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Appendix.Entity = null;
						previousValue.AppendixQuantity.Remove(this);
					}
					this._Appendix.Entity = value;
					if ((value != null))
					{
						value.AppendixQuantity.Add(this);
						this._AppendixGUID = value.AppendixGUID;
					}
					else
					{
						this._AppendixGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Appendix");
				}
			}
		}
		
		[Association(Name="FK_AppendixQuantity_BoxMeasure", Storage="_BoxMeasure", ThisKey="BoxMeasureID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure BoxMeasure
		{
			get
			{
				return this._BoxMeasure.Entity;
			}
			set
			{
				C_Measure previousValue = this._BoxMeasure.Entity;
				if (((previousValue != value) 
							|| (this._BoxMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BoxMeasure.Entity = null;
						previousValue.AppendixQuantity.Remove(this);
					}
					this._BoxMeasure.Entity = value;
					if ((value != null))
					{
						value.AppendixQuantity.Add(this);
						this._BoxMeasureID = value.MeasureID;
					}
					else
					{
						this._BoxMeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BoxMeasure");
				}
			}
		}
		
		[Association(Name="FK_AppendixQuantity_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.AppendixQuantity.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.AppendixQuantity.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_AppendixQuantity_Measure", Storage="_Measure", ThisKey="MeasureID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure Measure
		{
			get
			{
				return this._Measure.Entity;
			}
			set
			{
				C_Measure previousValue = this._Measure.Entity;
				if (((previousValue != value) 
							|| (this._Measure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure.Entity = null;
						previousValue.Measure.Remove(this);
					}
					this._Measure.Entity = value;
					if ((value != null))
					{
						value.Measure.Add(this);
						this._MeasureID = value.MeasureID;
					}
					else
					{
						this._MeasureID = default(int);
					}
					this.SendPropertyChanged("Measure");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Blank")]
	public partial class Blank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BlankGUID;
		
		private System.Nullable<System.Guid> _OrderDocGUID;
		
		private char _Type;
		
		private string _SerialNo;
		
		private string _Title;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<int> _ActivityID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private System.Nullable<int> _RepresentationID;
		
		private bool _IsDublicate;
		
		private System.Nullable<System.DateTime> _DublicateReqDate;
		
		private string _DublicateReqNo;
		
		private string _DublicateReason;
		
		private System.Nullable<int> _DublicateEmployeeID;
		
		private EntityRef<WF_Activity> _Activity;
		
		private EntityRef<Employee> _DublicateEmployee;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<OrderDoc> _OrderDoc;
		
		private EntityRef<Representation> _Representation;
		
		private EntitySet<BlankTransition> _BlankTransition;
		
		private EntitySet<FactForm> _FactForm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlankGUIDChanging(System.Guid value);
    partial void OnBlankGUIDChanged();
    partial void OnOrderDocGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrderDocGUIDChanged();
    partial void OnTypeChanging(char value);
    partial void OnTypeChanged();
    partial void OnSerialNoChanging(string value);
    partial void OnSerialNoChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnActivityIDChanging(System.Nullable<int> value);
    partial void OnActivityIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRepresentationIDChanging(System.Nullable<int> value);
    partial void OnRepresentationIDChanged();
    partial void OnIsDublicateChanging(bool value);
    partial void OnIsDublicateChanged();
    partial void OnDublicateReqDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDublicateReqDateChanged();
    partial void OnDublicateReqNoChanging(string value);
    partial void OnDublicateReqNoChanged();
    partial void OnDublicateReasonChanging(string value);
    partial void OnDublicateReasonChanged();
    partial void OnDublicateEmployeeIDChanging(System.Nullable<int> value);
    partial void OnDublicateEmployeeIDChanged();
    #endregion
		
		public Blank()
		{
			this._Activity = default(EntityRef<WF_Activity>);
			this._DublicateEmployee = default(EntityRef<Employee>);
			this._Employee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDoc = default(EntityRef<OrderDoc>);
			this._Representation = default(EntityRef<Representation>);
			this._BlankTransition = new EntitySet<BlankTransition>(new Action<BlankTransition>(this.attach_BlankTransition), new Action<BlankTransition>(this.detach_BlankTransition));
			this._FactForm = new EntitySet<FactForm>(new Action<FactForm>(this.attach_FactForm), new Action<FactForm>(this.detach_FactForm));
			OnCreated();
		}
		
		[Column(Storage="_BlankGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BlankGUID
		{
			get
			{
				return this._BlankGUID;
			}
			set
			{
				if ((this._BlankGUID != value))
				{
					this.OnBlankGUIDChanging(value);
					this.SendPropertyChanging();
					this._BlankGUID = value;
					this.SendPropertyChanged("BlankGUID");
					this.OnBlankGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDocGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_SerialNo", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SerialNo
		{
			get
			{
				return this._SerialNo;
			}
			set
			{
				if ((this._SerialNo != value))
				{
					this.OnSerialNoChanging(value);
					this.SendPropertyChanging();
					this._SerialNo = value;
					this.SendPropertyChanged("SerialNo");
					this.OnSerialNoChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActivityID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ActivityID = value;
					this.SendPropertyChanged("ActivityID");
					this.OnActivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_RepresentationID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					if (this._Representation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentationID = value;
					this.SendPropertyChanged("RepresentationID");
					this.OnRepresentationIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDublicate", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDublicate
		{
			get
			{
				return this._IsDublicate;
			}
			set
			{
				if ((this._IsDublicate != value))
				{
					this.OnIsDublicateChanging(value);
					this.SendPropertyChanging();
					this._IsDublicate = value;
					this.SendPropertyChanged("IsDublicate");
					this.OnIsDublicateChanged();
				}
			}
		}
		
		[Column(Storage="_DublicateReqDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DublicateReqDate
		{
			get
			{
				return this._DublicateReqDate;
			}
			set
			{
				if ((this._DublicateReqDate != value))
				{
					this.OnDublicateReqDateChanging(value);
					this.SendPropertyChanging();
					this._DublicateReqDate = value;
					this.SendPropertyChanged("DublicateReqDate");
					this.OnDublicateReqDateChanged();
				}
			}
		}
		
		[Column(Storage="_DublicateReqNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DublicateReqNo
		{
			get
			{
				return this._DublicateReqNo;
			}
			set
			{
				if ((this._DublicateReqNo != value))
				{
					this.OnDublicateReqNoChanging(value);
					this.SendPropertyChanging();
					this._DublicateReqNo = value;
					this.SendPropertyChanged("DublicateReqNo");
					this.OnDublicateReqNoChanged();
				}
			}
		}
		
		[Column(Storage="_DublicateReason", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DublicateReason
		{
			get
			{
				return this._DublicateReason;
			}
			set
			{
				if ((this._DublicateReason != value))
				{
					this.OnDublicateReasonChanging(value);
					this.SendPropertyChanging();
					this._DublicateReason = value;
					this.SendPropertyChanged("DublicateReason");
					this.OnDublicateReasonChanged();
				}
			}
		}
		
		[Column(Storage="_DublicateEmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DublicateEmployeeID
		{
			get
			{
				return this._DublicateEmployeeID;
			}
			set
			{
				if ((this._DublicateEmployeeID != value))
				{
					if (this._DublicateEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDublicateEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._DublicateEmployeeID = value;
					this.SendPropertyChanged("DublicateEmployeeID");
					this.OnDublicateEmployeeIDChanged();
				}
			}
		}
		
		[Association(Name="FK_Blank_Activity", Storage="_Activity", ThisKey="ActivityID", OtherKey="ActivityID", IsForeignKey=true)]
		public WF_Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				WF_Activity previousValue = this._Activity.Entity;
				if (((previousValue != value) 
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.Blank.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.Blank.Add(this);
						this._ActivityID = value.ActivityID;
					}
					else
					{
						this._ActivityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}
		
		[Association(Name="FK_Blank_DublicateEmployee", Storage="_DublicateEmployee", ThisKey="DublicateEmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee DublicateEmployee
		{
			get
			{
				return this._DublicateEmployee.Entity;
			}
			set
			{
				Employee previousValue = this._DublicateEmployee.Entity;
				if (((previousValue != value) 
							|| (this._DublicateEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DublicateEmployee.Entity = null;
						previousValue.Blank.Remove(this);
					}
					this._DublicateEmployee.Entity = value;
					if ((value != null))
					{
						value.Blank.Add(this);
						this._DublicateEmployeeID = value.EmployeeID;
					}
					else
					{
						this._DublicateEmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DublicateEmployee");
				}
			}
		}
		
		[Association(Name="FK_Blank_Employee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Blank_Employee.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Blank_Employee.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_Blank_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.Blank.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.Blank.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_Blank_OrderDoc", Storage="_OrderDoc", ThisKey="OrderDocGUID", OtherKey="OrderGUID", IsForeignKey=true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value) 
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.Blanks.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.Blanks.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}
		
		[Association(Name="FK_Blank_Representation", Storage="_Representation", ThisKey="RepresentationID", OtherKey="RepresentationID", IsForeignKey=true)]
		public Representation Representation
		{
			get
			{
				return this._Representation.Entity;
			}
			set
			{
				Representation previousValue = this._Representation.Entity;
				if (((previousValue != value) 
							|| (this._Representation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representation.Entity = null;
						previousValue.Blank.Remove(this);
					}
					this._Representation.Entity = value;
					if ((value != null))
					{
						value.Blank.Add(this);
						this._RepresentationID = value.RepresentationID;
					}
					else
					{
						this._RepresentationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Representation");
				}
			}
		}
		
		[Association(Name="FK_BlankTransition_Parent", Storage="_BlankTransition", ThisKey="BlankGUID", OtherKey="ParentGUID", DeleteRule="CASCADE")]
		public EntitySet<BlankTransition> BlankTransition
		{
			get
			{
				return this._BlankTransition;
			}
			set
			{
				this._BlankTransition.Assign(value);
			}
		}
		
		[Association(Name="FK_FactForm_Blank", Storage="_FactForm", ThisKey="BlankGUID", OtherKey="BlankGUID", DeleteRule="SET NULL")]
		public EntitySet<FactForm> FactForm
		{
			get
			{
				return this._FactForm;
			}
			set
			{
				this._FactForm.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
		
		private void attach_FactForm(FactForm entity)
		{
			this.SendPropertyChanging();
			entity.Blank = this;
		}
		
		private void detach_FactForm(FactForm entity)
		{
			this.SendPropertyChanging();
			entity.Blank = null;
		}
	}
	
	[Table(Name="dbo.BlankTransition")]
	public partial class BlankTransition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlankTransitionID;
		
		private System.DateTime _CreateDate;
		
		private string _Comment;
		
		private bool _IsCurrent;
		
		private bool _IsLast;
		
		private int _SeqNo;
		
		private System.Guid _ParentGUID;
		
		private int _SubjectID;
		
		private int _WorkflowID;
		
		private int _ActivityID;
		
		private int _TransitionID;
		
		private EntityRef<WF_Activity> _Activity;
		
		private EntityRef<Blank> _Parent;
		
		private EntityRef<SPM_Subject> _Subject;
		
		private EntityRef<WF_Transition> _Transition;
		
		private EntityRef<WF_Workflow> _Workflow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlankTransitionIDChanging(int value);
    partial void OnBlankTransitionIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnIsCurrentChanging(bool value);
    partial void OnIsCurrentChanged();
    partial void OnIsLastChanging(bool value);
    partial void OnIsLastChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnParentGUIDChanging(System.Guid value);
    partial void OnParentGUIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnWorkflowIDChanging(int value);
    partial void OnWorkflowIDChanged();
    partial void OnActivityIDChanging(int value);
    partial void OnActivityIDChanged();
    partial void OnTransitionIDChanging(int value);
    partial void OnTransitionIDChanged();
    #endregion
		
		public BlankTransition()
		{
			this._Activity = default(EntityRef<WF_Activity>);
			this._Parent = default(EntityRef<Blank>);
			this._Subject = default(EntityRef<SPM_Subject>);
			this._Transition = default(EntityRef<WF_Transition>);
			this._Workflow = default(EntityRef<WF_Workflow>);
			OnCreated();
		}
		
		[Column(Storage="_BlankTransitionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlankTransitionID
		{
			get
			{
				return this._BlankTransitionID;
			}
			set
			{
				if ((this._BlankTransitionID != value))
				{
					this.OnBlankTransitionIDChanging(value);
					this.SendPropertyChanging();
					this._BlankTransitionID = value;
					this.SendPropertyChanged("BlankTransitionID");
					this.OnBlankTransitionIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_IsCurrent", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsCurrent
		{
			get
			{
				return this._IsCurrent;
			}
			set
			{
				if ((this._IsCurrent != value))
				{
					this.OnIsCurrentChanging(value);
					this.SendPropertyChanging();
					this._IsCurrent = value;
					this.SendPropertyChanged("IsCurrent");
					this.OnIsCurrentChanged();
				}
			}
		}
		
		[Column(Storage="_IsLast", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsLast
		{
			get
			{
				return this._IsLast;
			}
			set
			{
				if ((this._IsLast != value))
				{
					this.OnIsLastChanging(value);
					this.SendPropertyChanging();
					this._IsLast = value;
					this.SendPropertyChanged("IsLast");
					this.OnIsLastChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_ParentGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ParentGUID
		{
			get
			{
				return this._ParentGUID;
			}
			set
			{
				if ((this._ParentGUID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentGUIDChanging(value);
					this.SendPropertyChanging();
					this._ParentGUID = value;
					this.SendPropertyChanged("ParentGUID");
					this.OnParentGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_WorkflowID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int WorkflowID
		{
			get
			{
				return this._WorkflowID;
			}
			set
			{
				if ((this._WorkflowID != value))
				{
					if (this._Workflow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkflowIDChanging(value);
					this.SendPropertyChanging();
					this._WorkflowID = value;
					this.SendPropertyChanged("WorkflowID");
					this.OnWorkflowIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActivityID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ActivityID = value;
					this.SendPropertyChanged("ActivityID");
					this.OnActivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_TransitionID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TransitionID
		{
			get
			{
				return this._TransitionID;
			}
			set
			{
				if ((this._TransitionID != value))
				{
					if (this._Transition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransitionIDChanging(value);
					this.SendPropertyChanging();
					this._TransitionID = value;
					this.SendPropertyChanged("TransitionID");
					this.OnTransitionIDChanged();
				}
			}
		}
		
		[Association(Name="FK_BlankTransition_Activity", Storage="_Activity", ThisKey="ActivityID", OtherKey="ActivityID", IsForeignKey=true)]
		public WF_Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				WF_Activity previousValue = this._Activity.Entity;
				if (((previousValue != value) 
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.BlankTransition.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.BlankTransition.Add(this);
						this._ActivityID = value.ActivityID;
					}
					else
					{
						this._ActivityID = default(int);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}
		
		[Association(Name="FK_BlankTransition_Parent", Storage="_Parent", ThisKey="ParentGUID", OtherKey="BlankGUID", IsForeignKey=true, DeleteOnNull=true)]
		public Blank Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				Blank previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.BlankTransition.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.BlankTransition.Add(this);
						this._ParentGUID = value.BlankGUID;
					}
					else
					{
						this._ParentGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		[Association(Name="FK_BlankTransition_Subject", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.BlankTransition.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.BlankTransition.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[Association(Name="FK_BlankTransition_Transition", Storage="_Transition", ThisKey="TransitionID", OtherKey="TransitionID", IsForeignKey=true)]
		public WF_Transition Transition
		{
			get
			{
				return this._Transition.Entity;
			}
			set
			{
				WF_Transition previousValue = this._Transition.Entity;
				if (((previousValue != value) 
							|| (this._Transition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transition.Entity = null;
						previousValue.BlankTransition.Remove(this);
					}
					this._Transition.Entity = value;
					if ((value != null))
					{
						value.BlankTransition.Add(this);
						this._TransitionID = value.TransitionID;
					}
					else
					{
						this._TransitionID = default(int);
					}
					this.SendPropertyChanged("Transition");
				}
			}
		}
		
		[Association(Name="FK_BlankTransition_Workflow", Storage="_Workflow", ThisKey="WorkflowID", OtherKey="WorkflowID", IsForeignKey=true)]
		public WF_Workflow Workflow
		{
			get
			{
				return this._Workflow.Entity;
			}
			set
			{
				WF_Workflow previousValue = this._Workflow.Entity;
				if (((previousValue != value) 
							|| (this._Workflow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Workflow.Entity = null;
						previousValue.BlankTransition.Remove(this);
					}
					this._Workflow.Entity = value;
					if ((value != null))
					{
						value.BlankTransition.Add(this);
						this._WorkflowID = value.WorkflowID;
					}
					else
					{
						this._WorkflowID = default(int);
					}
					this.SendPropertyChanged("Workflow");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_AnnulmentReason")]
	public partial class C_AnnulmentReason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AnnulmentReasonID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private System.Guid _MasterObjectGUID;
		
		private bool _IsNotice;
		
		private bool _IsDeleted;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<FactAnnulment> _FactAnnulment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnnulmentReasonIDChanging(int value);
    partial void OnAnnulmentReasonIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    partial void OnIsNoticeChanging(bool value);
    partial void OnIsNoticeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public C_AnnulmentReason()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._FactAnnulment = new EntitySet<FactAnnulment>(new Action<FactAnnulment>(this.attach_FactAnnulment), new Action<FactAnnulment>(this.detach_FactAnnulment));
			OnCreated();
		}
		
		[Column(Storage="_AnnulmentReasonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AnnulmentReasonID
		{
			get
			{
				return this._AnnulmentReasonID;
			}
			set
			{
				if ((this._AnnulmentReasonID != value))
				{
					this.OnAnnulmentReasonIDChanging(value);
					this.SendPropertyChanging();
					this._AnnulmentReasonID = value;
					this.SendPropertyChanged("AnnulmentReasonID");
					this.OnAnnulmentReasonIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsNotice", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsNotice
		{
			get
			{
				return this._IsNotice;
			}
			set
			{
				if ((this._IsNotice != value))
				{
					this.OnIsNoticeChanging(value);
					this.SendPropertyChanging();
					this._IsNotice = value;
					this.SendPropertyChanged("IsNotice");
					this.OnIsNoticeChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_C_AnnulmentReason_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_AnnulmentReason.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_AnnulmentReason.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_FactAnnulment_AnnulmentReason", Storage="_FactAnnulment", ThisKey="AnnulmentReasonID", OtherKey="AnnulmentReasonID", DeleteRule="NO ACTION")]
		public EntitySet<FactAnnulment> FactAnnulment
		{
			get
			{
				return this._FactAnnulment;
			}
			set
			{
				this._FactAnnulment.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FactAnnulment(FactAnnulment entity)
		{
			this.SendPropertyChanging();
			entity.AnnulmentReason = this;
		}
		
		private void detach_FactAnnulment(FactAnnulment entity)
		{
			this.SendPropertyChanging();
			entity.AnnulmentReason = null;
		}
	}
	
	[Table(Name="dbo.C_CatalogRestriction")]
	public partial class C_CatalogRestriction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CatalogRestrictionID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private string _SectionNumber;
		
		private bool _RestrictionAttribute;
		
		private string _SortSectionNumber;
		
		private string _DisplayTitle;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<C_CatalogRestrictionCNCategories> _C_CatalogRestrictionCNCategories;
		
		private EntitySet<C_CNGroup> _CNGroups;
		
		private EntitySet<C_LegalDocumentRestrictions> _C_LegalDocumentRestrictions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCatalogRestrictionIDChanging(int value);
    partial void OnCatalogRestrictionIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSectionNumberChanging(string value);
    partial void OnSectionNumberChanged();
    partial void OnRestrictionAttributeChanging(bool value);
    partial void OnRestrictionAttributeChanged();
    partial void OnSortSectionNumberChanging(string value);
    partial void OnSortSectionNumberChanged();
    partial void OnDisplayTitleChanging(string value);
    partial void OnDisplayTitleChanged();
    #endregion
		
		public C_CatalogRestriction()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._C_CatalogRestrictionCNCategories = new EntitySet<C_CatalogRestrictionCNCategories>(new Action<C_CatalogRestrictionCNCategories>(this.attach_C_CatalogRestrictionCNCategories), new Action<C_CatalogRestrictionCNCategories>(this.detach_C_CatalogRestrictionCNCategories));
			this._CNGroups = new EntitySet<C_CNGroup>(new Action<C_CNGroup>(this.attach_CNGroups), new Action<C_CNGroup>(this.detach_CNGroups));
			this._C_LegalDocumentRestrictions = new EntitySet<C_LegalDocumentRestrictions>(new Action<C_LegalDocumentRestrictions>(this.attach_C_LegalDocumentRestrictions), new Action<C_LegalDocumentRestrictions>(this.detach_C_LegalDocumentRestrictions));
			OnCreated();
		}
		
		[Column(Storage="_CatalogRestrictionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CatalogRestrictionID
		{
			get
			{
				return this._CatalogRestrictionID;
			}
			set
			{
				if ((this._CatalogRestrictionID != value))
				{
					this.OnCatalogRestrictionIDChanging(value);
					this.SendPropertyChanging();
					this._CatalogRestrictionID = value;
					this.SendPropertyChanged("CatalogRestrictionID");
					this.OnCatalogRestrictionIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SectionNumber", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SectionNumber
		{
			get
			{
				return this._SectionNumber;
			}
			set
			{
				if ((this._SectionNumber != value))
				{
					this.OnSectionNumberChanging(value);
					this.SendPropertyChanging();
					this._SectionNumber = value;
					this.SendPropertyChanged("SectionNumber");
					this.OnSectionNumberChanged();
				}
			}
		}
		
		[Column(Storage="_RestrictionAttribute", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool RestrictionAttribute
		{
			get
			{
				return this._RestrictionAttribute;
			}
			set
			{
				if ((this._RestrictionAttribute != value))
				{
					this.OnRestrictionAttributeChanging(value);
					this.SendPropertyChanging();
					this._RestrictionAttribute = value;
					this.SendPropertyChanged("RestrictionAttribute");
					this.OnRestrictionAttributeChanged();
				}
			}
		}
		
		[Column(Storage="_SortSectionNumber", AutoSync=AutoSync.Always, DbType="VarChar(50)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="([dbo].[SortNumber]([SectionNumber]))")]
		public string SortSectionNumber
		{
			get
			{
				return this._SortSectionNumber;
			}
			set
			{
				if ((this._SortSectionNumber != value))
				{
					this.OnSortSectionNumberChanging(value);
					this.SendPropertyChanging();
					this._SortSectionNumber = value;
					this.SendPropertyChanged("SortSectionNumber");
					this.OnSortSectionNumberChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayTitle", AutoSync=AutoSync.Always, DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(([SectionNumber]+\' \')+[Title])")]
		public string DisplayTitle
		{
			get
			{
				return this._DisplayTitle;
			}
			set
			{
				if ((this._DisplayTitle != value))
				{
					this.OnDisplayTitleChanging(value);
					this.SendPropertyChanging();
					this._DisplayTitle = value;
					this.SendPropertyChanged("DisplayTitle");
					this.OnDisplayTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CatalogRestriction_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CatalogRestriction.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CatalogRestriction.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_C_CatalogRestrictionCNCategories_C_CatalogRestriction", Storage="_C_CatalogRestrictionCNCategories", ThisKey="CatalogRestrictionID", OtherKey="CatalogRestrictionID", DeleteRule="CASCADE")]
		public EntitySet<C_CatalogRestrictionCNCategories> C_CatalogRestrictionCNCategories
		{
			get
			{
				return this._C_CatalogRestrictionCNCategories;
			}
			set
			{
				this._C_CatalogRestrictionCNCategories.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CNGroup_CatalogRestriction", Storage="_CNGroups", ThisKey="CatalogRestrictionID", OtherKey="CatalogRestrictionID", DeleteRule="NO ACTION")]
		public EntitySet<C_CNGroup> CNGroups
		{
			get
			{
				return this._CNGroups;
			}
			set
			{
				this._CNGroups.Assign(value);
			}
		}
		
		[Association(Name="FK_C_LegalDocumentRestrictions_Restrictions", Storage="_C_LegalDocumentRestrictions", ThisKey="CatalogRestrictionID", OtherKey="RestrictionsID", DeleteRule="CASCADE")]
		public EntitySet<C_LegalDocumentRestrictions> C_LegalDocumentRestrictions
		{
			get
			{
				return this._C_LegalDocumentRestrictions;
			}
			set
			{
				this._C_LegalDocumentRestrictions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_CatalogRestrictionCNCategories(C_CatalogRestrictionCNCategories entity)
		{
			this.SendPropertyChanging();
			entity.C_CatalogRestriction = this;
		}
		
		private void detach_C_CatalogRestrictionCNCategories(C_CatalogRestrictionCNCategories entity)
		{
			this.SendPropertyChanging();
			entity.C_CatalogRestriction = null;
		}
		
		private void attach_CNGroups(C_CNGroup entity)
		{
			this.SendPropertyChanging();
			entity.CatalogRestriction = this;
		}
		
		private void detach_CNGroups(C_CNGroup entity)
		{
			this.SendPropertyChanging();
			entity.CatalogRestriction = null;
		}
		
		private void attach_C_LegalDocumentRestrictions(C_LegalDocumentRestrictions entity)
		{
			this.SendPropertyChanging();
			entity.Restrictions = this;
		}
		
		private void detach_C_LegalDocumentRestrictions(C_LegalDocumentRestrictions entity)
		{
			this.SendPropertyChanging();
			entity.Restrictions = null;
		}
	}
	
	[Table(Name="dbo.C_CatalogRestrictionCNCategories")]
	public partial class C_CatalogRestrictionCNCategories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CatalogRestrictionID;
		
		private int _CNCategoriesID;
		
		private EntityRef<C_CatalogRestriction> _C_CatalogRestriction;
		
		private EntityRef<C_CNCategory> _CNCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCatalogRestrictionIDChanging(int value);
    partial void OnCatalogRestrictionIDChanged();
    partial void OnCNCategoriesIDChanging(int value);
    partial void OnCNCategoriesIDChanged();
    #endregion
		
		public C_CatalogRestrictionCNCategories()
		{
			this._C_CatalogRestriction = default(EntityRef<C_CatalogRestriction>);
			this._CNCategories = default(EntityRef<C_CNCategory>);
			OnCreated();
		}
		
		[Column(Storage="_CatalogRestrictionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CatalogRestrictionID
		{
			get
			{
				return this._CatalogRestrictionID;
			}
			set
			{
				if ((this._CatalogRestrictionID != value))
				{
					if (this._C_CatalogRestriction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCatalogRestrictionIDChanging(value);
					this.SendPropertyChanging();
					this._CatalogRestrictionID = value;
					this.SendPropertyChanged("CatalogRestrictionID");
					this.OnCatalogRestrictionIDChanged();
				}
			}
		}
		
		[Column(Storage="_CNCategoriesID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CNCategoriesID
		{
			get
			{
				return this._CNCategoriesID;
			}
			set
			{
				if ((this._CNCategoriesID != value))
				{
					if (this._CNCategories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoriesIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoriesID = value;
					this.SendPropertyChanged("CNCategoriesID");
					this.OnCNCategoriesIDChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CatalogRestrictionCNCategories_C_CatalogRestriction", Storage="_C_CatalogRestriction", ThisKey="CatalogRestrictionID", OtherKey="CatalogRestrictionID", IsForeignKey=true, DeleteOnNull=true)]
		public C_CatalogRestriction C_CatalogRestriction
		{
			get
			{
				return this._C_CatalogRestriction.Entity;
			}
			set
			{
				C_CatalogRestriction previousValue = this._C_CatalogRestriction.Entity;
				if (((previousValue != value) 
							|| (this._C_CatalogRestriction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_CatalogRestriction.Entity = null;
						previousValue.C_CatalogRestrictionCNCategories.Remove(this);
					}
					this._C_CatalogRestriction.Entity = value;
					if ((value != null))
					{
						value.C_CatalogRestrictionCNCategories.Add(this);
						this._CatalogRestrictionID = value.CatalogRestrictionID;
					}
					else
					{
						this._CatalogRestrictionID = default(int);
					}
					this.SendPropertyChanged("C_CatalogRestriction");
				}
			}
		}
		
		[Association(Name="FK_C_CatalogRestrictionCNCategories_CNCategories", Storage="_CNCategories", ThisKey="CNCategoriesID", OtherKey="CNCategoryID", IsForeignKey=true, DeleteOnNull=true)]
		public C_CNCategory CNCategories
		{
			get
			{
				return this._CNCategories.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._CNCategories.Entity;
				if (((previousValue != value) 
							|| (this._CNCategories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategories.Entity = null;
						previousValue.C_CatalogRestrictionCNCategories.Remove(this);
					}
					this._CNCategories.Entity = value;
					if ((value != null))
					{
						value.C_CatalogRestrictionCNCategories.Add(this);
						this._CNCategoriesID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoriesID = default(int);
					}
					this.SendPropertyChanged("CNCategories");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_CN")]
	public partial class C_CN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CNID;
		
		private string _Code;
		
		private string _Title;
		
		private System.Nullable<int> _MeasureCode1ID;
		
		private System.Nullable<int> _MeasureCode2ID;
		
		private System.Nullable<int> _MeasureCode3ID;
		
		private System.DateTime _EndDate;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _FTSTitle;
		
		private System.Nullable<System.DateTime> _EdictDate;
		
		private string _EdictNo;
		
		private System.DateTime _BeginDate;
		
		private System.Nullable<int> _ParentID;
		
		private System.Guid _MasterObjectGUID;
		
		private System.Nullable<int> _CNTypeID;
		
		private bool _KeepAlive;
		
		private string _DisplayTitleVersion;
		
		private bool _IsDeleted;
		
		private string _DisplayTitle;
		
		private EntityRef<C_CNType> _CNType;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<C_Measure> _MeasureCode1;
		
		private EntityRef<C_Measure> _MeasureCode2;
		
		private EntityRef<C_Measure> _MeasureCode3;
		
		private EntityRef<C_CN> _Parent;
		
		private EntitySet<C_CN> _C_CN_Parent;
		
		private EntitySet<C_CNCategoryCN> _C_CNCategoryCN;
		
		private EntitySet<C_CNGroupCN> _C_CNGroupCN;
		
		private EntitySet<CustomsDeclaration> _CustomsDeclaration;
		
		private EntitySet<ForeignAuthorization> _ForeignAuthorization;
		
		private EntitySet<FullCN> _FullCN;
		
		private EntitySet<FullCN> _FullCN_ParentCN;
		
		private EntitySet<OrderDoc> _OrderDoc;
		
		private EntitySet<SpecificationItem> _SpecificationItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCNIDChanging(int value);
    partial void OnCNIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnMeasureCode1IDChanging(System.Nullable<int> value);
    partial void OnMeasureCode1IDChanged();
    partial void OnMeasureCode2IDChanging(System.Nullable<int> value);
    partial void OnMeasureCode2IDChanged();
    partial void OnMeasureCode3IDChanging(System.Nullable<int> value);
    partial void OnMeasureCode3IDChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnFTSTitleChanging(string value);
    partial void OnFTSTitleChanged();
    partial void OnEdictDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEdictDateChanged();
    partial void OnEdictNoChanging(string value);
    partial void OnEdictNoChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    partial void OnCNTypeIDChanging(System.Nullable<int> value);
    partial void OnCNTypeIDChanged();
    partial void OnKeepAliveChanging(bool value);
    partial void OnKeepAliveChanged();
    partial void OnDisplayTitleVersionChanging(string value);
    partial void OnDisplayTitleVersionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnDisplayTitleChanging(string value);
    partial void OnDisplayTitleChanged();
    #endregion
		
		public C_CN()
		{
			this._CNType = default(EntityRef<C_CNType>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MeasureCode1 = default(EntityRef<C_Measure>);
			this._MeasureCode2 = default(EntityRef<C_Measure>);
			this._MeasureCode3 = default(EntityRef<C_Measure>);
			this._Parent = default(EntityRef<C_CN>);
			this._C_CN_Parent = new EntitySet<C_CN>(new Action<C_CN>(this.attach_C_CN_Parent), new Action<C_CN>(this.detach_C_CN_Parent));
			this._C_CNCategoryCN = new EntitySet<C_CNCategoryCN>(new Action<C_CNCategoryCN>(this.attach_C_CNCategoryCN), new Action<C_CNCategoryCN>(this.detach_C_CNCategoryCN));
			this._C_CNGroupCN = new EntitySet<C_CNGroupCN>(new Action<C_CNGroupCN>(this.attach_C_CNGroupCN), new Action<C_CNGroupCN>(this.detach_C_CNGroupCN));
			this._CustomsDeclaration = new EntitySet<CustomsDeclaration>(new Action<CustomsDeclaration>(this.attach_CustomsDeclaration), new Action<CustomsDeclaration>(this.detach_CustomsDeclaration));
			this._ForeignAuthorization = new EntitySet<ForeignAuthorization>(new Action<ForeignAuthorization>(this.attach_ForeignAuthorization), new Action<ForeignAuthorization>(this.detach_ForeignAuthorization));
			this._FullCN = new EntitySet<FullCN>(new Action<FullCN>(this.attach_FullCN), new Action<FullCN>(this.detach_FullCN));
			this._FullCN_ParentCN = new EntitySet<FullCN>(new Action<FullCN>(this.attach_FullCN_ParentCN), new Action<FullCN>(this.detach_FullCN_ParentCN));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._SpecificationItem = new EntitySet<SpecificationItem>(new Action<SpecificationItem>(this.attach_SpecificationItem), new Action<SpecificationItem>(this.detach_SpecificationItem));
			OnCreated();
		}
		
		[Column(Storage="_CNID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CNID
		{
			get
			{
				return this._CNID;
			}
			set
			{
				if ((this._CNID != value))
				{
					this.OnCNIDChanging(value);
					this.SendPropertyChanging();
					this._CNID = value;
					this.SendPropertyChanged("CNID");
					this.OnCNIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(2048)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureCode1ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MeasureCode1ID
		{
			get
			{
				return this._MeasureCode1ID;
			}
			set
			{
				if ((this._MeasureCode1ID != value))
				{
					if (this._MeasureCode1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureCode1IDChanging(value);
					this.SendPropertyChanging();
					this._MeasureCode1ID = value;
					this.SendPropertyChanged("MeasureCode1ID");
					this.OnMeasureCode1IDChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureCode2ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MeasureCode2ID
		{
			get
			{
				return this._MeasureCode2ID;
			}
			set
			{
				if ((this._MeasureCode2ID != value))
				{
					if (this._MeasureCode2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureCode2IDChanging(value);
					this.SendPropertyChanging();
					this._MeasureCode2ID = value;
					this.SendPropertyChanged("MeasureCode2ID");
					this.OnMeasureCode2IDChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureCode3ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MeasureCode3ID
		{
			get
			{
				return this._MeasureCode3ID;
			}
			set
			{
				if ((this._MeasureCode3ID != value))
				{
					if (this._MeasureCode3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureCode3IDChanging(value);
					this.SendPropertyChanging();
					this._MeasureCode3ID = value;
					this.SendPropertyChanged("MeasureCode3ID");
					this.OnMeasureCode3IDChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_FTSTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FTSTitle
		{
			get
			{
				return this._FTSTitle;
			}
			set
			{
				if ((this._FTSTitle != value))
				{
					this.OnFTSTitleChanging(value);
					this.SendPropertyChanging();
					this._FTSTitle = value;
					this.SendPropertyChanged("FTSTitle");
					this.OnFTSTitleChanged();
				}
			}
		}
		
		[Column(Storage="_EdictDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EdictDate
		{
			get
			{
				return this._EdictDate;
			}
			set
			{
				if ((this._EdictDate != value))
				{
					this.OnEdictDateChanging(value);
					this.SendPropertyChanging();
					this._EdictDate = value;
					this.SendPropertyChanged("EdictDate");
					this.OnEdictDateChanged();
				}
			}
		}
		
		[Column(Storage="_EdictNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string EdictNo
		{
			get
			{
				return this._EdictNo;
			}
			set
			{
				if ((this._EdictNo != value))
				{
					this.OnEdictNoChanging(value);
					this.SendPropertyChanging();
					this._EdictNo = value;
					this.SendPropertyChanged("EdictNo");
					this.OnEdictNoChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_CNTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CNTypeID
		{
			get
			{
				return this._CNTypeID;
			}
			set
			{
				if ((this._CNTypeID != value))
				{
					if (this._CNType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CNTypeID = value;
					this.SendPropertyChanged("CNTypeID");
					this.OnCNTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_KeepAlive", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool KeepAlive
		{
			get
			{
				return this._KeepAlive;
			}
			set
			{
				if ((this._KeepAlive != value))
				{
					this.OnKeepAliveChanging(value);
					this.SendPropertyChanging();
					this._KeepAlive = value;
					this.SendPropertyChanged("KeepAlive");
					this.OnKeepAliveChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayTitleVersion", AutoSync=AutoSync.Always, DbType="NVarChar(2580)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="((((case when [EndDate]>getdate() then \'\' else \'(уст.) \' end+[Code])+\' \')+isnull(" +
			"[Title],\'\'))+case when [EndDate]>getdate() then \'\' else (((\' (\'+CONVERT([nvarcha" +
			"r](255),[BeginDate],(104)))+\'-\')+CONVERT([nvarchar](255),[EndDate],(104)))+\')\' e" +
			"nd)")]
		public string DisplayTitleVersion
		{
			get
			{
				return this._DisplayTitleVersion;
			}
			set
			{
				if ((this._DisplayTitleVersion != value))
				{
					this.OnDisplayTitleVersionChanging(value);
					this.SendPropertyChanging();
					this._DisplayTitleVersion = value;
					this.SendPropertyChanged("DisplayTitleVersion");
					this.OnDisplayTitleVersionChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayTitle", AutoSync=AutoSync.Always, DbType="NVarChar(2059)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(([Code]+\' \')+[Title])")]
		public string DisplayTitle
		{
			get
			{
				return this._DisplayTitle;
			}
			set
			{
				if ((this._DisplayTitle != value))
				{
					this.OnDisplayTitleChanging(value);
					this.SendPropertyChanging();
					this._DisplayTitle = value;
					this.SendPropertyChanged("DisplayTitle");
					this.OnDisplayTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CN_CNType", Storage="_CNType", ThisKey="CNTypeID", OtherKey="CNTypeID", IsForeignKey=true)]
		public C_CNType CNType
		{
			get
			{
				return this._CNType.Entity;
			}
			set
			{
				C_CNType previousValue = this._CNType.Entity;
				if (((previousValue != value) 
							|| (this._CNType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNType.Entity = null;
						previousValue.C_CN.Remove(this);
					}
					this._CNType.Entity = value;
					if ((value != null))
					{
						value.C_CN.Add(this);
						this._CNTypeID = value.CNTypeID;
					}
					else
					{
						this._CNTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CNType");
				}
			}
		}
		
		[Association(Name="FK_C_CN_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CN.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CN.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_C_CN_MeasureCode1", Storage="_MeasureCode1", ThisKey="MeasureCode1ID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure MeasureCode1
		{
			get
			{
				return this._MeasureCode1.Entity;
			}
			set
			{
				C_Measure previousValue = this._MeasureCode1.Entity;
				if (((previousValue != value) 
							|| (this._MeasureCode1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeasureCode1.Entity = null;
						previousValue.C_CN.Remove(this);
					}
					this._MeasureCode1.Entity = value;
					if ((value != null))
					{
						value.C_CN.Add(this);
						this._MeasureCode1ID = value.MeasureID;
					}
					else
					{
						this._MeasureCode1ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MeasureCode1");
				}
			}
		}
		
		[Association(Name="FK_C_CN_MeasureCode2", Storage="_MeasureCode2", ThisKey="MeasureCode2ID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure MeasureCode2
		{
			get
			{
				return this._MeasureCode2.Entity;
			}
			set
			{
				C_Measure previousValue = this._MeasureCode2.Entity;
				if (((previousValue != value) 
							|| (this._MeasureCode2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeasureCode2.Entity = null;
						previousValue.C_CN_MeasureCode2.Remove(this);
					}
					this._MeasureCode2.Entity = value;
					if ((value != null))
					{
						value.C_CN_MeasureCode2.Add(this);
						this._MeasureCode2ID = value.MeasureID;
					}
					else
					{
						this._MeasureCode2ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MeasureCode2");
				}
			}
		}
		
		[Association(Name="FK_C_CN_MeasureCode3", Storage="_MeasureCode3", ThisKey="MeasureCode3ID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure MeasureCode3
		{
			get
			{
				return this._MeasureCode3.Entity;
			}
			set
			{
				C_Measure previousValue = this._MeasureCode3.Entity;
				if (((previousValue != value) 
							|| (this._MeasureCode3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeasureCode3.Entity = null;
						previousValue.C_CN_MeasureCode3.Remove(this);
					}
					this._MeasureCode3.Entity = value;
					if ((value != null))
					{
						value.C_CN_MeasureCode3.Add(this);
						this._MeasureCode3ID = value.MeasureID;
					}
					else
					{
						this._MeasureCode3ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MeasureCode3");
				}
			}
		}
		
		[Association(Name="FK_C_CN_Parent", Storage="_Parent", ThisKey="ParentID", OtherKey="CNID", IsForeignKey=true)]
		public C_CN Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				C_CN previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.C_CN_Parent.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.C_CN_Parent.Add(this);
						this._ParentID = value.CNID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		[Association(Name="FK_C_CN_Parent", Storage="_C_CN_Parent", ThisKey="CNID", OtherKey="ParentID", DeleteRule="NO ACTION")]
		public EntitySet<C_CN> C_CN_Parent
		{
			get
			{
				return this._C_CN_Parent;
			}
			set
			{
				this._C_CN_Parent.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CNCategoryCN_CN", Storage="_C_CNCategoryCN", ThisKey="CNID", OtherKey="CNID", DeleteRule="CASCADE")]
		public EntitySet<C_CNCategoryCN> C_CNCategoryCN
		{
			get
			{
				return this._C_CNCategoryCN;
			}
			set
			{
				this._C_CNCategoryCN.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CNGroupCN_CN", Storage="_C_CNGroupCN", ThisKey="CNID", OtherKey="CNID", DeleteRule="CASCADE")]
		public EntitySet<C_CNGroupCN> C_CNGroupCN
		{
			get
			{
				return this._C_CNGroupCN;
			}
			set
			{
				this._C_CNGroupCN.Assign(value);
			}
		}
		
		[Association(Name="FK_CustomsDeclaration_CN", Storage="_CustomsDeclaration", ThisKey="CNID", OtherKey="CNID", DeleteRule="NO ACTION")]
		public EntitySet<CustomsDeclaration> CustomsDeclaration
		{
			get
			{
				return this._CustomsDeclaration;
			}
			set
			{
				this._CustomsDeclaration.Assign(value);
			}
		}
		
		[Association(Name="FK_ForeignAuthorization_CN", Storage="_ForeignAuthorization", ThisKey="CNID", OtherKey="CNID", DeleteRule="NO ACTION")]
		public EntitySet<ForeignAuthorization> ForeignAuthorization
		{
			get
			{
				return this._ForeignAuthorization;
			}
			set
			{
				this._ForeignAuthorization.Assign(value);
			}
		}
		
		[Association(Name="FK_FullCN_ChildCN", Storage="_FullCN", ThisKey="CNID", OtherKey="ChildCNID", DeleteRule="CASCADE")]
		public EntitySet<FullCN> FullCN
		{
			get
			{
				return this._FullCN;
			}
			set
			{
				this._FullCN.Assign(value);
			}
		}
		
		[Association(Name="FK_FullCN_ParentCN", Storage="_FullCN_ParentCN", ThisKey="CNID", OtherKey="ParentCNID", DeleteRule="NO ACTION")]
		public EntitySet<FullCN> FullCN_ParentCN
		{
			get
			{
				return this._FullCN_ParentCN;
			}
			set
			{
				this._FullCN_ParentCN.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_CN", Storage="_OrderDoc", ThisKey="CNID", OtherKey="CNID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}
		
		[Association(Name="FK_SpecificationItem_CN", Storage="_SpecificationItem", ThisKey="CNID", OtherKey="CNID", DeleteRule="NO ACTION")]
		public EntitySet<SpecificationItem> SpecificationItem
		{
			get
			{
				return this._SpecificationItem;
			}
			set
			{
				this._SpecificationItem.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_CN_Parent(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_C_CN_Parent(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
		
		private void attach_C_CNCategoryCN(C_CNCategoryCN entity)
		{
			this.SendPropertyChanging();
			entity.CN = this;
		}
		
		private void detach_C_CNCategoryCN(C_CNCategoryCN entity)
		{
			this.SendPropertyChanging();
			entity.CN = null;
		}
		
		private void attach_C_CNGroupCN(C_CNGroupCN entity)
		{
			this.SendPropertyChanging();
			entity.CN = this;
		}
		
		private void detach_C_CNGroupCN(C_CNGroupCN entity)
		{
			this.SendPropertyChanging();
			entity.CN = null;
		}
		
		private void attach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.CN = this;
		}
		
		private void detach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.CN = null;
		}
		
		private void attach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.CN = this;
		}
		
		private void detach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.CN = null;
		}
		
		private void attach_FullCN(FullCN entity)
		{
			this.SendPropertyChanging();
			entity.ChildCN = this;
		}
		
		private void detach_FullCN(FullCN entity)
		{
			this.SendPropertyChanging();
			entity.ChildCN = null;
		}
		
		private void attach_FullCN_ParentCN(FullCN entity)
		{
			this.SendPropertyChanging();
			entity.ParentCN = this;
		}
		
		private void detach_FullCN_ParentCN(FullCN entity)
		{
			this.SendPropertyChanging();
			entity.ParentCN = null;
		}
		
		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.CN = this;
		}
		
		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.CN = null;
		}
		
		private void attach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.CN = this;
		}
		
		private void detach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.CN = null;
		}
	}
	
	[Table(Name="dbo.C_CNCategory")]
	public partial class C_CNCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CNCategoryID;
		
		private string _CategoryCode;
		
		private string _Title;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private int _DecimalDigitsCnt;
		
		private System.Nullable<int> _MaxTargetValidityID;
		
		private System.Guid _MasterObjectGUID;
		
		private bool _IsElectronicOrderDocI;
		
		private bool _IsElectronicOrderDocE;
		
		private bool _IsElectronicRECI;
		
		private bool _IsElectronicRECE;

        private bool _IsElectronicLic;

        private bool _IsDeleted;
		
		private EntitySet<C_CatalogRestrictionCNCategories> _C_CatalogRestrictionCNCategories;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<C_MaxTargetValidity> _MaxTargetValidity;
		
		private EntitySet<C_CNCategoryCN> _C_CNCategoryCN;
		
		private EntitySet<C_CNCategoryDocument> _Documents;
		
		private EntitySet<C_CNCategoryItem> _Items;
		
		private EntitySet<C_CNCategoryOperationType> _C_CNCategoryOperationType;
		
		private EntitySet<C_FGACNCategory> _C_FGACNCategory;
		
		private EntitySet<C_LegalDocumentCNCategories> _C_LegalDocumentCNCategories;
		
		private EntitySet<ForeignAuthorization> _ForeignAuthorization;
		
		private EntitySet<OrderDoc> _OrderDoc;
		
		private EntitySet<Quota> _Quota;
		
		private EntitySet<QuotaRedistribution> _QuotaRedistribution;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCNCategoryIDChanging(int value);
    partial void OnCNCategoryIDChanged();
    partial void OnCategoryCodeChanging(string value);
    partial void OnCategoryCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnDecimalDigitsCntChanging(int value);
    partial void OnDecimalDigitsCntChanged();
    partial void OnMaxTargetValidityIDChanging(System.Nullable<int> value);
    partial void OnMaxTargetValidityIDChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    partial void OnIsElectronicOrderDocIChanging(bool value);
    partial void OnIsElectronicOrderDocIChanged();
    partial void OnIsElectronicOrderDocEChanging(bool value);
    partial void OnIsElectronicOrderDocEChanged();
    partial void OnIsElectronicRECIChanging(bool value);
    partial void OnIsElectronicRECIChanged();
    partial void OnIsElectronicRECEChanging(bool value);
    partial void OnIsElectronicRECEChanged();
    partial void OnIsElectronicLicChanging(bool value);
    partial void OnIsElectronicLicChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public C_CNCategory()
		{
			this._C_CatalogRestrictionCNCategories = new EntitySet<C_CatalogRestrictionCNCategories>(new Action<C_CatalogRestrictionCNCategories>(this.attach_C_CatalogRestrictionCNCategories), new Action<C_CatalogRestrictionCNCategories>(this.detach_C_CatalogRestrictionCNCategories));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MaxTargetValidity = default(EntityRef<C_MaxTargetValidity>);
			this._C_CNCategoryCN = new EntitySet<C_CNCategoryCN>(new Action<C_CNCategoryCN>(this.attach_C_CNCategoryCN), new Action<C_CNCategoryCN>(this.detach_C_CNCategoryCN));
			this._Documents = new EntitySet<C_CNCategoryDocument>(new Action<C_CNCategoryDocument>(this.attach_Documents), new Action<C_CNCategoryDocument>(this.detach_Documents));
			this._Items = new EntitySet<C_CNCategoryItem>(new Action<C_CNCategoryItem>(this.attach_Items), new Action<C_CNCategoryItem>(this.detach_Items));
			this._C_CNCategoryOperationType = new EntitySet<C_CNCategoryOperationType>(new Action<C_CNCategoryOperationType>(this.attach_C_CNCategoryOperationType), new Action<C_CNCategoryOperationType>(this.detach_C_CNCategoryOperationType));
			this._C_FGACNCategory = new EntitySet<C_FGACNCategory>(new Action<C_FGACNCategory>(this.attach_C_FGACNCategory), new Action<C_FGACNCategory>(this.detach_C_FGACNCategory));
			this._C_LegalDocumentCNCategories = new EntitySet<C_LegalDocumentCNCategories>(new Action<C_LegalDocumentCNCategories>(this.attach_C_LegalDocumentCNCategories), new Action<C_LegalDocumentCNCategories>(this.detach_C_LegalDocumentCNCategories));
			this._ForeignAuthorization = new EntitySet<ForeignAuthorization>(new Action<ForeignAuthorization>(this.attach_ForeignAuthorization), new Action<ForeignAuthorization>(this.detach_ForeignAuthorization));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._Quota = new EntitySet<Quota>(new Action<Quota>(this.attach_Quota), new Action<Quota>(this.detach_Quota));
			this._QuotaRedistribution = new EntitySet<QuotaRedistribution>(new Action<QuotaRedistribution>(this.attach_QuotaRedistribution), new Action<QuotaRedistribution>(this.detach_QuotaRedistribution));
			OnCreated();
		}
		
		[Column(Storage="_CNCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryCode", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CategoryCode
		{
			get
			{
				return this._CategoryCode;
			}
			set
			{
				if ((this._CategoryCode != value))
				{
					this.OnCategoryCodeChanging(value);
					this.SendPropertyChanging();
					this._CategoryCode = value;
					this.SendPropertyChanged("CategoryCode");
					this.OnCategoryCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_DecimalDigitsCnt", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int DecimalDigitsCnt
		{
			get
			{
				return this._DecimalDigitsCnt;
			}
			set
			{
				if ((this._DecimalDigitsCnt != value))
				{
					this.OnDecimalDigitsCntChanging(value);
					this.SendPropertyChanging();
					this._DecimalDigitsCnt = value;
					this.SendPropertyChanged("DecimalDigitsCnt");
					this.OnDecimalDigitsCntChanged();
				}
			}
		}
		
		[Column(Storage="_MaxTargetValidityID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MaxTargetValidityID
		{
			get
			{
				return this._MaxTargetValidityID;
			}
			set
			{
				if ((this._MaxTargetValidityID != value))
				{
					if (this._MaxTargetValidity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaxTargetValidityIDChanging(value);
					this.SendPropertyChanging();
					this._MaxTargetValidityID = value;
					this.SendPropertyChanged("MaxTargetValidityID");
					this.OnMaxTargetValidityIDChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsElectronicOrderDocI", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsElectronicOrderDocI
		{
			get
			{
				return this._IsElectronicOrderDocI;
			}
			set
			{
				if ((this._IsElectronicOrderDocI != value))
				{
					this.OnIsElectronicOrderDocIChanging(value);
					this.SendPropertyChanging();
					this._IsElectronicOrderDocI = value;
					this.SendPropertyChanged("IsElectronicOrderDocI");
					this.OnIsElectronicOrderDocIChanged();
				}
			}
		}
		
		[Column(Storage="_IsElectronicOrderDocE", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsElectronicOrderDocE
		{
			get
			{
				return this._IsElectronicOrderDocE;
			}
			set
			{
				if ((this._IsElectronicOrderDocE != value))
				{
					this.OnIsElectronicOrderDocEChanging(value);
					this.SendPropertyChanging();
					this._IsElectronicOrderDocE = value;
					this.SendPropertyChanged("IsElectronicOrderDocE");
					this.OnIsElectronicOrderDocEChanged();
				}
			}
		}
		
		[Column(Storage="_IsElectronicRECI", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsElectronicRECI
		{
			get
			{
				return this._IsElectronicRECI;
			}
			set
			{
				if ((this._IsElectronicRECI != value))
				{
					this.OnIsElectronicRECIChanging(value);
					this.SendPropertyChanging();
					this._IsElectronicRECI = value;
					this.SendPropertyChanged("IsElectronicRECI");
					this.OnIsElectronicRECIChanged();
				}
			}
		}
		
		[Column(Storage="_IsElectronicRECE", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsElectronicRECE
		{
			get
			{
				return this._IsElectronicRECE;
			}
			set
			{
				if ((this._IsElectronicRECE != value))
				{
					this.OnIsElectronicRECEChanging(value);
					this.SendPropertyChanging();
					this._IsElectronicRECE = value;
					this.SendPropertyChanged("IsElectronicRECE");
					this.OnIsElectronicRECEChanged();
				}
			}
		}

        [Column(Storage = "_IsElectronicLic", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool IsElectronicLic
        {
            get
            {
                return this._IsElectronicLic;
            }
            set
            {
                if ((this._IsElectronicLic != value))
                {
                    this.OnIsElectronicLicChanging(value);
                    this.SendPropertyChanging();
                    this._IsElectronicLic = value;
                    this.SendPropertyChanged("IsElectronicLic");
                    this.OnIsElectronicLicChanged();
                }
            }
        }

        [Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CatalogRestrictionCNCategories_CNCategories", Storage="_C_CatalogRestrictionCNCategories", ThisKey="CNCategoryID", OtherKey="CNCategoriesID", DeleteRule="CASCADE")]
		public EntitySet<C_CatalogRestrictionCNCategories> C_CatalogRestrictionCNCategories
		{
			get
			{
				return this._C_CatalogRestrictionCNCategories;
			}
			set
			{
				this._C_CatalogRestrictionCNCategories.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CNCategory_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CNCategory.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CNCategory.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_C_CNCategory_MaxTargetValidity", Storage="_MaxTargetValidity", ThisKey="MaxTargetValidityID", OtherKey="MaxTargetValidityID", IsForeignKey=true)]
		public C_MaxTargetValidity MaxTargetValidity
		{
			get
			{
				return this._MaxTargetValidity.Entity;
			}
			set
			{
				C_MaxTargetValidity previousValue = this._MaxTargetValidity.Entity;
				if (((previousValue != value) 
							|| (this._MaxTargetValidity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaxTargetValidity.Entity = null;
						previousValue.C_CNCategory.Remove(this);
					}
					this._MaxTargetValidity.Entity = value;
					if ((value != null))
					{
						value.C_CNCategory.Add(this);
						this._MaxTargetValidityID = value.MaxTargetValidityID;
					}
					else
					{
						this._MaxTargetValidityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MaxTargetValidity");
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryCN_C_CNCategory", Storage="_C_CNCategoryCN", ThisKey="CNCategoryID", OtherKey="CNCategoryID", DeleteRule="CASCADE")]
		public EntitySet<C_CNCategoryCN> C_CNCategoryCN
		{
			get
			{
				return this._C_CNCategoryCN;
			}
			set
			{
				this._C_CNCategoryCN.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CNCategoryDocument_CNCategory", Storage="_Documents", ThisKey="CNCategoryID", OtherKey="CNCategoryID", DeleteRule="NO ACTION")]
		public EntitySet<C_CNCategoryDocument> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CNCategoryItem_CNCategory", Storage="_Items", ThisKey="CNCategoryID", OtherKey="CNCategoryID", DeleteRule="CASCADE")]
		public EntitySet<C_CNCategoryItem> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CNCategoryOperationType_C_CNCategory", Storage="_C_CNCategoryOperationType", ThisKey="CNCategoryID", OtherKey="CNCategoryID", DeleteRule="CASCADE")]
		public EntitySet<C_CNCategoryOperationType> C_CNCategoryOperationType
		{
			get
			{
				return this._C_CNCategoryOperationType;
			}
			set
			{
				this._C_CNCategoryOperationType.Assign(value);
			}
		}
		
		[Association(Name="FK_C_FGACNCategory_CNCategory", Storage="_C_FGACNCategory", ThisKey="CNCategoryID", OtherKey="CNCategoryID", DeleteRule="CASCADE")]
		public EntitySet<C_FGACNCategory> C_FGACNCategory
		{
			get
			{
				return this._C_FGACNCategory;
			}
			set
			{
				this._C_FGACNCategory.Assign(value);
			}
		}
		
		[Association(Name="FK_C_LegalDocumentCNCategories_CNCategories", Storage="_C_LegalDocumentCNCategories", ThisKey="CNCategoryID", OtherKey="CNCategoriesID", DeleteRule="CASCADE")]
		public EntitySet<C_LegalDocumentCNCategories> C_LegalDocumentCNCategories
		{
			get
			{
				return this._C_LegalDocumentCNCategories;
			}
			set
			{
				this._C_LegalDocumentCNCategories.Assign(value);
			}
		}
		
		[Association(Name="FK_ForeignAuthorization_CNCategory", Storage="_ForeignAuthorization", ThisKey="CNCategoryID", OtherKey="CNCategoryID", DeleteRule="NO ACTION")]
		public EntitySet<ForeignAuthorization> ForeignAuthorization
		{
			get
			{
				return this._ForeignAuthorization;
			}
			set
			{
				this._ForeignAuthorization.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_CNCategory", Storage="_OrderDoc", ThisKey="CNCategoryID", OtherKey="CNCategoryID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}
		
		[Association(Name="FK_Quota_CNCategory", Storage="_Quota", ThisKey="CNCategoryID", OtherKey="CNCategoryID", DeleteRule="NO ACTION")]
		public EntitySet<Quota> Quota
		{
			get
			{
				return this._Quota;
			}
			set
			{
				this._Quota.Assign(value);
			}
		}
		
		[Association(Name="FK_QuotaRedistribution_CNCategory", Storage="_QuotaRedistribution", ThisKey="CNCategoryID", OtherKey="CNCategoryID", DeleteRule="NO ACTION")]
		public EntitySet<QuotaRedistribution> QuotaRedistribution
		{
			get
			{
				return this._QuotaRedistribution;
			}
			set
			{
				this._QuotaRedistribution.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_CatalogRestrictionCNCategories(C_CatalogRestrictionCNCategories entity)
		{
			this.SendPropertyChanging();
			entity.CNCategories = this;
		}
		
		private void detach_C_CatalogRestrictionCNCategories(C_CatalogRestrictionCNCategories entity)
		{
			this.SendPropertyChanging();
			entity.CNCategories = null;
		}
		
		private void attach_C_CNCategoryCN(C_CNCategoryCN entity)
		{
			this.SendPropertyChanging();
			entity.C_CNCategory = this;
		}
		
		private void detach_C_CNCategoryCN(C_CNCategoryCN entity)
		{
			this.SendPropertyChanging();
			entity.C_CNCategory = null;
		}
		
		private void attach_Documents(C_CNCategoryDocument entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = this;
		}
		
		private void detach_Documents(C_CNCategoryDocument entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = null;
		}
		
		private void attach_Items(C_CNCategoryItem entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = this;
		}
		
		private void detach_Items(C_CNCategoryItem entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = null;
		}
		
		private void attach_C_CNCategoryOperationType(C_CNCategoryOperationType entity)
		{
			this.SendPropertyChanging();
			entity.C_CNCategory = this;
		}
		
		private void detach_C_CNCategoryOperationType(C_CNCategoryOperationType entity)
		{
			this.SendPropertyChanging();
			entity.C_CNCategory = null;
		}
		
		private void attach_C_FGACNCategory(C_FGACNCategory entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = this;
		}
		
		private void detach_C_FGACNCategory(C_FGACNCategory entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = null;
		}
		
		private void attach_C_LegalDocumentCNCategories(C_LegalDocumentCNCategories entity)
		{
			this.SendPropertyChanging();
			entity.CNCategories = this;
		}
		
		private void detach_C_LegalDocumentCNCategories(C_LegalDocumentCNCategories entity)
		{
			this.SendPropertyChanging();
			entity.CNCategories = null;
		}
		
		private void attach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = this;
		}
		
		private void detach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = null;
		}
		
		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = this;
		}
		
		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = null;
		}
		
		private void attach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = this;
		}
		
		private void detach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = null;
		}
		
		private void attach_QuotaRedistribution(QuotaRedistribution entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = this;
		}
		
		private void detach_QuotaRedistribution(QuotaRedistribution entity)
		{
			this.SendPropertyChanging();
			entity.CNCategory = null;
		}
	}
	
	[Table(Name="dbo.C_CNCategoryCN")]
	public partial class C_CNCategoryCN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CNCategoryID;
		
		private int _CNID;
		
		private EntityRef<C_CNCategory> _C_CNCategory;
		
		private EntityRef<C_CN> _CN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCNCategoryIDChanging(int value);
    partial void OnCNCategoryIDChanged();
    partial void OnCNIDChanging(int value);
    partial void OnCNIDChanged();
    #endregion
		
		public C_CNCategoryCN()
		{
			this._C_CNCategory = default(EntityRef<C_CNCategory>);
			this._CN = default(EntityRef<C_CN>);
			OnCreated();
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					if (this._C_CNCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_CNID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CNID
		{
			get
			{
				return this._CNID;
			}
			set
			{
				if ((this._CNID != value))
				{
					if (this._CN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNIDChanging(value);
					this.SendPropertyChanging();
					this._CNID = value;
					this.SendPropertyChanged("CNID");
					this.OnCNIDChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryCN_C_CNCategory", Storage="_C_CNCategory", ThisKey="CNCategoryID", OtherKey="CNCategoryID", IsForeignKey=true, DeleteOnNull=true)]
		public C_CNCategory C_CNCategory
		{
			get
			{
				return this._C_CNCategory.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._C_CNCategory.Entity;
				if (((previousValue != value) 
							|| (this._C_CNCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_CNCategory.Entity = null;
						previousValue.C_CNCategoryCN.Remove(this);
					}
					this._C_CNCategory.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryCN.Add(this);
						this._CNCategoryID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoryID = default(int);
					}
					this.SendPropertyChanged("C_CNCategory");
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryCN_CN", Storage="_CN", ThisKey="CNID", OtherKey="CNID", IsForeignKey=true, DeleteOnNull=true)]
		public C_CN CN
		{
			get
			{
				return this._CN.Entity;
			}
			set
			{
				C_CN previousValue = this._CN.Entity;
				if (((previousValue != value) 
							|| (this._CN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CN.Entity = null;
						previousValue.C_CNCategoryCN.Remove(this);
					}
					this._CN.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryCN.Add(this);
						this._CNID = value.CNID;
					}
					else
					{
						this._CNID = default(int);
					}
					this.SendPropertyChanged("CN");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_CNCategoryDocument")]
	public partial class C_CNCategoryDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CNCategoryDocumentID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private int _DocumentTypeID;
		
		private bool _IsRequired;
		
		private bool _IsAttach;
		
		private bool _IsCommDoc;
		
		private int _CNCategoryID;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private System.Guid _MasterObjectGUID;
		
		private bool _IsDeleted;

        private int _PassportSeqNo;

        private EntityRef<C_CNCategory> _CNCategory;
		
		private EntityRef<C_DocumentType> _DocumentType;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<C_CNCategoryFGADocument> _C_CNCategoryFGADocument;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCNCategoryDocumentIDChanging(int value);
    partial void OnCNCategoryDocumentIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnDocumentTypeIDChanging(int value);
    partial void OnDocumentTypeIDChanged();
    partial void OnIsRequiredChanging(bool value);
    partial void OnIsRequiredChanged();
    partial void OnIsAttachChanging(bool value);
    partial void OnIsAttachChanged();
    partial void OnIsCommDocChanging(bool value);
    partial void OnIsCommDocChanged();
    partial void OnCNCategoryIDChanging(int value);
    partial void OnCNCategoryIDChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnPassportSeqNoChanging(int value);
    partial void OnPassportSeqNoChanged();
        #endregion

        public C_CNCategoryDocument()
		{
			this._CNCategory = default(EntityRef<C_CNCategory>);
			this._DocumentType = default(EntityRef<C_DocumentType>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._C_CNCategoryFGADocument = new EntitySet<C_CNCategoryFGADocument>(new Action<C_CNCategoryFGADocument>(this.attach_C_CNCategoryFGADocument), new Action<C_CNCategoryFGADocument>(this.detach_C_CNCategoryFGADocument));
			OnCreated();
		}
		
		[Column(Storage="_CNCategoryDocumentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CNCategoryDocumentID
		{
			get
			{
				return this._CNCategoryDocumentID;
			}
			set
			{
				if ((this._CNCategoryDocumentID != value))
				{
					this.OnCNCategoryDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryDocumentID = value;
					this.SendPropertyChanged("CNCategoryDocumentID");
					this.OnCNCategoryDocumentIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int DocumentTypeID
		{
			get
			{
				return this._DocumentTypeID;
			}
			set
			{
				if ((this._DocumentTypeID != value))
				{
					if (this._DocumentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentTypeID = value;
					this.SendPropertyChanged("DocumentTypeID");
					this.OnDocumentTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsRequired", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsRequired
		{
			get
			{
				return this._IsRequired;
			}
			set
			{
				if ((this._IsRequired != value))
				{
					this.OnIsRequiredChanging(value);
					this.SendPropertyChanging();
					this._IsRequired = value;
					this.SendPropertyChanged("IsRequired");
					this.OnIsRequiredChanged();
				}
			}
		}
		
		[Column(Storage="_IsAttach", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsAttach
		{
			get
			{
				return this._IsAttach;
			}
			set
			{
				if ((this._IsAttach != value))
				{
					this.OnIsAttachChanging(value);
					this.SendPropertyChanging();
					this._IsAttach = value;
					this.SendPropertyChanged("IsAttach");
					this.OnIsAttachChanged();
				}
			}
		}
		
		[Column(Storage="_IsCommDoc", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsCommDoc
		{
			get
			{
				return this._IsCommDoc;
			}
			set
			{
				if ((this._IsCommDoc != value))
				{
					this.OnIsCommDocChanging(value);
					this.SendPropertyChanging();
					this._IsCommDoc = value;
					this.SendPropertyChanged("IsCommDoc");
					this.OnIsCommDocChanged();
				}
			}
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					if (this._CNCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
        }

        [Column(Storage = "_PassportSeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PassportSeqNo
        {
            get
            {
                return this._PassportSeqNo;
            }
            set
            {
                if ((this._PassportSeqNo != value))
                {
                    this.OnPassportSeqNoChanging(value);
                    this.SendPropertyChanging();
                    this._PassportSeqNo = value;
                    this.SendPropertyChanged("PassportSeqNo");
                    this.OnPassportSeqNoChanged();
                }
            }
        }

        [Association(Name="FK_C_CNCategoryDocument_CNCategory", Storage="_CNCategory", ThisKey="CNCategoryID", OtherKey="CNCategoryID", IsForeignKey=true)]
		public C_CNCategory CNCategory
		{
			get
			{
				return this._CNCategory.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._CNCategory.Entity;
				if (((previousValue != value) 
							|| (this._CNCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategory.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._CNCategory.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._CNCategoryID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoryID = default(int);
					}
					this.SendPropertyChanged("CNCategory");
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryDocument_DocumentType", Storage="_DocumentType", ThisKey="DocumentTypeID", OtherKey="DocumentTypeID", IsForeignKey=true)]
		public C_DocumentType DocumentType
		{
			get
			{
				return this._DocumentType.Entity;
			}
			set
			{
				C_DocumentType previousValue = this._DocumentType.Entity;
				if (((previousValue != value) 
							|| (this._DocumentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentType.Entity = null;
						previousValue.C_CNCategoryDocument.Remove(this);
					}
					this._DocumentType.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryDocument.Add(this);
						this._DocumentTypeID = value.DocumentTypeID;
					}
					else
					{
						this._DocumentTypeID = default(int);
					}
					this.SendPropertyChanged("DocumentType");
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryDocument_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CNCategoryDocument.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryDocument.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryFGADocument_CNCategoryDocument", Storage="_C_CNCategoryFGADocument", ThisKey="CNCategoryDocumentID", OtherKey="CNCategoryDocumentID", DeleteRule="NO ACTION")]
		public EntitySet<C_CNCategoryFGADocument> C_CNCategoryFGADocument
		{
			get
			{
				return this._C_CNCategoryFGADocument;
			}
			set
			{
				this._C_CNCategoryFGADocument.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_CNCategoryFGADocument(C_CNCategoryFGADocument entity)
		{
			this.SendPropertyChanging();
			entity.CNCategoryDocument = this;
		}
		
		private void detach_C_CNCategoryFGADocument(C_CNCategoryFGADocument entity)
		{
			this.SendPropertyChanging();
			entity.CNCategoryDocument = null;
		}
	}
	
	[Table(Name="dbo.C_CNCategoryFGADocument")]
	public partial class C_CNCategoryFGADocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CNCategoryFGADocumentID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private int _CNCategoryDocumentID;
		
		private int _FGADocumentID;
		
		private bool _IsCommDoc;

		private string _DocNo;
		
		private System.Nullable<System.DateTime> _DocDate;
		
		private bool _IsExclude;

        private int _ReasonSeqNo;

        private EntityRef<C_CNCategoryDocument> _CNCategoryDocument;
		
		private EntityRef<C_FGADocument> _FGADocument;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCNCategoryFGADocumentIDChanging(int value);
    partial void OnCNCategoryFGADocumentIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnCNCategoryDocumentIDChanging(int value);
    partial void OnCNCategoryDocumentIDChanged();
    partial void OnFGADocumentIDChanging(int value);
    partial void OnFGADocumentIDChanged();
    partial void OnIsCommDocChanging(bool value);
    partial void OnIsCommDocChanged();
	partial void OnDocNoChanging(string value);
    partial void OnDocNoChanged();
    partial void OnDocDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDocDateChanged();
    partial void OnIsExcludeChanging(bool value);
    partial void OnIsExcludeChanged();
        partial void OnReasonSeqNoChanging(int value);
        partial void OnReasonSeqNoChanged();
        #endregion

        public C_CNCategoryFGADocument()
		{
			this._CNCategoryDocument = default(EntityRef<C_CNCategoryDocument>);
			this._FGADocument = default(EntityRef<C_FGADocument>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_CNCategoryFGADocumentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CNCategoryFGADocumentID
		{
			get
			{
				return this._CNCategoryFGADocumentID;
			}
			set
			{
				if ((this._CNCategoryFGADocumentID != value))
				{
					this.OnCNCategoryFGADocumentIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryFGADocumentID = value;
					this.SendPropertyChanged("CNCategoryFGADocumentID");
					this.OnCNCategoryFGADocumentIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_CNCategoryDocumentID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CNCategoryDocumentID
		{
			get
			{
				return this._CNCategoryDocumentID;
			}
			set
			{
				if ((this._CNCategoryDocumentID != value))
				{
					if (this._CNCategoryDocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryDocumentID = value;
					this.SendPropertyChanged("CNCategoryDocumentID");
					this.OnCNCategoryDocumentIDChanged();
				}
			}
		}
		
		[Column(Storage="_FGADocumentID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FGADocumentID
		{
			get
			{
				return this._FGADocumentID;
			}
			set
			{
				if ((this._FGADocumentID != value))
				{
					if (this._FGADocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFGADocumentIDChanging(value);
					this.SendPropertyChanging();
					this._FGADocumentID = value;
					this.SendPropertyChanged("FGADocumentID");
					this.OnFGADocumentIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsCommDoc", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsCommDoc
		{
			get
			{
				return this._IsCommDoc;
			}
			set
			{
				if ((this._IsCommDoc != value))
				{
					this.OnIsCommDocChanging(value);
					this.SendPropertyChanging();
					this._IsCommDoc = value;
					this.SendPropertyChanged("IsCommDoc");
					this.OnIsCommDocChanged();
				}
			}
		}
        
		[Column(Storage="_DocNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DocNo
		{
			get
			{
				return this._DocNo;
			}
			set
			{
				if ((this._DocNo != value))
				{
					this.OnDocNoChanging(value);
					this.SendPropertyChanging();
					this._DocNo = value;
					this.SendPropertyChanged("DocNo");
					this.OnDocNoChanged();
				}
			}
		}
		
		[Column(Storage="_DocDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this.OnDocDateChanging(value);
					this.SendPropertyChanging();
					this._DocDate = value;
					this.SendPropertyChanged("DocDate");
					this.OnDocDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsExclude", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsExclude
		{
			get
			{
				return this._IsExclude;
			}
			set
			{
				if ((this._IsExclude != value))
				{
					this.OnIsExcludeChanging(value);
					this.SendPropertyChanging();
					this._IsExclude = value;
					this.SendPropertyChanged("IsExclude");
					this.OnIsExcludeChanged();
				}
			}
        }

        [Column(Storage = "_ReasonSeqNo", DbType = "Int NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ReasonSeqNo
        {
            get
            {
                return this._ReasonSeqNo;
            }
            set
            {
                if ((this._ReasonSeqNo != value))
                {
                    this.OnReasonSeqNoChanging(value);
                    this.SendPropertyChanging();
                    this._ReasonSeqNo = value;
                    this.SendPropertyChanged("ReasonSeqNo");
                    this.OnReasonSeqNoChanged();
                }
            }
        }

        [Association(Name="FK_C_CNCategoryFGADocument_CNCategoryDocument", Storage="_CNCategoryDocument", ThisKey="CNCategoryDocumentID", OtherKey="CNCategoryDocumentID", IsForeignKey=true)]
		public C_CNCategoryDocument CNCategoryDocument
		{
			get
			{
				return this._CNCategoryDocument.Entity;
			}
			set
			{
				C_CNCategoryDocument previousValue = this._CNCategoryDocument.Entity;
				if (((previousValue != value) 
							|| (this._CNCategoryDocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategoryDocument.Entity = null;
						previousValue.C_CNCategoryFGADocument.Remove(this);
					}
					this._CNCategoryDocument.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryFGADocument.Add(this);
						this._CNCategoryDocumentID = value.CNCategoryDocumentID;
					}
					else
					{
						this._CNCategoryDocumentID = default(int);
					}
					this.SendPropertyChanged("CNCategoryDocument");
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryFGADocument_FGADocument", Storage="_FGADocument", ThisKey="FGADocumentID", OtherKey="FGADocumentID", IsForeignKey=true)]
		public C_FGADocument FGADocument
		{
			get
			{
				return this._FGADocument.Entity;
			}
			set
			{
				C_FGADocument previousValue = this._FGADocument.Entity;
				if (((previousValue != value) 
							|| (this._FGADocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FGADocument.Entity = null;
						previousValue.C_CNCategoryFGADocument.Remove(this);
					}
					this._FGADocument.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryFGADocument.Add(this);
						this._FGADocumentID = value.FGADocumentID;
					}
					else
					{
						this._FGADocumentID = default(int);
					}
					this.SendPropertyChanged("FGADocument");
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryFGADocument_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CNCategoryFGADocument.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryFGADocument.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_CNCategoryItem")]
	public partial class C_CNCategoryItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CNCategoryItemID;
		
		private int _MaxValidity;
		
		private bool _IsCalendar;
		
		private int _LicenseTypeID;
		
		private int _CNCategoryID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private bool _IsEnabled;
		
		private int _MaxNotify;
		
		private bool _IsCalendarNotify;
		
		private EntityRef<C_CNCategory> _CNCategory;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<C_LicenseType> _LicenseType;
		
		private EntitySet<C_CNCategoryItemRepresentations> _C_CNCategoryItemRepresentations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCNCategoryItemIDChanging(int value);
    partial void OnCNCategoryItemIDChanged();
    partial void OnMaxValidityChanging(int value);
    partial void OnMaxValidityChanged();
    partial void OnIsCalendarChanging(bool value);
    partial void OnIsCalendarChanged();
    partial void OnLicenseTypeIDChanging(int value);
    partial void OnLicenseTypeIDChanged();
    partial void OnCNCategoryIDChanging(int value);
    partial void OnCNCategoryIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnIsEnabledChanging(bool value);
    partial void OnIsEnabledChanged();
    partial void OnMaxNotifyChanging(int value);
    partial void OnMaxNotifyChanged();
    partial void OnIsCalendarNotifyChanging(bool value);
    partial void OnIsCalendarNotifyChanged();
    #endregion
		
		public C_CNCategoryItem()
		{
			this._CNCategory = default(EntityRef<C_CNCategory>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._LicenseType = default(EntityRef<C_LicenseType>);
			this._C_CNCategoryItemRepresentations = new EntitySet<C_CNCategoryItemRepresentations>(new Action<C_CNCategoryItemRepresentations>(this.attach_C_CNCategoryItemRepresentations), new Action<C_CNCategoryItemRepresentations>(this.detach_C_CNCategoryItemRepresentations));
			OnCreated();
		}
		
		[Column(Storage="_CNCategoryItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CNCategoryItemID
		{
			get
			{
				return this._CNCategoryItemID;
			}
			set
			{
				if ((this._CNCategoryItemID != value))
				{
					this.OnCNCategoryItemIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryItemID = value;
					this.SendPropertyChanged("CNCategoryItemID");
					this.OnCNCategoryItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaxValidity", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MaxValidity
		{
			get
			{
				return this._MaxValidity;
			}
			set
			{
				if ((this._MaxValidity != value))
				{
					this.OnMaxValidityChanging(value);
					this.SendPropertyChanging();
					this._MaxValidity = value;
					this.SendPropertyChanged("MaxValidity");
					this.OnMaxValidityChanged();
				}
			}
		}
		
		[Column(Storage="_IsCalendar", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsCalendar
		{
			get
			{
				return this._IsCalendar;
			}
			set
			{
				if ((this._IsCalendar != value))
				{
					this.OnIsCalendarChanging(value);
					this.SendPropertyChanging();
					this._IsCalendar = value;
					this.SendPropertyChanged("IsCalendar");
					this.OnIsCalendarChanged();
				}
			}
		}
		
		[Column(Storage="_LicenseTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LicenseTypeID
		{
			get
			{
				return this._LicenseTypeID;
			}
			set
			{
				if ((this._LicenseTypeID != value))
				{
					if (this._LicenseType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLicenseTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseTypeID = value;
					this.SendPropertyChanged("LicenseTypeID");
					this.OnLicenseTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					if (this._CNCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnabled", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this.OnIsEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsEnabled = value;
					this.SendPropertyChanged("IsEnabled");
					this.OnIsEnabledChanged();
				}
			}
		}
		
		[Column(Storage="_MaxNotify", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MaxNotify
		{
			get
			{
				return this._MaxNotify;
			}
			set
			{
				if ((this._MaxNotify != value))
				{
					this.OnMaxNotifyChanging(value);
					this.SendPropertyChanging();
					this._MaxNotify = value;
					this.SendPropertyChanged("MaxNotify");
					this.OnMaxNotifyChanged();
				}
			}
		}
		
		[Column(Storage="_IsCalendarNotify", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsCalendarNotify
		{
			get
			{
				return this._IsCalendarNotify;
			}
			set
			{
				if ((this._IsCalendarNotify != value))
				{
					this.OnIsCalendarNotifyChanging(value);
					this.SendPropertyChanging();
					this._IsCalendarNotify = value;
					this.SendPropertyChanged("IsCalendarNotify");
					this.OnIsCalendarNotifyChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryItem_CNCategory", Storage="_CNCategory", ThisKey="CNCategoryID", OtherKey="CNCategoryID", IsForeignKey=true, DeleteOnNull=true)]
		public C_CNCategory CNCategory
		{
			get
			{
				return this._CNCategory.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._CNCategory.Entity;
				if (((previousValue != value) 
							|| (this._CNCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategory.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._CNCategory.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._CNCategoryID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoryID = default(int);
					}
					this.SendPropertyChanged("CNCategory");
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryItem_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CNCategoryItem.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryItem.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryItem_LicenseType", Storage="_LicenseType", ThisKey="LicenseTypeID", OtherKey="LicenseTypeID", IsForeignKey=true)]
		public C_LicenseType LicenseType
		{
			get
			{
				return this._LicenseType.Entity;
			}
			set
			{
				C_LicenseType previousValue = this._LicenseType.Entity;
				if (((previousValue != value) 
							|| (this._LicenseType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LicenseType.Entity = null;
						previousValue.C_CNCategoryItem.Remove(this);
					}
					this._LicenseType.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryItem.Add(this);
						this._LicenseTypeID = value.LicenseTypeID;
					}
					else
					{
						this._LicenseTypeID = default(int);
					}
					this.SendPropertyChanged("LicenseType");
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryItemRepresentations_C_CNCategoryItem", Storage="_C_CNCategoryItemRepresentations", ThisKey="CNCategoryItemID", OtherKey="CNCategoryItemID", DeleteRule="CASCADE")]
		public EntitySet<C_CNCategoryItemRepresentations> C_CNCategoryItemRepresentations
		{
			get
			{
				return this._C_CNCategoryItemRepresentations;
			}
			set
			{
				this._C_CNCategoryItemRepresentations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_CNCategoryItemRepresentations(C_CNCategoryItemRepresentations entity)
		{
			this.SendPropertyChanging();
			entity.C_CNCategoryItem = this;
		}
		
		private void detach_C_CNCategoryItemRepresentations(C_CNCategoryItemRepresentations entity)
		{
			this.SendPropertyChanging();
			entity.C_CNCategoryItem = null;
		}
	}
	
	[Table(Name="dbo.C_CNCategoryItemRepresentations")]
	public partial class C_CNCategoryItemRepresentations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CNCategoryItemID;
		
		private int _RepresentationsID;
		
		private EntityRef<C_CNCategoryItem> _C_CNCategoryItem;
		
		private EntityRef<Representation> _Representations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCNCategoryItemIDChanging(int value);
    partial void OnCNCategoryItemIDChanged();
    partial void OnRepresentationsIDChanging(int value);
    partial void OnRepresentationsIDChanged();
    #endregion
		
		public C_CNCategoryItemRepresentations()
		{
			this._C_CNCategoryItem = default(EntityRef<C_CNCategoryItem>);
			this._Representations = default(EntityRef<Representation>);
			OnCreated();
		}
		
		[Column(Storage="_CNCategoryItemID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CNCategoryItemID
		{
			get
			{
				return this._CNCategoryItemID;
			}
			set
			{
				if ((this._CNCategoryItemID != value))
				{
					if (this._C_CNCategoryItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryItemIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryItemID = value;
					this.SendPropertyChanged("CNCategoryItemID");
					this.OnCNCategoryItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_RepresentationsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RepresentationsID
		{
			get
			{
				return this._RepresentationsID;
			}
			set
			{
				if ((this._RepresentationsID != value))
				{
					if (this._Representations.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentationsIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentationsID = value;
					this.SendPropertyChanged("RepresentationsID");
					this.OnRepresentationsIDChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryItemRepresentations_C_CNCategoryItem", Storage="_C_CNCategoryItem", ThisKey="CNCategoryItemID", OtherKey="CNCategoryItemID", IsForeignKey=true, DeleteOnNull=true)]
		public C_CNCategoryItem C_CNCategoryItem
		{
			get
			{
				return this._C_CNCategoryItem.Entity;
			}
			set
			{
				C_CNCategoryItem previousValue = this._C_CNCategoryItem.Entity;
				if (((previousValue != value) 
							|| (this._C_CNCategoryItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_CNCategoryItem.Entity = null;
						previousValue.C_CNCategoryItemRepresentations.Remove(this);
					}
					this._C_CNCategoryItem.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryItemRepresentations.Add(this);
						this._CNCategoryItemID = value.CNCategoryItemID;
					}
					else
					{
						this._CNCategoryItemID = default(int);
					}
					this.SendPropertyChanged("C_CNCategoryItem");
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryItemRepresentations_Representations", Storage="_Representations", ThisKey="RepresentationsID", OtherKey="RepresentationID", IsForeignKey=true, DeleteOnNull=true)]
		public Representation Representations
		{
			get
			{
				return this._Representations.Entity;
			}
			set
			{
				Representation previousValue = this._Representations.Entity;
				if (((previousValue != value) 
							|| (this._Representations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representations.Entity = null;
						previousValue.C_CNCategoryItemRepresentations.Remove(this);
					}
					this._Representations.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryItemRepresentations.Add(this);
						this._RepresentationsID = value.RepresentationID;
					}
					else
					{
						this._RepresentationsID = default(int);
					}
					this.SendPropertyChanged("Representations");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_CNCategoryOperationType")]
	public partial class C_CNCategoryOperationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CNCategoryID;
		
		private int _OperationTypeID;
		
		private EntityRef<C_CNCategory> _C_CNCategory;
		
		private EntityRef<C_OperationType> _OperationType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCNCategoryIDChanging(int value);
    partial void OnCNCategoryIDChanged();
    partial void OnOperationTypeIDChanging(int value);
    partial void OnOperationTypeIDChanged();
    #endregion
		
		public C_CNCategoryOperationType()
		{
			this._C_CNCategory = default(EntityRef<C_CNCategory>);
			this._OperationType = default(EntityRef<C_OperationType>);
			OnCreated();
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					if (this._C_CNCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_OperationTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					if (this._OperationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._OperationTypeID = value;
					this.SendPropertyChanged("OperationTypeID");
					this.OnOperationTypeIDChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryOperationType_C_CNCategory", Storage="_C_CNCategory", ThisKey="CNCategoryID", OtherKey="CNCategoryID", IsForeignKey=true, DeleteOnNull=true)]
		public C_CNCategory C_CNCategory
		{
			get
			{
				return this._C_CNCategory.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._C_CNCategory.Entity;
				if (((previousValue != value) 
							|| (this._C_CNCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_CNCategory.Entity = null;
						previousValue.C_CNCategoryOperationType.Remove(this);
					}
					this._C_CNCategory.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryOperationType.Add(this);
						this._CNCategoryID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoryID = default(int);
					}
					this.SendPropertyChanged("C_CNCategory");
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryOperationType_OperationType", Storage="_OperationType", ThisKey="OperationTypeID", OtherKey="OperationTypeID", IsForeignKey=true, DeleteOnNull=true)]
		public C_OperationType OperationType
		{
			get
			{
				return this._OperationType.Entity;
			}
			set
			{
				C_OperationType previousValue = this._OperationType.Entity;
				if (((previousValue != value) 
							|| (this._OperationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperationType.Entity = null;
						previousValue.C_CNCategoryOperationType.Remove(this);
					}
					this._OperationType.Entity = value;
					if ((value != null))
					{
						value.C_CNCategoryOperationType.Add(this);
						this._OperationTypeID = value.OperationTypeID;
					}
					else
					{
						this._OperationTypeID = default(int);
					}
					this.SendPropertyChanged("OperationType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_CNGroup")]
	public partial class C_CNGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CNGroupID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private string _GroupNumber;
		
		private System.Nullable<int> _ParentID;
		
		private int _CatalogRestrictionID;
		
		private string _DisplayTitle;
		
		private EntityRef<C_CatalogRestriction> _CatalogRestriction;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<C_CNGroup> _Parent;
		
		private EntitySet<C_CNGroup> _CNGroup;
		
		private EntitySet<C_CNGroupCN> _C_CNGroupCN;
		
		private EntitySet<C_LegalDocumentCNGroups> _C_LegalDocumentCNGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCNGroupIDChanging(int value);
    partial void OnCNGroupIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnGroupNumberChanging(string value);
    partial void OnGroupNumberChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnCatalogRestrictionIDChanging(int value);
    partial void OnCatalogRestrictionIDChanged();
    partial void OnDisplayTitleChanging(string value);
    partial void OnDisplayTitleChanged();
    #endregion
		
		public C_CNGroup()
		{
			this._CatalogRestriction = default(EntityRef<C_CatalogRestriction>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Parent = default(EntityRef<C_CNGroup>);
			this._CNGroup = new EntitySet<C_CNGroup>(new Action<C_CNGroup>(this.attach_CNGroup), new Action<C_CNGroup>(this.detach_CNGroup));
			this._C_CNGroupCN = new EntitySet<C_CNGroupCN>(new Action<C_CNGroupCN>(this.attach_C_CNGroupCN), new Action<C_CNGroupCN>(this.detach_C_CNGroupCN));
			this._C_LegalDocumentCNGroups = new EntitySet<C_LegalDocumentCNGroups>(new Action<C_LegalDocumentCNGroups>(this.attach_C_LegalDocumentCNGroups), new Action<C_LegalDocumentCNGroups>(this.detach_C_LegalDocumentCNGroups));
			OnCreated();
		}
		
		[Column(Storage="_CNGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CNGroupID
		{
			get
			{
				return this._CNGroupID;
			}
			set
			{
				if ((this._CNGroupID != value))
				{
					this.OnCNGroupIDChanging(value);
					this.SendPropertyChanging();
					this._CNGroupID = value;
					this.SendPropertyChanged("CNGroupID");
					this.OnCNGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_GroupNumber", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string GroupNumber
		{
			get
			{
				return this._GroupNumber;
			}
			set
			{
				if ((this._GroupNumber != value))
				{
					this.OnGroupNumberChanging(value);
					this.SendPropertyChanging();
					this._GroupNumber = value;
					this.SendPropertyChanged("GroupNumber");
					this.OnGroupNumberChanged();
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_CatalogRestrictionID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CatalogRestrictionID
		{
			get
			{
				return this._CatalogRestrictionID;
			}
			set
			{
				if ((this._CatalogRestrictionID != value))
				{
					if (this._CatalogRestriction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCatalogRestrictionIDChanging(value);
					this.SendPropertyChanging();
					this._CatalogRestrictionID = value;
					this.SendPropertyChanged("CatalogRestrictionID");
					this.OnCatalogRestrictionIDChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayTitle", AutoSync=AutoSync.Always, DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(([GroupNumber]+\' \')+[Title])")]
		public string DisplayTitle
		{
			get
			{
				return this._DisplayTitle;
			}
			set
			{
				if ((this._DisplayTitle != value))
				{
					this.OnDisplayTitleChanging(value);
					this.SendPropertyChanging();
					this._DisplayTitle = value;
					this.SendPropertyChanged("DisplayTitle");
					this.OnDisplayTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CNGroup_CatalogRestriction", Storage="_CatalogRestriction", ThisKey="CatalogRestrictionID", OtherKey="CatalogRestrictionID", IsForeignKey=true)]
		public C_CatalogRestriction CatalogRestriction
		{
			get
			{
				return this._CatalogRestriction.Entity;
			}
			set
			{
				C_CatalogRestriction previousValue = this._CatalogRestriction.Entity;
				if (((previousValue != value) 
							|| (this._CatalogRestriction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CatalogRestriction.Entity = null;
						previousValue.CNGroups.Remove(this);
					}
					this._CatalogRestriction.Entity = value;
					if ((value != null))
					{
						value.CNGroups.Add(this);
						this._CatalogRestrictionID = value.CatalogRestrictionID;
					}
					else
					{
						this._CatalogRestrictionID = default(int);
					}
					this.SendPropertyChanged("CatalogRestriction");
				}
			}
		}
		
		[Association(Name="FK_C_CNGroup_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CNGroup.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CNGroup.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_C_CNGroup_Parent", Storage="_Parent", ThisKey="ParentID", OtherKey="CNGroupID", IsForeignKey=true)]
		public C_CNGroup Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				C_CNGroup previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.CNGroup.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.CNGroup.Add(this);
						this._ParentID = value.CNGroupID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		[Association(Name="FK_C_CNGroup_Parent", Storage="_CNGroup", ThisKey="CNGroupID", OtherKey="ParentID", DeleteRule="NO ACTION")]
		public EntitySet<C_CNGroup> CNGroup
		{
			get
			{
				return this._CNGroup;
			}
			set
			{
				this._CNGroup.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CNGroupCN_C_CNGroup", Storage="_C_CNGroupCN", ThisKey="CNGroupID", OtherKey="CNGroupID", DeleteRule="CASCADE")]
		public EntitySet<C_CNGroupCN> C_CNGroupCN
		{
			get
			{
				return this._C_CNGroupCN;
			}
			set
			{
				this._C_CNGroupCN.Assign(value);
			}
		}
		
		[Association(Name="FK_C_LegalDocumentCNGroups_CNGroups", Storage="_C_LegalDocumentCNGroups", ThisKey="CNGroupID", OtherKey="CNGroupsID", DeleteRule="CASCADE")]
		public EntitySet<C_LegalDocumentCNGroups> C_LegalDocumentCNGroups
		{
			get
			{
				return this._C_LegalDocumentCNGroups;
			}
			set
			{
				this._C_LegalDocumentCNGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CNGroup(C_CNGroup entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_CNGroup(C_CNGroup entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
		
		private void attach_C_CNGroupCN(C_CNGroupCN entity)
		{
			this.SendPropertyChanging();
			entity.C_CNGroup = this;
		}
		
		private void detach_C_CNGroupCN(C_CNGroupCN entity)
		{
			this.SendPropertyChanging();
			entity.C_CNGroup = null;
		}
		
		private void attach_C_LegalDocumentCNGroups(C_LegalDocumentCNGroups entity)
		{
			this.SendPropertyChanging();
			entity.CNGroups = this;
		}
		
		private void detach_C_LegalDocumentCNGroups(C_LegalDocumentCNGroups entity)
		{
			this.SendPropertyChanging();
			entity.CNGroups = null;
		}
	}
	
	[Table(Name="dbo.C_CNGroupCN")]
	public partial class C_CNGroupCN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CNGroupID;
		
		private int _CNID;
		
		private EntityRef<C_CNGroup> _C_CNGroup;
		
		private EntityRef<C_CN> _CN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCNGroupIDChanging(int value);
    partial void OnCNGroupIDChanged();
    partial void OnCNIDChanging(int value);
    partial void OnCNIDChanged();
    #endregion
		
		public C_CNGroupCN()
		{
			this._C_CNGroup = default(EntityRef<C_CNGroup>);
			this._CN = default(EntityRef<C_CN>);
			OnCreated();
		}
		
		[Column(Storage="_CNGroupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CNGroupID
		{
			get
			{
				return this._CNGroupID;
			}
			set
			{
				if ((this._CNGroupID != value))
				{
					if (this._C_CNGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNGroupIDChanging(value);
					this.SendPropertyChanging();
					this._CNGroupID = value;
					this.SendPropertyChanged("CNGroupID");
					this.OnCNGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_CNID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CNID
		{
			get
			{
				return this._CNID;
			}
			set
			{
				if ((this._CNID != value))
				{
					if (this._CN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNIDChanging(value);
					this.SendPropertyChanging();
					this._CNID = value;
					this.SendPropertyChanged("CNID");
					this.OnCNIDChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CNGroupCN_C_CNGroup", Storage="_C_CNGroup", ThisKey="CNGroupID", OtherKey="CNGroupID", IsForeignKey=true, DeleteOnNull=true)]
		public C_CNGroup C_CNGroup
		{
			get
			{
				return this._C_CNGroup.Entity;
			}
			set
			{
				C_CNGroup previousValue = this._C_CNGroup.Entity;
				if (((previousValue != value) 
							|| (this._C_CNGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_CNGroup.Entity = null;
						previousValue.C_CNGroupCN.Remove(this);
					}
					this._C_CNGroup.Entity = value;
					if ((value != null))
					{
						value.C_CNGroupCN.Add(this);
						this._CNGroupID = value.CNGroupID;
					}
					else
					{
						this._CNGroupID = default(int);
					}
					this.SendPropertyChanged("C_CNGroup");
				}
			}
		}
		
		[Association(Name="FK_C_CNGroupCN_CN", Storage="_CN", ThisKey="CNID", OtherKey="CNID", IsForeignKey=true, DeleteOnNull=true)]
		public C_CN CN
		{
			get
			{
				return this._CN.Entity;
			}
			set
			{
				C_CN previousValue = this._CN.Entity;
				if (((previousValue != value) 
							|| (this._CN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CN.Entity = null;
						previousValue.C_CNGroupCN.Remove(this);
					}
					this._CN.Entity = value;
					if ((value != null))
					{
						value.C_CNGroupCN.Add(this);
						this._CNID = value.CNID;
					}
					else
					{
						this._CNID = default(int);
					}
					this.SendPropertyChanged("CN");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_CNType")]
	public partial class C_CNType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CNTypeID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private EntitySet<C_CN> _C_CN;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCNTypeIDChanging(int value);
    partial void OnCNTypeIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public C_CNType()
		{
			this._C_CN = new EntitySet<C_CN>(new Action<C_CN>(this.attach_C_CN), new Action<C_CN>(this.detach_C_CN));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_CNTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CNTypeID
		{
			get
			{
				return this._CNTypeID;
			}
			set
			{
				if ((this._CNTypeID != value))
				{
					this.OnCNTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CNTypeID = value;
					this.SendPropertyChanged("CNTypeID");
					this.OnCNTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CN_CNType", Storage="_C_CN", ThisKey="CNTypeID", OtherKey="CNTypeID", DeleteRule="NO ACTION")]
		public EntitySet<C_CN> C_CN
		{
			get
			{
				return this._C_CN;
			}
			set
			{
				this._C_CN.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CNType_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CNType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CNType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_CN(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.CNType = this;
		}
		
		private void detach_C_CN(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.CNType = null;
		}
	}
	
	[Table(Name="dbo.C_Country")]
	public partial class C_Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryID;
		
		private string _Code;
		
		private string _Alpha2;
		
		private string _Alpha3;
		
		private string _Title;
		
		private string _ShortTitle;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private System.Guid _MasterObjectGUID;
		
		private bool _KeepAlive;
		
		private string _DisplayTitleVersion;
		
		private bool _IsDeleted;
		
		private string _DisplayTitle;
		
		private EntitySet<Appendix> _Appendix;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<C_CountryGroupCountries> _C_CountryGroupCountries;
		
		private EntitySet<C_CustomHouse> _C_CustomHouse;
		
		private EntitySet<Contractor> _Contractor;
		
		private EntitySet<CustomsDeclaration> _CustomsDeclaration;
		
		private EntitySet<CustomsDeclaration> _Country;
		
		private EntitySet<CustomsDeclaration> _CustomsDeclaration_CountryTo;
		
		private EntitySet<CustomsDeclaration> _CustomsDeclaration_RecipientCountry;
		
		private EntitySet<CustomsDeclaration> _CustomsDeclaration_SenderCountry;
		
		private EntitySet<ForeignAuthorization> _ForeignAuthorization;
		
		private EntitySet<HST_Contractor> _HST_Contractor;
		
		private EntitySet<OrderDoc> _OrderDoc;
		
		private EntitySet<OrderDoc> _OrderDoc_Country2;
		
		private EntitySet<OrderDoc> _OrderDoc_Country3;
		
		private EntitySet<SpecificationItem> _SpecificationItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnAlpha2Changing(string value);
    partial void OnAlpha2Changed();
    partial void OnAlpha3Changing(string value);
    partial void OnAlpha3Changed();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnShortTitleChanging(string value);
    partial void OnShortTitleChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    partial void OnKeepAliveChanging(bool value);
    partial void OnKeepAliveChanged();
    partial void OnDisplayTitleVersionChanging(string value);
    partial void OnDisplayTitleVersionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnDisplayTitleChanging(string value);
    partial void OnDisplayTitleChanged();
    #endregion
		
		public C_Country()
		{
			this._Appendix = new EntitySet<Appendix>(new Action<Appendix>(this.attach_Appendix), new Action<Appendix>(this.detach_Appendix));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._C_CountryGroupCountries = new EntitySet<C_CountryGroupCountries>(new Action<C_CountryGroupCountries>(this.attach_C_CountryGroupCountries), new Action<C_CountryGroupCountries>(this.detach_C_CountryGroupCountries));
			this._C_CustomHouse = new EntitySet<C_CustomHouse>(new Action<C_CustomHouse>(this.attach_C_CustomHouse), new Action<C_CustomHouse>(this.detach_C_CustomHouse));
			this._Contractor = new EntitySet<Contractor>(new Action<Contractor>(this.attach_Contractor), new Action<Contractor>(this.detach_Contractor));
			this._CustomsDeclaration = new EntitySet<CustomsDeclaration>(new Action<CustomsDeclaration>(this.attach_CustomsDeclaration), new Action<CustomsDeclaration>(this.detach_CustomsDeclaration));
			this._Country = new EntitySet<CustomsDeclaration>(new Action<CustomsDeclaration>(this.attach_Country), new Action<CustomsDeclaration>(this.detach_Country));
			this._CustomsDeclaration_CountryTo = new EntitySet<CustomsDeclaration>(new Action<CustomsDeclaration>(this.attach_CustomsDeclaration_CountryTo), new Action<CustomsDeclaration>(this.detach_CustomsDeclaration_CountryTo));
			this._CustomsDeclaration_RecipientCountry = new EntitySet<CustomsDeclaration>(new Action<CustomsDeclaration>(this.attach_CustomsDeclaration_RecipientCountry), new Action<CustomsDeclaration>(this.detach_CustomsDeclaration_RecipientCountry));
			this._CustomsDeclaration_SenderCountry = new EntitySet<CustomsDeclaration>(new Action<CustomsDeclaration>(this.attach_CustomsDeclaration_SenderCountry), new Action<CustomsDeclaration>(this.detach_CustomsDeclaration_SenderCountry));
			this._ForeignAuthorization = new EntitySet<ForeignAuthorization>(new Action<ForeignAuthorization>(this.attach_ForeignAuthorization), new Action<ForeignAuthorization>(this.detach_ForeignAuthorization));
			this._HST_Contractor = new EntitySet<HST_Contractor>(new Action<HST_Contractor>(this.attach_HST_Contractor), new Action<HST_Contractor>(this.detach_HST_Contractor));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._OrderDoc_Country2 = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc_Country2), new Action<OrderDoc>(this.detach_OrderDoc_Country2));
			this._OrderDoc_Country3 = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc_Country3), new Action<OrderDoc>(this.detach_OrderDoc_Country3));
			this._SpecificationItem = new EntitySet<SpecificationItem>(new Action<SpecificationItem>(this.attach_SpecificationItem), new Action<SpecificationItem>(this.detach_SpecificationItem));
			OnCreated();
		}
		
		[Column(Storage="_CountryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Alpha2", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Alpha2
		{
			get
			{
				return this._Alpha2;
			}
			set
			{
				if ((this._Alpha2 != value))
				{
					this.OnAlpha2Changing(value);
					this.SendPropertyChanging();
					this._Alpha2 = value;
					this.SendPropertyChanged("Alpha2");
					this.OnAlpha2Changed();
				}
			}
		}
		
		[Column(Storage="_Alpha3", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Alpha3
		{
			get
			{
				return this._Alpha3;
			}
			set
			{
				if ((this._Alpha3 != value))
				{
					this.OnAlpha3Changing(value);
					this.SendPropertyChanging();
					this._Alpha3 = value;
					this.SendPropertyChanged("Alpha3");
					this.OnAlpha3Changed();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ShortTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShortTitle
		{
			get
			{
				return this._ShortTitle;
			}
			set
			{
				if ((this._ShortTitle != value))
				{
					this.OnShortTitleChanging(value);
					this.SendPropertyChanging();
					this._ShortTitle = value;
					this.SendPropertyChanged("ShortTitle");
					this.OnShortTitleChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_KeepAlive", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool KeepAlive
		{
			get
			{
				return this._KeepAlive;
			}
			set
			{
				if ((this._KeepAlive != value))
				{
					this.OnKeepAliveChanging(value);
					this.SendPropertyChanging();
					this._KeepAlive = value;
					this.SendPropertyChanged("KeepAlive");
					this.OnKeepAliveChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayTitleVersion", AutoSync=AutoSync.Always, DbType="NVarChar(MAX)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression=@"((((case when [EndDate]>getdate() then '' else '(уст.) ' end+isnull([Alpha2],''))+' ')+isnull([ShortTitle],''))+case when [EndDate]>getdate() then '' else (((' ('+CONVERT([nvarchar](255),[BeginDate],(104)))+'-')+CONVERT([nvarchar](255),[EndDate],(104)))+')' end)")]
		public string DisplayTitleVersion
		{
			get
			{
				return this._DisplayTitleVersion;
			}
			set
			{
				if ((this._DisplayTitleVersion != value))
				{
					this.OnDisplayTitleVersionChanging(value);
					this.SendPropertyChanging();
					this._DisplayTitleVersion = value;
					this.SendPropertyChanged("DisplayTitleVersion");
					this.OnDisplayTitleVersionChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayTitle", AutoSync=AutoSync.Always, DbType="NVarChar(MAX)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull([Alpha2]+\' \',\'\')+[ShortTitle])")]
		public string DisplayTitle
		{
			get
			{
				return this._DisplayTitle;
			}
			set
			{
				if ((this._DisplayTitle != value))
				{
					this.OnDisplayTitleChanging(value);
					this.SendPropertyChanging();
					this._DisplayTitle = value;
					this.SendPropertyChanged("DisplayTitle");
					this.OnDisplayTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_Appendix_Country", Storage="_Appendix", ThisKey="CountryID", OtherKey="CountryID", DeleteRule="NO ACTION")]
		public EntitySet<Appendix> Appendix
		{
			get
			{
				return this._Appendix;
			}
			set
			{
				this._Appendix.Assign(value);
			}
		}
		
		[Association(Name="FK_C_Country_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_Country.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_Country.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_C_CountryGroupCountries_Countries", Storage="_C_CountryGroupCountries", ThisKey="CountryID", OtherKey="CountriesID", DeleteRule="CASCADE")]
		public EntitySet<C_CountryGroupCountries> C_CountryGroupCountries
		{
			get
			{
				return this._C_CountryGroupCountries;
			}
			set
			{
				this._C_CountryGroupCountries.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CustomHouse_Country", Storage="_C_CustomHouse", ThisKey="CountryID", OtherKey="CountryID", DeleteRule="NO ACTION")]
		public EntitySet<C_CustomHouse> C_CustomHouse
		{
			get
			{
				return this._C_CustomHouse;
			}
			set
			{
				this._C_CustomHouse.Assign(value);
			}
		}
		
		[Association(Name="FK_Contractor_Country", Storage="_Contractor", ThisKey="CountryID", OtherKey="CountryID", DeleteRule="NO ACTION")]
		public EntitySet<Contractor> Contractor
		{
			get
			{
				return this._Contractor;
			}
			set
			{
				this._Contractor.Assign(value);
			}
		}
		
		[Association(Name="FK_CustomsDeclaration_CountryFrom", Storage="_CustomsDeclaration", ThisKey="CountryID", OtherKey="CountryFromID", DeleteRule="NO ACTION")]
		public EntitySet<CustomsDeclaration> CustomsDeclaration
		{
			get
			{
				return this._CustomsDeclaration;
			}
			set
			{
				this._CustomsDeclaration.Assign(value);
			}
		}
		
		[Association(Name="FK_CustomsDeclaration_CountryOrigin", Storage="_Country", ThisKey="CountryID", OtherKey="CountryOriginID", DeleteRule="NO ACTION")]
		public EntitySet<CustomsDeclaration> Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				this._Country.Assign(value);
			}
		}
		
		[Association(Name="FK_CustomsDeclaration_CountryTo", Storage="_CustomsDeclaration_CountryTo", ThisKey="CountryID", OtherKey="CountryToID", DeleteRule="NO ACTION")]
		public EntitySet<CustomsDeclaration> CustomsDeclaration_CountryTo
		{
			get
			{
				return this._CustomsDeclaration_CountryTo;
			}
			set
			{
				this._CustomsDeclaration_CountryTo.Assign(value);
			}
		}
		
		[Association(Name="FK_CustomsDeclaration_RecipientCountry", Storage="_CustomsDeclaration_RecipientCountry", ThisKey="CountryID", OtherKey="RecipientCountryID", DeleteRule="NO ACTION")]
		public EntitySet<CustomsDeclaration> CustomsDeclaration_RecipientCountry
		{
			get
			{
				return this._CustomsDeclaration_RecipientCountry;
			}
			set
			{
				this._CustomsDeclaration_RecipientCountry.Assign(value);
			}
		}
		
		[Association(Name="FK_CustomsDeclaration_SenderCountry", Storage="_CustomsDeclaration_SenderCountry", ThisKey="CountryID", OtherKey="SenderCountryID", DeleteRule="NO ACTION")]
		public EntitySet<CustomsDeclaration> CustomsDeclaration_SenderCountry
		{
			get
			{
				return this._CustomsDeclaration_SenderCountry;
			}
			set
			{
				this._CustomsDeclaration_SenderCountry.Assign(value);
			}
		}
		
		[Association(Name="FK_ForeignAuthorization_DealerCountry", Storage="_ForeignAuthorization", ThisKey="CountryID", OtherKey="DealerCountryID", DeleteRule="NO ACTION")]
		public EntitySet<ForeignAuthorization> ForeignAuthorization
		{
			get
			{
				return this._ForeignAuthorization;
			}
			set
			{
				this._ForeignAuthorization.Assign(value);
			}
		}
		
		[Association(Name="FK_HST_Contractor_Country", Storage="_HST_Contractor", ThisKey="CountryID", OtherKey="CountryID", DeleteRule="NO ACTION")]
		public EntitySet<HST_Contractor> HST_Contractor
		{
			get
			{
				return this._HST_Contractor;
			}
			set
			{
				this._HST_Contractor.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_Country1", Storage="_OrderDoc", ThisKey="CountryID", OtherKey="Country1ID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_Country2", Storage="_OrderDoc_Country2", ThisKey="CountryID", OtherKey="Country2ID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc_Country2
		{
			get
			{
				return this._OrderDoc_Country2;
			}
			set
			{
				this._OrderDoc_Country2.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_Country3", Storage="_OrderDoc_Country3", ThisKey="CountryID", OtherKey="Country3ID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc_Country3
		{
			get
			{
				return this._OrderDoc_Country3;
			}
			set
			{
				this._OrderDoc_Country3.Assign(value);
			}
		}
		
		[Association(Name="FK_SpecificationItem_Country", Storage="_SpecificationItem", ThisKey="CountryID", OtherKey="CountryID", DeleteRule="NO ACTION")]
		public EntitySet<SpecificationItem> SpecificationItem
		{
			get
			{
				return this._SpecificationItem;
			}
			set
			{
				this._SpecificationItem.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appendix(Appendix entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Appendix(Appendix entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_C_CountryGroupCountries(C_CountryGroupCountries entity)
		{
			this.SendPropertyChanging();
			entity.Countries = this;
		}
		
		private void detach_C_CountryGroupCountries(C_CountryGroupCountries entity)
		{
			this.SendPropertyChanging();
			entity.Countries = null;
		}
		
		private void attach_C_CustomHouse(C_CustomHouse entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_C_CustomHouse(C_CustomHouse entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Contractor(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Contractor(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.CountryFrom = this;
		}
		
		private void detach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.CountryFrom = null;
		}
		
		private void attach_Country(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.CountryOrigin = this;
		}
		
		private void detach_Country(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.CountryOrigin = null;
		}
		
		private void attach_CustomsDeclaration_CountryTo(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.CountryTo = this;
		}
		
		private void detach_CustomsDeclaration_CountryTo(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.CountryTo = null;
		}
		
		private void attach_CustomsDeclaration_RecipientCountry(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.RecipientCountry = this;
		}
		
		private void detach_CustomsDeclaration_RecipientCountry(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.RecipientCountry = null;
		}
		
		private void attach_CustomsDeclaration_SenderCountry(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.SenderCountry = this;
		}
		
		private void detach_CustomsDeclaration_SenderCountry(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.SenderCountry = null;
		}
		
		private void attach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.DealerCountry = this;
		}
		
		private void detach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.DealerCountry = null;
		}
		
		private void attach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Country1 = this;
		}
		
		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Country1 = null;
		}
		
		private void attach_OrderDoc_Country2(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Country2 = this;
		}
		
		private void detach_OrderDoc_Country2(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Country2 = null;
		}
		
		private void attach_OrderDoc_Country3(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Country3 = this;
		}
		
		private void detach_OrderDoc_Country3(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Country3 = null;
		}
		
		private void attach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[Table(Name="dbo.C_CountryGroup")]
	public partial class C_CountryGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryGroupID;
		
		private string _Title;
		
		private bool _IsException;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Code;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private System.Guid _MasterObjectGUID;
		
		private char _GroupType;
		
		private string _ShortTitle;
		
		private string _TitleEng;
		
		private bool _KeepAlive;
		
		private bool _IsDeleted;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<C_CountryGroupCountries> _C_CountryGroupCountries;
		
		private EntitySet<ForeignAuthorization> _ForeignAuthorization;
		
		private EntitySet<OrderDoc> _OrderDoc;
		
		private EntitySet<QuotaDistribution> _QuotaDistribution;
		
		private EntitySet<QuotaRedistribution> _QuotaRedistribution;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryGroupIDChanging(int value);
    partial void OnCountryGroupIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsExceptionChanging(bool value);
    partial void OnIsExceptionChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    partial void OnGroupTypeChanging(char value);
    partial void OnGroupTypeChanged();
    partial void OnShortTitleChanging(string value);
    partial void OnShortTitleChanged();
    partial void OnTitleEngChanging(string value);
    partial void OnTitleEngChanged();
    partial void OnKeepAliveChanging(bool value);
    partial void OnKeepAliveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public C_CountryGroup()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._C_CountryGroupCountries = new EntitySet<C_CountryGroupCountries>(new Action<C_CountryGroupCountries>(this.attach_C_CountryGroupCountries), new Action<C_CountryGroupCountries>(this.detach_C_CountryGroupCountries));
			this._ForeignAuthorization = new EntitySet<ForeignAuthorization>(new Action<ForeignAuthorization>(this.attach_ForeignAuthorization), new Action<ForeignAuthorization>(this.detach_ForeignAuthorization));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._QuotaDistribution = new EntitySet<QuotaDistribution>(new Action<QuotaDistribution>(this.attach_QuotaDistribution), new Action<QuotaDistribution>(this.detach_QuotaDistribution));
			this._QuotaRedistribution = new EntitySet<QuotaRedistribution>(new Action<QuotaRedistribution>(this.attach_QuotaRedistribution), new Action<QuotaRedistribution>(this.detach_QuotaRedistribution));
			OnCreated();
		}
		
		[Column(Storage="_CountryGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryGroupID
		{
			get
			{
				return this._CountryGroupID;
			}
			set
			{
				if ((this._CountryGroupID != value))
				{
					this.OnCountryGroupIDChanging(value);
					this.SendPropertyChanging();
					this._CountryGroupID = value;
					this.SendPropertyChanged("CountryGroupID");
					this.OnCountryGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsException", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsException
		{
			get
			{
				return this._IsException;
			}
			set
			{
				if ((this._IsException != value))
				{
					this.OnIsExceptionChanging(value);
					this.SendPropertyChanging();
					this._IsException = value;
					this.SendPropertyChanged("IsException");
					this.OnIsExceptionChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char GroupType
		{
			get
			{
				return this._GroupType;
			}
			set
			{
				if ((this._GroupType != value))
				{
					this.OnGroupTypeChanging(value);
					this.SendPropertyChanging();
					this._GroupType = value;
					this.SendPropertyChanged("GroupType");
					this.OnGroupTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ShortTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShortTitle
		{
			get
			{
				return this._ShortTitle;
			}
			set
			{
				if ((this._ShortTitle != value))
				{
					this.OnShortTitleChanging(value);
					this.SendPropertyChanging();
					this._ShortTitle = value;
					this.SendPropertyChanged("ShortTitle");
					this.OnShortTitleChanged();
				}
			}
		}
		
		[Column(Storage="_TitleEng", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string TitleEng
		{
			get
			{
				return this._TitleEng;
			}
			set
			{
				if ((this._TitleEng != value))
				{
					this.OnTitleEngChanging(value);
					this.SendPropertyChanging();
					this._TitleEng = value;
					this.SendPropertyChanged("TitleEng");
					this.OnTitleEngChanged();
				}
			}
		}
		
		[Column(Storage="_KeepAlive", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool KeepAlive
		{
			get
			{
				return this._KeepAlive;
			}
			set
			{
				if ((this._KeepAlive != value))
				{
					this.OnKeepAliveChanging(value);
					this.SendPropertyChanging();
					this._KeepAlive = value;
					this.SendPropertyChanged("KeepAlive");
					this.OnKeepAliveChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CountryGroup_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CountryGroup.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CountryGroup.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_C_CountryGroupCountries_C_CountryGroup", Storage="_C_CountryGroupCountries", ThisKey="CountryGroupID", OtherKey="CountryGroupID", DeleteRule="CASCADE")]
		public EntitySet<C_CountryGroupCountries> C_CountryGroupCountries
		{
			get
			{
				return this._C_CountryGroupCountries;
			}
			set
			{
				this._C_CountryGroupCountries.Assign(value);
			}
		}
		
		[Association(Name="FK_ForeignAuthorization_CountryGroup", Storage="_ForeignAuthorization", ThisKey="CountryGroupID", OtherKey="CountryGroupID", DeleteRule="NO ACTION")]
		public EntitySet<ForeignAuthorization> ForeignAuthorization
		{
			get
			{
				return this._ForeignAuthorization;
			}
			set
			{
				this._ForeignAuthorization.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_QuotaCountryGroup", Storage="_OrderDoc", ThisKey="CountryGroupID", OtherKey="QuotaCountryGroupID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}
		
		[Association(Name="FK_QuotaDistribution_CountryGroup", Storage="_QuotaDistribution", ThisKey="CountryGroupID", OtherKey="CountryGroupID", DeleteRule="NO ACTION")]
		public EntitySet<QuotaDistribution> QuotaDistribution
		{
			get
			{
				return this._QuotaDistribution;
			}
			set
			{
				this._QuotaDistribution.Assign(value);
			}
		}
		
		[Association(Name="FK_QuotaRedistribution_CountryGroup", Storage="_QuotaRedistribution", ThisKey="CountryGroupID", OtherKey="CountryGroupID", DeleteRule="NO ACTION")]
		public EntitySet<QuotaRedistribution> QuotaRedistribution
		{
			get
			{
				return this._QuotaRedistribution;
			}
			set
			{
				this._QuotaRedistribution.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_CountryGroupCountries(C_CountryGroupCountries entity)
		{
			this.SendPropertyChanging();
			entity.C_CountryGroup = this;
		}
		
		private void detach_C_CountryGroupCountries(C_CountryGroupCountries entity)
		{
			this.SendPropertyChanging();
			entity.C_CountryGroup = null;
		}
		
		private void attach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.CountryGroup = this;
		}
		
		private void detach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.CountryGroup = null;
		}
		
		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.QuotaCountryGroup = this;
		}
		
		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.QuotaCountryGroup = null;
		}
		
		private void attach_QuotaDistribution(QuotaDistribution entity)
		{
			this.SendPropertyChanging();
			entity.CountryGroup = this;
		}
		
		private void detach_QuotaDistribution(QuotaDistribution entity)
		{
			this.SendPropertyChanging();
			entity.CountryGroup = null;
		}
		
		private void attach_QuotaRedistribution(QuotaRedistribution entity)
		{
			this.SendPropertyChanging();
			entity.CountryGroup = this;
		}
		
		private void detach_QuotaRedistribution(QuotaRedistribution entity)
		{
			this.SendPropertyChanging();
			entity.CountryGroup = null;
		}
	}
	
	[Table(Name="dbo.C_CountryGroupCountries")]
	public partial class C_CountryGroupCountries : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryGroupID;
		
		private int _CountriesID;
		
		private EntityRef<C_CountryGroup> _C_CountryGroup;
		
		private EntityRef<C_Country> _Countries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryGroupIDChanging(int value);
    partial void OnCountryGroupIDChanged();
    partial void OnCountriesIDChanging(int value);
    partial void OnCountriesIDChanged();
    #endregion
		
		public C_CountryGroupCountries()
		{
			this._C_CountryGroup = default(EntityRef<C_CountryGroup>);
			this._Countries = default(EntityRef<C_Country>);
			OnCreated();
		}
		
		[Column(Storage="_CountryGroupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CountryGroupID
		{
			get
			{
				return this._CountryGroupID;
			}
			set
			{
				if ((this._CountryGroupID != value))
				{
					if (this._C_CountryGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryGroupIDChanging(value);
					this.SendPropertyChanging();
					this._CountryGroupID = value;
					this.SendPropertyChanged("CountryGroupID");
					this.OnCountryGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_CountriesID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CountriesID
		{
			get
			{
				return this._CountriesID;
			}
			set
			{
				if ((this._CountriesID != value))
				{
					if (this._Countries.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountriesIDChanging(value);
					this.SendPropertyChanging();
					this._CountriesID = value;
					this.SendPropertyChanged("CountriesID");
					this.OnCountriesIDChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CountryGroupCountries_C_CountryGroup", Storage="_C_CountryGroup", ThisKey="CountryGroupID", OtherKey="CountryGroupID", IsForeignKey=true, DeleteOnNull=true)]
		public C_CountryGroup C_CountryGroup
		{
			get
			{
				return this._C_CountryGroup.Entity;
			}
			set
			{
				C_CountryGroup previousValue = this._C_CountryGroup.Entity;
				if (((previousValue != value) 
							|| (this._C_CountryGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_CountryGroup.Entity = null;
						previousValue.C_CountryGroupCountries.Remove(this);
					}
					this._C_CountryGroup.Entity = value;
					if ((value != null))
					{
						value.C_CountryGroupCountries.Add(this);
						this._CountryGroupID = value.CountryGroupID;
					}
					else
					{
						this._CountryGroupID = default(int);
					}
					this.SendPropertyChanged("C_CountryGroup");
				}
			}
		}
		
		[Association(Name="FK_C_CountryGroupCountries_Countries", Storage="_Countries", ThisKey="CountriesID", OtherKey="CountryID", IsForeignKey=true, DeleteOnNull=true)]
		public C_Country Countries
		{
			get
			{
				return this._Countries.Entity;
			}
			set
			{
				C_Country previousValue = this._Countries.Entity;
				if (((previousValue != value) 
							|| (this._Countries.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Countries.Entity = null;
						previousValue.C_CountryGroupCountries.Remove(this);
					}
					this._Countries.Entity = value;
					if ((value != null))
					{
						value.C_CountryGroupCountries.Add(this);
						this._CountriesID = value.CountryID;
					}
					else
					{
						this._CountriesID = default(int);
					}
					this.SendPropertyChanged("Countries");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_Crypto")]
	public partial class C_Crypto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CryptoID;
		
		private System.Nullable<System.DateTime> _CancelDate;
		
		private string _ExternalID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _No;
		
		private string _Producer;
		
		private string _Status;
		
		private string _Title;
		
		private System.Nullable<System.DateTime> _Validity;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCryptoIDChanging(int value);
    partial void OnCryptoIDChanged();
    partial void OnCancelDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCancelDateChanged();
    partial void OnExternalIDChanging(string value);
    partial void OnExternalIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnNoChanging(string value);
    partial void OnNoChanged();
    partial void OnProducerChanging(string value);
    partial void OnProducerChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnValidityChanging(System.Nullable<System.DateTime> value);
    partial void OnValidityChanged();
    #endregion
		
		public C_Crypto()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_CryptoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CryptoID
		{
			get
			{
				return this._CryptoID;
			}
			set
			{
				if ((this._CryptoID != value))
				{
					this.OnCryptoIDChanging(value);
					this.SendPropertyChanging();
					this._CryptoID = value;
					this.SendPropertyChanged("CryptoID");
					this.OnCryptoIDChanged();
				}
			}
		}
		
		[Column(Storage="_CancelDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CancelDate
		{
			get
			{
				return this._CancelDate;
			}
			set
			{
				if ((this._CancelDate != value))
				{
					this.OnCancelDateChanging(value);
					this.SendPropertyChanging();
					this._CancelDate = value;
					this.SendPropertyChanged("CancelDate");
					this.OnCancelDateChanged();
				}
			}
		}
		
		[Column(Storage="_ExternalID", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ExternalID
		{
			get
			{
				return this._ExternalID;
			}
			set
			{
				if ((this._ExternalID != value))
				{
					this.OnExternalIDChanging(value);
					this.SendPropertyChanging();
					this._ExternalID = value;
					this.SendPropertyChanged("ExternalID");
					this.OnExternalIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_No", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string No
		{
			get
			{
				return this._No;
			}
			set
			{
				if ((this._No != value))
				{
					this.OnNoChanging(value);
					this.SendPropertyChanging();
					this._No = value;
					this.SendPropertyChanged("No");
					this.OnNoChanged();
				}
			}
		}
		
		[Column(Storage="_Producer", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Producer
		{
			get
			{
				return this._Producer;
			}
			set
			{
				if ((this._Producer != value))
				{
					this.OnProducerChanging(value);
					this.SendPropertyChanging();
					this._Producer = value;
					this.SendPropertyChanged("Producer");
					this.OnProducerChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Validity", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Validity
		{
			get
			{
				return this._Validity;
			}
			set
			{
				if ((this._Validity != value))
				{
					this.OnValidityChanging(value);
					this.SendPropertyChanging();
					this._Validity = value;
					this.SendPropertyChanged("Validity");
					this.OnValidityChanged();
				}
			}
		}
		
		[Association(Name="FK_C_Crypto_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_Crypto.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_Crypto.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_Currency")]
	public partial class C_Currency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CurrencyID;
		
		private string _Code;
		
		private string _Title;
		
		private string _Prefix;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private System.Guid _MasterObjectGUID;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<OrderDoc> _OrderDoc;
		
		private EntitySet<SpecificationCommon> _SpecificationCommon;
		
		private EntitySet<SpecificationItem> _SpecificationItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCurrencyIDChanging(int value);
    partial void OnCurrencyIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPrefixChanging(string value);
    partial void OnPrefixChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    #endregion
		
		public C_Currency()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._SpecificationCommon = new EntitySet<SpecificationCommon>(new Action<SpecificationCommon>(this.attach_SpecificationCommon), new Action<SpecificationCommon>(this.detach_SpecificationCommon));
			this._SpecificationItem = new EntitySet<SpecificationItem>(new Action<SpecificationItem>(this.attach_SpecificationItem), new Action<SpecificationItem>(this.detach_SpecificationItem));
			OnCreated();
		}
		
		[Column(Storage="_CurrencyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Prefix", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Prefix
		{
			get
			{
				return this._Prefix;
			}
			set
			{
				if ((this._Prefix != value))
				{
					this.OnPrefixChanging(value);
					this.SendPropertyChanging();
					this._Prefix = value;
					this.SendPropertyChanged("Prefix");
					this.OnPrefixChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]<getdate() then (1) else (0) end,(0)),(0" +
			")))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Association(Name="FK_C_Currency_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_Currency.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_Currency.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_PaymentCurrency", Storage="_OrderDoc", ThisKey="CurrencyID", OtherKey="PaymentCurrencyID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}
		
		[Association(Name="FK_SpecificationCommon_Currency", Storage="_SpecificationCommon", ThisKey="CurrencyID", OtherKey="CurrencyID", DeleteRule="NO ACTION")]
		public EntitySet<SpecificationCommon> SpecificationCommon
		{
			get
			{
				return this._SpecificationCommon;
			}
			set
			{
				this._SpecificationCommon.Assign(value);
			}
		}
		
		[Association(Name="FK_SpecificationItem_Currency", Storage="_SpecificationItem", ThisKey="CurrencyID", OtherKey="CurrencyID", DeleteRule="NO ACTION")]
		public EntitySet<SpecificationItem> SpecificationItem
		{
			get
			{
				return this._SpecificationItem;
			}
			set
			{
				this._SpecificationItem.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.PaymentCurrency = this;
		}
		
		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.PaymentCurrency = null;
		}
		
		private void attach_SpecificationCommon(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_SpecificationCommon(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
		
		private void attach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
	}
	
	[Table(Name="dbo.C_CustomHouse")]
	public partial class C_CustomHouse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomHouseID;
		
		private string _Code;
		
		private string _Title;
		
		private string _Address;
		
		private int _CountryID;
		
		private string _OKATO;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Email;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private string _FullTitle;
		
		private string _OKPO;
		
		private string _OGRN;
		
		private string _INN;
		
		private string _KPP;
		
		private string _City;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<System.DateTime> _ChangeDate;
		
		private EntityRef<C_Country> _Country;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<C_CustomHouseContact> _ContactPerson;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomHouseIDChanging(int value);
    partial void OnCustomHouseIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnOKATOChanging(string value);
    partial void OnOKATOChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnFullTitleChanging(string value);
    partial void OnFullTitleChanged();
    partial void OnOKPOChanging(string value);
    partial void OnOKPOChanged();
    partial void OnOGRNChanging(string value);
    partial void OnOGRNChanged();
    partial void OnINNChanging(string value);
    partial void OnINNChanged();
    partial void OnKPPChanging(string value);
    partial void OnKPPChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnChangeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnChangeDateChanged();
    #endregion
		
		public C_CustomHouse()
		{
			this._Country = default(EntityRef<C_Country>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ContactPerson = new EntitySet<C_CustomHouseContact>(new Action<C_CustomHouseContact>(this.attach_ContactPerson), new Action<C_CustomHouseContact>(this.detach_ContactPerson));
			OnCreated();
		}
		
		[Column(Storage="_CustomHouseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomHouseID
		{
			get
			{
				return this._CustomHouseID;
			}
			set
			{
				if ((this._CustomHouseID != value))
				{
					this.OnCustomHouseIDChanging(value);
					this.SendPropertyChanging();
					this._CustomHouseID = value;
					this.SendPropertyChanged("CustomHouseID");
					this.OnCustomHouseIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_OKATO", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string OKATO
		{
			get
			{
				return this._OKATO;
			}
			set
			{
				if ((this._OKATO != value))
				{
					this.OnOKATOChanging(value);
					this.SendPropertyChanging();
					this._OKATO = value;
					this.SendPropertyChanged("OKATO");
					this.OnOKATOChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_FullTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FullTitle
		{
			get
			{
				return this._FullTitle;
			}
			set
			{
				if ((this._FullTitle != value))
				{
					this.OnFullTitleChanging(value);
					this.SendPropertyChanging();
					this._FullTitle = value;
					this.SendPropertyChanged("FullTitle");
					this.OnFullTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OKPO", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string OKPO
		{
			get
			{
				return this._OKPO;
			}
			set
			{
				if ((this._OKPO != value))
				{
					this.OnOKPOChanging(value);
					this.SendPropertyChanging();
					this._OKPO = value;
					this.SendPropertyChanged("OKPO");
					this.OnOKPOChanged();
				}
			}
		}
		
		[Column(Storage="_OGRN", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string OGRN
		{
			get
			{
				return this._OGRN;
			}
			set
			{
				if ((this._OGRN != value))
				{
					this.OnOGRNChanging(value);
					this.SendPropertyChanging();
					this._OGRN = value;
					this.SendPropertyChanged("OGRN");
					this.OnOGRNChanged();
				}
			}
		}
		
		[Column(Storage="_INN", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string INN
		{
			get
			{
				return this._INN;
			}
			set
			{
				if ((this._INN != value))
				{
					this.OnINNChanging(value);
					this.SendPropertyChanging();
					this._INN = value;
					this.SendPropertyChanged("INN");
					this.OnINNChanged();
				}
			}
		}
		
		[Column(Storage="_KPP", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string KPP
		{
			get
			{
				return this._KPP;
			}
			set
			{
				if ((this._KPP != value))
				{
					this.OnKPPChanging(value);
					this.SendPropertyChanging();
					this._KPP = value;
					this.SendPropertyChanged("KPP");
					this.OnKPPChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_ChangeDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ChangeDate
		{
			get
			{
				return this._ChangeDate;
			}
			set
			{
				if ((this._ChangeDate != value))
				{
					this.OnChangeDateChanging(value);
					this.SendPropertyChanging();
					this._ChangeDate = value;
					this.SendPropertyChanged("ChangeDate");
					this.OnChangeDateChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CustomHouse_Country", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public C_Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				C_Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.C_CustomHouse.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.C_CustomHouse.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="FK_C_CustomHouse_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CustomHouse.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CustomHouse.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_C_CustomHouseContact_CustomHouse", Storage="_ContactPerson", ThisKey="CustomHouseID", OtherKey="CustomHouseID", DeleteRule="NO ACTION")]
		public EntitySet<C_CustomHouseContact> ContactPerson
		{
			get
			{
				return this._ContactPerson;
			}
			set
			{
				this._ContactPerson.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContactPerson(C_CustomHouseContact entity)
		{
			this.SendPropertyChanging();
			entity.CustomHouse = this;
		}
		
		private void detach_ContactPerson(C_CustomHouseContact entity)
		{
			this.SendPropertyChanging();
			entity.CustomHouse = null;
		}
	}
	
	[Table(Name="dbo.C_CustomHouseContact")]
	public partial class C_CustomHouseContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomHouseContactID;
		
		private int _CustomHouseID;
		
		private string _Title;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Email;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private EntityRef<C_CustomHouse> _CustomHouse;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomHouseContactIDChanging(int value);
    partial void OnCustomHouseContactIDChanged();
    partial void OnCustomHouseIDChanging(int value);
    partial void OnCustomHouseIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public C_CustomHouseContact()
		{
			this._CustomHouse = default(EntityRef<C_CustomHouse>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_CustomHouseContactID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomHouseContactID
		{
			get
			{
				return this._CustomHouseContactID;
			}
			set
			{
				if ((this._CustomHouseContactID != value))
				{
					this.OnCustomHouseContactIDChanging(value);
					this.SendPropertyChanging();
					this._CustomHouseContactID = value;
					this.SendPropertyChanged("CustomHouseContactID");
					this.OnCustomHouseContactIDChanged();
				}
			}
		}
		
		[Column(Storage="_CustomHouseID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CustomHouseID
		{
			get
			{
				return this._CustomHouseID;
			}
			set
			{
				if ((this._CustomHouseID != value))
				{
					if (this._CustomHouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomHouseIDChanging(value);
					this.SendPropertyChanging();
					this._CustomHouseID = value;
					this.SendPropertyChanged("CustomHouseID");
					this.OnCustomHouseIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CustomHouseContact_CustomHouse", Storage="_CustomHouse", ThisKey="CustomHouseID", OtherKey="CustomHouseID", IsForeignKey=true)]
		public C_CustomHouse CustomHouse
		{
			get
			{
				return this._CustomHouse.Entity;
			}
			set
			{
				C_CustomHouse previousValue = this._CustomHouse.Entity;
				if (((previousValue != value) 
							|| (this._CustomHouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomHouse.Entity = null;
						previousValue.ContactPerson.Remove(this);
					}
					this._CustomHouse.Entity = value;
					if ((value != null))
					{
						value.ContactPerson.Add(this);
						this._CustomHouseID = value.CustomHouseID;
					}
					else
					{
						this._CustomHouseID = default(int);
					}
					this.SendPropertyChanged("CustomHouse");
				}
			}
		}
		
		[Association(Name="FK_C_CustomHouseContact_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_CustomHouseContact.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_CustomHouseContact.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_DocumentSourceType")]
	public partial class C_DocumentSourceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentSourceTypeID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<CommodityDocument> _CommodityDocument;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentSourceTypeIDChanging(int value);
    partial void OnDocumentSourceTypeIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public C_DocumentSourceType()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._CommodityDocument = new EntitySet<CommodityDocument>(new Action<CommodityDocument>(this.attach_CommodityDocument), new Action<CommodityDocument>(this.detach_CommodityDocument));
			OnCreated();
		}
		
		[Column(Storage="_DocumentSourceTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DocumentSourceTypeID
		{
			get
			{
				return this._DocumentSourceTypeID;
			}
			set
			{
				if ((this._DocumentSourceTypeID != value))
				{
					this.OnDocumentSourceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentSourceTypeID = value;
					this.SendPropertyChanged("DocumentSourceTypeID");
					this.OnDocumentSourceTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_C_DocumentSourceType_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_DocumentSourceType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_DocumentSourceType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_CommodityDocument_SourceType", Storage="_CommodityDocument", ThisKey="DocumentSourceTypeID", OtherKey="SourceTypeID", DeleteRule="NO ACTION")]
		public EntitySet<CommodityDocument> CommodityDocument
		{
			get
			{
				return this._CommodityDocument;
			}
			set
			{
				this._CommodityDocument.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.SourceType = this;
		}
		
		private void detach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.SourceType = null;
		}
	}
	
	[Table(Name="dbo.C_DocumentType")]
	public partial class C_DocumentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentTypeID;
		
		private string _Title;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private System.Guid _MasterObjectGUID;
		
		private string _SysName;
		
		private bool _IsDeleted;
		
		private EntitySet<C_CNCategoryDocument> _C_CNCategoryDocument;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentTypeIDChanging(int value);
    partial void OnDocumentTypeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public C_DocumentType()
		{
			this._C_CNCategoryDocument = new EntitySet<C_CNCategoryDocument>(new Action<C_CNCategoryDocument>(this.attach_C_CNCategoryDocument), new Action<C_CNCategoryDocument>(this.detach_C_CNCategoryDocument));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_DocumentTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocumentTypeID
		{
			get
			{
				return this._DocumentTypeID;
			}
			set
			{
				if ((this._DocumentTypeID != value))
				{
					this.OnDocumentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentTypeID = value;
					this.SendPropertyChanged("DocumentTypeID");
					this.OnDocumentTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryDocument_DocumentType", Storage="_C_CNCategoryDocument", ThisKey="DocumentTypeID", OtherKey="DocumentTypeID", DeleteRule="NO ACTION")]
		public EntitySet<C_CNCategoryDocument> C_CNCategoryDocument
		{
			get
			{
				return this._C_CNCategoryDocument;
			}
			set
			{
				this._C_CNCategoryDocument.Assign(value);
			}
		}
		
		[Association(Name="FK_C_DocumentType_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_DocumentType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_DocumentType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_CNCategoryDocument(C_CNCategoryDocument entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = this;
		}
		
		private void detach_C_CNCategoryDocument(C_CNCategoryDocument entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = null;
		}
	}
	
	[Table(Name="dbo.C_FGA")]
	public partial class C_FGA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FGAID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private bool _IsFormLic;
		
		private bool _IsViewLic;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private System.Guid _MasterObjectGUID;
		
		private string _ShortTitle;
		
		private bool _IsDeleted;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<C_FGACNCategory> _C_FGACNCategory;
		
		private EntitySet<C_FGADocument> _FGADocuments;
		
		private EntitySet<CommodityDocument> _CommodityDocument;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFGAIDChanging(int value);
    partial void OnFGAIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsFormLicChanging(bool value);
    partial void OnIsFormLicChanged();
    partial void OnIsViewLicChanging(bool value);
    partial void OnIsViewLicChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    partial void OnShortTitleChanging(string value);
    partial void OnShortTitleChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public C_FGA()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._C_FGACNCategory = new EntitySet<C_FGACNCategory>(new Action<C_FGACNCategory>(this.attach_C_FGACNCategory), new Action<C_FGACNCategory>(this.detach_C_FGACNCategory));
			this._FGADocuments = new EntitySet<C_FGADocument>(new Action<C_FGADocument>(this.attach_FGADocuments), new Action<C_FGADocument>(this.detach_FGADocuments));
			this._CommodityDocument = new EntitySet<CommodityDocument>(new Action<CommodityDocument>(this.attach_CommodityDocument), new Action<CommodityDocument>(this.detach_CommodityDocument));
			OnCreated();
		}
		
		[Column(Storage="_FGAID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FGAID
		{
			get
			{
				return this._FGAID;
			}
			set
			{
				if ((this._FGAID != value))
				{
					this.OnFGAIDChanging(value);
					this.SendPropertyChanging();
					this._FGAID = value;
					this.SendPropertyChanged("FGAID");
					this.OnFGAIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsFormLic", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsFormLic
		{
			get
			{
				return this._IsFormLic;
			}
			set
			{
				if ((this._IsFormLic != value))
				{
					this.OnIsFormLicChanging(value);
					this.SendPropertyChanging();
					this._IsFormLic = value;
					this.SendPropertyChanged("IsFormLic");
					this.OnIsFormLicChanged();
				}
			}
		}
		
		[Column(Storage="_IsViewLic", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsViewLic
		{
			get
			{
				return this._IsViewLic;
			}
			set
			{
				if ((this._IsViewLic != value))
				{
					this.OnIsViewLicChanging(value);
					this.SendPropertyChanging();
					this._IsViewLic = value;
					this.SendPropertyChanged("IsViewLic");
					this.OnIsViewLicChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShortTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShortTitle
		{
			get
			{
				return this._ShortTitle;
			}
			set
			{
				if ((this._ShortTitle != value))
				{
					this.OnShortTitleChanging(value);
					this.SendPropertyChanging();
					this._ShortTitle = value;
					this.SendPropertyChanged("ShortTitle");
					this.OnShortTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_C_FGA_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_FGA.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_FGA.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_C_FGACNCategory_C_FGA", Storage="_C_FGACNCategory", ThisKey="FGAID", OtherKey="FGAID", DeleteRule="CASCADE")]
		public EntitySet<C_FGACNCategory> C_FGACNCategory
		{
			get
			{
				return this._C_FGACNCategory;
			}
			set
			{
				this._C_FGACNCategory.Assign(value);
			}
		}
		
		[Association(Name="FK_C_FGADocument_FGA", Storage="_FGADocuments", ThisKey="FGAID", OtherKey="FGAID", DeleteRule="NO ACTION")]
		public EntitySet<C_FGADocument> FGADocuments
		{
			get
			{
				return this._FGADocuments;
			}
			set
			{
				this._FGADocuments.Assign(value);
			}
		}
		
		[Association(Name="FK_CommodityDocument_FGA", Storage="_CommodityDocument", ThisKey="FGAID", OtherKey="FGAID", DeleteRule="NO ACTION")]
		public EntitySet<CommodityDocument> CommodityDocument
		{
			get
			{
				return this._CommodityDocument;
			}
			set
			{
				this._CommodityDocument.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_FGACNCategory(C_FGACNCategory entity)
		{
			this.SendPropertyChanging();
			entity.C_FGA = this;
		}
		
		private void detach_C_FGACNCategory(C_FGACNCategory entity)
		{
			this.SendPropertyChanging();
			entity.C_FGA = null;
		}
		
		private void attach_FGADocuments(C_FGADocument entity)
		{
			this.SendPropertyChanging();
			entity.FGA = this;
		}
		
		private void detach_FGADocuments(C_FGADocument entity)
		{
			this.SendPropertyChanging();
			entity.FGA = null;
		}
		
		private void attach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.FGA = this;
		}
		
		private void detach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.FGA = null;
		}
	}
	
	[Table(Name="dbo.C_FGACNCategory")]
	public partial class C_FGACNCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FGAID;
		
		private int _CNCategoryID;
		
		private EntityRef<C_FGA> _C_FGA;
		
		private EntityRef<C_CNCategory> _CNCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFGAIDChanging(int value);
    partial void OnFGAIDChanged();
    partial void OnCNCategoryIDChanging(int value);
    partial void OnCNCategoryIDChanged();
    #endregion
		
		public C_FGACNCategory()
		{
			this._C_FGA = default(EntityRef<C_FGA>);
			this._CNCategory = default(EntityRef<C_CNCategory>);
			OnCreated();
		}
		
		[Column(Storage="_FGAID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FGAID
		{
			get
			{
				return this._FGAID;
			}
			set
			{
				if ((this._FGAID != value))
				{
					if (this._C_FGA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFGAIDChanging(value);
					this.SendPropertyChanging();
					this._FGAID = value;
					this.SendPropertyChanged("FGAID");
					this.OnFGAIDChanged();
				}
			}
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					if (this._CNCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}
		
		[Association(Name="FK_C_FGACNCategory_C_FGA", Storage="_C_FGA", ThisKey="FGAID", OtherKey="FGAID", IsForeignKey=true, DeleteOnNull=true)]
		public C_FGA C_FGA
		{
			get
			{
				return this._C_FGA.Entity;
			}
			set
			{
				C_FGA previousValue = this._C_FGA.Entity;
				if (((previousValue != value) 
							|| (this._C_FGA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_FGA.Entity = null;
						previousValue.C_FGACNCategory.Remove(this);
					}
					this._C_FGA.Entity = value;
					if ((value != null))
					{
						value.C_FGACNCategory.Add(this);
						this._FGAID = value.FGAID;
					}
					else
					{
						this._FGAID = default(int);
					}
					this.SendPropertyChanged("C_FGA");
				}
			}
		}
		
		[Association(Name="FK_C_FGACNCategory_CNCategory", Storage="_CNCategory", ThisKey="CNCategoryID", OtherKey="CNCategoryID", IsForeignKey=true, DeleteOnNull=true)]
		public C_CNCategory CNCategory
		{
			get
			{
				return this._CNCategory.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._CNCategory.Entity;
				if (((previousValue != value) 
							|| (this._CNCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategory.Entity = null;
						previousValue.C_FGACNCategory.Remove(this);
					}
					this._CNCategory.Entity = value;
					if ((value != null))
					{
						value.C_FGACNCategory.Add(this);
						this._CNCategoryID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoryID = default(int);
					}
					this.SendPropertyChanged("CNCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_FGADocument")]
	public partial class C_FGADocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FGADocumentID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private int _FGAID;
		
		private System.Guid _MasterObjectGUID;
		
		private System.Nullable<int> _DocumentFileID;
		
		private string _Code;
		
		private char _RequestFromSMEVType;
		
		private System.Nullable<char> _CheckType;
		
		private char _FromApplicantType;
		
		private string _PrintTitle;
		
		private string _DocNoRegexp;
		
		private string _DocNoRegexpMessage;
		
		private bool _QuantityControl;
		
		private System.Nullable<int> _UseTypeID;
		
		private bool _ForApplicant;
		
		private bool _ForCNCategory;
		
		private bool _IsFileRequired;
		
		private string _Properties;
		
		private bool _IsExclude;
		
		private bool _IsDeleted;
		
		private EntitySet<C_CNCategoryFGADocument> _C_CNCategoryFGADocument;
		
		private EntityRef<N_File> _Document;
		
		private EntityRef<C_FGA> _FGA;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<C_UseType> _UseType;
		
		private EntitySet<C_FGADocumentSigner> _Signers;
		
		private EntitySet<CommodityDocument> _CommodityDocument;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFGADocumentIDChanging(int value);
    partial void OnFGADocumentIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnFGAIDChanging(int value);
    partial void OnFGAIDChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    partial void OnDocumentFileIDChanging(System.Nullable<int> value);
    partial void OnDocumentFileIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnRequestFromSMEVTypeChanging(char value);
    partial void OnRequestFromSMEVTypeChanged();
    partial void OnCheckTypeChanging(System.Nullable<char> value);
    partial void OnCheckTypeChanged();
    partial void OnFromApplicantTypeChanging(char value);
    partial void OnFromApplicantTypeChanged();
    partial void OnPrintTitleChanging(string value);
    partial void OnPrintTitleChanged();
    partial void OnDocNoRegexpChanging(string value);
    partial void OnDocNoRegexpChanged();
    partial void OnDocNoRegexpMessageChanging(string value);
    partial void OnDocNoRegexpMessageChanged();
    partial void OnQuantityControlChanging(bool value);
    partial void OnQuantityControlChanged();
    partial void OnUseTypeIDChanging(System.Nullable<int> value);
    partial void OnUseTypeIDChanged();
    partial void OnForApplicantChanging(bool value);
    partial void OnForApplicantChanged();
    partial void OnForCNCategoryChanging(bool value);
    partial void OnForCNCategoryChanged();
    partial void OnIsFileRequiredChanging(bool value);
    partial void OnIsFileRequiredChanged();
    partial void OnPropertiesChanging(string value);
    partial void OnPropertiesChanged();
    partial void OnIsExcludeChanging(bool value);
    partial void OnIsExcludeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public C_FGADocument()
		{
			this._C_CNCategoryFGADocument = new EntitySet<C_CNCategoryFGADocument>(new Action<C_CNCategoryFGADocument>(this.attach_C_CNCategoryFGADocument), new Action<C_CNCategoryFGADocument>(this.detach_C_CNCategoryFGADocument));
			this._Document = default(EntityRef<N_File>);
			this._FGA = default(EntityRef<C_FGA>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._UseType = default(EntityRef<C_UseType>);
			this._Signers = new EntitySet<C_FGADocumentSigner>(new Action<C_FGADocumentSigner>(this.attach_Signers), new Action<C_FGADocumentSigner>(this.detach_Signers));
			this._CommodityDocument = new EntitySet<CommodityDocument>(new Action<CommodityDocument>(this.attach_CommodityDocument), new Action<CommodityDocument>(this.detach_CommodityDocument));
			OnCreated();
		}
		
		[Column(Storage="_FGADocumentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FGADocumentID
		{
			get
			{
				return this._FGADocumentID;
			}
			set
			{
				if ((this._FGADocumentID != value))
				{
					this.OnFGADocumentIDChanging(value);
					this.SendPropertyChanging();
					this._FGADocumentID = value;
					this.SendPropertyChanged("FGADocumentID");
					this.OnFGADocumentIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_FGAID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FGAID
		{
			get
			{
				return this._FGAID;
			}
			set
			{
				if ((this._FGAID != value))
				{
					if (this._FGA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFGAIDChanging(value);
					this.SendPropertyChanging();
					this._FGAID = value;
					this.SendPropertyChanged("FGAID");
					this.OnFGAIDChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentFileID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DocumentFileID
		{
			get
			{
				return this._DocumentFileID;
			}
			set
			{
				if ((this._DocumentFileID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentFileIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentFileID = value;
					this.SendPropertyChanged("DocumentFileID");
					this.OnDocumentFileIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_RequestFromSMEVType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char RequestFromSMEVType
		{
			get
			{
				return this._RequestFromSMEVType;
			}
			set
			{
				if ((this._RequestFromSMEVType != value))
				{
					this.OnRequestFromSMEVTypeChanging(value);
					this.SendPropertyChanging();
					this._RequestFromSMEVType = value;
					this.SendPropertyChanged("RequestFromSMEVType");
					this.OnRequestFromSMEVTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CheckType", DbType="Char(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<char> CheckType
		{
			get
			{
				return this._CheckType;
			}
			set
			{
				if ((this._CheckType != value))
				{
					this.OnCheckTypeChanging(value);
					this.SendPropertyChanging();
					this._CheckType = value;
					this.SendPropertyChanged("CheckType");
					this.OnCheckTypeChanged();
				}
			}
		}
		
		[Column(Storage="_FromApplicantType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char FromApplicantType
		{
			get
			{
				return this._FromApplicantType;
			}
			set
			{
				if ((this._FromApplicantType != value))
				{
					this.OnFromApplicantTypeChanging(value);
					this.SendPropertyChanging();
					this._FromApplicantType = value;
					this.SendPropertyChanged("FromApplicantType");
					this.OnFromApplicantTypeChanged();
				}
			}
		}
		
		[Column(Storage="_PrintTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PrintTitle
		{
			get
			{
				return this._PrintTitle;
			}
			set
			{
				if ((this._PrintTitle != value))
				{
					this.OnPrintTitleChanging(value);
					this.SendPropertyChanging();
					this._PrintTitle = value;
					this.SendPropertyChanged("PrintTitle");
					this.OnPrintTitleChanged();
				}
			}
		}
		
		[Column(Storage="_DocNoRegexp", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string DocNoRegexp
		{
			get
			{
				return this._DocNoRegexp;
			}
			set
			{
				if ((this._DocNoRegexp != value))
				{
					this.OnDocNoRegexpChanging(value);
					this.SendPropertyChanging();
					this._DocNoRegexp = value;
					this.SendPropertyChanged("DocNoRegexp");
					this.OnDocNoRegexpChanged();
				}
			}
		}
		
		[Column(Storage="_DocNoRegexpMessage", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string DocNoRegexpMessage
		{
			get
			{
				return this._DocNoRegexpMessage;
			}
			set
			{
				if ((this._DocNoRegexpMessage != value))
				{
					this.OnDocNoRegexpMessageChanging(value);
					this.SendPropertyChanging();
					this._DocNoRegexpMessage = value;
					this.SendPropertyChanged("DocNoRegexpMessage");
					this.OnDocNoRegexpMessageChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityControl", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool QuantityControl
		{
			get
			{
				return this._QuantityControl;
			}
			set
			{
				if ((this._QuantityControl != value))
				{
					this.OnQuantityControlChanging(value);
					this.SendPropertyChanging();
					this._QuantityControl = value;
					this.SendPropertyChanged("QuantityControl");
					this.OnQuantityControlChanged();
				}
			}
		}
		
		[Column(Storage="_UseTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> UseTypeID
		{
			get
			{
				return this._UseTypeID;
			}
			set
			{
				if ((this._UseTypeID != value))
				{
					if (this._UseType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUseTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UseTypeID = value;
					this.SendPropertyChanged("UseTypeID");
					this.OnUseTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ForApplicant", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool ForApplicant
		{
			get
			{
				return this._ForApplicant;
			}
			set
			{
				if ((this._ForApplicant != value))
				{
					this.OnForApplicantChanging(value);
					this.SendPropertyChanging();
					this._ForApplicant = value;
					this.SendPropertyChanged("ForApplicant");
					this.OnForApplicantChanged();
				}
			}
		}
		
		[Column(Storage="_ForCNCategory", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool ForCNCategory
		{
			get
			{
				return this._ForCNCategory;
			}
			set
			{
				if ((this._ForCNCategory != value))
				{
					this.OnForCNCategoryChanging(value);
					this.SendPropertyChanging();
					this._ForCNCategory = value;
					this.SendPropertyChanged("ForCNCategory");
					this.OnForCNCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_IsFileRequired", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsFileRequired
		{
			get
			{
				return this._IsFileRequired;
			}
			set
			{
				if ((this._IsFileRequired != value))
				{
					this.OnIsFileRequiredChanging(value);
					this.SendPropertyChanging();
					this._IsFileRequired = value;
					this.SendPropertyChanged("IsFileRequired");
					this.OnIsFileRequiredChanged();
				}
			}
		}
		
		[Column(Storage="_Properties", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Properties
		{
			get
			{
				return this._Properties;
			}
			set
			{
				if ((this._Properties != value))
				{
					this.OnPropertiesChanging(value);
					this.SendPropertyChanging();
					this._Properties = value;
					this.SendPropertyChanged("Properties");
					this.OnPropertiesChanged();
				}
			}
		}
		
		[Column(Storage="_IsExclude", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsExclude
		{
			get
			{
				return this._IsExclude;
			}
			set
			{
				if ((this._IsExclude != value))
				{
					this.OnIsExcludeChanging(value);
					this.SendPropertyChanging();
					this._IsExclude = value;
					this.SendPropertyChanged("IsExclude");
					this.OnIsExcludeChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryFGADocument_FGADocument", Storage="_C_CNCategoryFGADocument", ThisKey="FGADocumentID", OtherKey="FGADocumentID", DeleteRule="NO ACTION")]
		public EntitySet<C_CNCategoryFGADocument> C_CNCategoryFGADocument
		{
			get
			{
				return this._C_CNCategoryFGADocument;
			}
			set
			{
				this._C_CNCategoryFGADocument.Assign(value);
			}
		}
		
		[Association(Name="FK_C_FGADocument_Document", Storage="_Document", ThisKey="DocumentFileID", OtherKey="FileID", IsForeignKey=true)]
		public N_File Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				N_File previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.C_FGADocument.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.C_FGADocument.Add(this);
						this._DocumentFileID = value.FileID;
					}
					else
					{
						this._DocumentFileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[Association(Name="FK_C_FGADocument_FGA", Storage="_FGA", ThisKey="FGAID", OtherKey="FGAID", IsForeignKey=true)]
		public C_FGA FGA
		{
			get
			{
				return this._FGA.Entity;
			}
			set
			{
				C_FGA previousValue = this._FGA.Entity;
				if (((previousValue != value) 
							|| (this._FGA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FGA.Entity = null;
						previousValue.FGADocuments.Remove(this);
					}
					this._FGA.Entity = value;
					if ((value != null))
					{
						value.FGADocuments.Add(this);
						this._FGAID = value.FGAID;
					}
					else
					{
						this._FGAID = default(int);
					}
					this.SendPropertyChanged("FGA");
				}
			}
		}
		
		[Association(Name="FK_C_FGADocument_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_FGADocument.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_FGADocument.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_C_FGADocument_UseType", Storage="_UseType", ThisKey="UseTypeID", OtherKey="UseTypeID", IsForeignKey=true)]
		public C_UseType UseType
		{
			get
			{
				return this._UseType.Entity;
			}
			set
			{
				C_UseType previousValue = this._UseType.Entity;
				if (((previousValue != value) 
							|| (this._UseType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UseType.Entity = null;
						previousValue.C_FGADocument.Remove(this);
					}
					this._UseType.Entity = value;
					if ((value != null))
					{
						value.C_FGADocument.Add(this);
						this._UseTypeID = value.UseTypeID;
					}
					else
					{
						this._UseTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UseType");
				}
			}
		}
		
		[Association(Name="FK_C_FGADocumentSigner_FGADocument", Storage="_Signers", ThisKey="FGADocumentID", OtherKey="FGADocumentID", DeleteRule="NO ACTION")]
		public EntitySet<C_FGADocumentSigner> Signers
		{
			get
			{
				return this._Signers;
			}
			set
			{
				this._Signers.Assign(value);
			}
		}
		
		[Association(Name="FK_CommodityDocument_FGADocument", Storage="_CommodityDocument", ThisKey="FGADocumentID", OtherKey="FGADocumentID", DeleteRule="NO ACTION")]
		public EntitySet<CommodityDocument> CommodityDocument
		{
			get
			{
				return this._CommodityDocument;
			}
			set
			{
				this._CommodityDocument.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_CNCategoryFGADocument(C_CNCategoryFGADocument entity)
		{
			this.SendPropertyChanging();
			entity.FGADocument = this;
		}
		
		private void detach_C_CNCategoryFGADocument(C_CNCategoryFGADocument entity)
		{
			this.SendPropertyChanging();
			entity.FGADocument = null;
		}
		
		private void attach_Signers(C_FGADocumentSigner entity)
		{
			this.SendPropertyChanging();
			entity.FGADocument = this;
		}
		
		private void detach_Signers(C_FGADocumentSigner entity)
		{
			this.SendPropertyChanging();
			entity.FGADocument = null;
		}
		
		private void attach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.FGADocument = this;
		}
		
		private void detach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.FGADocument = null;
		}
	}
	
	[Table(Name="dbo.C_FGADocumentSigner")]
	public partial class C_FGADocumentSigner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FGADocumentSignerID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private int _FGADocumentID;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private System.Guid _MasterObjectGUID;
		
		private string _Post;
		
		private System.Nullable<int> _SignatureFileID;
		
		private string _Surname;
		
		private string _Firstname;
		
		private string _Patronymic;
		
		private string _Title;
		
		private bool _IsDeleted;
		
		private EntityRef<C_FGADocument> _FGADocument;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<N_File> _Signature;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFGADocumentSignerIDChanging(int value);
    partial void OnFGADocumentSignerIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnFGADocumentIDChanging(int value);
    partial void OnFGADocumentIDChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    partial void OnPostChanging(string value);
    partial void OnPostChanged();
    partial void OnSignatureFileIDChanging(System.Nullable<int> value);
    partial void OnSignatureFileIDChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public C_FGADocumentSigner()
		{
			this._FGADocument = default(EntityRef<C_FGADocument>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Signature = default(EntityRef<N_File>);
			OnCreated();
		}
		
		[Column(Storage="_FGADocumentSignerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FGADocumentSignerID
		{
			get
			{
				return this._FGADocumentSignerID;
			}
			set
			{
				if ((this._FGADocumentSignerID != value))
				{
					this.OnFGADocumentSignerIDChanging(value);
					this.SendPropertyChanging();
					this._FGADocumentSignerID = value;
					this.SendPropertyChanged("FGADocumentSignerID");
					this.OnFGADocumentSignerIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_FGADocumentID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FGADocumentID
		{
			get
			{
				return this._FGADocumentID;
			}
			set
			{
				if ((this._FGADocumentID != value))
				{
					if (this._FGADocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFGADocumentIDChanging(value);
					this.SendPropertyChanging();
					this._FGADocumentID = value;
					this.SendPropertyChanged("FGADocumentID");
					this.OnFGADocumentIDChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Post", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				if ((this._Post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._Post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}
		
		[Column(Storage="_SignatureFileID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SignatureFileID
		{
			get
			{
				return this._SignatureFileID;
			}
			set
			{
				if ((this._SignatureFileID != value))
				{
					if (this._Signature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSignatureFileIDChanging(value);
					this.SendPropertyChanging();
					this._SignatureFileID = value;
					this.SendPropertyChanged("SignatureFileID");
					this.OnSignatureFileIDChanged();
				}
			}
		}
		
		[Column(Storage="_Surname", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[Column(Storage="_Firstname", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[Column(Storage="_Patronymic", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[Column(Storage="_Title", AutoSync=AutoSync.Always, DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(([Surname]+isnull((\' \'+substring([Firstname],(1),(1)))+\'.\',\'\'))+isnull((\'" +
			" \'+substring([Patronymic],(1),(1)))+\'.\',\'\'),\'\'))")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_C_FGADocumentSigner_FGADocument", Storage="_FGADocument", ThisKey="FGADocumentID", OtherKey="FGADocumentID", IsForeignKey=true)]
		public C_FGADocument FGADocument
		{
			get
			{
				return this._FGADocument.Entity;
			}
			set
			{
				C_FGADocument previousValue = this._FGADocument.Entity;
				if (((previousValue != value) 
							|| (this._FGADocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FGADocument.Entity = null;
						previousValue.Signers.Remove(this);
					}
					this._FGADocument.Entity = value;
					if ((value != null))
					{
						value.Signers.Add(this);
						this._FGADocumentID = value.FGADocumentID;
					}
					else
					{
						this._FGADocumentID = default(int);
					}
					this.SendPropertyChanged("FGADocument");
				}
			}
		}
		
		[Association(Name="FK_C_FGADocumentSigner_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_FGADocumentSigner.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_FGADocumentSigner.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_C_FGADocumentSigner_Signature", Storage="_Signature", ThisKey="SignatureFileID", OtherKey="FileID", IsForeignKey=true)]
		public N_File Signature
		{
			get
			{
				return this._Signature.Entity;
			}
			set
			{
				N_File previousValue = this._Signature.Entity;
				if (((previousValue != value) 
							|| (this._Signature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Signature.Entity = null;
						previousValue.C_FGADocumentSigner.Remove(this);
					}
					this._Signature.Entity = value;
					if ((value != null))
					{
						value.C_FGADocumentSigner.Add(this);
						this._SignatureFileID = value.FileID;
					}
					else
					{
						this._SignatureFileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Signature");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_FtsCN")]
	public partial class C_FtsCN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _C_FtsCNID;
		
		private string _Code;
		
		private string _FTSTitle;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private string _MeasureCode1;
		
		private string _MeasureCode2;
		
		private string _MeasureCode3;
		
		private string _Title;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private string _RAZDEL;
		
		private System.Nullable<int> _CNTypeID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnC_FtsCNIDChanging(int value);
    partial void OnC_FtsCNIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnFTSTitleChanging(string value);
    partial void OnFTSTitleChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnMeasureCode1Changing(string value);
    partial void OnMeasureCode1Changed();
    partial void OnMeasureCode2Changing(string value);
    partial void OnMeasureCode2Changed();
    partial void OnMeasureCode3Changing(string value);
    partial void OnMeasureCode3Changed();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnRAZDELChanging(string value);
    partial void OnRAZDELChanged();
    partial void OnCNTypeIDChanging(System.Nullable<int> value);
    partial void OnCNTypeIDChanged();
    #endregion
		
		public C_FtsCN()
		{
			OnCreated();
		}
		
		[Column(Storage="_C_FtsCNID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int C_FtsCNID
		{
			get
			{
				return this._C_FtsCNID;
			}
			set
			{
				if ((this._C_FtsCNID != value))
				{
					this.OnC_FtsCNIDChanging(value);
					this.SendPropertyChanging();
					this._C_FtsCNID = value;
					this.SendPropertyChanged("C_FtsCNID");
					this.OnC_FtsCNIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_FTSTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FTSTitle
		{
			get
			{
				return this._FTSTitle;
			}
			set
			{
				if ((this._FTSTitle != value))
				{
					this.OnFTSTitleChanging(value);
					this.SendPropertyChanging();
					this._FTSTitle = value;
					this.SendPropertyChanged("FTSTitle");
					this.OnFTSTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureCode1", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string MeasureCode1
		{
			get
			{
				return this._MeasureCode1;
			}
			set
			{
				if ((this._MeasureCode1 != value))
				{
					this.OnMeasureCode1Changing(value);
					this.SendPropertyChanging();
					this._MeasureCode1 = value;
					this.SendPropertyChanged("MeasureCode1");
					this.OnMeasureCode1Changed();
				}
			}
		}
		
		[Column(Storage="_MeasureCode2", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string MeasureCode2
		{
			get
			{
				return this._MeasureCode2;
			}
			set
			{
				if ((this._MeasureCode2 != value))
				{
					this.OnMeasureCode2Changing(value);
					this.SendPropertyChanging();
					this._MeasureCode2 = value;
					this.SendPropertyChanged("MeasureCode2");
					this.OnMeasureCode2Changed();
				}
			}
		}
		
		[Column(Storage="_MeasureCode3", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string MeasureCode3
		{
			get
			{
				return this._MeasureCode3;
			}
			set
			{
				if ((this._MeasureCode3 != value))
				{
					this.OnMeasureCode3Changing(value);
					this.SendPropertyChanging();
					this._MeasureCode3 = value;
					this.SendPropertyChanged("MeasureCode3");
					this.OnMeasureCode3Changed();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_RAZDEL", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string RAZDEL
		{
			get
			{
				return this._RAZDEL;
			}
			set
			{
				if ((this._RAZDEL != value))
				{
					this.OnRAZDELChanging(value);
					this.SendPropertyChanging();
					this._RAZDEL = value;
					this.SendPropertyChanged("RAZDEL");
					this.OnRAZDELChanged();
				}
			}
		}
		
		[Column(Storage="_CNTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CNTypeID
		{
			get
			{
				return this._CNTypeID;
			}
			set
			{
				if ((this._CNTypeID != value))
				{
					this.OnCNTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CNTypeID = value;
					this.SendPropertyChanged("CNTypeID");
					this.OnCNTypeIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_FtsCountry")]
	public partial class C_FtsCountry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FtsCountryID;
		
		private string _Alpha2;
		
		private string _Alpha3;
		
		private string _Code;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private string _ShortTitle;
		
		private string _Title;
		
		private string _PR_STR;
		
		private string _KOD_AR;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntitySet<C_FtsCountryGroupCountries> _C_FtsCountryGroupCountries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFtsCountryIDChanging(int value);
    partial void OnFtsCountryIDChanged();
    partial void OnAlpha2Changing(string value);
    partial void OnAlpha2Changed();
    partial void OnAlpha3Changing(string value);
    partial void OnAlpha3Changed();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnShortTitleChanging(string value);
    partial void OnShortTitleChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPR_STRChanging(string value);
    partial void OnPR_STRChanged();
    partial void OnKOD_ARChanging(string value);
    partial void OnKOD_ARChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public C_FtsCountry()
		{
			this._C_FtsCountryGroupCountries = new EntitySet<C_FtsCountryGroupCountries>(new Action<C_FtsCountryGroupCountries>(this.attach_C_FtsCountryGroupCountries), new Action<C_FtsCountryGroupCountries>(this.detach_C_FtsCountryGroupCountries));
			OnCreated();
		}
		
		[Column(Storage="_FtsCountryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FtsCountryID
		{
			get
			{
				return this._FtsCountryID;
			}
			set
			{
				if ((this._FtsCountryID != value))
				{
					this.OnFtsCountryIDChanging(value);
					this.SendPropertyChanging();
					this._FtsCountryID = value;
					this.SendPropertyChanged("FtsCountryID");
					this.OnFtsCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Alpha2", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Alpha2
		{
			get
			{
				return this._Alpha2;
			}
			set
			{
				if ((this._Alpha2 != value))
				{
					this.OnAlpha2Changing(value);
					this.SendPropertyChanging();
					this._Alpha2 = value;
					this.SendPropertyChanged("Alpha2");
					this.OnAlpha2Changed();
				}
			}
		}
		
		[Column(Storage="_Alpha3", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Alpha3
		{
			get
			{
				return this._Alpha3;
			}
			set
			{
				if ((this._Alpha3 != value))
				{
					this.OnAlpha3Changing(value);
					this.SendPropertyChanging();
					this._Alpha3 = value;
					this.SendPropertyChanged("Alpha3");
					this.OnAlpha3Changed();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ShortTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShortTitle
		{
			get
			{
				return this._ShortTitle;
			}
			set
			{
				if ((this._ShortTitle != value))
				{
					this.OnShortTitleChanging(value);
					this.SendPropertyChanging();
					this._ShortTitle = value;
					this.SendPropertyChanged("ShortTitle");
					this.OnShortTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_PR_STR", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PR_STR
		{
			get
			{
				return this._PR_STR;
			}
			set
			{
				if ((this._PR_STR != value))
				{
					this.OnPR_STRChanging(value);
					this.SendPropertyChanging();
					this._PR_STR = value;
					this.SendPropertyChanged("PR_STR");
					this.OnPR_STRChanged();
				}
			}
		}
		
		[Column(Storage="_KOD_AR", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string KOD_AR
		{
			get
			{
				return this._KOD_AR;
			}
			set
			{
				if ((this._KOD_AR != value))
				{
					this.OnKOD_ARChanging(value);
					this.SendPropertyChanging();
					this._KOD_AR = value;
					this.SendPropertyChanged("KOD_AR");
					this.OnKOD_ARChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Association(Name="FK_C_FtsCountryGroupCountries_Countries", Storage="_C_FtsCountryGroupCountries", ThisKey="FtsCountryID", OtherKey="CountriesID", DeleteRule="CASCADE")]
		public EntitySet<C_FtsCountryGroupCountries> C_FtsCountryGroupCountries
		{
			get
			{
				return this._C_FtsCountryGroupCountries;
			}
			set
			{
				this._C_FtsCountryGroupCountries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_FtsCountryGroupCountries(C_FtsCountryGroupCountries entity)
		{
			this.SendPropertyChanging();
			entity.Countries = this;
		}
		
		private void detach_C_FtsCountryGroupCountries(C_FtsCountryGroupCountries entity)
		{
			this.SendPropertyChanging();
			entity.Countries = null;
		}
	}
	
	[Table(Name="dbo.C_FtsCountryGroup")]
	public partial class C_FtsCountryGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FtsCountryGroupID;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private string _Title;
		
		private bool _IsException;
		
		private string _Code;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private System.Guid _MasterObjectGUID;
		
		private char _GroupType;
		
		private string _ShortTitle;
		
		private string _TitleEng;
		
		private bool _IsDeleted;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<C_FtsCountryGroupCountries> _C_FtsCountryGroupCountries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFtsCountryGroupIDChanging(int value);
    partial void OnFtsCountryGroupIDChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsExceptionChanging(bool value);
    partial void OnIsExceptionChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    partial void OnGroupTypeChanging(char value);
    partial void OnGroupTypeChanged();
    partial void OnShortTitleChanging(string value);
    partial void OnShortTitleChanged();
    partial void OnTitleEngChanging(string value);
    partial void OnTitleEngChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public C_FtsCountryGroup()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._C_FtsCountryGroupCountries = new EntitySet<C_FtsCountryGroupCountries>(new Action<C_FtsCountryGroupCountries>(this.attach_C_FtsCountryGroupCountries), new Action<C_FtsCountryGroupCountries>(this.detach_C_FtsCountryGroupCountries));
			OnCreated();
		}
		
		[Column(Storage="_FtsCountryGroupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FtsCountryGroupID
		{
			get
			{
				return this._FtsCountryGroupID;
			}
			set
			{
				if ((this._FtsCountryGroupID != value))
				{
					this.OnFtsCountryGroupIDChanging(value);
					this.SendPropertyChanging();
					this._FtsCountryGroupID = value;
					this.SendPropertyChanged("FtsCountryGroupID");
					this.OnFtsCountryGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsException", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsException
		{
			get
			{
				return this._IsException;
			}
			set
			{
				if ((this._IsException != value))
				{
					this.OnIsExceptionChanging(value);
					this.SendPropertyChanging();
					this._IsException = value;
					this.SendPropertyChanged("IsException");
					this.OnIsExceptionChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char GroupType
		{
			get
			{
				return this._GroupType;
			}
			set
			{
				if ((this._GroupType != value))
				{
					this.OnGroupTypeChanging(value);
					this.SendPropertyChanging();
					this._GroupType = value;
					this.SendPropertyChanged("GroupType");
					this.OnGroupTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ShortTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShortTitle
		{
			get
			{
				return this._ShortTitle;
			}
			set
			{
				if ((this._ShortTitle != value))
				{
					this.OnShortTitleChanging(value);
					this.SendPropertyChanging();
					this._ShortTitle = value;
					this.SendPropertyChanged("ShortTitle");
					this.OnShortTitleChanged();
				}
			}
		}
		
		[Column(Storage="_TitleEng", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string TitleEng
		{
			get
			{
				return this._TitleEng;
			}
			set
			{
				if ((this._TitleEng != value))
				{
					this.OnTitleEngChanging(value);
					this.SendPropertyChanging();
					this._TitleEng = value;
					this.SendPropertyChanged("TitleEng");
					this.OnTitleEngChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_C_FtsCountryGroup_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_FtsCountryGroup.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_FtsCountryGroup.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_C_FtsCountryGroupCountries_C_FtsCountryGroup", Storage="_C_FtsCountryGroupCountries", ThisKey="FtsCountryGroupID", OtherKey="FtsCountryGroupID", DeleteRule="CASCADE")]
		public EntitySet<C_FtsCountryGroupCountries> C_FtsCountryGroupCountries
		{
			get
			{
				return this._C_FtsCountryGroupCountries;
			}
			set
			{
				this._C_FtsCountryGroupCountries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_FtsCountryGroupCountries(C_FtsCountryGroupCountries entity)
		{
			this.SendPropertyChanging();
			entity.C_FtsCountryGroup = this;
		}
		
		private void detach_C_FtsCountryGroupCountries(C_FtsCountryGroupCountries entity)
		{
			this.SendPropertyChanging();
			entity.C_FtsCountryGroup = null;
		}
	}
	
	[Table(Name="dbo.C_FtsCountryGroupCountries")]
	public partial class C_FtsCountryGroupCountries : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FtsCountryGroupID;
		
		private int _CountriesID;
		
		private EntityRef<C_FtsCountryGroup> _C_FtsCountryGroup;
		
		private EntityRef<C_FtsCountry> _Countries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFtsCountryGroupIDChanging(int value);
    partial void OnFtsCountryGroupIDChanged();
    partial void OnCountriesIDChanging(int value);
    partial void OnCountriesIDChanged();
    #endregion
		
		public C_FtsCountryGroupCountries()
		{
			this._C_FtsCountryGroup = default(EntityRef<C_FtsCountryGroup>);
			this._Countries = default(EntityRef<C_FtsCountry>);
			OnCreated();
		}
		
		[Column(Storage="_FtsCountryGroupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FtsCountryGroupID
		{
			get
			{
				return this._FtsCountryGroupID;
			}
			set
			{
				if ((this._FtsCountryGroupID != value))
				{
					if (this._C_FtsCountryGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFtsCountryGroupIDChanging(value);
					this.SendPropertyChanging();
					this._FtsCountryGroupID = value;
					this.SendPropertyChanged("FtsCountryGroupID");
					this.OnFtsCountryGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_CountriesID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CountriesID
		{
			get
			{
				return this._CountriesID;
			}
			set
			{
				if ((this._CountriesID != value))
				{
					if (this._Countries.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountriesIDChanging(value);
					this.SendPropertyChanging();
					this._CountriesID = value;
					this.SendPropertyChanged("CountriesID");
					this.OnCountriesIDChanged();
				}
			}
		}
		
		[Association(Name="FK_C_FtsCountryGroupCountries_C_FtsCountryGroup", Storage="_C_FtsCountryGroup", ThisKey="FtsCountryGroupID", OtherKey="FtsCountryGroupID", IsForeignKey=true, DeleteOnNull=true)]
		public C_FtsCountryGroup C_FtsCountryGroup
		{
			get
			{
				return this._C_FtsCountryGroup.Entity;
			}
			set
			{
				C_FtsCountryGroup previousValue = this._C_FtsCountryGroup.Entity;
				if (((previousValue != value) 
							|| (this._C_FtsCountryGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_FtsCountryGroup.Entity = null;
						previousValue.C_FtsCountryGroupCountries.Remove(this);
					}
					this._C_FtsCountryGroup.Entity = value;
					if ((value != null))
					{
						value.C_FtsCountryGroupCountries.Add(this);
						this._FtsCountryGroupID = value.FtsCountryGroupID;
					}
					else
					{
						this._FtsCountryGroupID = default(int);
					}
					this.SendPropertyChanged("C_FtsCountryGroup");
				}
			}
		}
		
		[Association(Name="FK_C_FtsCountryGroupCountries_Countries", Storage="_Countries", ThisKey="CountriesID", OtherKey="FtsCountryID", IsForeignKey=true, DeleteOnNull=true)]
		public C_FtsCountry Countries
		{
			get
			{
				return this._Countries.Entity;
			}
			set
			{
				C_FtsCountry previousValue = this._Countries.Entity;
				if (((previousValue != value) 
							|| (this._Countries.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Countries.Entity = null;
						previousValue.C_FtsCountryGroupCountries.Remove(this);
					}
					this._Countries.Entity = value;
					if ((value != null))
					{
						value.C_FtsCountryGroupCountries.Add(this);
						this._CountriesID = value.FtsCountryID;
					}
					else
					{
						this._CountriesID = default(int);
					}
					this.SendPropertyChanged("Countries");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_FtsCustomHouse")]
	public partial class C_FtsCustomHouse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FtsCustomHouseID;
		
		private string _Address;
		
		private string _City;
		
		private string _Code;
		
		private string _CountryCode;
		
		private string _Email;
		
		private string _Fax;
		
		private string _FullTitle;
		
		private string _INN;
		
		private bool _IsDeleted;
		
		private string _KPP;
		
		private System.DateTime _LastModifiedDate;
		
		private string _OGRN;
		
		private string _OKATO;
		
		private string _OKPO;
		
		private string _Phone;
		
		private string _Title;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFtsCustomHouseIDChanging(int value);
    partial void OnFtsCustomHouseIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnFullTitleChanging(string value);
    partial void OnFullTitleChanged();
    partial void OnINNChanging(string value);
    partial void OnINNChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnKPPChanging(string value);
    partial void OnKPPChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnOGRNChanging(string value);
    partial void OnOGRNChanged();
    partial void OnOKATOChanging(string value);
    partial void OnOKATOChanged();
    partial void OnOKPOChanging(string value);
    partial void OnOKPOChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public C_FtsCustomHouse()
		{
			OnCreated();
		}
		
		[Column(Storage="_FtsCustomHouseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FtsCustomHouseID
		{
			get
			{
				return this._FtsCustomHouseID;
			}
			set
			{
				if ((this._FtsCustomHouseID != value))
				{
					this.OnFtsCustomHouseIDChanging(value);
					this.SendPropertyChanging();
					this._FtsCustomHouseID = value;
					this.SendPropertyChanged("FtsCustomHouseID");
					this.OnFtsCustomHouseIDChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CountryCode", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_FullTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FullTitle
		{
			get
			{
				return this._FullTitle;
			}
			set
			{
				if ((this._FullTitle != value))
				{
					this.OnFullTitleChanging(value);
					this.SendPropertyChanging();
					this._FullTitle = value;
					this.SendPropertyChanged("FullTitle");
					this.OnFullTitleChanged();
				}
			}
		}
		
		[Column(Storage="_INN", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string INN
		{
			get
			{
				return this._INN;
			}
			set
			{
				if ((this._INN != value))
				{
					this.OnINNChanging(value);
					this.SendPropertyChanging();
					this._INN = value;
					this.SendPropertyChanged("INN");
					this.OnINNChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_KPP", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string KPP
		{
			get
			{
				return this._KPP;
			}
			set
			{
				if ((this._KPP != value))
				{
					this.OnKPPChanging(value);
					this.SendPropertyChanging();
					this._KPP = value;
					this.SendPropertyChanged("KPP");
					this.OnKPPChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_OGRN", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string OGRN
		{
			get
			{
				return this._OGRN;
			}
			set
			{
				if ((this._OGRN != value))
				{
					this.OnOGRNChanging(value);
					this.SendPropertyChanging();
					this._OGRN = value;
					this.SendPropertyChanged("OGRN");
					this.OnOGRNChanged();
				}
			}
		}
		
		[Column(Storage="_OKATO", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string OKATO
		{
			get
			{
				return this._OKATO;
			}
			set
			{
				if ((this._OKATO != value))
				{
					this.OnOKATOChanging(value);
					this.SendPropertyChanging();
					this._OKATO = value;
					this.SendPropertyChanged("OKATO");
					this.OnOKATOChanged();
				}
			}
		}
		
		[Column(Storage="_OKPO", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string OKPO
		{
			get
			{
				return this._OKPO;
			}
			set
			{
				if ((this._OKPO != value))
				{
					this.OnOKPOChanging(value);
					this.SendPropertyChanging();
					this._OKPO = value;
					this.SendPropertyChanged("OKPO");
					this.OnOKPOChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_Help")]
	public partial class C_Help : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _HelpGUID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private System.Nullable<System.Guid> _FormViewGuid;
		
		private bool _IsStaticHelp;
		
		private System.Nullable<System.Guid> _ParentGUID;
		
		private string _SysName;
		
		private int _SeqNo;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<C_Help> _Parent;
		
		private EntitySet<C_Help> _HelpGU;
		
		private EntitySet<C_HelpData> _C_HelpData;
		
		private EntitySet<Curriculum> _Curriculum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHelpGUIDChanging(System.Guid value);
    partial void OnHelpGUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnFormViewGuidChanging(System.Nullable<System.Guid> value);
    partial void OnFormViewGuidChanged();
    partial void OnIsStaticHelpChanging(bool value);
    partial void OnIsStaticHelpChanged();
    partial void OnParentGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentGUIDChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    #endregion
		
		public C_Help()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Parent = default(EntityRef<C_Help>);
			this._HelpGU = new EntitySet<C_Help>(new Action<C_Help>(this.attach_HelpGU), new Action<C_Help>(this.detach_HelpGU));
			this._C_HelpData = new EntitySet<C_HelpData>(new Action<C_HelpData>(this.attach_C_HelpData), new Action<C_HelpData>(this.detach_C_HelpData));
			this._Curriculum = new EntitySet<Curriculum>(new Action<Curriculum>(this.attach_Curriculum), new Action<Curriculum>(this.detach_Curriculum));
			OnCreated();
		}
		
		[Column(Storage="_HelpGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid HelpGUID
		{
			get
			{
				return this._HelpGUID;
			}
			set
			{
				if ((this._HelpGUID != value))
				{
					this.OnHelpGUIDChanging(value);
					this.SendPropertyChanging();
					this._HelpGUID = value;
					this.SendPropertyChanged("HelpGUID");
					this.OnHelpGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_FormViewGuid", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FormViewGuid
		{
			get
			{
				return this._FormViewGuid;
			}
			set
			{
				if ((this._FormViewGuid != value))
				{
					this.OnFormViewGuidChanging(value);
					this.SendPropertyChanging();
					this._FormViewGuid = value;
					this.SendPropertyChanged("FormViewGuid");
					this.OnFormViewGuidChanged();
				}
			}
		}
		
		[Column(Storage="_IsStaticHelp", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsStaticHelp
		{
			get
			{
				return this._IsStaticHelp;
			}
			set
			{
				if ((this._IsStaticHelp != value))
				{
					this.OnIsStaticHelpChanging(value);
					this.SendPropertyChanging();
					this._IsStaticHelp = value;
					this.SendPropertyChanged("IsStaticHelp");
					this.OnIsStaticHelpChanged();
				}
			}
		}
		
		[Column(Storage="_ParentGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ParentGUID
		{
			get
			{
				return this._ParentGUID;
			}
			set
			{
				if ((this._ParentGUID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentGUIDChanging(value);
					this.SendPropertyChanging();
					this._ParentGUID = value;
					this.SendPropertyChanged("ParentGUID");
					this.OnParentGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Association(Name="FK_C_Help_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_Help.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_Help.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_C_Help_Parent", Storage="_Parent", ThisKey="ParentGUID", OtherKey="HelpGUID", IsForeignKey=true)]
		public C_Help Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				C_Help previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.HelpGU.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.HelpGU.Add(this);
						this._ParentGUID = value.HelpGUID;
					}
					else
					{
						this._ParentGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		[Association(Name="FK_C_Help_Parent", Storage="_HelpGU", ThisKey="HelpGUID", OtherKey="ParentGUID", DeleteRule="NO ACTION")]
		public EntitySet<C_Help> HelpGU
		{
			get
			{
				return this._HelpGU;
			}
			set
			{
				this._HelpGU.Assign(value);
			}
		}
		
		[Association(Name="FK_C_HelpData_C_Help", Storage="_C_HelpData", ThisKey="HelpGUID", OtherKey="HelpGUID", DeleteRule="CASCADE")]
		public EntitySet<C_HelpData> C_HelpData
		{
			get
			{
				return this._C_HelpData;
			}
			set
			{
				this._C_HelpData.Assign(value);
			}
		}
		
		[Association(Name="FK_Curriculum_Help", Storage="_Curriculum", ThisKey="HelpGUID", OtherKey="HelpGUID", DeleteRule="NO ACTION")]
		public EntitySet<Curriculum> Curriculum
		{
			get
			{
				return this._Curriculum;
			}
			set
			{
				this._Curriculum.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HelpGU(C_Help entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_HelpGU(C_Help entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
		
		private void attach_C_HelpData(C_HelpData entity)
		{
			this.SendPropertyChanging();
			entity.C_Help = this;
		}
		
		private void detach_C_HelpData(C_HelpData entity)
		{
			this.SendPropertyChanging();
			entity.C_Help = null;
		}
		
		private void attach_Curriculum(Curriculum entity)
		{
			this.SendPropertyChanging();
			entity.Help = this;
		}
		
		private void detach_Curriculum(Curriculum entity)
		{
			this.SendPropertyChanging();
			entity.Help = null;
		}
	}
	
	[Table(Name="dbo.C_HelpData")]
	public partial class C_HelpData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _C_HelpDataGUID;
		
		private System.Guid _HelpGUID;
		
		private string _LanguageCode;
		
		private string _Text;
		
		private string _Title;
		
		private EntityRef<C_Help> _C_Help;
		
		private EntityRef<C_Language> _C_Language;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnC_HelpDataGUIDChanging(System.Guid value);
    partial void OnC_HelpDataGUIDChanged();
    partial void OnHelpGUIDChanging(System.Guid value);
    partial void OnHelpGUIDChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public C_HelpData()
		{
			this._C_Help = default(EntityRef<C_Help>);
			this._C_Language = default(EntityRef<C_Language>);
			OnCreated();
		}
		
		[Column(Storage="_C_HelpDataGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid C_HelpDataGUID
		{
			get
			{
				return this._C_HelpDataGUID;
			}
			set
			{
				if ((this._C_HelpDataGUID != value))
				{
					this.OnC_HelpDataGUIDChanging(value);
					this.SendPropertyChanging();
					this._C_HelpDataGUID = value;
					this.SendPropertyChanged("C_HelpDataGUID");
					this.OnC_HelpDataGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_HelpGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid HelpGUID
		{
			get
			{
				return this._HelpGUID;
			}
			set
			{
				if ((this._HelpGUID != value))
				{
					if (this._C_Help.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHelpGUIDChanging(value);
					this.SendPropertyChanging();
					this._HelpGUID = value;
					this.SendPropertyChanged("HelpGUID");
					this.OnHelpGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="NChar(2) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					if (this._C_Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_C_HelpData_C_Help", Storage="_C_Help", ThisKey="HelpGUID", OtherKey="HelpGUID", IsForeignKey=true, DeleteOnNull=true)]
		public C_Help C_Help
		{
			get
			{
				return this._C_Help.Entity;
			}
			set
			{
				C_Help previousValue = this._C_Help.Entity;
				if (((previousValue != value) 
							|| (this._C_Help.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_Help.Entity = null;
						previousValue.C_HelpData.Remove(this);
					}
					this._C_Help.Entity = value;
					if ((value != null))
					{
						value.C_HelpData.Add(this);
						this._HelpGUID = value.HelpGUID;
					}
					else
					{
						this._HelpGUID = default(System.Guid);
					}
					this.SendPropertyChanged("C_Help");
				}
			}
		}
		
		[Association(Name="FK_C_HelpData_C_Language", Storage="_C_Language", ThisKey="LanguageCode", OtherKey="LanguageCode", IsForeignKey=true, DeleteOnNull=true)]
		public C_Language C_Language
		{
			get
			{
				return this._C_Language.Entity;
			}
			set
			{
				C_Language previousValue = this._C_Language.Entity;
				if (((previousValue != value) 
							|| (this._C_Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_Language.Entity = null;
						previousValue.C_HelpData.Remove(this);
					}
					this._C_Language.Entity = value;
					if ((value != null))
					{
						value.C_HelpData.Add(this);
						this._LanguageCode = value.LanguageCode;
					}
					else
					{
						this._LanguageCode = default(string);
					}
					this.SendPropertyChanged("C_Language");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_Language")]
	public partial class C_Language : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LanguageCode;
		
		private string _Title;
		
		private bool _IsDefault;
		
		private EntitySet<C_HelpData> _C_HelpData;
		
		private EntitySet<N_TextResourceData> _N_TextResourceData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    #endregion
		
		public C_Language()
		{
			this._C_HelpData = new EntitySet<C_HelpData>(new Action<C_HelpData>(this.attach_C_HelpData), new Action<C_HelpData>(this.detach_C_HelpData));
			this._N_TextResourceData = new EntitySet<N_TextResourceData>(new Action<N_TextResourceData>(this.attach_N_TextResourceData), new Action<N_TextResourceData>(this.detach_N_TextResourceData));
			OnCreated();
		}
		
		[Column(Storage="_LanguageCode", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsDefault", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[Association(Name="FK_C_HelpData_C_Language", Storage="_C_HelpData", ThisKey="LanguageCode", OtherKey="LanguageCode", DeleteRule="CASCADE")]
		public EntitySet<C_HelpData> C_HelpData
		{
			get
			{
				return this._C_HelpData;
			}
			set
			{
				this._C_HelpData.Assign(value);
			}
		}
		
		[Association(Name="FK_N_TextResourceData_C_Language", Storage="_N_TextResourceData", ThisKey="LanguageCode", OtherKey="LanguageCode", DeleteRule="CASCADE")]
		public EntitySet<N_TextResourceData> N_TextResourceData
		{
			get
			{
				return this._N_TextResourceData;
			}
			set
			{
				this._N_TextResourceData.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_HelpData(C_HelpData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = this;
		}
		
		private void detach_C_HelpData(C_HelpData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = null;
		}
		
		private void attach_N_TextResourceData(N_TextResourceData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = this;
		}
		
		private void detach_N_TextResourceData(N_TextResourceData entity)
		{
			this.SendPropertyChanging();
			entity.C_Language = null;
		}
	}
	
	[Table(Name="dbo.C_LawOrgan")]
	public partial class C_LawOrgan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LawOrganID;
		
		private string _Title;
		
		private string _ShortTitle;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<C_LegalDocument> _C_LegalDocument;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLawOrganIDChanging(int value);
    partial void OnLawOrganIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnShortTitleChanging(string value);
    partial void OnShortTitleChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public C_LawOrgan()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._C_LegalDocument = new EntitySet<C_LegalDocument>(new Action<C_LegalDocument>(this.attach_C_LegalDocument), new Action<C_LegalDocument>(this.detach_C_LegalDocument));
			OnCreated();
		}
		
		[Column(Storage="_LawOrganID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LawOrganID
		{
			get
			{
				return this._LawOrganID;
			}
			set
			{
				if ((this._LawOrganID != value))
				{
					this.OnLawOrganIDChanging(value);
					this.SendPropertyChanging();
					this._LawOrganID = value;
					this.SendPropertyChanged("LawOrganID");
					this.OnLawOrganIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ShortTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShortTitle
		{
			get
			{
				return this._ShortTitle;
			}
			set
			{
				if ((this._ShortTitle != value))
				{
					this.OnShortTitleChanging(value);
					this.SendPropertyChanging();
					this._ShortTitle = value;
					this.SendPropertyChanged("ShortTitle");
					this.OnShortTitleChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_C_LawOrgan_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_LawOrgan.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_LawOrgan.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_C_LegalDocument_LawOrgan", Storage="_C_LegalDocument", ThisKey="LawOrganID", OtherKey="LawOrganID", DeleteRule="NO ACTION")]
		public EntitySet<C_LegalDocument> C_LegalDocument
		{
			get
			{
				return this._C_LegalDocument;
			}
			set
			{
				this._C_LegalDocument.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_LegalDocument(C_LegalDocument entity)
		{
			this.SendPropertyChanging();
			entity.LawOrgan = this;
		}
		
		private void detach_C_LegalDocument(C_LegalDocument entity)
		{
			this.SendPropertyChanging();
			entity.LawOrgan = null;
		}
	}
	
	[Table(Name="dbo.C_LegalDocument")]
	public partial class C_LegalDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LegalDocumentID;
		
		private string _ArticleNo;
		
		private string _ArticleText;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _No;
		
		private string _Title;
		
		private int _TypeID;
		
		private System.Nullable<System.DateTime> _DocDate;
		
		private System.Nullable<int> _LawOrganID;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private bool _IsPublished;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<C_LawOrgan> _LawOrgan;
		
		private EntityRef<C_LegalDocumentType> _Type;
		
		private EntitySet<C_LegalDocumentCNCategories> _C_LegalDocumentCNCategories;
		
		private EntitySet<C_LegalDocumentCNGroups> _C_LegalDocumentCNGroups;
		
		private EntitySet<C_LegalDocumentRestrictions> _C_LegalDocumentRestrictions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLegalDocumentIDChanging(int value);
    partial void OnLegalDocumentIDChanged();
    partial void OnArticleNoChanging(string value);
    partial void OnArticleNoChanged();
    partial void OnArticleTextChanging(string value);
    partial void OnArticleTextChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnNoChanging(string value);
    partial void OnNoChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnDocDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDocDateChanged();
    partial void OnLawOrganIDChanging(System.Nullable<int> value);
    partial void OnLawOrganIDChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnIsPublishedChanging(bool value);
    partial void OnIsPublishedChanged();
    #endregion
		
		public C_LegalDocument()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._LawOrgan = default(EntityRef<C_LawOrgan>);
			this._Type = default(EntityRef<C_LegalDocumentType>);
			this._C_LegalDocumentCNCategories = new EntitySet<C_LegalDocumentCNCategories>(new Action<C_LegalDocumentCNCategories>(this.attach_C_LegalDocumentCNCategories), new Action<C_LegalDocumentCNCategories>(this.detach_C_LegalDocumentCNCategories));
			this._C_LegalDocumentCNGroups = new EntitySet<C_LegalDocumentCNGroups>(new Action<C_LegalDocumentCNGroups>(this.attach_C_LegalDocumentCNGroups), new Action<C_LegalDocumentCNGroups>(this.detach_C_LegalDocumentCNGroups));
			this._C_LegalDocumentRestrictions = new EntitySet<C_LegalDocumentRestrictions>(new Action<C_LegalDocumentRestrictions>(this.attach_C_LegalDocumentRestrictions), new Action<C_LegalDocumentRestrictions>(this.detach_C_LegalDocumentRestrictions));
			OnCreated();
		}
		
		[Column(Storage="_LegalDocumentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LegalDocumentID
		{
			get
			{
				return this._LegalDocumentID;
			}
			set
			{
				if ((this._LegalDocumentID != value))
				{
					this.OnLegalDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._LegalDocumentID = value;
					this.SendPropertyChanged("LegalDocumentID");
					this.OnLegalDocumentIDChanged();
				}
			}
		}
		
		[Column(Storage="_ArticleNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ArticleNo
		{
			get
			{
				return this._ArticleNo;
			}
			set
			{
				if ((this._ArticleNo != value))
				{
					this.OnArticleNoChanging(value);
					this.SendPropertyChanging();
					this._ArticleNo = value;
					this.SendPropertyChanged("ArticleNo");
					this.OnArticleNoChanged();
				}
			}
		}
		
		[Column(Storage="_ArticleText", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ArticleText
		{
			get
			{
				return this._ArticleText;
			}
			set
			{
				if ((this._ArticleText != value))
				{
					this.OnArticleTextChanging(value);
					this.SendPropertyChanging();
					this._ArticleText = value;
					this.SendPropertyChanged("ArticleText");
					this.OnArticleTextChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_No", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string No
		{
			get
			{
				return this._No;
			}
			set
			{
				if ((this._No != value))
				{
					this.OnNoChanging(value);
					this.SendPropertyChanging();
					this._No = value;
					this.SendPropertyChanged("No");
					this.OnNoChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_DocDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this.OnDocDateChanging(value);
					this.SendPropertyChanging();
					this._DocDate = value;
					this.SendPropertyChanged("DocDate");
					this.OnDocDateChanged();
				}
			}
		}
		
		[Column(Storage="_LawOrganID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> LawOrganID
		{
			get
			{
				return this._LawOrganID;
			}
			set
			{
				if ((this._LawOrganID != value))
				{
					if (this._LawOrgan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLawOrganIDChanging(value);
					this.SendPropertyChanging();
					this._LawOrganID = value;
					this.SendPropertyChanged("LawOrganID");
					this.OnLawOrganIDChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsPublished", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsPublished
		{
			get
			{
				return this._IsPublished;
			}
			set
			{
				if ((this._IsPublished != value))
				{
					this.OnIsPublishedChanging(value);
					this.SendPropertyChanging();
					this._IsPublished = value;
					this.SendPropertyChanged("IsPublished");
					this.OnIsPublishedChanged();
				}
			}
		}
		
		[Association(Name="FK_C_LegalDocument_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_LegalDocument.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocument.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_C_LegalDocument_LawOrgan", Storage="_LawOrgan", ThisKey="LawOrganID", OtherKey="LawOrganID", IsForeignKey=true)]
		public C_LawOrgan LawOrgan
		{
			get
			{
				return this._LawOrgan.Entity;
			}
			set
			{
				C_LawOrgan previousValue = this._LawOrgan.Entity;
				if (((previousValue != value) 
							|| (this._LawOrgan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LawOrgan.Entity = null;
						previousValue.C_LegalDocument.Remove(this);
					}
					this._LawOrgan.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocument.Add(this);
						this._LawOrganID = value.LawOrganID;
					}
					else
					{
						this._LawOrganID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LawOrgan");
				}
			}
		}
		
		[Association(Name="FK_C_LegalDocument_Type", Storage="_Type", ThisKey="TypeID", OtherKey="LegalDocumentTypeID", IsForeignKey=true)]
		public C_LegalDocumentType Type
		{
			get
			{
				return this._Type.Entity;
			}
			set
			{
				C_LegalDocumentType previousValue = this._Type.Entity;
				if (((previousValue != value) 
							|| (this._Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type.Entity = null;
						previousValue.C_LegalDocument.Remove(this);
					}
					this._Type.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocument.Add(this);
						this._TypeID = value.LegalDocumentTypeID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("Type");
				}
			}
		}
		
		[Association(Name="FK_C_LegalDocumentCNCategories_C_LegalDocument", Storage="_C_LegalDocumentCNCategories", ThisKey="LegalDocumentID", OtherKey="LegalDocumentID", DeleteRule="CASCADE")]
		public EntitySet<C_LegalDocumentCNCategories> C_LegalDocumentCNCategories
		{
			get
			{
				return this._C_LegalDocumentCNCategories;
			}
			set
			{
				this._C_LegalDocumentCNCategories.Assign(value);
			}
		}
		
		[Association(Name="FK_C_LegalDocumentCNGroups_C_LegalDocument", Storage="_C_LegalDocumentCNGroups", ThisKey="LegalDocumentID", OtherKey="LegalDocumentID", DeleteRule="CASCADE")]
		public EntitySet<C_LegalDocumentCNGroups> C_LegalDocumentCNGroups
		{
			get
			{
				return this._C_LegalDocumentCNGroups;
			}
			set
			{
				this._C_LegalDocumentCNGroups.Assign(value);
			}
		}
		
		[Association(Name="FK_C_LegalDocumentRestrictions_C_LegalDocument", Storage="_C_LegalDocumentRestrictions", ThisKey="LegalDocumentID", OtherKey="LegalDocumentID", DeleteRule="CASCADE")]
		public EntitySet<C_LegalDocumentRestrictions> C_LegalDocumentRestrictions
		{
			get
			{
				return this._C_LegalDocumentRestrictions;
			}
			set
			{
				this._C_LegalDocumentRestrictions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_LegalDocumentCNCategories(C_LegalDocumentCNCategories entity)
		{
			this.SendPropertyChanging();
			entity.C_LegalDocument = this;
		}
		
		private void detach_C_LegalDocumentCNCategories(C_LegalDocumentCNCategories entity)
		{
			this.SendPropertyChanging();
			entity.C_LegalDocument = null;
		}
		
		private void attach_C_LegalDocumentCNGroups(C_LegalDocumentCNGroups entity)
		{
			this.SendPropertyChanging();
			entity.C_LegalDocument = this;
		}
		
		private void detach_C_LegalDocumentCNGroups(C_LegalDocumentCNGroups entity)
		{
			this.SendPropertyChanging();
			entity.C_LegalDocument = null;
		}
		
		private void attach_C_LegalDocumentRestrictions(C_LegalDocumentRestrictions entity)
		{
			this.SendPropertyChanging();
			entity.C_LegalDocument = this;
		}
		
		private void detach_C_LegalDocumentRestrictions(C_LegalDocumentRestrictions entity)
		{
			this.SendPropertyChanging();
			entity.C_LegalDocument = null;
		}
	}
	
	[Table(Name="dbo.C_LegalDocumentCNCategories")]
	public partial class C_LegalDocumentCNCategories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LegalDocumentID;
		
		private int _CNCategoriesID;
		
		private EntityRef<C_LegalDocument> _C_LegalDocument;
		
		private EntityRef<C_CNCategory> _CNCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLegalDocumentIDChanging(int value);
    partial void OnLegalDocumentIDChanged();
    partial void OnCNCategoriesIDChanging(int value);
    partial void OnCNCategoriesIDChanged();
    #endregion
		
		public C_LegalDocumentCNCategories()
		{
			this._C_LegalDocument = default(EntityRef<C_LegalDocument>);
			this._CNCategories = default(EntityRef<C_CNCategory>);
			OnCreated();
		}
		
		[Column(Storage="_LegalDocumentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LegalDocumentID
		{
			get
			{
				return this._LegalDocumentID;
			}
			set
			{
				if ((this._LegalDocumentID != value))
				{
					if (this._C_LegalDocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLegalDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._LegalDocumentID = value;
					this.SendPropertyChanged("LegalDocumentID");
					this.OnLegalDocumentIDChanged();
				}
			}
		}
		
		[Column(Storage="_CNCategoriesID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CNCategoriesID
		{
			get
			{
				return this._CNCategoriesID;
			}
			set
			{
				if ((this._CNCategoriesID != value))
				{
					if (this._CNCategories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoriesIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoriesID = value;
					this.SendPropertyChanged("CNCategoriesID");
					this.OnCNCategoriesIDChanged();
				}
			}
		}
		
		[Association(Name="FK_C_LegalDocumentCNCategories_C_LegalDocument", Storage="_C_LegalDocument", ThisKey="LegalDocumentID", OtherKey="LegalDocumentID", IsForeignKey=true, DeleteOnNull=true)]
		public C_LegalDocument C_LegalDocument
		{
			get
			{
				return this._C_LegalDocument.Entity;
			}
			set
			{
				C_LegalDocument previousValue = this._C_LegalDocument.Entity;
				if (((previousValue != value) 
							|| (this._C_LegalDocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_LegalDocument.Entity = null;
						previousValue.C_LegalDocumentCNCategories.Remove(this);
					}
					this._C_LegalDocument.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocumentCNCategories.Add(this);
						this._LegalDocumentID = value.LegalDocumentID;
					}
					else
					{
						this._LegalDocumentID = default(int);
					}
					this.SendPropertyChanged("C_LegalDocument");
				}
			}
		}
		
		[Association(Name="FK_C_LegalDocumentCNCategories_CNCategories", Storage="_CNCategories", ThisKey="CNCategoriesID", OtherKey="CNCategoryID", IsForeignKey=true, DeleteOnNull=true)]
		public C_CNCategory CNCategories
		{
			get
			{
				return this._CNCategories.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._CNCategories.Entity;
				if (((previousValue != value) 
							|| (this._CNCategories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategories.Entity = null;
						previousValue.C_LegalDocumentCNCategories.Remove(this);
					}
					this._CNCategories.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocumentCNCategories.Add(this);
						this._CNCategoriesID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoriesID = default(int);
					}
					this.SendPropertyChanged("CNCategories");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_LegalDocumentCNGroups")]
	public partial class C_LegalDocumentCNGroups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LegalDocumentID;
		
		private int _CNGroupsID;
		
		private EntityRef<C_LegalDocument> _C_LegalDocument;
		
		private EntityRef<C_CNGroup> _CNGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLegalDocumentIDChanging(int value);
    partial void OnLegalDocumentIDChanged();
    partial void OnCNGroupsIDChanging(int value);
    partial void OnCNGroupsIDChanged();
    #endregion
		
		public C_LegalDocumentCNGroups()
		{
			this._C_LegalDocument = default(EntityRef<C_LegalDocument>);
			this._CNGroups = default(EntityRef<C_CNGroup>);
			OnCreated();
		}
		
		[Column(Storage="_LegalDocumentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LegalDocumentID
		{
			get
			{
				return this._LegalDocumentID;
			}
			set
			{
				if ((this._LegalDocumentID != value))
				{
					if (this._C_LegalDocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLegalDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._LegalDocumentID = value;
					this.SendPropertyChanged("LegalDocumentID");
					this.OnLegalDocumentIDChanged();
				}
			}
		}
		
		[Column(Storage="_CNGroupsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CNGroupsID
		{
			get
			{
				return this._CNGroupsID;
			}
			set
			{
				if ((this._CNGroupsID != value))
				{
					if (this._CNGroups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNGroupsIDChanging(value);
					this.SendPropertyChanging();
					this._CNGroupsID = value;
					this.SendPropertyChanged("CNGroupsID");
					this.OnCNGroupsIDChanged();
				}
			}
		}
		
		[Association(Name="FK_C_LegalDocumentCNGroups_C_LegalDocument", Storage="_C_LegalDocument", ThisKey="LegalDocumentID", OtherKey="LegalDocumentID", IsForeignKey=true, DeleteOnNull=true)]
		public C_LegalDocument C_LegalDocument
		{
			get
			{
				return this._C_LegalDocument.Entity;
			}
			set
			{
				C_LegalDocument previousValue = this._C_LegalDocument.Entity;
				if (((previousValue != value) 
							|| (this._C_LegalDocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_LegalDocument.Entity = null;
						previousValue.C_LegalDocumentCNGroups.Remove(this);
					}
					this._C_LegalDocument.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocumentCNGroups.Add(this);
						this._LegalDocumentID = value.LegalDocumentID;
					}
					else
					{
						this._LegalDocumentID = default(int);
					}
					this.SendPropertyChanged("C_LegalDocument");
				}
			}
		}
		
		[Association(Name="FK_C_LegalDocumentCNGroups_CNGroups", Storage="_CNGroups", ThisKey="CNGroupsID", OtherKey="CNGroupID", IsForeignKey=true, DeleteOnNull=true)]
		public C_CNGroup CNGroups
		{
			get
			{
				return this._CNGroups.Entity;
			}
			set
			{
				C_CNGroup previousValue = this._CNGroups.Entity;
				if (((previousValue != value) 
							|| (this._CNGroups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNGroups.Entity = null;
						previousValue.C_LegalDocumentCNGroups.Remove(this);
					}
					this._CNGroups.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocumentCNGroups.Add(this);
						this._CNGroupsID = value.CNGroupID;
					}
					else
					{
						this._CNGroupsID = default(int);
					}
					this.SendPropertyChanged("CNGroups");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_LegalDocumentRestrictions")]
	public partial class C_LegalDocumentRestrictions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LegalDocumentID;
		
		private int _RestrictionsID;
		
		private EntityRef<C_LegalDocument> _C_LegalDocument;
		
		private EntityRef<C_CatalogRestriction> _Restrictions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLegalDocumentIDChanging(int value);
    partial void OnLegalDocumentIDChanged();
    partial void OnRestrictionsIDChanging(int value);
    partial void OnRestrictionsIDChanged();
    #endregion
		
		public C_LegalDocumentRestrictions()
		{
			this._C_LegalDocument = default(EntityRef<C_LegalDocument>);
			this._Restrictions = default(EntityRef<C_CatalogRestriction>);
			OnCreated();
		}
		
		[Column(Storage="_LegalDocumentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LegalDocumentID
		{
			get
			{
				return this._LegalDocumentID;
			}
			set
			{
				if ((this._LegalDocumentID != value))
				{
					if (this._C_LegalDocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLegalDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._LegalDocumentID = value;
					this.SendPropertyChanged("LegalDocumentID");
					this.OnLegalDocumentIDChanged();
				}
			}
		}
		
		[Column(Storage="_RestrictionsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RestrictionsID
		{
			get
			{
				return this._RestrictionsID;
			}
			set
			{
				if ((this._RestrictionsID != value))
				{
					if (this._Restrictions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRestrictionsIDChanging(value);
					this.SendPropertyChanging();
					this._RestrictionsID = value;
					this.SendPropertyChanged("RestrictionsID");
					this.OnRestrictionsIDChanged();
				}
			}
		}
		
		[Association(Name="FK_C_LegalDocumentRestrictions_C_LegalDocument", Storage="_C_LegalDocument", ThisKey="LegalDocumentID", OtherKey="LegalDocumentID", IsForeignKey=true, DeleteOnNull=true)]
		public C_LegalDocument C_LegalDocument
		{
			get
			{
				return this._C_LegalDocument.Entity;
			}
			set
			{
				C_LegalDocument previousValue = this._C_LegalDocument.Entity;
				if (((previousValue != value) 
							|| (this._C_LegalDocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_LegalDocument.Entity = null;
						previousValue.C_LegalDocumentRestrictions.Remove(this);
					}
					this._C_LegalDocument.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocumentRestrictions.Add(this);
						this._LegalDocumentID = value.LegalDocumentID;
					}
					else
					{
						this._LegalDocumentID = default(int);
					}
					this.SendPropertyChanged("C_LegalDocument");
				}
			}
		}
		
		[Association(Name="FK_C_LegalDocumentRestrictions_Restrictions", Storage="_Restrictions", ThisKey="RestrictionsID", OtherKey="CatalogRestrictionID", IsForeignKey=true, DeleteOnNull=true)]
		public C_CatalogRestriction Restrictions
		{
			get
			{
				return this._Restrictions.Entity;
			}
			set
			{
				C_CatalogRestriction previousValue = this._Restrictions.Entity;
				if (((previousValue != value) 
							|| (this._Restrictions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Restrictions.Entity = null;
						previousValue.C_LegalDocumentRestrictions.Remove(this);
					}
					this._Restrictions.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocumentRestrictions.Add(this);
						this._RestrictionsID = value.CatalogRestrictionID;
					}
					else
					{
						this._RestrictionsID = default(int);
					}
					this.SendPropertyChanged("Restrictions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_LegalDocumentType")]
	public partial class C_LegalDocumentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LegalDocumentTypeID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private EntitySet<C_LegalDocument> _C_LegalDocument;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLegalDocumentTypeIDChanging(int value);
    partial void OnLegalDocumentTypeIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public C_LegalDocumentType()
		{
			this._C_LegalDocument = new EntitySet<C_LegalDocument>(new Action<C_LegalDocument>(this.attach_C_LegalDocument), new Action<C_LegalDocument>(this.detach_C_LegalDocument));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_LegalDocumentTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LegalDocumentTypeID
		{
			get
			{
				return this._LegalDocumentTypeID;
			}
			set
			{
				if ((this._LegalDocumentTypeID != value))
				{
					this.OnLegalDocumentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LegalDocumentTypeID = value;
					this.SendPropertyChanged("LegalDocumentTypeID");
					this.OnLegalDocumentTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_C_LegalDocument_Type", Storage="_C_LegalDocument", ThisKey="LegalDocumentTypeID", OtherKey="TypeID", DeleteRule="NO ACTION")]
		public EntitySet<C_LegalDocument> C_LegalDocument
		{
			get
			{
				return this._C_LegalDocument;
			}
			set
			{
				this._C_LegalDocument.Assign(value);
			}
		}
		
		[Association(Name="FK_C_LegalDocumentType_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_LegalDocumentType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_LegalDocumentType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_LegalDocument(C_LegalDocument entity)
		{
			this.SendPropertyChanging();
			entity.Type = this;
		}
		
		private void detach_C_LegalDocument(C_LegalDocument entity)
		{
			this.SendPropertyChanging();
			entity.Type = null;
		}
	}
	
	[Table(Name="dbo.C_LicenseType")]
	public partial class C_LicenseType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LicenseTypeID;
		
		private string _Title;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private string _SysName;
		
		private EntitySet<C_CNCategoryItem> _C_CNCategoryItem;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<OrderDoc> _OrderDoc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLicenseTypeIDChanging(int value);
    partial void OnLicenseTypeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    #endregion
		
		public C_LicenseType()
		{
			this._C_CNCategoryItem = new EntitySet<C_CNCategoryItem>(new Action<C_CNCategoryItem>(this.attach_C_CNCategoryItem), new Action<C_CNCategoryItem>(this.detach_C_CNCategoryItem));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			OnCreated();
		}
		
		[Column(Storage="_LicenseTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LicenseTypeID
		{
			get
			{
				return this._LicenseTypeID;
			}
			set
			{
				if ((this._LicenseTypeID != value))
				{
					this.OnLicenseTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseTypeID = value;
					this.SendPropertyChanged("LicenseTypeID");
					this.OnLicenseTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryItem_LicenseType", Storage="_C_CNCategoryItem", ThisKey="LicenseTypeID", OtherKey="LicenseTypeID", DeleteRule="NO ACTION")]
		public EntitySet<C_CNCategoryItem> C_CNCategoryItem
		{
			get
			{
				return this._C_CNCategoryItem;
			}
			set
			{
				this._C_CNCategoryItem.Assign(value);
			}
		}
		
		[Association(Name="FK_C_LicenseType_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_LicenseType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_LicenseType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_LicenseType", Storage="_OrderDoc", ThisKey="LicenseTypeID", OtherKey="LicenseTypeID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_CNCategoryItem(C_CNCategoryItem entity)
		{
			this.SendPropertyChanging();
			entity.LicenseType = this;
		}
		
		private void detach_C_CNCategoryItem(C_CNCategoryItem entity)
		{
			this.SendPropertyChanging();
			entity.LicenseType = null;
		}
		
		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.LicenseType = this;
		}
		
		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.LicenseType = null;
		}
	}
	
	[Table(Name="dbo.C_MaxTargetValidity")]
	public partial class C_MaxTargetValidity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaxTargetValidityID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private EntitySet<C_CNCategory> _C_CNCategory;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaxTargetValidityIDChanging(int value);
    partial void OnMaxTargetValidityIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public C_MaxTargetValidity()
		{
			this._C_CNCategory = new EntitySet<C_CNCategory>(new Action<C_CNCategory>(this.attach_C_CNCategory), new Action<C_CNCategory>(this.detach_C_CNCategory));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_MaxTargetValidityID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaxTargetValidityID
		{
			get
			{
				return this._MaxTargetValidityID;
			}
			set
			{
				if ((this._MaxTargetValidityID != value))
				{
					this.OnMaxTargetValidityIDChanging(value);
					this.SendPropertyChanging();
					this._MaxTargetValidityID = value;
					this.SendPropertyChanged("MaxTargetValidityID");
					this.OnMaxTargetValidityIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CNCategory_MaxTargetValidity", Storage="_C_CNCategory", ThisKey="MaxTargetValidityID", OtherKey="MaxTargetValidityID", DeleteRule="NO ACTION")]
		public EntitySet<C_CNCategory> C_CNCategory
		{
			get
			{
				return this._C_CNCategory;
			}
			set
			{
				this._C_CNCategory.Assign(value);
			}
		}
		
		[Association(Name="FK_C_MaxTargetValidity_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_MaxTargetValidity.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_MaxTargetValidity.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_CNCategory(C_CNCategory entity)
		{
			this.SendPropertyChanging();
			entity.MaxTargetValidity = this;
		}
		
		private void detach_C_CNCategory(C_CNCategory entity)
		{
			this.SendPropertyChanging();
			entity.MaxTargetValidity = null;
		}
	}
	
	[Table(Name="dbo.C_Measure")]
	public partial class C_Measure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MeasureID;
		
		private string _Code;
		
		private string _Title;
		
		private string _TitleRus;
		
		private string _TitleEng;
		
		private string _CodeRus;
		
		private string _CodeEng;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private System.Guid _MasterObjectGUID;
		
		private System.Nullable<int> _BaseMeasureID;
		
		private System.Nullable<decimal> _ConversionRate;
		
		private bool _IsDeleted;
		
		private EntitySet<AppendixQuantity> _AppendixQuantity;
		
		private EntitySet<AppendixQuantity> _Measure;
		
		private EntitySet<C_CN> _C_CN;
		
		private EntitySet<C_CN> _C_CN_MeasureCode2;
		
		private EntitySet<C_CN> _C_CN_MeasureCode3;
		
		private EntityRef<C_Measure> _BaseMeasure;
		
		private EntitySet<C_Measure> _C_Measure_BaseMeasure;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<CommodityDocument> _CommodityDocument;
		
		private EntitySet<FactAnnulment> _FactAnnulment;
		
		private EntitySet<FactClose> _FactClose;
		
		private EntitySet<LicenseExecution> _LicenseExecution;
		
		private EntitySet<OrderDoc> _OrderDoc;
		
		private EntitySet<OrderDoc> _OrderDoc_FactShippedMeasure;
		
		private EntitySet<OrderDoc> _OrderDoc_Measure;
		
		private EntitySet<Quota> _Quota;
		
		private EntitySet<SpecificationCommon> _SpecificationCommon;
		
		private EntitySet<SpecificationCommon> _SpecificationCommon_Measure;
		
		private EntitySet<SpecificationItem> _SpecificationItem;
		
		private EntitySet<SpecificationItem> _SpecificationItem_Measure;
		
		private EntitySet<SpecificationItem> _SpecificationItem_Measure3;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMeasureIDChanging(int value);
    partial void OnMeasureIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTitleRusChanging(string value);
    partial void OnTitleRusChanged();
    partial void OnTitleEngChanging(string value);
    partial void OnTitleEngChanged();
    partial void OnCodeRusChanging(string value);
    partial void OnCodeRusChanged();
    partial void OnCodeEngChanging(string value);
    partial void OnCodeEngChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    partial void OnBaseMeasureIDChanging(System.Nullable<int> value);
    partial void OnBaseMeasureIDChanged();
    partial void OnConversionRateChanging(System.Nullable<decimal> value);
    partial void OnConversionRateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public C_Measure()
		{
			this._AppendixQuantity = new EntitySet<AppendixQuantity>(new Action<AppendixQuantity>(this.attach_AppendixQuantity), new Action<AppendixQuantity>(this.detach_AppendixQuantity));
			this._Measure = new EntitySet<AppendixQuantity>(new Action<AppendixQuantity>(this.attach_Measure), new Action<AppendixQuantity>(this.detach_Measure));
			this._C_CN = new EntitySet<C_CN>(new Action<C_CN>(this.attach_C_CN), new Action<C_CN>(this.detach_C_CN));
			this._C_CN_MeasureCode2 = new EntitySet<C_CN>(new Action<C_CN>(this.attach_C_CN_MeasureCode2), new Action<C_CN>(this.detach_C_CN_MeasureCode2));
			this._C_CN_MeasureCode3 = new EntitySet<C_CN>(new Action<C_CN>(this.attach_C_CN_MeasureCode3), new Action<C_CN>(this.detach_C_CN_MeasureCode3));
			this._BaseMeasure = default(EntityRef<C_Measure>);
			this._C_Measure_BaseMeasure = new EntitySet<C_Measure>(new Action<C_Measure>(this.attach_C_Measure_BaseMeasure), new Action<C_Measure>(this.detach_C_Measure_BaseMeasure));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._CommodityDocument = new EntitySet<CommodityDocument>(new Action<CommodityDocument>(this.attach_CommodityDocument), new Action<CommodityDocument>(this.detach_CommodityDocument));
			this._FactAnnulment = new EntitySet<FactAnnulment>(new Action<FactAnnulment>(this.attach_FactAnnulment), new Action<FactAnnulment>(this.detach_FactAnnulment));
			this._FactClose = new EntitySet<FactClose>(new Action<FactClose>(this.attach_FactClose), new Action<FactClose>(this.detach_FactClose));
			this._LicenseExecution = new EntitySet<LicenseExecution>(new Action<LicenseExecution>(this.attach_LicenseExecution), new Action<LicenseExecution>(this.detach_LicenseExecution));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._OrderDoc_FactShippedMeasure = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc_FactShippedMeasure), new Action<OrderDoc>(this.detach_OrderDoc_FactShippedMeasure));
			this._OrderDoc_Measure = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc_Measure), new Action<OrderDoc>(this.detach_OrderDoc_Measure));
			this._Quota = new EntitySet<Quota>(new Action<Quota>(this.attach_Quota), new Action<Quota>(this.detach_Quota));
			this._SpecificationCommon = new EntitySet<SpecificationCommon>(new Action<SpecificationCommon>(this.attach_SpecificationCommon), new Action<SpecificationCommon>(this.detach_SpecificationCommon));
			this._SpecificationCommon_Measure = new EntitySet<SpecificationCommon>(new Action<SpecificationCommon>(this.attach_SpecificationCommon_Measure), new Action<SpecificationCommon>(this.detach_SpecificationCommon_Measure));
			this._SpecificationItem = new EntitySet<SpecificationItem>(new Action<SpecificationItem>(this.attach_SpecificationItem), new Action<SpecificationItem>(this.detach_SpecificationItem));
			this._SpecificationItem_Measure = new EntitySet<SpecificationItem>(new Action<SpecificationItem>(this.attach_SpecificationItem_Measure), new Action<SpecificationItem>(this.detach_SpecificationItem_Measure));
			this._SpecificationItem_Measure3 = new EntitySet<SpecificationItem>(new Action<SpecificationItem>(this.attach_SpecificationItem_Measure3), new Action<SpecificationItem>(this.detach_SpecificationItem_Measure3));
			OnCreated();
		}
		
		[Column(Storage="_MeasureID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_TitleRus", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string TitleRus
		{
			get
			{
				return this._TitleRus;
			}
			set
			{
				if ((this._TitleRus != value))
				{
					this.OnTitleRusChanging(value);
					this.SendPropertyChanging();
					this._TitleRus = value;
					this.SendPropertyChanged("TitleRus");
					this.OnTitleRusChanged();
				}
			}
		}
		
		[Column(Storage="_TitleEng", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string TitleEng
		{
			get
			{
				return this._TitleEng;
			}
			set
			{
				if ((this._TitleEng != value))
				{
					this.OnTitleEngChanging(value);
					this.SendPropertyChanging();
					this._TitleEng = value;
					this.SendPropertyChanged("TitleEng");
					this.OnTitleEngChanged();
				}
			}
		}
		
		[Column(Storage="_CodeRus", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CodeRus
		{
			get
			{
				return this._CodeRus;
			}
			set
			{
				if ((this._CodeRus != value))
				{
					this.OnCodeRusChanging(value);
					this.SendPropertyChanging();
					this._CodeRus = value;
					this.SendPropertyChanged("CodeRus");
					this.OnCodeRusChanged();
				}
			}
		}
		
		[Column(Storage="_CodeEng", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CodeEng
		{
			get
			{
				return this._CodeEng;
			}
			set
			{
				if ((this._CodeEng != value))
				{
					this.OnCodeEngChanging(value);
					this.SendPropertyChanging();
					this._CodeEng = value;
					this.SendPropertyChanged("CodeEng");
					this.OnCodeEngChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_BaseMeasureID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> BaseMeasureID
		{
			get
			{
				return this._BaseMeasureID;
			}
			set
			{
				if ((this._BaseMeasureID != value))
				{
					if (this._BaseMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._BaseMeasureID = value;
					this.SendPropertyChanged("BaseMeasureID");
					this.OnBaseMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_ConversionRate", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ConversionRate
		{
			get
			{
				return this._ConversionRate;
			}
			set
			{
				if ((this._ConversionRate != value))
				{
					this.OnConversionRateChanging(value);
					this.SendPropertyChanging();
					this._ConversionRate = value;
					this.SendPropertyChanged("ConversionRate");
					this.OnConversionRateChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_AppendixQuantity_BoxMeasure", Storage="_AppendixQuantity", ThisKey="MeasureID", OtherKey="BoxMeasureID", DeleteRule="NO ACTION")]
		public EntitySet<AppendixQuantity> AppendixQuantity
		{
			get
			{
				return this._AppendixQuantity;
			}
			set
			{
				this._AppendixQuantity.Assign(value);
			}
		}
		
		[Association(Name="FK_AppendixQuantity_Measure", Storage="_Measure", ThisKey="MeasureID", OtherKey="MeasureID", DeleteRule="NO ACTION")]
		public EntitySet<AppendixQuantity> Measure
		{
			get
			{
				return this._Measure;
			}
			set
			{
				this._Measure.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CN_MeasureCode1", Storage="_C_CN", ThisKey="MeasureID", OtherKey="MeasureCode1ID", DeleteRule="NO ACTION")]
		public EntitySet<C_CN> C_CN
		{
			get
			{
				return this._C_CN;
			}
			set
			{
				this._C_CN.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CN_MeasureCode2", Storage="_C_CN_MeasureCode2", ThisKey="MeasureID", OtherKey="MeasureCode2ID", DeleteRule="NO ACTION")]
		public EntitySet<C_CN> C_CN_MeasureCode2
		{
			get
			{
				return this._C_CN_MeasureCode2;
			}
			set
			{
				this._C_CN_MeasureCode2.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CN_MeasureCode3", Storage="_C_CN_MeasureCode3", ThisKey="MeasureID", OtherKey="MeasureCode3ID", DeleteRule="NO ACTION")]
		public EntitySet<C_CN> C_CN_MeasureCode3
		{
			get
			{
				return this._C_CN_MeasureCode3;
			}
			set
			{
				this._C_CN_MeasureCode3.Assign(value);
			}
		}
		
		[Association(Name="FK_C_Measure_BaseMeasure", Storage="_BaseMeasure", ThisKey="BaseMeasureID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure BaseMeasure
		{
			get
			{
				return this._BaseMeasure.Entity;
			}
			set
			{
				C_Measure previousValue = this._BaseMeasure.Entity;
				if (((previousValue != value) 
							|| (this._BaseMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseMeasure.Entity = null;
						previousValue.C_Measure_BaseMeasure.Remove(this);
					}
					this._BaseMeasure.Entity = value;
					if ((value != null))
					{
						value.C_Measure_BaseMeasure.Add(this);
						this._BaseMeasureID = value.MeasureID;
					}
					else
					{
						this._BaseMeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BaseMeasure");
				}
			}
		}
		
		[Association(Name="FK_C_Measure_BaseMeasure", Storage="_C_Measure_BaseMeasure", ThisKey="MeasureID", OtherKey="BaseMeasureID", DeleteRule="NO ACTION")]
		public EntitySet<C_Measure> C_Measure_BaseMeasure
		{
			get
			{
				return this._C_Measure_BaseMeasure;
			}
			set
			{
				this._C_Measure_BaseMeasure.Assign(value);
			}
		}
		
		[Association(Name="FK_C_Measure_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_Measure.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_Measure.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_CommodityDocument_Measure", Storage="_CommodityDocument", ThisKey="MeasureID", OtherKey="MeasureID", DeleteRule="NO ACTION")]
		public EntitySet<CommodityDocument> CommodityDocument
		{
			get
			{
				return this._CommodityDocument;
			}
			set
			{
				this._CommodityDocument.Assign(value);
			}
		}
		
		[Association(Name="FK_FactAnnulment_FactShippedMeasure", Storage="_FactAnnulment", ThisKey="MeasureID", OtherKey="FactShippedMeasureID", DeleteRule="NO ACTION")]
		public EntitySet<FactAnnulment> FactAnnulment
		{
			get
			{
				return this._FactAnnulment;
			}
			set
			{
				this._FactAnnulment.Assign(value);
			}
		}
		
		[Association(Name="FK_FactClose_FactShippedMeasure", Storage="_FactClose", ThisKey="MeasureID", OtherKey="FactShippedMeasureID", DeleteRule="NO ACTION")]
		public EntitySet<FactClose> FactClose
		{
			get
			{
				return this._FactClose;
			}
			set
			{
				this._FactClose.Assign(value);
			}
		}
		
		[Association(Name="FK_LicenseExecution_Measure", Storage="_LicenseExecution", ThisKey="MeasureID", OtherKey="MeasureID", DeleteRule="NO ACTION")]
		public EntitySet<LicenseExecution> LicenseExecution
		{
			get
			{
				return this._LicenseExecution;
			}
			set
			{
				this._LicenseExecution.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_AddMeasure", Storage="_OrderDoc", ThisKey="MeasureID", OtherKey="AddMeasureID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_FactShippedMeasure", Storage="_OrderDoc_FactShippedMeasure", ThisKey="MeasureID", OtherKey="FactShippedMeasureID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc_FactShippedMeasure
		{
			get
			{
				return this._OrderDoc_FactShippedMeasure;
			}
			set
			{
				this._OrderDoc_FactShippedMeasure.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_Measure", Storage="_OrderDoc_Measure", ThisKey="MeasureID", OtherKey="MeasureID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc_Measure
		{
			get
			{
				return this._OrderDoc_Measure;
			}
			set
			{
				this._OrderDoc_Measure.Assign(value);
			}
		}
		
		[Association(Name="FK_Quota_Measure", Storage="_Quota", ThisKey="MeasureID", OtherKey="MeasureID", DeleteRule="NO ACTION")]
		public EntitySet<Quota> Quota
		{
			get
			{
				return this._Quota;
			}
			set
			{
				this._Quota.Assign(value);
			}
		}
		
		[Association(Name="FK_SpecificationCommon_AdditionalMeasure", Storage="_SpecificationCommon", ThisKey="MeasureID", OtherKey="AdditionalMeasureID", DeleteRule="NO ACTION")]
		public EntitySet<SpecificationCommon> SpecificationCommon
		{
			get
			{
				return this._SpecificationCommon;
			}
			set
			{
				this._SpecificationCommon.Assign(value);
			}
		}
		
		[Association(Name="FK_SpecificationCommon_Measure", Storage="_SpecificationCommon_Measure", ThisKey="MeasureID", OtherKey="MeasureID", DeleteRule="NO ACTION")]
		public EntitySet<SpecificationCommon> SpecificationCommon_Measure
		{
			get
			{
				return this._SpecificationCommon_Measure;
			}
			set
			{
				this._SpecificationCommon_Measure.Assign(value);
			}
		}
		
		[Association(Name="FK_SpecificationItem_AdditionalMeasure", Storage="_SpecificationItem", ThisKey="MeasureID", OtherKey="AdditionalMeasureID", DeleteRule="NO ACTION")]
		public EntitySet<SpecificationItem> SpecificationItem
		{
			get
			{
				return this._SpecificationItem;
			}
			set
			{
				this._SpecificationItem.Assign(value);
			}
		}
		
		[Association(Name="FK_SpecificationItem_Measure", Storage="_SpecificationItem_Measure", ThisKey="MeasureID", OtherKey="MeasureID", DeleteRule="NO ACTION")]
		public EntitySet<SpecificationItem> SpecificationItem_Measure
		{
			get
			{
				return this._SpecificationItem_Measure;
			}
			set
			{
				this._SpecificationItem_Measure.Assign(value);
			}
		}
		
		[Association(Name="FK_SpecificationItem_Measure3", Storage="_SpecificationItem_Measure3", ThisKey="MeasureID", OtherKey="Measure3ID", DeleteRule="NO ACTION")]
		public EntitySet<SpecificationItem> SpecificationItem_Measure3
		{
			get
			{
				return this._SpecificationItem_Measure3;
			}
			set
			{
				this._SpecificationItem_Measure3.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppendixQuantity(AppendixQuantity entity)
		{
			this.SendPropertyChanging();
			entity.BoxMeasure = this;
		}
		
		private void detach_AppendixQuantity(AppendixQuantity entity)
		{
			this.SendPropertyChanging();
			entity.BoxMeasure = null;
		}
		
		private void attach_Measure(AppendixQuantity entity)
		{
			this.SendPropertyChanging();
			entity.Measure = this;
		}
		
		private void detach_Measure(AppendixQuantity entity)
		{
			this.SendPropertyChanging();
			entity.Measure = null;
		}
		
		private void attach_C_CN(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.MeasureCode1 = this;
		}
		
		private void detach_C_CN(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.MeasureCode1 = null;
		}
		
		private void attach_C_CN_MeasureCode2(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.MeasureCode2 = this;
		}
		
		private void detach_C_CN_MeasureCode2(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.MeasureCode2 = null;
		}
		
		private void attach_C_CN_MeasureCode3(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.MeasureCode3 = this;
		}
		
		private void detach_C_CN_MeasureCode3(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.MeasureCode3 = null;
		}
		
		private void attach_C_Measure_BaseMeasure(C_Measure entity)
		{
			this.SendPropertyChanging();
			entity.BaseMeasure = this;
		}
		
		private void detach_C_Measure_BaseMeasure(C_Measure entity)
		{
			this.SendPropertyChanging();
			entity.BaseMeasure = null;
		}
		
		private void attach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.Measure = this;
		}
		
		private void detach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.Measure = null;
		}
		
		private void attach_FactAnnulment(FactAnnulment entity)
		{
			this.SendPropertyChanging();
			entity.FactShippedMeasure = this;
		}
		
		private void detach_FactAnnulment(FactAnnulment entity)
		{
			this.SendPropertyChanging();
			entity.FactShippedMeasure = null;
		}
		
		private void attach_FactClose(FactClose entity)
		{
			this.SendPropertyChanging();
			entity.FactShippedMeasure = this;
		}
		
		private void detach_FactClose(FactClose entity)
		{
			this.SendPropertyChanging();
			entity.FactShippedMeasure = null;
		}
		
		private void attach_LicenseExecution(LicenseExecution entity)
		{
			this.SendPropertyChanging();
			entity.Measure = this;
		}
		
		private void detach_LicenseExecution(LicenseExecution entity)
		{
			this.SendPropertyChanging();
			entity.Measure = null;
		}
		
		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.AddMeasure = this;
		}
		
		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.AddMeasure = null;
		}
		
		private void attach_OrderDoc_FactShippedMeasure(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.FactShippedMeasure = this;
		}
		
		private void detach_OrderDoc_FactShippedMeasure(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.FactShippedMeasure = null;
		}
		
		private void attach_OrderDoc_Measure(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Measure = this;
		}
		
		private void detach_OrderDoc_Measure(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Measure = null;
		}
		
		private void attach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.Measure = this;
		}
		
		private void detach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.Measure = null;
		}
		
		private void attach_SpecificationCommon(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.AdditionalMeasure = this;
		}
		
		private void detach_SpecificationCommon(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.AdditionalMeasure = null;
		}
		
		private void attach_SpecificationCommon_Measure(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.Measure = this;
		}
		
		private void detach_SpecificationCommon_Measure(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.Measure = null;
		}
		
		private void attach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.AdditionalMeasure = this;
		}
		
		private void detach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.AdditionalMeasure = null;
		}
		
		private void attach_SpecificationItem_Measure(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.Measure = this;
		}
		
		private void detach_SpecificationItem_Measure(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.Measure = null;
		}
		
		private void attach_SpecificationItem_Measure3(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.Measure3 = this;
		}
		
		private void detach_SpecificationItem_Measure3(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.Measure3 = null;
		}
	}
	
	[Table(Name="dbo.C_MFC")]
	public partial class C_MFC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MFCID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<OrderDoc> _OrderDoc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMFCIDChanging(int value);
    partial void OnMFCIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public C_MFC()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			OnCreated();
		}
		
		[Column(Storage="_MFCID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MFCID
		{
			get
			{
				return this._MFCID;
			}
			set
			{
				if ((this._MFCID != value))
				{
					this.OnMFCIDChanging(value);
					this.SendPropertyChanging();
					this._MFCID = value;
					this.SendPropertyChanged("MFCID");
					this.OnMFCIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_C_MFC_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_MFC.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_MFC.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_MFC", Storage="_OrderDoc", ThisKey="MFCID", OtherKey="MFCID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.MFC = this;
		}
		
		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.MFC = null;
		}
	}
	
	[Table(Name="dbo.C_OperationType")]
	public partial class C_OperationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OperationTypeID;
		
		private string _Title;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private string _SysName;
		
		private EntitySet<C_CNCategoryOperationType> _C_CNCategoryOperationType;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<CustomsDeclaration> _CustomsDeclaration;
		
		private EntitySet<OrderDoc> _OrderDoc;
		
		private EntitySet<Quota> _Quota;
		
		private EntitySet<QuotaRedistribution> _QuotaRedistribution;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOperationTypeIDChanging(int value);
    partial void OnOperationTypeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    #endregion
		
		public C_OperationType()
		{
			this._C_CNCategoryOperationType = new EntitySet<C_CNCategoryOperationType>(new Action<C_CNCategoryOperationType>(this.attach_C_CNCategoryOperationType), new Action<C_CNCategoryOperationType>(this.detach_C_CNCategoryOperationType));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._CustomsDeclaration = new EntitySet<CustomsDeclaration>(new Action<CustomsDeclaration>(this.attach_CustomsDeclaration), new Action<CustomsDeclaration>(this.detach_CustomsDeclaration));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._Quota = new EntitySet<Quota>(new Action<Quota>(this.attach_Quota), new Action<Quota>(this.detach_Quota));
			this._QuotaRedistribution = new EntitySet<QuotaRedistribution>(new Action<QuotaRedistribution>(this.attach_QuotaRedistribution), new Action<QuotaRedistribution>(this.detach_QuotaRedistribution));
			OnCreated();
		}
		
		[Column(Storage="_OperationTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					this.OnOperationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._OperationTypeID = value;
					this.SendPropertyChanged("OperationTypeID");
					this.OnOperationTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Association(Name="FK_C_CNCategoryOperationType_OperationType", Storage="_C_CNCategoryOperationType", ThisKey="OperationTypeID", OtherKey="OperationTypeID", DeleteRule="CASCADE")]
		public EntitySet<C_CNCategoryOperationType> C_CNCategoryOperationType
		{
			get
			{
				return this._C_CNCategoryOperationType;
			}
			set
			{
				this._C_CNCategoryOperationType.Assign(value);
			}
		}
		
		[Association(Name="FK_C_OperationType_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_OperationType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_OperationType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_CustomsDeclaration_Operation", Storage="_CustomsDeclaration", ThisKey="OperationTypeID", OtherKey="OperationID", DeleteRule="NO ACTION")]
		public EntitySet<CustomsDeclaration> CustomsDeclaration
		{
			get
			{
				return this._CustomsDeclaration;
			}
			set
			{
				this._CustomsDeclaration.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_OperationType", Storage="_OrderDoc", ThisKey="OperationTypeID", OtherKey="OperationTypeID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}
		
		[Association(Name="FK_Quota_OperationType", Storage="_Quota", ThisKey="OperationTypeID", OtherKey="OperationTypeID", DeleteRule="NO ACTION")]
		public EntitySet<Quota> Quota
		{
			get
			{
				return this._Quota;
			}
			set
			{
				this._Quota.Assign(value);
			}
		}
		
		[Association(Name="FK_QuotaRedistribution_OperationType", Storage="_QuotaRedistribution", ThisKey="OperationTypeID", OtherKey="OperationTypeID", DeleteRule="NO ACTION")]
		public EntitySet<QuotaRedistribution> QuotaRedistribution
		{
			get
			{
				return this._QuotaRedistribution;
			}
			set
			{
				this._QuotaRedistribution.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_CNCategoryOperationType(C_CNCategoryOperationType entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = this;
		}
		
		private void detach_C_CNCategoryOperationType(C_CNCategoryOperationType entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = null;
		}
		
		private void attach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.Operation = this;
		}
		
		private void detach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.Operation = null;
		}
		
		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = this;
		}
		
		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = null;
		}
		
		private void attach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = this;
		}
		
		private void detach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = null;
		}
		
		private void attach_QuotaRedistribution(QuotaRedistribution entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = this;
		}
		
		private void detach_QuotaRedistribution(QuotaRedistribution entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = null;
		}
	}
	
	[Table(Name="dbo.C_QuoteCategory")]
	public partial class C_QuoteCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuoteCategoryID;
		
		private string _Code;
		
		private string _Title;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private System.Guid _MasterObjectGUID;
		
		private bool _IsDeleted;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<Quota> _Quota;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuoteCategoryIDChanging(int value);
    partial void OnQuoteCategoryIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public C_QuoteCategory()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Quota = new EntitySet<Quota>(new Action<Quota>(this.attach_Quota), new Action<Quota>(this.detach_Quota));
			OnCreated();
		}
		
		[Column(Storage="_QuoteCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuoteCategoryID
		{
			get
			{
				return this._QuoteCategoryID;
			}
			set
			{
				if ((this._QuoteCategoryID != value))
				{
					this.OnQuoteCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._QuoteCategoryID = value;
					this.SendPropertyChanged("QuoteCategoryID");
					this.OnQuoteCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_C_QuoteCategory_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_QuoteCategory.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_QuoteCategory.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_Quota_QuoteCategory", Storage="_Quota", ThisKey="QuoteCategoryID", OtherKey="QuoteCategoryID", DeleteRule="NO ACTION")]
		public EntitySet<Quota> Quota
		{
			get
			{
				return this._Quota;
			}
			set
			{
				this._Quota.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.QuoteCategory = this;
		}
		
		private void detach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.QuoteCategory = null;
		}
	}
	
	[Table(Name="dbo.C_RES")]
	public partial class C_RES : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RESID;
		
		private string _Country;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _No;
		
		private string _Notes;
		
		private string _Organization;
		
		private System.Nullable<System.DateTime> _ResolutionDate;
		
		private string _ResolutionNo;
		
		private System.Nullable<System.DateTime> _ResolutionValidity;
		
		private string _SectionNo;
		
		private string _Title;
		
		private string _Type;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRESIDChanging(int value);
    partial void OnRESIDChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnNoChanging(string value);
    partial void OnNoChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnOrganizationChanging(string value);
    partial void OnOrganizationChanged();
    partial void OnResolutionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnResolutionDateChanged();
    partial void OnResolutionNoChanging(string value);
    partial void OnResolutionNoChanged();
    partial void OnResolutionValidityChanging(System.Nullable<System.DateTime> value);
    partial void OnResolutionValidityChanged();
    partial void OnSectionNoChanging(string value);
    partial void OnSectionNoChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public C_RES()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_RESID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RESID
		{
			get
			{
				return this._RESID;
			}
			set
			{
				if ((this._RESID != value))
				{
					this.OnRESIDChanging(value);
					this.SendPropertyChanging();
					this._RESID = value;
					this.SendPropertyChanged("RESID");
					this.OnRESIDChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_No", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string No
		{
			get
			{
				return this._No;
			}
			set
			{
				if ((this._No != value))
				{
					this.OnNoChanging(value);
					this.SendPropertyChanging();
					this._No = value;
					this.SendPropertyChanged("No");
					this.OnNoChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_Organization", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Organization
		{
			get
			{
				return this._Organization;
			}
			set
			{
				if ((this._Organization != value))
				{
					this.OnOrganizationChanging(value);
					this.SendPropertyChanging();
					this._Organization = value;
					this.SendPropertyChanged("Organization");
					this.OnOrganizationChanged();
				}
			}
		}
		
		[Column(Storage="_ResolutionDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ResolutionDate
		{
			get
			{
				return this._ResolutionDate;
			}
			set
			{
				if ((this._ResolutionDate != value))
				{
					this.OnResolutionDateChanging(value);
					this.SendPropertyChanging();
					this._ResolutionDate = value;
					this.SendPropertyChanged("ResolutionDate");
					this.OnResolutionDateChanged();
				}
			}
		}
		
		[Column(Storage="_ResolutionNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ResolutionNo
		{
			get
			{
				return this._ResolutionNo;
			}
			set
			{
				if ((this._ResolutionNo != value))
				{
					this.OnResolutionNoChanging(value);
					this.SendPropertyChanging();
					this._ResolutionNo = value;
					this.SendPropertyChanged("ResolutionNo");
					this.OnResolutionNoChanged();
				}
			}
		}
		
		[Column(Storage="_ResolutionValidity", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ResolutionValidity
		{
			get
			{
				return this._ResolutionValidity;
			}
			set
			{
				if ((this._ResolutionValidity != value))
				{
					this.OnResolutionValidityChanging(value);
					this.SendPropertyChanging();
					this._ResolutionValidity = value;
					this.SendPropertyChanged("ResolutionValidity");
					this.OnResolutionValidityChanged();
				}
			}
		}
		
		[Column(Storage="_SectionNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SectionNo
		{
			get
			{
				return this._SectionNo;
			}
			set
			{
				if ((this._SectionNo != value))
				{
					this.OnSectionNoChanging(value);
					this.SendPropertyChanging();
					this._SectionNo = value;
					this.SendPropertyChanged("SectionNo");
					this.OnSectionNoChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Association(Name="FK_C_RES_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_RES.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_RES.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_RFSubject")]
	public partial class C_RFSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RFSubjectID;
		
		private string _Code;
		
		private string _Title;
		
		private string _ShortTitle;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Capital;
		
		private System.Nullable<int> _TimeZoneID;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private System.Guid _MasterObjectGUID;
		
		private bool _IsDeleted;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<N_TimeZone> _TimeZone;
		
		private EntitySet<Contractor> _Contractor;
		
		private EntitySet<HST_Contractor> _HST_Contractor;
		
		private EntitySet<Representation> _Representation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRFSubjectIDChanging(int value);
    partial void OnRFSubjectIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnShortTitleChanging(string value);
    partial void OnShortTitleChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnCapitalChanging(string value);
    partial void OnCapitalChanged();
    partial void OnTimeZoneIDChanging(System.Nullable<int> value);
    partial void OnTimeZoneIDChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public C_RFSubject()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._TimeZone = default(EntityRef<N_TimeZone>);
			this._Contractor = new EntitySet<Contractor>(new Action<Contractor>(this.attach_Contractor), new Action<Contractor>(this.detach_Contractor));
			this._HST_Contractor = new EntitySet<HST_Contractor>(new Action<HST_Contractor>(this.attach_HST_Contractor), new Action<HST_Contractor>(this.detach_HST_Contractor));
			this._Representation = new EntitySet<Representation>(new Action<Representation>(this.attach_Representation), new Action<Representation>(this.detach_Representation));
			OnCreated();
		}
		
		[Column(Storage="_RFSubjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RFSubjectID
		{
			get
			{
				return this._RFSubjectID;
			}
			set
			{
				if ((this._RFSubjectID != value))
				{
					this.OnRFSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._RFSubjectID = value;
					this.SendPropertyChanged("RFSubjectID");
					this.OnRFSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ShortTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShortTitle
		{
			get
			{
				return this._ShortTitle;
			}
			set
			{
				if ((this._ShortTitle != value))
				{
					this.OnShortTitleChanging(value);
					this.SendPropertyChanging();
					this._ShortTitle = value;
					this.SendPropertyChanged("ShortTitle");
					this.OnShortTitleChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Capital", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Capital
		{
			get
			{
				return this._Capital;
			}
			set
			{
				if ((this._Capital != value))
				{
					this.OnCapitalChanging(value);
					this.SendPropertyChanging();
					this._Capital = value;
					this.SendPropertyChanged("Capital");
					this.OnCapitalChanged();
				}
			}
		}
		
		[Column(Storage="_TimeZoneID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> TimeZoneID
		{
			get
			{
				return this._TimeZoneID;
			}
			set
			{
				if ((this._TimeZoneID != value))
				{
					if (this._TimeZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimeZoneIDChanging(value);
					this.SendPropertyChanging();
					this._TimeZoneID = value;
					this.SendPropertyChanged("TimeZoneID");
					this.OnTimeZoneIDChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_C_RFSubject_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_RFSubject.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_RFSubject.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_C_RFSubject_TimeZone", Storage="_TimeZone", ThisKey="TimeZoneID", OtherKey="TimeZoneID", IsForeignKey=true)]
		public N_TimeZone TimeZone
		{
			get
			{
				return this._TimeZone.Entity;
			}
			set
			{
				N_TimeZone previousValue = this._TimeZone.Entity;
				if (((previousValue != value) 
							|| (this._TimeZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimeZone.Entity = null;
						previousValue.C_RFSubject.Remove(this);
					}
					this._TimeZone.Entity = value;
					if ((value != null))
					{
						value.C_RFSubject.Add(this);
						this._TimeZoneID = value.TimeZoneID;
					}
					else
					{
						this._TimeZoneID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TimeZone");
				}
			}
		}
		
		[Association(Name="FK_Contractor_RFSubject", Storage="_Contractor", ThisKey="RFSubjectID", OtherKey="RFSubjectID", DeleteRule="NO ACTION")]
		public EntitySet<Contractor> Contractor
		{
			get
			{
				return this._Contractor;
			}
			set
			{
				this._Contractor.Assign(value);
			}
		}
		
		[Association(Name="FK_HST_Contractor_RFSubject", Storage="_HST_Contractor", ThisKey="RFSubjectID", OtherKey="RFSubjectID", DeleteRule="NO ACTION")]
		public EntitySet<HST_Contractor> HST_Contractor
		{
			get
			{
				return this._HST_Contractor;
			}
			set
			{
				this._HST_Contractor.Assign(value);
			}
		}
		
		[Association(Name="FK_Representation_RFSubject", Storage="_Representation", ThisKey="RFSubjectID", OtherKey="RFSubjectID", DeleteRule="NO ACTION")]
		public EntitySet<Representation> Representation
		{
			get
			{
				return this._Representation;
			}
			set
			{
				this._Representation.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contractor(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.RFSubject = this;
		}
		
		private void detach_Contractor(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.RFSubject = null;
		}
		
		private void attach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.RFSubject = this;
		}
		
		private void detach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.RFSubject = null;
		}
		
		private void attach_Representation(Representation entity)
		{
			this.SendPropertyChanging();
			entity.RFSubject = this;
		}
		
		private void detach_Representation(Representation entity)
		{
			this.SendPropertyChanging();
			entity.RFSubject = null;
		}
	}
	
	[Table(Name="dbo.C_Tariff")]
	public partial class C_Tariff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TariffID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private System.Guid _MasterObjectGUID;
		
		private decimal _Amount;
		
		private string _SysName;
		
		private bool _IsDeleted;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTariffIDChanging(int value);
    partial void OnTariffIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public C_Tariff()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_TariffID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TariffID
		{
			get
			{
				return this._TariffID;
			}
			set
			{
				if ((this._TariffID != value))
				{
					this.OnTariffIDChanging(value);
					this.SendPropertyChanging();
					this._TariffID = value;
					this.SendPropertyChanged("TariffID");
					this.OnTariffIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,5) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_C_Tariff_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_Tariff.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_Tariff.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_UseType")]
	public partial class C_UseType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UseTypeID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private EntitySet<C_FGADocument> _C_FGADocument;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUseTypeIDChanging(int value);
    partial void OnUseTypeIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public C_UseType()
		{
			this._C_FGADocument = new EntitySet<C_FGADocument>(new Action<C_FGADocument>(this.attach_C_FGADocument), new Action<C_FGADocument>(this.detach_C_FGADocument));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_UseTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UseTypeID
		{
			get
			{
				return this._UseTypeID;
			}
			set
			{
				if ((this._UseTypeID != value))
				{
					this.OnUseTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UseTypeID = value;
					this.SendPropertyChanged("UseTypeID");
					this.OnUseTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_C_FGADocument_UseType", Storage="_C_FGADocument", ThisKey="UseTypeID", OtherKey="UseTypeID", DeleteRule="NO ACTION")]
		public EntitySet<C_FGADocument> C_FGADocument
		{
			get
			{
				return this._C_FGADocument;
			}
			set
			{
				this._C_FGADocument.Assign(value);
			}
		}
		
		[Association(Name="FK_C_UseType_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_UseType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_UseType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_FGADocument(C_FGADocument entity)
		{
			this.SendPropertyChanging();
			entity.UseType = this;
		}
		
		private void detach_C_FGADocument(C_FGADocument entity)
		{
			this.SendPropertyChanging();
			entity.UseType = null;
		}
	}
	
	[Table(Name="dbo.C_VisitPurpose")]
	public partial class C_VisitPurpose : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VisitPurposeID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private int _Duration;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private System.Guid _MasterObjectGUID;
		
		private bool _IsDeleted;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<VisitRecord> _VisitRecord;
		
		private EntitySet<VisitSchedulePurposes> _VisitSchedulePurposes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitPurposeIDChanging(int value);
    partial void OnVisitPurposeIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDurationChanging(int value);
    partial void OnDurationChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public C_VisitPurpose()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._VisitRecord = new EntitySet<VisitRecord>(new Action<VisitRecord>(this.attach_VisitRecord), new Action<VisitRecord>(this.detach_VisitRecord));
			this._VisitSchedulePurposes = new EntitySet<VisitSchedulePurposes>(new Action<VisitSchedulePurposes>(this.attach_VisitSchedulePurposes), new Action<VisitSchedulePurposes>(this.detach_VisitSchedulePurposes));
			OnCreated();
		}
		
		[Column(Storage="_VisitPurposeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VisitPurposeID
		{
			get
			{
				return this._VisitPurposeID;
			}
			set
			{
				if ((this._VisitPurposeID != value))
				{
					this.OnVisitPurposeIDChanging(value);
					this.SendPropertyChanging();
					this._VisitPurposeID = value;
					this.SendPropertyChanged("VisitPurposeID");
					this.OnVisitPurposeIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Duration", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_C_VisitPurpose_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_VisitPurpose.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_VisitPurpose.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_VisitRecord_VisitPurpose", Storage="_VisitRecord", ThisKey="VisitPurposeID", OtherKey="VisitPurposeID", DeleteRule="NO ACTION")]
		public EntitySet<VisitRecord> VisitRecord
		{
			get
			{
				return this._VisitRecord;
			}
			set
			{
				this._VisitRecord.Assign(value);
			}
		}
		
		[Association(Name="FK_VisitSchedulePurposes_Purposes", Storage="_VisitSchedulePurposes", ThisKey="VisitPurposeID", OtherKey="PurposesID", DeleteRule="CASCADE")]
		public EntitySet<VisitSchedulePurposes> VisitSchedulePurposes
		{
			get
			{
				return this._VisitSchedulePurposes;
			}
			set
			{
				this._VisitSchedulePurposes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.VisitPurpose = this;
		}
		
		private void detach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.VisitPurpose = null;
		}
		
		private void attach_VisitSchedulePurposes(VisitSchedulePurposes entity)
		{
			this.SendPropertyChanging();
			entity.Purposes = this;
		}
		
		private void detach_VisitSchedulePurposes(VisitSchedulePurposes entity)
		{
			this.SendPropertyChanging();
			entity.Purposes = null;
		}
	}
	
	[Table(Name="dbo.C_VisitWeek")]
	public partial class C_VisitWeek : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VisitWeekID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private int _WeekDay;
		
		private System.DateTime _BeginTime;
		
		private System.DateTime _EndTime;
		
		private int _VisitScheduleID;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<VisitSchedule> _VisitSchedule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitWeekIDChanging(int value);
    partial void OnVisitWeekIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnWeekDayChanging(int value);
    partial void OnWeekDayChanged();
    partial void OnBeginTimeChanging(System.DateTime value);
    partial void OnBeginTimeChanged();
    partial void OnEndTimeChanging(System.DateTime value);
    partial void OnEndTimeChanged();
    partial void OnVisitScheduleIDChanging(int value);
    partial void OnVisitScheduleIDChanged();
    #endregion
		
		public C_VisitWeek()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._VisitSchedule = default(EntityRef<VisitSchedule>);
			OnCreated();
		}
		
		[Column(Storage="_VisitWeekID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VisitWeekID
		{
			get
			{
				return this._VisitWeekID;
			}
			set
			{
				if ((this._VisitWeekID != value))
				{
					this.OnVisitWeekIDChanging(value);
					this.SendPropertyChanging();
					this._VisitWeekID = value;
					this.SendPropertyChanged("VisitWeekID");
					this.OnVisitWeekIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_WeekDay", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int WeekDay
		{
			get
			{
				return this._WeekDay;
			}
			set
			{
				if ((this._WeekDay != value))
				{
					this.OnWeekDayChanging(value);
					this.SendPropertyChanging();
					this._WeekDay = value;
					this.SendPropertyChanged("WeekDay");
					this.OnWeekDayChanged();
				}
			}
		}
		
		[Column(Storage="_BeginTime", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					this.OnBeginTimeChanging(value);
					this.SendPropertyChanging();
					this._BeginTime = value;
					this.SendPropertyChanged("BeginTime");
					this.OnBeginTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[Column(Storage="_VisitScheduleID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VisitScheduleID
		{
			get
			{
				return this._VisitScheduleID;
			}
			set
			{
				if ((this._VisitScheduleID != value))
				{
					if (this._VisitSchedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._VisitScheduleID = value;
					this.SendPropertyChanged("VisitScheduleID");
					this.OnVisitScheduleIDChanged();
				}
			}
		}
		
		[Association(Name="FK_C_VisitWeek_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.C_VisitWeek.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.C_VisitWeek.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_C_VisitWeek_VisitSchedule", Storage="_VisitSchedule", ThisKey="VisitScheduleID", OtherKey="VisitScheduleID", IsForeignKey=true)]
		public VisitSchedule VisitSchedule
		{
			get
			{
				return this._VisitSchedule.Entity;
			}
			set
			{
				VisitSchedule previousValue = this._VisitSchedule.Entity;
				if (((previousValue != value) 
							|| (this._VisitSchedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VisitSchedule.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._VisitSchedule.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._VisitScheduleID = value.VisitScheduleID;
					}
					else
					{
						this._VisitScheduleID = default(int);
					}
					this.SendPropertyChanged("VisitSchedule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CalendarDay")]
	public partial class CalendarDay : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CalendarDayID;
		
		private bool _IsWorkingDay;
		
		private System.DateTime _Date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCalendarDayIDChanging(int value);
    partial void OnCalendarDayIDChanged();
    partial void OnIsWorkingDayChanging(bool value);
    partial void OnIsWorkingDayChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public CalendarDay()
		{
			OnCreated();
		}
		
		[Column(Storage="_CalendarDayID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CalendarDayID
		{
			get
			{
				return this._CalendarDayID;
			}
			set
			{
				if ((this._CalendarDayID != value))
				{
					this.OnCalendarDayIDChanging(value);
					this.SendPropertyChanging();
					this._CalendarDayID = value;
					this.SendPropertyChanged("CalendarDayID");
					this.OnCalendarDayIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsWorkingDay", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsWorkingDay
		{
			get
			{
				return this._IsWorkingDay;
			}
			set
			{
				if ((this._IsWorkingDay != value))
				{
					this.OnIsWorkingDayChanging(value);
					this.SendPropertyChanging();
					this._IsWorkingDay = value;
					this.SendPropertyChanged("IsWorkingDay");
					this.OnIsWorkingDayChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CertificateInfo")]
	public partial class CertificateInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CertificateInfoID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<System.Guid> _ContractorChiefPersonGUID;
		
		private EntityRef<ContractorChiefPerson> _ContractorChiefPerson;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCertificateInfoIDChanging(int value);
    partial void OnCertificateInfoIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnContractorChiefPersonGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnContractorChiefPersonGUIDChanged();
    #endregion
		
		public CertificateInfo()
		{
			this._ContractorChiefPerson = default(EntityRef<ContractorChiefPerson>);
			this._Employee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_CertificateInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CertificateInfoID
		{
			get
			{
				return this._CertificateInfoID;
			}
			set
			{
				if ((this._CertificateInfoID != value))
				{
					this.OnCertificateInfoIDChanging(value);
					this.SendPropertyChanging();
					this._CertificateInfoID = value;
					this.SendPropertyChanged("CertificateInfoID");
					this.OnCertificateInfoIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContractorChiefPersonGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ContractorChiefPersonGUID
		{
			get
			{
				return this._ContractorChiefPersonGUID;
			}
			set
			{
				if ((this._ContractorChiefPersonGUID != value))
				{
					if (this._ContractorChiefPerson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorChiefPersonGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorChiefPersonGUID = value;
					this.SendPropertyChanged("ContractorChiefPersonGUID");
					this.OnContractorChiefPersonGUIDChanged();
				}
			}
		}
		
		[Association(Name="FK_CertificateInfo_ContractorChiefPerson", Storage="_ContractorChiefPerson", ThisKey="ContractorChiefPersonGUID", OtherKey="ContractorChiefPersonGUID", IsForeignKey=true)]
		public ContractorChiefPerson ContractorChiefPerson
		{
			get
			{
				return this._ContractorChiefPerson.Entity;
			}
			set
			{
				ContractorChiefPerson previousValue = this._ContractorChiefPerson.Entity;
				if (((previousValue != value) 
							|| (this._ContractorChiefPerson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractorChiefPerson.Entity = null;
						previousValue.CertificateInfo.Remove(this);
					}
					this._ContractorChiefPerson.Entity = value;
					if ((value != null))
					{
						value.CertificateInfo.Add(this);
						this._ContractorChiefPersonGUID = value.ContractorChiefPersonGUID;
					}
					else
					{
						this._ContractorChiefPersonGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ContractorChiefPerson");
				}
			}
		}
		
		[Association(Name="FK_CertificateInfo_Employee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.CertificateInfo.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.CertificateInfo.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_CertificateInfo_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.CertificateInfo.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.CertificateInfo.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CommodityDocument")]
	public partial class CommodityDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CommodityDocumentGUID;
		
		private string _Title;
		
		private System.Nullable<System.DateTime> _DocDate;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<decimal> _ResolvedQuantity;
		
		private int _SeqNo;
		
		private System.Guid _OrderDocGUID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private System.Nullable<int> _MeasureID;
		
		private System.Nullable<int> _Pages;
		
		private string _LawOrgan;
		
		private string _DocumentType;
		
		private System.Nullable<System.Guid> _Guid;
		
		private string _DocNo;
		
		private System.Nullable<decimal> _OldID;
		
		private bool _IsAttach;
		
		private bool _IsCommDoc;
		
		private System.Nullable<int> _SourceTypeID;
		
		private System.Nullable<int> _FGAID;
		
		private bool _IsRequestFromSMEV;
		
		private bool _IsFromApplicant;
		
		private char _SMEVStatusCode;
		
		private string _SMEVRejectionMessage;
		
		private string _AddInfo;
		
		private string _SysName;
		
		private System.Nullable<System.Guid> _FileExGUID;
		
		private System.Nullable<int> _DocumentTypeID;
		
		private System.Nullable<System.Guid> _RequestKey;
		
		private bool _OutOfDate;
		
		private System.Nullable<int> _SeqNoPass;
		
		private string _PrintTitle;
		
		private bool _IsFileFromSMEV;
		
		private System.Nullable<System.DateTime> _SMEVStatusDate;
		
		private System.Nullable<System.Guid> _SignatureGUID;
		
		private System.Nullable<int> _FGADocumentID;
		
		private bool _IsFileFromSite;
		
		private System.DateTime _CreateDate;
		
		private System.Nullable<bool> _IsSignatureValid;
		
		private string _Properties;
		
		private System.Nullable<System.DateTime> _SignDate;
		
		private string _Info;
		
		private bool _IsExclude;

        private bool _IsFromSystem;

        private EntitySet<AppendixCommDocs> _AppendixCommDocs;
		
		private EntityRef<C_FGA> _FGA;
		
		private EntityRef<C_FGADocument> _FGADocument;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<C_Measure> _Measure;
		
		private EntityRef<OrderDoc> _OrderDoc;
		
		private EntityRef<C_DocumentSourceType> _SourceType;
		
		private EntityRef<DbFile> _FileEx;
		
		private EntityRef<DbFile> _Signature;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommodityDocumentGUIDChanging(System.Guid value);
    partial void OnCommodityDocumentGUIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDocDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDocDateChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnResolvedQuantityChanging(System.Nullable<decimal> value);
    partial void OnResolvedQuantityChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnOrderDocGUIDChanging(System.Guid value);
    partial void OnOrderDocGUIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnMeasureIDChanging(System.Nullable<int> value);
    partial void OnMeasureIDChanged();
    partial void OnPagesChanging(System.Nullable<int> value);
    partial void OnPagesChanged();
    partial void OnLawOrganChanging(string value);
    partial void OnLawOrganChanged();
    partial void OnDocumentTypeChanging(string value);
    partial void OnDocumentTypeChanged();
    partial void OnGuidChanging(System.Nullable<System.Guid> value);
    partial void OnGuidChanged();
    partial void OnDocNoChanging(string value);
    partial void OnDocNoChanged();
    partial void OnOldIDChanging(System.Nullable<decimal> value);
    partial void OnOldIDChanged();
    partial void OnIsAttachChanging(bool value);
    partial void OnIsAttachChanged();
    partial void OnIsCommDocChanging(bool value);
    partial void OnIsCommDocChanged();
    partial void OnSourceTypeIDChanging(System.Nullable<int> value);
    partial void OnSourceTypeIDChanged();
    partial void OnFGAIDChanging(System.Nullable<int> value);
    partial void OnFGAIDChanged();
    partial void OnIsRequestFromSMEVChanging(bool value);
    partial void OnIsRequestFromSMEVChanged();
    partial void OnIsFromApplicantChanging(bool value);
    partial void OnIsFromApplicantChanged();
    partial void OnSMEVStatusCodeChanging(char value);
    partial void OnSMEVStatusCodeChanged();
    partial void OnSMEVRejectionMessageChanging(string value);
    partial void OnSMEVRejectionMessageChanged();
    partial void OnAddInfoChanging(string value);
    partial void OnAddInfoChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnFileExGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFileExGUIDChanged();
    partial void OnDocumentTypeIDChanging(System.Nullable<int> value);
    partial void OnDocumentTypeIDChanged();
    partial void OnRequestKeyChanging(System.Nullable<System.Guid> value);
    partial void OnRequestKeyChanged();
    partial void OnOutOfDateChanging(bool value);
    partial void OnOutOfDateChanged();
    partial void OnSeqNoPassChanging(System.Nullable<int> value);
    partial void OnSeqNoPassChanged();
    partial void OnPrintTitleChanging(string value);
    partial void OnPrintTitleChanged();
    partial void OnIsFileFromSMEVChanging(bool value);
    partial void OnIsFileFromSMEVChanged();
    partial void OnSMEVStatusDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSMEVStatusDateChanged();
    partial void OnSignatureGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnSignatureGUIDChanged();
    partial void OnFGADocumentIDChanging(System.Nullable<int> value);
    partial void OnFGADocumentIDChanged();
    partial void OnIsFileFromSiteChanging(bool value);
    partial void OnIsFileFromSiteChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnIsSignatureValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureValidChanged();
    partial void OnPropertiesChanging(string value);
    partial void OnPropertiesChanged();
    partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateChanged();
    partial void OnInfoChanging(string value);
    partial void OnInfoChanged();
    partial void OnIsExcludeChanging(bool value);
    partial void OnIsExcludeChanged();
    partial void OnIsFromSystemChanging(bool value);
    partial void OnIsFromSystemChanged();
    #endregion
		
		public CommodityDocument()
		{
			this._AppendixCommDocs = new EntitySet<AppendixCommDocs>(new Action<AppendixCommDocs>(this.attach_AppendixCommDocs), new Action<AppendixCommDocs>(this.detach_AppendixCommDocs));
			this._FGA = default(EntityRef<C_FGA>);
			this._FGADocument = default(EntityRef<C_FGADocument>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Measure = default(EntityRef<C_Measure>);
			this._OrderDoc = default(EntityRef<OrderDoc>);
			this._SourceType = default(EntityRef<C_DocumentSourceType>);
			this._FileEx = default(EntityRef<DbFile>);
			this._Signature = default(EntityRef<DbFile>);
			OnCreated();
		}
		
		[Column(Storage="_CommodityDocumentGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CommodityDocumentGUID
		{
			get
			{
				return this._CommodityDocumentGUID;
			}
			set
			{
				if ((this._CommodityDocumentGUID != value))
				{
					this.OnCommodityDocumentGUIDChanging(value);
					this.SendPropertyChanging();
					this._CommodityDocumentGUID = value;
					this.SendPropertyChanged("CommodityDocumentGUID");
					this.OnCommodityDocumentGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_DocDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this.OnDocDateChanging(value);
					this.SendPropertyChanging();
					this._DocDate = value;
					this.SendPropertyChanged("DocDate");
					this.OnDocDateChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_ResolvedQuantity", DbType="Decimal(20,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedQuantity
		{
			get
			{
				return this._ResolvedQuantity;
			}
			set
			{
				if ((this._ResolvedQuantity != value))
				{
					this.OnResolvedQuantityChanging(value);
					this.SendPropertyChanging();
					this._ResolvedQuantity = value;
					this.SendPropertyChanged("ResolvedQuantity");
					this.OnResolvedQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDocGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					if (this._Measure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_Pages", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				if ((this._Pages != value))
				{
					this.OnPagesChanging(value);
					this.SendPropertyChanging();
					this._Pages = value;
					this.SendPropertyChanged("Pages");
					this.OnPagesChanged();
				}
			}
		}
		
		[Column(Storage="_LawOrgan", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string LawOrgan
		{
			get
			{
				return this._LawOrgan;
			}
			set
			{
				if ((this._LawOrgan != value))
				{
					this.OnLawOrganChanging(value);
					this.SendPropertyChanging();
					this._LawOrgan = value;
					this.SendPropertyChanged("LawOrgan");
					this.OnLawOrganChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentType", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DocumentType
		{
			get
			{
				return this._DocumentType;
			}
			set
			{
				if ((this._DocumentType != value))
				{
					this.OnDocumentTypeChanging(value);
					this.SendPropertyChanging();
					this._DocumentType = value;
					this.SendPropertyChanged("DocumentType");
					this.OnDocumentTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_DocNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DocNo
		{
			get
			{
				return this._DocNo;
			}
			set
			{
				if ((this._DocNo != value))
				{
					this.OnDocNoChanging(value);
					this.SendPropertyChanging();
					this._DocNo = value;
					this.SendPropertyChanged("DocNo");
					this.OnDocNoChanged();
				}
			}
		}
		
		[Column(Storage="_OldID", DbType="Decimal(14,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsAttach", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsAttach
		{
			get
			{
				return this._IsAttach;
			}
			set
			{
				if ((this._IsAttach != value))
				{
					this.OnIsAttachChanging(value);
					this.SendPropertyChanging();
					this._IsAttach = value;
					this.SendPropertyChanged("IsAttach");
					this.OnIsAttachChanged();
				}
			}
		}
		
		[Column(Storage="_IsCommDoc", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsCommDoc
		{
			get
			{
				return this._IsCommDoc;
			}
			set
			{
				if ((this._IsCommDoc != value))
				{
					this.OnIsCommDocChanging(value);
					this.SendPropertyChanging();
					this._IsCommDoc = value;
					this.SendPropertyChanged("IsCommDoc");
					this.OnIsCommDocChanged();
				}
			}
		}
		
		[Column(Storage="_SourceTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SourceTypeID
		{
			get
			{
				return this._SourceTypeID;
			}
			set
			{
				if ((this._SourceTypeID != value))
				{
					if (this._SourceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SourceTypeID = value;
					this.SendPropertyChanged("SourceTypeID");
					this.OnSourceTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_FGAID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FGAID
		{
			get
			{
				return this._FGAID;
			}
			set
			{
				if ((this._FGAID != value))
				{
					if (this._FGA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFGAIDChanging(value);
					this.SendPropertyChanging();
					this._FGAID = value;
					this.SendPropertyChanged("FGAID");
					this.OnFGAIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsRequestFromSMEV", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsRequestFromSMEV
		{
			get
			{
				return this._IsRequestFromSMEV;
			}
			set
			{
				if ((this._IsRequestFromSMEV != value))
				{
					this.OnIsRequestFromSMEVChanging(value);
					this.SendPropertyChanging();
					this._IsRequestFromSMEV = value;
					this.SendPropertyChanged("IsRequestFromSMEV");
					this.OnIsRequestFromSMEVChanged();
				}
			}
		}
		
		[Column(Storage="_IsFromApplicant", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsFromApplicant
		{
			get
			{
				return this._IsFromApplicant;
			}
			set
			{
				if ((this._IsFromApplicant != value))
				{
					this.OnIsFromApplicantChanging(value);
					this.SendPropertyChanging();
					this._IsFromApplicant = value;
					this.SendPropertyChanged("IsFromApplicant");
					this.OnIsFromApplicantChanged();
				}
			}
		}
		
		[Column(Storage="_SMEVStatusCode", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char SMEVStatusCode
		{
			get
			{
				return this._SMEVStatusCode;
			}
			set
			{
				if ((this._SMEVStatusCode != value))
				{
					this.OnSMEVStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._SMEVStatusCode = value;
					this.SendPropertyChanged("SMEVStatusCode");
					this.OnSMEVStatusCodeChanged();
				}
			}
		}
		
		[Column(Storage="_SMEVRejectionMessage", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SMEVRejectionMessage
		{
			get
			{
				return this._SMEVRejectionMessage;
			}
			set
			{
				if ((this._SMEVRejectionMessage != value))
				{
					this.OnSMEVRejectionMessageChanging(value);
					this.SendPropertyChanging();
					this._SMEVRejectionMessage = value;
					this.SendPropertyChanged("SMEVRejectionMessage");
					this.OnSMEVRejectionMessageChanged();
				}
			}
		}
		
		[Column(Storage="_AddInfo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string AddInfo
		{
			get
			{
				return this._AddInfo;
			}
			set
			{
				if ((this._AddInfo != value))
				{
					this.OnAddInfoChanging(value);
					this.SendPropertyChanging();
					this._AddInfo = value;
					this.SendPropertyChanged("AddInfo");
					this.OnAddInfoChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_FileExGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileExGUID
		{
			get
			{
				return this._FileExGUID;
			}
			set
			{
				if ((this._FileExGUID != value))
				{
					if (this._FileEx.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileExGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileExGUID = value;
					this.SendPropertyChanged("FileExGUID");
					this.OnFileExGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DocumentTypeID
		{
			get
			{
				return this._DocumentTypeID;
			}
			set
			{
				if ((this._DocumentTypeID != value))
				{
					this.OnDocumentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentTypeID = value;
					this.SendPropertyChanged("DocumentTypeID");
					this.OnDocumentTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_RequestKey", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> RequestKey
		{
			get
			{
				return this._RequestKey;
			}
			set
			{
				if ((this._RequestKey != value))
				{
					this.OnRequestKeyChanging(value);
					this.SendPropertyChanging();
					this._RequestKey = value;
					this.SendPropertyChanged("RequestKey");
					this.OnRequestKeyChanged();
				}
			}
		}
		
		[Column(Storage="_OutOfDate", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool OutOfDate
		{
			get
			{
				return this._OutOfDate;
			}
			set
			{
				if ((this._OutOfDate != value))
				{
					this.OnOutOfDateChanging(value);
					this.SendPropertyChanging();
					this._OutOfDate = value;
					this.SendPropertyChanged("OutOfDate");
					this.OnOutOfDateChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNoPass", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SeqNoPass
		{
			get
			{
				return this._SeqNoPass;
			}
			set
			{
				if ((this._SeqNoPass != value))
				{
					this.OnSeqNoPassChanging(value);
					this.SendPropertyChanging();
					this._SeqNoPass = value;
					this.SendPropertyChanged("SeqNoPass");
					this.OnSeqNoPassChanged();
				}
			}
		}
		
		[Column(Storage="_PrintTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PrintTitle
		{
			get
			{
				return this._PrintTitle;
			}
			set
			{
				if ((this._PrintTitle != value))
				{
					this.OnPrintTitleChanging(value);
					this.SendPropertyChanging();
					this._PrintTitle = value;
					this.SendPropertyChanged("PrintTitle");
					this.OnPrintTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsFileFromSMEV", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsFileFromSMEV
		{
			get
			{
				return this._IsFileFromSMEV;
			}
			set
			{
				if ((this._IsFileFromSMEV != value))
				{
					this.OnIsFileFromSMEVChanging(value);
					this.SendPropertyChanging();
					this._IsFileFromSMEV = value;
					this.SendPropertyChanged("IsFileFromSMEV");
					this.OnIsFileFromSMEVChanged();
				}
			}
		}
		
		[Column(Storage="_SMEVStatusDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SMEVStatusDate
		{
			get
			{
				return this._SMEVStatusDate;
			}
			set
			{
				if ((this._SMEVStatusDate != value))
				{
					this.OnSMEVStatusDateChanging(value);
					this.SendPropertyChanging();
					this._SMEVStatusDate = value;
					this.SendPropertyChanged("SMEVStatusDate");
					this.OnSMEVStatusDateChanged();
				}
			}
		}
		
		[Column(Storage="_SignatureGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> SignatureGUID
		{
			get
			{
				return this._SignatureGUID;
			}
			set
			{
				if ((this._SignatureGUID != value))
				{
					if (this._Signature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSignatureGUIDChanging(value);
					this.SendPropertyChanging();
					this._SignatureGUID = value;
					this.SendPropertyChanged("SignatureGUID");
					this.OnSignatureGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_FGADocumentID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FGADocumentID
		{
			get
			{
				return this._FGADocumentID;
			}
			set
			{
				if ((this._FGADocumentID != value))
				{
					if (this._FGADocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFGADocumentIDChanging(value);
					this.SendPropertyChanging();
					this._FGADocumentID = value;
					this.SendPropertyChanged("FGADocumentID");
					this.OnFGADocumentIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsFileFromSite", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsFileFromSite
		{
			get
			{
				return this._IsFileFromSite;
			}
			set
			{
				if ((this._IsFileFromSite != value))
				{
					this.OnIsFileFromSiteChanging(value);
					this.SendPropertyChanging();
					this._IsFileFromSite = value;
					this.SendPropertyChanged("IsFileFromSite");
					this.OnIsFileFromSiteChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureValid
		{
			get
			{
				return this._IsSignatureValid;
			}
			set
			{
				if ((this._IsSignatureValid != value))
				{
					this.OnIsSignatureValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureValid = value;
					this.SendPropertyChanged("IsSignatureValid");
					this.OnIsSignatureValidChanged();
				}
			}
		}
		
		[Column(Storage="_Properties", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Properties
		{
			get
			{
				return this._Properties;
			}
			set
			{
				if ((this._Properties != value))
				{
					this.OnPropertiesChanging(value);
					this.SendPropertyChanging();
					this._Properties = value;
					this.SendPropertyChanged("Properties");
					this.OnPropertiesChanged();
				}
			}
		}
		
		[Column(Storage="_SignDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}
		
		[Column(Storage="_Info", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		[Column(Storage="_IsExclude", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsExclude
		{
			get
			{
				return this._IsExclude;
			}
			set
			{
				if ((this._IsExclude != value))
				{
					this.OnIsExcludeChanging(value);
					this.SendPropertyChanging();
					this._IsExclude = value;
					this.SendPropertyChanged("IsExclude");
					this.OnIsExcludeChanged();
				}
			}
		}

        [Column(Storage = "_IsFromSystem", DbType = "Bit NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool IsFromSystem
        {
            get
            {
                return this._IsFromSystem;
            }
            set
            {
                if ((this._IsFromSystem != value))
                {
                    this.OnIsFromSystemChanging(value);
                    this.SendPropertyChanging();
                    this._IsFromSystem = value;
                    this.SendPropertyChanged("IsFromSystem");
                    this.OnIsFromSystemChanged();
                }
            }
        }

        [Association(Name="FK_AppendixCommDocs_CommDocs", Storage="_AppendixCommDocs", ThisKey="CommodityDocumentGUID", OtherKey="CommDocsGUID", DeleteRule="CASCADE")]
		public EntitySet<AppendixCommDocs> AppendixCommDocs
		{
			get
			{
				return this._AppendixCommDocs;
			}
			set
			{
				this._AppendixCommDocs.Assign(value);
			}
		}
		
		[Association(Name="FK_CommodityDocument_FGA", Storage="_FGA", ThisKey="FGAID", OtherKey="FGAID", IsForeignKey=true)]
		public C_FGA FGA
		{
			get
			{
				return this._FGA.Entity;
			}
			set
			{
				C_FGA previousValue = this._FGA.Entity;
				if (((previousValue != value) 
							|| (this._FGA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FGA.Entity = null;
						previousValue.CommodityDocument.Remove(this);
					}
					this._FGA.Entity = value;
					if ((value != null))
					{
						value.CommodityDocument.Add(this);
						this._FGAID = value.FGAID;
					}
					else
					{
						this._FGAID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FGA");
				}
			}
		}
		
		[Association(Name="FK_CommodityDocument_FGADocument", Storage="_FGADocument", ThisKey="FGADocumentID", OtherKey="FGADocumentID", IsForeignKey=true)]
		public C_FGADocument FGADocument
		{
			get
			{
				return this._FGADocument.Entity;
			}
			set
			{
				C_FGADocument previousValue = this._FGADocument.Entity;
				if (((previousValue != value) 
							|| (this._FGADocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FGADocument.Entity = null;
						previousValue.CommodityDocument.Remove(this);
					}
					this._FGADocument.Entity = value;
					if ((value != null))
					{
						value.CommodityDocument.Add(this);
						this._FGADocumentID = value.FGADocumentID;
					}
					else
					{
						this._FGADocumentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FGADocument");
				}
			}
		}
		
		[Association(Name="FK_CommodityDocument_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.CommodityDocument.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.CommodityDocument.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_CommodityDocument_Measure", Storage="_Measure", ThisKey="MeasureID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure Measure
		{
			get
			{
				return this._Measure.Entity;
			}
			set
			{
				C_Measure previousValue = this._Measure.Entity;
				if (((previousValue != value) 
							|| (this._Measure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure.Entity = null;
						previousValue.CommodityDocument.Remove(this);
					}
					this._Measure.Entity = value;
					if ((value != null))
					{
						value.CommodityDocument.Add(this);
						this._MeasureID = value.MeasureID;
					}
					else
					{
						this._MeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Measure");
				}
			}
		}
		
		[Association(Name="FK_CommodityDocument_OrderDoc", Storage="_OrderDoc", ThisKey="OrderDocGUID", OtherKey="OrderGUID", IsForeignKey=true, DeleteOnNull=true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value) 
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.CommodityDocs.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.CommodityDocs.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}
		
		[Association(Name="FK_CommodityDocument_SourceType", Storage="_SourceType", ThisKey="SourceTypeID", OtherKey="DocumentSourceTypeID", IsForeignKey=true)]
		public C_DocumentSourceType SourceType
		{
			get
			{
				return this._SourceType.Entity;
			}
			set
			{
				C_DocumentSourceType previousValue = this._SourceType.Entity;
				if (((previousValue != value) 
							|| (this._SourceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SourceType.Entity = null;
						previousValue.CommodityDocument.Remove(this);
					}
					this._SourceType.Entity = value;
					if ((value != null))
					{
						value.CommodityDocument.Add(this);
						this._SourceTypeID = value.DocumentSourceTypeID;
					}
					else
					{
						this._SourceTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SourceType");
				}
			}
		}
		
		[Association(Name="FK_CommodityDocument_FileEx", Storage="_FileEx", ThisKey="FileExGUID", OtherKey="ID", IsForeignKey=true)]
		public DbFile FileEx
		{
			get
			{
				return this._FileEx.Entity;
			}
			set
			{
				if ((this._FileEx.Entity != value))
				{
					this.SendPropertyChanging();
					this._FileEx.Entity = value;
					this.SendPropertyChanged("FileEx");
				}
			}
		}
		
		[Association(Name="FK_CommodityDocument_Signature", Storage="_Signature", ThisKey="SignatureGUID", OtherKey="ID", IsForeignKey=true)]
		public DbFile Signature
		{
			get
			{
				return this._Signature.Entity;
			}
			set
			{
				if ((this._Signature.Entity != value))
				{
					this.SendPropertyChanging();
					this._Signature.Entity = value;
					this.SendPropertyChanged("Signature");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppendixCommDocs(AppendixCommDocs entity)
		{
			this.SendPropertyChanging();
			entity.CommDocs = this;
		}
		
		private void detach_AppendixCommDocs(AppendixCommDocs entity)
		{
			this.SendPropertyChanging();
			entity.CommDocs = null;
		}
	}
	
	[Table(Name="dbo.Contractor")]
	public partial class Contractor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ContractorGUID;
		
		private string _INN;
		
		private string _OKPO;
		
		private char _ContractorType;
		
		private string _Title;
		
		private string _ShortName;
		
		private string _JuridicalAddress;
		
		private string _PostAddress;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Email;
		
		private string _PassportNumber;
		
		private string _PassportSerial;
		
		private string _PassportIssuedBy;
		
		private System.Nullable<System.DateTime> _PassportIssuedDate;
		
		private System.Nullable<int> _CreatorRepresentationID;
		
		private string _AddInfo;
		
		private string _EGRUL;
		
		private System.Nullable<System.DateTime> _CloseDate;
		
		private System.Nullable<System.Guid> _PrevContractorGUID;
		
		private int _CountryID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private System.Nullable<decimal> _OldID;
		
		private bool _IsPersonal;
		
		private System.Nullable<int> _RFSubjectID;
		
		private string _BankTitle;
		
		private string _BankAddress;
		
		private string _BankBIK;
		
		private string _BankAccount;
		
		private string _BankCorrespondentAccount;
		
		private string _KPP;
		
		private string _Status;
		
		private EntityRef<C_Country> _Country;
		
		private EntityRef<Representation> _CreatorRepresentation;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<Contractor> _PrevContractor;
		
		private EntitySet<Contractor> _ContractorGU;
		
		private EntityRef<C_RFSubject> _RFSubject;
		
		private EntitySet<ContractorChiefPerson> _ChiefPersons;
		
		private EntitySet<ForeignAuthorization> _ForeignAuthorization;
		
		private EntitySet<HST_Contractor> _HST_Contractor;
		
		private EntitySet<HST_Contractor> _HST_Contractor_PrevContractor;
		
		private EntitySet<PaymentOrder> _PaymentOrder;
		
		private EntitySet<QuotaDistribution> _QuotaDistribution;
		
		private EntitySet<TreasuryPayment> _TreasuryPayment;
		
		private EntitySet<VisitRecord> _VisitRecord;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractorGUIDChanging(System.Guid value);
    partial void OnContractorGUIDChanged();
    partial void OnINNChanging(string value);
    partial void OnINNChanged();
    partial void OnOKPOChanging(string value);
    partial void OnOKPOChanged();
    partial void OnContractorTypeChanging(char value);
    partial void OnContractorTypeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnJuridicalAddressChanging(string value);
    partial void OnJuridicalAddressChanged();
    partial void OnPostAddressChanging(string value);
    partial void OnPostAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPassportNumberChanging(string value);
    partial void OnPassportNumberChanged();
    partial void OnPassportSerialChanging(string value);
    partial void OnPassportSerialChanged();
    partial void OnPassportIssuedByChanging(string value);
    partial void OnPassportIssuedByChanged();
    partial void OnPassportIssuedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPassportIssuedDateChanged();
    partial void OnCreatorRepresentationIDChanging(System.Nullable<int> value);
    partial void OnCreatorRepresentationIDChanged();
    partial void OnAddInfoChanging(string value);
    partial void OnAddInfoChanged();
    partial void OnEGRULChanging(string value);
    partial void OnEGRULChanged();
    partial void OnCloseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCloseDateChanged();
    partial void OnPrevContractorGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnPrevContractorGUIDChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnOldIDChanging(System.Nullable<decimal> value);
    partial void OnOldIDChanged();
    partial void OnIsPersonalChanging(bool value);
    partial void OnIsPersonalChanged();
    partial void OnRFSubjectIDChanging(System.Nullable<int> value);
    partial void OnRFSubjectIDChanged();
    partial void OnBankTitleChanging(string value);
    partial void OnBankTitleChanged();
    partial void OnBankAddressChanging(string value);
    partial void OnBankAddressChanged();
    partial void OnBankBIKChanging(string value);
    partial void OnBankBIKChanged();
    partial void OnBankAccountChanging(string value);
    partial void OnBankAccountChanged();
    partial void OnBankCorrespondentAccountChanging(string value);
    partial void OnBankCorrespondentAccountChanged();
    partial void OnKPPChanging(string value);
    partial void OnKPPChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Contractor()
		{
			this._Country = default(EntityRef<C_Country>);
			this._CreatorRepresentation = default(EntityRef<Representation>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._PrevContractor = default(EntityRef<Contractor>);
			this._ContractorGU = new EntitySet<Contractor>(new Action<Contractor>(this.attach_ContractorGU), new Action<Contractor>(this.detach_ContractorGU));
			this._RFSubject = default(EntityRef<C_RFSubject>);
			this._ChiefPersons = new EntitySet<ContractorChiefPerson>(new Action<ContractorChiefPerson>(this.attach_ChiefPersons), new Action<ContractorChiefPerson>(this.detach_ChiefPersons));
			this._ForeignAuthorization = new EntitySet<ForeignAuthorization>(new Action<ForeignAuthorization>(this.attach_ForeignAuthorization), new Action<ForeignAuthorization>(this.detach_ForeignAuthorization));
			this._HST_Contractor = new EntitySet<HST_Contractor>(new Action<HST_Contractor>(this.attach_HST_Contractor), new Action<HST_Contractor>(this.detach_HST_Contractor));
			this._HST_Contractor_PrevContractor = new EntitySet<HST_Contractor>(new Action<HST_Contractor>(this.attach_HST_Contractor_PrevContractor), new Action<HST_Contractor>(this.detach_HST_Contractor_PrevContractor));
			this._PaymentOrder = new EntitySet<PaymentOrder>(new Action<PaymentOrder>(this.attach_PaymentOrder), new Action<PaymentOrder>(this.detach_PaymentOrder));
			this._QuotaDistribution = new EntitySet<QuotaDistribution>(new Action<QuotaDistribution>(this.attach_QuotaDistribution), new Action<QuotaDistribution>(this.detach_QuotaDistribution));
			this._TreasuryPayment = new EntitySet<TreasuryPayment>(new Action<TreasuryPayment>(this.attach_TreasuryPayment), new Action<TreasuryPayment>(this.detach_TreasuryPayment));
			this._VisitRecord = new EntitySet<VisitRecord>(new Action<VisitRecord>(this.attach_VisitRecord), new Action<VisitRecord>(this.detach_VisitRecord));
			OnCreated();
		}
		
		[Column(Storage="_ContractorGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					this.OnContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorGUID = value;
					this.SendPropertyChanged("ContractorGUID");
					this.OnContractorGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_INN", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string INN
		{
			get
			{
				return this._INN;
			}
			set
			{
				if ((this._INN != value))
				{
					this.OnINNChanging(value);
					this.SendPropertyChanging();
					this._INN = value;
					this.SendPropertyChanged("INN");
					this.OnINNChanged();
				}
			}
		}
		
		[Column(Storage="_OKPO", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string OKPO
		{
			get
			{
				return this._OKPO;
			}
			set
			{
				if ((this._OKPO != value))
				{
					this.OnOKPOChanging(value);
					this.SendPropertyChanging();
					this._OKPO = value;
					this.SendPropertyChanged("OKPO");
					this.OnOKPOChanged();
				}
			}
		}
		
		[Column(Storage="_ContractorType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char ContractorType
		{
			get
			{
				return this._ContractorType;
			}
			set
			{
				if ((this._ContractorType != value))
				{
					this.OnContractorTypeChanging(value);
					this.SendPropertyChanging();
					this._ContractorType = value;
					this.SendPropertyChanged("ContractorType");
					this.OnContractorTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ShortName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[Column(Storage="_JuridicalAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string JuridicalAddress
		{
			get
			{
				return this._JuridicalAddress;
			}
			set
			{
				if ((this._JuridicalAddress != value))
				{
					this.OnJuridicalAddressChanging(value);
					this.SendPropertyChanging();
					this._JuridicalAddress = value;
					this.SendPropertyChanged("JuridicalAddress");
					this.OnJuridicalAddressChanged();
				}
			}
		}
		
		[Column(Storage="_PostAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PostAddress
		{
			get
			{
				return this._PostAddress;
			}
			set
			{
				if ((this._PostAddress != value))
				{
					this.OnPostAddressChanging(value);
					this.SendPropertyChanging();
					this._PostAddress = value;
					this.SendPropertyChanged("PostAddress");
					this.OnPostAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_PassportNumber", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PassportNumber
		{
			get
			{
				return this._PassportNumber;
			}
			set
			{
				if ((this._PassportNumber != value))
				{
					this.OnPassportNumberChanging(value);
					this.SendPropertyChanging();
					this._PassportNumber = value;
					this.SendPropertyChanged("PassportNumber");
					this.OnPassportNumberChanged();
				}
			}
		}
		
		[Column(Storage="_PassportSerial", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PassportSerial
		{
			get
			{
				return this._PassportSerial;
			}
			set
			{
				if ((this._PassportSerial != value))
				{
					this.OnPassportSerialChanging(value);
					this.SendPropertyChanging();
					this._PassportSerial = value;
					this.SendPropertyChanged("PassportSerial");
					this.OnPassportSerialChanged();
				}
			}
		}
		
		[Column(Storage="_PassportIssuedBy", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PassportIssuedBy
		{
			get
			{
				return this._PassportIssuedBy;
			}
			set
			{
				if ((this._PassportIssuedBy != value))
				{
					this.OnPassportIssuedByChanging(value);
					this.SendPropertyChanging();
					this._PassportIssuedBy = value;
					this.SendPropertyChanged("PassportIssuedBy");
					this.OnPassportIssuedByChanged();
				}
			}
		}
		
		[Column(Storage="_PassportIssuedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PassportIssuedDate
		{
			get
			{
				return this._PassportIssuedDate;
			}
			set
			{
				if ((this._PassportIssuedDate != value))
				{
					this.OnPassportIssuedDateChanging(value);
					this.SendPropertyChanging();
					this._PassportIssuedDate = value;
					this.SendPropertyChanged("PassportIssuedDate");
					this.OnPassportIssuedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatorRepresentationID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CreatorRepresentationID
		{
			get
			{
				return this._CreatorRepresentationID;
			}
			set
			{
				if ((this._CreatorRepresentationID != value))
				{
					if (this._CreatorRepresentation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorRepresentationID = value;
					this.SendPropertyChanged("CreatorRepresentationID");
					this.OnCreatorRepresentationIDChanged();
				}
			}
		}
		
		[Column(Storage="_AddInfo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string AddInfo
		{
			get
			{
				return this._AddInfo;
			}
			set
			{
				if ((this._AddInfo != value))
				{
					this.OnAddInfoChanging(value);
					this.SendPropertyChanging();
					this._AddInfo = value;
					this.SendPropertyChanged("AddInfo");
					this.OnAddInfoChanged();
				}
			}
		}
		
		[Column(Storage="_EGRUL", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string EGRUL
		{
			get
			{
				return this._EGRUL;
			}
			set
			{
				if ((this._EGRUL != value))
				{
					this.OnEGRULChanging(value);
					this.SendPropertyChanging();
					this._EGRUL = value;
					this.SendPropertyChanged("EGRUL");
					this.OnEGRULChanged();
				}
			}
		}
		
		[Column(Storage="_CloseDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CloseDate
		{
			get
			{
				return this._CloseDate;
			}
			set
			{
				if ((this._CloseDate != value))
				{
					this.OnCloseDateChanging(value);
					this.SendPropertyChanging();
					this._CloseDate = value;
					this.SendPropertyChanged("CloseDate");
					this.OnCloseDateChanged();
				}
			}
		}
		
		[Column(Storage="_PrevContractorGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> PrevContractorGUID
		{
			get
			{
				return this._PrevContractorGUID;
			}
			set
			{
				if ((this._PrevContractorGUID != value))
				{
					if (this._PrevContractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrevContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._PrevContractorGUID = value;
					this.SendPropertyChanged("PrevContractorGUID");
					this.OnPrevContractorGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_OldID", DbType="Decimal(14,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsPersonal", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsPersonal
		{
			get
			{
				return this._IsPersonal;
			}
			set
			{
				if ((this._IsPersonal != value))
				{
					this.OnIsPersonalChanging(value);
					this.SendPropertyChanging();
					this._IsPersonal = value;
					this.SendPropertyChanged("IsPersonal");
					this.OnIsPersonalChanged();
				}
			}
		}
		
		[Column(Storage="_RFSubjectID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RFSubjectID
		{
			get
			{
				return this._RFSubjectID;
			}
			set
			{
				if ((this._RFSubjectID != value))
				{
					if (this._RFSubject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRFSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._RFSubjectID = value;
					this.SendPropertyChanged("RFSubjectID");
					this.OnRFSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_BankTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BankTitle
		{
			get
			{
				return this._BankTitle;
			}
			set
			{
				if ((this._BankTitle != value))
				{
					this.OnBankTitleChanging(value);
					this.SendPropertyChanging();
					this._BankTitle = value;
					this.SendPropertyChanged("BankTitle");
					this.OnBankTitleChanged();
				}
			}
		}
		
		[Column(Storage="_BankAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BankAddress
		{
			get
			{
				return this._BankAddress;
			}
			set
			{
				if ((this._BankAddress != value))
				{
					this.OnBankAddressChanging(value);
					this.SendPropertyChanging();
					this._BankAddress = value;
					this.SendPropertyChanged("BankAddress");
					this.OnBankAddressChanged();
				}
			}
		}
		
		[Column(Storage="_BankBIK", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BankBIK
		{
			get
			{
				return this._BankBIK;
			}
			set
			{
				if ((this._BankBIK != value))
				{
					this.OnBankBIKChanging(value);
					this.SendPropertyChanging();
					this._BankBIK = value;
					this.SendPropertyChanged("BankBIK");
					this.OnBankBIKChanged();
				}
			}
		}
		
		[Column(Storage="_BankAccount", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BankAccount
		{
			get
			{
				return this._BankAccount;
			}
			set
			{
				if ((this._BankAccount != value))
				{
					this.OnBankAccountChanging(value);
					this.SendPropertyChanging();
					this._BankAccount = value;
					this.SendPropertyChanged("BankAccount");
					this.OnBankAccountChanged();
				}
			}
		}
		
		[Column(Storage="_BankCorrespondentAccount", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BankCorrespondentAccount
		{
			get
			{
				return this._BankCorrespondentAccount;
			}
			set
			{
				if ((this._BankCorrespondentAccount != value))
				{
					this.OnBankCorrespondentAccountChanging(value);
					this.SendPropertyChanging();
					this._BankCorrespondentAccount = value;
					this.SendPropertyChanged("BankCorrespondentAccount");
					this.OnBankCorrespondentAccountChanged();
				}
			}
		}
		
		[Column(Storage="_KPP", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string KPP
		{
			get
			{
				return this._KPP;
			}
			set
			{
				if ((this._KPP != value))
				{
					this.OnKPPChanging(value);
					this.SendPropertyChanging();
					this._KPP = value;
					this.SendPropertyChanged("KPP");
					this.OnKPPChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="FK_Contractor_Country", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public C_Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				C_Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Contractor.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Contractor.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="FK_Contractor_CreatorRepresentation", Storage="_CreatorRepresentation", ThisKey="CreatorRepresentationID", OtherKey="RepresentationID", IsForeignKey=true)]
		public Representation CreatorRepresentation
		{
			get
			{
				return this._CreatorRepresentation.Entity;
			}
			set
			{
				Representation previousValue = this._CreatorRepresentation.Entity;
				if (((previousValue != value) 
							|| (this._CreatorRepresentation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatorRepresentation.Entity = null;
						previousValue.Contractor.Remove(this);
					}
					this._CreatorRepresentation.Entity = value;
					if ((value != null))
					{
						value.Contractor.Add(this);
						this._CreatorRepresentationID = value.RepresentationID;
					}
					else
					{
						this._CreatorRepresentationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CreatorRepresentation");
				}
			}
		}
		
		[Association(Name="FK_Contractor_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.Contractor.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.Contractor.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_Contractor_PrevContractor", Storage="_PrevContractor", ThisKey="PrevContractorGUID", OtherKey="ContractorGUID", IsForeignKey=true)]
		public Contractor PrevContractor
		{
			get
			{
				return this._PrevContractor.Entity;
			}
			set
			{
				Contractor previousValue = this._PrevContractor.Entity;
				if (((previousValue != value) 
							|| (this._PrevContractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PrevContractor.Entity = null;
						previousValue.ContractorGU.Remove(this);
					}
					this._PrevContractor.Entity = value;
					if ((value != null))
					{
						value.ContractorGU.Add(this);
						this._PrevContractorGUID = value.ContractorGUID;
					}
					else
					{
						this._PrevContractorGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PrevContractor");
				}
			}
		}
		
		[Association(Name="FK_Contractor_PrevContractor", Storage="_ContractorGU", ThisKey="ContractorGUID", OtherKey="PrevContractorGUID", DeleteRule="NO ACTION")]
		public EntitySet<Contractor> ContractorGU
		{
			get
			{
				return this._ContractorGU;
			}
			set
			{
				this._ContractorGU.Assign(value);
			}
		}
		
		[Association(Name="FK_Contractor_RFSubject", Storage="_RFSubject", ThisKey="RFSubjectID", OtherKey="RFSubjectID", IsForeignKey=true)]
		public C_RFSubject RFSubject
		{
			get
			{
				return this._RFSubject.Entity;
			}
			set
			{
				C_RFSubject previousValue = this._RFSubject.Entity;
				if (((previousValue != value) 
							|| (this._RFSubject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RFSubject.Entity = null;
						previousValue.Contractor.Remove(this);
					}
					this._RFSubject.Entity = value;
					if ((value != null))
					{
						value.Contractor.Add(this);
						this._RFSubjectID = value.RFSubjectID;
					}
					else
					{
						this._RFSubjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RFSubject");
				}
			}
		}
		
		[Association(Name="FK_ContractorChiefPerson_Contractor", Storage="_ChiefPersons", ThisKey="ContractorGUID", OtherKey="ContractorGUID", DeleteRule="CASCADE")]
		public EntitySet<ContractorChiefPerson> ChiefPersons
		{
			get
			{
				return this._ChiefPersons;
			}
			set
			{
				this._ChiefPersons.Assign(value);
			}
		}
		
		[Association(Name="FK_ForeignAuthorization_Contractor", Storage="_ForeignAuthorization", ThisKey="ContractorGUID", OtherKey="ContractorGUID", DeleteRule="NO ACTION")]
		public EntitySet<ForeignAuthorization> ForeignAuthorization
		{
			get
			{
				return this._ForeignAuthorization;
			}
			set
			{
				this._ForeignAuthorization.Assign(value);
			}
		}
		
		[Association(Name="FK_HST_Contractor_Contractor", Storage="_HST_Contractor", ThisKey="ContractorGUID", OtherKey="ContractorGUID", DeleteRule="CASCADE")]
		public EntitySet<HST_Contractor> HST_Contractor
		{
			get
			{
				return this._HST_Contractor;
			}
			set
			{
				this._HST_Contractor.Assign(value);
			}
		}
		
		[Association(Name="FK_HST_Contractor_PrevContractor", Storage="_HST_Contractor_PrevContractor", ThisKey="ContractorGUID", OtherKey="PrevContractorGUID", DeleteRule="NO ACTION")]
		public EntitySet<HST_Contractor> HST_Contractor_PrevContractor
		{
			get
			{
				return this._HST_Contractor_PrevContractor;
			}
			set
			{
				this._HST_Contractor_PrevContractor.Assign(value);
			}
		}
		
		[Association(Name="FK_PaymentOrder_Contractor", Storage="_PaymentOrder", ThisKey="ContractorGUID", OtherKey="ContractorGUID", DeleteRule="NO ACTION")]
		public EntitySet<PaymentOrder> PaymentOrder
		{
			get
			{
				return this._PaymentOrder;
			}
			set
			{
				this._PaymentOrder.Assign(value);
			}
		}
		
		[Association(Name="FK_QuotaDistribution_Contractor", Storage="_QuotaDistribution", ThisKey="ContractorGUID", OtherKey="ContractorGUID", DeleteRule="NO ACTION")]
		public EntitySet<QuotaDistribution> QuotaDistribution
		{
			get
			{
				return this._QuotaDistribution;
			}
			set
			{
				this._QuotaDistribution.Assign(value);
			}
		}
		
		[Association(Name="FK_TreasuryPayment_Contractor", Storage="_TreasuryPayment", ThisKey="ContractorGUID", OtherKey="ContractorGUID", DeleteRule="NO ACTION")]
		public EntitySet<TreasuryPayment> TreasuryPayment
		{
			get
			{
				return this._TreasuryPayment;
			}
			set
			{
				this._TreasuryPayment.Assign(value);
			}
		}
		
		[Association(Name="FK_VisitRecord_Contactor", Storage="_VisitRecord", ThisKey="ContractorGUID", OtherKey="ContactorGUID", DeleteRule="NO ACTION")]
		public EntitySet<VisitRecord> VisitRecord
		{
			get
			{
				return this._VisitRecord;
			}
			set
			{
				this._VisitRecord.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractorGU(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.PrevContractor = this;
		}
		
		private void detach_ContractorGU(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.PrevContractor = null;
		}
		
		private void attach_ChiefPersons(ContractorChiefPerson entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_ChiefPersons(ContractorChiefPerson entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
		
		private void attach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
		
		private void attach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
		
		private void attach_HST_Contractor_PrevContractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.PrevContractor = this;
		}
		
		private void detach_HST_Contractor_PrevContractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.PrevContractor = null;
		}
		
		private void attach_PaymentOrder(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_PaymentOrder(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
		
		private void attach_QuotaDistribution(QuotaDistribution entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_QuotaDistribution(QuotaDistribution entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
		
		private void attach_TreasuryPayment(TreasuryPayment entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_TreasuryPayment(TreasuryPayment entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
		
		private void attach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.Contactor = this;
		}
		
		private void detach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.Contactor = null;
		}
	}
	
	[Table(Name="dbo.ContractorChiefPerson")]
	public partial class ContractorChiefPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ContractorChiefPersonGUID;
		
		private System.Guid _ContractorGUID;
		
		private string _Title;
		
		private string _Post;
		
		private string _Phone;
		
		private string _Email;
		
		private bool _IsResponsible;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private bool _IsChief;
		
		private EntitySet<CertificateInfo> _CertificateInfo;
		
		private EntityRef<Contractor> _Contractor;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<OrderDoc> _OrderDoc;
		
		private EntitySet<OrderDoc> _ContractorChiefPersonGU;
		
		private EntitySet<OrderDoc> _OrderDoc_QuoteOwnerChief;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractorChiefPersonGUIDChanging(System.Guid value);
    partial void OnContractorChiefPersonGUIDChanged();
    partial void OnContractorGUIDChanging(System.Guid value);
    partial void OnContractorGUIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPostChanging(string value);
    partial void OnPostChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIsResponsibleChanging(bool value);
    partial void OnIsResponsibleChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnIsChiefChanging(bool value);
    partial void OnIsChiefChanged();
    #endregion
		
		public ContractorChiefPerson()
		{
			this._CertificateInfo = new EntitySet<CertificateInfo>(new Action<CertificateInfo>(this.attach_CertificateInfo), new Action<CertificateInfo>(this.detach_CertificateInfo));
			this._Contractor = default(EntityRef<Contractor>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._ContractorChiefPersonGU = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_ContractorChiefPersonGU), new Action<OrderDoc>(this.detach_ContractorChiefPersonGU));
			this._OrderDoc_QuoteOwnerChief = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc_QuoteOwnerChief), new Action<OrderDoc>(this.detach_OrderDoc_QuoteOwnerChief));
			OnCreated();
		}
		
		[Column(Storage="_ContractorChiefPersonGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ContractorChiefPersonGUID
		{
			get
			{
				return this._ContractorChiefPersonGUID;
			}
			set
			{
				if ((this._ContractorChiefPersonGUID != value))
				{
					this.OnContractorChiefPersonGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorChiefPersonGUID = value;
					this.SendPropertyChanged("ContractorChiefPersonGUID");
					this.OnContractorChiefPersonGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContractorGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorGUID = value;
					this.SendPropertyChanged("ContractorGUID");
					this.OnContractorGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Post", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				if ((this._Post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._Post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_IsResponsible", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsResponsible
		{
			get
			{
				return this._IsResponsible;
			}
			set
			{
				if ((this._IsResponsible != value))
				{
					this.OnIsResponsibleChanging(value);
					this.SendPropertyChanging();
					this._IsResponsible = value;
					this.SendPropertyChanged("IsResponsible");
					this.OnIsResponsibleChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_IsChief", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsChief
		{
			get
			{
				return this._IsChief;
			}
			set
			{
				if ((this._IsChief != value))
				{
					this.OnIsChiefChanging(value);
					this.SendPropertyChanging();
					this._IsChief = value;
					this.SendPropertyChanged("IsChief");
					this.OnIsChiefChanged();
				}
			}
		}
		
		[Association(Name="FK_CertificateInfo_ContractorChiefPerson", Storage="_CertificateInfo", ThisKey="ContractorChiefPersonGUID", OtherKey="ContractorChiefPersonGUID", DeleteRule="NO ACTION")]
		public EntitySet<CertificateInfo> CertificateInfo
		{
			get
			{
				return this._CertificateInfo;
			}
			set
			{
				this._CertificateInfo.Assign(value);
			}
		}
		
		[Association(Name="FK_ContractorChiefPerson_Contractor", Storage="_Contractor", ThisKey="ContractorGUID", OtherKey="ContractorGUID", IsForeignKey=true, DeleteOnNull=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.ChiefPersons.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.ChiefPersons.Add(this);
						this._ContractorGUID = value.ContractorGUID;
					}
					else
					{
						this._ContractorGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		[Association(Name="FK_ContractorChiefPerson_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.ContractorChiefPerson.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.ContractorChiefPerson.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_ApplicantChief", Storage="_OrderDoc", ThisKey="ContractorChiefPersonGUID", OtherKey="ApplicantChiefGUID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_ApplicantRepresentative", Storage="_ContractorChiefPersonGU", ThisKey="ContractorChiefPersonGUID", OtherKey="ApplicantRepresentativeGUID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> ContractorChiefPersonGU
		{
			get
			{
				return this._ContractorChiefPersonGU;
			}
			set
			{
				this._ContractorChiefPersonGU.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_QuoteOwnerChief", Storage="_OrderDoc_QuoteOwnerChief", ThisKey="ContractorChiefPersonGUID", OtherKey="QuoteOwnerChiefGUID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc_QuoteOwnerChief
		{
			get
			{
				return this._OrderDoc_QuoteOwnerChief;
			}
			set
			{
				this._OrderDoc_QuoteOwnerChief.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CertificateInfo(CertificateInfo entity)
		{
			this.SendPropertyChanging();
			entity.ContractorChiefPerson = this;
		}
		
		private void detach_CertificateInfo(CertificateInfo entity)
		{
			this.SendPropertyChanging();
			entity.ContractorChiefPerson = null;
		}
		
		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.ApplicantChief = this;
		}
		
		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.ApplicantChief = null;
		}
		
		private void attach_ContractorChiefPersonGU(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.ApplicantRepresentative = this;
		}
		
		private void detach_ContractorChiefPersonGU(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.ApplicantRepresentative = null;
		}
		
		private void attach_OrderDoc_QuoteOwnerChief(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.QuoteOwnerChief = this;
		}
		
		private void detach_OrderDoc_QuoteOwnerChief(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.QuoteOwnerChief = null;
		}
	}
	
	[Table(Name="dbo.ControlParameters")]
	public partial class ControlParameters : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ControlParametersID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private int _MaxValidity;
		
		private int _MaxNotify;
		
		private bool _IsValidityCalendarDayType;
		
		private bool _IsNotifyCalendarDayType;
		
		private bool _IsCurrent;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnControlParametersIDChanging(int value);
    partial void OnControlParametersIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnMaxValidityChanging(int value);
    partial void OnMaxValidityChanged();
    partial void OnMaxNotifyChanging(int value);
    partial void OnMaxNotifyChanged();
    partial void OnIsValidityCalendarDayTypeChanging(bool value);
    partial void OnIsValidityCalendarDayTypeChanged();
    partial void OnIsNotifyCalendarDayTypeChanging(bool value);
    partial void OnIsNotifyCalendarDayTypeChanged();
    partial void OnIsCurrentChanging(bool value);
    partial void OnIsCurrentChanged();
    #endregion
		
		public ControlParameters()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_ControlParametersID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ControlParametersID
		{
			get
			{
				return this._ControlParametersID;
			}
			set
			{
				if ((this._ControlParametersID != value))
				{
					this.OnControlParametersIDChanging(value);
					this.SendPropertyChanging();
					this._ControlParametersID = value;
					this.SendPropertyChanged("ControlParametersID");
					this.OnControlParametersIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaxValidity", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MaxValidity
		{
			get
			{
				return this._MaxValidity;
			}
			set
			{
				if ((this._MaxValidity != value))
				{
					this.OnMaxValidityChanging(value);
					this.SendPropertyChanging();
					this._MaxValidity = value;
					this.SendPropertyChanged("MaxValidity");
					this.OnMaxValidityChanged();
				}
			}
		}
		
		[Column(Storage="_MaxNotify", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MaxNotify
		{
			get
			{
				return this._MaxNotify;
			}
			set
			{
				if ((this._MaxNotify != value))
				{
					this.OnMaxNotifyChanging(value);
					this.SendPropertyChanging();
					this._MaxNotify = value;
					this.SendPropertyChanged("MaxNotify");
					this.OnMaxNotifyChanged();
				}
			}
		}
		
		[Column(Storage="_IsValidityCalendarDayType", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsValidityCalendarDayType
		{
			get
			{
				return this._IsValidityCalendarDayType;
			}
			set
			{
				if ((this._IsValidityCalendarDayType != value))
				{
					this.OnIsValidityCalendarDayTypeChanging(value);
					this.SendPropertyChanging();
					this._IsValidityCalendarDayType = value;
					this.SendPropertyChanged("IsValidityCalendarDayType");
					this.OnIsValidityCalendarDayTypeChanged();
				}
			}
		}
		
		[Column(Storage="_IsNotifyCalendarDayType", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsNotifyCalendarDayType
		{
			get
			{
				return this._IsNotifyCalendarDayType;
			}
			set
			{
				if ((this._IsNotifyCalendarDayType != value))
				{
					this.OnIsNotifyCalendarDayTypeChanging(value);
					this.SendPropertyChanging();
					this._IsNotifyCalendarDayType = value;
					this.SendPropertyChanged("IsNotifyCalendarDayType");
					this.OnIsNotifyCalendarDayTypeChanged();
				}
			}
		}
		
		[Column(Storage="_IsCurrent", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsCurrent
		{
			get
			{
				return this._IsCurrent;
			}
			set
			{
				if ((this._IsCurrent != value))
				{
					this.OnIsCurrentChanging(value);
					this.SendPropertyChanging();
					this._IsCurrent = value;
					this.SendPropertyChanged("IsCurrent");
					this.OnIsCurrentChanged();
				}
			}
		}
		
		[Association(Name="FK_ControlParameters_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.ControlParameters.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.ControlParameters.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Copy_ContractorChiefPerson")]
	public partial class Copy_ContractorChiefPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private string _Post;
		
		private string _Phone;
		
		private string _Email;
		
		private char _Type;
		
		private System.Guid _OrderDocGUID;
		
		private System.Guid _Copy_ContractorChiefPersonGUID;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<OrderDoc> _OrderDoc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPostChanging(string value);
    partial void OnPostChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnTypeChanging(char value);
    partial void OnTypeChanged();
    partial void OnOrderDocGUIDChanging(System.Guid value);
    partial void OnOrderDocGUIDChanged();
    partial void OnCopy_ContractorChiefPersonGUIDChanging(System.Guid value);
    partial void OnCopy_ContractorChiefPersonGUIDChanged();
    #endregion
		
		public Copy_ContractorChiefPerson()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDoc = default(EntityRef<OrderDoc>);
			OnCreated();
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Post", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				if ((this._Post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._Post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDocGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_ContractorChiefPersonGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Copy_ContractorChiefPersonGUID
		{
			get
			{
				return this._Copy_ContractorChiefPersonGUID;
			}
			set
			{
				if ((this._Copy_ContractorChiefPersonGUID != value))
				{
					this.OnCopy_ContractorChiefPersonGUIDChanging(value);
					this.SendPropertyChanging();
					this._Copy_ContractorChiefPersonGUID = value;
					this.SendPropertyChanged("Copy_ContractorChiefPersonGUID");
					this.OnCopy_ContractorChiefPersonGUIDChanged();
				}
			}
		}
		
		[Association(Name="FK_Copy_ContractorChiefPerson_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.Copy_ContractorChiefPerson.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.Copy_ContractorChiefPerson.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_Copy_ContractorChiefPerson_OrderDoc", Storage="_OrderDoc", ThisKey="OrderDocGUID", OtherKey="OrderGUID", IsForeignKey=true, DeleteOnNull=true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value) 
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.Copy_ContractorChiefPerson.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.Copy_ContractorChiefPerson.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Curriculum")]
	public partial class Curriculum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CurriculumID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private string _SysName;
		
		private string _Description;
		
		private System.Guid _HelpGUID;
		
		private EntityRef<C_Help> _Help;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<CurriculumQuestion> _Questions;
		
		private EntitySet<CurriculumRoles> _CurriculumRoles;
		
		private EntitySet<Training> _Training;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCurriculumIDChanging(int value);
    partial void OnCurriculumIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnHelpGUIDChanging(System.Guid value);
    partial void OnHelpGUIDChanged();
    #endregion
		
		public Curriculum()
		{
			this._Help = default(EntityRef<C_Help>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Questions = new EntitySet<CurriculumQuestion>(new Action<CurriculumQuestion>(this.attach_Questions), new Action<CurriculumQuestion>(this.detach_Questions));
			this._CurriculumRoles = new EntitySet<CurriculumRoles>(new Action<CurriculumRoles>(this.attach_CurriculumRoles), new Action<CurriculumRoles>(this.detach_CurriculumRoles));
			this._Training = new EntitySet<Training>(new Action<Training>(this.attach_Training), new Action<Training>(this.detach_Training));
			OnCreated();
		}
		
		[Column(Storage="_CurriculumID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CurriculumID
		{
			get
			{
				return this._CurriculumID;
			}
			set
			{
				if ((this._CurriculumID != value))
				{
					this.OnCurriculumIDChanging(value);
					this.SendPropertyChanging();
					this._CurriculumID = value;
					this.SendPropertyChanged("CurriculumID");
					this.OnCurriculumIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_HelpGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid HelpGUID
		{
			get
			{
				return this._HelpGUID;
			}
			set
			{
				if ((this._HelpGUID != value))
				{
					if (this._Help.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHelpGUIDChanging(value);
					this.SendPropertyChanging();
					this._HelpGUID = value;
					this.SendPropertyChanged("HelpGUID");
					this.OnHelpGUIDChanged();
				}
			}
		}
		
		[Association(Name="FK_Curriculum_Help", Storage="_Help", ThisKey="HelpGUID", OtherKey="HelpGUID", IsForeignKey=true)]
		public C_Help Help
		{
			get
			{
				return this._Help.Entity;
			}
			set
			{
				C_Help previousValue = this._Help.Entity;
				if (((previousValue != value) 
							|| (this._Help.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Help.Entity = null;
						previousValue.Curriculum.Remove(this);
					}
					this._Help.Entity = value;
					if ((value != null))
					{
						value.Curriculum.Add(this);
						this._HelpGUID = value.HelpGUID;
					}
					else
					{
						this._HelpGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Help");
				}
			}
		}
		
		[Association(Name="FK_Curriculum_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.Curriculum.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.Curriculum.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_CurriculumQuestion_Curriculum", Storage="_Questions", ThisKey="CurriculumID", OtherKey="CurriculumID", DeleteRule="CASCADE")]
		public EntitySet<CurriculumQuestion> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[Association(Name="FK_CurriculumRoles_Curriculum", Storage="_CurriculumRoles", ThisKey="CurriculumID", OtherKey="CurriculumID", DeleteRule="CASCADE")]
		public EntitySet<CurriculumRoles> CurriculumRoles
		{
			get
			{
				return this._CurriculumRoles;
			}
			set
			{
				this._CurriculumRoles.Assign(value);
			}
		}
		
		[Association(Name="FK_Training_Curriculum", Storage="_Training", ThisKey="CurriculumID", OtherKey="CurriculumID", DeleteRule="NO ACTION")]
		public EntitySet<Training> Training
		{
			get
			{
				return this._Training;
			}
			set
			{
				this._Training.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Questions(CurriculumQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Curriculum = this;
		}
		
		private void detach_Questions(CurriculumQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Curriculum = null;
		}
		
		private void attach_CurriculumRoles(CurriculumRoles entity)
		{
			this.SendPropertyChanging();
			entity.Curriculum = this;
		}
		
		private void detach_CurriculumRoles(CurriculumRoles entity)
		{
			this.SendPropertyChanging();
			entity.Curriculum = null;
		}
		
		private void attach_Training(Training entity)
		{
			this.SendPropertyChanging();
			entity.Curriculum = this;
		}
		
		private void detach_Training(Training entity)
		{
			this.SendPropertyChanging();
			entity.Curriculum = null;
		}
	}
	
	[Table(Name="dbo.CurriculumQuestion")]
	public partial class CurriculumQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CurriculumQuestionID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private int _CurriculumID;
		
		private int _SeqNo;
		
		private EntityRef<Curriculum> _Curriculum;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<CurriculumQuestionAnswer> _Answers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCurriculumQuestionIDChanging(int value);
    partial void OnCurriculumQuestionIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCurriculumIDChanging(int value);
    partial void OnCurriculumIDChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    #endregion
		
		public CurriculumQuestion()
		{
			this._Curriculum = default(EntityRef<Curriculum>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Answers = new EntitySet<CurriculumQuestionAnswer>(new Action<CurriculumQuestionAnswer>(this.attach_Answers), new Action<CurriculumQuestionAnswer>(this.detach_Answers));
			OnCreated();
		}
		
		[Column(Storage="_CurriculumQuestionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CurriculumQuestionID
		{
			get
			{
				return this._CurriculumQuestionID;
			}
			set
			{
				if ((this._CurriculumQuestionID != value))
				{
					this.OnCurriculumQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._CurriculumQuestionID = value;
					this.SendPropertyChanged("CurriculumQuestionID");
					this.OnCurriculumQuestionIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_CurriculumID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CurriculumID
		{
			get
			{
				return this._CurriculumID;
			}
			set
			{
				if ((this._CurriculumID != value))
				{
					if (this._Curriculum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurriculumIDChanging(value);
					this.SendPropertyChanging();
					this._CurriculumID = value;
					this.SendPropertyChanged("CurriculumID");
					this.OnCurriculumIDChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Association(Name="FK_CurriculumQuestion_Curriculum", Storage="_Curriculum", ThisKey="CurriculumID", OtherKey="CurriculumID", IsForeignKey=true, DeleteOnNull=true)]
		public Curriculum Curriculum
		{
			get
			{
				return this._Curriculum.Entity;
			}
			set
			{
				Curriculum previousValue = this._Curriculum.Entity;
				if (((previousValue != value) 
							|| (this._Curriculum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Curriculum.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Curriculum.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._CurriculumID = value.CurriculumID;
					}
					else
					{
						this._CurriculumID = default(int);
					}
					this.SendPropertyChanged("Curriculum");
				}
			}
		}
		
		[Association(Name="FK_CurriculumQuestion_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.CurriculumQuestion.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.CurriculumQuestion.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_CurriculumQuestionAnswer_Question", Storage="_Answers", ThisKey="CurriculumQuestionID", OtherKey="QuestionID", DeleteRule="CASCADE")]
		public EntitySet<CurriculumQuestionAnswer> Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answers(CurriculumQuestionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Answers(CurriculumQuestionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[Table(Name="dbo.CurriculumQuestionAnswer")]
	public partial class CurriculumQuestionAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CurriculumQuestionAnswerID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private int _QuestionID;
		
		private bool _IsCorrect;
		
		private int _SeqNo;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<CurriculumQuestion> _Question;
		
		private EntitySet<TrainingAnswer> _TrainingAnswer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCurriculumQuestionAnswerIDChanging(int value);
    partial void OnCurriculumQuestionAnswerIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnIsCorrectChanging(bool value);
    partial void OnIsCorrectChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    #endregion
		
		public CurriculumQuestionAnswer()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Question = default(EntityRef<CurriculumQuestion>);
			this._TrainingAnswer = new EntitySet<TrainingAnswer>(new Action<TrainingAnswer>(this.attach_TrainingAnswer), new Action<TrainingAnswer>(this.detach_TrainingAnswer));
			OnCreated();
		}
		
		[Column(Storage="_CurriculumQuestionAnswerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CurriculumQuestionAnswerID
		{
			get
			{
				return this._CurriculumQuestionAnswerID;
			}
			set
			{
				if ((this._CurriculumQuestionAnswerID != value))
				{
					this.OnCurriculumQuestionAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._CurriculumQuestionAnswerID = value;
					this.SendPropertyChanged("CurriculumQuestionAnswerID");
					this.OnCurriculumQuestionAnswerIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsCorrect", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsCorrect
		{
			get
			{
				return this._IsCorrect;
			}
			set
			{
				if ((this._IsCorrect != value))
				{
					this.OnIsCorrectChanging(value);
					this.SendPropertyChanging();
					this._IsCorrect = value;
					this.SendPropertyChanged("IsCorrect");
					this.OnIsCorrectChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Association(Name="FK_CurriculumQuestionAnswer_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.CurriculumQuestionAnswer.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.CurriculumQuestionAnswer.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_CurriculumQuestionAnswer_Question", Storage="_Question", ThisKey="QuestionID", OtherKey="CurriculumQuestionID", IsForeignKey=true, DeleteOnNull=true)]
		public CurriculumQuestion Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				CurriculumQuestion previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Answers.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Answers.Add(this);
						this._QuestionID = value.CurriculumQuestionID;
					}
					else
					{
						this._QuestionID = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[Association(Name="FK_TrainingAnswer_Answer", Storage="_TrainingAnswer", ThisKey="CurriculumQuestionAnswerID", OtherKey="AnswerID", DeleteRule="CASCADE")]
		public EntitySet<TrainingAnswer> TrainingAnswer
		{
			get
			{
				return this._TrainingAnswer;
			}
			set
			{
				this._TrainingAnswer.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrainingAnswer(TrainingAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Answer = this;
		}
		
		private void detach_TrainingAnswer(TrainingAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Answer = null;
		}
	}
	
	[Table(Name="dbo.CurriculumRoles")]
	public partial class CurriculumRoles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CurriculumID;
		
		private int _RolesID;
		
		private EntityRef<Curriculum> _Curriculum;
		
		private EntityRef<SPM_Role> _Roles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCurriculumIDChanging(int value);
    partial void OnCurriculumIDChanged();
    partial void OnRolesIDChanging(int value);
    partial void OnRolesIDChanged();
    #endregion
		
		public CurriculumRoles()
		{
			this._Curriculum = default(EntityRef<Curriculum>);
			this._Roles = default(EntityRef<SPM_Role>);
			OnCreated();
		}
		
		[Column(Storage="_CurriculumID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CurriculumID
		{
			get
			{
				return this._CurriculumID;
			}
			set
			{
				if ((this._CurriculumID != value))
				{
					if (this._Curriculum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurriculumIDChanging(value);
					this.SendPropertyChanging();
					this._CurriculumID = value;
					this.SendPropertyChanged("CurriculumID");
					this.OnCurriculumIDChanged();
				}
			}
		}
		
		[Column(Storage="_RolesID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RolesID
		{
			get
			{
				return this._RolesID;
			}
			set
			{
				if ((this._RolesID != value))
				{
					if (this._Roles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRolesIDChanging(value);
					this.SendPropertyChanging();
					this._RolesID = value;
					this.SendPropertyChanged("RolesID");
					this.OnRolesIDChanged();
				}
			}
		}
		
		[Association(Name="FK_CurriculumRoles_Curriculum", Storage="_Curriculum", ThisKey="CurriculumID", OtherKey="CurriculumID", IsForeignKey=true, DeleteOnNull=true)]
		public Curriculum Curriculum
		{
			get
			{
				return this._Curriculum.Entity;
			}
			set
			{
				Curriculum previousValue = this._Curriculum.Entity;
				if (((previousValue != value) 
							|| (this._Curriculum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Curriculum.Entity = null;
						previousValue.CurriculumRoles.Remove(this);
					}
					this._Curriculum.Entity = value;
					if ((value != null))
					{
						value.CurriculumRoles.Add(this);
						this._CurriculumID = value.CurriculumID;
					}
					else
					{
						this._CurriculumID = default(int);
					}
					this.SendPropertyChanged("Curriculum");
				}
			}
		}
		
		[Association(Name="FK_CurriculumRoles_Roles", Storage="_Roles", ThisKey="RolesID", OtherKey="RoleID", IsForeignKey=true, DeleteOnNull=true)]
		public SPM_Role Roles
		{
			get
			{
				return this._Roles.Entity;
			}
			set
			{
				SPM_Role previousValue = this._Roles.Entity;
				if (((previousValue != value) 
							|| (this._Roles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Roles.Entity = null;
						previousValue.CurriculumRoles.Remove(this);
					}
					this._Roles.Entity = value;
					if ((value != null))
					{
						value.CurriculumRoles.Add(this);
						this._RolesID = value.RoleID;
					}
					else
					{
						this._RolesID = default(int);
					}
					this.SendPropertyChanged("Roles");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CustomsDeclaration")]
	public partial class CustomsDeclaration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CustomsDeclarationGUID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private System.Nullable<System.Guid> _LicenseGUID;
		
		private int _OperationID;
		
		private string _SenderINN;
		
		private string _SenderTitle;
		
		private string _SenderAddress;
		
		private string _RecipientINN;
		
		private string _RecipientTitle;
		
		private string _RecipientAddress;
		
		private string _CustomsConditions;
		
		private System.Nullable<System.DateTime> _ApproveDate;
		
		private System.Nullable<System.DateTime> _FactDate;
		
		private System.Nullable<int> _Containers;
		
		private System.Nullable<decimal> _Weight;
		
		private System.Nullable<decimal> _Quantity1;
		
		private string _Measure1;
		
		private System.Nullable<decimal> _Quantity2;
		
		private string _Measure2;
		
		private System.Nullable<decimal> _Quantity3;
		
		private string _Measure3;
		
		private System.Nullable<int> _CountryFromID;
		
		private System.Nullable<int> _CountryToID;
		
		private System.Nullable<int> _CountryOriginID;
		
		private System.Nullable<int> _CNID;
		
		private System.Nullable<int> _SenderCountryID;
		
		private System.Nullable<int> _RecipientCountryID;
		
		private string _Copy_CountryFrom;
		
		private string _Copy_CountryTo;
		
		private string _Copy_CountryOrigin;
		
		private string _Copy_CN;
		
		private string _Copy_SenderCountry;
		
		private string _Copy_RecipientCountry;
		
		private int _G32;
		
		private string _LicenseNumber;
		
		private string _FinOGRN;
		
		private string _FinINN;
		
		private string _FinTitle;
		
		private string _CommodityComment;
		
		private EntityRef<C_CN> _CN;
		
		private EntityRef<C_Country> _CountryFrom;
		
		private EntityRef<C_Country> _CountryOrigin;
		
		private EntityRef<C_Country> _CountryTo;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<OrderDoc> _License;
		
		private EntityRef<C_OperationType> _Operation;
		
		private EntityRef<C_Country> _RecipientCountry;
		
		private EntityRef<C_Country> _SenderCountry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomsDeclarationGUIDChanging(System.Guid value);
    partial void OnCustomsDeclarationGUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLicenseGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnLicenseGUIDChanged();
    partial void OnOperationIDChanging(int value);
    partial void OnOperationIDChanged();
    partial void OnSenderINNChanging(string value);
    partial void OnSenderINNChanged();
    partial void OnSenderTitleChanging(string value);
    partial void OnSenderTitleChanged();
    partial void OnSenderAddressChanging(string value);
    partial void OnSenderAddressChanged();
    partial void OnRecipientINNChanging(string value);
    partial void OnRecipientINNChanged();
    partial void OnRecipientTitleChanging(string value);
    partial void OnRecipientTitleChanged();
    partial void OnRecipientAddressChanging(string value);
    partial void OnRecipientAddressChanged();
    partial void OnCustomsConditionsChanging(string value);
    partial void OnCustomsConditionsChanged();
    partial void OnApproveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApproveDateChanged();
    partial void OnFactDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFactDateChanged();
    partial void OnContainersChanging(System.Nullable<int> value);
    partial void OnContainersChanged();
    partial void OnWeightChanging(System.Nullable<decimal> value);
    partial void OnWeightChanged();
    partial void OnQuantity1Changing(System.Nullable<decimal> value);
    partial void OnQuantity1Changed();
    partial void OnMeasure1Changing(string value);
    partial void OnMeasure1Changed();
    partial void OnQuantity2Changing(System.Nullable<decimal> value);
    partial void OnQuantity2Changed();
    partial void OnMeasure2Changing(string value);
    partial void OnMeasure2Changed();
    partial void OnQuantity3Changing(System.Nullable<decimal> value);
    partial void OnQuantity3Changed();
    partial void OnMeasure3Changing(string value);
    partial void OnMeasure3Changed();
    partial void OnCountryFromIDChanging(System.Nullable<int> value);
    partial void OnCountryFromIDChanged();
    partial void OnCountryToIDChanging(System.Nullable<int> value);
    partial void OnCountryToIDChanged();
    partial void OnCountryOriginIDChanging(System.Nullable<int> value);
    partial void OnCountryOriginIDChanged();
    partial void OnCNIDChanging(System.Nullable<int> value);
    partial void OnCNIDChanged();
    partial void OnSenderCountryIDChanging(System.Nullable<int> value);
    partial void OnSenderCountryIDChanged();
    partial void OnRecipientCountryIDChanging(System.Nullable<int> value);
    partial void OnRecipientCountryIDChanged();
    partial void OnCopy_CountryFromChanging(string value);
    partial void OnCopy_CountryFromChanged();
    partial void OnCopy_CountryToChanging(string value);
    partial void OnCopy_CountryToChanged();
    partial void OnCopy_CountryOriginChanging(string value);
    partial void OnCopy_CountryOriginChanged();
    partial void OnCopy_CNChanging(string value);
    partial void OnCopy_CNChanged();
    partial void OnCopy_SenderCountryChanging(string value);
    partial void OnCopy_SenderCountryChanged();
    partial void OnCopy_RecipientCountryChanging(string value);
    partial void OnCopy_RecipientCountryChanged();
    partial void OnG32Changing(int value);
    partial void OnG32Changed();
    partial void OnLicenseNumberChanging(string value);
    partial void OnLicenseNumberChanged();
    partial void OnFinOGRNChanging(string value);
    partial void OnFinOGRNChanged();
    partial void OnFinINNChanging(string value);
    partial void OnFinINNChanged();
    partial void OnFinTitleChanging(string value);
    partial void OnFinTitleChanged();
    partial void OnCommodityCommentChanging(string value);
    partial void OnCommodityCommentChanged();
    #endregion
		
		public CustomsDeclaration()
		{
			this._CN = default(EntityRef<C_CN>);
			this._CountryFrom = default(EntityRef<C_Country>);
			this._CountryOrigin = default(EntityRef<C_Country>);
			this._CountryTo = default(EntityRef<C_Country>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._License = default(EntityRef<OrderDoc>);
			this._Operation = default(EntityRef<C_OperationType>);
			this._RecipientCountry = default(EntityRef<C_Country>);
			this._SenderCountry = default(EntityRef<C_Country>);
			OnCreated();
		}
		
		[Column(Storage="_CustomsDeclarationGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CustomsDeclarationGUID
		{
			get
			{
				return this._CustomsDeclarationGUID;
			}
			set
			{
				if ((this._CustomsDeclarationGUID != value))
				{
					this.OnCustomsDeclarationGUIDChanging(value);
					this.SendPropertyChanging();
					this._CustomsDeclarationGUID = value;
					this.SendPropertyChanged("CustomsDeclarationGUID");
					this.OnCustomsDeclarationGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_LicenseGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> LicenseGUID
		{
			get
			{
				return this._LicenseGUID;
			}
			set
			{
				if ((this._LicenseGUID != value))
				{
					if (this._License.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLicenseGUIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseGUID = value;
					this.SendPropertyChanged("LicenseGUID");
					this.OnLicenseGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_OperationID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OperationID
		{
			get
			{
				return this._OperationID;
			}
			set
			{
				if ((this._OperationID != value))
				{
					if (this._Operation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationIDChanging(value);
					this.SendPropertyChanging();
					this._OperationID = value;
					this.SendPropertyChanged("OperationID");
					this.OnOperationIDChanged();
				}
			}
		}
		
		[Column(Storage="_SenderINN", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SenderINN
		{
			get
			{
				return this._SenderINN;
			}
			set
			{
				if ((this._SenderINN != value))
				{
					this.OnSenderINNChanging(value);
					this.SendPropertyChanging();
					this._SenderINN = value;
					this.SendPropertyChanged("SenderINN");
					this.OnSenderINNChanged();
				}
			}
		}
		
		[Column(Storage="_SenderTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SenderTitle
		{
			get
			{
				return this._SenderTitle;
			}
			set
			{
				if ((this._SenderTitle != value))
				{
					this.OnSenderTitleChanging(value);
					this.SendPropertyChanging();
					this._SenderTitle = value;
					this.SendPropertyChanged("SenderTitle");
					this.OnSenderTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SenderAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SenderAddress
		{
			get
			{
				return this._SenderAddress;
			}
			set
			{
				if ((this._SenderAddress != value))
				{
					this.OnSenderAddressChanging(value);
					this.SendPropertyChanging();
					this._SenderAddress = value;
					this.SendPropertyChanged("SenderAddress");
					this.OnSenderAddressChanged();
				}
			}
		}
		
		[Column(Storage="_RecipientINN", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string RecipientINN
		{
			get
			{
				return this._RecipientINN;
			}
			set
			{
				if ((this._RecipientINN != value))
				{
					this.OnRecipientINNChanging(value);
					this.SendPropertyChanging();
					this._RecipientINN = value;
					this.SendPropertyChanged("RecipientINN");
					this.OnRecipientINNChanged();
				}
			}
		}
		
		[Column(Storage="_RecipientTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string RecipientTitle
		{
			get
			{
				return this._RecipientTitle;
			}
			set
			{
				if ((this._RecipientTitle != value))
				{
					this.OnRecipientTitleChanging(value);
					this.SendPropertyChanging();
					this._RecipientTitle = value;
					this.SendPropertyChanged("RecipientTitle");
					this.OnRecipientTitleChanged();
				}
			}
		}
		
		[Column(Storage="_RecipientAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string RecipientAddress
		{
			get
			{
				return this._RecipientAddress;
			}
			set
			{
				if ((this._RecipientAddress != value))
				{
					this.OnRecipientAddressChanging(value);
					this.SendPropertyChanging();
					this._RecipientAddress = value;
					this.SendPropertyChanged("RecipientAddress");
					this.OnRecipientAddressChanged();
				}
			}
		}
		
		[Column(Storage="_CustomsConditions", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CustomsConditions
		{
			get
			{
				return this._CustomsConditions;
			}
			set
			{
				if ((this._CustomsConditions != value))
				{
					this.OnCustomsConditionsChanging(value);
					this.SendPropertyChanging();
					this._CustomsConditions = value;
					this.SendPropertyChanged("CustomsConditions");
					this.OnCustomsConditionsChanged();
				}
			}
		}
		
		[Column(Storage="_ApproveDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ApproveDate
		{
			get
			{
				return this._ApproveDate;
			}
			set
			{
				if ((this._ApproveDate != value))
				{
					this.OnApproveDateChanging(value);
					this.SendPropertyChanging();
					this._ApproveDate = value;
					this.SendPropertyChanged("ApproveDate");
					this.OnApproveDateChanged();
				}
			}
		}
		
		[Column(Storage="_FactDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FactDate
		{
			get
			{
				return this._FactDate;
			}
			set
			{
				if ((this._FactDate != value))
				{
					this.OnFactDateChanging(value);
					this.SendPropertyChanging();
					this._FactDate = value;
					this.SendPropertyChanged("FactDate");
					this.OnFactDateChanged();
				}
			}
		}
		
		[Column(Storage="_Containers", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Containers
		{
			get
			{
				return this._Containers;
			}
			set
			{
				if ((this._Containers != value))
				{
					this.OnContainersChanging(value);
					this.SendPropertyChanging();
					this._Containers = value;
					this.SendPropertyChanged("Containers");
					this.OnContainersChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity1", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Quantity1
		{
			get
			{
				return this._Quantity1;
			}
			set
			{
				if ((this._Quantity1 != value))
				{
					this.OnQuantity1Changing(value);
					this.SendPropertyChanging();
					this._Quantity1 = value;
					this.SendPropertyChanged("Quantity1");
					this.OnQuantity1Changed();
				}
			}
		}
		
		[Column(Storage="_Measure1", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Measure1
		{
			get
			{
				return this._Measure1;
			}
			set
			{
				if ((this._Measure1 != value))
				{
					this.OnMeasure1Changing(value);
					this.SendPropertyChanging();
					this._Measure1 = value;
					this.SendPropertyChanged("Measure1");
					this.OnMeasure1Changed();
				}
			}
		}
		
		[Column(Storage="_Quantity2", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Quantity2
		{
			get
			{
				return this._Quantity2;
			}
			set
			{
				if ((this._Quantity2 != value))
				{
					this.OnQuantity2Changing(value);
					this.SendPropertyChanging();
					this._Quantity2 = value;
					this.SendPropertyChanged("Quantity2");
					this.OnQuantity2Changed();
				}
			}
		}
		
		[Column(Storage="_Measure2", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Measure2
		{
			get
			{
				return this._Measure2;
			}
			set
			{
				if ((this._Measure2 != value))
				{
					this.OnMeasure2Changing(value);
					this.SendPropertyChanging();
					this._Measure2 = value;
					this.SendPropertyChanged("Measure2");
					this.OnMeasure2Changed();
				}
			}
		}
		
		[Column(Storage="_Quantity3", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Quantity3
		{
			get
			{
				return this._Quantity3;
			}
			set
			{
				if ((this._Quantity3 != value))
				{
					this.OnQuantity3Changing(value);
					this.SendPropertyChanging();
					this._Quantity3 = value;
					this.SendPropertyChanged("Quantity3");
					this.OnQuantity3Changed();
				}
			}
		}
		
		[Column(Storage="_Measure3", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Measure3
		{
			get
			{
				return this._Measure3;
			}
			set
			{
				if ((this._Measure3 != value))
				{
					this.OnMeasure3Changing(value);
					this.SendPropertyChanging();
					this._Measure3 = value;
					this.SendPropertyChanged("Measure3");
					this.OnMeasure3Changed();
				}
			}
		}
		
		[Column(Storage="_CountryFromID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CountryFromID
		{
			get
			{
				return this._CountryFromID;
			}
			set
			{
				if ((this._CountryFromID != value))
				{
					if (this._CountryFrom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryFromIDChanging(value);
					this.SendPropertyChanging();
					this._CountryFromID = value;
					this.SendPropertyChanged("CountryFromID");
					this.OnCountryFromIDChanged();
				}
			}
		}
		
		[Column(Storage="_CountryToID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CountryToID
		{
			get
			{
				return this._CountryToID;
			}
			set
			{
				if ((this._CountryToID != value))
				{
					if (this._CountryTo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryToIDChanging(value);
					this.SendPropertyChanging();
					this._CountryToID = value;
					this.SendPropertyChanged("CountryToID");
					this.OnCountryToIDChanged();
				}
			}
		}
		
		[Column(Storage="_CountryOriginID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CountryOriginID
		{
			get
			{
				return this._CountryOriginID;
			}
			set
			{
				if ((this._CountryOriginID != value))
				{
					if (this._CountryOrigin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryOriginIDChanging(value);
					this.SendPropertyChanging();
					this._CountryOriginID = value;
					this.SendPropertyChanged("CountryOriginID");
					this.OnCountryOriginIDChanged();
				}
			}
		}
		
		[Column(Storage="_CNID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CNID
		{
			get
			{
				return this._CNID;
			}
			set
			{
				if ((this._CNID != value))
				{
					if (this._CN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNIDChanging(value);
					this.SendPropertyChanging();
					this._CNID = value;
					this.SendPropertyChanged("CNID");
					this.OnCNIDChanged();
				}
			}
		}
		
		[Column(Storage="_SenderCountryID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SenderCountryID
		{
			get
			{
				return this._SenderCountryID;
			}
			set
			{
				if ((this._SenderCountryID != value))
				{
					if (this._SenderCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderCountryIDChanging(value);
					this.SendPropertyChanging();
					this._SenderCountryID = value;
					this.SendPropertyChanged("SenderCountryID");
					this.OnSenderCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_RecipientCountryID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RecipientCountryID
		{
			get
			{
				return this._RecipientCountryID;
			}
			set
			{
				if ((this._RecipientCountryID != value))
				{
					if (this._RecipientCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecipientCountryIDChanging(value);
					this.SendPropertyChanging();
					this._RecipientCountryID = value;
					this.SendPropertyChanged("RecipientCountryID");
					this.OnRecipientCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_CountryFrom", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_CountryFrom
		{
			get
			{
				return this._Copy_CountryFrom;
			}
			set
			{
				if ((this._Copy_CountryFrom != value))
				{
					this.OnCopy_CountryFromChanging(value);
					this.SendPropertyChanging();
					this._Copy_CountryFrom = value;
					this.SendPropertyChanged("Copy_CountryFrom");
					this.OnCopy_CountryFromChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_CountryTo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_CountryTo
		{
			get
			{
				return this._Copy_CountryTo;
			}
			set
			{
				if ((this._Copy_CountryTo != value))
				{
					this.OnCopy_CountryToChanging(value);
					this.SendPropertyChanging();
					this._Copy_CountryTo = value;
					this.SendPropertyChanged("Copy_CountryTo");
					this.OnCopy_CountryToChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_CountryOrigin", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_CountryOrigin
		{
			get
			{
				return this._Copy_CountryOrigin;
			}
			set
			{
				if ((this._Copy_CountryOrigin != value))
				{
					this.OnCopy_CountryOriginChanging(value);
					this.SendPropertyChanging();
					this._Copy_CountryOrigin = value;
					this.SendPropertyChanged("Copy_CountryOrigin");
					this.OnCopy_CountryOriginChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_CN", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_CN
		{
			get
			{
				return this._Copy_CN;
			}
			set
			{
				if ((this._Copy_CN != value))
				{
					this.OnCopy_CNChanging(value);
					this.SendPropertyChanging();
					this._Copy_CN = value;
					this.SendPropertyChanged("Copy_CN");
					this.OnCopy_CNChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_SenderCountry", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_SenderCountry
		{
			get
			{
				return this._Copy_SenderCountry;
			}
			set
			{
				if ((this._Copy_SenderCountry != value))
				{
					this.OnCopy_SenderCountryChanging(value);
					this.SendPropertyChanging();
					this._Copy_SenderCountry = value;
					this.SendPropertyChanged("Copy_SenderCountry");
					this.OnCopy_SenderCountryChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_RecipientCountry", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_RecipientCountry
		{
			get
			{
				return this._Copy_RecipientCountry;
			}
			set
			{
				if ((this._Copy_RecipientCountry != value))
				{
					this.OnCopy_RecipientCountryChanging(value);
					this.SendPropertyChanging();
					this._Copy_RecipientCountry = value;
					this.SendPropertyChanged("Copy_RecipientCountry");
					this.OnCopy_RecipientCountryChanged();
				}
			}
		}
		
		[Column(Storage="_G32", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int G32
		{
			get
			{
				return this._G32;
			}
			set
			{
				if ((this._G32 != value))
				{
					this.OnG32Changing(value);
					this.SendPropertyChanging();
					this._G32 = value;
					this.SendPropertyChanged("G32");
					this.OnG32Changed();
				}
			}
		}
		
		[Column(Storage="_LicenseNumber", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LicenseNumber
		{
			get
			{
				return this._LicenseNumber;
			}
			set
			{
				if ((this._LicenseNumber != value))
				{
					this.OnLicenseNumberChanging(value);
					this.SendPropertyChanging();
					this._LicenseNumber = value;
					this.SendPropertyChanged("LicenseNumber");
					this.OnLicenseNumberChanged();
				}
			}
		}
		
		[Column(Storage="_FinOGRN", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FinOGRN
		{
			get
			{
				return this._FinOGRN;
			}
			set
			{
				if ((this._FinOGRN != value))
				{
					this.OnFinOGRNChanging(value);
					this.SendPropertyChanging();
					this._FinOGRN = value;
					this.SendPropertyChanged("FinOGRN");
					this.OnFinOGRNChanged();
				}
			}
		}
		
		[Column(Storage="_FinINN", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FinINN
		{
			get
			{
				return this._FinINN;
			}
			set
			{
				if ((this._FinINN != value))
				{
					this.OnFinINNChanging(value);
					this.SendPropertyChanging();
					this._FinINN = value;
					this.SendPropertyChanged("FinINN");
					this.OnFinINNChanged();
				}
			}
		}
		
		[Column(Storage="_FinTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FinTitle
		{
			get
			{
				return this._FinTitle;
			}
			set
			{
				if ((this._FinTitle != value))
				{
					this.OnFinTitleChanging(value);
					this.SendPropertyChanging();
					this._FinTitle = value;
					this.SendPropertyChanged("FinTitle");
					this.OnFinTitleChanged();
				}
			}
		}
		
		[Column(Storage="_CommodityComment", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CommodityComment
		{
			get
			{
				return this._CommodityComment;
			}
			set
			{
				if ((this._CommodityComment != value))
				{
					this.OnCommodityCommentChanging(value);
					this.SendPropertyChanging();
					this._CommodityComment = value;
					this.SendPropertyChanged("CommodityComment");
					this.OnCommodityCommentChanged();
				}
			}
		}
		
		[Association(Name="FK_CustomsDeclaration_CN", Storage="_CN", ThisKey="CNID", OtherKey="CNID", IsForeignKey=true)]
		public C_CN CN
		{
			get
			{
				return this._CN.Entity;
			}
			set
			{
				C_CN previousValue = this._CN.Entity;
				if (((previousValue != value) 
							|| (this._CN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CN.Entity = null;
						previousValue.CustomsDeclaration.Remove(this);
					}
					this._CN.Entity = value;
					if ((value != null))
					{
						value.CustomsDeclaration.Add(this);
						this._CNID = value.CNID;
					}
					else
					{
						this._CNID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CN");
				}
			}
		}
		
		[Association(Name="FK_CustomsDeclaration_CountryFrom", Storage="_CountryFrom", ThisKey="CountryFromID", OtherKey="CountryID", IsForeignKey=true)]
		public C_Country CountryFrom
		{
			get
			{
				return this._CountryFrom.Entity;
			}
			set
			{
				C_Country previousValue = this._CountryFrom.Entity;
				if (((previousValue != value) 
							|| (this._CountryFrom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryFrom.Entity = null;
						previousValue.CustomsDeclaration.Remove(this);
					}
					this._CountryFrom.Entity = value;
					if ((value != null))
					{
						value.CustomsDeclaration.Add(this);
						this._CountryFromID = value.CountryID;
					}
					else
					{
						this._CountryFromID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CountryFrom");
				}
			}
		}
		
		[Association(Name="FK_CustomsDeclaration_CountryOrigin", Storage="_CountryOrigin", ThisKey="CountryOriginID", OtherKey="CountryID", IsForeignKey=true)]
		public C_Country CountryOrigin
		{
			get
			{
				return this._CountryOrigin.Entity;
			}
			set
			{
				C_Country previousValue = this._CountryOrigin.Entity;
				if (((previousValue != value) 
							|| (this._CountryOrigin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryOrigin.Entity = null;
						previousValue.Country.Remove(this);
					}
					this._CountryOrigin.Entity = value;
					if ((value != null))
					{
						value.Country.Add(this);
						this._CountryOriginID = value.CountryID;
					}
					else
					{
						this._CountryOriginID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CountryOrigin");
				}
			}
		}
		
		[Association(Name="FK_CustomsDeclaration_CountryTo", Storage="_CountryTo", ThisKey="CountryToID", OtherKey="CountryID", IsForeignKey=true)]
		public C_Country CountryTo
		{
			get
			{
				return this._CountryTo.Entity;
			}
			set
			{
				C_Country previousValue = this._CountryTo.Entity;
				if (((previousValue != value) 
							|| (this._CountryTo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryTo.Entity = null;
						previousValue.CustomsDeclaration_CountryTo.Remove(this);
					}
					this._CountryTo.Entity = value;
					if ((value != null))
					{
						value.CustomsDeclaration_CountryTo.Add(this);
						this._CountryToID = value.CountryID;
					}
					else
					{
						this._CountryToID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CountryTo");
				}
			}
		}
		
		[Association(Name="FK_CustomsDeclaration_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.CustomsDeclaration.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.CustomsDeclaration.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_CustomsDeclaration_License", Storage="_License", ThisKey="LicenseGUID", OtherKey="OrderGUID", IsForeignKey=true)]
		public OrderDoc License
		{
			get
			{
				return this._License.Entity;
			}
			set
			{
				OrderDoc previousValue = this._License.Entity;
				if (((previousValue != value) 
							|| (this._License.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._License.Entity = null;
						previousValue.CustomsDeclaration.Remove(this);
					}
					this._License.Entity = value;
					if ((value != null))
					{
						value.CustomsDeclaration.Add(this);
						this._LicenseGUID = value.OrderGUID;
					}
					else
					{
						this._LicenseGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("License");
				}
			}
		}
		
		[Association(Name="FK_CustomsDeclaration_Operation", Storage="_Operation", ThisKey="OperationID", OtherKey="OperationTypeID", IsForeignKey=true)]
		public C_OperationType Operation
		{
			get
			{
				return this._Operation.Entity;
			}
			set
			{
				C_OperationType previousValue = this._Operation.Entity;
				if (((previousValue != value) 
							|| (this._Operation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Operation.Entity = null;
						previousValue.CustomsDeclaration.Remove(this);
					}
					this._Operation.Entity = value;
					if ((value != null))
					{
						value.CustomsDeclaration.Add(this);
						this._OperationID = value.OperationTypeID;
					}
					else
					{
						this._OperationID = default(int);
					}
					this.SendPropertyChanged("Operation");
				}
			}
		}
		
		[Association(Name="FK_CustomsDeclaration_RecipientCountry", Storage="_RecipientCountry", ThisKey="RecipientCountryID", OtherKey="CountryID", IsForeignKey=true)]
		public C_Country RecipientCountry
		{
			get
			{
				return this._RecipientCountry.Entity;
			}
			set
			{
				C_Country previousValue = this._RecipientCountry.Entity;
				if (((previousValue != value) 
							|| (this._RecipientCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecipientCountry.Entity = null;
						previousValue.CustomsDeclaration_RecipientCountry.Remove(this);
					}
					this._RecipientCountry.Entity = value;
					if ((value != null))
					{
						value.CustomsDeclaration_RecipientCountry.Add(this);
						this._RecipientCountryID = value.CountryID;
					}
					else
					{
						this._RecipientCountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RecipientCountry");
				}
			}
		}
		
		[Association(Name="FK_CustomsDeclaration_SenderCountry", Storage="_SenderCountry", ThisKey="SenderCountryID", OtherKey="CountryID", IsForeignKey=true)]
		public C_Country SenderCountry
		{
			get
			{
				return this._SenderCountry.Entity;
			}
			set
			{
				C_Country previousValue = this._SenderCountry.Entity;
				if (((previousValue != value) 
							|| (this._SenderCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SenderCountry.Entity = null;
						previousValue.CustomsDeclaration_SenderCountry.Remove(this);
					}
					this._SenderCountry.Entity = value;
					if ((value != null))
					{
						value.CustomsDeclaration_SenderCountry.Add(this);
						this._SenderCountryID = value.CountryID;
					}
					else
					{
						this._SenderCountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SenderCountry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Email;
		
		private string _Addinfo;
		
		private int _RepresentationID;
		
		private string _Post;
		
		private string _Code;
		
		private System.Nullable<int> _SPM_SubjectID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private System.Nullable<decimal> _OldEmployeeID;
		
		private System.Nullable<decimal> _OldPersonID;
		
		private bool _IsChiefPerson;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private System.Guid _MasterObjectGUID;
		
		private string _LetterHeader;
		
		private System.Nullable<int> _SignSampleFileID;
		
		private System.Nullable<int> _StampSampleFileID;
		
		private string _Surname;
		
		private string _Firstname;
		
		private string _Patronymic;
		
		private string _Title;
		
		private bool _IsDeleted;
		
		private EntitySet<Blank> _Blank;
		
		private EntitySet<Blank> _Blank_Employee;
		
		private EntitySet<CertificateInfo> _CertificateInfo;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<Representation> _Representation;
		
		private EntityRef<N_File> _SignSample;
		
		private EntityRef<SPM_Subject> _SPM_Subject;
		
		private EntityRef<N_File> _StampSample;
		
		private EntitySet<FactAnnulment> _FactAnnulment;
		
		private EntitySet<FactAnnulment> _FactAnnulment_FactEmployee;
		
		private EntitySet<FactForm> _FactForm;
		
		private EntitySet<FactReject> _FactReject;
		
		private EntitySet<FactReject> _FactReject_FactEmployee;
		
		private EntitySet<FactResume> _FactResume;
		
		private EntitySet<FactResume> _FactResume_FactEmployee;
		
		private EntitySet<FactSuspend> _FactSuspend;
		
		private EntitySet<FactSuspend> _FactSuspend_FactEmployee;
		
		private EntitySet<OrderDoc> _OrderDoc;
		
		private EntitySet<OrderDoc> _OrderDoc_FactForm_Employee;
		
		private EntitySet<OrderDoc> _OrderDoc_IssueEmployee;
		
		private EntitySet<OrderDoc> _OrderDoc_RegEmployee;
		
		private EntitySet<OrderDocPassport> _OrderDocPassport;
		
		private EntitySet<OrderDocPassport> _OrderDocPassport_PerfEmployee;
		
		private EntitySet<OrderDocResponsible> _OrderDocResponsible;
		
		private EntitySet<VisitException> _VisitException;
		
		private EntitySet<VisitRecord> _VisitRecord;
		
		private EntitySet<VisitSchedule> _VisitSchedule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddinfoChanging(string value);
    partial void OnAddinfoChanged();
    partial void OnRepresentationIDChanging(int value);
    partial void OnRepresentationIDChanged();
    partial void OnPostChanging(string value);
    partial void OnPostChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnSPM_SubjectIDChanging(System.Nullable<int> value);
    partial void OnSPM_SubjectIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnOldEmployeeIDChanging(System.Nullable<decimal> value);
    partial void OnOldEmployeeIDChanged();
    partial void OnOldPersonIDChanging(System.Nullable<decimal> value);
    partial void OnOldPersonIDChanged();
    partial void OnIsChiefPersonChanging(bool value);
    partial void OnIsChiefPersonChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    partial void OnLetterHeaderChanging(string value);
    partial void OnLetterHeaderChanged();
    partial void OnSignSampleFileIDChanging(System.Nullable<int> value);
    partial void OnSignSampleFileIDChanged();
    partial void OnStampSampleFileIDChanging(System.Nullable<int> value);
    partial void OnStampSampleFileIDChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Employee()
		{
			this._Blank = new EntitySet<Blank>(new Action<Blank>(this.attach_Blank), new Action<Blank>(this.detach_Blank));
			this._Blank_Employee = new EntitySet<Blank>(new Action<Blank>(this.attach_Blank_Employee), new Action<Blank>(this.detach_Blank_Employee));
			this._CertificateInfo = new EntitySet<CertificateInfo>(new Action<CertificateInfo>(this.attach_CertificateInfo), new Action<CertificateInfo>(this.detach_CertificateInfo));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Representation = default(EntityRef<Representation>);
			this._SignSample = default(EntityRef<N_File>);
			this._SPM_Subject = default(EntityRef<SPM_Subject>);
			this._StampSample = default(EntityRef<N_File>);
			this._FactAnnulment = new EntitySet<FactAnnulment>(new Action<FactAnnulment>(this.attach_FactAnnulment), new Action<FactAnnulment>(this.detach_FactAnnulment));
			this._FactAnnulment_FactEmployee = new EntitySet<FactAnnulment>(new Action<FactAnnulment>(this.attach_FactAnnulment_FactEmployee), new Action<FactAnnulment>(this.detach_FactAnnulment_FactEmployee));
			this._FactForm = new EntitySet<FactForm>(new Action<FactForm>(this.attach_FactForm), new Action<FactForm>(this.detach_FactForm));
			this._FactReject = new EntitySet<FactReject>(new Action<FactReject>(this.attach_FactReject), new Action<FactReject>(this.detach_FactReject));
			this._FactReject_FactEmployee = new EntitySet<FactReject>(new Action<FactReject>(this.attach_FactReject_FactEmployee), new Action<FactReject>(this.detach_FactReject_FactEmployee));
			this._FactResume = new EntitySet<FactResume>(new Action<FactResume>(this.attach_FactResume), new Action<FactResume>(this.detach_FactResume));
			this._FactResume_FactEmployee = new EntitySet<FactResume>(new Action<FactResume>(this.attach_FactResume_FactEmployee), new Action<FactResume>(this.detach_FactResume_FactEmployee));
			this._FactSuspend = new EntitySet<FactSuspend>(new Action<FactSuspend>(this.attach_FactSuspend), new Action<FactSuspend>(this.detach_FactSuspend));
			this._FactSuspend_FactEmployee = new EntitySet<FactSuspend>(new Action<FactSuspend>(this.attach_FactSuspend_FactEmployee), new Action<FactSuspend>(this.detach_FactSuspend_FactEmployee));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._OrderDoc_FactForm_Employee = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc_FactForm_Employee), new Action<OrderDoc>(this.detach_OrderDoc_FactForm_Employee));
			this._OrderDoc_IssueEmployee = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc_IssueEmployee), new Action<OrderDoc>(this.detach_OrderDoc_IssueEmployee));
			this._OrderDoc_RegEmployee = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc_RegEmployee), new Action<OrderDoc>(this.detach_OrderDoc_RegEmployee));
			this._OrderDocPassport = new EntitySet<OrderDocPassport>(new Action<OrderDocPassport>(this.attach_OrderDocPassport), new Action<OrderDocPassport>(this.detach_OrderDocPassport));
			this._OrderDocPassport_PerfEmployee = new EntitySet<OrderDocPassport>(new Action<OrderDocPassport>(this.attach_OrderDocPassport_PerfEmployee), new Action<OrderDocPassport>(this.detach_OrderDocPassport_PerfEmployee));
			this._OrderDocResponsible = new EntitySet<OrderDocResponsible>(new Action<OrderDocResponsible>(this.attach_OrderDocResponsible), new Action<OrderDocResponsible>(this.detach_OrderDocResponsible));
			this._VisitException = new EntitySet<VisitException>(new Action<VisitException>(this.attach_VisitException), new Action<VisitException>(this.detach_VisitException));
			this._VisitRecord = new EntitySet<VisitRecord>(new Action<VisitRecord>(this.attach_VisitRecord), new Action<VisitRecord>(this.detach_VisitRecord));
			this._VisitSchedule = new EntitySet<VisitSchedule>(new Action<VisitSchedule>(this.attach_VisitSchedule), new Action<VisitSchedule>(this.detach_VisitSchedule));
			OnCreated();
		}
		
		[Column(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Addinfo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Addinfo
		{
			get
			{
				return this._Addinfo;
			}
			set
			{
				if ((this._Addinfo != value))
				{
					this.OnAddinfoChanging(value);
					this.SendPropertyChanging();
					this._Addinfo = value;
					this.SendPropertyChanged("Addinfo");
					this.OnAddinfoChanged();
				}
			}
		}
		
		[Column(Storage="_RepresentationID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					if (this._Representation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentationID = value;
					this.SendPropertyChanged("RepresentationID");
					this.OnRepresentationIDChanged();
				}
			}
		}
		
		[Column(Storage="_Post", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				if ((this._Post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._Post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_SPM_SubjectID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SPM_SubjectID
		{
			get
			{
				return this._SPM_SubjectID;
			}
			set
			{
				if ((this._SPM_SubjectID != value))
				{
					if (this._SPM_Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSPM_SubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SPM_SubjectID = value;
					this.SendPropertyChanged("SPM_SubjectID");
					this.OnSPM_SubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_OldEmployeeID", DbType="Decimal(14,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> OldEmployeeID
		{
			get
			{
				return this._OldEmployeeID;
			}
			set
			{
				if ((this._OldEmployeeID != value))
				{
					this.OnOldEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._OldEmployeeID = value;
					this.SendPropertyChanged("OldEmployeeID");
					this.OnOldEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_OldPersonID", DbType="Decimal(14,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> OldPersonID
		{
			get
			{
				return this._OldPersonID;
			}
			set
			{
				if ((this._OldPersonID != value))
				{
					this.OnOldPersonIDChanging(value);
					this.SendPropertyChanging();
					this._OldPersonID = value;
					this.SendPropertyChanged("OldPersonID");
					this.OnOldPersonIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsChiefPerson", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsChiefPerson
		{
			get
			{
				return this._IsChiefPerson;
			}
			set
			{
				if ((this._IsChiefPerson != value))
				{
					this.OnIsChiefPersonChanging(value);
					this.SendPropertyChanging();
					this._IsChiefPerson = value;
					this.SendPropertyChanged("IsChiefPerson");
					this.OnIsChiefPersonChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_LetterHeader", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string LetterHeader
		{
			get
			{
				return this._LetterHeader;
			}
			set
			{
				if ((this._LetterHeader != value))
				{
					this.OnLetterHeaderChanging(value);
					this.SendPropertyChanging();
					this._LetterHeader = value;
					this.SendPropertyChanged("LetterHeader");
					this.OnLetterHeaderChanged();
				}
			}
		}
		
		[Column(Storage="_SignSampleFileID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SignSampleFileID
		{
			get
			{
				return this._SignSampleFileID;
			}
			set
			{
				if ((this._SignSampleFileID != value))
				{
					if (this._SignSample.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSignSampleFileIDChanging(value);
					this.SendPropertyChanging();
					this._SignSampleFileID = value;
					this.SendPropertyChanged("SignSampleFileID");
					this.OnSignSampleFileIDChanged();
				}
			}
		}
		
		[Column(Storage="_StampSampleFileID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> StampSampleFileID
		{
			get
			{
				return this._StampSampleFileID;
			}
			set
			{
				if ((this._StampSampleFileID != value))
				{
					if (this._StampSample.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStampSampleFileIDChanging(value);
					this.SendPropertyChanging();
					this._StampSampleFileID = value;
					this.SendPropertyChanged("StampSampleFileID");
					this.OnStampSampleFileIDChanged();
				}
			}
		}
		
		[Column(Storage="_Surname", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[Column(Storage="_Firstname", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[Column(Storage="_Patronymic", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[Column(Storage="_Title", AutoSync=AutoSync.Always, DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(([Surname]+isnull((\' \'+substring([Firstname],(1),(1)))+\'.\',\'\'))+isnull((\'" +
			" \'+substring([Patronymic],(1),(1)))+\'.\',\'\'),\'\'))")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_Blank_DublicateEmployee", Storage="_Blank", ThisKey="EmployeeID", OtherKey="DublicateEmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<Blank> Blank
		{
			get
			{
				return this._Blank;
			}
			set
			{
				this._Blank.Assign(value);
			}
		}
		
		[Association(Name="FK_Blank_Employee", Storage="_Blank_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<Blank> Blank_Employee
		{
			get
			{
				return this._Blank_Employee;
			}
			set
			{
				this._Blank_Employee.Assign(value);
			}
		}
		
		[Association(Name="FK_CertificateInfo_Employee", Storage="_CertificateInfo", ThisKey="EmployeeID", OtherKey="EmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<CertificateInfo> CertificateInfo
		{
			get
			{
				return this._CertificateInfo;
			}
			set
			{
				this._CertificateInfo.Assign(value);
			}
		}
		
		[Association(Name="FK_Employee_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.Employee.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.Employee.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_Employee_Representation", Storage="_Representation", ThisKey="RepresentationID", OtherKey="RepresentationID", IsForeignKey=true)]
		public Representation Representation
		{
			get
			{
				return this._Representation.Entity;
			}
			set
			{
				Representation previousValue = this._Representation.Entity;
				if (((previousValue != value) 
							|| (this._Representation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representation.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Representation.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._RepresentationID = value.RepresentationID;
					}
					else
					{
						this._RepresentationID = default(int);
					}
					this.SendPropertyChanged("Representation");
				}
			}
		}
		
		[Association(Name="FK_Employee_SignSample", Storage="_SignSample", ThisKey="SignSampleFileID", OtherKey="FileID", IsForeignKey=true)]
		public N_File SignSample
		{
			get
			{
				return this._SignSample.Entity;
			}
			set
			{
				N_File previousValue = this._SignSample.Entity;
				if (((previousValue != value) 
							|| (this._SignSample.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SignSample.Entity = null;
						previousValue.Employee.Remove(this);
					}
					this._SignSample.Entity = value;
					if ((value != null))
					{
						value.Employee.Add(this);
						this._SignSampleFileID = value.FileID;
					}
					else
					{
						this._SignSampleFileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SignSample");
				}
			}
		}
		
		[Association(Name="FK_Employee_SPM_Subject", Storage="_SPM_Subject", ThisKey="SPM_SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject SPM_Subject
		{
			get
			{
				return this._SPM_Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._SPM_Subject.Entity;
				if (((previousValue != value) 
							|| (this._SPM_Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SPM_Subject.Entity = null;
						previousValue.Subject.Remove(this);
					}
					this._SPM_Subject.Entity = value;
					if ((value != null))
					{
						value.Subject.Add(this);
						this._SPM_SubjectID = value.SubjectID;
					}
					else
					{
						this._SPM_SubjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SPM_Subject");
				}
			}
		}
		
		[Association(Name="FK_Employee_StampSample", Storage="_StampSample", ThisKey="StampSampleFileID", OtherKey="FileID", IsForeignKey=true)]
		public N_File StampSample
		{
			get
			{
				return this._StampSample.Entity;
			}
			set
			{
				N_File previousValue = this._StampSample.Entity;
				if (((previousValue != value) 
							|| (this._StampSample.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StampSample.Entity = null;
						previousValue.File.Remove(this);
					}
					this._StampSample.Entity = value;
					if ((value != null))
					{
						value.File.Add(this);
						this._StampSampleFileID = value.FileID;
					}
					else
					{
						this._StampSampleFileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("StampSample");
				}
			}
		}
		
		[Association(Name="FK_FactAnnulment_Employee", Storage="_FactAnnulment", ThisKey="EmployeeID", OtherKey="EmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<FactAnnulment> FactAnnulment
		{
			get
			{
				return this._FactAnnulment;
			}
			set
			{
				this._FactAnnulment.Assign(value);
			}
		}
		
		[Association(Name="FK_FactAnnulment_FactEmployee", Storage="_FactAnnulment_FactEmployee", ThisKey="EmployeeID", OtherKey="FactEmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<FactAnnulment> FactAnnulment_FactEmployee
		{
			get
			{
				return this._FactAnnulment_FactEmployee;
			}
			set
			{
				this._FactAnnulment_FactEmployee.Assign(value);
			}
		}
		
		[Association(Name="FK_FactForm_Employee", Storage="_FactForm", ThisKey="EmployeeID", OtherKey="EmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<FactForm> FactForm
		{
			get
			{
				return this._FactForm;
			}
			set
			{
				this._FactForm.Assign(value);
			}
		}
		
		[Association(Name="FK_FactReject_Employee", Storage="_FactReject", ThisKey="EmployeeID", OtherKey="EmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<FactReject> FactReject
		{
			get
			{
				return this._FactReject;
			}
			set
			{
				this._FactReject.Assign(value);
			}
		}
		
		[Association(Name="FK_FactReject_FactEmployee", Storage="_FactReject_FactEmployee", ThisKey="EmployeeID", OtherKey="FactEmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<FactReject> FactReject_FactEmployee
		{
			get
			{
				return this._FactReject_FactEmployee;
			}
			set
			{
				this._FactReject_FactEmployee.Assign(value);
			}
		}
		
		[Association(Name="FK_FactResume_Employee", Storage="_FactResume", ThisKey="EmployeeID", OtherKey="EmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<FactResume> FactResume
		{
			get
			{
				return this._FactResume;
			}
			set
			{
				this._FactResume.Assign(value);
			}
		}
		
		[Association(Name="FK_FactResume_FactEmployee", Storage="_FactResume_FactEmployee", ThisKey="EmployeeID", OtherKey="FactEmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<FactResume> FactResume_FactEmployee
		{
			get
			{
				return this._FactResume_FactEmployee;
			}
			set
			{
				this._FactResume_FactEmployee.Assign(value);
			}
		}
		
		[Association(Name="FK_FactSuspend_Employee", Storage="_FactSuspend", ThisKey="EmployeeID", OtherKey="EmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<FactSuspend> FactSuspend
		{
			get
			{
				return this._FactSuspend;
			}
			set
			{
				this._FactSuspend.Assign(value);
			}
		}
		
		[Association(Name="FK_FactSuspend_FactEmployee", Storage="_FactSuspend_FactEmployee", ThisKey="EmployeeID", OtherKey="FactEmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<FactSuspend> FactSuspend_FactEmployee
		{
			get
			{
				return this._FactSuspend_FactEmployee;
			}
			set
			{
				this._FactSuspend_FactEmployee.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_Employee", Storage="_OrderDoc", ThisKey="EmployeeID", OtherKey="EmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_FactForm_Employee", Storage="_OrderDoc_FactForm_Employee", ThisKey="EmployeeID", OtherKey="FactForm_EmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc_FactForm_Employee
		{
			get
			{
				return this._OrderDoc_FactForm_Employee;
			}
			set
			{
				this._OrderDoc_FactForm_Employee.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_IssueEmployee", Storage="_OrderDoc_IssueEmployee", ThisKey="EmployeeID", OtherKey="IssueEmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc_IssueEmployee
		{
			get
			{
				return this._OrderDoc_IssueEmployee;
			}
			set
			{
				this._OrderDoc_IssueEmployee.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_RegEmployee", Storage="_OrderDoc_RegEmployee", ThisKey="EmployeeID", OtherKey="RegEmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc_RegEmployee
		{
			get
			{
				return this._OrderDoc_RegEmployee;
			}
			set
			{
				this._OrderDoc_RegEmployee.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocPassport_Employee", Storage="_OrderDocPassport", ThisKey="EmployeeID", OtherKey="EmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocPassport> OrderDocPassport
		{
			get
			{
				return this._OrderDocPassport;
			}
			set
			{
				this._OrderDocPassport.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocPassport_PerfEmployee", Storage="_OrderDocPassport_PerfEmployee", ThisKey="EmployeeID", OtherKey="PerfEmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocPassport> OrderDocPassport_PerfEmployee
		{
			get
			{
				return this._OrderDocPassport_PerfEmployee;
			}
			set
			{
				this._OrderDocPassport_PerfEmployee.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocResponsible_Employee", Storage="_OrderDocResponsible", ThisKey="EmployeeID", OtherKey="EmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocResponsible> OrderDocResponsible
		{
			get
			{
				return this._OrderDocResponsible;
			}
			set
			{
				this._OrderDocResponsible.Assign(value);
			}
		}
		
		[Association(Name="FK_VisitException_Employee", Storage="_VisitException", ThisKey="EmployeeID", OtherKey="EmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<VisitException> VisitException
		{
			get
			{
				return this._VisitException;
			}
			set
			{
				this._VisitException.Assign(value);
			}
		}
		
		[Association(Name="FK_VisitRecord_Employee", Storage="_VisitRecord", ThisKey="EmployeeID", OtherKey="EmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<VisitRecord> VisitRecord
		{
			get
			{
				return this._VisitRecord;
			}
			set
			{
				this._VisitRecord.Assign(value);
			}
		}
		
		[Association(Name="FK_VisitSchedule_Employee", Storage="_VisitSchedule", ThisKey="EmployeeID", OtherKey="EmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<VisitSchedule> VisitSchedule
		{
			get
			{
				return this._VisitSchedule;
			}
			set
			{
				this._VisitSchedule.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Blank(Blank entity)
		{
			this.SendPropertyChanging();
			entity.DublicateEmployee = this;
		}
		
		private void detach_Blank(Blank entity)
		{
			this.SendPropertyChanging();
			entity.DublicateEmployee = null;
		}
		
		private void attach_Blank_Employee(Blank entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Blank_Employee(Blank entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_CertificateInfo(CertificateInfo entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_CertificateInfo(CertificateInfo entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_FactAnnulment(FactAnnulment entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_FactAnnulment(FactAnnulment entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_FactAnnulment_FactEmployee(FactAnnulment entity)
		{
			this.SendPropertyChanging();
			entity.FactEmployee = this;
		}
		
		private void detach_FactAnnulment_FactEmployee(FactAnnulment entity)
		{
			this.SendPropertyChanging();
			entity.FactEmployee = null;
		}
		
		private void attach_FactForm(FactForm entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_FactForm(FactForm entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_FactReject(FactReject entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_FactReject(FactReject entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_FactReject_FactEmployee(FactReject entity)
		{
			this.SendPropertyChanging();
			entity.FactEmployee = this;
		}
		
		private void detach_FactReject_FactEmployee(FactReject entity)
		{
			this.SendPropertyChanging();
			entity.FactEmployee = null;
		}
		
		private void attach_FactResume(FactResume entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_FactResume(FactResume entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_FactResume_FactEmployee(FactResume entity)
		{
			this.SendPropertyChanging();
			entity.FactEmployee = this;
		}
		
		private void detach_FactResume_FactEmployee(FactResume entity)
		{
			this.SendPropertyChanging();
			entity.FactEmployee = null;
		}
		
		private void attach_FactSuspend(FactSuspend entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_FactSuspend(FactSuspend entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_FactSuspend_FactEmployee(FactSuspend entity)
		{
			this.SendPropertyChanging();
			entity.FactEmployee = this;
		}
		
		private void detach_FactSuspend_FactEmployee(FactSuspend entity)
		{
			this.SendPropertyChanging();
			entity.FactEmployee = null;
		}
		
		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_OrderDoc_FactForm_Employee(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.FactForm_Employee = this;
		}
		
		private void detach_OrderDoc_FactForm_Employee(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.FactForm_Employee = null;
		}
		
		private void attach_OrderDoc_IssueEmployee(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.IssueEmployee = this;
		}
		
		private void detach_OrderDoc_IssueEmployee(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.IssueEmployee = null;
		}
		
		private void attach_OrderDoc_RegEmployee(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.RegEmployee = this;
		}
		
		private void detach_OrderDoc_RegEmployee(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.RegEmployee = null;
		}
		
		private void attach_OrderDocPassport(OrderDocPassport entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_OrderDocPassport(OrderDocPassport entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_OrderDocPassport_PerfEmployee(OrderDocPassport entity)
		{
			this.SendPropertyChanging();
			entity.PerfEmployee = this;
		}
		
		private void detach_OrderDocPassport_PerfEmployee(OrderDocPassport entity)
		{
			this.SendPropertyChanging();
			entity.PerfEmployee = null;
		}
		
		private void attach_OrderDocResponsible(OrderDocResponsible entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_OrderDocResponsible(OrderDocResponsible entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_VisitException(VisitException entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_VisitException(VisitException entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_VisitSchedule(VisitSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_VisitSchedule(VisitSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[Table(Name="dbo.ErrorLog")]
	public partial class ErrorLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ErrorLogID;
		
		private System.DateTime _ErrorDate;
		
		private string _ErrorText;
		
		private string _Url;
		
		private string _UrlReferrer;
		
		private string _UserHostName;
		
		private string _UserHostAddress;
		
		private string _UserAgent;
		
		private string _RequestType;
		
		private string _Headers;
		
		private string _SqlLog;
		
		private string _UserName;
		
		private System.Data.Linq.Binary _Hash;
		
		private System.Nullable<int> _SimilarErrorID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnErrorLogIDChanging(int value);
    partial void OnErrorLogIDChanged();
    partial void OnErrorDateChanging(System.DateTime value);
    partial void OnErrorDateChanged();
    partial void OnErrorTextChanging(string value);
    partial void OnErrorTextChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnUrlReferrerChanging(string value);
    partial void OnUrlReferrerChanged();
    partial void OnUserHostNameChanging(string value);
    partial void OnUserHostNameChanged();
    partial void OnUserHostAddressChanging(string value);
    partial void OnUserHostAddressChanged();
    partial void OnUserAgentChanging(string value);
    partial void OnUserAgentChanged();
    partial void OnRequestTypeChanging(string value);
    partial void OnRequestTypeChanged();
    partial void OnHeadersChanging(string value);
    partial void OnHeadersChanged();
    partial void OnSqlLogChanging(string value);
    partial void OnSqlLogChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnHashChanging(System.Data.Linq.Binary value);
    partial void OnHashChanged();
    partial void OnSimilarErrorIDChanging(System.Nullable<int> value);
    partial void OnSimilarErrorIDChanged();
    #endregion
		
		public ErrorLog()
		{
			OnCreated();
		}
		
		[Column(Storage="_ErrorLogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ErrorLogID
		{
			get
			{
				return this._ErrorLogID;
			}
			set
			{
				if ((this._ErrorLogID != value))
				{
					this.OnErrorLogIDChanging(value);
					this.SendPropertyChanging();
					this._ErrorLogID = value;
					this.SendPropertyChanged("ErrorLogID");
					this.OnErrorLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime ErrorDate
		{
			get
			{
				return this._ErrorDate;
			}
			set
			{
				if ((this._ErrorDate != value))
				{
					this.OnErrorDateChanging(value);
					this.SendPropertyChanging();
					this._ErrorDate = value;
					this.SendPropertyChanged("ErrorDate");
					this.OnErrorDateChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ErrorText
		{
			get
			{
				return this._ErrorText;
			}
			set
			{
				if ((this._ErrorText != value))
				{
					this.OnErrorTextChanging(value);
					this.SendPropertyChanging();
					this._ErrorText = value;
					this.SendPropertyChanged("ErrorText");
					this.OnErrorTextChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Storage="_UrlReferrer", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string UrlReferrer
		{
			get
			{
				return this._UrlReferrer;
			}
			set
			{
				if ((this._UrlReferrer != value))
				{
					this.OnUrlReferrerChanging(value);
					this.SendPropertyChanging();
					this._UrlReferrer = value;
					this.SendPropertyChanged("UrlReferrer");
					this.OnUrlReferrerChanged();
				}
			}
		}
		
		[Column(Storage="_UserHostName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string UserHostName
		{
			get
			{
				return this._UserHostName;
			}
			set
			{
				if ((this._UserHostName != value))
				{
					this.OnUserHostNameChanging(value);
					this.SendPropertyChanging();
					this._UserHostName = value;
					this.SendPropertyChanged("UserHostName");
					this.OnUserHostNameChanged();
				}
			}
		}
		
		[Column(Storage="_UserHostAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string UserHostAddress
		{
			get
			{
				return this._UserHostAddress;
			}
			set
			{
				if ((this._UserHostAddress != value))
				{
					this.OnUserHostAddressChanging(value);
					this.SendPropertyChanging();
					this._UserHostAddress = value;
					this.SendPropertyChanged("UserHostAddress");
					this.OnUserHostAddressChanged();
				}
			}
		}
		
		[Column(Storage="_UserAgent", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string UserAgent
		{
			get
			{
				return this._UserAgent;
			}
			set
			{
				if ((this._UserAgent != value))
				{
					this.OnUserAgentChanging(value);
					this.SendPropertyChanging();
					this._UserAgent = value;
					this.SendPropertyChanged("UserAgent");
					this.OnUserAgentChanged();
				}
			}
		}
		
		[Column(Storage="_RequestType", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string RequestType
		{
			get
			{
				return this._RequestType;
			}
			set
			{
				if ((this._RequestType != value))
				{
					this.OnRequestTypeChanging(value);
					this.SendPropertyChanging();
					this._RequestType = value;
					this.SendPropertyChanged("RequestType");
					this.OnRequestTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Headers", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Headers
		{
			get
			{
				return this._Headers;
			}
			set
			{
				if ((this._Headers != value))
				{
					this.OnHeadersChanging(value);
					this.SendPropertyChanging();
					this._Headers = value;
					this.SendPropertyChanged("Headers");
					this.OnHeadersChanged();
				}
			}
		}
		
		[Column(Storage="_SqlLog", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SqlLog
		{
			get
			{
				return this._SqlLog;
			}
			set
			{
				if ((this._SqlLog != value))
				{
					this.OnSqlLogChanging(value);
					this.SendPropertyChanging();
					this._SqlLog = value;
					this.SendPropertyChanged("SqlLog");
					this.OnSqlLogChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Hash", DbType="VarBinary(8000)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Hash
		{
			get
			{
				return this._Hash;
			}
			set
			{
				if ((this._Hash != value))
				{
					this.OnHashChanging(value);
					this.SendPropertyChanging();
					this._Hash = value;
					this.SendPropertyChanged("Hash");
					this.OnHashChanged();
				}
			}
		}
		
		[Column(Storage="_SimilarErrorID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SimilarErrorID
		{
			get
			{
				return this._SimilarErrorID;
			}
			set
			{
				if ((this._SimilarErrorID != value))
				{
					this.OnSimilarErrorIDChanging(value);
					this.SendPropertyChanging();
					this._SimilarErrorID = value;
					this.SendPropertyChanged("SimilarErrorID");
					this.OnSimilarErrorIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FactAnnulment")]
	public partial class FactAnnulment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FactID;
		
		private System.Nullable<System.DateTime> _AnnulmentDate;
		
		private int _AnnulmentReasonID;
		
		private string _BasisType;
		
		private string _BasisTitle;
		
		private string _BasisNo;
		
		private System.Nullable<System.DateTime> _BasisDate;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<System.DateTime> _SignDate;
		
		private System.Nullable<decimal> _FactShippedQuantity;
		
		private System.Nullable<System.DateTime> _FactShippedDate;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private System.Nullable<int> _FactShippedMeasureID;
		
		private System.Nullable<System.Guid> _FileGUID;
		
		private string _LetterNo;
		
		private System.Nullable<System.DateTime> _LetterDate;
		
		private System.Nullable<int> _FactEmployeeID;
		
		private bool _IsSigned;
		
		private System.Nullable<System.DateTime> _SignDateByEmployee;
		
		private System.Nullable<bool> _IsSignatureByEmployeeValid;
		
		private System.Nullable<System.Guid> _FileForEmployeeGUID;
		
		private System.Nullable<bool> _IsSignatureValid;
		
		private bool _IsFileUpload;
		
		private System.Nullable<System.DateTime> _UploadDate;
		
		private EntityRef<C_AnnulmentReason> _AnnulmentReason;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _FactEmployee;
		
		private EntityRef<C_Measure> _FactShippedMeasure;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<OrderDocTransition> _OrderDocTransition;
		
		private EntityRef<DbFile> _File;
		
		private EntityRef<DbFile> _FileForEmployee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactIDChanging(int value);
    partial void OnFactIDChanged();
    partial void OnAnnulmentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAnnulmentDateChanged();
    partial void OnAnnulmentReasonIDChanging(int value);
    partial void OnAnnulmentReasonIDChanged();
    partial void OnBasisTypeChanging(string value);
    partial void OnBasisTypeChanged();
    partial void OnBasisTitleChanging(string value);
    partial void OnBasisTitleChanged();
    partial void OnBasisNoChanging(string value);
    partial void OnBasisNoChanged();
    partial void OnBasisDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBasisDateChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateChanged();
    partial void OnFactShippedQuantityChanging(System.Nullable<decimal> value);
    partial void OnFactShippedQuantityChanged();
    partial void OnFactShippedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFactShippedDateChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnFactShippedMeasureIDChanging(System.Nullable<int> value);
    partial void OnFactShippedMeasureIDChanged();
    partial void OnFileGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFileGUIDChanged();
    partial void OnLetterNoChanging(string value);
    partial void OnLetterNoChanged();
    partial void OnLetterDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLetterDateChanged();
    partial void OnFactEmployeeIDChanging(System.Nullable<int> value);
    partial void OnFactEmployeeIDChanged();
    partial void OnIsSignedChanging(bool value);
    partial void OnIsSignedChanged();
    partial void OnSignDateByEmployeeChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateByEmployeeChanged();
    partial void OnIsSignatureByEmployeeValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureByEmployeeValidChanged();
    partial void OnFileForEmployeeGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFileForEmployeeGUIDChanged();
    partial void OnIsSignatureValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureValidChanged();
    partial void OnIsFileUploadChanging(bool value);
    partial void OnIsFileUploadChanged();
    partial void OnUploadDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUploadDateChanged();
    #endregion
		
		public FactAnnulment()
		{
			this._AnnulmentReason = default(EntityRef<C_AnnulmentReason>);
			this._Employee = default(EntityRef<Employee>);
			this._FactEmployee = default(EntityRef<Employee>);
			this._FactShippedMeasure = default(EntityRef<C_Measure>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDocTransition = default(EntityRef<OrderDocTransition>);
			this._File = default(EntityRef<DbFile>);
			this._FileForEmployee = default(EntityRef<DbFile>);
			OnCreated();
		}
		
		[Column(Storage="_FactID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._OrderDocTransition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}
		
		[Column(Storage="_AnnulmentDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> AnnulmentDate
		{
			get
			{
				return this._AnnulmentDate;
			}
			set
			{
				if ((this._AnnulmentDate != value))
				{
					this.OnAnnulmentDateChanging(value);
					this.SendPropertyChanging();
					this._AnnulmentDate = value;
					this.SendPropertyChanged("AnnulmentDate");
					this.OnAnnulmentDateChanged();
				}
			}
		}
		
		[Column(Storage="_AnnulmentReasonID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AnnulmentReasonID
		{
			get
			{
				return this._AnnulmentReasonID;
			}
			set
			{
				if ((this._AnnulmentReasonID != value))
				{
					if (this._AnnulmentReason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnnulmentReasonIDChanging(value);
					this.SendPropertyChanging();
					this._AnnulmentReasonID = value;
					this.SendPropertyChanged("AnnulmentReasonID");
					this.OnAnnulmentReasonIDChanged();
				}
			}
		}
		
		[Column(Storage="_BasisType", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BasisType
		{
			get
			{
				return this._BasisType;
			}
			set
			{
				if ((this._BasisType != value))
				{
					this.OnBasisTypeChanging(value);
					this.SendPropertyChanging();
					this._BasisType = value;
					this.SendPropertyChanged("BasisType");
					this.OnBasisTypeChanged();
				}
			}
		}
		
		[Column(Storage="_BasisTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BasisTitle
		{
			get
			{
				return this._BasisTitle;
			}
			set
			{
				if ((this._BasisTitle != value))
				{
					this.OnBasisTitleChanging(value);
					this.SendPropertyChanging();
					this._BasisTitle = value;
					this.SendPropertyChanged("BasisTitle");
					this.OnBasisTitleChanged();
				}
			}
		}
		
		[Column(Storage="_BasisNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BasisNo
		{
			get
			{
				return this._BasisNo;
			}
			set
			{
				if ((this._BasisNo != value))
				{
					this.OnBasisNoChanging(value);
					this.SendPropertyChanging();
					this._BasisNo = value;
					this.SendPropertyChanged("BasisNo");
					this.OnBasisNoChanged();
				}
			}
		}
		
		[Column(Storage="_BasisDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BasisDate
		{
			get
			{
				return this._BasisDate;
			}
			set
			{
				if ((this._BasisDate != value))
				{
					this.OnBasisDateChanging(value);
					this.SendPropertyChanging();
					this._BasisDate = value;
					this.SendPropertyChanged("BasisDate");
					this.OnBasisDateChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_SignDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}
		
		[Column(Storage="_FactShippedQuantity", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> FactShippedQuantity
		{
			get
			{
				return this._FactShippedQuantity;
			}
			set
			{
				if ((this._FactShippedQuantity != value))
				{
					this.OnFactShippedQuantityChanging(value);
					this.SendPropertyChanging();
					this._FactShippedQuantity = value;
					this.SendPropertyChanged("FactShippedQuantity");
					this.OnFactShippedQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_FactShippedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FactShippedDate
		{
			get
			{
				return this._FactShippedDate;
			}
			set
			{
				if ((this._FactShippedDate != value))
				{
					this.OnFactShippedDateChanging(value);
					this.SendPropertyChanging();
					this._FactShippedDate = value;
					this.SendPropertyChanged("FactShippedDate");
					this.OnFactShippedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_FactShippedMeasureID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FactShippedMeasureID
		{
			get
			{
				return this._FactShippedMeasureID;
			}
			set
			{
				if ((this._FactShippedMeasureID != value))
				{
					if (this._FactShippedMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactShippedMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._FactShippedMeasureID = value;
					this.SendPropertyChanged("FactShippedMeasureID");
					this.OnFactShippedMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileGUID
		{
			get
			{
				return this._FileGUID;
			}
			set
			{
				if ((this._FileGUID != value))
				{
					if (this._File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileGUID = value;
					this.SendPropertyChanged("FileGUID");
					this.OnFileGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_LetterNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string LetterNo
		{
			get
			{
				return this._LetterNo;
			}
			set
			{
				if ((this._LetterNo != value))
				{
					this.OnLetterNoChanging(value);
					this.SendPropertyChanging();
					this._LetterNo = value;
					this.SendPropertyChanged("LetterNo");
					this.OnLetterNoChanged();
				}
			}
		}
		
		[Column(Storage="_LetterDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LetterDate
		{
			get
			{
				return this._LetterDate;
			}
			set
			{
				if ((this._LetterDate != value))
				{
					this.OnLetterDateChanging(value);
					this.SendPropertyChanging();
					this._LetterDate = value;
					this.SendPropertyChanged("LetterDate");
					this.OnLetterDateChanged();
				}
			}
		}
		
		[Column(Storage="_FactEmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FactEmployeeID
		{
			get
			{
				return this._FactEmployeeID;
			}
			set
			{
				if ((this._FactEmployeeID != value))
				{
					if (this._FactEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._FactEmployeeID = value;
					this.SendPropertyChanged("FactEmployeeID");
					this.OnFactEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsSigned", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSigned
		{
			get
			{
				return this._IsSigned;
			}
			set
			{
				if ((this._IsSigned != value))
				{
					this.OnIsSignedChanging(value);
					this.SendPropertyChanging();
					this._IsSigned = value;
					this.SendPropertyChanged("IsSigned");
					this.OnIsSignedChanged();
				}
			}
		}
		
		[Column(Storage="_SignDateByEmployee", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDateByEmployee
		{
			get
			{
				return this._SignDateByEmployee;
			}
			set
			{
				if ((this._SignDateByEmployee != value))
				{
					this.OnSignDateByEmployeeChanging(value);
					this.SendPropertyChanging();
					this._SignDateByEmployee = value;
					this.SendPropertyChanged("SignDateByEmployee");
					this.OnSignDateByEmployeeChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureByEmployeeValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureByEmployeeValid
		{
			get
			{
				return this._IsSignatureByEmployeeValid;
			}
			set
			{
				if ((this._IsSignatureByEmployeeValid != value))
				{
					this.OnIsSignatureByEmployeeValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureByEmployeeValid = value;
					this.SendPropertyChanged("IsSignatureByEmployeeValid");
					this.OnIsSignatureByEmployeeValidChanged();
				}
			}
		}
		
		[Column(Storage="_FileForEmployeeGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileForEmployeeGUID
		{
			get
			{
				return this._FileForEmployeeGUID;
			}
			set
			{
				if ((this._FileForEmployeeGUID != value))
				{
					if (this._FileForEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileForEmployeeGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileForEmployeeGUID = value;
					this.SendPropertyChanged("FileForEmployeeGUID");
					this.OnFileForEmployeeGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureValid
		{
			get
			{
				return this._IsSignatureValid;
			}
			set
			{
				if ((this._IsSignatureValid != value))
				{
					this.OnIsSignatureValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureValid = value;
					this.SendPropertyChanged("IsSignatureValid");
					this.OnIsSignatureValidChanged();
				}
			}
		}
		
		[Column(Storage="_IsFileUpload", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsFileUpload
		{
			get
			{
				return this._IsFileUpload;
			}
			set
			{
				if ((this._IsFileUpload != value))
				{
					this.OnIsFileUploadChanging(value);
					this.SendPropertyChanging();
					this._IsFileUpload = value;
					this.SendPropertyChanged("IsFileUpload");
					this.OnIsFileUploadChanged();
				}
			}
		}
		
		[Column(Storage="_UploadDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> UploadDate
		{
			get
			{
				return this._UploadDate;
			}
			set
			{
				if ((this._UploadDate != value))
				{
					this.OnUploadDateChanging(value);
					this.SendPropertyChanging();
					this._UploadDate = value;
					this.SendPropertyChanged("UploadDate");
					this.OnUploadDateChanged();
				}
			}
		}
		
		[Association(Name="FK_FactAnnulment_AnnulmentReason", Storage="_AnnulmentReason", ThisKey="AnnulmentReasonID", OtherKey="AnnulmentReasonID", IsForeignKey=true)]
		public C_AnnulmentReason AnnulmentReason
		{
			get
			{
				return this._AnnulmentReason.Entity;
			}
			set
			{
				C_AnnulmentReason previousValue = this._AnnulmentReason.Entity;
				if (((previousValue != value) 
							|| (this._AnnulmentReason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AnnulmentReason.Entity = null;
						previousValue.FactAnnulment.Remove(this);
					}
					this._AnnulmentReason.Entity = value;
					if ((value != null))
					{
						value.FactAnnulment.Add(this);
						this._AnnulmentReasonID = value.AnnulmentReasonID;
					}
					else
					{
						this._AnnulmentReasonID = default(int);
					}
					this.SendPropertyChanged("AnnulmentReason");
				}
			}
		}
		
		[Association(Name="FK_FactAnnulment_Employee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.FactAnnulment.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.FactAnnulment.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_FactAnnulment_FactEmployee", Storage="_FactEmployee", ThisKey="FactEmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee FactEmployee
		{
			get
			{
				return this._FactEmployee.Entity;
			}
			set
			{
				Employee previousValue = this._FactEmployee.Entity;
				if (((previousValue != value) 
							|| (this._FactEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactEmployee.Entity = null;
						previousValue.FactAnnulment_FactEmployee.Remove(this);
					}
					this._FactEmployee.Entity = value;
					if ((value != null))
					{
						value.FactAnnulment_FactEmployee.Add(this);
						this._FactEmployeeID = value.EmployeeID;
					}
					else
					{
						this._FactEmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FactEmployee");
				}
			}
		}
		
		[Association(Name="FK_FactAnnulment_FactShippedMeasure", Storage="_FactShippedMeasure", ThisKey="FactShippedMeasureID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure FactShippedMeasure
		{
			get
			{
				return this._FactShippedMeasure.Entity;
			}
			set
			{
				C_Measure previousValue = this._FactShippedMeasure.Entity;
				if (((previousValue != value) 
							|| (this._FactShippedMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactShippedMeasure.Entity = null;
						previousValue.FactAnnulment.Remove(this);
					}
					this._FactShippedMeasure.Entity = value;
					if ((value != null))
					{
						value.FactAnnulment.Add(this);
						this._FactShippedMeasureID = value.MeasureID;
					}
					else
					{
						this._FactShippedMeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FactShippedMeasure");
				}
			}
		}
		
		[Association(Name="FK_FactAnnulment_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.FactAnnulment.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.FactAnnulment.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_FactAnnulment_OrderDocTransition", Storage="_OrderDocTransition", ThisKey="FactID", OtherKey="OrderDocTransitionID", IsForeignKey=true, DeleteOnNull=true)]
		public OrderDocTransition OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition.Entity;
			}
			set
			{
				OrderDocTransition previousValue = this._OrderDocTransition.Entity;
				if (((previousValue != value) 
							|| (this._OrderDocTransition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDocTransition.Entity = null;
						previousValue.FactAnnulment = null;
					}
					this._OrderDocTransition.Entity = value;
					if ((value != null))
					{
						value.FactAnnulment = this;
						this._FactID = value.OrderDocTransitionID;
					}
					else
					{
						this._FactID = default(int);
					}
					this.SendPropertyChanged("OrderDocTransition");
				}
			}
		}
		
		[Association(Name="FK_FactAnnulment_File", Storage="_File", ThisKey="FileGUID", OtherKey="ID", IsForeignKey=true)]
		public DbFile File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				if ((this._File.Entity != value))
				{
					this.SendPropertyChanging();
					this._File.Entity = value;
					this.SendPropertyChanged("File");
				}
			}
		}
		
		[Association(Name="FK_FactAnnulment_FileForEmployee", Storage="_FileForEmployee", ThisKey="FileForEmployeeGUID", OtherKey="ID", IsForeignKey=true)]
		public DbFile FileForEmployee
		{
			get
			{
				return this._FileForEmployee.Entity;
			}
			set
			{
				if ((this._FileForEmployee.Entity != value))
				{
					this.SendPropertyChanging();
					this._FileForEmployee.Entity = value;
					this.SendPropertyChanged("FileForEmployee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FactClose")]
	public partial class FactClose : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FactID;
		
		private System.Nullable<decimal> _FactShippedQuantity;
		
		private System.Nullable<System.DateTime> _FactShippedDate;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private System.Nullable<int> _FactShippedMeasureID;
		
		private EntityRef<C_Measure> _FactShippedMeasure;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<OrderDocTransition> _OrderDocTransition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactIDChanging(int value);
    partial void OnFactIDChanged();
    partial void OnFactShippedQuantityChanging(System.Nullable<decimal> value);
    partial void OnFactShippedQuantityChanged();
    partial void OnFactShippedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFactShippedDateChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnFactShippedMeasureIDChanging(System.Nullable<int> value);
    partial void OnFactShippedMeasureIDChanged();
    #endregion
		
		public FactClose()
		{
			this._FactShippedMeasure = default(EntityRef<C_Measure>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDocTransition = default(EntityRef<OrderDocTransition>);
			OnCreated();
		}
		
		[Column(Storage="_FactID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._OrderDocTransition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}
		
		[Column(Storage="_FactShippedQuantity", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> FactShippedQuantity
		{
			get
			{
				return this._FactShippedQuantity;
			}
			set
			{
				if ((this._FactShippedQuantity != value))
				{
					this.OnFactShippedQuantityChanging(value);
					this.SendPropertyChanging();
					this._FactShippedQuantity = value;
					this.SendPropertyChanged("FactShippedQuantity");
					this.OnFactShippedQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_FactShippedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FactShippedDate
		{
			get
			{
				return this._FactShippedDate;
			}
			set
			{
				if ((this._FactShippedDate != value))
				{
					this.OnFactShippedDateChanging(value);
					this.SendPropertyChanging();
					this._FactShippedDate = value;
					this.SendPropertyChanged("FactShippedDate");
					this.OnFactShippedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_FactShippedMeasureID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FactShippedMeasureID
		{
			get
			{
				return this._FactShippedMeasureID;
			}
			set
			{
				if ((this._FactShippedMeasureID != value))
				{
					if (this._FactShippedMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactShippedMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._FactShippedMeasureID = value;
					this.SendPropertyChanged("FactShippedMeasureID");
					this.OnFactShippedMeasureIDChanged();
				}
			}
		}
		
		[Association(Name="FK_FactClose_FactShippedMeasure", Storage="_FactShippedMeasure", ThisKey="FactShippedMeasureID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure FactShippedMeasure
		{
			get
			{
				return this._FactShippedMeasure.Entity;
			}
			set
			{
				C_Measure previousValue = this._FactShippedMeasure.Entity;
				if (((previousValue != value) 
							|| (this._FactShippedMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactShippedMeasure.Entity = null;
						previousValue.FactClose.Remove(this);
					}
					this._FactShippedMeasure.Entity = value;
					if ((value != null))
					{
						value.FactClose.Add(this);
						this._FactShippedMeasureID = value.MeasureID;
					}
					else
					{
						this._FactShippedMeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FactShippedMeasure");
				}
			}
		}
		
		[Association(Name="FK_FactClose_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.FactClose.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.FactClose.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_FactClose_OrderDocTransition", Storage="_OrderDocTransition", ThisKey="FactID", OtherKey="OrderDocTransitionID", IsForeignKey=true, DeleteOnNull=true)]
		public OrderDocTransition OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition.Entity;
			}
			set
			{
				OrderDocTransition previousValue = this._OrderDocTransition.Entity;
				if (((previousValue != value) 
							|| (this._OrderDocTransition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDocTransition.Entity = null;
						previousValue.FactClose = null;
					}
					this._OrderDocTransition.Entity = value;
					if ((value != null))
					{
						value.FactClose = this;
						this._FactID = value.OrderDocTransitionID;
					}
					else
					{
						this._FactID = default(int);
					}
					this.SendPropertyChanged("OrderDocTransition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FactForm")]
	public partial class FactForm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FactID;
		
		private System.Nullable<System.DateTime> _SignDate;
		
		private System.DateTime _LastModifiedDate;
		
		private bool _IsDeleted;
		
		private int _LastModifiedUserID;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<System.Guid> _BlankGUID;
		
		private System.Nullable<System.DateTime> _FormDate;
		
		private string _EmployeePost;
		
		private string _EmployeeTitle;
		
		private EntityRef<Blank> _Blank;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<OrderDocTransition> _OrderDocTransition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactIDChanging(int value);
    partial void OnFactIDChanged();
    partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnBlankGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnBlankGUIDChanged();
    partial void OnFormDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFormDateChanged();
    partial void OnEmployeePostChanging(string value);
    partial void OnEmployeePostChanged();
    partial void OnEmployeeTitleChanging(string value);
    partial void OnEmployeeTitleChanged();
    #endregion
		
		public FactForm()
		{
			this._Blank = default(EntityRef<Blank>);
			this._Employee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDocTransition = default(EntityRef<OrderDocTransition>);
			OnCreated();
		}
		
		[Column(Storage="_FactID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._OrderDocTransition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}
		
		[Column(Storage="_SignDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_BlankGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> BlankGUID
		{
			get
			{
				return this._BlankGUID;
			}
			set
			{
				if ((this._BlankGUID != value))
				{
					if (this._Blank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlankGUIDChanging(value);
					this.SendPropertyChanging();
					this._BlankGUID = value;
					this.SendPropertyChanged("BlankGUID");
					this.OnBlankGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_FormDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FormDate
		{
			get
			{
				return this._FormDate;
			}
			set
			{
				if ((this._FormDate != value))
				{
					this.OnFormDateChanging(value);
					this.SendPropertyChanging();
					this._FormDate = value;
					this.SendPropertyChanged("FormDate");
					this.OnFormDateChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeePost", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string EmployeePost
		{
			get
			{
				return this._EmployeePost;
			}
			set
			{
				if ((this._EmployeePost != value))
				{
					this.OnEmployeePostChanging(value);
					this.SendPropertyChanging();
					this._EmployeePost = value;
					this.SendPropertyChanged("EmployeePost");
					this.OnEmployeePostChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string EmployeeTitle
		{
			get
			{
				return this._EmployeeTitle;
			}
			set
			{
				if ((this._EmployeeTitle != value))
				{
					this.OnEmployeeTitleChanging(value);
					this.SendPropertyChanging();
					this._EmployeeTitle = value;
					this.SendPropertyChanged("EmployeeTitle");
					this.OnEmployeeTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_FactForm_Blank", Storage="_Blank", ThisKey="BlankGUID", OtherKey="BlankGUID", IsForeignKey=true)]
		public Blank Blank
		{
			get
			{
				return this._Blank.Entity;
			}
			set
			{
				Blank previousValue = this._Blank.Entity;
				if (((previousValue != value) 
							|| (this._Blank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blank.Entity = null;
						previousValue.FactForm.Remove(this);
					}
					this._Blank.Entity = value;
					if ((value != null))
					{
						value.FactForm.Add(this);
						this._BlankGUID = value.BlankGUID;
					}
					else
					{
						this._BlankGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Blank");
				}
			}
		}
		
		[Association(Name="FK_FactForm_Employee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.FactForm.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.FactForm.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_FactForm_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.FactForm.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.FactForm.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_FactForm_OrderDocTransition", Storage="_OrderDocTransition", ThisKey="FactID", OtherKey="OrderDocTransitionID", IsForeignKey=true, DeleteOnNull=true)]
		public OrderDocTransition OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition.Entity;
			}
			set
			{
				OrderDocTransition previousValue = this._OrderDocTransition.Entity;
				if (((previousValue != value) 
							|| (this._OrderDocTransition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDocTransition.Entity = null;
						previousValue.FactForm = null;
					}
					this._OrderDocTransition.Entity = value;
					if ((value != null))
					{
						value.FactForm = this;
						this._FactID = value.OrderDocTransitionID;
					}
					else
					{
						this._FactID = default(int);
					}
					this.SendPropertyChanged("OrderDocTransition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FactRegister")]
	public partial class FactRegister : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FactID;
		
		private System.DateTime _LastModifiedDate;
		
		private bool _IsDeleted;
		
		private int _LastModifiedUserID;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<OrderDocTransition> _OrderDocTransition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactIDChanging(int value);
    partial void OnFactIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    #endregion
		
		public FactRegister()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDocTransition = default(EntityRef<OrderDocTransition>);
			OnCreated();
		}
		
		[Column(Storage="_FactID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._OrderDocTransition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Association(Name="FK_FactRegister_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.FactRegister.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.FactRegister.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_FactRegister_OrderDocTransition", Storage="_OrderDocTransition", ThisKey="FactID", OtherKey="OrderDocTransitionID", IsForeignKey=true, DeleteOnNull=true)]
		public OrderDocTransition OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition.Entity;
			}
			set
			{
				OrderDocTransition previousValue = this._OrderDocTransition.Entity;
				if (((previousValue != value) 
							|| (this._OrderDocTransition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDocTransition.Entity = null;
						previousValue.FactRegister = null;
					}
					this._OrderDocTransition.Entity = value;
					if ((value != null))
					{
						value.FactRegister = this;
						this._FactID = value.OrderDocTransitionID;
					}
					else
					{
						this._FactID = default(int);
					}
					this.SendPropertyChanged("OrderDocTransition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FactReject")]
	public partial class FactReject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FactID;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<System.DateTime> _SignDate;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private System.Nullable<System.Guid> _FileGUID;
		
		private string _LetterNo;
		
		private System.Nullable<System.DateTime> _LetterDate;
		
		private System.Nullable<int> _FactEmployeeID;
		
		private bool _IsSigned;
		
		private System.Nullable<System.DateTime> _SignDateByEmployee;
		
		private System.Nullable<bool> _IsSignatureByEmployeeValid;
		
		private System.Nullable<System.Guid> _FileForEmployeeGUID;
		
		private System.Nullable<bool> _IsSignatureValid;
		
		private bool _IsFileUpload;
		
		private System.Nullable<System.DateTime> _UploadDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _FactEmployee;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<OrderDocTransition> _OrderDocTransition;
		
		private EntityRef<DbFile> _File;
		
		private EntityRef<DbFile> _FileForEmployee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactIDChanging(int value);
    partial void OnFactIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnFileGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFileGUIDChanged();
    partial void OnLetterNoChanging(string value);
    partial void OnLetterNoChanged();
    partial void OnLetterDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLetterDateChanged();
    partial void OnFactEmployeeIDChanging(System.Nullable<int> value);
    partial void OnFactEmployeeIDChanged();
    partial void OnIsSignedChanging(bool value);
    partial void OnIsSignedChanged();
    partial void OnSignDateByEmployeeChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateByEmployeeChanged();
    partial void OnIsSignatureByEmployeeValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureByEmployeeValidChanged();
    partial void OnFileForEmployeeGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFileForEmployeeGUIDChanged();
    partial void OnIsSignatureValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureValidChanged();
    partial void OnIsFileUploadChanging(bool value);
    partial void OnIsFileUploadChanged();
    partial void OnUploadDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUploadDateChanged();
    #endregion
		
		public FactReject()
		{
			this._Employee = default(EntityRef<Employee>);
			this._FactEmployee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDocTransition = default(EntityRef<OrderDocTransition>);
			this._File = default(EntityRef<DbFile>);
			this._FileForEmployee = default(EntityRef<DbFile>);
			OnCreated();
		}
		
		[Column(Storage="_FactID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._OrderDocTransition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_SignDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_FileGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileGUID
		{
			get
			{
				return this._FileGUID;
			}
			set
			{
				if ((this._FileGUID != value))
				{
					if (this._File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileGUID = value;
					this.SendPropertyChanged("FileGUID");
					this.OnFileGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_LetterNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string LetterNo
		{
			get
			{
				return this._LetterNo;
			}
			set
			{
				if ((this._LetterNo != value))
				{
					this.OnLetterNoChanging(value);
					this.SendPropertyChanging();
					this._LetterNo = value;
					this.SendPropertyChanged("LetterNo");
					this.OnLetterNoChanged();
				}
			}
		}
		
		[Column(Storage="_LetterDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LetterDate
		{
			get
			{
				return this._LetterDate;
			}
			set
			{
				if ((this._LetterDate != value))
				{
					this.OnLetterDateChanging(value);
					this.SendPropertyChanging();
					this._LetterDate = value;
					this.SendPropertyChanged("LetterDate");
					this.OnLetterDateChanged();
				}
			}
		}
		
		[Column(Storage="_FactEmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FactEmployeeID
		{
			get
			{
				return this._FactEmployeeID;
			}
			set
			{
				if ((this._FactEmployeeID != value))
				{
					if (this._FactEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._FactEmployeeID = value;
					this.SendPropertyChanged("FactEmployeeID");
					this.OnFactEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsSigned", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSigned
		{
			get
			{
				return this._IsSigned;
			}
			set
			{
				if ((this._IsSigned != value))
				{
					this.OnIsSignedChanging(value);
					this.SendPropertyChanging();
					this._IsSigned = value;
					this.SendPropertyChanged("IsSigned");
					this.OnIsSignedChanged();
				}
			}
		}
		
		[Column(Storage="_SignDateByEmployee", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDateByEmployee
		{
			get
			{
				return this._SignDateByEmployee;
			}
			set
			{
				if ((this._SignDateByEmployee != value))
				{
					this.OnSignDateByEmployeeChanging(value);
					this.SendPropertyChanging();
					this._SignDateByEmployee = value;
					this.SendPropertyChanged("SignDateByEmployee");
					this.OnSignDateByEmployeeChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureByEmployeeValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureByEmployeeValid
		{
			get
			{
				return this._IsSignatureByEmployeeValid;
			}
			set
			{
				if ((this._IsSignatureByEmployeeValid != value))
				{
					this.OnIsSignatureByEmployeeValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureByEmployeeValid = value;
					this.SendPropertyChanged("IsSignatureByEmployeeValid");
					this.OnIsSignatureByEmployeeValidChanged();
				}
			}
		}
		
		[Column(Storage="_FileForEmployeeGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileForEmployeeGUID
		{
			get
			{
				return this._FileForEmployeeGUID;
			}
			set
			{
				if ((this._FileForEmployeeGUID != value))
				{
					if (this._FileForEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileForEmployeeGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileForEmployeeGUID = value;
					this.SendPropertyChanged("FileForEmployeeGUID");
					this.OnFileForEmployeeGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureValid
		{
			get
			{
				return this._IsSignatureValid;
			}
			set
			{
				if ((this._IsSignatureValid != value))
				{
					this.OnIsSignatureValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureValid = value;
					this.SendPropertyChanged("IsSignatureValid");
					this.OnIsSignatureValidChanged();
				}
			}
		}
		
		[Column(Storage="_IsFileUpload", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsFileUpload
		{
			get
			{
				return this._IsFileUpload;
			}
			set
			{
				if ((this._IsFileUpload != value))
				{
					this.OnIsFileUploadChanging(value);
					this.SendPropertyChanging();
					this._IsFileUpload = value;
					this.SendPropertyChanged("IsFileUpload");
					this.OnIsFileUploadChanged();
				}
			}
		}
		
		[Column(Storage="_UploadDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> UploadDate
		{
			get
			{
				return this._UploadDate;
			}
			set
			{
				if ((this._UploadDate != value))
				{
					this.OnUploadDateChanging(value);
					this.SendPropertyChanging();
					this._UploadDate = value;
					this.SendPropertyChanged("UploadDate");
					this.OnUploadDateChanged();
				}
			}
		}
		
		[Association(Name="FK_FactReject_Employee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.FactReject.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.FactReject.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_FactReject_FactEmployee", Storage="_FactEmployee", ThisKey="FactEmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee FactEmployee
		{
			get
			{
				return this._FactEmployee.Entity;
			}
			set
			{
				Employee previousValue = this._FactEmployee.Entity;
				if (((previousValue != value) 
							|| (this._FactEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactEmployee.Entity = null;
						previousValue.FactReject_FactEmployee.Remove(this);
					}
					this._FactEmployee.Entity = value;
					if ((value != null))
					{
						value.FactReject_FactEmployee.Add(this);
						this._FactEmployeeID = value.EmployeeID;
					}
					else
					{
						this._FactEmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FactEmployee");
				}
			}
		}
		
		[Association(Name="FK_FactReject_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.FactReject.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.FactReject.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_FactReject_OrderDocTransition", Storage="_OrderDocTransition", ThisKey="FactID", OtherKey="OrderDocTransitionID", IsForeignKey=true, DeleteOnNull=true)]
		public OrderDocTransition OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition.Entity;
			}
			set
			{
				OrderDocTransition previousValue = this._OrderDocTransition.Entity;
				if (((previousValue != value) 
							|| (this._OrderDocTransition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDocTransition.Entity = null;
						previousValue.FactReject = null;
					}
					this._OrderDocTransition.Entity = value;
					if ((value != null))
					{
						value.FactReject = this;
						this._FactID = value.OrderDocTransitionID;
					}
					else
					{
						this._FactID = default(int);
					}
					this.SendPropertyChanged("OrderDocTransition");
				}
			}
		}
		
		[Association(Name="FK_FactReject_File", Storage="_File", ThisKey="FileGUID", OtherKey="ID", IsForeignKey=true)]
		public DbFile File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				if ((this._File.Entity != value))
				{
					this.SendPropertyChanging();
					this._File.Entity = value;
					this.SendPropertyChanged("File");
				}
			}
		}
		
		[Association(Name="FK_FactReject_FileForEmployee", Storage="_FileForEmployee", ThisKey="FileForEmployeeGUID", OtherKey="ID", IsForeignKey=true)]
		public DbFile FileForEmployee
		{
			get
			{
				return this._FileForEmployee.Entity;
			}
			set
			{
				if ((this._FileForEmployee.Entity != value))
				{
					this.SendPropertyChanging();
					this._FileForEmployee.Entity = value;
					this.SendPropertyChanged("FileForEmployee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FactResume")]
	public partial class FactResume : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FactID;
		
		private string _BasisType;
		
		private string _BasisTitle;
		
		private string _BasisNo;
		
		private System.Nullable<System.DateTime> _BasisDate;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<System.DateTime> _SignDate;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private System.Nullable<System.Guid> _FileGUID;
		
		private string _LetterNo;
		
		private System.Nullable<System.DateTime> _LetterDate;
		
		private System.Nullable<int> _FactEmployeeID;
		
		private bool _IsSigned;
		
		private System.Nullable<System.DateTime> _SignDateByEmployee;
		
		private System.Nullable<bool> _IsSignatureByEmployeeValid;
		
		private System.Nullable<System.Guid> _FileForEmployeeGUID;
		
		private System.Nullable<bool> _IsSignatureValid;
		
		private bool _IsFileUpload;
		
		private System.Nullable<System.DateTime> _UploadDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _FactEmployee;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<OrderDocTransition> _OrderDocTransition;
		
		private EntityRef<DbFile> _File;
		
		private EntityRef<DbFile> _FileForEmployee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactIDChanging(int value);
    partial void OnFactIDChanged();
    partial void OnBasisTypeChanging(string value);
    partial void OnBasisTypeChanged();
    partial void OnBasisTitleChanging(string value);
    partial void OnBasisTitleChanged();
    partial void OnBasisNoChanging(string value);
    partial void OnBasisNoChanged();
    partial void OnBasisDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBasisDateChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnFileGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFileGUIDChanged();
    partial void OnLetterNoChanging(string value);
    partial void OnLetterNoChanged();
    partial void OnLetterDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLetterDateChanged();
    partial void OnFactEmployeeIDChanging(System.Nullable<int> value);
    partial void OnFactEmployeeIDChanged();
    partial void OnIsSignedChanging(bool value);
    partial void OnIsSignedChanged();
    partial void OnSignDateByEmployeeChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateByEmployeeChanged();
    partial void OnIsSignatureByEmployeeValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureByEmployeeValidChanged();
    partial void OnFileForEmployeeGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFileForEmployeeGUIDChanged();
    partial void OnIsSignatureValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureValidChanged();
    partial void OnIsFileUploadChanging(bool value);
    partial void OnIsFileUploadChanged();
    partial void OnUploadDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUploadDateChanged();
    #endregion
		
		public FactResume()
		{
			this._Employee = default(EntityRef<Employee>);
			this._FactEmployee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDocTransition = default(EntityRef<OrderDocTransition>);
			this._File = default(EntityRef<DbFile>);
			this._FileForEmployee = default(EntityRef<DbFile>);
			OnCreated();
		}
		
		[Column(Storage="_FactID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._OrderDocTransition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}
		
		[Column(Storage="_BasisType", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BasisType
		{
			get
			{
				return this._BasisType;
			}
			set
			{
				if ((this._BasisType != value))
				{
					this.OnBasisTypeChanging(value);
					this.SendPropertyChanging();
					this._BasisType = value;
					this.SendPropertyChanged("BasisType");
					this.OnBasisTypeChanged();
				}
			}
		}
		
		[Column(Storage="_BasisTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BasisTitle
		{
			get
			{
				return this._BasisTitle;
			}
			set
			{
				if ((this._BasisTitle != value))
				{
					this.OnBasisTitleChanging(value);
					this.SendPropertyChanging();
					this._BasisTitle = value;
					this.SendPropertyChanged("BasisTitle");
					this.OnBasisTitleChanged();
				}
			}
		}
		
		[Column(Storage="_BasisNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BasisNo
		{
			get
			{
				return this._BasisNo;
			}
			set
			{
				if ((this._BasisNo != value))
				{
					this.OnBasisNoChanging(value);
					this.SendPropertyChanging();
					this._BasisNo = value;
					this.SendPropertyChanged("BasisNo");
					this.OnBasisNoChanged();
				}
			}
		}
		
		[Column(Storage="_BasisDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BasisDate
		{
			get
			{
				return this._BasisDate;
			}
			set
			{
				if ((this._BasisDate != value))
				{
					this.OnBasisDateChanging(value);
					this.SendPropertyChanging();
					this._BasisDate = value;
					this.SendPropertyChanged("BasisDate");
					this.OnBasisDateChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_SignDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_FileGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileGUID
		{
			get
			{
				return this._FileGUID;
			}
			set
			{
				if ((this._FileGUID != value))
				{
					if (this._File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileGUID = value;
					this.SendPropertyChanged("FileGUID");
					this.OnFileGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_LetterNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string LetterNo
		{
			get
			{
				return this._LetterNo;
			}
			set
			{
				if ((this._LetterNo != value))
				{
					this.OnLetterNoChanging(value);
					this.SendPropertyChanging();
					this._LetterNo = value;
					this.SendPropertyChanged("LetterNo");
					this.OnLetterNoChanged();
				}
			}
		}
		
		[Column(Storage="_LetterDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LetterDate
		{
			get
			{
				return this._LetterDate;
			}
			set
			{
				if ((this._LetterDate != value))
				{
					this.OnLetterDateChanging(value);
					this.SendPropertyChanging();
					this._LetterDate = value;
					this.SendPropertyChanged("LetterDate");
					this.OnLetterDateChanged();
				}
			}
		}
		
		[Column(Storage="_FactEmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FactEmployeeID
		{
			get
			{
				return this._FactEmployeeID;
			}
			set
			{
				if ((this._FactEmployeeID != value))
				{
					if (this._FactEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._FactEmployeeID = value;
					this.SendPropertyChanged("FactEmployeeID");
					this.OnFactEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsSigned", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSigned
		{
			get
			{
				return this._IsSigned;
			}
			set
			{
				if ((this._IsSigned != value))
				{
					this.OnIsSignedChanging(value);
					this.SendPropertyChanging();
					this._IsSigned = value;
					this.SendPropertyChanged("IsSigned");
					this.OnIsSignedChanged();
				}
			}
		}
		
		[Column(Storage="_SignDateByEmployee", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDateByEmployee
		{
			get
			{
				return this._SignDateByEmployee;
			}
			set
			{
				if ((this._SignDateByEmployee != value))
				{
					this.OnSignDateByEmployeeChanging(value);
					this.SendPropertyChanging();
					this._SignDateByEmployee = value;
					this.SendPropertyChanged("SignDateByEmployee");
					this.OnSignDateByEmployeeChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureByEmployeeValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureByEmployeeValid
		{
			get
			{
				return this._IsSignatureByEmployeeValid;
			}
			set
			{
				if ((this._IsSignatureByEmployeeValid != value))
				{
					this.OnIsSignatureByEmployeeValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureByEmployeeValid = value;
					this.SendPropertyChanged("IsSignatureByEmployeeValid");
					this.OnIsSignatureByEmployeeValidChanged();
				}
			}
		}
		
		[Column(Storage="_FileForEmployeeGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileForEmployeeGUID
		{
			get
			{
				return this._FileForEmployeeGUID;
			}
			set
			{
				if ((this._FileForEmployeeGUID != value))
				{
					if (this._FileForEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileForEmployeeGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileForEmployeeGUID = value;
					this.SendPropertyChanged("FileForEmployeeGUID");
					this.OnFileForEmployeeGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureValid
		{
			get
			{
				return this._IsSignatureValid;
			}
			set
			{
				if ((this._IsSignatureValid != value))
				{
					this.OnIsSignatureValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureValid = value;
					this.SendPropertyChanged("IsSignatureValid");
					this.OnIsSignatureValidChanged();
				}
			}
		}
		
		[Column(Storage="_IsFileUpload", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsFileUpload
		{
			get
			{
				return this._IsFileUpload;
			}
			set
			{
				if ((this._IsFileUpload != value))
				{
					this.OnIsFileUploadChanging(value);
					this.SendPropertyChanging();
					this._IsFileUpload = value;
					this.SendPropertyChanged("IsFileUpload");
					this.OnIsFileUploadChanged();
				}
			}
		}
		
		[Column(Storage="_UploadDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> UploadDate
		{
			get
			{
				return this._UploadDate;
			}
			set
			{
				if ((this._UploadDate != value))
				{
					this.OnUploadDateChanging(value);
					this.SendPropertyChanging();
					this._UploadDate = value;
					this.SendPropertyChanged("UploadDate");
					this.OnUploadDateChanged();
				}
			}
		}
		
		[Association(Name="FK_FactResume_Employee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.FactResume.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.FactResume.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_FactResume_FactEmployee", Storage="_FactEmployee", ThisKey="FactEmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee FactEmployee
		{
			get
			{
				return this._FactEmployee.Entity;
			}
			set
			{
				Employee previousValue = this._FactEmployee.Entity;
				if (((previousValue != value) 
							|| (this._FactEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactEmployee.Entity = null;
						previousValue.FactResume_FactEmployee.Remove(this);
					}
					this._FactEmployee.Entity = value;
					if ((value != null))
					{
						value.FactResume_FactEmployee.Add(this);
						this._FactEmployeeID = value.EmployeeID;
					}
					else
					{
						this._FactEmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FactEmployee");
				}
			}
		}
		
		[Association(Name="FK_FactResume_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.FactResume.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.FactResume.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_FactResume_OrderDocTransition", Storage="_OrderDocTransition", ThisKey="FactID", OtherKey="OrderDocTransitionID", IsForeignKey=true, DeleteOnNull=true)]
		public OrderDocTransition OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition.Entity;
			}
			set
			{
				OrderDocTransition previousValue = this._OrderDocTransition.Entity;
				if (((previousValue != value) 
							|| (this._OrderDocTransition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDocTransition.Entity = null;
						previousValue.FactResume = null;
					}
					this._OrderDocTransition.Entity = value;
					if ((value != null))
					{
						value.FactResume = this;
						this._FactID = value.OrderDocTransitionID;
					}
					else
					{
						this._FactID = default(int);
					}
					this.SendPropertyChanged("OrderDocTransition");
				}
			}
		}
		
		[Association(Name="FK_FactResume_File", Storage="_File", ThisKey="FileGUID", OtherKey="ID", IsForeignKey=true)]
		public DbFile File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				if ((this._File.Entity != value))
				{
					this.SendPropertyChanging();
					this._File.Entity = value;
					this.SendPropertyChanged("File");
				}
			}
		}
		
		[Association(Name="FK_FactResume_FileForEmployee", Storage="_FileForEmployee", ThisKey="FileForEmployeeGUID", OtherKey="ID", IsForeignKey=true)]
		public DbFile FileForEmployee
		{
			get
			{
				return this._FileForEmployee.Entity;
			}
			set
			{
				if ((this._FileForEmployee.Entity != value))
				{
					this.SendPropertyChanging();
					this._FileForEmployee.Entity = value;
					this.SendPropertyChanged("FileForEmployee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FactSuspend")]
	public partial class FactSuspend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FactID;
		
		private char _ReasonType;
		
		private string _BasisType;
		
		private string _BasisTitle;
		
		private string _BasisNo;
		
		private System.Nullable<System.DateTime> _BasisDate;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<System.DateTime> _SignDate;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private System.Nullable<System.Guid> _FileGUID;
		
		private string _LetterNo;
		
		private System.Nullable<System.DateTime> _LetterDate;
		
		private System.Nullable<int> _FactEmployeeID;
		
		private bool _IsSigned;
		
		private System.Nullable<System.DateTime> _SignDateByEmployee;
		
		private System.Nullable<bool> _IsSignatureByEmployeeValid;
		
		private System.Nullable<System.Guid> _FileForEmployeeGUID;
		
		private System.Nullable<bool> _IsSignatureValid;
		
		private bool _IsFileUpload;
		
		private System.Nullable<System.DateTime> _UploadDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _FactEmployee;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<OrderDocTransition> _OrderDocTransition;
		
		private EntityRef<DbFile> _File;
		
		private EntityRef<DbFile> _FileForEmployee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactIDChanging(int value);
    partial void OnFactIDChanged();
    partial void OnReasonTypeChanging(char value);
    partial void OnReasonTypeChanged();
    partial void OnBasisTypeChanging(string value);
    partial void OnBasisTypeChanged();
    partial void OnBasisTitleChanging(string value);
    partial void OnBasisTitleChanged();
    partial void OnBasisNoChanging(string value);
    partial void OnBasisNoChanged();
    partial void OnBasisDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBasisDateChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnFileGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFileGUIDChanged();
    partial void OnLetterNoChanging(string value);
    partial void OnLetterNoChanged();
    partial void OnLetterDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLetterDateChanged();
    partial void OnFactEmployeeIDChanging(System.Nullable<int> value);
    partial void OnFactEmployeeIDChanged();
    partial void OnIsSignedChanging(bool value);
    partial void OnIsSignedChanged();
    partial void OnSignDateByEmployeeChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateByEmployeeChanged();
    partial void OnIsSignatureByEmployeeValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureByEmployeeValidChanged();
    partial void OnFileForEmployeeGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFileForEmployeeGUIDChanged();
    partial void OnIsSignatureValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureValidChanged();
    partial void OnIsFileUploadChanging(bool value);
    partial void OnIsFileUploadChanged();
    partial void OnUploadDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUploadDateChanged();
    #endregion
		
		public FactSuspend()
		{
			this._Employee = default(EntityRef<Employee>);
			this._FactEmployee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDocTransition = default(EntityRef<OrderDocTransition>);
			this._File = default(EntityRef<DbFile>);
			this._FileForEmployee = default(EntityRef<DbFile>);
			OnCreated();
		}
		
		[Column(Storage="_FactID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._OrderDocTransition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReasonType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char ReasonType
		{
			get
			{
				return this._ReasonType;
			}
			set
			{
				if ((this._ReasonType != value))
				{
					this.OnReasonTypeChanging(value);
					this.SendPropertyChanging();
					this._ReasonType = value;
					this.SendPropertyChanged("ReasonType");
					this.OnReasonTypeChanged();
				}
			}
		}
		
		[Column(Storage="_BasisType", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BasisType
		{
			get
			{
				return this._BasisType;
			}
			set
			{
				if ((this._BasisType != value))
				{
					this.OnBasisTypeChanging(value);
					this.SendPropertyChanging();
					this._BasisType = value;
					this.SendPropertyChanged("BasisType");
					this.OnBasisTypeChanged();
				}
			}
		}
		
		[Column(Storage="_BasisTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BasisTitle
		{
			get
			{
				return this._BasisTitle;
			}
			set
			{
				if ((this._BasisTitle != value))
				{
					this.OnBasisTitleChanging(value);
					this.SendPropertyChanging();
					this._BasisTitle = value;
					this.SendPropertyChanged("BasisTitle");
					this.OnBasisTitleChanged();
				}
			}
		}
		
		[Column(Storage="_BasisNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BasisNo
		{
			get
			{
				return this._BasisNo;
			}
			set
			{
				if ((this._BasisNo != value))
				{
					this.OnBasisNoChanging(value);
					this.SendPropertyChanging();
					this._BasisNo = value;
					this.SendPropertyChanged("BasisNo");
					this.OnBasisNoChanged();
				}
			}
		}
		
		[Column(Storage="_BasisDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BasisDate
		{
			get
			{
				return this._BasisDate;
			}
			set
			{
				if ((this._BasisDate != value))
				{
					this.OnBasisDateChanging(value);
					this.SendPropertyChanging();
					this._BasisDate = value;
					this.SendPropertyChanged("BasisDate");
					this.OnBasisDateChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_SignDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_FileGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileGUID
		{
			get
			{
				return this._FileGUID;
			}
			set
			{
				if ((this._FileGUID != value))
				{
					if (this._File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileGUID = value;
					this.SendPropertyChanged("FileGUID");
					this.OnFileGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_LetterNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string LetterNo
		{
			get
			{
				return this._LetterNo;
			}
			set
			{
				if ((this._LetterNo != value))
				{
					this.OnLetterNoChanging(value);
					this.SendPropertyChanging();
					this._LetterNo = value;
					this.SendPropertyChanged("LetterNo");
					this.OnLetterNoChanged();
				}
			}
		}
		
		[Column(Storage="_LetterDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LetterDate
		{
			get
			{
				return this._LetterDate;
			}
			set
			{
				if ((this._LetterDate != value))
				{
					this.OnLetterDateChanging(value);
					this.SendPropertyChanging();
					this._LetterDate = value;
					this.SendPropertyChanged("LetterDate");
					this.OnLetterDateChanged();
				}
			}
		}
		
		[Column(Storage="_FactEmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FactEmployeeID
		{
			get
			{
				return this._FactEmployeeID;
			}
			set
			{
				if ((this._FactEmployeeID != value))
				{
					if (this._FactEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._FactEmployeeID = value;
					this.SendPropertyChanged("FactEmployeeID");
					this.OnFactEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsSigned", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSigned
		{
			get
			{
				return this._IsSigned;
			}
			set
			{
				if ((this._IsSigned != value))
				{
					this.OnIsSignedChanging(value);
					this.SendPropertyChanging();
					this._IsSigned = value;
					this.SendPropertyChanged("IsSigned");
					this.OnIsSignedChanged();
				}
			}
		}
		
		[Column(Storage="_SignDateByEmployee", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDateByEmployee
		{
			get
			{
				return this._SignDateByEmployee;
			}
			set
			{
				if ((this._SignDateByEmployee != value))
				{
					this.OnSignDateByEmployeeChanging(value);
					this.SendPropertyChanging();
					this._SignDateByEmployee = value;
					this.SendPropertyChanged("SignDateByEmployee");
					this.OnSignDateByEmployeeChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureByEmployeeValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureByEmployeeValid
		{
			get
			{
				return this._IsSignatureByEmployeeValid;
			}
			set
			{
				if ((this._IsSignatureByEmployeeValid != value))
				{
					this.OnIsSignatureByEmployeeValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureByEmployeeValid = value;
					this.SendPropertyChanged("IsSignatureByEmployeeValid");
					this.OnIsSignatureByEmployeeValidChanged();
				}
			}
		}
		
		[Column(Storage="_FileForEmployeeGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileForEmployeeGUID
		{
			get
			{
				return this._FileForEmployeeGUID;
			}
			set
			{
				if ((this._FileForEmployeeGUID != value))
				{
					if (this._FileForEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileForEmployeeGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileForEmployeeGUID = value;
					this.SendPropertyChanged("FileForEmployeeGUID");
					this.OnFileForEmployeeGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureValid
		{
			get
			{
				return this._IsSignatureValid;
			}
			set
			{
				if ((this._IsSignatureValid != value))
				{
					this.OnIsSignatureValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureValid = value;
					this.SendPropertyChanged("IsSignatureValid");
					this.OnIsSignatureValidChanged();
				}
			}
		}
		
		[Column(Storage="_IsFileUpload", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsFileUpload
		{
			get
			{
				return this._IsFileUpload;
			}
			set
			{
				if ((this._IsFileUpload != value))
				{
					this.OnIsFileUploadChanging(value);
					this.SendPropertyChanging();
					this._IsFileUpload = value;
					this.SendPropertyChanged("IsFileUpload");
					this.OnIsFileUploadChanged();
				}
			}
		}
		
		[Column(Storage="_UploadDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> UploadDate
		{
			get
			{
				return this._UploadDate;
			}
			set
			{
				if ((this._UploadDate != value))
				{
					this.OnUploadDateChanging(value);
					this.SendPropertyChanging();
					this._UploadDate = value;
					this.SendPropertyChanged("UploadDate");
					this.OnUploadDateChanged();
				}
			}
		}
		
		[Association(Name="FK_FactSuspend_Employee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.FactSuspend.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.FactSuspend.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_FactSuspend_FactEmployee", Storage="_FactEmployee", ThisKey="FactEmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee FactEmployee
		{
			get
			{
				return this._FactEmployee.Entity;
			}
			set
			{
				Employee previousValue = this._FactEmployee.Entity;
				if (((previousValue != value) 
							|| (this._FactEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactEmployee.Entity = null;
						previousValue.FactSuspend_FactEmployee.Remove(this);
					}
					this._FactEmployee.Entity = value;
					if ((value != null))
					{
						value.FactSuspend_FactEmployee.Add(this);
						this._FactEmployeeID = value.EmployeeID;
					}
					else
					{
						this._FactEmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FactEmployee");
				}
			}
		}
		
		[Association(Name="FK_FactSuspend_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.FactSuspend.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.FactSuspend.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_FactSuspend_OrderDocTransition", Storage="_OrderDocTransition", ThisKey="FactID", OtherKey="OrderDocTransitionID", IsForeignKey=true, DeleteOnNull=true)]
		public OrderDocTransition OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition.Entity;
			}
			set
			{
				OrderDocTransition previousValue = this._OrderDocTransition.Entity;
				if (((previousValue != value) 
							|| (this._OrderDocTransition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDocTransition.Entity = null;
						previousValue.FactSuspend = null;
					}
					this._OrderDocTransition.Entity = value;
					if ((value != null))
					{
						value.FactSuspend = this;
						this._FactID = value.OrderDocTransitionID;
					}
					else
					{
						this._FactID = default(int);
					}
					this.SendPropertyChanged("OrderDocTransition");
				}
			}
		}
		
		[Association(Name="FK_FactSuspend_File", Storage="_File", ThisKey="FileGUID", OtherKey="ID", IsForeignKey=true)]
		public DbFile File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				if ((this._File.Entity != value))
				{
					this.SendPropertyChanging();
					this._File.Entity = value;
					this.SendPropertyChanged("File");
				}
			}
		}
		
		[Association(Name="FK_FactSuspend_FileForEmployee", Storage="_FileForEmployee", ThisKey="FileForEmployeeGUID", OtherKey="ID", IsForeignKey=true)]
		public DbFile FileForEmployee
		{
			get
			{
				return this._FileForEmployee.Entity;
			}
			set
			{
				if ((this._FileForEmployee.Entity != value))
				{
					this.SendPropertyChanging();
					this._FileForEmployee.Entity = value;
					this.SendPropertyChanged("FileForEmployee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ForeignAuthorization")]
	public partial class ForeignAuthorization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ForeignAuthorizationID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private char _Status;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<int> _QuotaYear;
		
		private System.Nullable<int> _CountryGroupID;
		
		private System.Nullable<int> _CNCategoryID;
		
		private System.Nullable<int> _CNID;
		
		private char _Type;
		
		private System.Nullable<decimal> _Amount;
		
		private string _DealerID;
		
		private System.Nullable<int> _DealerCountryID;
		
		private string _DealerAddress;
		
		private string _DealerName;
		
		private System.Nullable<System.Guid> _ContractorGUID;
		
		private EntityRef<C_CN> _CN;
		
		private EntityRef<C_CNCategory> _CNCategory;
		
		private EntityRef<Contractor> _Contractor;
		
		private EntityRef<C_CountryGroup> _CountryGroup;
		
		private EntityRef<C_Country> _DealerCountry;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForeignAuthorizationIDChanging(int value);
    partial void OnForeignAuthorizationIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnStatusChanging(char value);
    partial void OnStatusChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnQuotaYearChanging(System.Nullable<int> value);
    partial void OnQuotaYearChanged();
    partial void OnCountryGroupIDChanging(System.Nullable<int> value);
    partial void OnCountryGroupIDChanged();
    partial void OnCNCategoryIDChanging(System.Nullable<int> value);
    partial void OnCNCategoryIDChanged();
    partial void OnCNIDChanging(System.Nullable<int> value);
    partial void OnCNIDChanged();
    partial void OnTypeChanging(char value);
    partial void OnTypeChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnDealerIDChanging(string value);
    partial void OnDealerIDChanged();
    partial void OnDealerCountryIDChanging(System.Nullable<int> value);
    partial void OnDealerCountryIDChanged();
    partial void OnDealerAddressChanging(string value);
    partial void OnDealerAddressChanged();
    partial void OnDealerNameChanging(string value);
    partial void OnDealerNameChanged();
    partial void OnContractorGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnContractorGUIDChanged();
    #endregion
		
		public ForeignAuthorization()
		{
			this._CN = default(EntityRef<C_CN>);
			this._CNCategory = default(EntityRef<C_CNCategory>);
			this._Contractor = default(EntityRef<Contractor>);
			this._CountryGroup = default(EntityRef<C_CountryGroup>);
			this._DealerCountry = default(EntityRef<C_Country>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_ForeignAuthorizationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ForeignAuthorizationID
		{
			get
			{
				return this._ForeignAuthorizationID;
			}
			set
			{
				if ((this._ForeignAuthorizationID != value))
				{
					this.OnForeignAuthorizationIDChanging(value);
					this.SendPropertyChanging();
					this._ForeignAuthorizationID = value;
					this.SendPropertyChanged("ForeignAuthorizationID");
					this.OnForeignAuthorizationIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_QuotaYear", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> QuotaYear
		{
			get
			{
				return this._QuotaYear;
			}
			set
			{
				if ((this._QuotaYear != value))
				{
					this.OnQuotaYearChanging(value);
					this.SendPropertyChanging();
					this._QuotaYear = value;
					this.SendPropertyChanged("QuotaYear");
					this.OnQuotaYearChanged();
				}
			}
		}
		
		[Column(Storage="_CountryGroupID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CountryGroupID
		{
			get
			{
				return this._CountryGroupID;
			}
			set
			{
				if ((this._CountryGroupID != value))
				{
					if (this._CountryGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryGroupIDChanging(value);
					this.SendPropertyChanging();
					this._CountryGroupID = value;
					this.SendPropertyChanged("CountryGroupID");
					this.OnCountryGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					if (this._CNCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_CNID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CNID
		{
			get
			{
				return this._CNID;
			}
			set
			{
				if ((this._CNID != value))
				{
					if (this._CN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNIDChanging(value);
					this.SendPropertyChanging();
					this._CNID = value;
					this.SendPropertyChanged("CNID");
					this.OnCNIDChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(17,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_DealerID", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DealerID
		{
			get
			{
				return this._DealerID;
			}
			set
			{
				if ((this._DealerID != value))
				{
					this.OnDealerIDChanging(value);
					this.SendPropertyChanging();
					this._DealerID = value;
					this.SendPropertyChanged("DealerID");
					this.OnDealerIDChanged();
				}
			}
		}
		
		[Column(Storage="_DealerCountryID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DealerCountryID
		{
			get
			{
				return this._DealerCountryID;
			}
			set
			{
				if ((this._DealerCountryID != value))
				{
					if (this._DealerCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDealerCountryIDChanging(value);
					this.SendPropertyChanging();
					this._DealerCountryID = value;
					this.SendPropertyChanged("DealerCountryID");
					this.OnDealerCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_DealerAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DealerAddress
		{
			get
			{
				return this._DealerAddress;
			}
			set
			{
				if ((this._DealerAddress != value))
				{
					this.OnDealerAddressChanging(value);
					this.SendPropertyChanging();
					this._DealerAddress = value;
					this.SendPropertyChanged("DealerAddress");
					this.OnDealerAddressChanged();
				}
			}
		}
		
		[Column(Storage="_DealerName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DealerName
		{
			get
			{
				return this._DealerName;
			}
			set
			{
				if ((this._DealerName != value))
				{
					this.OnDealerNameChanging(value);
					this.SendPropertyChanging();
					this._DealerName = value;
					this.SendPropertyChanged("DealerName");
					this.OnDealerNameChanged();
				}
			}
		}
		
		[Column(Storage="_ContractorGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorGUID = value;
					this.SendPropertyChanged("ContractorGUID");
					this.OnContractorGUIDChanged();
				}
			}
		}
		
		[Association(Name="FK_ForeignAuthorization_CN", Storage="_CN", ThisKey="CNID", OtherKey="CNID", IsForeignKey=true)]
		public C_CN CN
		{
			get
			{
				return this._CN.Entity;
			}
			set
			{
				C_CN previousValue = this._CN.Entity;
				if (((previousValue != value) 
							|| (this._CN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CN.Entity = null;
						previousValue.ForeignAuthorization.Remove(this);
					}
					this._CN.Entity = value;
					if ((value != null))
					{
						value.ForeignAuthorization.Add(this);
						this._CNID = value.CNID;
					}
					else
					{
						this._CNID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CN");
				}
			}
		}
		
		[Association(Name="FK_ForeignAuthorization_CNCategory", Storage="_CNCategory", ThisKey="CNCategoryID", OtherKey="CNCategoryID", IsForeignKey=true)]
		public C_CNCategory CNCategory
		{
			get
			{
				return this._CNCategory.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._CNCategory.Entity;
				if (((previousValue != value) 
							|| (this._CNCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategory.Entity = null;
						previousValue.ForeignAuthorization.Remove(this);
					}
					this._CNCategory.Entity = value;
					if ((value != null))
					{
						value.ForeignAuthorization.Add(this);
						this._CNCategoryID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CNCategory");
				}
			}
		}
		
		[Association(Name="FK_ForeignAuthorization_Contractor", Storage="_Contractor", ThisKey="ContractorGUID", OtherKey="ContractorGUID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.ForeignAuthorization.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.ForeignAuthorization.Add(this);
						this._ContractorGUID = value.ContractorGUID;
					}
					else
					{
						this._ContractorGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		[Association(Name="FK_ForeignAuthorization_CountryGroup", Storage="_CountryGroup", ThisKey="CountryGroupID", OtherKey="CountryGroupID", IsForeignKey=true)]
		public C_CountryGroup CountryGroup
		{
			get
			{
				return this._CountryGroup.Entity;
			}
			set
			{
				C_CountryGroup previousValue = this._CountryGroup.Entity;
				if (((previousValue != value) 
							|| (this._CountryGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryGroup.Entity = null;
						previousValue.ForeignAuthorization.Remove(this);
					}
					this._CountryGroup.Entity = value;
					if ((value != null))
					{
						value.ForeignAuthorization.Add(this);
						this._CountryGroupID = value.CountryGroupID;
					}
					else
					{
						this._CountryGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CountryGroup");
				}
			}
		}
		
		[Association(Name="FK_ForeignAuthorization_DealerCountry", Storage="_DealerCountry", ThisKey="DealerCountryID", OtherKey="CountryID", IsForeignKey=true)]
		public C_Country DealerCountry
		{
			get
			{
				return this._DealerCountry.Entity;
			}
			set
			{
				C_Country previousValue = this._DealerCountry.Entity;
				if (((previousValue != value) 
							|| (this._DealerCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DealerCountry.Entity = null;
						previousValue.ForeignAuthorization.Remove(this);
					}
					this._DealerCountry.Entity = value;
					if ((value != null))
					{
						value.ForeignAuthorization.Add(this);
						this._DealerCountryID = value.CountryID;
					}
					else
					{
						this._DealerCountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DealerCountry");
				}
			}
		}
		
		[Association(Name="FK_ForeignAuthorization_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.ForeignAuthorization.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.ForeignAuthorization.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FTSExportLog")]
	public partial class FTSExportLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FTSExportLogID;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _FinishDate;
		
		private System.Nullable<int> _ObjectCount;
		
		private string _FileName;
		
		private System.Nullable<int> _FileLength;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFTSExportLogIDChanging(int value);
    partial void OnFTSExportLogIDChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnFinishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishDateChanged();
    partial void OnObjectCountChanging(System.Nullable<int> value);
    partial void OnObjectCountChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFileLengthChanging(System.Nullable<int> value);
    partial void OnFileLengthChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    #endregion
		
		public FTSExportLog()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_FTSExportLogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FTSExportLogID
		{
			get
			{
				return this._FTSExportLogID;
			}
			set
			{
				if ((this._FTSExportLogID != value))
				{
					this.OnFTSExportLogIDChanging(value);
					this.SendPropertyChanging();
					this._FTSExportLogID = value;
					this.SendPropertyChanged("FTSExportLogID");
					this.OnFTSExportLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_FinishDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FinishDate
		{
			get
			{
				return this._FinishDate;
			}
			set
			{
				if ((this._FinishDate != value))
				{
					this.OnFinishDateChanging(value);
					this.SendPropertyChanging();
					this._FinishDate = value;
					this.SendPropertyChanged("FinishDate");
					this.OnFinishDateChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectCount", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ObjectCount
		{
			get
			{
				return this._ObjectCount;
			}
			set
			{
				if ((this._ObjectCount != value))
				{
					this.OnObjectCountChanging(value);
					this.SendPropertyChanging();
					this._ObjectCount = value;
					this.SendPropertyChanged("ObjectCount");
					this.OnObjectCountChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_FileLength", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FileLength
		{
			get
			{
				return this._FileLength;
			}
			set
			{
				if ((this._FileLength != value))
				{
					this.OnFileLengthChanging(value);
					this.SendPropertyChanging();
					this._FileLength = value;
					this.SendPropertyChanged("FileLength");
					this.OnFileLengthChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Association(Name="FK_FTSExportLog_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.FTSExportLog.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.FTSExportLog.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FullCN")]
	public partial class FullCN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _ParentCNID;
		
		private int _ChildCNID;
		
		private int _ArcLen;
		
		private EntityRef<C_CN> _ChildCN;
		
		private EntityRef<C_CN> _ParentCN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParentCNIDChanging(System.Nullable<int> value);
    partial void OnParentCNIDChanged();
    partial void OnChildCNIDChanging(int value);
    partial void OnChildCNIDChanged();
    partial void OnArcLenChanging(int value);
    partial void OnArcLenChanged();
    #endregion
		
		public FullCN()
		{
			this._ChildCN = default(EntityRef<C_CN>);
			this._ParentCN = default(EntityRef<C_CN>);
			OnCreated();
		}
		
		[Column(Storage="_ParentCNID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ParentCNID
		{
			get
			{
				return this._ParentCNID;
			}
			set
			{
				if ((this._ParentCNID != value))
				{
					if (this._ParentCN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentCNIDChanging(value);
					this.SendPropertyChanging();
					this._ParentCNID = value;
					this.SendPropertyChanged("ParentCNID");
					this.OnParentCNIDChanged();
				}
			}
		}
		
		[Column(Storage="_ChildCNID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ChildCNID
		{
			get
			{
				return this._ChildCNID;
			}
			set
			{
				if ((this._ChildCNID != value))
				{
					if (this._ChildCN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildCNIDChanging(value);
					this.SendPropertyChanging();
					this._ChildCNID = value;
					this.SendPropertyChanged("ChildCNID");
					this.OnChildCNIDChanged();
				}
			}
		}
		
		[Column(Storage="_ArcLen", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ArcLen
		{
			get
			{
				return this._ArcLen;
			}
			set
			{
				if ((this._ArcLen != value))
				{
					this.OnArcLenChanging(value);
					this.SendPropertyChanging();
					this._ArcLen = value;
					this.SendPropertyChanged("ArcLen");
					this.OnArcLenChanged();
				}
			}
		}
		
		[Association(Name="FK_FullCN_ChildCN", Storage="_ChildCN", ThisKey="ChildCNID", OtherKey="CNID", IsForeignKey=true, DeleteOnNull=true)]
		public C_CN ChildCN
		{
			get
			{
				return this._ChildCN.Entity;
			}
			set
			{
				C_CN previousValue = this._ChildCN.Entity;
				if (((previousValue != value) 
							|| (this._ChildCN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildCN.Entity = null;
						previousValue.FullCN.Remove(this);
					}
					this._ChildCN.Entity = value;
					if ((value != null))
					{
						value.FullCN.Add(this);
						this._ChildCNID = value.CNID;
					}
					else
					{
						this._ChildCNID = default(int);
					}
					this.SendPropertyChanged("ChildCN");
				}
			}
		}
		
		[Association(Name="FK_FullCN_ParentCN", Storage="_ParentCN", ThisKey="ParentCNID", OtherKey="CNID", IsForeignKey=true)]
		public C_CN ParentCN
		{
			get
			{
				return this._ParentCN.Entity;
			}
			set
			{
				C_CN previousValue = this._ParentCN.Entity;
				if (((previousValue != value) 
							|| (this._ParentCN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentCN.Entity = null;
						previousValue.FullCN_ParentCN.Remove(this);
					}
					this._ParentCN.Entity = value;
					if ((value != null))
					{
						value.FullCN_ParentCN.Add(this);
						this._ParentCNID = value.CNID;
					}
					else
					{
						this._ParentCNID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ParentCN");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FullRepresentation")]
	public partial class FullRepresentation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChildRepresentationID;
		
		private int _ArcLen;
		
		private System.Nullable<int> _ParentRepresentationID;
		
		private EntityRef<Representation> _R_1039;
		
		private EntityRef<Representation> _R_1040;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChildRepresentationIDChanging(int value);
    partial void OnChildRepresentationIDChanged();
    partial void OnArcLenChanging(int value);
    partial void OnArcLenChanged();
    partial void OnParentRepresentationIDChanging(System.Nullable<int> value);
    partial void OnParentRepresentationIDChanged();
    #endregion
		
		public FullRepresentation()
		{
			this._R_1039 = default(EntityRef<Representation>);
			this._R_1040 = default(EntityRef<Representation>);
			OnCreated();
		}
		
		[Column(Storage="_ChildRepresentationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ChildRepresentationID
		{
			get
			{
				return this._ChildRepresentationID;
			}
			set
			{
				if ((this._ChildRepresentationID != value))
				{
					if (this._R_1040.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._ChildRepresentationID = value;
					this.SendPropertyChanged("ChildRepresentationID");
					this.OnChildRepresentationIDChanged();
				}
			}
		}
		
		[Column(Storage="_ArcLen", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ArcLen
		{
			get
			{
				return this._ArcLen;
			}
			set
			{
				if ((this._ArcLen != value))
				{
					this.OnArcLenChanging(value);
					this.SendPropertyChanging();
					this._ArcLen = value;
					this.SendPropertyChanged("ArcLen");
					this.OnArcLenChanged();
				}
			}
		}
		
		[Column(Storage="_ParentRepresentationID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ParentRepresentationID
		{
			get
			{
				return this._ParentRepresentationID;
			}
			set
			{
				if ((this._ParentRepresentationID != value))
				{
					if (this._R_1039.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._ParentRepresentationID = value;
					this.SendPropertyChanged("ParentRepresentationID");
					this.OnParentRepresentationIDChanged();
				}
			}
		}
		
		[Association(Storage="_R_1039", ThisKey="ParentRepresentationID", OtherKey="RepresentationID", IsForeignKey=true)]
		public Representation R_1039
		{
			get
			{
				return this._R_1039.Entity;
			}
			set
			{
				Representation previousValue = this._R_1039.Entity;
				if (((previousValue != value) 
							|| (this._R_1039.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._R_1039.Entity = null;
						previousValue.FullRepresentation.Remove(this);
					}
					this._R_1039.Entity = value;
					if ((value != null))
					{
						value.FullRepresentation.Add(this);
						this._ParentRepresentationID = value.RepresentationID;
					}
					else
					{
						this._ParentRepresentationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("R_1039");
				}
			}
		}
		
		[Association(Storage="_R_1040", ThisKey="ChildRepresentationID", OtherKey="RepresentationID", IsForeignKey=true, DeleteOnNull=true)]
		public Representation R_1040
		{
			get
			{
				return this._R_1040.Entity;
			}
			set
			{
				Representation previousValue = this._R_1040.Entity;
				if (((previousValue != value) 
							|| (this._R_1040.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._R_1040.Entity = null;
						previousValue.R_1040.Remove(this);
					}
					this._R_1040.Entity = value;
					if ((value != null))
					{
						value.R_1040.Add(this);
						this._ChildRepresentationID = value.RepresentationID;
					}
					else
					{
						this._ChildRepresentationID = default(int);
					}
					this.SendPropertyChanged("R_1040");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.HST_Contractor")]
	public partial class HST_Contractor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ContractorVersionGUID;
		
		private System.Guid _ContractorGUID;
		
		private int _VersionNumber;
		
		private bool _IsCurrentVersion;
		
		private string _INN;
		
		private string _OKPO;
		
		private char _ContractorType;
		
		private string _Title;
		
		private string _ShortName;
		
		private string _JuridicalAddress;
		
		private string _PostAddress;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Email;
		
		private string _PassportNumber;
		
		private string _PassportSerial;
		
		private string _PassportIssuedBy;
		
		private System.Nullable<System.DateTime> _PassportIssuedDate;
		
		private System.Nullable<int> _CreatorRepresentationID;
		
		private string _AddInfo;
		
		private string _EGRUL;
		
		private System.Nullable<System.DateTime> _CloseDate;
		
		private System.Nullable<System.Guid> _PrevContractorGUID;
		
		private int _CountryID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private System.Nullable<decimal> _OldID;
		
		private bool _IsPersonal;
		
		private System.Nullable<int> _RFSubjectID;
		
		private string _BankAccount;
		
		private string _BankAddress;
		
		private string _BankBIK;
		
		private string _BankCorrespondentAccount;
		
		private string _BankTitle;
		
		private string _KPP;
		
		private string _Status;
		
		private EntityRef<Contractor> _Contractor;
		
		private EntityRef<C_Country> _Country;
		
		private EntityRef<Representation> _CreatorRepresentation;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<Contractor> _PrevContractor;
		
		private EntityRef<C_RFSubject> _RFSubject;
		
		private EntitySet<OrderDoc> _OrderDoc;
		
		private EntitySet<OrderDoc> _ContractorVersionGU;
		
		private EntitySet<UserInfo> _UserInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractorVersionGUIDChanging(System.Guid value);
    partial void OnContractorVersionGUIDChanged();
    partial void OnContractorGUIDChanging(System.Guid value);
    partial void OnContractorGUIDChanged();
    partial void OnVersionNumberChanging(int value);
    partial void OnVersionNumberChanged();
    partial void OnIsCurrentVersionChanging(bool value);
    partial void OnIsCurrentVersionChanged();
    partial void OnINNChanging(string value);
    partial void OnINNChanged();
    partial void OnOKPOChanging(string value);
    partial void OnOKPOChanged();
    partial void OnContractorTypeChanging(char value);
    partial void OnContractorTypeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnJuridicalAddressChanging(string value);
    partial void OnJuridicalAddressChanged();
    partial void OnPostAddressChanging(string value);
    partial void OnPostAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPassportNumberChanging(string value);
    partial void OnPassportNumberChanged();
    partial void OnPassportSerialChanging(string value);
    partial void OnPassportSerialChanged();
    partial void OnPassportIssuedByChanging(string value);
    partial void OnPassportIssuedByChanged();
    partial void OnPassportIssuedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPassportIssuedDateChanged();
    partial void OnCreatorRepresentationIDChanging(System.Nullable<int> value);
    partial void OnCreatorRepresentationIDChanged();
    partial void OnAddInfoChanging(string value);
    partial void OnAddInfoChanged();
    partial void OnEGRULChanging(string value);
    partial void OnEGRULChanged();
    partial void OnCloseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCloseDateChanged();
    partial void OnPrevContractorGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnPrevContractorGUIDChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnOldIDChanging(System.Nullable<decimal> value);
    partial void OnOldIDChanged();
    partial void OnIsPersonalChanging(bool value);
    partial void OnIsPersonalChanged();
    partial void OnRFSubjectIDChanging(System.Nullable<int> value);
    partial void OnRFSubjectIDChanged();
    partial void OnBankAccountChanging(string value);
    partial void OnBankAccountChanged();
    partial void OnBankAddressChanging(string value);
    partial void OnBankAddressChanged();
    partial void OnBankBIKChanging(string value);
    partial void OnBankBIKChanged();
    partial void OnBankCorrespondentAccountChanging(string value);
    partial void OnBankCorrespondentAccountChanged();
    partial void OnBankTitleChanging(string value);
    partial void OnBankTitleChanged();
    partial void OnKPPChanging(string value);
    partial void OnKPPChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public HST_Contractor()
		{
			this._Contractor = default(EntityRef<Contractor>);
			this._Country = default(EntityRef<C_Country>);
			this._CreatorRepresentation = default(EntityRef<Representation>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._PrevContractor = default(EntityRef<Contractor>);
			this._RFSubject = default(EntityRef<C_RFSubject>);
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._ContractorVersionGU = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_ContractorVersionGU), new Action<OrderDoc>(this.detach_ContractorVersionGU));
			this._UserInfo = new EntitySet<UserInfo>(new Action<UserInfo>(this.attach_UserInfo), new Action<UserInfo>(this.detach_UserInfo));
			OnCreated();
		}
		
		[Column(Storage="_ContractorVersionGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ContractorVersionGUID
		{
			get
			{
				return this._ContractorVersionGUID;
			}
			set
			{
				if ((this._ContractorVersionGUID != value))
				{
					this.OnContractorVersionGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorVersionGUID = value;
					this.SendPropertyChanged("ContractorVersionGUID");
					this.OnContractorVersionGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContractorGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorGUID = value;
					this.SendPropertyChanged("ContractorGUID");
					this.OnContractorGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_VersionNumber", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionNumber
		{
			get
			{
				return this._VersionNumber;
			}
			set
			{
				if ((this._VersionNumber != value))
				{
					this.OnVersionNumberChanging(value);
					this.SendPropertyChanging();
					this._VersionNumber = value;
					this.SendPropertyChanged("VersionNumber");
					this.OnVersionNumberChanged();
				}
			}
		}
		
		[Column(Storage="_IsCurrentVersion", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsCurrentVersion
		{
			get
			{
				return this._IsCurrentVersion;
			}
			set
			{
				if ((this._IsCurrentVersion != value))
				{
					this.OnIsCurrentVersionChanging(value);
					this.SendPropertyChanging();
					this._IsCurrentVersion = value;
					this.SendPropertyChanged("IsCurrentVersion");
					this.OnIsCurrentVersionChanged();
				}
			}
		}
		
		[Column(Storage="_INN", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string INN
		{
			get
			{
				return this._INN;
			}
			set
			{
				if ((this._INN != value))
				{
					this.OnINNChanging(value);
					this.SendPropertyChanging();
					this._INN = value;
					this.SendPropertyChanged("INN");
					this.OnINNChanged();
				}
			}
		}
		
		[Column(Storage="_OKPO", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string OKPO
		{
			get
			{
				return this._OKPO;
			}
			set
			{
				if ((this._OKPO != value))
				{
					this.OnOKPOChanging(value);
					this.SendPropertyChanging();
					this._OKPO = value;
					this.SendPropertyChanged("OKPO");
					this.OnOKPOChanged();
				}
			}
		}
		
		[Column(Storage="_ContractorType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char ContractorType
		{
			get
			{
				return this._ContractorType;
			}
			set
			{
				if ((this._ContractorType != value))
				{
					this.OnContractorTypeChanging(value);
					this.SendPropertyChanging();
					this._ContractorType = value;
					this.SendPropertyChanged("ContractorType");
					this.OnContractorTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ShortName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[Column(Storage="_JuridicalAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string JuridicalAddress
		{
			get
			{
				return this._JuridicalAddress;
			}
			set
			{
				if ((this._JuridicalAddress != value))
				{
					this.OnJuridicalAddressChanging(value);
					this.SendPropertyChanging();
					this._JuridicalAddress = value;
					this.SendPropertyChanged("JuridicalAddress");
					this.OnJuridicalAddressChanged();
				}
			}
		}
		
		[Column(Storage="_PostAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PostAddress
		{
			get
			{
				return this._PostAddress;
			}
			set
			{
				if ((this._PostAddress != value))
				{
					this.OnPostAddressChanging(value);
					this.SendPropertyChanging();
					this._PostAddress = value;
					this.SendPropertyChanged("PostAddress");
					this.OnPostAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_PassportNumber", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PassportNumber
		{
			get
			{
				return this._PassportNumber;
			}
			set
			{
				if ((this._PassportNumber != value))
				{
					this.OnPassportNumberChanging(value);
					this.SendPropertyChanging();
					this._PassportNumber = value;
					this.SendPropertyChanged("PassportNumber");
					this.OnPassportNumberChanged();
				}
			}
		}
		
		[Column(Storage="_PassportSerial", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PassportSerial
		{
			get
			{
				return this._PassportSerial;
			}
			set
			{
				if ((this._PassportSerial != value))
				{
					this.OnPassportSerialChanging(value);
					this.SendPropertyChanging();
					this._PassportSerial = value;
					this.SendPropertyChanged("PassportSerial");
					this.OnPassportSerialChanged();
				}
			}
		}
		
		[Column(Storage="_PassportIssuedBy", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PassportIssuedBy
		{
			get
			{
				return this._PassportIssuedBy;
			}
			set
			{
				if ((this._PassportIssuedBy != value))
				{
					this.OnPassportIssuedByChanging(value);
					this.SendPropertyChanging();
					this._PassportIssuedBy = value;
					this.SendPropertyChanged("PassportIssuedBy");
					this.OnPassportIssuedByChanged();
				}
			}
		}
		
		[Column(Storage="_PassportIssuedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PassportIssuedDate
		{
			get
			{
				return this._PassportIssuedDate;
			}
			set
			{
				if ((this._PassportIssuedDate != value))
				{
					this.OnPassportIssuedDateChanging(value);
					this.SendPropertyChanging();
					this._PassportIssuedDate = value;
					this.SendPropertyChanged("PassportIssuedDate");
					this.OnPassportIssuedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatorRepresentationID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CreatorRepresentationID
		{
			get
			{
				return this._CreatorRepresentationID;
			}
			set
			{
				if ((this._CreatorRepresentationID != value))
				{
					if (this._CreatorRepresentation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorRepresentationID = value;
					this.SendPropertyChanged("CreatorRepresentationID");
					this.OnCreatorRepresentationIDChanged();
				}
			}
		}
		
		[Column(Storage="_AddInfo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string AddInfo
		{
			get
			{
				return this._AddInfo;
			}
			set
			{
				if ((this._AddInfo != value))
				{
					this.OnAddInfoChanging(value);
					this.SendPropertyChanging();
					this._AddInfo = value;
					this.SendPropertyChanged("AddInfo");
					this.OnAddInfoChanged();
				}
			}
		}
		
		[Column(Storage="_EGRUL", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string EGRUL
		{
			get
			{
				return this._EGRUL;
			}
			set
			{
				if ((this._EGRUL != value))
				{
					this.OnEGRULChanging(value);
					this.SendPropertyChanging();
					this._EGRUL = value;
					this.SendPropertyChanged("EGRUL");
					this.OnEGRULChanged();
				}
			}
		}
		
		[Column(Storage="_CloseDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CloseDate
		{
			get
			{
				return this._CloseDate;
			}
			set
			{
				if ((this._CloseDate != value))
				{
					this.OnCloseDateChanging(value);
					this.SendPropertyChanging();
					this._CloseDate = value;
					this.SendPropertyChanged("CloseDate");
					this.OnCloseDateChanged();
				}
			}
		}
		
		[Column(Storage="_PrevContractorGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> PrevContractorGUID
		{
			get
			{
				return this._PrevContractorGUID;
			}
			set
			{
				if ((this._PrevContractorGUID != value))
				{
					if (this._PrevContractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrevContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._PrevContractorGUID = value;
					this.SendPropertyChanged("PrevContractorGUID");
					this.OnPrevContractorGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_OldID", DbType="Decimal(14,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsPersonal", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsPersonal
		{
			get
			{
				return this._IsPersonal;
			}
			set
			{
				if ((this._IsPersonal != value))
				{
					this.OnIsPersonalChanging(value);
					this.SendPropertyChanging();
					this._IsPersonal = value;
					this.SendPropertyChanged("IsPersonal");
					this.OnIsPersonalChanged();
				}
			}
		}
		
		[Column(Storage="_RFSubjectID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RFSubjectID
		{
			get
			{
				return this._RFSubjectID;
			}
			set
			{
				if ((this._RFSubjectID != value))
				{
					if (this._RFSubject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRFSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._RFSubjectID = value;
					this.SendPropertyChanged("RFSubjectID");
					this.OnRFSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_BankAccount", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BankAccount
		{
			get
			{
				return this._BankAccount;
			}
			set
			{
				if ((this._BankAccount != value))
				{
					this.OnBankAccountChanging(value);
					this.SendPropertyChanging();
					this._BankAccount = value;
					this.SendPropertyChanged("BankAccount");
					this.OnBankAccountChanged();
				}
			}
		}
		
		[Column(Storage="_BankAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BankAddress
		{
			get
			{
				return this._BankAddress;
			}
			set
			{
				if ((this._BankAddress != value))
				{
					this.OnBankAddressChanging(value);
					this.SendPropertyChanging();
					this._BankAddress = value;
					this.SendPropertyChanged("BankAddress");
					this.OnBankAddressChanged();
				}
			}
		}
		
		[Column(Storage="_BankBIK", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BankBIK
		{
			get
			{
				return this._BankBIK;
			}
			set
			{
				if ((this._BankBIK != value))
				{
					this.OnBankBIKChanging(value);
					this.SendPropertyChanging();
					this._BankBIK = value;
					this.SendPropertyChanged("BankBIK");
					this.OnBankBIKChanged();
				}
			}
		}
		
		[Column(Storage="_BankCorrespondentAccount", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BankCorrespondentAccount
		{
			get
			{
				return this._BankCorrespondentAccount;
			}
			set
			{
				if ((this._BankCorrespondentAccount != value))
				{
					this.OnBankCorrespondentAccountChanging(value);
					this.SendPropertyChanging();
					this._BankCorrespondentAccount = value;
					this.SendPropertyChanged("BankCorrespondentAccount");
					this.OnBankCorrespondentAccountChanged();
				}
			}
		}
		
		[Column(Storage="_BankTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BankTitle
		{
			get
			{
				return this._BankTitle;
			}
			set
			{
				if ((this._BankTitle != value))
				{
					this.OnBankTitleChanging(value);
					this.SendPropertyChanging();
					this._BankTitle = value;
					this.SendPropertyChanged("BankTitle");
					this.OnBankTitleChanged();
				}
			}
		}
		
		[Column(Storage="_KPP", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string KPP
		{
			get
			{
				return this._KPP;
			}
			set
			{
				if ((this._KPP != value))
				{
					this.OnKPPChanging(value);
					this.SendPropertyChanging();
					this._KPP = value;
					this.SendPropertyChanged("KPP");
					this.OnKPPChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="FK_HST_Contractor_Contractor", Storage="_Contractor", ThisKey="ContractorGUID", OtherKey="ContractorGUID", IsForeignKey=true, DeleteOnNull=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.HST_Contractor.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.HST_Contractor.Add(this);
						this._ContractorGUID = value.ContractorGUID;
					}
					else
					{
						this._ContractorGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		[Association(Name="FK_HST_Contractor_Country", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public C_Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				C_Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.HST_Contractor.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.HST_Contractor.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="FK_HST_Contractor_CreatorRepresentation", Storage="_CreatorRepresentation", ThisKey="CreatorRepresentationID", OtherKey="RepresentationID", IsForeignKey=true)]
		public Representation CreatorRepresentation
		{
			get
			{
				return this._CreatorRepresentation.Entity;
			}
			set
			{
				Representation previousValue = this._CreatorRepresentation.Entity;
				if (((previousValue != value) 
							|| (this._CreatorRepresentation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatorRepresentation.Entity = null;
						previousValue.HST_Contractor.Remove(this);
					}
					this._CreatorRepresentation.Entity = value;
					if ((value != null))
					{
						value.HST_Contractor.Add(this);
						this._CreatorRepresentationID = value.RepresentationID;
					}
					else
					{
						this._CreatorRepresentationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CreatorRepresentation");
				}
			}
		}
		
		[Association(Name="FK_HST_Contractor_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.HST_Contractor.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.HST_Contractor.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_HST_Contractor_PrevContractor", Storage="_PrevContractor", ThisKey="PrevContractorGUID", OtherKey="ContractorGUID", IsForeignKey=true)]
		public Contractor PrevContractor
		{
			get
			{
				return this._PrevContractor.Entity;
			}
			set
			{
				Contractor previousValue = this._PrevContractor.Entity;
				if (((previousValue != value) 
							|| (this._PrevContractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PrevContractor.Entity = null;
						previousValue.HST_Contractor_PrevContractor.Remove(this);
					}
					this._PrevContractor.Entity = value;
					if ((value != null))
					{
						value.HST_Contractor_PrevContractor.Add(this);
						this._PrevContractorGUID = value.ContractorGUID;
					}
					else
					{
						this._PrevContractorGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PrevContractor");
				}
			}
		}
		
		[Association(Name="FK_HST_Contractor_RFSubject", Storage="_RFSubject", ThisKey="RFSubjectID", OtherKey="RFSubjectID", IsForeignKey=true)]
		public C_RFSubject RFSubject
		{
			get
			{
				return this._RFSubject.Entity;
			}
			set
			{
				C_RFSubject previousValue = this._RFSubject.Entity;
				if (((previousValue != value) 
							|| (this._RFSubject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RFSubject.Entity = null;
						previousValue.HST_Contractor.Remove(this);
					}
					this._RFSubject.Entity = value;
					if ((value != null))
					{
						value.HST_Contractor.Add(this);
						this._RFSubjectID = value.RFSubjectID;
					}
					else
					{
						this._RFSubjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RFSubject");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_Applicant", Storage="_OrderDoc", ThisKey="ContractorVersionGUID", OtherKey="ApplicantGUID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_QuoteOwner", Storage="_ContractorVersionGU", ThisKey="ContractorVersionGUID", OtherKey="QuoteOwnerGUID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> ContractorVersionGU
		{
			get
			{
				return this._ContractorVersionGU;
			}
			set
			{
				this._ContractorVersionGU.Assign(value);
			}
		}
		
		[Association(Name="FK_UserInfo_Contractor", Storage="_UserInfo", ThisKey="ContractorVersionGUID", OtherKey="ContractorGUID", DeleteRule="NO ACTION")]
		public EntitySet<UserInfo> UserInfo
		{
			get
			{
				return this._UserInfo;
			}
			set
			{
				this._UserInfo.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = this;
		}
		
		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = null;
		}
		
		private void attach_ContractorVersionGU(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.QuoteOwner = this;
		}
		
		private void detach_ContractorVersionGU(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.QuoteOwner = null;
		}
		
		private void attach_UserInfo(UserInfo entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_UserInfo(UserInfo entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
	}
	
	[Table(Name="dbo.HST_MM_FormView")]
	public partial class HST_MM_FormView : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FormViewVersionID;
		
		private int _FormViewID;
		
		private int _VersionNumber;
		
		private bool _IsCurrentVersion;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private string _SysName;
		
		private string _ViewTemplate;
		
		private char _TemplateTypeCode;
		
		private System.Nullable<int> _ObjectTypeID;
		
		private System.Nullable<int> _PackageID;
		
		private System.Guid _Guid;
		
		private bool _IsCustom;
		
		private bool _IsCaching;
		
		private string _CacheKeyParams;
		
		private int _CacheTimeout;
		
		private string _BaseClass;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<MM_FormView> _MM_FormView;
		
		private EntityRef<MM_ObjectType> _ObjectType;
		
		private EntityRef<MM_Package> _Package;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormViewVersionIDChanging(int value);
    partial void OnFormViewVersionIDChanged();
    partial void OnFormViewIDChanging(int value);
    partial void OnFormViewIDChanged();
    partial void OnVersionNumberChanging(int value);
    partial void OnVersionNumberChanged();
    partial void OnIsCurrentVersionChanging(bool value);
    partial void OnIsCurrentVersionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnViewTemplateChanging(string value);
    partial void OnViewTemplateChanged();
    partial void OnTemplateTypeCodeChanging(char value);
    partial void OnTemplateTypeCodeChanged();
    partial void OnObjectTypeIDChanging(System.Nullable<int> value);
    partial void OnObjectTypeIDChanged();
    partial void OnPackageIDChanging(System.Nullable<int> value);
    partial void OnPackageIDChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnIsCustomChanging(bool value);
    partial void OnIsCustomChanged();
    partial void OnIsCachingChanging(bool value);
    partial void OnIsCachingChanged();
    partial void OnCacheKeyParamsChanging(string value);
    partial void OnCacheKeyParamsChanged();
    partial void OnCacheTimeoutChanging(int value);
    partial void OnCacheTimeoutChanged();
    partial void OnBaseClassChanging(string value);
    partial void OnBaseClassChanged();
    #endregion
		
		public HST_MM_FormView()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MM_FormView = default(EntityRef<MM_FormView>);
			this._ObjectType = default(EntityRef<MM_ObjectType>);
			this._Package = default(EntityRef<MM_Package>);
			OnCreated();
		}
		
		[Column(Storage="_FormViewVersionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FormViewVersionID
		{
			get
			{
				return this._FormViewVersionID;
			}
			set
			{
				if ((this._FormViewVersionID != value))
				{
					this.OnFormViewVersionIDChanging(value);
					this.SendPropertyChanging();
					this._FormViewVersionID = value;
					this.SendPropertyChanged("FormViewVersionID");
					this.OnFormViewVersionIDChanged();
				}
			}
		}
		
		[Column(Storage="_FormViewID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FormViewID
		{
			get
			{
				return this._FormViewID;
			}
			set
			{
				if ((this._FormViewID != value))
				{
					if (this._MM_FormView.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormViewIDChanging(value);
					this.SendPropertyChanging();
					this._FormViewID = value;
					this.SendPropertyChanged("FormViewID");
					this.OnFormViewIDChanged();
				}
			}
		}
		
		[Column(Storage="_VersionNumber", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionNumber
		{
			get
			{
				return this._VersionNumber;
			}
			set
			{
				if ((this._VersionNumber != value))
				{
					this.OnVersionNumberChanging(value);
					this.SendPropertyChanging();
					this._VersionNumber = value;
					this.SendPropertyChanged("VersionNumber");
					this.OnVersionNumberChanged();
				}
			}
		}
		
		[Column(Storage="_IsCurrentVersion", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsCurrentVersion
		{
			get
			{
				return this._IsCurrentVersion;
			}
			set
			{
				if ((this._IsCurrentVersion != value))
				{
					this.OnIsCurrentVersionChanging(value);
					this.SendPropertyChanging();
					this._IsCurrentVersion = value;
					this.SendPropertyChanged("IsCurrentVersion");
					this.OnIsCurrentVersionChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_ViewTemplate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ViewTemplate
		{
			get
			{
				return this._ViewTemplate;
			}
			set
			{
				if ((this._ViewTemplate != value))
				{
					this.OnViewTemplateChanging(value);
					this.SendPropertyChanging();
					this._ViewTemplate = value;
					this.SendPropertyChanged("ViewTemplate");
					this.OnViewTemplateChanged();
				}
			}
		}
		
		[Column(Storage="_TemplateTypeCode", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char TemplateTypeCode
		{
			get
			{
				return this._TemplateTypeCode;
			}
			set
			{
				if ((this._TemplateTypeCode != value))
				{
					this.OnTemplateTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._TemplateTypeCode = value;
					this.SendPropertyChanged("TemplateTypeCode");
					this.OnTemplateTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_PackageID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_IsCustom", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsCustom
		{
			get
			{
				return this._IsCustom;
			}
			set
			{
				if ((this._IsCustom != value))
				{
					this.OnIsCustomChanging(value);
					this.SendPropertyChanging();
					this._IsCustom = value;
					this.SendPropertyChanged("IsCustom");
					this.OnIsCustomChanged();
				}
			}
		}
		
		[Column(Storage="_IsCaching", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsCaching
		{
			get
			{
				return this._IsCaching;
			}
			set
			{
				if ((this._IsCaching != value))
				{
					this.OnIsCachingChanging(value);
					this.SendPropertyChanging();
					this._IsCaching = value;
					this.SendPropertyChanged("IsCaching");
					this.OnIsCachingChanged();
				}
			}
		}
		
		[Column(Storage="_CacheKeyParams", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CacheKeyParams
		{
			get
			{
				return this._CacheKeyParams;
			}
			set
			{
				if ((this._CacheKeyParams != value))
				{
					this.OnCacheKeyParamsChanging(value);
					this.SendPropertyChanging();
					this._CacheKeyParams = value;
					this.SendPropertyChanged("CacheKeyParams");
					this.OnCacheKeyParamsChanged();
				}
			}
		}
		
		[Column(Storage="_CacheTimeout", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CacheTimeout
		{
			get
			{
				return this._CacheTimeout;
			}
			set
			{
				if ((this._CacheTimeout != value))
				{
					this.OnCacheTimeoutChanging(value);
					this.SendPropertyChanging();
					this._CacheTimeout = value;
					this.SendPropertyChanged("CacheTimeout");
					this.OnCacheTimeoutChanged();
				}
			}
		}
		
		[Column(Storage="_BaseClass", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string BaseClass
		{
			get
			{
				return this._BaseClass;
			}
			set
			{
				if ((this._BaseClass != value))
				{
					this.OnBaseClassChanging(value);
					this.SendPropertyChanging();
					this._BaseClass = value;
					this.SendPropertyChanged("BaseClass");
					this.OnBaseClassChanged();
				}
			}
		}
		
		[Association(Name="FK_HST_MM_FormView_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.HST_MM_FormView.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.HST_MM_FormView.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_HST_MM_FormView_MM_FormView", Storage="_MM_FormView", ThisKey="FormViewID", OtherKey="FormViewID", IsForeignKey=true, DeleteOnNull=true)]
		public MM_FormView MM_FormView
		{
			get
			{
				return this._MM_FormView.Entity;
			}
			set
			{
				MM_FormView previousValue = this._MM_FormView.Entity;
				if (((previousValue != value) 
							|| (this._MM_FormView.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_FormView.Entity = null;
						previousValue.HST_MM_FormView.Remove(this);
					}
					this._MM_FormView.Entity = value;
					if ((value != null))
					{
						value.HST_MM_FormView.Add(this);
						this._FormViewID = value.FormViewID;
					}
					else
					{
						this._FormViewID = default(int);
					}
					this.SendPropertyChanged("MM_FormView");
				}
			}
		}
		
		[Association(Name="FK_HST_MM_FormView_ObjectType", Storage="_ObjectType", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", IsForeignKey=true)]
		public MM_ObjectType ObjectType
		{
			get
			{
				return this._ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._ObjectType.Entity;
				if (((previousValue != value) 
							|| (this._ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectType.Entity = null;
						previousValue.HST_MM_FormView.Remove(this);
					}
					this._ObjectType.Entity = value;
					if ((value != null))
					{
						value.HST_MM_FormView.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ObjectType");
				}
			}
		}
		
		[Association(Name="FK_HST_MM_FormView_Package", Storage="_Package", ThisKey="PackageID", OtherKey="PackageID", IsForeignKey=true)]
		public MM_Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				MM_Package previousValue = this._Package.Entity;
				if (((previousValue != value) 
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.HST_MM_FormView.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.HST_MM_FormView.Add(this);
						this._PackageID = value.PackageID;
					}
					else
					{
						this._PackageID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.HST_N_TimeZone")]
	public partial class HST_N_TimeZone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TimeZoneVersionID;
		
		private int _TimeZoneID;
		
		private int _VersionNumber;
		
		private bool _IsCurrentVersion;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private int _GMTOffset;
		
		private string _Comment;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<N_TimeZone> _N_TimeZone;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeZoneVersionIDChanging(int value);
    partial void OnTimeZoneVersionIDChanged();
    partial void OnTimeZoneIDChanging(int value);
    partial void OnTimeZoneIDChanged();
    partial void OnVersionNumberChanging(int value);
    partial void OnVersionNumberChanged();
    partial void OnIsCurrentVersionChanging(bool value);
    partial void OnIsCurrentVersionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnGMTOffsetChanging(int value);
    partial void OnGMTOffsetChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public HST_N_TimeZone()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._N_TimeZone = default(EntityRef<N_TimeZone>);
			OnCreated();
		}
		
		[Column(Storage="_TimeZoneVersionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TimeZoneVersionID
		{
			get
			{
				return this._TimeZoneVersionID;
			}
			set
			{
				if ((this._TimeZoneVersionID != value))
				{
					this.OnTimeZoneVersionIDChanging(value);
					this.SendPropertyChanging();
					this._TimeZoneVersionID = value;
					this.SendPropertyChanged("TimeZoneVersionID");
					this.OnTimeZoneVersionIDChanged();
				}
			}
		}
		
		[Column(Storage="_TimeZoneID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TimeZoneID
		{
			get
			{
				return this._TimeZoneID;
			}
			set
			{
				if ((this._TimeZoneID != value))
				{
					if (this._N_TimeZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimeZoneIDChanging(value);
					this.SendPropertyChanging();
					this._TimeZoneID = value;
					this.SendPropertyChanged("TimeZoneID");
					this.OnTimeZoneIDChanged();
				}
			}
		}
		
		[Column(Storage="_VersionNumber", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionNumber
		{
			get
			{
				return this._VersionNumber;
			}
			set
			{
				if ((this._VersionNumber != value))
				{
					this.OnVersionNumberChanging(value);
					this.SendPropertyChanging();
					this._VersionNumber = value;
					this.SendPropertyChanged("VersionNumber");
					this.OnVersionNumberChanged();
				}
			}
		}
		
		[Column(Storage="_IsCurrentVersion", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsCurrentVersion
		{
			get
			{
				return this._IsCurrentVersion;
			}
			set
			{
				if ((this._IsCurrentVersion != value))
				{
					this.OnIsCurrentVersionChanging(value);
					this.SendPropertyChanging();
					this._IsCurrentVersion = value;
					this.SendPropertyChanged("IsCurrentVersion");
					this.OnIsCurrentVersionChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_GMTOffset", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int GMTOffset
		{
			get
			{
				return this._GMTOffset;
			}
			set
			{
				if ((this._GMTOffset != value))
				{
					this.OnGMTOffsetChanging(value);
					this.SendPropertyChanging();
					this._GMTOffset = value;
					this.SendPropertyChanged("GMTOffset");
					this.OnGMTOffsetChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Association(Name="FK_HST_N_TimeZone_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.HST_N_TimeZone.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.HST_N_TimeZone.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_HST_N_TimeZone_N_TimeZone", Storage="_N_TimeZone", ThisKey="TimeZoneID", OtherKey="TimeZoneID", IsForeignKey=true, DeleteOnNull=true)]
		public N_TimeZone N_TimeZone
		{
			get
			{
				return this._N_TimeZone.Entity;
			}
			set
			{
				N_TimeZone previousValue = this._N_TimeZone.Entity;
				if (((previousValue != value) 
							|| (this._N_TimeZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._N_TimeZone.Entity = null;
						previousValue.HST_N_TimeZone.Remove(this);
					}
					this._N_TimeZone.Entity = value;
					if ((value != null))
					{
						value.HST_N_TimeZone.Add(this);
						this._TimeZoneID = value.TimeZoneID;
					}
					else
					{
						this._TimeZoneID = default(int);
					}
					this.SendPropertyChanged("N_TimeZone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.INT_Command")]
	public partial class INT_Command : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CommandGUID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private string _SysName;
		
		private System.Guid _SystemGUID;
		
		private System.Nullable<System.Guid> _InputXsdFileGUID;
		
		private System.Nullable<System.Guid> _OutputXsdFileGUID;
		
		private int _RepeatPeriod;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<INT_System> _System;
		
		private EntitySet<INT_Handler> _INT_Handler;
		
		private EntitySet<INT_Log> _INT_Log;
		
		private EntityRef<DbFile> _InputXsdFile;
		
		private EntityRef<DbFile> _OutputXsdFile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommandGUIDChanging(System.Guid value);
    partial void OnCommandGUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnSystemGUIDChanging(System.Guid value);
    partial void OnSystemGUIDChanged();
    partial void OnInputXsdFileGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnInputXsdFileGUIDChanged();
    partial void OnOutputXsdFileGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOutputXsdFileGUIDChanged();
    partial void OnRepeatPeriodChanging(int value);
    partial void OnRepeatPeriodChanged();
    #endregion
		
		public INT_Command()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._System = default(EntityRef<INT_System>);
			this._INT_Handler = new EntitySet<INT_Handler>(new Action<INT_Handler>(this.attach_INT_Handler), new Action<INT_Handler>(this.detach_INT_Handler));
			this._INT_Log = new EntitySet<INT_Log>(new Action<INT_Log>(this.attach_INT_Log), new Action<INT_Log>(this.detach_INT_Log));
			this._InputXsdFile = default(EntityRef<DbFile>);
			this._OutputXsdFile = default(EntityRef<DbFile>);
			OnCreated();
		}
		
		[Column(Storage="_CommandGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CommandGUID
		{
			get
			{
				return this._CommandGUID;
			}
			set
			{
				if ((this._CommandGUID != value))
				{
					this.OnCommandGUIDChanging(value);
					this.SendPropertyChanging();
					this._CommandGUID = value;
					this.SendPropertyChanged("CommandGUID");
					this.OnCommandGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_SystemGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid SystemGUID
		{
			get
			{
				return this._SystemGUID;
			}
			set
			{
				if ((this._SystemGUID != value))
				{
					if (this._System.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemGUIDChanging(value);
					this.SendPropertyChanging();
					this._SystemGUID = value;
					this.SendPropertyChanged("SystemGUID");
					this.OnSystemGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_InputXsdFileGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> InputXsdFileGUID
		{
			get
			{
				return this._InputXsdFileGUID;
			}
			set
			{
				if ((this._InputXsdFileGUID != value))
				{
					if (this._InputXsdFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInputXsdFileGUIDChanging(value);
					this.SendPropertyChanging();
					this._InputXsdFileGUID = value;
					this.SendPropertyChanged("InputXsdFileGUID");
					this.OnInputXsdFileGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_OutputXsdFileGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> OutputXsdFileGUID
		{
			get
			{
				return this._OutputXsdFileGUID;
			}
			set
			{
				if ((this._OutputXsdFileGUID != value))
				{
					if (this._OutputXsdFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOutputXsdFileGUIDChanging(value);
					this.SendPropertyChanging();
					this._OutputXsdFileGUID = value;
					this.SendPropertyChanged("OutputXsdFileGUID");
					this.OnOutputXsdFileGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_RepeatPeriod", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int RepeatPeriod
		{
			get
			{
				return this._RepeatPeriod;
			}
			set
			{
				if ((this._RepeatPeriod != value))
				{
					this.OnRepeatPeriodChanging(value);
					this.SendPropertyChanging();
					this._RepeatPeriod = value;
					this.SendPropertyChanged("RepeatPeriod");
					this.OnRepeatPeriodChanged();
				}
			}
		}
		
		[Association(Name="FK_INT_Command_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.INT_Command.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.INT_Command.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_INT_Command_System", Storage="_System", ThisKey="SystemGUID", OtherKey="SystemGUID", IsForeignKey=true, DeleteOnNull=true)]
		public INT_System System
		{
			get
			{
				return this._System.Entity;
			}
			set
			{
				INT_System previousValue = this._System.Entity;
				if (((previousValue != value) 
							|| (this._System.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._System.Entity = null;
						previousValue.INT_Command.Remove(this);
					}
					this._System.Entity = value;
					if ((value != null))
					{
						value.INT_Command.Add(this);
						this._SystemGUID = value.SystemGUID;
					}
					else
					{
						this._SystemGUID = default(System.Guid);
					}
					this.SendPropertyChanged("System");
				}
			}
		}
		
		[Association(Name="FK_INT_Handler_Command", Storage="_INT_Handler", ThisKey="CommandGUID", OtherKey="CommandGUID", DeleteRule="CASCADE")]
		public EntitySet<INT_Handler> INT_Handler
		{
			get
			{
				return this._INT_Handler;
			}
			set
			{
				this._INT_Handler.Assign(value);
			}
		}
		
		[Association(Name="FK_INT_Log_Command", Storage="_INT_Log", ThisKey="CommandGUID", OtherKey="CommandGUID", DeleteRule="NO ACTION")]
		public EntitySet<INT_Log> INT_Log
		{
			get
			{
				return this._INT_Log;
			}
			set
			{
				this._INT_Log.Assign(value);
			}
		}
		
		[Association(Name="FK_INT_Command_InputXsdFile", Storage="_InputXsdFile", ThisKey="InputXsdFileGUID", OtherKey="ID", IsForeignKey=true)]
		public DbFile InputXsdFile
		{
			get
			{
				return this._InputXsdFile.Entity;
			}
			set
			{
				if ((this._InputXsdFile.Entity != value))
				{
					this.SendPropertyChanging();
					this._InputXsdFile.Entity = value;
					this.SendPropertyChanged("InputXsdFile");
				}
			}
		}
		
		[Association(Name="FK_INT_Command_OutputXsdFile", Storage="_OutputXsdFile", ThisKey="OutputXsdFileGUID", OtherKey="ID", IsForeignKey=true)]
		public DbFile OutputXsdFile
		{
			get
			{
				return this._OutputXsdFile.Entity;
			}
			set
			{
				if ((this._OutputXsdFile.Entity != value))
				{
					this.SendPropertyChanging();
					this._OutputXsdFile.Entity = value;
					this.SendPropertyChanged("OutputXsdFile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_INT_Handler(INT_Handler entity)
		{
			this.SendPropertyChanging();
			entity.Command = this;
		}
		
		private void detach_INT_Handler(INT_Handler entity)
		{
			this.SendPropertyChanging();
			entity.Command = null;
		}
		
		private void attach_INT_Log(INT_Log entity)
		{
			this.SendPropertyChanging();
			entity.Command = this;
		}
		
		private void detach_INT_Log(INT_Log entity)
		{
			this.SendPropertyChanging();
			entity.Command = null;
		}
	}
	
	[Table(Name="dbo.INT_Handler")]
	public partial class INT_Handler : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _HandlerGUID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private string _Class;
		
		private string _Method;
		
		private string _XPath;
		
		private int _SeqNo;
		
		private System.Guid _CommandGUID;
		
		private EntityRef<INT_Command> _Command;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHandlerGUIDChanging(System.Guid value);
    partial void OnHandlerGUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnClassChanging(string value);
    partial void OnClassChanged();
    partial void OnMethodChanging(string value);
    partial void OnMethodChanged();
    partial void OnXPathChanging(string value);
    partial void OnXPathChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnCommandGUIDChanging(System.Guid value);
    partial void OnCommandGUIDChanged();
    #endregion
		
		public INT_Handler()
		{
			this._Command = default(EntityRef<INT_Command>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_HandlerGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid HandlerGUID
		{
			get
			{
				return this._HandlerGUID;
			}
			set
			{
				if ((this._HandlerGUID != value))
				{
					this.OnHandlerGUIDChanging(value);
					this.SendPropertyChanging();
					this._HandlerGUID = value;
					this.SendPropertyChanged("HandlerGUID");
					this.OnHandlerGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Class", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}
		
		[Column(Storage="_Method", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}
		
		[Column(Storage="_XPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string XPath
		{
			get
			{
				return this._XPath;
			}
			set
			{
				if ((this._XPath != value))
				{
					this.OnXPathChanging(value);
					this.SendPropertyChanging();
					this._XPath = value;
					this.SendPropertyChanged("XPath");
					this.OnXPathChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_CommandGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid CommandGUID
		{
			get
			{
				return this._CommandGUID;
			}
			set
			{
				if ((this._CommandGUID != value))
				{
					if (this._Command.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommandGUIDChanging(value);
					this.SendPropertyChanging();
					this._CommandGUID = value;
					this.SendPropertyChanged("CommandGUID");
					this.OnCommandGUIDChanged();
				}
			}
		}
		
		[Association(Name="FK_INT_Handler_Command", Storage="_Command", ThisKey="CommandGUID", OtherKey="CommandGUID", IsForeignKey=true, DeleteOnNull=true)]
		public INT_Command Command
		{
			get
			{
				return this._Command.Entity;
			}
			set
			{
				INT_Command previousValue = this._Command.Entity;
				if (((previousValue != value) 
							|| (this._Command.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Command.Entity = null;
						previousValue.INT_Handler.Remove(this);
					}
					this._Command.Entity = value;
					if ((value != null))
					{
						value.INT_Handler.Add(this);
						this._CommandGUID = value.CommandGUID;
					}
					else
					{
						this._CommandGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Command");
				}
			}
		}
		
		[Association(Name="FK_INT_Handler_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.INT_Handler.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.INT_Handler.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.INT_Log")]
	public partial class INT_Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LogGUID;
		
		private System.Guid _SystemGUID;
		
		private System.Nullable<System.Guid> _CommandGUID;
		
		private System.DateTime _RequestDate;
		
		private string _RequestData;
		
		private string _ResponseData;
		
		private System.Nullable<System.DateTime> _ResponseDate;
		
		private System.Nullable<int> _ErrorLogID;
		
		private string _ErrorText;
		
		private string _Key;
		
		private System.Guid _CallingSystemGUID;
		
		private System.Nullable<System.DateTime> _CancelDate;
		
		private EntityRef<INT_System> _CallingSystem;
		
		private EntityRef<INT_Command> _Command;
		
		private EntityRef<INT_System> _System;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogGUIDChanging(System.Guid value);
    partial void OnLogGUIDChanged();
    partial void OnSystemGUIDChanging(System.Guid value);
    partial void OnSystemGUIDChanged();
    partial void OnCommandGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnCommandGUIDChanged();
    partial void OnRequestDateChanging(System.DateTime value);
    partial void OnRequestDateChanged();
    partial void OnRequestDataChanging(string value);
    partial void OnRequestDataChanged();
    partial void OnResponseDataChanging(string value);
    partial void OnResponseDataChanged();
    partial void OnResponseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnResponseDateChanged();
    partial void OnErrorLogIDChanging(System.Nullable<int> value);
    partial void OnErrorLogIDChanged();
    partial void OnErrorTextChanging(string value);
    partial void OnErrorTextChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnCallingSystemGUIDChanging(System.Guid value);
    partial void OnCallingSystemGUIDChanged();
    partial void OnCancelDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCancelDateChanged();
    #endregion
		
		public INT_Log()
		{
			this._CallingSystem = default(EntityRef<INT_System>);
			this._Command = default(EntityRef<INT_Command>);
			this._System = default(EntityRef<INT_System>);
			OnCreated();
		}
		
		[Column(Storage="_LogGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LogGUID
		{
			get
			{
				return this._LogGUID;
			}
			set
			{
				if ((this._LogGUID != value))
				{
					this.OnLogGUIDChanging(value);
					this.SendPropertyChanging();
					this._LogGUID = value;
					this.SendPropertyChanged("LogGUID");
					this.OnLogGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_SystemGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid SystemGUID
		{
			get
			{
				return this._SystemGUID;
			}
			set
			{
				if ((this._SystemGUID != value))
				{
					if (this._System.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemGUIDChanging(value);
					this.SendPropertyChanging();
					this._SystemGUID = value;
					this.SendPropertyChanged("SystemGUID");
					this.OnSystemGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_CommandGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> CommandGUID
		{
			get
			{
				return this._CommandGUID;
			}
			set
			{
				if ((this._CommandGUID != value))
				{
					if (this._Command.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommandGUIDChanging(value);
					this.SendPropertyChanging();
					this._CommandGUID = value;
					this.SendPropertyChanged("CommandGUID");
					this.OnCommandGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_RequestDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[Column(Storage="_RequestData", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RequestData
		{
			get
			{
				return this._RequestData;
			}
			set
			{
				if ((this._RequestData != value))
				{
					this.OnRequestDataChanging(value);
					this.SendPropertyChanging();
					this._RequestData = value;
					this.SendPropertyChanged("RequestData");
					this.OnRequestDataChanged();
				}
			}
		}
		
		[Column(Storage="_ResponseData", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ResponseData
		{
			get
			{
				return this._ResponseData;
			}
			set
			{
				if ((this._ResponseData != value))
				{
					this.OnResponseDataChanging(value);
					this.SendPropertyChanging();
					this._ResponseData = value;
					this.SendPropertyChanged("ResponseData");
					this.OnResponseDataChanged();
				}
			}
		}
		
		[Column(Storage="_ResponseDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ResponseDate
		{
			get
			{
				return this._ResponseDate;
			}
			set
			{
				if ((this._ResponseDate != value))
				{
					this.OnResponseDateChanging(value);
					this.SendPropertyChanging();
					this._ResponseDate = value;
					this.SendPropertyChanged("ResponseDate");
					this.OnResponseDateChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorLogID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ErrorLogID
		{
			get
			{
				return this._ErrorLogID;
			}
			set
			{
				if ((this._ErrorLogID != value))
				{
					this.OnErrorLogIDChanging(value);
					this.SendPropertyChanging();
					this._ErrorLogID = value;
					this.SendPropertyChanged("ErrorLogID");
					this.OnErrorLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorText", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ErrorText
		{
			get
			{
				return this._ErrorText;
			}
			set
			{
				if ((this._ErrorText != value))
				{
					this.OnErrorTextChanging(value);
					this.SendPropertyChanging();
					this._ErrorText = value;
					this.SendPropertyChanged("ErrorText");
					this.OnErrorTextChanged();
				}
			}
		}
		
		[Column(Storage="_Key", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[Column(Storage="_CallingSystemGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid CallingSystemGUID
		{
			get
			{
				return this._CallingSystemGUID;
			}
			set
			{
				if ((this._CallingSystemGUID != value))
				{
					if (this._CallingSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCallingSystemGUIDChanging(value);
					this.SendPropertyChanging();
					this._CallingSystemGUID = value;
					this.SendPropertyChanged("CallingSystemGUID");
					this.OnCallingSystemGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_CancelDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CancelDate
		{
			get
			{
				return this._CancelDate;
			}
			set
			{
				if ((this._CancelDate != value))
				{
					this.OnCancelDateChanging(value);
					this.SendPropertyChanging();
					this._CancelDate = value;
					this.SendPropertyChanged("CancelDate");
					this.OnCancelDateChanged();
				}
			}
		}
		
		[Association(Name="FK_INT_Log_CallingSystem", Storage="_CallingSystem", ThisKey="CallingSystemGUID", OtherKey="SystemGUID", IsForeignKey=true)]
		public INT_System CallingSystem
		{
			get
			{
				return this._CallingSystem.Entity;
			}
			set
			{
				INT_System previousValue = this._CallingSystem.Entity;
				if (((previousValue != value) 
							|| (this._CallingSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CallingSystem.Entity = null;
						previousValue.INT_Log.Remove(this);
					}
					this._CallingSystem.Entity = value;
					if ((value != null))
					{
						value.INT_Log.Add(this);
						this._CallingSystemGUID = value.SystemGUID;
					}
					else
					{
						this._CallingSystemGUID = default(System.Guid);
					}
					this.SendPropertyChanged("CallingSystem");
				}
			}
		}
		
		[Association(Name="FK_INT_Log_Command", Storage="_Command", ThisKey="CommandGUID", OtherKey="CommandGUID", IsForeignKey=true)]
		public INT_Command Command
		{
			get
			{
				return this._Command.Entity;
			}
			set
			{
				INT_Command previousValue = this._Command.Entity;
				if (((previousValue != value) 
							|| (this._Command.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Command.Entity = null;
						previousValue.INT_Log.Remove(this);
					}
					this._Command.Entity = value;
					if ((value != null))
					{
						value.INT_Log.Add(this);
						this._CommandGUID = value.CommandGUID;
					}
					else
					{
						this._CommandGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Command");
				}
			}
		}
		
		[Association(Name="FK_INT_Log_System", Storage="_System", ThisKey="SystemGUID", OtherKey="SystemGUID", IsForeignKey=true)]
		public INT_System System
		{
			get
			{
				return this._System.Entity;
			}
			set
			{
				INT_System previousValue = this._System.Entity;
				if (((previousValue != value) 
							|| (this._System.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._System.Entity = null;
						previousValue.SystemGU.Remove(this);
					}
					this._System.Entity = value;
					if ((value != null))
					{
						value.SystemGU.Add(this);
						this._SystemGUID = value.SystemGUID;
					}
					else
					{
						this._SystemGUID = default(System.Guid);
					}
					this.SendPropertyChanged("System");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.INT_System")]
	public partial class INT_System : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SystemGUID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private string _SysName;
		
		private string _WebServiceUrl;
		
		private bool _IsCurrent;
		
		private EntitySet<INT_Command> _INT_Command;
		
		private EntitySet<INT_Log> _INT_Log;
		
		private EntitySet<INT_Log> _SystemGU;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSystemGUIDChanging(System.Guid value);
    partial void OnSystemGUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnWebServiceUrlChanging(string value);
    partial void OnWebServiceUrlChanged();
    partial void OnIsCurrentChanging(bool value);
    partial void OnIsCurrentChanged();
    #endregion
		
		public INT_System()
		{
			this._INT_Command = new EntitySet<INT_Command>(new Action<INT_Command>(this.attach_INT_Command), new Action<INT_Command>(this.detach_INT_Command));
			this._INT_Log = new EntitySet<INT_Log>(new Action<INT_Log>(this.attach_INT_Log), new Action<INT_Log>(this.detach_INT_Log));
			this._SystemGU = new EntitySet<INT_Log>(new Action<INT_Log>(this.attach_SystemGU), new Action<INT_Log>(this.detach_SystemGU));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_SystemGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SystemGUID
		{
			get
			{
				return this._SystemGUID;
			}
			set
			{
				if ((this._SystemGUID != value))
				{
					this.OnSystemGUIDChanging(value);
					this.SendPropertyChanging();
					this._SystemGUID = value;
					this.SendPropertyChanged("SystemGUID");
					this.OnSystemGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_WebServiceUrl", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string WebServiceUrl
		{
			get
			{
				return this._WebServiceUrl;
			}
			set
			{
				if ((this._WebServiceUrl != value))
				{
					this.OnWebServiceUrlChanging(value);
					this.SendPropertyChanging();
					this._WebServiceUrl = value;
					this.SendPropertyChanged("WebServiceUrl");
					this.OnWebServiceUrlChanged();
				}
			}
		}
		
		[Column(Storage="_IsCurrent", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsCurrent
		{
			get
			{
				return this._IsCurrent;
			}
			set
			{
				if ((this._IsCurrent != value))
				{
					this.OnIsCurrentChanging(value);
					this.SendPropertyChanging();
					this._IsCurrent = value;
					this.SendPropertyChanged("IsCurrent");
					this.OnIsCurrentChanged();
				}
			}
		}
		
		[Association(Name="FK_INT_Command_System", Storage="_INT_Command", ThisKey="SystemGUID", OtherKey="SystemGUID", DeleteRule="CASCADE")]
		public EntitySet<INT_Command> INT_Command
		{
			get
			{
				return this._INT_Command;
			}
			set
			{
				this._INT_Command.Assign(value);
			}
		}
		
		[Association(Name="FK_INT_Log_CallingSystem", Storage="_INT_Log", ThisKey="SystemGUID", OtherKey="CallingSystemGUID", DeleteRule="NO ACTION")]
		public EntitySet<INT_Log> INT_Log
		{
			get
			{
				return this._INT_Log;
			}
			set
			{
				this._INT_Log.Assign(value);
			}
		}
		
		[Association(Name="FK_INT_Log_System", Storage="_SystemGU", ThisKey="SystemGUID", OtherKey="SystemGUID", DeleteRule="NO ACTION")]
		public EntitySet<INT_Log> SystemGU
		{
			get
			{
				return this._SystemGU;
			}
			set
			{
				this._SystemGU.Assign(value);
			}
		}
		
		[Association(Name="FK_INT_System_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.INT_System.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.INT_System.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_INT_Command(INT_Command entity)
		{
			this.SendPropertyChanging();
			entity.System = this;
		}
		
		private void detach_INT_Command(INT_Command entity)
		{
			this.SendPropertyChanging();
			entity.System = null;
		}
		
		private void attach_INT_Log(INT_Log entity)
		{
			this.SendPropertyChanging();
			entity.CallingSystem = this;
		}
		
		private void detach_INT_Log(INT_Log entity)
		{
			this.SendPropertyChanging();
			entity.CallingSystem = null;
		}
		
		private void attach_SystemGU(INT_Log entity)
		{
			this.SendPropertyChanging();
			entity.System = this;
		}
		
		private void detach_SystemGU(INT_Log entity)
		{
			this.SendPropertyChanging();
			entity.System = null;
		}
	}
	
	[Table(Name="dbo.Letter")]
	public partial class Letter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LetterGUID;
		
		private System.Guid _OrderDocGUID;
		
		private System.DateTime _CreateDate;
		
		private char _Type;
		
		private string _Body;
		
		private bool _IsDeleted;
		
		private bool _IsSigned;
		
		private string _XmlData;
		
		private string _Comments;
		
		private EntityRef<OrderDoc> _OrderDoc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLetterGUIDChanging(System.Guid value);
    partial void OnLetterGUIDChanged();
    partial void OnOrderDocGUIDChanging(System.Guid value);
    partial void OnOrderDocGUIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnTypeChanging(char value);
    partial void OnTypeChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnIsSignedChanging(bool value);
    partial void OnIsSignedChanged();
    partial void OnXmlDataChanging(string value);
    partial void OnXmlDataChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public Letter()
		{
			this._OrderDoc = default(EntityRef<OrderDoc>);
			OnCreated();
		}
		
		[Column(Storage="_LetterGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LetterGUID
		{
			get
			{
				return this._LetterGUID;
			}
			set
			{
				if ((this._LetterGUID != value))
				{
					this.OnLetterGUIDChanging(value);
					this.SendPropertyChanging();
					this._LetterGUID = value;
					this.SendPropertyChanged("LetterGUID");
					this.OnLetterGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDocGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_IsSigned", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSigned
		{
			get
			{
				return this._IsSigned;
			}
			set
			{
				if ((this._IsSigned != value))
				{
					this.OnIsSignedChanging(value);
					this.SendPropertyChanging();
					this._IsSigned = value;
					this.SendPropertyChanged("IsSigned");
					this.OnIsSignedChanged();
				}
			}
		}
		
		[Column(Storage="_XmlData", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string XmlData
		{
			get
			{
				return this._XmlData;
			}
			set
			{
				if ((this._XmlData != value))
				{
					this.OnXmlDataChanging(value);
					this.SendPropertyChanging();
					this._XmlData = value;
					this.SendPropertyChanged("XmlData");
					this.OnXmlDataChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Association(Name="FK_Letter_OrderDoc", Storage="_OrderDoc", ThisKey="OrderDocGUID", OtherKey="OrderGUID", IsForeignKey=true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value) 
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.Letter.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.Letter.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LicenseExecution")]
	public partial class LicenseExecution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LicenseExecutionGUID;
		
		private System.Guid _OrderDocGUID;
		
		private System.Nullable<System.DateTime> _InfoGivenDate;
		
		private System.Nullable<System.DateTime> _ReportingPeriodStartDate;
		
		private System.Nullable<System.DateTime> _ReportingPeriodEndDate;
		
		private string _DeclarationNumbers;
		
		private System.Nullable<decimal> _ShippedCommodityCount;
		
		private System.Nullable<int> _MeasureID;
		
		private string _AdditionalInfo;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private char _Type;
		
		private bool _IsSent;
		
		private bool _IsSigned;
		
		private string _XmlData;
		
		private System.Nullable<System.Guid> _FileExGUID;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<C_Measure> _Measure;
		
		private EntityRef<OrderDoc> _OrderDoc;
		
		private EntityRef<DbFile> _FileEx;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLicenseExecutionGUIDChanging(System.Guid value);
    partial void OnLicenseExecutionGUIDChanged();
    partial void OnOrderDocGUIDChanging(System.Guid value);
    partial void OnOrderDocGUIDChanged();
    partial void OnInfoGivenDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInfoGivenDateChanged();
    partial void OnReportingPeriodStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReportingPeriodStartDateChanged();
    partial void OnReportingPeriodEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReportingPeriodEndDateChanged();
    partial void OnDeclarationNumbersChanging(string value);
    partial void OnDeclarationNumbersChanged();
    partial void OnShippedCommodityCountChanging(System.Nullable<decimal> value);
    partial void OnShippedCommodityCountChanged();
    partial void OnMeasureIDChanging(System.Nullable<int> value);
    partial void OnMeasureIDChanged();
    partial void OnAdditionalInfoChanging(string value);
    partial void OnAdditionalInfoChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnTypeChanging(char value);
    partial void OnTypeChanged();
    partial void OnIsSentChanging(bool value);
    partial void OnIsSentChanged();
    partial void OnIsSignedChanging(bool value);
    partial void OnIsSignedChanged();
    partial void OnXmlDataChanging(string value);
    partial void OnXmlDataChanged();
    partial void OnFileExGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFileExGUIDChanged();
    #endregion
		
		public LicenseExecution()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Measure = default(EntityRef<C_Measure>);
			this._OrderDoc = default(EntityRef<OrderDoc>);
			this._FileEx = default(EntityRef<DbFile>);
			OnCreated();
		}
		
		[Column(Storage="_LicenseExecutionGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LicenseExecutionGUID
		{
			get
			{
				return this._LicenseExecutionGUID;
			}
			set
			{
				if ((this._LicenseExecutionGUID != value))
				{
					this.OnLicenseExecutionGUIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseExecutionGUID = value;
					this.SendPropertyChanged("LicenseExecutionGUID");
					this.OnLicenseExecutionGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDocGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_InfoGivenDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> InfoGivenDate
		{
			get
			{
				return this._InfoGivenDate;
			}
			set
			{
				if ((this._InfoGivenDate != value))
				{
					this.OnInfoGivenDateChanging(value);
					this.SendPropertyChanging();
					this._InfoGivenDate = value;
					this.SendPropertyChanged("InfoGivenDate");
					this.OnInfoGivenDateChanged();
				}
			}
		}
		
		[Column(Storage="_ReportingPeriodStartDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ReportingPeriodStartDate
		{
			get
			{
				return this._ReportingPeriodStartDate;
			}
			set
			{
				if ((this._ReportingPeriodStartDate != value))
				{
					this.OnReportingPeriodStartDateChanging(value);
					this.SendPropertyChanging();
					this._ReportingPeriodStartDate = value;
					this.SendPropertyChanged("ReportingPeriodStartDate");
					this.OnReportingPeriodStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_ReportingPeriodEndDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ReportingPeriodEndDate
		{
			get
			{
				return this._ReportingPeriodEndDate;
			}
			set
			{
				if ((this._ReportingPeriodEndDate != value))
				{
					this.OnReportingPeriodEndDateChanging(value);
					this.SendPropertyChanging();
					this._ReportingPeriodEndDate = value;
					this.SendPropertyChanged("ReportingPeriodEndDate");
					this.OnReportingPeriodEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeclarationNumbers", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DeclarationNumbers
		{
			get
			{
				return this._DeclarationNumbers;
			}
			set
			{
				if ((this._DeclarationNumbers != value))
				{
					this.OnDeclarationNumbersChanging(value);
					this.SendPropertyChanging();
					this._DeclarationNumbers = value;
					this.SendPropertyChanged("DeclarationNumbers");
					this.OnDeclarationNumbersChanged();
				}
			}
		}
		
		[Column(Storage="_ShippedCommodityCount", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ShippedCommodityCount
		{
			get
			{
				return this._ShippedCommodityCount;
			}
			set
			{
				if ((this._ShippedCommodityCount != value))
				{
					this.OnShippedCommodityCountChanging(value);
					this.SendPropertyChanging();
					this._ShippedCommodityCount = value;
					this.SendPropertyChanged("ShippedCommodityCount");
					this.OnShippedCommodityCountChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					if (this._Measure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_AdditionalInfo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string AdditionalInfo
		{
			get
			{
				return this._AdditionalInfo;
			}
			set
			{
				if ((this._AdditionalInfo != value))
				{
					this.OnAdditionalInfoChanging(value);
					this.SendPropertyChanging();
					this._AdditionalInfo = value;
					this.SendPropertyChanged("AdditionalInfo");
					this.OnAdditionalInfoChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_IsSent", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSent
		{
			get
			{
				return this._IsSent;
			}
			set
			{
				if ((this._IsSent != value))
				{
					this.OnIsSentChanging(value);
					this.SendPropertyChanging();
					this._IsSent = value;
					this.SendPropertyChanged("IsSent");
					this.OnIsSentChanged();
				}
			}
		}
		
		[Column(Storage="_IsSigned", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSigned
		{
			get
			{
				return this._IsSigned;
			}
			set
			{
				if ((this._IsSigned != value))
				{
					this.OnIsSignedChanging(value);
					this.SendPropertyChanging();
					this._IsSigned = value;
					this.SendPropertyChanged("IsSigned");
					this.OnIsSignedChanged();
				}
			}
		}
		
		[Column(Storage="_XmlData", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string XmlData
		{
			get
			{
				return this._XmlData;
			}
			set
			{
				if ((this._XmlData != value))
				{
					this.OnXmlDataChanging(value);
					this.SendPropertyChanging();
					this._XmlData = value;
					this.SendPropertyChanged("XmlData");
					this.OnXmlDataChanged();
				}
			}
		}
		
		[Column(Storage="_FileExGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileExGUID
		{
			get
			{
				return this._FileExGUID;
			}
			set
			{
				if ((this._FileExGUID != value))
				{
					if (this._FileEx.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileExGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileExGUID = value;
					this.SendPropertyChanged("FileExGUID");
					this.OnFileExGUIDChanged();
				}
			}
		}
		
		[Association(Name="FK_LicenseExecution_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.LicenseExecution.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.LicenseExecution.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_LicenseExecution_Measure", Storage="_Measure", ThisKey="MeasureID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure Measure
		{
			get
			{
				return this._Measure.Entity;
			}
			set
			{
				C_Measure previousValue = this._Measure.Entity;
				if (((previousValue != value) 
							|| (this._Measure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure.Entity = null;
						previousValue.LicenseExecution.Remove(this);
					}
					this._Measure.Entity = value;
					if ((value != null))
					{
						value.LicenseExecution.Add(this);
						this._MeasureID = value.MeasureID;
					}
					else
					{
						this._MeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Measure");
				}
			}
		}
		
		[Association(Name="FK_LicenseExecution_OrderDoc", Storage="_OrderDoc", ThisKey="OrderDocGUID", OtherKey="OrderGUID", IsForeignKey=true, DeleteOnNull=true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value) 
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.Execution.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.Execution.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}
		
		[Association(Name="FK_LicenseExecution_FileEx", Storage="_FileEx", ThisKey="FileExGUID", OtherKey="ID", IsForeignKey=true)]
		public DbFile FileEx
		{
			get
			{
				return this._FileEx.Entity;
			}
			set
			{
				if ((this._FileEx.Entity != value))
				{
					this.SendPropertyChanging();
					this._FileEx.Entity = value;
					this.SendPropertyChanged("FileEx");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MailMessage")]
	public partial class MailMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MailMessageID;
		
		private string _Recipients;
		
		private string _Subject;
		
		private string _Body;
		
		private bool _IsSent;
		
		private System.Data.Linq.Binary _Attachment;
		
		private string _AttachmentName;
		
		private string _Error;
		
		private string _CopyRecipients;
		
		private System.Nullable<System.DateTime> _LastSendAttemptDate;
		
		private int _AttemptsToSendCount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMailMessageIDChanging(int value);
    partial void OnMailMessageIDChanged();
    partial void OnRecipientsChanging(string value);
    partial void OnRecipientsChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnIsSentChanging(bool value);
    partial void OnIsSentChanged();
    partial void OnAttachmentChanging(System.Data.Linq.Binary value);
    partial void OnAttachmentChanged();
    partial void OnAttachmentNameChanging(string value);
    partial void OnAttachmentNameChanged();
    partial void OnErrorChanging(string value);
    partial void OnErrorChanged();
    partial void OnCopyRecipientsChanging(string value);
    partial void OnCopyRecipientsChanged();
    partial void OnLastSendAttemptDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastSendAttemptDateChanged();
    partial void OnAttemptsToSendCountChanging(int value);
    partial void OnAttemptsToSendCountChanged();
    #endregion
		
		public MailMessage()
		{
			OnCreated();
		}
		
		[Column(Storage="_MailMessageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MailMessageID
		{
			get
			{
				return this._MailMessageID;
			}
			set
			{
				if ((this._MailMessageID != value))
				{
					this.OnMailMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MailMessageID = value;
					this.SendPropertyChanged("MailMessageID");
					this.OnMailMessageIDChanged();
				}
			}
		}
		
		[Column(Storage="_Recipients", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Recipients
		{
			get
			{
				return this._Recipients;
			}
			set
			{
				if ((this._Recipients != value))
				{
					this.OnRecipientsChanging(value);
					this.SendPropertyChanging();
					this._Recipients = value;
					this.SendPropertyChanged("Recipients");
					this.OnRecipientsChanged();
				}
			}
		}
		
		[Column(Storage="_Subject", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_IsSent", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSent
		{
			get
			{
				return this._IsSent;
			}
			set
			{
				if ((this._IsSent != value))
				{
					this.OnIsSentChanging(value);
					this.SendPropertyChanging();
					this._IsSent = value;
					this.SendPropertyChanged("IsSent");
					this.OnIsSentChanged();
				}
			}
		}
		
		[Column(Storage="_Attachment", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Attachment
		{
			get
			{
				return this._Attachment;
			}
			set
			{
				if ((this._Attachment != value))
				{
					this.OnAttachmentChanging(value);
					this.SendPropertyChanging();
					this._Attachment = value;
					this.SendPropertyChanged("Attachment");
					this.OnAttachmentChanged();
				}
			}
		}
		
		[Column(Storage="_AttachmentName", DbType="NVarChar(1024)", UpdateCheck=UpdateCheck.Never)]
		public string AttachmentName
		{
			get
			{
				return this._AttachmentName;
			}
			set
			{
				if ((this._AttachmentName != value))
				{
					this.OnAttachmentNameChanging(value);
					this.SendPropertyChanging();
					this._AttachmentName = value;
					this.SendPropertyChanged("AttachmentName");
					this.OnAttachmentNameChanged();
				}
			}
		}
		
		[Column(Storage="_Error", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Error
		{
			get
			{
				return this._Error;
			}
			set
			{
				if ((this._Error != value))
				{
					this.OnErrorChanging(value);
					this.SendPropertyChanging();
					this._Error = value;
					this.SendPropertyChanged("Error");
					this.OnErrorChanged();
				}
			}
		}
		
		[Column(Storage="_CopyRecipients", DbType="NVarChar(1024)", UpdateCheck=UpdateCheck.Never)]
		public string CopyRecipients
		{
			get
			{
				return this._CopyRecipients;
			}
			set
			{
				if ((this._CopyRecipients != value))
				{
					this.OnCopyRecipientsChanging(value);
					this.SendPropertyChanging();
					this._CopyRecipients = value;
					this.SendPropertyChanged("CopyRecipients");
					this.OnCopyRecipientsChanged();
				}
			}
		}
		
		[Column(Storage="_LastSendAttemptDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastSendAttemptDate
		{
			get
			{
				return this._LastSendAttemptDate;
			}
			set
			{
				if ((this._LastSendAttemptDate != value))
				{
					this.OnLastSendAttemptDateChanging(value);
					this.SendPropertyChanging();
					this._LastSendAttemptDate = value;
					this.SendPropertyChanged("LastSendAttemptDate");
					this.OnLastSendAttemptDateChanged();
				}
			}
		}
		
		[Column(Storage="_AttemptsToSendCount", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AttemptsToSendCount
		{
			get
			{
				return this._AttemptsToSendCount;
			}
			set
			{
				if ((this._AttemptsToSendCount != value))
				{
					this.OnAttemptsToSendCountChanging(value);
					this.SendPropertyChanging();
					this._AttemptsToSendCount = value;
					this.SendPropertyChanged("AttemptsToSendCount");
					this.OnAttemptsToSendCountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MailTemplate")]
	public partial class MailTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MailTemplateID;
		
		private string _Title;
		
		private string _TemplateSubject;
		
		private string _TemplateBody;
		
		private string _Comment;
		
		private bool _IsSystem;
		
		private bool _IsDeleted;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMailTemplateIDChanging(int value);
    partial void OnMailTemplateIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTemplateSubjectChanging(string value);
    partial void OnTemplateSubjectChanged();
    partial void OnTemplateBodyChanging(string value);
    partial void OnTemplateBodyChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnIsSystemChanging(bool value);
    partial void OnIsSystemChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public MailTemplate()
		{
			OnCreated();
		}
		
		[Column(Storage="_MailTemplateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MailTemplateID
		{
			get
			{
				return this._MailTemplateID;
			}
			set
			{
				if ((this._MailTemplateID != value))
				{
					this.OnMailTemplateIDChanging(value);
					this.SendPropertyChanging();
					this._MailTemplateID = value;
					this.SendPropertyChanged("MailTemplateID");
					this.OnMailTemplateIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_TemplateSubject", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TemplateSubject
		{
			get
			{
				return this._TemplateSubject;
			}
			set
			{
				if ((this._TemplateSubject != value))
				{
					this.OnTemplateSubjectChanging(value);
					this.SendPropertyChanging();
					this._TemplateSubject = value;
					this.SendPropertyChanged("TemplateSubject");
					this.OnTemplateSubjectChanged();
				}
			}
		}
		
		[Column(Storage="_TemplateBody", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TemplateBody
		{
			get
			{
				return this._TemplateBody;
			}
			set
			{
				if ((this._TemplateBody != value))
				{
					this.OnTemplateBodyChanging(value);
					this.SendPropertyChanging();
					this._TemplateBody = value;
					this.SendPropertyChanged("TemplateBody");
					this.OnTemplateBodyChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_IsSystem", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSystem
		{
			get
			{
				return this._IsSystem;
			}
			set
			{
				if ((this._IsSystem != value))
				{
					this.OnIsSystemChanging(value);
					this.SendPropertyChanging();
					this._IsSystem = value;
					this.SendPropertyChanged("IsSystem");
					this.OnIsSystemChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MM_Codifier")]
	public partial class MM_Codifier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodifierID;
		
		private string _Title;
		
		private string _SysName;
		
		private int _PackageID;
		
		private System.Guid _Guid;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<MM_Package> _Package;
		
		private EntitySet<MM_CodifierValue> _Values;
		
		private EntitySet<MM_ObjectProperty> _MM_ObjectProperty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodifierIDChanging(int value);
    partial void OnCodifierIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnPackageIDChanging(int value);
    partial void OnPackageIDChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    #endregion
		
		public MM_Codifier()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Package = default(EntityRef<MM_Package>);
			this._Values = new EntitySet<MM_CodifierValue>(new Action<MM_CodifierValue>(this.attach_Values), new Action<MM_CodifierValue>(this.detach_Values));
			this._MM_ObjectProperty = new EntitySet<MM_ObjectProperty>(new Action<MM_ObjectProperty>(this.attach_MM_ObjectProperty), new Action<MM_ObjectProperty>(this.detach_MM_ObjectProperty));
			OnCreated();
		}
		
		[Column(Storage="_CodifierID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodifierID
		{
			get
			{
				return this._CodifierID;
			}
			set
			{
				if ((this._CodifierID != value))
				{
					this.OnCodifierIDChanging(value);
					this.SendPropertyChanging();
					this._CodifierID = value;
					this.SendPropertyChanged("CodifierID");
					this.OnCodifierIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_PackageID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Association(Name="FK_MM_Codifier_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_Codifier.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_Codifier.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_MM_Codifier_Package", Storage="_Package", ThisKey="PackageID", OtherKey="PackageID", IsForeignKey=true)]
		public MM_Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				MM_Package previousValue = this._Package.Entity;
				if (((previousValue != value) 
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.Codifiers.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.Codifiers.Add(this);
						this._PackageID = value.PackageID;
					}
					else
					{
						this._PackageID = default(int);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}
		
		[Association(Name="FK_MM_CodifierValue_Codifier", Storage="_Values", ThisKey="CodifierID", OtherKey="CodifierID", DeleteRule="CASCADE")]
		public EntitySet<MM_CodifierValue> Values
		{
			get
			{
				return this._Values;
			}
			set
			{
				this._Values.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_ObjectProperty_Codifier", Storage="_MM_ObjectProperty", ThisKey="CodifierID", OtherKey="CodifierID", DeleteRule="NO ACTION")]
		public EntitySet<MM_ObjectProperty> MM_ObjectProperty
		{
			get
			{
				return this._MM_ObjectProperty;
			}
			set
			{
				this._MM_ObjectProperty.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Values(MM_CodifierValue entity)
		{
			this.SendPropertyChanging();
			entity.Codifier = this;
		}
		
		private void detach_Values(MM_CodifierValue entity)
		{
			this.SendPropertyChanging();
			entity.Codifier = null;
		}
		
		private void attach_MM_ObjectProperty(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.Codifier = this;
		}
		
		private void detach_MM_ObjectProperty(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.Codifier = null;
		}
	}
	
	[Table(Name="dbo.MM_CodifierValue")]
	public partial class MM_CodifierValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodifierValueID;
		
		private int _CodifierID;
		
		private string _Title;
		
		private char _Code;
		
		private string _SysName;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private int _SeqNo;
		
		private EntityRef<MM_Codifier> _Codifier;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodifierValueIDChanging(int value);
    partial void OnCodifierValueIDChanged();
    partial void OnCodifierIDChanging(int value);
    partial void OnCodifierIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCodeChanging(char value);
    partial void OnCodeChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    #endregion
		
		public MM_CodifierValue()
		{
			this._Codifier = default(EntityRef<MM_Codifier>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_CodifierValueID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodifierValueID
		{
			get
			{
				return this._CodifierValueID;
			}
			set
			{
				if ((this._CodifierValueID != value))
				{
					this.OnCodifierValueIDChanging(value);
					this.SendPropertyChanging();
					this._CodifierValueID = value;
					this.SendPropertyChanged("CodifierValueID");
					this.OnCodifierValueIDChanged();
				}
			}
		}
		
		[Column(Storage="_CodifierID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CodifierID
		{
			get
			{
				return this._CodifierID;
			}
			set
			{
				if ((this._CodifierID != value))
				{
					if (this._Codifier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodifierIDChanging(value);
					this.SendPropertyChanging();
					this._CodifierID = value;
					this.SendPropertyChanged("CodifierID");
					this.OnCodifierIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Association(Name="FK_MM_CodifierValue_Codifier", Storage="_Codifier", ThisKey="CodifierID", OtherKey="CodifierID", IsForeignKey=true, DeleteOnNull=true)]
		public MM_Codifier Codifier
		{
			get
			{
				return this._Codifier.Entity;
			}
			set
			{
				MM_Codifier previousValue = this._Codifier.Entity;
				if (((previousValue != value) 
							|| (this._Codifier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Codifier.Entity = null;
						previousValue.Values.Remove(this);
					}
					this._Codifier.Entity = value;
					if ((value != null))
					{
						value.Values.Add(this);
						this._CodifierID = value.CodifierID;
					}
					else
					{
						this._CodifierID = default(int);
					}
					this.SendPropertyChanged("Codifier");
				}
			}
		}
		
		[Association(Name="FK_MM_CodifierValue_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_CodifierValue.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_CodifierValue.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MM_DataValidation")]
	public partial class MM_DataValidation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DataValidationID;
		
		private int _ObjectTypeID;
		
		private string _Expression;
		
		private string _DesignerData;
		
		private string _Message;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<MM_ObjectType> _ObjectType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataValidationIDChanging(int value);
    partial void OnDataValidationIDChanged();
    partial void OnObjectTypeIDChanging(int value);
    partial void OnObjectTypeIDChanged();
    partial void OnExpressionChanging(string value);
    partial void OnExpressionChanged();
    partial void OnDesignerDataChanging(string value);
    partial void OnDesignerDataChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    #endregion
		
		public MM_DataValidation()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ObjectType = default(EntityRef<MM_ObjectType>);
			OnCreated();
		}
		
		[Column(Storage="_DataValidationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DataValidationID
		{
			get
			{
				return this._DataValidationID;
			}
			set
			{
				if ((this._DataValidationID != value))
				{
					this.OnDataValidationIDChanging(value);
					this.SendPropertyChanging();
					this._DataValidationID = value;
					this.SendPropertyChanged("DataValidationID");
					this.OnDataValidationIDChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Expression", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Expression
		{
			get
			{
				return this._Expression;
			}
			set
			{
				if ((this._Expression != value))
				{
					this.OnExpressionChanging(value);
					this.SendPropertyChanging();
					this._Expression = value;
					this.SendPropertyChanged("Expression");
					this.OnExpressionChanged();
				}
			}
		}
		
		[Column(Storage="_DesignerData", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string DesignerData
		{
			get
			{
				return this._DesignerData;
			}
			set
			{
				if ((this._DesignerData != value))
				{
					this.OnDesignerDataChanging(value);
					this.SendPropertyChanging();
					this._DesignerData = value;
					this.SendPropertyChanged("DesignerData");
					this.OnDesignerDataChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Association(Name="FK_MM_DataValidation_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_DataValidation.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_DataValidation.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_MM_DataValidation_ObjectType", Storage="_ObjectType", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", IsForeignKey=true)]
		public MM_ObjectType ObjectType
		{
			get
			{
				return this._ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._ObjectType.Entity;
				if (((previousValue != value) 
							|| (this._ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectType.Entity = null;
						previousValue.MM_DataValidation.Remove(this);
					}
					this._ObjectType.Entity = value;
					if ((value != null))
					{
						value.MM_DataValidation.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(int);
					}
					this.SendPropertyChanged("ObjectType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MM_FormField")]
	public partial class MM_FormField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FormFieldID;
		
		private int _ObjectPropertyID;
		
		private System.Nullable<int> _ControlName;
		
		private string _Title;
		
		private string _DefaultValue;
		
		private string _Comment;
		
		private System.Nullable<int> _FormFieldGroupID;
		
		private bool _ShowInList;
		
		private bool _ShowInEdit;
		
		private bool _ShowInView;
		
		private string _ValueFunction;
		
		private int _SeqNo;
		
		private string _ListColumnWidth;
		
		private bool _ValueFunctionExecType;
		
		private string _SortExpression;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private EntityRef<MM_FormFieldGroup> _FormFieldGroup;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<MM_ObjectProperty> _ObjectProperty;
		
		private EntitySet<MM_FormFieldAttribute> _Attributes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormFieldIDChanging(int value);
    partial void OnFormFieldIDChanged();
    partial void OnObjectPropertyIDChanging(int value);
    partial void OnObjectPropertyIDChanged();
    partial void OnControlNameChanging(System.Nullable<int> value);
    partial void OnControlNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnFormFieldGroupIDChanging(System.Nullable<int> value);
    partial void OnFormFieldGroupIDChanged();
    partial void OnShowInListChanging(bool value);
    partial void OnShowInListChanged();
    partial void OnShowInEditChanging(bool value);
    partial void OnShowInEditChanged();
    partial void OnShowInViewChanging(bool value);
    partial void OnShowInViewChanged();
    partial void OnValueFunctionChanging(string value);
    partial void OnValueFunctionChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnListColumnWidthChanging(string value);
    partial void OnListColumnWidthChanged();
    partial void OnValueFunctionExecTypeChanging(bool value);
    partial void OnValueFunctionExecTypeChanged();
    partial void OnSortExpressionChanging(string value);
    partial void OnSortExpressionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    #endregion
		
		public MM_FormField()
		{
			this._FormFieldGroup = default(EntityRef<MM_FormFieldGroup>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ObjectProperty = default(EntityRef<MM_ObjectProperty>);
			this._Attributes = new EntitySet<MM_FormFieldAttribute>(new Action<MM_FormFieldAttribute>(this.attach_Attributes), new Action<MM_FormFieldAttribute>(this.detach_Attributes));
			OnCreated();
		}
		
		[Column(Storage="_FormFieldID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FormFieldID
		{
			get
			{
				return this._FormFieldID;
			}
			set
			{
				if ((this._FormFieldID != value))
				{
					this.OnFormFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FormFieldID = value;
					this.SendPropertyChanged("FormFieldID");
					this.OnFormFieldIDChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectPropertyID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ObjectPropertyID
		{
			get
			{
				return this._ObjectPropertyID;
			}
			set
			{
				if ((this._ObjectPropertyID != value))
				{
					if (this._ObjectProperty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectPropertyID = value;
					this.SendPropertyChanged("ObjectPropertyID");
					this.OnObjectPropertyIDChanged();
				}
			}
		}
		
		[Column(Storage="_ControlName", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ControlName
		{
			get
			{
				return this._ControlName;
			}
			set
			{
				if ((this._ControlName != value))
				{
					this.OnControlNameChanging(value);
					this.SendPropertyChanging();
					this._ControlName = value;
					this.SendPropertyChanged("ControlName");
					this.OnControlNameChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(1024)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_DefaultValue", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(1024)", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_FormFieldGroupID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FormFieldGroupID
		{
			get
			{
				return this._FormFieldGroupID;
			}
			set
			{
				if ((this._FormFieldGroupID != value))
				{
					if (this._FormFieldGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormFieldGroupIDChanging(value);
					this.SendPropertyChanging();
					this._FormFieldGroupID = value;
					this.SendPropertyChanged("FormFieldGroupID");
					this.OnFormFieldGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShowInList", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool ShowInList
		{
			get
			{
				return this._ShowInList;
			}
			set
			{
				if ((this._ShowInList != value))
				{
					this.OnShowInListChanging(value);
					this.SendPropertyChanging();
					this._ShowInList = value;
					this.SendPropertyChanged("ShowInList");
					this.OnShowInListChanged();
				}
			}
		}
		
		[Column(Storage="_ShowInEdit", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool ShowInEdit
		{
			get
			{
				return this._ShowInEdit;
			}
			set
			{
				if ((this._ShowInEdit != value))
				{
					this.OnShowInEditChanging(value);
					this.SendPropertyChanging();
					this._ShowInEdit = value;
					this.SendPropertyChanged("ShowInEdit");
					this.OnShowInEditChanged();
				}
			}
		}
		
		[Column(Storage="_ShowInView", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool ShowInView
		{
			get
			{
				return this._ShowInView;
			}
			set
			{
				if ((this._ShowInView != value))
				{
					this.OnShowInViewChanging(value);
					this.SendPropertyChanging();
					this._ShowInView = value;
					this.SendPropertyChanged("ShowInView");
					this.OnShowInViewChanged();
				}
			}
		}
		
		[Column(Storage="_ValueFunction", DbType="NVarChar(1024)", UpdateCheck=UpdateCheck.Never)]
		public string ValueFunction
		{
			get
			{
				return this._ValueFunction;
			}
			set
			{
				if ((this._ValueFunction != value))
				{
					this.OnValueFunctionChanging(value);
					this.SendPropertyChanging();
					this._ValueFunction = value;
					this.SendPropertyChanged("ValueFunction");
					this.OnValueFunctionChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_ListColumnWidth", DbType="NVarChar(1024)", UpdateCheck=UpdateCheck.Never)]
		public string ListColumnWidth
		{
			get
			{
				return this._ListColumnWidth;
			}
			set
			{
				if ((this._ListColumnWidth != value))
				{
					this.OnListColumnWidthChanging(value);
					this.SendPropertyChanging();
					this._ListColumnWidth = value;
					this.SendPropertyChanged("ListColumnWidth");
					this.OnListColumnWidthChanged();
				}
			}
		}
		
		[Column(Storage="_ValueFunctionExecType", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool ValueFunctionExecType
		{
			get
			{
				return this._ValueFunctionExecType;
			}
			set
			{
				if ((this._ValueFunctionExecType != value))
				{
					this.OnValueFunctionExecTypeChanging(value);
					this.SendPropertyChanging();
					this._ValueFunctionExecType = value;
					this.SendPropertyChanged("ValueFunctionExecType");
					this.OnValueFunctionExecTypeChanged();
				}
			}
		}
		
		[Column(Storage="_SortExpression", DbType="NVarChar(1024)", UpdateCheck=UpdateCheck.Never)]
		public string SortExpression
		{
			get
			{
				return this._SortExpression;
			}
			set
			{
				if ((this._SortExpression != value))
				{
					this.OnSortExpressionChanging(value);
					this.SendPropertyChanging();
					this._SortExpression = value;
					this.SendPropertyChanged("SortExpression");
					this.OnSortExpressionChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Association(Name="FK_MM_FormField_FormFieldGroup", Storage="_FormFieldGroup", ThisKey="FormFieldGroupID", OtherKey="FormFieldGroupID", IsForeignKey=true)]
		public MM_FormFieldGroup FormFieldGroup
		{
			get
			{
				return this._FormFieldGroup.Entity;
			}
			set
			{
				MM_FormFieldGroup previousValue = this._FormFieldGroup.Entity;
				if (((previousValue != value) 
							|| (this._FormFieldGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FormFieldGroup.Entity = null;
						previousValue.FormFields.Remove(this);
					}
					this._FormFieldGroup.Entity = value;
					if ((value != null))
					{
						value.FormFields.Add(this);
						this._FormFieldGroupID = value.FormFieldGroupID;
					}
					else
					{
						this._FormFieldGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FormFieldGroup");
				}
			}
		}
		
		[Association(Name="FK_MM_FormField_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_FormField.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_FormField.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_MM_FormField_ObjectProperty", Storage="_ObjectProperty", ThisKey="ObjectPropertyID", OtherKey="ObjectPropertyID", IsForeignKey=true, DeleteOnNull=true)]
		public MM_ObjectProperty ObjectProperty
		{
			get
			{
				return this._ObjectProperty.Entity;
			}
			set
			{
				MM_ObjectProperty previousValue = this._ObjectProperty.Entity;
				if (((previousValue != value) 
							|| (this._ObjectProperty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectProperty.Entity = null;
						previousValue.MM_FormField.Remove(this);
					}
					this._ObjectProperty.Entity = value;
					if ((value != null))
					{
						value.MM_FormField.Add(this);
						this._ObjectPropertyID = value.ObjectPropertyID;
					}
					else
					{
						this._ObjectPropertyID = default(int);
					}
					this.SendPropertyChanged("ObjectProperty");
				}
			}
		}
		
		[Association(Name="FK_MM_FormFieldAttribute_FormField", Storage="_Attributes", ThisKey="FormFieldID", OtherKey="FormFieldID", DeleteRule="CASCADE")]
		public EntitySet<MM_FormFieldAttribute> Attributes
		{
			get
			{
				return this._Attributes;
			}
			set
			{
				this._Attributes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attributes(MM_FormFieldAttribute entity)
		{
			this.SendPropertyChanging();
			entity.FormField = this;
		}
		
		private void detach_Attributes(MM_FormFieldAttribute entity)
		{
			this.SendPropertyChanging();
			entity.FormField = null;
		}
	}
	
	[Table(Name="dbo.MM_FormFieldAttribute")]
	public partial class MM_FormFieldAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FormFieldAttributeID;
		
		private int _FormFieldID;
		
		private string _Title;
		
		private string _Value;
		
		private bool _IsEvent;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private EntityRef<MM_FormField> _FormField;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormFieldAttributeIDChanging(int value);
    partial void OnFormFieldAttributeIDChanged();
    partial void OnFormFieldIDChanging(int value);
    partial void OnFormFieldIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnIsEventChanging(bool value);
    partial void OnIsEventChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    #endregion
		
		public MM_FormFieldAttribute()
		{
			this._FormField = default(EntityRef<MM_FormField>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_FormFieldAttributeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FormFieldAttributeID
		{
			get
			{
				return this._FormFieldAttributeID;
			}
			set
			{
				if ((this._FormFieldAttributeID != value))
				{
					this.OnFormFieldAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._FormFieldAttributeID = value;
					this.SendPropertyChanged("FormFieldAttributeID");
					this.OnFormFieldAttributeIDChanged();
				}
			}
		}
		
		[Column(Storage="_FormFieldID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FormFieldID
		{
			get
			{
				return this._FormFieldID;
			}
			set
			{
				if ((this._FormFieldID != value))
				{
					if (this._FormField.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FormFieldID = value;
					this.SendPropertyChanged("FormFieldID");
					this.OnFormFieldIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_IsEvent", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsEvent
		{
			get
			{
				return this._IsEvent;
			}
			set
			{
				if ((this._IsEvent != value))
				{
					this.OnIsEventChanging(value);
					this.SendPropertyChanging();
					this._IsEvent = value;
					this.SendPropertyChanged("IsEvent");
					this.OnIsEventChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Association(Name="FK_MM_FormFieldAttribute_FormField", Storage="_FormField", ThisKey="FormFieldID", OtherKey="FormFieldID", IsForeignKey=true, DeleteOnNull=true)]
		public MM_FormField FormField
		{
			get
			{
				return this._FormField.Entity;
			}
			set
			{
				MM_FormField previousValue = this._FormField.Entity;
				if (((previousValue != value) 
							|| (this._FormField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FormField.Entity = null;
						previousValue.Attributes.Remove(this);
					}
					this._FormField.Entity = value;
					if ((value != null))
					{
						value.Attributes.Add(this);
						this._FormFieldID = value.FormFieldID;
					}
					else
					{
						this._FormFieldID = default(int);
					}
					this.SendPropertyChanged("FormField");
				}
			}
		}
		
		[Association(Name="FK_MM_FormFieldAttribute_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_FormFieldAttribute.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_FormFieldAttribute.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MM_FormFieldGroup")]
	public partial class MM_FormFieldGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FormFieldGroupID;
		
		private string _Title;
		
		private int _ObjectTypeID;
		
		private int _SeqNo;
		
		private System.Nullable<int> _SelectObjectPropertyID;
		
		private string _SelectObjectPrefix;
		
		private string _SelectObjectClass;
		
		private bool _ShowTitle;
		
		private string _SelectObjectDataTextField;
		
		private string _SelectObjectFilter;
		
		private string _SelectObjectSearchExpression;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private EntitySet<MM_FormField> _FormFields;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<MM_ObjectType> _ObjectType;
		
		private EntityRef<MM_ObjectProperty> _SelectObjectProperty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormFieldGroupIDChanging(int value);
    partial void OnFormFieldGroupIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnObjectTypeIDChanging(int value);
    partial void OnObjectTypeIDChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnSelectObjectPropertyIDChanging(System.Nullable<int> value);
    partial void OnSelectObjectPropertyIDChanged();
    partial void OnSelectObjectPrefixChanging(string value);
    partial void OnSelectObjectPrefixChanged();
    partial void OnSelectObjectClassChanging(string value);
    partial void OnSelectObjectClassChanged();
    partial void OnShowTitleChanging(bool value);
    partial void OnShowTitleChanged();
    partial void OnSelectObjectDataTextFieldChanging(string value);
    partial void OnSelectObjectDataTextFieldChanged();
    partial void OnSelectObjectFilterChanging(string value);
    partial void OnSelectObjectFilterChanged();
    partial void OnSelectObjectSearchExpressionChanging(string value);
    partial void OnSelectObjectSearchExpressionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    #endregion
		
		public MM_FormFieldGroup()
		{
			this._FormFields = new EntitySet<MM_FormField>(new Action<MM_FormField>(this.attach_FormFields), new Action<MM_FormField>(this.detach_FormFields));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ObjectType = default(EntityRef<MM_ObjectType>);
			this._SelectObjectProperty = default(EntityRef<MM_ObjectProperty>);
			OnCreated();
		}
		
		[Column(Storage="_FormFieldGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FormFieldGroupID
		{
			get
			{
				return this._FormFieldGroupID;
			}
			set
			{
				if ((this._FormFieldGroupID != value))
				{
					this.OnFormFieldGroupIDChanging(value);
					this.SendPropertyChanging();
					this._FormFieldGroupID = value;
					this.SendPropertyChanged("FormFieldGroupID");
					this.OnFormFieldGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_SelectObjectPropertyID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SelectObjectPropertyID
		{
			get
			{
				return this._SelectObjectPropertyID;
			}
			set
			{
				if ((this._SelectObjectPropertyID != value))
				{
					if (this._SelectObjectProperty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSelectObjectPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._SelectObjectPropertyID = value;
					this.SendPropertyChanged("SelectObjectPropertyID");
					this.OnSelectObjectPropertyIDChanged();
				}
			}
		}
		
		[Column(Storage="_SelectObjectPrefix", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SelectObjectPrefix
		{
			get
			{
				return this._SelectObjectPrefix;
			}
			set
			{
				if ((this._SelectObjectPrefix != value))
				{
					this.OnSelectObjectPrefixChanging(value);
					this.SendPropertyChanging();
					this._SelectObjectPrefix = value;
					this.SendPropertyChanged("SelectObjectPrefix");
					this.OnSelectObjectPrefixChanged();
				}
			}
		}
		
		[Column(Storage="_SelectObjectClass", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SelectObjectClass
		{
			get
			{
				return this._SelectObjectClass;
			}
			set
			{
				if ((this._SelectObjectClass != value))
				{
					this.OnSelectObjectClassChanging(value);
					this.SendPropertyChanging();
					this._SelectObjectClass = value;
					this.SendPropertyChanged("SelectObjectClass");
					this.OnSelectObjectClassChanged();
				}
			}
		}
		
		[Column(Storage="_ShowTitle", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool ShowTitle
		{
			get
			{
				return this._ShowTitle;
			}
			set
			{
				if ((this._ShowTitle != value))
				{
					this.OnShowTitleChanging(value);
					this.SendPropertyChanging();
					this._ShowTitle = value;
					this.SendPropertyChanged("ShowTitle");
					this.OnShowTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SelectObjectDataTextField", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SelectObjectDataTextField
		{
			get
			{
				return this._SelectObjectDataTextField;
			}
			set
			{
				if ((this._SelectObjectDataTextField != value))
				{
					this.OnSelectObjectDataTextFieldChanging(value);
					this.SendPropertyChanging();
					this._SelectObjectDataTextField = value;
					this.SendPropertyChanged("SelectObjectDataTextField");
					this.OnSelectObjectDataTextFieldChanged();
				}
			}
		}
		
		[Column(Storage="_SelectObjectFilter", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SelectObjectFilter
		{
			get
			{
				return this._SelectObjectFilter;
			}
			set
			{
				if ((this._SelectObjectFilter != value))
				{
					this.OnSelectObjectFilterChanging(value);
					this.SendPropertyChanging();
					this._SelectObjectFilter = value;
					this.SendPropertyChanged("SelectObjectFilter");
					this.OnSelectObjectFilterChanged();
				}
			}
		}
		
		[Column(Storage="_SelectObjectSearchExpression", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SelectObjectSearchExpression
		{
			get
			{
				return this._SelectObjectSearchExpression;
			}
			set
			{
				if ((this._SelectObjectSearchExpression != value))
				{
					this.OnSelectObjectSearchExpressionChanging(value);
					this.SendPropertyChanging();
					this._SelectObjectSearchExpression = value;
					this.SendPropertyChanged("SelectObjectSearchExpression");
					this.OnSelectObjectSearchExpressionChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Association(Name="FK_MM_FormField_FormFieldGroup", Storage="_FormFields", ThisKey="FormFieldGroupID", OtherKey="FormFieldGroupID", DeleteRule="NO ACTION")]
		public EntitySet<MM_FormField> FormFields
		{
			get
			{
				return this._FormFields;
			}
			set
			{
				this._FormFields.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_FormFieldGroup_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_FormFieldGroup.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_FormFieldGroup.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_MM_FormFieldGroup_ObjectType", Storage="_ObjectType", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", IsForeignKey=true)]
		public MM_ObjectType ObjectType
		{
			get
			{
				return this._ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._ObjectType.Entity;
				if (((previousValue != value) 
							|| (this._ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectType.Entity = null;
						previousValue.FormFieldGroups.Remove(this);
					}
					this._ObjectType.Entity = value;
					if ((value != null))
					{
						value.FormFieldGroups.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(int);
					}
					this.SendPropertyChanged("ObjectType");
				}
			}
		}
		
		[Association(Name="FK_MM_FormFieldGroup_SelectObjectProperty", Storage="_SelectObjectProperty", ThisKey="SelectObjectPropertyID", OtherKey="ObjectPropertyID", IsForeignKey=true)]
		public MM_ObjectProperty SelectObjectProperty
		{
			get
			{
				return this._SelectObjectProperty.Entity;
			}
			set
			{
				MM_ObjectProperty previousValue = this._SelectObjectProperty.Entity;
				if (((previousValue != value) 
							|| (this._SelectObjectProperty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SelectObjectProperty.Entity = null;
						previousValue.MM_FormFieldGroup.Remove(this);
					}
					this._SelectObjectProperty.Entity = value;
					if ((value != null))
					{
						value.MM_FormFieldGroup.Add(this);
						this._SelectObjectPropertyID = value.ObjectPropertyID;
					}
					else
					{
						this._SelectObjectPropertyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SelectObjectProperty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FormFields(MM_FormField entity)
		{
			this.SendPropertyChanging();
			entity.FormFieldGroup = this;
		}
		
		private void detach_FormFields(MM_FormField entity)
		{
			this.SendPropertyChanging();
			entity.FormFieldGroup = null;
		}
	}
	
	[Table(Name="dbo.MM_FormView")]
	public partial class MM_FormView : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FormViewID;
		
		private string _Title;
		
		private string _SysName;
		
		private string _ViewTemplate;
		
		private char _TemplateTypeCode;
		
		private System.Nullable<int> _ObjectTypeID;
		
		private System.Nullable<int> _PackageID;
		
		private System.DateTime _LastModifiedDate;
		
		private System.Guid _Guid;
		
		private bool _IsCustom;
		
		private bool _IsDeleted;
		
		private int _LastModifiedUserID;
		
		private bool _IsCaching;
		
		private string _CacheKeyParams;
		
		private int _CacheTimeout;
		
		private string _BaseClass;
		
		private EntitySet<HST_MM_FormView> _HST_MM_FormView;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<MM_ObjectType> _ObjectType;
		
		private EntityRef<MM_Package> _Package;
		
		private EntitySet<MM_Method> _MM_Method;
		
		private EntitySet<N_MenuItem> _N_MenuItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormViewIDChanging(int value);
    partial void OnFormViewIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnViewTemplateChanging(string value);
    partial void OnViewTemplateChanged();
    partial void OnTemplateTypeCodeChanging(char value);
    partial void OnTemplateTypeCodeChanged();
    partial void OnObjectTypeIDChanging(System.Nullable<int> value);
    partial void OnObjectTypeIDChanged();
    partial void OnPackageIDChanging(System.Nullable<int> value);
    partial void OnPackageIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnIsCustomChanging(bool value);
    partial void OnIsCustomChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsCachingChanging(bool value);
    partial void OnIsCachingChanged();
    partial void OnCacheKeyParamsChanging(string value);
    partial void OnCacheKeyParamsChanged();
    partial void OnCacheTimeoutChanging(int value);
    partial void OnCacheTimeoutChanged();
    partial void OnBaseClassChanging(string value);
    partial void OnBaseClassChanged();
    #endregion
		
		public MM_FormView()
		{
			this._HST_MM_FormView = new EntitySet<HST_MM_FormView>(new Action<HST_MM_FormView>(this.attach_HST_MM_FormView), new Action<HST_MM_FormView>(this.detach_HST_MM_FormView));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ObjectType = default(EntityRef<MM_ObjectType>);
			this._Package = default(EntityRef<MM_Package>);
			this._MM_Method = new EntitySet<MM_Method>(new Action<MM_Method>(this.attach_MM_Method), new Action<MM_Method>(this.detach_MM_Method));
			this._N_MenuItem = new EntitySet<N_MenuItem>(new Action<N_MenuItem>(this.attach_N_MenuItem), new Action<N_MenuItem>(this.detach_N_MenuItem));
			OnCreated();
		}
		
		[Column(Storage="_FormViewID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FormViewID
		{
			get
			{
				return this._FormViewID;
			}
			set
			{
				if ((this._FormViewID != value))
				{
					this.OnFormViewIDChanging(value);
					this.SendPropertyChanging();
					this._FormViewID = value;
					this.SendPropertyChanged("FormViewID");
					this.OnFormViewIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_ViewTemplate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ViewTemplate
		{
			get
			{
				return this._ViewTemplate;
			}
			set
			{
				if ((this._ViewTemplate != value))
				{
					this.OnViewTemplateChanging(value);
					this.SendPropertyChanging();
					this._ViewTemplate = value;
					this.SendPropertyChanged("ViewTemplate");
					this.OnViewTemplateChanged();
				}
			}
		}
		
		[Column(Storage="_TemplateTypeCode", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char TemplateTypeCode
		{
			get
			{
				return this._TemplateTypeCode;
			}
			set
			{
				if ((this._TemplateTypeCode != value))
				{
					this.OnTemplateTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._TemplateTypeCode = value;
					this.SendPropertyChanged("TemplateTypeCode");
					this.OnTemplateTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_PackageID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_IsCustom", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsCustom
		{
			get
			{
				return this._IsCustom;
			}
			set
			{
				if ((this._IsCustom != value))
				{
					this.OnIsCustomChanging(value);
					this.SendPropertyChanging();
					this._IsCustom = value;
					this.SendPropertyChanged("IsCustom");
					this.OnIsCustomChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsCaching", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsCaching
		{
			get
			{
				return this._IsCaching;
			}
			set
			{
				if ((this._IsCaching != value))
				{
					this.OnIsCachingChanging(value);
					this.SendPropertyChanging();
					this._IsCaching = value;
					this.SendPropertyChanged("IsCaching");
					this.OnIsCachingChanged();
				}
			}
		}
		
		[Column(Storage="_CacheKeyParams", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CacheKeyParams
		{
			get
			{
				return this._CacheKeyParams;
			}
			set
			{
				if ((this._CacheKeyParams != value))
				{
					this.OnCacheKeyParamsChanging(value);
					this.SendPropertyChanging();
					this._CacheKeyParams = value;
					this.SendPropertyChanged("CacheKeyParams");
					this.OnCacheKeyParamsChanged();
				}
			}
		}
		
		[Column(Storage="_CacheTimeout", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CacheTimeout
		{
			get
			{
				return this._CacheTimeout;
			}
			set
			{
				if ((this._CacheTimeout != value))
				{
					this.OnCacheTimeoutChanging(value);
					this.SendPropertyChanging();
					this._CacheTimeout = value;
					this.SendPropertyChanged("CacheTimeout");
					this.OnCacheTimeoutChanged();
				}
			}
		}
		
		[Column(Storage="_BaseClass", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string BaseClass
		{
			get
			{
				return this._BaseClass;
			}
			set
			{
				if ((this._BaseClass != value))
				{
					this.OnBaseClassChanging(value);
					this.SendPropertyChanging();
					this._BaseClass = value;
					this.SendPropertyChanged("BaseClass");
					this.OnBaseClassChanged();
				}
			}
		}
		
		[Association(Name="FK_HST_MM_FormView_MM_FormView", Storage="_HST_MM_FormView", ThisKey="FormViewID", OtherKey="FormViewID", DeleteRule="CASCADE")]
		public EntitySet<HST_MM_FormView> HST_MM_FormView
		{
			get
			{
				return this._HST_MM_FormView;
			}
			set
			{
				this._HST_MM_FormView.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_FormView_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_FormView.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_FormView.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_MM_FormView_ObjectType", Storage="_ObjectType", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", IsForeignKey=true)]
		public MM_ObjectType ObjectType
		{
			get
			{
				return this._ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._ObjectType.Entity;
				if (((previousValue != value) 
							|| (this._ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectType.Entity = null;
						previousValue.FormViews.Remove(this);
					}
					this._ObjectType.Entity = value;
					if ((value != null))
					{
						value.FormViews.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ObjectType");
				}
			}
		}
		
		[Association(Name="FK_MM_FormView_Package", Storage="_Package", ThisKey="PackageID", OtherKey="PackageID", IsForeignKey=true)]
		public MM_Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				MM_Package previousValue = this._Package.Entity;
				if (((previousValue != value) 
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.MM_FormView.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.MM_FormView.Add(this);
						this._PackageID = value.PackageID;
					}
					else
					{
						this._PackageID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}
		
		[Association(Name="FK_MM_Method_FormView", Storage="_MM_Method", ThisKey="FormViewID", OtherKey="FormViewID", DeleteRule="NO ACTION")]
		public EntitySet<MM_Method> MM_Method
		{
			get
			{
				return this._MM_Method;
			}
			set
			{
				this._MM_Method.Assign(value);
			}
		}
		
		[Association(Name="FK_N_MenuItem_MM_FormView", Storage="_N_MenuItem", ThisKey="FormViewID", OtherKey="FormViewID", DeleteRule="SET NULL")]
		public EntitySet<N_MenuItem> N_MenuItem
		{
			get
			{
				return this._N_MenuItem;
			}
			set
			{
				this._N_MenuItem.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HST_MM_FormView(HST_MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.MM_FormView = this;
		}
		
		private void detach_HST_MM_FormView(HST_MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.MM_FormView = null;
		}
		
		private void attach_MM_Method(MM_Method entity)
		{
			this.SendPropertyChanging();
			entity.FormView = this;
		}
		
		private void detach_MM_Method(MM_Method entity)
		{
			this.SendPropertyChanging();
			entity.FormView = null;
		}
		
		private void attach_N_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.MM_FormView = this;
		}
		
		private void detach_N_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.MM_FormView = null;
		}
	}
	
	[Table(Name="dbo.MM_Group")]
	public partial class MM_Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupID;
		
		private string _Title;
		
		private string _SysName;
		
		private char _ElementTypeCode;
		
		private System.Guid _Guid;
		
		private string _EditParmsCode;
		
		private string _AddCode;
		
		private string _RemoveCode;
		
		private EntitySet<MM_GroupAsso> _MM_GroupAsso;
		
		private EntitySet<MM_GroupAsso> _Group;
		
		private EntitySet<MM_TaggedValueType> _MM_TaggedValueType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnElementTypeCodeChanging(char value);
    partial void OnElementTypeCodeChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnEditParmsCodeChanging(string value);
    partial void OnEditParmsCodeChanged();
    partial void OnAddCodeChanging(string value);
    partial void OnAddCodeChanged();
    partial void OnRemoveCodeChanging(string value);
    partial void OnRemoveCodeChanged();
    #endregion
		
		public MM_Group()
		{
			this._MM_GroupAsso = new EntitySet<MM_GroupAsso>(new Action<MM_GroupAsso>(this.attach_MM_GroupAsso), new Action<MM_GroupAsso>(this.detach_MM_GroupAsso));
			this._Group = new EntitySet<MM_GroupAsso>(new Action<MM_GroupAsso>(this.attach_Group), new Action<MM_GroupAsso>(this.detach_Group));
			this._MM_TaggedValueType = new EntitySet<MM_TaggedValueType>(new Action<MM_TaggedValueType>(this.attach_MM_TaggedValueType), new Action<MM_TaggedValueType>(this.detach_MM_TaggedValueType));
			OnCreated();
		}
		
		[Column(Storage="_GroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_ElementTypeCode", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char ElementTypeCode
		{
			get
			{
				return this._ElementTypeCode;
			}
			set
			{
				if ((this._ElementTypeCode != value))
				{
					this.OnElementTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._ElementTypeCode = value;
					this.SendPropertyChanged("ElementTypeCode");
					this.OnElementTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_EditParmsCode", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string EditParmsCode
		{
			get
			{
				return this._EditParmsCode;
			}
			set
			{
				if ((this._EditParmsCode != value))
				{
					this.OnEditParmsCodeChanging(value);
					this.SendPropertyChanging();
					this._EditParmsCode = value;
					this.SendPropertyChanged("EditParmsCode");
					this.OnEditParmsCodeChanged();
				}
			}
		}
		
		[Column(Storage="_AddCode", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string AddCode
		{
			get
			{
				return this._AddCode;
			}
			set
			{
				if ((this._AddCode != value))
				{
					this.OnAddCodeChanging(value);
					this.SendPropertyChanging();
					this._AddCode = value;
					this.SendPropertyChanged("AddCode");
					this.OnAddCodeChanged();
				}
			}
		}
		
		[Column(Storage="_RemoveCode", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string RemoveCode
		{
			get
			{
				return this._RemoveCode;
			}
			set
			{
				if ((this._RemoveCode != value))
				{
					this.OnRemoveCodeChanging(value);
					this.SendPropertyChanging();
					this._RemoveCode = value;
					this.SendPropertyChanged("RemoveCode");
					this.OnRemoveCodeChanged();
				}
			}
		}
		
		[Association(Name="FK_MM_GroupAsso_MM_Group", Storage="_MM_GroupAsso", ThisKey="GroupID", OtherKey="GroupID", DeleteRule="NO ACTION")]
		public EntitySet<MM_GroupAsso> MM_GroupAsso
		{
			get
			{
				return this._MM_GroupAsso;
			}
			set
			{
				this._MM_GroupAsso.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_GroupAsso_MM_Group1", Storage="_Group", ThisKey="GroupID", OtherKey="ParentGroupID", DeleteRule="NO ACTION")]
		public EntitySet<MM_GroupAsso> Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				this._Group.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_TaggedValueType_MM_Group", Storage="_MM_TaggedValueType", ThisKey="GroupID", OtherKey="GroupID", DeleteRule="CASCADE")]
		public EntitySet<MM_TaggedValueType> MM_TaggedValueType
		{
			get
			{
				return this._MM_TaggedValueType;
			}
			set
			{
				this._MM_TaggedValueType.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MM_GroupAsso(MM_GroupAsso entity)
		{
			this.SendPropertyChanging();
			entity.MM_Group = this;
		}
		
		private void detach_MM_GroupAsso(MM_GroupAsso entity)
		{
			this.SendPropertyChanging();
			entity.MM_Group = null;
		}
		
		private void attach_Group(MM_GroupAsso entity)
		{
			this.SendPropertyChanging();
			entity.MM_Group1 = this;
		}
		
		private void detach_Group(MM_GroupAsso entity)
		{
			this.SendPropertyChanging();
			entity.MM_Group1 = null;
		}
		
		private void attach_MM_TaggedValueType(MM_TaggedValueType entity)
		{
			this.SendPropertyChanging();
			entity.MM_Group = this;
		}
		
		private void detach_MM_TaggedValueType(MM_TaggedValueType entity)
		{
			this.SendPropertyChanging();
			entity.MM_Group = null;
		}
	}
	
	[Table(Name="dbo.MM_GroupAsso")]
	public partial class MM_GroupAsso : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupID;
		
		private int _ParentGroupID;
		
		private EntityRef<MM_Group> _MM_Group;
		
		private EntityRef<MM_Group> _MM_Group1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnParentGroupIDChanging(int value);
    partial void OnParentGroupIDChanged();
    #endregion
		
		public MM_GroupAsso()
		{
			this._MM_Group = default(EntityRef<MM_Group>);
			this._MM_Group1 = default(EntityRef<MM_Group>);
			OnCreated();
		}
		
		[Column(Storage="_GroupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._MM_Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParentGroupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ParentGroupID
		{
			get
			{
				return this._ParentGroupID;
			}
			set
			{
				if ((this._ParentGroupID != value))
				{
					if (this._MM_Group1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentGroupIDChanging(value);
					this.SendPropertyChanging();
					this._ParentGroupID = value;
					this.SendPropertyChanged("ParentGroupID");
					this.OnParentGroupIDChanged();
				}
			}
		}
		
		[Association(Name="FK_MM_GroupAsso_MM_Group", Storage="_MM_Group", ThisKey="GroupID", OtherKey="GroupID", IsForeignKey=true)]
		public MM_Group MM_Group
		{
			get
			{
				return this._MM_Group.Entity;
			}
			set
			{
				MM_Group previousValue = this._MM_Group.Entity;
				if (((previousValue != value) 
							|| (this._MM_Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_Group.Entity = null;
						previousValue.MM_GroupAsso.Remove(this);
					}
					this._MM_Group.Entity = value;
					if ((value != null))
					{
						value.MM_GroupAsso.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("MM_Group");
				}
			}
		}
		
		[Association(Name="FK_MM_GroupAsso_MM_Group1", Storage="_MM_Group1", ThisKey="ParentGroupID", OtherKey="GroupID", IsForeignKey=true)]
		public MM_Group MM_Group1
		{
			get
			{
				return this._MM_Group1.Entity;
			}
			set
			{
				MM_Group previousValue = this._MM_Group1.Entity;
				if (((previousValue != value) 
							|| (this._MM_Group1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_Group1.Entity = null;
						previousValue.Group.Remove(this);
					}
					this._MM_Group1.Entity = value;
					if ((value != null))
					{
						value.Group.Add(this);
						this._ParentGroupID = value.GroupID;
					}
					else
					{
						this._ParentGroupID = default(int);
					}
					this.SendPropertyChanged("MM_Group1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MM_Method")]
	public partial class MM_Method : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MethodID;
		
		private string _SysName;
		
		private string _Title;
		
		private int _SeqNo;
		
		private int _ObjectTypeID;
		
		private System.Guid _Guid;
		
		private System.Nullable<int> _FormViewID;
		
		private bool _IsDefault;
		
		private string _Icon;
		
		private string _Code;
		
		private string _Parameters;
		
		private string _ViewPath;
		
		private string _PredicateCode;
		
		private string _Comment;
		
		private EntityRef<MM_FormView> _FormView;
		
		private EntityRef<MM_ObjectType> _ObjectType;
		
		private EntitySet<MM_MethodGroupItem> _MM_MethodGroupItem;
		
		private EntitySet<MM_MethodParameter> _MethodParameters;
		
		private EntitySet<N_MenuItem> _N_MenuItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMethodIDChanging(int value);
    partial void OnMethodIDChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnObjectTypeIDChanging(int value);
    partial void OnObjectTypeIDChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnFormViewIDChanging(System.Nullable<int> value);
    partial void OnFormViewIDChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    partial void OnIconChanging(string value);
    partial void OnIconChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnParametersChanging(string value);
    partial void OnParametersChanged();
    partial void OnViewPathChanging(string value);
    partial void OnViewPathChanged();
    partial void OnPredicateCodeChanging(string value);
    partial void OnPredicateCodeChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public MM_Method()
		{
			this._FormView = default(EntityRef<MM_FormView>);
			this._ObjectType = default(EntityRef<MM_ObjectType>);
			this._MM_MethodGroupItem = new EntitySet<MM_MethodGroupItem>(new Action<MM_MethodGroupItem>(this.attach_MM_MethodGroupItem), new Action<MM_MethodGroupItem>(this.detach_MM_MethodGroupItem));
			this._MethodParameters = new EntitySet<MM_MethodParameter>(new Action<MM_MethodParameter>(this.attach_MethodParameters), new Action<MM_MethodParameter>(this.detach_MethodParameters));
			this._N_MenuItem = new EntitySet<N_MenuItem>(new Action<N_MenuItem>(this.attach_N_MenuItem), new Action<N_MenuItem>(this.detach_N_MenuItem));
			OnCreated();
		}
		
		[Column(Storage="_MethodID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MethodID
		{
			get
			{
				return this._MethodID;
			}
			set
			{
				if ((this._MethodID != value))
				{
					this.OnMethodIDChanging(value);
					this.SendPropertyChanging();
					this._MethodID = value;
					this.SendPropertyChanged("MethodID");
					this.OnMethodIDChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_FormViewID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FormViewID
		{
			get
			{
				return this._FormViewID;
			}
			set
			{
				if ((this._FormViewID != value))
				{
					if (this._FormView.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormViewIDChanging(value);
					this.SendPropertyChanging();
					this._FormViewID = value;
					this.SendPropertyChanged("FormViewID");
					this.OnFormViewIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDefault", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[Column(Storage="_Icon", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Icon
		{
			get
			{
				return this._Icon;
			}
			set
			{
				if ((this._Icon != value))
				{
					this.OnIconChanging(value);
					this.SendPropertyChanging();
					this._Icon = value;
					this.SendPropertyChanged("Icon");
					this.OnIconChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Parameters", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Parameters
		{
			get
			{
				return this._Parameters;
			}
			set
			{
				if ((this._Parameters != value))
				{
					this.OnParametersChanging(value);
					this.SendPropertyChanging();
					this._Parameters = value;
					this.SendPropertyChanged("Parameters");
					this.OnParametersChanged();
				}
			}
		}
		
		[Column(Storage="_ViewPath", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ViewPath
		{
			get
			{
				return this._ViewPath;
			}
			set
			{
				if ((this._ViewPath != value))
				{
					this.OnViewPathChanging(value);
					this.SendPropertyChanging();
					this._ViewPath = value;
					this.SendPropertyChanged("ViewPath");
					this.OnViewPathChanged();
				}
			}
		}
		
		[Column(Storage="_PredicateCode", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PredicateCode
		{
			get
			{
				return this._PredicateCode;
			}
			set
			{
				if ((this._PredicateCode != value))
				{
					this.OnPredicateCodeChanging(value);
					this.SendPropertyChanging();
					this._PredicateCode = value;
					this.SendPropertyChanged("PredicateCode");
					this.OnPredicateCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Association(Name="FK_MM_Method_FormView", Storage="_FormView", ThisKey="FormViewID", OtherKey="FormViewID", IsForeignKey=true)]
		public MM_FormView FormView
		{
			get
			{
				return this._FormView.Entity;
			}
			set
			{
				MM_FormView previousValue = this._FormView.Entity;
				if (((previousValue != value) 
							|| (this._FormView.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FormView.Entity = null;
						previousValue.MM_Method.Remove(this);
					}
					this._FormView.Entity = value;
					if ((value != null))
					{
						value.MM_Method.Add(this);
						this._FormViewID = value.FormViewID;
					}
					else
					{
						this._FormViewID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FormView");
				}
			}
		}
		
		[Association(Name="FK_MM_Method_ObjectType", Storage="_ObjectType", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", IsForeignKey=true)]
		public MM_ObjectType ObjectType
		{
			get
			{
				return this._ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._ObjectType.Entity;
				if (((previousValue != value) 
							|| (this._ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectType.Entity = null;
						previousValue.Methods.Remove(this);
					}
					this._ObjectType.Entity = value;
					if ((value != null))
					{
						value.Methods.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(int);
					}
					this.SendPropertyChanged("ObjectType");
				}
			}
		}
		
		[Association(Name="FK_MM_MethodGroupItem_MM_Method", Storage="_MM_MethodGroupItem", ThisKey="MethodID", OtherKey="MethodID", DeleteRule="NO ACTION")]
		public EntitySet<MM_MethodGroupItem> MM_MethodGroupItem
		{
			get
			{
				return this._MM_MethodGroupItem;
			}
			set
			{
				this._MM_MethodGroupItem.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_MethodParameter_Method", Storage="_MethodParameters", ThisKey="MethodID", OtherKey="MethodID", DeleteRule="NO ACTION")]
		public EntitySet<MM_MethodParameter> MethodParameters
		{
			get
			{
				return this._MethodParameters;
			}
			set
			{
				this._MethodParameters.Assign(value);
			}
		}
		
		[Association(Name="FK_N_MenuItem_MM_Method", Storage="_N_MenuItem", ThisKey="MethodID", OtherKey="MethodID", DeleteRule="NO ACTION")]
		public EntitySet<N_MenuItem> N_MenuItem
		{
			get
			{
				return this._N_MenuItem;
			}
			set
			{
				this._N_MenuItem.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MM_MethodGroupItem(MM_MethodGroupItem entity)
		{
			this.SendPropertyChanging();
			entity.MM_Method = this;
		}
		
		private void detach_MM_MethodGroupItem(MM_MethodGroupItem entity)
		{
			this.SendPropertyChanging();
			entity.MM_Method = null;
		}
		
		private void attach_MethodParameters(MM_MethodParameter entity)
		{
			this.SendPropertyChanging();
			entity.Method = this;
		}
		
		private void detach_MethodParameters(MM_MethodParameter entity)
		{
			this.SendPropertyChanging();
			entity.Method = null;
		}
		
		private void attach_N_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.MM_Method = this;
		}
		
		private void detach_N_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.MM_Method = null;
		}
	}
	
	[Table(Name="dbo.MM_MethodGroup")]
	public partial class MM_MethodGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MethodGroupID;
		
		private int _ObjectTypeID;
		
		private string _SysName;
		
		private EntityRef<MM_ObjectType> _MM_ObjectType;
		
		private EntitySet<MM_MethodGroupItem> _MM_MethodGroupItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMethodGroupIDChanging(int value);
    partial void OnMethodGroupIDChanged();
    partial void OnObjectTypeIDChanging(int value);
    partial void OnObjectTypeIDChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    #endregion
		
		public MM_MethodGroup()
		{
			this._MM_ObjectType = default(EntityRef<MM_ObjectType>);
			this._MM_MethodGroupItem = new EntitySet<MM_MethodGroupItem>(new Action<MM_MethodGroupItem>(this.attach_MM_MethodGroupItem), new Action<MM_MethodGroupItem>(this.detach_MM_MethodGroupItem));
			OnCreated();
		}
		
		[Column(Storage="_MethodGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MethodGroupID
		{
			get
			{
				return this._MethodGroupID;
			}
			set
			{
				if ((this._MethodGroupID != value))
				{
					this.OnMethodGroupIDChanging(value);
					this.SendPropertyChanging();
					this._MethodGroupID = value;
					this.SendPropertyChanged("MethodGroupID");
					this.OnMethodGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._MM_ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Association(Name="FK_MM_MethodGroup_MM_ObjectType", Storage="_MM_ObjectType", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", IsForeignKey=true, DeleteOnNull=true)]
		public MM_ObjectType MM_ObjectType
		{
			get
			{
				return this._MM_ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._MM_ObjectType.Entity;
				if (((previousValue != value) 
							|| (this._MM_ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_ObjectType.Entity = null;
						previousValue.MM_MethodGroup.Remove(this);
					}
					this._MM_ObjectType.Entity = value;
					if ((value != null))
					{
						value.MM_MethodGroup.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(int);
					}
					this.SendPropertyChanged("MM_ObjectType");
				}
			}
		}
		
		[Association(Name="FK_MM_MethodGroupItem_MM_MethodGroup", Storage="_MM_MethodGroupItem", ThisKey="MethodGroupID", OtherKey="MethodGroupID", DeleteRule="CASCADE")]
		public EntitySet<MM_MethodGroupItem> MM_MethodGroupItem
		{
			get
			{
				return this._MM_MethodGroupItem;
			}
			set
			{
				this._MM_MethodGroupItem.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MM_MethodGroupItem(MM_MethodGroupItem entity)
		{
			this.SendPropertyChanging();
			entity.MM_MethodGroup = this;
		}
		
		private void detach_MM_MethodGroupItem(MM_MethodGroupItem entity)
		{
			this.SendPropertyChanging();
			entity.MM_MethodGroup = null;
		}
	}
	
	[Table(Name="dbo.MM_MethodGroupItem")]
	public partial class MM_MethodGroupItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MethodGroupItemID;
		
		private int _MethodGroupID;
		
		private System.Nullable<int> _MethodID;
		
		private string _Title;
		
		private bool _IsSeparator;
		
		private System.Nullable<int> _ParentMethodGroupItemID;
		
		private int _SeqNo;
		
		private EntityRef<MM_Method> _MM_Method;
		
		private EntityRef<MM_MethodGroup> _MM_MethodGroup;
		
		private EntityRef<MM_MethodGroupItem> _ParentMethodGroupItem;
		
		private EntitySet<MM_MethodGroupItem> _MethodGroupItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMethodGroupItemIDChanging(int value);
    partial void OnMethodGroupItemIDChanged();
    partial void OnMethodGroupIDChanging(int value);
    partial void OnMethodGroupIDChanged();
    partial void OnMethodIDChanging(System.Nullable<int> value);
    partial void OnMethodIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsSeparatorChanging(bool value);
    partial void OnIsSeparatorChanged();
    partial void OnParentMethodGroupItemIDChanging(System.Nullable<int> value);
    partial void OnParentMethodGroupItemIDChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    #endregion
		
		public MM_MethodGroupItem()
		{
			this._MM_Method = default(EntityRef<MM_Method>);
			this._MM_MethodGroup = default(EntityRef<MM_MethodGroup>);
			this._ParentMethodGroupItem = default(EntityRef<MM_MethodGroupItem>);
			this._MethodGroupItem = new EntitySet<MM_MethodGroupItem>(new Action<MM_MethodGroupItem>(this.attach_MethodGroupItem), new Action<MM_MethodGroupItem>(this.detach_MethodGroupItem));
			OnCreated();
		}
		
		[Column(Storage="_MethodGroupItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MethodGroupItemID
		{
			get
			{
				return this._MethodGroupItemID;
			}
			set
			{
				if ((this._MethodGroupItemID != value))
				{
					this.OnMethodGroupItemIDChanging(value);
					this.SendPropertyChanging();
					this._MethodGroupItemID = value;
					this.SendPropertyChanged("MethodGroupItemID");
					this.OnMethodGroupItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_MethodGroupID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MethodGroupID
		{
			get
			{
				return this._MethodGroupID;
			}
			set
			{
				if ((this._MethodGroupID != value))
				{
					if (this._MM_MethodGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMethodGroupIDChanging(value);
					this.SendPropertyChanging();
					this._MethodGroupID = value;
					this.SendPropertyChanged("MethodGroupID");
					this.OnMethodGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_MethodID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MethodID
		{
			get
			{
				return this._MethodID;
			}
			set
			{
				if ((this._MethodID != value))
				{
					if (this._MM_Method.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMethodIDChanging(value);
					this.SendPropertyChanging();
					this._MethodID = value;
					this.SendPropertyChanged("MethodID");
					this.OnMethodIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsSeparator", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSeparator
		{
			get
			{
				return this._IsSeparator;
			}
			set
			{
				if ((this._IsSeparator != value))
				{
					this.OnIsSeparatorChanging(value);
					this.SendPropertyChanging();
					this._IsSeparator = value;
					this.SendPropertyChanged("IsSeparator");
					this.OnIsSeparatorChanged();
				}
			}
		}
		
		[Column(Storage="_ParentMethodGroupItemID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ParentMethodGroupItemID
		{
			get
			{
				return this._ParentMethodGroupItemID;
			}
			set
			{
				if ((this._ParentMethodGroupItemID != value))
				{
					if (this._ParentMethodGroupItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentMethodGroupItemIDChanging(value);
					this.SendPropertyChanging();
					this._ParentMethodGroupItemID = value;
					this.SendPropertyChanged("ParentMethodGroupItemID");
					this.OnParentMethodGroupItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Association(Name="FK_MM_MethodGroupItem_MM_Method", Storage="_MM_Method", ThisKey="MethodID", OtherKey="MethodID", IsForeignKey=true)]
		public MM_Method MM_Method
		{
			get
			{
				return this._MM_Method.Entity;
			}
			set
			{
				MM_Method previousValue = this._MM_Method.Entity;
				if (((previousValue != value) 
							|| (this._MM_Method.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_Method.Entity = null;
						previousValue.MM_MethodGroupItem.Remove(this);
					}
					this._MM_Method.Entity = value;
					if ((value != null))
					{
						value.MM_MethodGroupItem.Add(this);
						this._MethodID = value.MethodID;
					}
					else
					{
						this._MethodID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MM_Method");
				}
			}
		}
		
		[Association(Name="FK_MM_MethodGroupItem_MM_MethodGroup", Storage="_MM_MethodGroup", ThisKey="MethodGroupID", OtherKey="MethodGroupID", IsForeignKey=true, DeleteOnNull=true)]
		public MM_MethodGroup MM_MethodGroup
		{
			get
			{
				return this._MM_MethodGroup.Entity;
			}
			set
			{
				MM_MethodGroup previousValue = this._MM_MethodGroup.Entity;
				if (((previousValue != value) 
							|| (this._MM_MethodGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_MethodGroup.Entity = null;
						previousValue.MM_MethodGroupItem.Remove(this);
					}
					this._MM_MethodGroup.Entity = value;
					if ((value != null))
					{
						value.MM_MethodGroupItem.Add(this);
						this._MethodGroupID = value.MethodGroupID;
					}
					else
					{
						this._MethodGroupID = default(int);
					}
					this.SendPropertyChanged("MM_MethodGroup");
				}
			}
		}
		
		[Association(Name="FK_MM_MethodGroupItem_ParentMethodGroupItem", Storage="_ParentMethodGroupItem", ThisKey="ParentMethodGroupItemID", OtherKey="MethodGroupItemID", IsForeignKey=true)]
		public MM_MethodGroupItem ParentMethodGroupItem
		{
			get
			{
				return this._ParentMethodGroupItem.Entity;
			}
			set
			{
				MM_MethodGroupItem previousValue = this._ParentMethodGroupItem.Entity;
				if (((previousValue != value) 
							|| (this._ParentMethodGroupItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentMethodGroupItem.Entity = null;
						previousValue.MethodGroupItem.Remove(this);
					}
					this._ParentMethodGroupItem.Entity = value;
					if ((value != null))
					{
						value.MethodGroupItem.Add(this);
						this._ParentMethodGroupItemID = value.MethodGroupItemID;
					}
					else
					{
						this._ParentMethodGroupItemID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ParentMethodGroupItem");
				}
			}
		}
		
		[Association(Name="FK_MM_MethodGroupItem_ParentMethodGroupItem", Storage="_MethodGroupItem", ThisKey="MethodGroupItemID", OtherKey="ParentMethodGroupItemID", DeleteRule="NO ACTION")]
		public EntitySet<MM_MethodGroupItem> MethodGroupItem
		{
			get
			{
				return this._MethodGroupItem;
			}
			set
			{
				this._MethodGroupItem.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MethodGroupItem(MM_MethodGroupItem entity)
		{
			this.SendPropertyChanging();
			entity.ParentMethodGroupItem = this;
		}
		
		private void detach_MethodGroupItem(MM_MethodGroupItem entity)
		{
			this.SendPropertyChanging();
			entity.ParentMethodGroupItem = null;
		}
	}
	
	[Table(Name="dbo.MM_MethodParameter")]
	public partial class MM_MethodParameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MethodParameterID;
		
		private string _Title;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private string _SysName;
		
		private string _Type;
		
		private int _LastModifiedUserID;
		
		private int _MethodID;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<MM_Method> _Method;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMethodParameterIDChanging(int value);
    partial void OnMethodParameterIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnMethodIDChanging(int value);
    partial void OnMethodIDChanged();
    #endregion
		
		public MM_MethodParameter()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Method = default(EntityRef<MM_Method>);
			OnCreated();
		}
		
		[Column(Storage="_MethodParameterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MethodParameterID
		{
			get
			{
				return this._MethodParameterID;
			}
			set
			{
				if ((this._MethodParameterID != value))
				{
					this.OnMethodParameterIDChanging(value);
					this.SendPropertyChanging();
					this._MethodParameterID = value;
					this.SendPropertyChanged("MethodParameterID");
					this.OnMethodParameterIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_MethodID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MethodID
		{
			get
			{
				return this._MethodID;
			}
			set
			{
				if ((this._MethodID != value))
				{
					if (this._Method.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMethodIDChanging(value);
					this.SendPropertyChanging();
					this._MethodID = value;
					this.SendPropertyChanged("MethodID");
					this.OnMethodIDChanged();
				}
			}
		}
		
		[Association(Name="FK_MM_MethodParameter_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_MethodParameter.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_MethodParameter.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_MM_MethodParameter_Method", Storage="_Method", ThisKey="MethodID", OtherKey="MethodID", IsForeignKey=true)]
		public MM_Method Method
		{
			get
			{
				return this._Method.Entity;
			}
			set
			{
				MM_Method previousValue = this._Method.Entity;
				if (((previousValue != value) 
							|| (this._Method.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Method.Entity = null;
						previousValue.MethodParameters.Remove(this);
					}
					this._Method.Entity = value;
					if ((value != null))
					{
						value.MethodParameters.Add(this);
						this._MethodID = value.MethodID;
					}
					else
					{
						this._MethodID = default(int);
					}
					this.SendPropertyChanged("Method");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MM_ObjectProperty")]
	public partial class MM_ObjectProperty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ObjectPropertyID;
		
		private int _ObjectTypeID;
		
		private string _Title;
		
		private string _SysName;
		
		private int _SeqNo;
		
		private char _TypeCode;
		
		private System.Guid _Guid;
		
		private bool _IsMultilingual;
		
		private bool _IsPrimaryKey;
		
		private bool _IsSystem;
		
		private System.Nullable<int> _RefObjectPropertyID;
		
		private System.Nullable<int> _RefObjectTypeID;
		
		private bool _IsNavigable;
		
		private bool _IsAggregate;
		
		private int _LowerBound;
		
		private int _UpperBound;
		
		private System.Nullable<int> _CodifierID;
		
		private string _Expression;
		
		private bool _IsReferenceToVersion;
		
		private string _ValueFilter;
		
		private System.Nullable<int> _Precision;
		
		private System.Nullable<int> _Scale;
		
		private System.Nullable<int> _Length;
		
		private char _DeleteRule;
		
		private char _KindCode;
		
		private string _DefaultDBValue;
		
		private string _Description;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsIdentity;
		
		private EntitySet<MM_FormField> _MM_FormField;
		
		private EntitySet<MM_FormFieldGroup> _MM_FormFieldGroup;
		
		private EntityRef<MM_Codifier> _Codifier;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<MM_ObjectType> _ObjectType;
		
		private EntityRef<MM_ObjectProperty> _RefObjectProperty;
		
		private EntitySet<MM_ObjectProperty> _ObjectProperty;
		
		private EntityRef<MM_ObjectType> _RefObjectType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObjectPropertyIDChanging(int value);
    partial void OnObjectPropertyIDChanged();
    partial void OnObjectTypeIDChanging(int value);
    partial void OnObjectTypeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnTypeCodeChanging(char value);
    partial void OnTypeCodeChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnIsMultilingualChanging(bool value);
    partial void OnIsMultilingualChanged();
    partial void OnIsPrimaryKeyChanging(bool value);
    partial void OnIsPrimaryKeyChanged();
    partial void OnIsSystemChanging(bool value);
    partial void OnIsSystemChanged();
    partial void OnRefObjectPropertyIDChanging(System.Nullable<int> value);
    partial void OnRefObjectPropertyIDChanged();
    partial void OnRefObjectTypeIDChanging(System.Nullable<int> value);
    partial void OnRefObjectTypeIDChanged();
    partial void OnIsNavigableChanging(bool value);
    partial void OnIsNavigableChanged();
    partial void OnIsAggregateChanging(bool value);
    partial void OnIsAggregateChanged();
    partial void OnLowerBoundChanging(int value);
    partial void OnLowerBoundChanged();
    partial void OnUpperBoundChanging(int value);
    partial void OnUpperBoundChanged();
    partial void OnCodifierIDChanging(System.Nullable<int> value);
    partial void OnCodifierIDChanged();
    partial void OnExpressionChanging(string value);
    partial void OnExpressionChanged();
    partial void OnIsReferenceToVersionChanging(bool value);
    partial void OnIsReferenceToVersionChanged();
    partial void OnValueFilterChanging(string value);
    partial void OnValueFilterChanged();
    partial void OnPrecisionChanging(System.Nullable<int> value);
    partial void OnPrecisionChanged();
    partial void OnScaleChanging(System.Nullable<int> value);
    partial void OnScaleChanged();
    partial void OnLengthChanging(System.Nullable<int> value);
    partial void OnLengthChanged();
    partial void OnDeleteRuleChanging(char value);
    partial void OnDeleteRuleChanged();
    partial void OnKindCodeChanging(char value);
    partial void OnKindCodeChanged();
    partial void OnDefaultDBValueChanging(string value);
    partial void OnDefaultDBValueChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsIdentityChanging(bool value);
    partial void OnIsIdentityChanged();
    #endregion
		
		public MM_ObjectProperty()
		{
			this._MM_FormField = new EntitySet<MM_FormField>(new Action<MM_FormField>(this.attach_MM_FormField), new Action<MM_FormField>(this.detach_MM_FormField));
			this._MM_FormFieldGroup = new EntitySet<MM_FormFieldGroup>(new Action<MM_FormFieldGroup>(this.attach_MM_FormFieldGroup), new Action<MM_FormFieldGroup>(this.detach_MM_FormFieldGroup));
			this._Codifier = default(EntityRef<MM_Codifier>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ObjectType = default(EntityRef<MM_ObjectType>);
			this._RefObjectProperty = default(EntityRef<MM_ObjectProperty>);
			this._ObjectProperty = new EntitySet<MM_ObjectProperty>(new Action<MM_ObjectProperty>(this.attach_ObjectProperty), new Action<MM_ObjectProperty>(this.detach_ObjectProperty));
			this._RefObjectType = default(EntityRef<MM_ObjectType>);
			OnCreated();
		}
		
		[Column(Storage="_ObjectPropertyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ObjectPropertyID
		{
			get
			{
				return this._ObjectPropertyID;
			}
			set
			{
				if ((this._ObjectPropertyID != value))
				{
					this.OnObjectPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectPropertyID = value;
					this.SendPropertyChanged("ObjectPropertyID");
					this.OnObjectPropertyIDChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_TypeCode", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char TypeCode
		{
			get
			{
				return this._TypeCode;
			}
			set
			{
				if ((this._TypeCode != value))
				{
					this.OnTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._TypeCode = value;
					this.SendPropertyChanged("TypeCode");
					this.OnTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_IsMultilingual", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsMultilingual
		{
			get
			{
				return this._IsMultilingual;
			}
			set
			{
				if ((this._IsMultilingual != value))
				{
					this.OnIsMultilingualChanging(value);
					this.SendPropertyChanging();
					this._IsMultilingual = value;
					this.SendPropertyChanged("IsMultilingual");
					this.OnIsMultilingualChanged();
				}
			}
		}
		
		[Column(Storage="_IsPrimaryKey", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsPrimaryKey
		{
			get
			{
				return this._IsPrimaryKey;
			}
			set
			{
				if ((this._IsPrimaryKey != value))
				{
					this.OnIsPrimaryKeyChanging(value);
					this.SendPropertyChanging();
					this._IsPrimaryKey = value;
					this.SendPropertyChanged("IsPrimaryKey");
					this.OnIsPrimaryKeyChanged();
				}
			}
		}
		
		[Column(Storage="_IsSystem", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSystem
		{
			get
			{
				return this._IsSystem;
			}
			set
			{
				if ((this._IsSystem != value))
				{
					this.OnIsSystemChanging(value);
					this.SendPropertyChanging();
					this._IsSystem = value;
					this.SendPropertyChanged("IsSystem");
					this.OnIsSystemChanged();
				}
			}
		}
		
		[Column(Storage="_RefObjectPropertyID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RefObjectPropertyID
		{
			get
			{
				return this._RefObjectPropertyID;
			}
			set
			{
				if ((this._RefObjectPropertyID != value))
				{
					if (this._RefObjectProperty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRefObjectPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._RefObjectPropertyID = value;
					this.SendPropertyChanged("RefObjectPropertyID");
					this.OnRefObjectPropertyIDChanged();
				}
			}
		}
		
		[Column(Storage="_RefObjectTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RefObjectTypeID
		{
			get
			{
				return this._RefObjectTypeID;
			}
			set
			{
				if ((this._RefObjectTypeID != value))
				{
					if (this._RefObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRefObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RefObjectTypeID = value;
					this.SendPropertyChanged("RefObjectTypeID");
					this.OnRefObjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsNavigable", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsNavigable
		{
			get
			{
				return this._IsNavigable;
			}
			set
			{
				if ((this._IsNavigable != value))
				{
					this.OnIsNavigableChanging(value);
					this.SendPropertyChanging();
					this._IsNavigable = value;
					this.SendPropertyChanged("IsNavigable");
					this.OnIsNavigableChanged();
				}
			}
		}
		
		[Column(Storage="_IsAggregate", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsAggregate
		{
			get
			{
				return this._IsAggregate;
			}
			set
			{
				if ((this._IsAggregate != value))
				{
					this.OnIsAggregateChanging(value);
					this.SendPropertyChanging();
					this._IsAggregate = value;
					this.SendPropertyChanged("IsAggregate");
					this.OnIsAggregateChanged();
				}
			}
		}
		
		[Column(Storage="_LowerBound", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LowerBound
		{
			get
			{
				return this._LowerBound;
			}
			set
			{
				if ((this._LowerBound != value))
				{
					this.OnLowerBoundChanging(value);
					this.SendPropertyChanging();
					this._LowerBound = value;
					this.SendPropertyChanged("LowerBound");
					this.OnLowerBoundChanged();
				}
			}
		}
		
		[Column(Storage="_UpperBound", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpperBound
		{
			get
			{
				return this._UpperBound;
			}
			set
			{
				if ((this._UpperBound != value))
				{
					this.OnUpperBoundChanging(value);
					this.SendPropertyChanging();
					this._UpperBound = value;
					this.SendPropertyChanged("UpperBound");
					this.OnUpperBoundChanged();
				}
			}
		}
		
		[Column(Storage="_CodifierID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CodifierID
		{
			get
			{
				return this._CodifierID;
			}
			set
			{
				if ((this._CodifierID != value))
				{
					if (this._Codifier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodifierIDChanging(value);
					this.SendPropertyChanging();
					this._CodifierID = value;
					this.SendPropertyChanged("CodifierID");
					this.OnCodifierIDChanged();
				}
			}
		}
		
		[Column(Storage="_Expression", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Expression
		{
			get
			{
				return this._Expression;
			}
			set
			{
				if ((this._Expression != value))
				{
					this.OnExpressionChanging(value);
					this.SendPropertyChanging();
					this._Expression = value;
					this.SendPropertyChanged("Expression");
					this.OnExpressionChanged();
				}
			}
		}
		
		[Column(Storage="_IsReferenceToVersion", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsReferenceToVersion
		{
			get
			{
				return this._IsReferenceToVersion;
			}
			set
			{
				if ((this._IsReferenceToVersion != value))
				{
					this.OnIsReferenceToVersionChanging(value);
					this.SendPropertyChanging();
					this._IsReferenceToVersion = value;
					this.SendPropertyChanged("IsReferenceToVersion");
					this.OnIsReferenceToVersionChanged();
				}
			}
		}
		
		[Column(Storage="_ValueFilter", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ValueFilter
		{
			get
			{
				return this._ValueFilter;
			}
			set
			{
				if ((this._ValueFilter != value))
				{
					this.OnValueFilterChanging(value);
					this.SendPropertyChanging();
					this._ValueFilter = value;
					this.SendPropertyChanged("ValueFilter");
					this.OnValueFilterChanged();
				}
			}
		}
		
		[Column(Storage="_Precision", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Precision
		{
			get
			{
				return this._Precision;
			}
			set
			{
				if ((this._Precision != value))
				{
					this.OnPrecisionChanging(value);
					this.SendPropertyChanging();
					this._Precision = value;
					this.SendPropertyChanged("Precision");
					this.OnPrecisionChanged();
				}
			}
		}
		
		[Column(Storage="_Scale", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Scale
		{
			get
			{
				return this._Scale;
			}
			set
			{
				if ((this._Scale != value))
				{
					this.OnScaleChanging(value);
					this.SendPropertyChanging();
					this._Scale = value;
					this.SendPropertyChanged("Scale");
					this.OnScaleChanged();
				}
			}
		}
		
		[Column(Storage="_Length", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_DeleteRule", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char DeleteRule
		{
			get
			{
				return this._DeleteRule;
			}
			set
			{
				if ((this._DeleteRule != value))
				{
					this.OnDeleteRuleChanging(value);
					this.SendPropertyChanging();
					this._DeleteRule = value;
					this.SendPropertyChanged("DeleteRule");
					this.OnDeleteRuleChanged();
				}
			}
		}
		
		[Column(Storage="_KindCode", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char KindCode
		{
			get
			{
				return this._KindCode;
			}
			set
			{
				if ((this._KindCode != value))
				{
					this.OnKindCodeChanging(value);
					this.SendPropertyChanging();
					this._KindCode = value;
					this.SendPropertyChanged("KindCode");
					this.OnKindCodeChanged();
				}
			}
		}
		
		[Column(Storage="_DefaultDBValue", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DefaultDBValue
		{
			get
			{
				return this._DefaultDBValue;
			}
			set
			{
				if ((this._DefaultDBValue != value))
				{
					this.OnDefaultDBValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultDBValue = value;
					this.SendPropertyChanged("DefaultDBValue");
					this.OnDefaultDBValueChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsIdentity", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsIdentity
		{
			get
			{
				return this._IsIdentity;
			}
			set
			{
				if ((this._IsIdentity != value))
				{
					this.OnIsIdentityChanging(value);
					this.SendPropertyChanging();
					this._IsIdentity = value;
					this.SendPropertyChanged("IsIdentity");
					this.OnIsIdentityChanged();
				}
			}
		}
		
		[Association(Name="FK_MM_FormField_ObjectProperty", Storage="_MM_FormField", ThisKey="ObjectPropertyID", OtherKey="ObjectPropertyID", DeleteRule="CASCADE")]
		public EntitySet<MM_FormField> MM_FormField
		{
			get
			{
				return this._MM_FormField;
			}
			set
			{
				this._MM_FormField.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_FormFieldGroup_SelectObjectProperty", Storage="_MM_FormFieldGroup", ThisKey="ObjectPropertyID", OtherKey="SelectObjectPropertyID", DeleteRule="NO ACTION")]
		public EntitySet<MM_FormFieldGroup> MM_FormFieldGroup
		{
			get
			{
				return this._MM_FormFieldGroup;
			}
			set
			{
				this._MM_FormFieldGroup.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_ObjectProperty_Codifier", Storage="_Codifier", ThisKey="CodifierID", OtherKey="CodifierID", IsForeignKey=true)]
		public MM_Codifier Codifier
		{
			get
			{
				return this._Codifier.Entity;
			}
			set
			{
				MM_Codifier previousValue = this._Codifier.Entity;
				if (((previousValue != value) 
							|| (this._Codifier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Codifier.Entity = null;
						previousValue.MM_ObjectProperty.Remove(this);
					}
					this._Codifier.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectProperty.Add(this);
						this._CodifierID = value.CodifierID;
					}
					else
					{
						this._CodifierID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Codifier");
				}
			}
		}
		
		[Association(Name="FK_MM_ObjectProperty_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_ObjectProperty.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectProperty.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_MM_ObjectProperty_ObjectType", Storage="_ObjectType", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", IsForeignKey=true)]
		public MM_ObjectType ObjectType
		{
			get
			{
				return this._ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._ObjectType.Entity;
				if (((previousValue != value) 
							|| (this._ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectType.Entity = null;
						previousValue.Properties.Remove(this);
					}
					this._ObjectType.Entity = value;
					if ((value != null))
					{
						value.Properties.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(int);
					}
					this.SendPropertyChanged("ObjectType");
				}
			}
		}
		
		[Association(Name="FK_MM_ObjectProperty_RefObjectProperty", Storage="_RefObjectProperty", ThisKey="RefObjectPropertyID", OtherKey="ObjectPropertyID", IsForeignKey=true)]
		public MM_ObjectProperty RefObjectProperty
		{
			get
			{
				return this._RefObjectProperty.Entity;
			}
			set
			{
				MM_ObjectProperty previousValue = this._RefObjectProperty.Entity;
				if (((previousValue != value) 
							|| (this._RefObjectProperty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefObjectProperty.Entity = null;
						previousValue.ObjectProperty.Remove(this);
					}
					this._RefObjectProperty.Entity = value;
					if ((value != null))
					{
						value.ObjectProperty.Add(this);
						this._RefObjectPropertyID = value.ObjectPropertyID;
					}
					else
					{
						this._RefObjectPropertyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RefObjectProperty");
				}
			}
		}
		
		[Association(Name="FK_MM_ObjectProperty_RefObjectProperty", Storage="_ObjectProperty", ThisKey="ObjectPropertyID", OtherKey="RefObjectPropertyID", DeleteRule="NO ACTION")]
		public EntitySet<MM_ObjectProperty> ObjectProperty
		{
			get
			{
				return this._ObjectProperty;
			}
			set
			{
				this._ObjectProperty.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_ObjectProperty_RefObjectType", Storage="_RefObjectType", ThisKey="RefObjectTypeID", OtherKey="ObjectTypeID", IsForeignKey=true)]
		public MM_ObjectType RefObjectType
		{
			get
			{
				return this._RefObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._RefObjectType.Entity;
				if (((previousValue != value) 
							|| (this._RefObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefObjectType.Entity = null;
						previousValue.ObjectType.Remove(this);
					}
					this._RefObjectType.Entity = value;
					if ((value != null))
					{
						value.ObjectType.Add(this);
						this._RefObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._RefObjectTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RefObjectType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MM_FormField(MM_FormField entity)
		{
			this.SendPropertyChanging();
			entity.ObjectProperty = this;
		}
		
		private void detach_MM_FormField(MM_FormField entity)
		{
			this.SendPropertyChanging();
			entity.ObjectProperty = null;
		}
		
		private void attach_MM_FormFieldGroup(MM_FormFieldGroup entity)
		{
			this.SendPropertyChanging();
			entity.SelectObjectProperty = this;
		}
		
		private void detach_MM_FormFieldGroup(MM_FormFieldGroup entity)
		{
			this.SendPropertyChanging();
			entity.SelectObjectProperty = null;
		}
		
		private void attach_ObjectProperty(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.RefObjectProperty = this;
		}
		
		private void detach_ObjectProperty(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.RefObjectProperty = null;
		}
	}
	
	[Table(Name="dbo.MM_ObjectType")]
	public partial class MM_ObjectType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ObjectTypeID;
		
		private string _Title;
		
		private string _SysName;
		
		private bool _IsEnableSPM;
		
		private int _PackageID;
		
		private System.Guid _Guid;
		
		private bool _IsSeparateTable;
		
		private bool _IsTemplate;
		
		private string _TitlePlural;
		
		private System.Nullable<int> _BaseObjectTypeID;
		
		private string _DefaultOrderBy;
		
		private string _LogicalDelete;
		
		private bool _IsReplicate;
		
		private bool _IsEnableUserViews;
		
		private string _SecurityPackageSystemName;
		
		private bool _IsEnableObjectHistory;
		
		private string _Interface;
		
		private char _HistoryTypeCode;
		
		private bool _IsDataReplicated;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private int _SeqNo;
		
		private string _Description;
		
		private EntitySet<HST_MM_FormView> _HST_MM_FormView;
		
		private EntitySet<MM_DataValidation> _MM_DataValidation;
		
		private EntitySet<MM_FormFieldGroup> _FormFieldGroups;
		
		private EntitySet<MM_FormView> _FormViews;
		
		private EntitySet<MM_Method> _Methods;
		
		private EntitySet<MM_MethodGroup> _MM_MethodGroup;
		
		private EntitySet<MM_ObjectProperty> _Properties;
		
		private EntitySet<MM_ObjectProperty> _ObjectType;
		
		private EntityRef<MM_ObjectType> _BaseObjectType;
		
		private EntitySet<MM_ObjectType> _MM_ObjectType_BaseObjectType;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<MM_Package> _Package;
		
		private EntitySet<MM_ObjectTypeStereotypes> _MM_ObjectTypeStereotypes;
		
		private EntitySet<MM_ObjectTypeStereotypes> _MM_ObjectTypeStereotypes_Stereotypes;
		
		private EntitySet<MM_Predicate> _DataValidations;
		
		private EntityRef<MMA_SiteInfoobjects> _MMA_SiteInfoobjects;
		
		private EntityRef<MMS_ChangeLog> _MMS_ChangeLog;
		
		private EntityRef<MMS_ClassStereotype> _MMS_ClassStereotype;
		
		private EntityRef<MMS_Replication> _MMS_Replication;
		
		private EntityRef<MMS_Versioning> _MMS_Versioning;
		
		private EntitySet<WF_Workflow> _WF_Workflow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObjectTypeIDChanging(int value);
    partial void OnObjectTypeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnIsEnableSPMChanging(bool value);
    partial void OnIsEnableSPMChanged();
    partial void OnPackageIDChanging(int value);
    partial void OnPackageIDChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnIsSeparateTableChanging(bool value);
    partial void OnIsSeparateTableChanged();
    partial void OnIsTemplateChanging(bool value);
    partial void OnIsTemplateChanged();
    partial void OnTitlePluralChanging(string value);
    partial void OnTitlePluralChanged();
    partial void OnBaseObjectTypeIDChanging(System.Nullable<int> value);
    partial void OnBaseObjectTypeIDChanged();
    partial void OnDefaultOrderByChanging(string value);
    partial void OnDefaultOrderByChanged();
    partial void OnLogicalDeleteChanging(string value);
    partial void OnLogicalDeleteChanged();
    partial void OnIsReplicateChanging(bool value);
    partial void OnIsReplicateChanged();
    partial void OnIsEnableUserViewsChanging(bool value);
    partial void OnIsEnableUserViewsChanged();
    partial void OnSecurityPackageSystemNameChanging(string value);
    partial void OnSecurityPackageSystemNameChanged();
    partial void OnIsEnableObjectHistoryChanging(bool value);
    partial void OnIsEnableObjectHistoryChanged();
    partial void OnInterfaceChanging(string value);
    partial void OnInterfaceChanged();
    partial void OnHistoryTypeCodeChanging(char value);
    partial void OnHistoryTypeCodeChanged();
    partial void OnIsDataReplicatedChanging(bool value);
    partial void OnIsDataReplicatedChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MM_ObjectType()
		{
			this._HST_MM_FormView = new EntitySet<HST_MM_FormView>(new Action<HST_MM_FormView>(this.attach_HST_MM_FormView), new Action<HST_MM_FormView>(this.detach_HST_MM_FormView));
			this._MM_DataValidation = new EntitySet<MM_DataValidation>(new Action<MM_DataValidation>(this.attach_MM_DataValidation), new Action<MM_DataValidation>(this.detach_MM_DataValidation));
			this._FormFieldGroups = new EntitySet<MM_FormFieldGroup>(new Action<MM_FormFieldGroup>(this.attach_FormFieldGroups), new Action<MM_FormFieldGroup>(this.detach_FormFieldGroups));
			this._FormViews = new EntitySet<MM_FormView>(new Action<MM_FormView>(this.attach_FormViews), new Action<MM_FormView>(this.detach_FormViews));
			this._Methods = new EntitySet<MM_Method>(new Action<MM_Method>(this.attach_Methods), new Action<MM_Method>(this.detach_Methods));
			this._MM_MethodGroup = new EntitySet<MM_MethodGroup>(new Action<MM_MethodGroup>(this.attach_MM_MethodGroup), new Action<MM_MethodGroup>(this.detach_MM_MethodGroup));
			this._Properties = new EntitySet<MM_ObjectProperty>(new Action<MM_ObjectProperty>(this.attach_Properties), new Action<MM_ObjectProperty>(this.detach_Properties));
			this._ObjectType = new EntitySet<MM_ObjectProperty>(new Action<MM_ObjectProperty>(this.attach_ObjectType), new Action<MM_ObjectProperty>(this.detach_ObjectType));
			this._BaseObjectType = default(EntityRef<MM_ObjectType>);
			this._MM_ObjectType_BaseObjectType = new EntitySet<MM_ObjectType>(new Action<MM_ObjectType>(this.attach_MM_ObjectType_BaseObjectType), new Action<MM_ObjectType>(this.detach_MM_ObjectType_BaseObjectType));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Package = default(EntityRef<MM_Package>);
			this._MM_ObjectTypeStereotypes = new EntitySet<MM_ObjectTypeStereotypes>(new Action<MM_ObjectTypeStereotypes>(this.attach_MM_ObjectTypeStereotypes), new Action<MM_ObjectTypeStereotypes>(this.detach_MM_ObjectTypeStereotypes));
			this._MM_ObjectTypeStereotypes_Stereotypes = new EntitySet<MM_ObjectTypeStereotypes>(new Action<MM_ObjectTypeStereotypes>(this.attach_MM_ObjectTypeStereotypes_Stereotypes), new Action<MM_ObjectTypeStereotypes>(this.detach_MM_ObjectTypeStereotypes_Stereotypes));
			this._DataValidations = new EntitySet<MM_Predicate>(new Action<MM_Predicate>(this.attach_DataValidations), new Action<MM_Predicate>(this.detach_DataValidations));
			this._MMA_SiteInfoobjects = default(EntityRef<MMA_SiteInfoobjects>);
			this._MMS_ChangeLog = default(EntityRef<MMS_ChangeLog>);
			this._MMS_ClassStereotype = default(EntityRef<MMS_ClassStereotype>);
			this._MMS_Replication = default(EntityRef<MMS_Replication>);
			this._MMS_Versioning = default(EntityRef<MMS_Versioning>);
			this._WF_Workflow = new EntitySet<WF_Workflow>(new Action<WF_Workflow>(this.attach_WF_Workflow), new Action<WF_Workflow>(this.detach_WF_Workflow));
			OnCreated();
		}
		
		[Column(Storage="_ObjectTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnableSPM", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsEnableSPM
		{
			get
			{
				return this._IsEnableSPM;
			}
			set
			{
				if ((this._IsEnableSPM != value))
				{
					this.OnIsEnableSPMChanging(value);
					this.SendPropertyChanging();
					this._IsEnableSPM = value;
					this.SendPropertyChanged("IsEnableSPM");
					this.OnIsEnableSPMChanged();
				}
			}
		}
		
		[Column(Storage="_PackageID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_IsSeparateTable", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSeparateTable
		{
			get
			{
				return this._IsSeparateTable;
			}
			set
			{
				if ((this._IsSeparateTable != value))
				{
					this.OnIsSeparateTableChanging(value);
					this.SendPropertyChanging();
					this._IsSeparateTable = value;
					this.SendPropertyChanged("IsSeparateTable");
					this.OnIsSeparateTableChanged();
				}
			}
		}
		
		[Column(Storage="_IsTemplate", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsTemplate
		{
			get
			{
				return this._IsTemplate;
			}
			set
			{
				if ((this._IsTemplate != value))
				{
					this.OnIsTemplateChanging(value);
					this.SendPropertyChanging();
					this._IsTemplate = value;
					this.SendPropertyChanged("IsTemplate");
					this.OnIsTemplateChanged();
				}
			}
		}
		
		[Column(Storage="_TitlePlural", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string TitlePlural
		{
			get
			{
				return this._TitlePlural;
			}
			set
			{
				if ((this._TitlePlural != value))
				{
					this.OnTitlePluralChanging(value);
					this.SendPropertyChanging();
					this._TitlePlural = value;
					this.SendPropertyChanged("TitlePlural");
					this.OnTitlePluralChanged();
				}
			}
		}
		
		[Column(Storage="_BaseObjectTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> BaseObjectTypeID
		{
			get
			{
				return this._BaseObjectTypeID;
			}
			set
			{
				if ((this._BaseObjectTypeID != value))
				{
					if (this._BaseObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BaseObjectTypeID = value;
					this.SendPropertyChanged("BaseObjectTypeID");
					this.OnBaseObjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefaultOrderBy", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DefaultOrderBy
		{
			get
			{
				return this._DefaultOrderBy;
			}
			set
			{
				if ((this._DefaultOrderBy != value))
				{
					this.OnDefaultOrderByChanging(value);
					this.SendPropertyChanging();
					this._DefaultOrderBy = value;
					this.SendPropertyChanged("DefaultOrderBy");
					this.OnDefaultOrderByChanged();
				}
			}
		}
		
		[Column(Storage="_LogicalDelete", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string LogicalDelete
		{
			get
			{
				return this._LogicalDelete;
			}
			set
			{
				if ((this._LogicalDelete != value))
				{
					this.OnLogicalDeleteChanging(value);
					this.SendPropertyChanging();
					this._LogicalDelete = value;
					this.SendPropertyChanged("LogicalDelete");
					this.OnLogicalDeleteChanged();
				}
			}
		}
		
		[Column(Storage="_IsReplicate", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsReplicate
		{
			get
			{
				return this._IsReplicate;
			}
			set
			{
				if ((this._IsReplicate != value))
				{
					this.OnIsReplicateChanging(value);
					this.SendPropertyChanging();
					this._IsReplicate = value;
					this.SendPropertyChanged("IsReplicate");
					this.OnIsReplicateChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnableUserViews", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsEnableUserViews
		{
			get
			{
				return this._IsEnableUserViews;
			}
			set
			{
				if ((this._IsEnableUserViews != value))
				{
					this.OnIsEnableUserViewsChanging(value);
					this.SendPropertyChanging();
					this._IsEnableUserViews = value;
					this.SendPropertyChanged("IsEnableUserViews");
					this.OnIsEnableUserViewsChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityPackageSystemName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SecurityPackageSystemName
		{
			get
			{
				return this._SecurityPackageSystemName;
			}
			set
			{
				if ((this._SecurityPackageSystemName != value))
				{
					this.OnSecurityPackageSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SecurityPackageSystemName = value;
					this.SendPropertyChanged("SecurityPackageSystemName");
					this.OnSecurityPackageSystemNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnableObjectHistory", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsEnableObjectHistory
		{
			get
			{
				return this._IsEnableObjectHistory;
			}
			set
			{
				if ((this._IsEnableObjectHistory != value))
				{
					this.OnIsEnableObjectHistoryChanging(value);
					this.SendPropertyChanging();
					this._IsEnableObjectHistory = value;
					this.SendPropertyChanged("IsEnableObjectHistory");
					this.OnIsEnableObjectHistoryChanged();
				}
			}
		}
		
		[Column(Storage="_Interface", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Interface
		{
			get
			{
				return this._Interface;
			}
			set
			{
				if ((this._Interface != value))
				{
					this.OnInterfaceChanging(value);
					this.SendPropertyChanging();
					this._Interface = value;
					this.SendPropertyChanged("Interface");
					this.OnInterfaceChanged();
				}
			}
		}
		
		[Column(Storage="_HistoryTypeCode", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char HistoryTypeCode
		{
			get
			{
				return this._HistoryTypeCode;
			}
			set
			{
				if ((this._HistoryTypeCode != value))
				{
					this.OnHistoryTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._HistoryTypeCode = value;
					this.SendPropertyChanged("HistoryTypeCode");
					this.OnHistoryTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_IsDataReplicated", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDataReplicated
		{
			get
			{
				return this._IsDataReplicated;
			}
			set
			{
				if ((this._IsDataReplicated != value))
				{
					this.OnIsDataReplicatedChanging(value);
					this.SendPropertyChanging();
					this._IsDataReplicated = value;
					this.SendPropertyChanged("IsDataReplicated");
					this.OnIsDataReplicatedChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="FK_HST_MM_FormView_ObjectType", Storage="_HST_MM_FormView", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", DeleteRule="NO ACTION")]
		public EntitySet<HST_MM_FormView> HST_MM_FormView
		{
			get
			{
				return this._HST_MM_FormView;
			}
			set
			{
				this._HST_MM_FormView.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_DataValidation_ObjectType", Storage="_MM_DataValidation", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", DeleteRule="NO ACTION")]
		public EntitySet<MM_DataValidation> MM_DataValidation
		{
			get
			{
				return this._MM_DataValidation;
			}
			set
			{
				this._MM_DataValidation.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_FormFieldGroup_ObjectType", Storage="_FormFieldGroups", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", DeleteRule="NO ACTION")]
		public EntitySet<MM_FormFieldGroup> FormFieldGroups
		{
			get
			{
				return this._FormFieldGroups;
			}
			set
			{
				this._FormFieldGroups.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_FormView_ObjectType", Storage="_FormViews", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", DeleteRule="NO ACTION")]
		public EntitySet<MM_FormView> FormViews
		{
			get
			{
				return this._FormViews;
			}
			set
			{
				this._FormViews.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_Method_ObjectType", Storage="_Methods", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", DeleteRule="NO ACTION")]
		public EntitySet<MM_Method> Methods
		{
			get
			{
				return this._Methods;
			}
			set
			{
				this._Methods.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_MethodGroup_MM_ObjectType", Storage="_MM_MethodGroup", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", DeleteRule="CASCADE")]
		public EntitySet<MM_MethodGroup> MM_MethodGroup
		{
			get
			{
				return this._MM_MethodGroup;
			}
			set
			{
				this._MM_MethodGroup.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_ObjectProperty_ObjectType", Storage="_Properties", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", DeleteRule="NO ACTION")]
		public EntitySet<MM_ObjectProperty> Properties
		{
			get
			{
				return this._Properties;
			}
			set
			{
				this._Properties.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_ObjectProperty_RefObjectType", Storage="_ObjectType", ThisKey="ObjectTypeID", OtherKey="RefObjectTypeID", DeleteRule="NO ACTION")]
		public EntitySet<MM_ObjectProperty> ObjectType
		{
			get
			{
				return this._ObjectType;
			}
			set
			{
				this._ObjectType.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_ObjectType_BaseObjectType", Storage="_BaseObjectType", ThisKey="BaseObjectTypeID", OtherKey="ObjectTypeID", IsForeignKey=true)]
		public MM_ObjectType BaseObjectType
		{
			get
			{
				return this._BaseObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._BaseObjectType.Entity;
				if (((previousValue != value) 
							|| (this._BaseObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseObjectType.Entity = null;
						previousValue.MM_ObjectType_BaseObjectType.Remove(this);
					}
					this._BaseObjectType.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectType_BaseObjectType.Add(this);
						this._BaseObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._BaseObjectTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BaseObjectType");
				}
			}
		}
		
		[Association(Name="FK_MM_ObjectType_BaseObjectType", Storage="_MM_ObjectType_BaseObjectType", ThisKey="ObjectTypeID", OtherKey="BaseObjectTypeID", DeleteRule="NO ACTION")]
		public EntitySet<MM_ObjectType> MM_ObjectType_BaseObjectType
		{
			get
			{
				return this._MM_ObjectType_BaseObjectType;
			}
			set
			{
				this._MM_ObjectType_BaseObjectType.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_ObjectType_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_ObjectType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_MM_ObjectType_Package", Storage="_Package", ThisKey="PackageID", OtherKey="PackageID", IsForeignKey=true)]
		public MM_Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				MM_Package previousValue = this._Package.Entity;
				if (((previousValue != value) 
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.ObjectTypes.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.ObjectTypes.Add(this);
						this._PackageID = value.PackageID;
					}
					else
					{
						this._PackageID = default(int);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}
		
		[Association(Name="FK_MM_ObjectTypeStereotypes_MM_ObjectType", Storage="_MM_ObjectTypeStereotypes", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", DeleteRule="CASCADE")]
		public EntitySet<MM_ObjectTypeStereotypes> MM_ObjectTypeStereotypes
		{
			get
			{
				return this._MM_ObjectTypeStereotypes;
			}
			set
			{
				this._MM_ObjectTypeStereotypes.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_ObjectTypeStereotypes_Stereotypes", Storage="_MM_ObjectTypeStereotypes_Stereotypes", ThisKey="ObjectTypeID", OtherKey="StereotypesID", DeleteRule="NO ACTION")]
		public EntitySet<MM_ObjectTypeStereotypes> MM_ObjectTypeStereotypes_Stereotypes
		{
			get
			{
				return this._MM_ObjectTypeStereotypes_Stereotypes;
			}
			set
			{
				this._MM_ObjectTypeStereotypes_Stereotypes.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_Predicate_ObjectType", Storage="_DataValidations", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", DeleteRule="NO ACTION")]
		public EntitySet<MM_Predicate> DataValidations
		{
			get
			{
				return this._DataValidations;
			}
			set
			{
				this._DataValidations.Assign(value);
			}
		}
		
		[Association(Name="FK_MMA_SiteInfoobjects_MM_ObjectType", Storage="_MMA_SiteInfoobjects", ThisKey="ObjectTypeID", OtherKey="SiteInfoobjectsID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public MMA_SiteInfoobjects MMA_SiteInfoobjects
		{
			get
			{
				return this._MMA_SiteInfoobjects.Entity;
			}
			set
			{
				MMA_SiteInfoobjects previousValue = this._MMA_SiteInfoobjects.Entity;
				if (((previousValue != value) 
							|| (this._MMA_SiteInfoobjects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MMA_SiteInfoobjects.Entity = null;
						previousValue.MM_ObjectType = null;
					}
					this._MMA_SiteInfoobjects.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectType = this;
					}
					this.SendPropertyChanged("MMA_SiteInfoobjects");
				}
			}
		}
		
		[Association(Name="FK_MMS_ChangeLog_MM_ObjectType", Storage="_MMS_ChangeLog", ThisKey="ObjectTypeID", OtherKey="ChangeLogID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public MMS_ChangeLog MMS_ChangeLog
		{
			get
			{
				return this._MMS_ChangeLog.Entity;
			}
			set
			{
				MMS_ChangeLog previousValue = this._MMS_ChangeLog.Entity;
				if (((previousValue != value) 
							|| (this._MMS_ChangeLog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MMS_ChangeLog.Entity = null;
						previousValue.MM_ObjectType = null;
					}
					this._MMS_ChangeLog.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectType = this;
					}
					this.SendPropertyChanged("MMS_ChangeLog");
				}
			}
		}
		
		[Association(Name="FK_MMS_ClassStereotype_MM_ObjectType", Storage="_MMS_ClassStereotype", ThisKey="ObjectTypeID", OtherKey="ClassStereotypeID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public MMS_ClassStereotype MMS_ClassStereotype
		{
			get
			{
				return this._MMS_ClassStereotype.Entity;
			}
			set
			{
				MMS_ClassStereotype previousValue = this._MMS_ClassStereotype.Entity;
				if (((previousValue != value) 
							|| (this._MMS_ClassStereotype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MMS_ClassStereotype.Entity = null;
						previousValue.MM_ObjectType = null;
					}
					this._MMS_ClassStereotype.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectType = this;
					}
					this.SendPropertyChanged("MMS_ClassStereotype");
				}
			}
		}
		
		[Association(Name="FK_MMS_Replication_MM_ObjectType", Storage="_MMS_Replication", ThisKey="ObjectTypeID", OtherKey="ReplicationID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public MMS_Replication MMS_Replication
		{
			get
			{
				return this._MMS_Replication.Entity;
			}
			set
			{
				MMS_Replication previousValue = this._MMS_Replication.Entity;
				if (((previousValue != value) 
							|| (this._MMS_Replication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MMS_Replication.Entity = null;
						previousValue.MM_ObjectType = null;
					}
					this._MMS_Replication.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectType = this;
					}
					this.SendPropertyChanged("MMS_Replication");
				}
			}
		}
		
		[Association(Name="FK_MMS_Versioning_MM_ObjectType", Storage="_MMS_Versioning", ThisKey="ObjectTypeID", OtherKey="VersioningID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public MMS_Versioning MMS_Versioning
		{
			get
			{
				return this._MMS_Versioning.Entity;
			}
			set
			{
				MMS_Versioning previousValue = this._MMS_Versioning.Entity;
				if (((previousValue != value) 
							|| (this._MMS_Versioning.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MMS_Versioning.Entity = null;
						previousValue.MM_ObjectType = null;
					}
					this._MMS_Versioning.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectType = this;
					}
					this.SendPropertyChanged("MMS_Versioning");
				}
			}
		}
		
		[Association(Name="FK_WF_Workflow_ObjectType", Storage="_WF_Workflow", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", DeleteRule="NO ACTION")]
		public EntitySet<WF_Workflow> WF_Workflow
		{
			get
			{
				return this._WF_Workflow;
			}
			set
			{
				this._WF_Workflow.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HST_MM_FormView(HST_MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = this;
		}
		
		private void detach_HST_MM_FormView(HST_MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = null;
		}
		
		private void attach_MM_DataValidation(MM_DataValidation entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = this;
		}
		
		private void detach_MM_DataValidation(MM_DataValidation entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = null;
		}
		
		private void attach_FormFieldGroups(MM_FormFieldGroup entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = this;
		}
		
		private void detach_FormFieldGroups(MM_FormFieldGroup entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = null;
		}
		
		private void attach_FormViews(MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = this;
		}
		
		private void detach_FormViews(MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = null;
		}
		
		private void attach_Methods(MM_Method entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = this;
		}
		
		private void detach_Methods(MM_Method entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = null;
		}
		
		private void attach_MM_MethodGroup(MM_MethodGroup entity)
		{
			this.SendPropertyChanging();
			entity.MM_ObjectType = this;
		}
		
		private void detach_MM_MethodGroup(MM_MethodGroup entity)
		{
			this.SendPropertyChanging();
			entity.MM_ObjectType = null;
		}
		
		private void attach_Properties(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = this;
		}
		
		private void detach_Properties(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = null;
		}
		
		private void attach_ObjectType(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.RefObjectType = this;
		}
		
		private void detach_ObjectType(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.RefObjectType = null;
		}
		
		private void attach_MM_ObjectType_BaseObjectType(MM_ObjectType entity)
		{
			this.SendPropertyChanging();
			entity.BaseObjectType = this;
		}
		
		private void detach_MM_ObjectType_BaseObjectType(MM_ObjectType entity)
		{
			this.SendPropertyChanging();
			entity.BaseObjectType = null;
		}
		
		private void attach_MM_ObjectTypeStereotypes(MM_ObjectTypeStereotypes entity)
		{
			this.SendPropertyChanging();
			entity.MM_ObjectType = this;
		}
		
		private void detach_MM_ObjectTypeStereotypes(MM_ObjectTypeStereotypes entity)
		{
			this.SendPropertyChanging();
			entity.MM_ObjectType = null;
		}
		
		private void attach_MM_ObjectTypeStereotypes_Stereotypes(MM_ObjectTypeStereotypes entity)
		{
			this.SendPropertyChanging();
			entity.Stereotypes = this;
		}
		
		private void detach_MM_ObjectTypeStereotypes_Stereotypes(MM_ObjectTypeStereotypes entity)
		{
			this.SendPropertyChanging();
			entity.Stereotypes = null;
		}
		
		private void attach_DataValidations(MM_Predicate entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = this;
		}
		
		private void detach_DataValidations(MM_Predicate entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = null;
		}
		
		private void attach_WF_Workflow(WF_Workflow entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = this;
		}
		
		private void detach_WF_Workflow(WF_Workflow entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = null;
		}
	}
	
	[Table(Name="dbo.MM_ObjectTypeStereotypes")]
	public partial class MM_ObjectTypeStereotypes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ObjectTypeID;
		
		private int _StereotypesID;
		
		private EntityRef<MM_ObjectType> _MM_ObjectType;
		
		private EntityRef<MM_ObjectType> _Stereotypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObjectTypeIDChanging(int value);
    partial void OnObjectTypeIDChanged();
    partial void OnStereotypesIDChanging(int value);
    partial void OnStereotypesIDChanged();
    #endregion
		
		public MM_ObjectTypeStereotypes()
		{
			this._MM_ObjectType = default(EntityRef<MM_ObjectType>);
			this._Stereotypes = default(EntityRef<MM_ObjectType>);
			OnCreated();
		}
		
		[Column(Storage="_ObjectTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._MM_ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_StereotypesID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StereotypesID
		{
			get
			{
				return this._StereotypesID;
			}
			set
			{
				if ((this._StereotypesID != value))
				{
					if (this._Stereotypes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStereotypesIDChanging(value);
					this.SendPropertyChanging();
					this._StereotypesID = value;
					this.SendPropertyChanged("StereotypesID");
					this.OnStereotypesIDChanged();
				}
			}
		}
		
		[Association(Name="FK_MM_ObjectTypeStereotypes_MM_ObjectType", Storage="_MM_ObjectType", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", IsForeignKey=true, DeleteOnNull=true)]
		public MM_ObjectType MM_ObjectType
		{
			get
			{
				return this._MM_ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._MM_ObjectType.Entity;
				if (((previousValue != value) 
							|| (this._MM_ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_ObjectType.Entity = null;
						previousValue.MM_ObjectTypeStereotypes.Remove(this);
					}
					this._MM_ObjectType.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectTypeStereotypes.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(int);
					}
					this.SendPropertyChanged("MM_ObjectType");
				}
			}
		}
		
		[Association(Name="FK_MM_ObjectTypeStereotypes_Stereotypes", Storage="_Stereotypes", ThisKey="StereotypesID", OtherKey="ObjectTypeID", IsForeignKey=true)]
		public MM_ObjectType Stereotypes
		{
			get
			{
				return this._Stereotypes.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._Stereotypes.Entity;
				if (((previousValue != value) 
							|| (this._Stereotypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stereotypes.Entity = null;
						previousValue.MM_ObjectTypeStereotypes_Stereotypes.Remove(this);
					}
					this._Stereotypes.Entity = value;
					if ((value != null))
					{
						value.MM_ObjectTypeStereotypes_Stereotypes.Add(this);
						this._StereotypesID = value.ObjectTypeID;
					}
					else
					{
						this._StereotypesID = default(int);
					}
					this.SendPropertyChanged("Stereotypes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MM_Package")]
	public partial class MM_Package : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PackageID;
		
		private string _Title;
		
		private string _SysName;
		
		private System.Nullable<int> _ParentPackageID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private System.Guid _Guid;
		
		private bool _IsDataReplicated;
		
		private int _SeqNo;
		
		private string _Version;
		
		private EntitySet<HST_MM_FormView> _HST_MM_FormView;
		
		private EntitySet<MM_Codifier> _Codifiers;
		
		private EntitySet<MM_FormView> _MM_FormView;
		
		private EntitySet<MM_ObjectType> _ObjectTypes;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<MM_Package> _ParentPackage;
		
		private EntitySet<MM_Package> _ChildPackages;
		
		private EntitySet<SPM_Action> _SPM_Action;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPackageIDChanging(int value);
    partial void OnPackageIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnParentPackageIDChanging(System.Nullable<int> value);
    partial void OnParentPackageIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnIsDataReplicatedChanging(bool value);
    partial void OnIsDataReplicatedChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    #endregion
		
		public MM_Package()
		{
			this._HST_MM_FormView = new EntitySet<HST_MM_FormView>(new Action<HST_MM_FormView>(this.attach_HST_MM_FormView), new Action<HST_MM_FormView>(this.detach_HST_MM_FormView));
			this._Codifiers = new EntitySet<MM_Codifier>(new Action<MM_Codifier>(this.attach_Codifiers), new Action<MM_Codifier>(this.detach_Codifiers));
			this._MM_FormView = new EntitySet<MM_FormView>(new Action<MM_FormView>(this.attach_MM_FormView), new Action<MM_FormView>(this.detach_MM_FormView));
			this._ObjectTypes = new EntitySet<MM_ObjectType>(new Action<MM_ObjectType>(this.attach_ObjectTypes), new Action<MM_ObjectType>(this.detach_ObjectTypes));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ParentPackage = default(EntityRef<MM_Package>);
			this._ChildPackages = new EntitySet<MM_Package>(new Action<MM_Package>(this.attach_ChildPackages), new Action<MM_Package>(this.detach_ChildPackages));
			this._SPM_Action = new EntitySet<SPM_Action>(new Action<SPM_Action>(this.attach_SPM_Action), new Action<SPM_Action>(this.detach_SPM_Action));
			OnCreated();
		}
		
		[Column(Storage="_PackageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_ParentPackageID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ParentPackageID
		{
			get
			{
				return this._ParentPackageID;
			}
			set
			{
				if ((this._ParentPackageID != value))
				{
					if (this._ParentPackage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentPackageIDChanging(value);
					this.SendPropertyChanging();
					this._ParentPackageID = value;
					this.SendPropertyChanged("ParentPackageID");
					this.OnParentPackageIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_IsDataReplicated", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDataReplicated
		{
			get
			{
				return this._IsDataReplicated;
			}
			set
			{
				if ((this._IsDataReplicated != value))
				{
					this.OnIsDataReplicatedChanging(value);
					this.SendPropertyChanging();
					this._IsDataReplicated = value;
					this.SendPropertyChanged("IsDataReplicated");
					this.OnIsDataReplicatedChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_Version", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Association(Name="FK_HST_MM_FormView_Package", Storage="_HST_MM_FormView", ThisKey="PackageID", OtherKey="PackageID", DeleteRule="NO ACTION")]
		public EntitySet<HST_MM_FormView> HST_MM_FormView
		{
			get
			{
				return this._HST_MM_FormView;
			}
			set
			{
				this._HST_MM_FormView.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_Codifier_Package", Storage="_Codifiers", ThisKey="PackageID", OtherKey="PackageID", DeleteRule="NO ACTION")]
		public EntitySet<MM_Codifier> Codifiers
		{
			get
			{
				return this._Codifiers;
			}
			set
			{
				this._Codifiers.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_FormView_Package", Storage="_MM_FormView", ThisKey="PackageID", OtherKey="PackageID", DeleteRule="NO ACTION")]
		public EntitySet<MM_FormView> MM_FormView
		{
			get
			{
				return this._MM_FormView;
			}
			set
			{
				this._MM_FormView.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_ObjectType_Package", Storage="_ObjectTypes", ThisKey="PackageID", OtherKey="PackageID", DeleteRule="NO ACTION")]
		public EntitySet<MM_ObjectType> ObjectTypes
		{
			get
			{
				return this._ObjectTypes;
			}
			set
			{
				this._ObjectTypes.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_Package_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_Package.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_Package.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_MM_Package_ParentPackage", Storage="_ParentPackage", ThisKey="ParentPackageID", OtherKey="PackageID", IsForeignKey=true)]
		public MM_Package ParentPackage
		{
			get
			{
				return this._ParentPackage.Entity;
			}
			set
			{
				MM_Package previousValue = this._ParentPackage.Entity;
				if (((previousValue != value) 
							|| (this._ParentPackage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentPackage.Entity = null;
						previousValue.ChildPackages.Remove(this);
					}
					this._ParentPackage.Entity = value;
					if ((value != null))
					{
						value.ChildPackages.Add(this);
						this._ParentPackageID = value.PackageID;
					}
					else
					{
						this._ParentPackageID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ParentPackage");
				}
			}
		}
		
		[Association(Name="FK_MM_Package_ParentPackage", Storage="_ChildPackages", ThisKey="PackageID", OtherKey="ParentPackageID", DeleteRule="NO ACTION")]
		public EntitySet<MM_Package> ChildPackages
		{
			get
			{
				return this._ChildPackages;
			}
			set
			{
				this._ChildPackages.Assign(value);
			}
		}
		
		[Association(Name="FK_SPM_Action_Package", Storage="_SPM_Action", ThisKey="PackageID", OtherKey="PackageID", DeleteRule="NO ACTION")]
		public EntitySet<SPM_Action> SPM_Action
		{
			get
			{
				return this._SPM_Action;
			}
			set
			{
				this._SPM_Action.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HST_MM_FormView(HST_MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}
		
		private void detach_HST_MM_FormView(HST_MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}
		
		private void attach_Codifiers(MM_Codifier entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}
		
		private void detach_Codifiers(MM_Codifier entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}
		
		private void attach_MM_FormView(MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}
		
		private void detach_MM_FormView(MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}
		
		private void attach_ObjectTypes(MM_ObjectType entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}
		
		private void detach_ObjectTypes(MM_ObjectType entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}
		
		private void attach_ChildPackages(MM_Package entity)
		{
			this.SendPropertyChanging();
			entity.ParentPackage = this;
		}
		
		private void detach_ChildPackages(MM_Package entity)
		{
			this.SendPropertyChanging();
			entity.ParentPackage = null;
		}
		
		private void attach_SPM_Action(SPM_Action entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}
		
		private void detach_SPM_Action(SPM_Action entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}
	}
	
	[Table(Name="dbo.MM_Predicate")]
	public partial class MM_Predicate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PredicateGUID;
		
		private string _Body;
		
		private string _DesignerData;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Message;
		
		private int _ObjectTypeID;
		
		private string _Title;
		
		private char _Type;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<MM_ObjectType> _ObjectType;
		
		private EntitySet<SPM_Action> _SPM_Action;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPredicateGUIDChanging(System.Guid value);
    partial void OnPredicateGUIDChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnDesignerDataChanging(string value);
    partial void OnDesignerDataChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnObjectTypeIDChanging(int value);
    partial void OnObjectTypeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTypeChanging(char value);
    partial void OnTypeChanged();
    #endregion
		
		public MM_Predicate()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ObjectType = default(EntityRef<MM_ObjectType>);
			this._SPM_Action = new EntitySet<SPM_Action>(new Action<SPM_Action>(this.attach_SPM_Action), new Action<SPM_Action>(this.detach_SPM_Action));
			OnCreated();
		}
		
		[Column(Storage="_PredicateGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PredicateGUID
		{
			get
			{
				return this._PredicateGUID;
			}
			set
			{
				if ((this._PredicateGUID != value))
				{
					this.OnPredicateGUIDChanging(value);
					this.SendPropertyChanging();
					this._PredicateGUID = value;
					this.SendPropertyChanged("PredicateGUID");
					this.OnPredicateGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_DesignerData", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DesignerData
		{
			get
			{
				return this._DesignerData;
			}
			set
			{
				if ((this._DesignerData != value))
				{
					this.OnDesignerDataChanging(value);
					this.SendPropertyChanging();
					this._DesignerData = value;
					this.SendPropertyChanged("DesignerData");
					this.OnDesignerDataChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Association(Name="FK_MM_Predicate_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.MM_Predicate.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.MM_Predicate.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_MM_Predicate_ObjectType", Storage="_ObjectType", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", IsForeignKey=true)]
		public MM_ObjectType ObjectType
		{
			get
			{
				return this._ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._ObjectType.Entity;
				if (((previousValue != value) 
							|| (this._ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectType.Entity = null;
						previousValue.DataValidations.Remove(this);
					}
					this._ObjectType.Entity = value;
					if ((value != null))
					{
						value.DataValidations.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(int);
					}
					this.SendPropertyChanged("ObjectType");
				}
			}
		}
		
		[Association(Name="FK_SPM_Action_Predicate", Storage="_SPM_Action", ThisKey="PredicateGUID", OtherKey="PredicateGUID", DeleteRule="NO ACTION")]
		public EntitySet<SPM_Action> SPM_Action
		{
			get
			{
				return this._SPM_Action;
			}
			set
			{
				this._SPM_Action.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SPM_Action(SPM_Action entity)
		{
			this.SendPropertyChanging();
			entity.Predicate = this;
		}
		
		private void detach_SPM_Action(SPM_Action entity)
		{
			this.SendPropertyChanging();
			entity.Predicate = null;
		}
	}
	
	[Table(Name="dbo.MM_TaggedValueType")]
	public partial class MM_TaggedValueType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaggedValueTypeID;
		
		private string _Title;
		
		private string _SysName;
		
		private char _TypeCode;
		
		private char _ElementTypeCode;
		
		private int _GroupID;
		
		private System.Guid _Guid;
		
		private int _ControlName;
		
		private int _SeqNo;
		
		private EntityRef<MM_Group> _MM_Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaggedValueTypeIDChanging(int value);
    partial void OnTaggedValueTypeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnTypeCodeChanging(char value);
    partial void OnTypeCodeChanged();
    partial void OnElementTypeCodeChanging(char value);
    partial void OnElementTypeCodeChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnControlNameChanging(int value);
    partial void OnControlNameChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    #endregion
		
		public MM_TaggedValueType()
		{
			this._MM_Group = default(EntityRef<MM_Group>);
			OnCreated();
		}
		
		[Column(Storage="_TaggedValueTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaggedValueTypeID
		{
			get
			{
				return this._TaggedValueTypeID;
			}
			set
			{
				if ((this._TaggedValueTypeID != value))
				{
					this.OnTaggedValueTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TaggedValueTypeID = value;
					this.SendPropertyChanged("TaggedValueTypeID");
					this.OnTaggedValueTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_TypeCode", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char TypeCode
		{
			get
			{
				return this._TypeCode;
			}
			set
			{
				if ((this._TypeCode != value))
				{
					this.OnTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._TypeCode = value;
					this.SendPropertyChanged("TypeCode");
					this.OnTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ElementTypeCode", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char ElementTypeCode
		{
			get
			{
				return this._ElementTypeCode;
			}
			set
			{
				if ((this._ElementTypeCode != value))
				{
					this.OnElementTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._ElementTypeCode = value;
					this.SendPropertyChanged("ElementTypeCode");
					this.OnElementTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_GroupID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._MM_Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_ControlName", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ControlName
		{
			get
			{
				return this._ControlName;
			}
			set
			{
				if ((this._ControlName != value))
				{
					this.OnControlNameChanging(value);
					this.SendPropertyChanging();
					this._ControlName = value;
					this.SendPropertyChanged("ControlName");
					this.OnControlNameChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Association(Name="FK_MM_TaggedValueType_MM_Group", Storage="_MM_Group", ThisKey="GroupID", OtherKey="GroupID", IsForeignKey=true, DeleteOnNull=true)]
		public MM_Group MM_Group
		{
			get
			{
				return this._MM_Group.Entity;
			}
			set
			{
				MM_Group previousValue = this._MM_Group.Entity;
				if (((previousValue != value) 
							|| (this._MM_Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_Group.Entity = null;
						previousValue.MM_TaggedValueType.Remove(this);
					}
					this._MM_Group.Entity = value;
					if ((value != null))
					{
						value.MM_TaggedValueType.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("MM_Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MMA_SiteInfoobjects")]
	public partial class MMA_SiteInfoobjects : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SiteInfoobjectsID;
		
		private bool _IsFolder;
		
		private bool _IsRoot;
		
		private EntityRef<MM_ObjectType> _MM_ObjectType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSiteInfoobjectsIDChanging(int value);
    partial void OnSiteInfoobjectsIDChanged();
    partial void OnIsFolderChanging(bool value);
    partial void OnIsFolderChanged();
    partial void OnIsRootChanging(bool value);
    partial void OnIsRootChanged();
    #endregion
		
		public MMA_SiteInfoobjects()
		{
			this._MM_ObjectType = default(EntityRef<MM_ObjectType>);
			OnCreated();
		}
		
		[Column(Storage="_SiteInfoobjectsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SiteInfoobjectsID
		{
			get
			{
				return this._SiteInfoobjectsID;
			}
			set
			{
				if ((this._SiteInfoobjectsID != value))
				{
					if (this._MM_ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteInfoobjectsIDChanging(value);
					this.SendPropertyChanging();
					this._SiteInfoobjectsID = value;
					this.SendPropertyChanged("SiteInfoobjectsID");
					this.OnSiteInfoobjectsIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsFolder", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsFolder
		{
			get
			{
				return this._IsFolder;
			}
			set
			{
				if ((this._IsFolder != value))
				{
					this.OnIsFolderChanging(value);
					this.SendPropertyChanging();
					this._IsFolder = value;
					this.SendPropertyChanged("IsFolder");
					this.OnIsFolderChanged();
				}
			}
		}
		
		[Column(Storage="_IsRoot", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsRoot
		{
			get
			{
				return this._IsRoot;
			}
			set
			{
				if ((this._IsRoot != value))
				{
					this.OnIsRootChanging(value);
					this.SendPropertyChanging();
					this._IsRoot = value;
					this.SendPropertyChanged("IsRoot");
					this.OnIsRootChanged();
				}
			}
		}
		
		[Association(Name="FK_MMA_SiteInfoobjects_MM_ObjectType", Storage="_MM_ObjectType", ThisKey="SiteInfoobjectsID", OtherKey="ObjectTypeID", IsForeignKey=true, DeleteOnNull=true)]
		public MM_ObjectType MM_ObjectType
		{
			get
			{
				return this._MM_ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._MM_ObjectType.Entity;
				if (((previousValue != value) 
							|| (this._MM_ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_ObjectType.Entity = null;
						previousValue.MMA_SiteInfoobjects = null;
					}
					this._MM_ObjectType.Entity = value;
					if ((value != null))
					{
						value.MMA_SiteInfoobjects = this;
						this._SiteInfoobjectsID = value.ObjectTypeID;
					}
					else
					{
						this._SiteInfoobjectsID = default(int);
					}
					this.SendPropertyChanged("MM_ObjectType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MMS_ChangeLog")]
	public partial class MMS_ChangeLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChangeLogID;
		
		private EntityRef<MM_ObjectType> _MM_ObjectType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChangeLogIDChanging(int value);
    partial void OnChangeLogIDChanged();
    #endregion
		
		public MMS_ChangeLog()
		{
			this._MM_ObjectType = default(EntityRef<MM_ObjectType>);
			OnCreated();
		}
		
		[Column(Storage="_ChangeLogID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ChangeLogID
		{
			get
			{
				return this._ChangeLogID;
			}
			set
			{
				if ((this._ChangeLogID != value))
				{
					if (this._MM_ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChangeLogIDChanging(value);
					this.SendPropertyChanging();
					this._ChangeLogID = value;
					this.SendPropertyChanged("ChangeLogID");
					this.OnChangeLogIDChanged();
				}
			}
		}
		
		[Association(Name="FK_MMS_ChangeLog_MM_ObjectType", Storage="_MM_ObjectType", ThisKey="ChangeLogID", OtherKey="ObjectTypeID", IsForeignKey=true, DeleteOnNull=true)]
		public MM_ObjectType MM_ObjectType
		{
			get
			{
				return this._MM_ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._MM_ObjectType.Entity;
				if (((previousValue != value) 
							|| (this._MM_ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_ObjectType.Entity = null;
						previousValue.MMS_ChangeLog = null;
					}
					this._MM_ObjectType.Entity = value;
					if ((value != null))
					{
						value.MMS_ChangeLog = this;
						this._ChangeLogID = value.ObjectTypeID;
					}
					else
					{
						this._ChangeLogID = default(int);
					}
					this.SendPropertyChanged("MM_ObjectType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MMS_ClassStereotype")]
	public partial class MMS_ClassStereotype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassStereotypeID;
		
		private EntityRef<MM_ObjectType> _MM_ObjectType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassStereotypeIDChanging(int value);
    partial void OnClassStereotypeIDChanged();
    #endregion
		
		public MMS_ClassStereotype()
		{
			this._MM_ObjectType = default(EntityRef<MM_ObjectType>);
			OnCreated();
		}
		
		[Column(Storage="_ClassStereotypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ClassStereotypeID
		{
			get
			{
				return this._ClassStereotypeID;
			}
			set
			{
				if ((this._ClassStereotypeID != value))
				{
					if (this._MM_ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassStereotypeIDChanging(value);
					this.SendPropertyChanging();
					this._ClassStereotypeID = value;
					this.SendPropertyChanged("ClassStereotypeID");
					this.OnClassStereotypeIDChanged();
				}
			}
		}
		
		[Association(Name="FK_MMS_ClassStereotype_MM_ObjectType", Storage="_MM_ObjectType", ThisKey="ClassStereotypeID", OtherKey="ObjectTypeID", IsForeignKey=true, DeleteOnNull=true)]
		public MM_ObjectType MM_ObjectType
		{
			get
			{
				return this._MM_ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._MM_ObjectType.Entity;
				if (((previousValue != value) 
							|| (this._MM_ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_ObjectType.Entity = null;
						previousValue.MMS_ClassStereotype = null;
					}
					this._MM_ObjectType.Entity = value;
					if ((value != null))
					{
						value.MMS_ClassStereotype = this;
						this._ClassStereotypeID = value.ObjectTypeID;
					}
					else
					{
						this._ClassStereotypeID = default(int);
					}
					this.SendPropertyChanged("MM_ObjectType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MMS_Replication")]
	public partial class MMS_Replication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReplicationID;
		
		private EntityRef<MM_ObjectType> _MM_ObjectType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReplicationIDChanging(int value);
    partial void OnReplicationIDChanged();
    #endregion
		
		public MMS_Replication()
		{
			this._MM_ObjectType = default(EntityRef<MM_ObjectType>);
			OnCreated();
		}
		
		[Column(Storage="_ReplicationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReplicationID
		{
			get
			{
				return this._ReplicationID;
			}
			set
			{
				if ((this._ReplicationID != value))
				{
					if (this._MM_ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ReplicationID = value;
					this.SendPropertyChanged("ReplicationID");
					this.OnReplicationIDChanged();
				}
			}
		}
		
		[Association(Name="FK_MMS_Replication_MM_ObjectType", Storage="_MM_ObjectType", ThisKey="ReplicationID", OtherKey="ObjectTypeID", IsForeignKey=true, DeleteOnNull=true)]
		public MM_ObjectType MM_ObjectType
		{
			get
			{
				return this._MM_ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._MM_ObjectType.Entity;
				if (((previousValue != value) 
							|| (this._MM_ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_ObjectType.Entity = null;
						previousValue.MMS_Replication = null;
					}
					this._MM_ObjectType.Entity = value;
					if ((value != null))
					{
						value.MMS_Replication = this;
						this._ReplicationID = value.ObjectTypeID;
					}
					else
					{
						this._ReplicationID = default(int);
					}
					this.SendPropertyChanged("MM_ObjectType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MMS_Versioning")]
	public partial class MMS_Versioning : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VersioningID;
		
		private char _Type;
		
		private EntityRef<MM_ObjectType> _MM_ObjectType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVersioningIDChanging(int value);
    partial void OnVersioningIDChanged();
    partial void OnTypeChanging(char value);
    partial void OnTypeChanged();
    #endregion
		
		public MMS_Versioning()
		{
			this._MM_ObjectType = default(EntityRef<MM_ObjectType>);
			OnCreated();
		}
		
		[Column(Storage="_VersioningID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VersioningID
		{
			get
			{
				return this._VersioningID;
			}
			set
			{
				if ((this._VersioningID != value))
				{
					if (this._MM_ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVersioningIDChanging(value);
					this.SendPropertyChanging();
					this._VersioningID = value;
					this.SendPropertyChanged("VersioningID");
					this.OnVersioningIDChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Association(Name="FK_MMS_Versioning_MM_ObjectType", Storage="_MM_ObjectType", ThisKey="VersioningID", OtherKey="ObjectTypeID", IsForeignKey=true, DeleteOnNull=true)]
		public MM_ObjectType MM_ObjectType
		{
			get
			{
				return this._MM_ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._MM_ObjectType.Entity;
				if (((previousValue != value) 
							|| (this._MM_ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_ObjectType.Entity = null;
						previousValue.MMS_Versioning = null;
					}
					this._MM_ObjectType.Entity = value;
					if ((value != null))
					{
						value.MMS_Versioning = this;
						this._VersioningID = value.ObjectTypeID;
					}
					else
					{
						this._VersioningID = default(int);
					}
					this.SendPropertyChanged("MM_ObjectType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.N_Cache")]
	public partial class N_Cache : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _TimeStamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    #endregion
		
		public N_Cache()
		{
			OnCreated();
		}
		
		[Column(Storage="_TimeStamp", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.N_DDL")]
	public partial class N_DDL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DDLID;
		
		private System.DateTime _LastModifiedDate;
		
		private string _Title;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDDLIDChanging(int value);
    partial void OnDDLIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public N_DDL()
		{
			OnCreated();
		}
		
		[Column(Storage="_DDLID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DDLID
		{
			get
			{
				return this._DDLID;
			}
			set
			{
				if ((this._DDLID != value))
				{
					this.OnDDLIDChanging(value);
					this.SendPropertyChanging();
					this._DDLID = value;
					this.SendPropertyChanged("DDLID");
					this.OnDDLIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.N_DownloadLog")]
	public partial class N_DownloadLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DownloadLogID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private int _FileID;
		
		private string _IP;
		
		private EntityRef<N_File> _File;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDownloadLogIDChanging(int value);
    partial void OnDownloadLogIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnFileIDChanging(int value);
    partial void OnFileIDChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    #endregion
		
		public N_DownloadLog()
		{
			this._File = default(EntityRef<N_File>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_DownloadLogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DownloadLogID
		{
			get
			{
				return this._DownloadLogID;
			}
			set
			{
				if ((this._DownloadLogID != value))
				{
					this.OnDownloadLogIDChanging(value);
					this.SendPropertyChanging();
					this._DownloadLogID = value;
					this.SendPropertyChanged("DownloadLogID");
					this.OnDownloadLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					if (this._File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}
		
		[Column(Storage="_IP", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[Association(Name="FK_N_DownloadLog_File", Storage="_File", ThisKey="FileID", OtherKey="FileID", IsForeignKey=true, DeleteOnNull=true)]
		public N_File File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				N_File previousValue = this._File.Entity;
				if (((previousValue != value) 
							|| (this._File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File.Entity = null;
						previousValue.N_DownloadLog.Remove(this);
					}
					this._File.Entity = value;
					if ((value != null))
					{
						value.N_DownloadLog.Add(this);
						this._FileID = value.FileID;
					}
					else
					{
						this._FileID = default(int);
					}
					this.SendPropertyChanged("File");
				}
			}
		}
		
		[Association(Name="FK_N_DownloadLog_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.N_DownloadLog.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.N_DownloadLog.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.N_File")]
	public partial class N_File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FileID;
		
		private long _Length;
		
		private string _Title;
		
		private System.Guid _Guid;
		
		private bool _IsDiskStorage;
		
		private string _Extension;
		
		private string _Path;
		
		private System.DateTime _LastModifiedDate;
		
		private System.Nullable<int> _FolderID;
		
		private int _LastModifiedUserID;
		
		private char _StorageType;
		
		private string _StorageParameter;
		
		private string _Password;
		
		private string _GuidPath;
		
		private System.Nullable<System.Guid> _FeatureGUID;
		
		private System.Nullable<int> _CheckedOutByID;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private int _VersionNumber;
		
		private System.Nullable<System.Guid> _MainGUID;
		
		private string _Tag;
		
		private int _CreatorID;
		
		private System.Nullable<System.DateTime> _PublishDate;
		
		private bool _IsDeleted;
		
		private System.Data.Linq.Binary _DataHash;
		
		private EntitySet<C_FGADocument> _C_FGADocument;
		
		private EntitySet<C_FGADocumentSigner> _C_FGADocumentSigner;
		
		private EntitySet<Employee> _Employee;
		
		private EntitySet<Employee> _File;
		
		private EntitySet<N_DownloadLog> _N_DownloadLog;
		
		private EntityRef<SPM_Subject> _CheckedOutBy;
		
		private EntityRef<SPM_Subject> _Creator;
		
		private EntityRef<N_Folder> _Folder;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<N_FileListItem> _N_FileListItem;
		
		private EntitySet<PaymentOrder> _PaymentOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileIDChanging(int value);
    partial void OnFileIDChanged();
    partial void OnLengthChanging(long value);
    partial void OnLengthChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnIsDiskStorageChanging(bool value);
    partial void OnIsDiskStorageChanged();
    partial void OnExtensionChanging(string value);
    partial void OnExtensionChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnFolderIDChanging(System.Nullable<int> value);
    partial void OnFolderIDChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnStorageTypeChanging(char value);
    partial void OnStorageTypeChanged();
    partial void OnStorageParameterChanging(string value);
    partial void OnStorageParameterChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnGuidPathChanging(string value);
    partial void OnGuidPathChanged();
    partial void OnFeatureGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFeatureGUIDChanged();
    partial void OnCheckedOutByIDChanging(System.Nullable<int> value);
    partial void OnCheckedOutByIDChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnVersionNumberChanging(int value);
    partial void OnVersionNumberChanged();
    partial void OnMainGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnMainGUIDChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    partial void OnCreatorIDChanging(int value);
    partial void OnCreatorIDChanged();
    partial void OnPublishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnDataHashChanging(System.Data.Linq.Binary value);
    partial void OnDataHashChanged();
    #endregion
		
		public N_File()
		{
			this._C_FGADocument = new EntitySet<C_FGADocument>(new Action<C_FGADocument>(this.attach_C_FGADocument), new Action<C_FGADocument>(this.detach_C_FGADocument));
			this._C_FGADocumentSigner = new EntitySet<C_FGADocumentSigner>(new Action<C_FGADocumentSigner>(this.attach_C_FGADocumentSigner), new Action<C_FGADocumentSigner>(this.detach_C_FGADocumentSigner));
			this._Employee = new EntitySet<Employee>(new Action<Employee>(this.attach_Employee), new Action<Employee>(this.detach_Employee));
			this._File = new EntitySet<Employee>(new Action<Employee>(this.attach_File), new Action<Employee>(this.detach_File));
			this._N_DownloadLog = new EntitySet<N_DownloadLog>(new Action<N_DownloadLog>(this.attach_N_DownloadLog), new Action<N_DownloadLog>(this.detach_N_DownloadLog));
			this._CheckedOutBy = default(EntityRef<SPM_Subject>);
			this._Creator = default(EntityRef<SPM_Subject>);
			this._Folder = default(EntityRef<N_Folder>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._N_FileListItem = new EntitySet<N_FileListItem>(new Action<N_FileListItem>(this.attach_N_FileListItem), new Action<N_FileListItem>(this.detach_N_FileListItem));
			this._PaymentOrder = new EntitySet<PaymentOrder>(new Action<PaymentOrder>(this.attach_PaymentOrder), new Action<PaymentOrder>(this.detach_PaymentOrder));
			OnCreated();
		}
		
		[Column(Storage="_FileID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}
		
		[Column(Storage="_Length", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_IsDiskStorage", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDiskStorage
		{
			get
			{
				return this._IsDiskStorage;
			}
			set
			{
				if ((this._IsDiskStorage != value))
				{
					this.OnIsDiskStorageChanging(value);
					this.SendPropertyChanging();
					this._IsDiskStorage = value;
					this.SendPropertyChanged("IsDiskStorage");
					this.OnIsDiskStorageChanged();
				}
			}
		}
		
		[Column(Storage="_Extension", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this.OnExtensionChanging(value);
					this.SendPropertyChanging();
					this._Extension = value;
					this.SendPropertyChanged("Extension");
					this.OnExtensionChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_FolderID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FolderID
		{
			get
			{
				return this._FolderID;
			}
			set
			{
				if ((this._FolderID != value))
				{
					if (this._Folder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFolderIDChanging(value);
					this.SendPropertyChanging();
					this._FolderID = value;
					this.SendPropertyChanged("FolderID");
					this.OnFolderIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char StorageType
		{
			get
			{
				return this._StorageType;
			}
			set
			{
				if ((this._StorageType != value))
				{
					this.OnStorageTypeChanging(value);
					this.SendPropertyChanging();
					this._StorageType = value;
					this.SendPropertyChanged("StorageType");
					this.OnStorageTypeChanged();
				}
			}
		}
		
		[Column(Storage="_StorageParameter", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string StorageParameter
		{
			get
			{
				return this._StorageParameter;
			}
			set
			{
				if ((this._StorageParameter != value))
				{
					this.OnStorageParameterChanging(value);
					this.SendPropertyChanging();
					this._StorageParameter = value;
					this.SendPropertyChanged("StorageParameter");
					this.OnStorageParameterChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_GuidPath", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string GuidPath
		{
			get
			{
				return this._GuidPath;
			}
			set
			{
				if ((this._GuidPath != value))
				{
					this.OnGuidPathChanging(value);
					this.SendPropertyChanging();
					this._GuidPath = value;
					this.SendPropertyChanged("GuidPath");
					this.OnGuidPathChanged();
				}
			}
		}
		
		[Column(Storage="_FeatureGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FeatureGUID
		{
			get
			{
				return this._FeatureGUID;
			}
			set
			{
				if ((this._FeatureGUID != value))
				{
					this.OnFeatureGUIDChanging(value);
					this.SendPropertyChanging();
					this._FeatureGUID = value;
					this.SendPropertyChanged("FeatureGUID");
					this.OnFeatureGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_CheckedOutByID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CheckedOutByID
		{
			get
			{
				return this._CheckedOutByID;
			}
			set
			{
				if ((this._CheckedOutByID != value))
				{
					if (this._CheckedOutBy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCheckedOutByIDChanging(value);
					this.SendPropertyChanging();
					this._CheckedOutByID = value;
					this.SendPropertyChanged("CheckedOutByID");
					this.OnCheckedOutByIDChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_VersionNumber", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionNumber
		{
			get
			{
				return this._VersionNumber;
			}
			set
			{
				if ((this._VersionNumber != value))
				{
					this.OnVersionNumberChanging(value);
					this.SendPropertyChanging();
					this._VersionNumber = value;
					this.SendPropertyChanged("VersionNumber");
					this.OnVersionNumberChanged();
				}
			}
		}
		
		[Column(Storage="_MainGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> MainGUID
		{
			get
			{
				return this._MainGUID;
			}
			set
			{
				if ((this._MainGUID != value))
				{
					this.OnMainGUIDChanging(value);
					this.SendPropertyChanging();
					this._MainGUID = value;
					this.SendPropertyChanged("MainGUID");
					this.OnMainGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Tag", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[Column(Storage="_CreatorID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					if (this._Creator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorID = value;
					this.SendPropertyChanged("CreatorID");
					this.OnCreatorIDChanged();
				}
			}
		}
		
		[Column(Storage="_PublishDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_DataHash", DbType="Binary(16)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary DataHash
		{
			get
			{
				return this._DataHash;
			}
			set
			{
				if ((this._DataHash != value))
				{
					this.OnDataHashChanging(value);
					this.SendPropertyChanging();
					this._DataHash = value;
					this.SendPropertyChanged("DataHash");
					this.OnDataHashChanged();
				}
			}
		}
		
		[Association(Name="FK_C_FGADocument_Document", Storage="_C_FGADocument", ThisKey="FileID", OtherKey="DocumentFileID", DeleteRule="NO ACTION")]
		public EntitySet<C_FGADocument> C_FGADocument
		{
			get
			{
				return this._C_FGADocument;
			}
			set
			{
				this._C_FGADocument.Assign(value);
			}
		}
		
		[Association(Name="FK_C_FGADocumentSigner_Signature", Storage="_C_FGADocumentSigner", ThisKey="FileID", OtherKey="SignatureFileID", DeleteRule="NO ACTION")]
		public EntitySet<C_FGADocumentSigner> C_FGADocumentSigner
		{
			get
			{
				return this._C_FGADocumentSigner;
			}
			set
			{
				this._C_FGADocumentSigner.Assign(value);
			}
		}
		
		[Association(Name="FK_Employee_SignSample", Storage="_Employee", ThisKey="FileID", OtherKey="SignSampleFileID", DeleteRule="NO ACTION")]
		public EntitySet<Employee> Employee
		{
			get
			{
				return this._Employee;
			}
			set
			{
				this._Employee.Assign(value);
			}
		}
		
		[Association(Name="FK_Employee_StampSample", Storage="_File", ThisKey="FileID", OtherKey="StampSampleFileID", DeleteRule="NO ACTION")]
		public EntitySet<Employee> File
		{
			get
			{
				return this._File;
			}
			set
			{
				this._File.Assign(value);
			}
		}
		
		[Association(Name="FK_N_DownloadLog_File", Storage="_N_DownloadLog", ThisKey="FileID", OtherKey="FileID", DeleteRule="CASCADE")]
		public EntitySet<N_DownloadLog> N_DownloadLog
		{
			get
			{
				return this._N_DownloadLog;
			}
			set
			{
				this._N_DownloadLog.Assign(value);
			}
		}
		
		[Association(Name="FK_N_File_CheckedOutBy", Storage="_CheckedOutBy", ThisKey="CheckedOutByID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject CheckedOutBy
		{
			get
			{
				return this._CheckedOutBy.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._CheckedOutBy.Entity;
				if (((previousValue != value) 
							|| (this._CheckedOutBy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CheckedOutBy.Entity = null;
						previousValue.N_File.Remove(this);
					}
					this._CheckedOutBy.Entity = value;
					if ((value != null))
					{
						value.N_File.Add(this);
						this._CheckedOutByID = value.SubjectID;
					}
					else
					{
						this._CheckedOutByID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CheckedOutBy");
				}
			}
		}
		
		[Association(Name="FK_N_File_Creator", Storage="_Creator", ThisKey="CreatorID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject Creator
		{
			get
			{
				return this._Creator.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._Creator.Entity;
				if (((previousValue != value) 
							|| (this._Creator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Creator.Entity = null;
						previousValue.N_File_Creator.Remove(this);
					}
					this._Creator.Entity = value;
					if ((value != null))
					{
						value.N_File_Creator.Add(this);
						this._CreatorID = value.SubjectID;
					}
					else
					{
						this._CreatorID = default(int);
					}
					this.SendPropertyChanged("Creator");
				}
			}
		}
		
		[Association(Name="FK_N_File_Folder", Storage="_Folder", ThisKey="FolderID", OtherKey="FolderID", IsForeignKey=true)]
		public N_Folder Folder
		{
			get
			{
				return this._Folder.Entity;
			}
			set
			{
				N_Folder previousValue = this._Folder.Entity;
				if (((previousValue != value) 
							|| (this._Folder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Folder.Entity = null;
						previousValue.Files.Remove(this);
					}
					this._Folder.Entity = value;
					if ((value != null))
					{
						value.Files.Add(this);
						this._FolderID = value.FolderID;
					}
					else
					{
						this._FolderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Folder");
				}
			}
		}
		
		[Association(Name="FK_N_File_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.N_File_LastModifiedUser.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.N_File_LastModifiedUser.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_N_FileListItem_N_File", Storage="_N_FileListItem", ThisKey="FileID", OtherKey="FileID", DeleteRule="NO ACTION")]
		public EntitySet<N_FileListItem> N_FileListItem
		{
			get
			{
				return this._N_FileListItem;
			}
			set
			{
				this._N_FileListItem.Assign(value);
			}
		}
		
		[Association(Name="FK_PaymentOrder_Document", Storage="_PaymentOrder", ThisKey="FileID", OtherKey="DocumentFileID", DeleteRule="NO ACTION")]
		public EntitySet<PaymentOrder> PaymentOrder
		{
			get
			{
				return this._PaymentOrder;
			}
			set
			{
				this._PaymentOrder.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_FGADocument(C_FGADocument entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_C_FGADocument(C_FGADocument entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_C_FGADocumentSigner(C_FGADocumentSigner entity)
		{
			this.SendPropertyChanging();
			entity.Signature = this;
		}
		
		private void detach_C_FGADocumentSigner(C_FGADocumentSigner entity)
		{
			this.SendPropertyChanging();
			entity.Signature = null;
		}
		
		private void attach_Employee(Employee entity)
		{
			this.SendPropertyChanging();
			entity.SignSample = this;
		}
		
		private void detach_Employee(Employee entity)
		{
			this.SendPropertyChanging();
			entity.SignSample = null;
		}
		
		private void attach_File(Employee entity)
		{
			this.SendPropertyChanging();
			entity.StampSample = this;
		}
		
		private void detach_File(Employee entity)
		{
			this.SendPropertyChanging();
			entity.StampSample = null;
		}
		
		private void attach_N_DownloadLog(N_DownloadLog entity)
		{
			this.SendPropertyChanging();
			entity.File = this;
		}
		
		private void detach_N_DownloadLog(N_DownloadLog entity)
		{
			this.SendPropertyChanging();
			entity.File = null;
		}
		
		private void attach_N_FileListItem(N_FileListItem entity)
		{
			this.SendPropertyChanging();
			entity.N_File = this;
		}
		
		private void detach_N_FileListItem(N_FileListItem entity)
		{
			this.SendPropertyChanging();
			entity.N_File = null;
		}
		
		private void attach_PaymentOrder(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_PaymentOrder(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
	}
	
	[Table(Name="dbo.N_FileData")]
	public partial class N_FileData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _Data;
		
		private string _Extension;
		
		private System.Guid _FileGUID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    partial void OnExtensionChanging(string value);
    partial void OnExtensionChanged();
    partial void OnFileGUIDChanging(System.Guid value);
    partial void OnFileGUIDChanged();
    #endregion
		
		public N_FileData()
		{
			OnCreated();
		}
		
		[Column(Storage="_Data", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Column(Storage="_Extension", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this.OnExtensionChanging(value);
					this.SendPropertyChanging();
					this._Extension = value;
					this.SendPropertyChanged("Extension");
					this.OnExtensionChanged();
				}
			}
		}
		
		[Column(Storage="_FileGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid FileGUID
		{
			get
			{
				return this._FileGUID;
			}
			set
			{
				if ((this._FileGUID != value))
				{
					this.OnFileGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileGUID = value;
					this.SendPropertyChanged("FileGUID");
					this.OnFileGUIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.N_FileLibrary")]
	public partial class N_FileLibrary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FolderID;
		
		private int _MaxFileSize;
		
		private int _FileLibraryTypeID;
		
		private EntityRef<N_FileLibraryType> _FileLibraryType;
		
		private EntityRef<N_Folder> _N_Folder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFolderIDChanging(int value);
    partial void OnFolderIDChanged();
    partial void OnMaxFileSizeChanging(int value);
    partial void OnMaxFileSizeChanged();
    partial void OnFileLibraryTypeIDChanging(int value);
    partial void OnFileLibraryTypeIDChanged();
    #endregion
		
		public N_FileLibrary()
		{
			this._FileLibraryType = default(EntityRef<N_FileLibraryType>);
			this._N_Folder = default(EntityRef<N_Folder>);
			OnCreated();
		}
		
		[Column(Storage="_FolderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FolderID
		{
			get
			{
				return this._FolderID;
			}
			set
			{
				if ((this._FolderID != value))
				{
					if (this._N_Folder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFolderIDChanging(value);
					this.SendPropertyChanging();
					this._FolderID = value;
					this.SendPropertyChanged("FolderID");
					this.OnFolderIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaxFileSize", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MaxFileSize
		{
			get
			{
				return this._MaxFileSize;
			}
			set
			{
				if ((this._MaxFileSize != value))
				{
					this.OnMaxFileSizeChanging(value);
					this.SendPropertyChanging();
					this._MaxFileSize = value;
					this.SendPropertyChanged("MaxFileSize");
					this.OnMaxFileSizeChanged();
				}
			}
		}
		
		[Column(Storage="_FileLibraryTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FileLibraryTypeID
		{
			get
			{
				return this._FileLibraryTypeID;
			}
			set
			{
				if ((this._FileLibraryTypeID != value))
				{
					if (this._FileLibraryType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileLibraryTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FileLibraryTypeID = value;
					this.SendPropertyChanged("FileLibraryTypeID");
					this.OnFileLibraryTypeIDChanged();
				}
			}
		}
		
		[Association(Name="FK_N_FileLibrary_FileLibraryType", Storage="_FileLibraryType", ThisKey="FileLibraryTypeID", OtherKey="FileLibraryTypeID", IsForeignKey=true)]
		public N_FileLibraryType FileLibraryType
		{
			get
			{
				return this._FileLibraryType.Entity;
			}
			set
			{
				N_FileLibraryType previousValue = this._FileLibraryType.Entity;
				if (((previousValue != value) 
							|| (this._FileLibraryType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileLibraryType.Entity = null;
						previousValue.N_FileLibrary.Remove(this);
					}
					this._FileLibraryType.Entity = value;
					if ((value != null))
					{
						value.N_FileLibrary.Add(this);
						this._FileLibraryTypeID = value.FileLibraryTypeID;
					}
					else
					{
						this._FileLibraryTypeID = default(int);
					}
					this.SendPropertyChanged("FileLibraryType");
				}
			}
		}
		
		[Association(Name="FK_N_FileLibrary_N_Folder", Storage="_N_Folder", ThisKey="FolderID", OtherKey="FolderID", IsForeignKey=true, DeleteOnNull=true)]
		public N_Folder N_Folder
		{
			get
			{
				return this._N_Folder.Entity;
			}
			set
			{
				N_Folder previousValue = this._N_Folder.Entity;
				if (((previousValue != value) 
							|| (this._N_Folder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._N_Folder.Entity = null;
						previousValue.N_FileLibrary = null;
					}
					this._N_Folder.Entity = value;
					if ((value != null))
					{
						value.N_FileLibrary = this;
						this._FolderID = value.FolderID;
					}
					else
					{
						this._FolderID = default(int);
					}
					this.SendPropertyChanged("N_Folder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.N_FileLibraryType")]
	public partial class N_FileLibraryType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FileLibraryTypeID;
		
		private string _Extensions;
		
		private string _ClassName;
		
		private string _Title;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private EntitySet<N_FileLibrary> _N_FileLibrary;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileLibraryTypeIDChanging(int value);
    partial void OnFileLibraryTypeIDChanged();
    partial void OnExtensionsChanging(string value);
    partial void OnExtensionsChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public N_FileLibraryType()
		{
			this._N_FileLibrary = new EntitySet<N_FileLibrary>(new Action<N_FileLibrary>(this.attach_N_FileLibrary), new Action<N_FileLibrary>(this.detach_N_FileLibrary));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_FileLibraryTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FileLibraryTypeID
		{
			get
			{
				return this._FileLibraryTypeID;
			}
			set
			{
				if ((this._FileLibraryTypeID != value))
				{
					this.OnFileLibraryTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FileLibraryTypeID = value;
					this.SendPropertyChanged("FileLibraryTypeID");
					this.OnFileLibraryTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Extensions", DbType="NVarChar(1024) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Extensions
		{
			get
			{
				return this._Extensions;
			}
			set
			{
				if ((this._Extensions != value))
				{
					this.OnExtensionsChanging(value);
					this.SendPropertyChanging();
					this._Extensions = value;
					this.SendPropertyChanged("Extensions");
					this.OnExtensionsChanged();
				}
			}
		}
		
		[Column(Storage="_ClassName", DbType="NVarChar(1024)", UpdateCheck=UpdateCheck.Never)]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(1024) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_N_FileLibrary_FileLibraryType", Storage="_N_FileLibrary", ThisKey="FileLibraryTypeID", OtherKey="FileLibraryTypeID", DeleteRule="NO ACTION")]
		public EntitySet<N_FileLibrary> N_FileLibrary
		{
			get
			{
				return this._N_FileLibrary;
			}
			set
			{
				this._N_FileLibrary.Assign(value);
			}
		}
		
		[Association(Name="FK_N_FileLibraryType_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.N_FileLibraryType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.N_FileLibraryType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_N_FileLibrary(N_FileLibrary entity)
		{
			this.SendPropertyChanging();
			entity.FileLibraryType = this;
		}
		
		private void detach_N_FileLibrary(N_FileLibrary entity)
		{
			this.SendPropertyChanging();
			entity.FileLibraryType = null;
		}
	}
	
	[Table(Name="dbo.N_FileList")]
	public partial class N_FileList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FileListID;
		
		private EntitySet<N_FileListItem> _N_FileListItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileListIDChanging(int value);
    partial void OnFileListIDChanged();
    #endregion
		
		public N_FileList()
		{
			this._N_FileListItem = new EntitySet<N_FileListItem>(new Action<N_FileListItem>(this.attach_N_FileListItem), new Action<N_FileListItem>(this.detach_N_FileListItem));
			OnCreated();
		}
		
		[Column(Storage="_FileListID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FileListID
		{
			get
			{
				return this._FileListID;
			}
			set
			{
				if ((this._FileListID != value))
				{
					this.OnFileListIDChanging(value);
					this.SendPropertyChanging();
					this._FileListID = value;
					this.SendPropertyChanged("FileListID");
					this.OnFileListIDChanged();
				}
			}
		}
		
		[Association(Name="FK_N_FileListItem_N_FileList", Storage="_N_FileListItem", ThisKey="FileListID", OtherKey="FileListID", DeleteRule="NO ACTION")]
		public EntitySet<N_FileListItem> N_FileListItem
		{
			get
			{
				return this._N_FileListItem;
			}
			set
			{
				this._N_FileListItem.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_N_FileListItem(N_FileListItem entity)
		{
			this.SendPropertyChanging();
			entity.N_FileList = this;
		}
		
		private void detach_N_FileListItem(N_FileListItem entity)
		{
			this.SendPropertyChanging();
			entity.N_FileList = null;
		}
	}
	
	[Table(Name="dbo.N_FileListItem")]
	public partial class N_FileListItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FileListID;
		
		private int _FileID;
		
		private int _SeqNo;
		
		private EntityRef<N_File> _N_File;
		
		private EntityRef<N_FileList> _N_FileList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileListIDChanging(int value);
    partial void OnFileListIDChanged();
    partial void OnFileIDChanging(int value);
    partial void OnFileIDChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    #endregion
		
		public N_FileListItem()
		{
			this._N_File = default(EntityRef<N_File>);
			this._N_FileList = default(EntityRef<N_FileList>);
			OnCreated();
		}
		
		[Column(Storage="_FileListID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FileListID
		{
			get
			{
				return this._FileListID;
			}
			set
			{
				if ((this._FileListID != value))
				{
					if (this._N_FileList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileListIDChanging(value);
					this.SendPropertyChanging();
					this._FileListID = value;
					this.SendPropertyChanged("FileListID");
					this.OnFileListIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					if (this._N_File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Association(Name="FK_N_FileListItem_N_File", Storage="_N_File", ThisKey="FileID", OtherKey="FileID", IsForeignKey=true)]
		public N_File N_File
		{
			get
			{
				return this._N_File.Entity;
			}
			set
			{
				N_File previousValue = this._N_File.Entity;
				if (((previousValue != value) 
							|| (this._N_File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._N_File.Entity = null;
						previousValue.N_FileListItem.Remove(this);
					}
					this._N_File.Entity = value;
					if ((value != null))
					{
						value.N_FileListItem.Add(this);
						this._FileID = value.FileID;
					}
					else
					{
						this._FileID = default(int);
					}
					this.SendPropertyChanged("N_File");
				}
			}
		}
		
		[Association(Name="FK_N_FileListItem_N_FileList", Storage="_N_FileList", ThisKey="FileListID", OtherKey="FileListID", IsForeignKey=true)]
		public N_FileList N_FileList
		{
			get
			{
				return this._N_FileList.Entity;
			}
			set
			{
				N_FileList previousValue = this._N_FileList.Entity;
				if (((previousValue != value) 
							|| (this._N_FileList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._N_FileList.Entity = null;
						previousValue.N_FileListItem.Remove(this);
					}
					this._N_FileList.Entity = value;
					if ((value != null))
					{
						value.N_FileListItem.Add(this);
						this._FileListID = value.FileListID;
					}
					else
					{
						this._FileListID = default(int);
					}
					this.SendPropertyChanged("N_FileList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.N_Filter")]
	public partial class N_Filter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FilterID;
		
		private string _ListName;
		
		private System.Xml.Linq.XElement _FilterValue;
		
		private string _FilterName;
		
		private bool _IsDefault;
		
		private System.Nullable<int> _SubjectID;
		
		private System.Nullable<int> _Group1Column;
		
		private System.Nullable<char> _Group1Sort;
		
		private System.Nullable<int> _Group2Column;
		
		private System.Nullable<char> _Group2Sort;
		
		private string _ListParms;
		
		private string _Columns;
		
		private string _Sort;
		
		private int _ItemsOnPage;
		
		private EntityRef<SPM_Subject> _SPM_Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFilterIDChanging(int value);
    partial void OnFilterIDChanged();
    partial void OnListNameChanging(string value);
    partial void OnListNameChanged();
    partial void OnFilterValueChanging(System.Xml.Linq.XElement value);
    partial void OnFilterValueChanged();
    partial void OnFilterNameChanging(string value);
    partial void OnFilterNameChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    partial void OnSubjectIDChanging(System.Nullable<int> value);
    partial void OnSubjectIDChanged();
    partial void OnGroup1ColumnChanging(System.Nullable<int> value);
    partial void OnGroup1ColumnChanged();
    partial void OnGroup1SortChanging(System.Nullable<char> value);
    partial void OnGroup1SortChanged();
    partial void OnGroup2ColumnChanging(System.Nullable<int> value);
    partial void OnGroup2ColumnChanged();
    partial void OnGroup2SortChanging(System.Nullable<char> value);
    partial void OnGroup2SortChanged();
    partial void OnListParmsChanging(string value);
    partial void OnListParmsChanged();
    partial void OnColumnsChanging(string value);
    partial void OnColumnsChanged();
    partial void OnSortChanging(string value);
    partial void OnSortChanged();
    partial void OnItemsOnPageChanging(int value);
    partial void OnItemsOnPageChanged();
    #endregion
		
		public N_Filter()
		{
			this._SPM_Subject = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_FilterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FilterID
		{
			get
			{
				return this._FilterID;
			}
			set
			{
				if ((this._FilterID != value))
				{
					this.OnFilterIDChanging(value);
					this.SendPropertyChanging();
					this._FilterID = value;
					this.SendPropertyChanged("FilterID");
					this.OnFilterIDChanged();
				}
			}
		}
		
		[Column(Storage="_ListName", DbType="VarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string ListName
		{
			get
			{
				return this._ListName;
			}
			set
			{
				if ((this._ListName != value))
				{
					this.OnListNameChanging(value);
					this.SendPropertyChanging();
					this._ListName = value;
					this.SendPropertyChanged("ListName");
					this.OnListNameChanged();
				}
			}
		}
		
		[Column(Storage="_FilterValue", DbType="Xml", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement FilterValue
		{
			get
			{
				return this._FilterValue;
			}
			set
			{
				if ((this._FilterValue != value))
				{
					this.OnFilterValueChanging(value);
					this.SendPropertyChanging();
					this._FilterValue = value;
					this.SendPropertyChanged("FilterValue");
					this.OnFilterValueChanged();
				}
			}
		}
		
		[Column(Storage="_FilterName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string FilterName
		{
			get
			{
				return this._FilterName;
			}
			set
			{
				if ((this._FilterName != value))
				{
					this.OnFilterNameChanging(value);
					this.SendPropertyChanging();
					this._FilterName = value;
					this.SendPropertyChanged("FilterName");
					this.OnFilterNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsDefault", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._SPM_Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_Group1Column", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Group1Column
		{
			get
			{
				return this._Group1Column;
			}
			set
			{
				if ((this._Group1Column != value))
				{
					this.OnGroup1ColumnChanging(value);
					this.SendPropertyChanging();
					this._Group1Column = value;
					this.SendPropertyChanged("Group1Column");
					this.OnGroup1ColumnChanged();
				}
			}
		}
		
		[Column(Storage="_Group1Sort", DbType="Char(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<char> Group1Sort
		{
			get
			{
				return this._Group1Sort;
			}
			set
			{
				if ((this._Group1Sort != value))
				{
					this.OnGroup1SortChanging(value);
					this.SendPropertyChanging();
					this._Group1Sort = value;
					this.SendPropertyChanged("Group1Sort");
					this.OnGroup1SortChanged();
				}
			}
		}
		
		[Column(Storage="_Group2Column", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Group2Column
		{
			get
			{
				return this._Group2Column;
			}
			set
			{
				if ((this._Group2Column != value))
				{
					this.OnGroup2ColumnChanging(value);
					this.SendPropertyChanging();
					this._Group2Column = value;
					this.SendPropertyChanged("Group2Column");
					this.OnGroup2ColumnChanged();
				}
			}
		}
		
		[Column(Storage="_Group2Sort", DbType="Char(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<char> Group2Sort
		{
			get
			{
				return this._Group2Sort;
			}
			set
			{
				if ((this._Group2Sort != value))
				{
					this.OnGroup2SortChanging(value);
					this.SendPropertyChanging();
					this._Group2Sort = value;
					this.SendPropertyChanged("Group2Sort");
					this.OnGroup2SortChanged();
				}
			}
		}
		
		[Column(Storage="_ListParms", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string ListParms
		{
			get
			{
				return this._ListParms;
			}
			set
			{
				if ((this._ListParms != value))
				{
					this.OnListParmsChanging(value);
					this.SendPropertyChanging();
					this._ListParms = value;
					this.SendPropertyChanged("ListParms");
					this.OnListParmsChanged();
				}
			}
		}
		
		[Column(Storage="_Columns", DbType="NVarChar(1024)", UpdateCheck=UpdateCheck.Never)]
		public string Columns
		{
			get
			{
				return this._Columns;
			}
			set
			{
				if ((this._Columns != value))
				{
					this.OnColumnsChanging(value);
					this.SendPropertyChanging();
					this._Columns = value;
					this.SendPropertyChanged("Columns");
					this.OnColumnsChanged();
				}
			}
		}
		
		[Column(Storage="_Sort", DbType="NVarChar(1024)", UpdateCheck=UpdateCheck.Never)]
		public string Sort
		{
			get
			{
				return this._Sort;
			}
			set
			{
				if ((this._Sort != value))
				{
					this.OnSortChanging(value);
					this.SendPropertyChanging();
					this._Sort = value;
					this.SendPropertyChanged("Sort");
					this.OnSortChanged();
				}
			}
		}
		
		[Column(Storage="_ItemsOnPage", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ItemsOnPage
		{
			get
			{
				return this._ItemsOnPage;
			}
			set
			{
				if ((this._ItemsOnPage != value))
				{
					this.OnItemsOnPageChanging(value);
					this.SendPropertyChanging();
					this._ItemsOnPage = value;
					this.SendPropertyChanged("ItemsOnPage");
					this.OnItemsOnPageChanged();
				}
			}
		}
		
		[Association(Name="FK_N_Filter_SPM_Subject", Storage="_SPM_Subject", ThisKey="SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject SPM_Subject
		{
			get
			{
				return this._SPM_Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._SPM_Subject.Entity;
				if (((previousValue != value) 
							|| (this._SPM_Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SPM_Subject.Entity = null;
						previousValue.N_Filter.Remove(this);
					}
					this._SPM_Subject.Entity = value;
					if ((value != null))
					{
						value.N_Filter.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SPM_Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.N_Folder")]
	public partial class N_Folder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FolderID;
		
		private System.Nullable<int> _ParentID;
		
		private string _Title;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _FullPath;
		
		private System.Guid _Guid;
		
		private string _GuidPath;
		
		private char _StorageType;
		
		private string _StorageParameter;
		
		private bool _IsReplicable;
		
		private System.Guid _SPMActionItemGUID;
		
		private bool _EnableVersioning;
		
		private int _CreatorID;
		
		private string _Tag;
		
		private System.Nullable<System.DateTime> _PublishDate;
		
		private EntitySet<N_File> _Files;
		
		private EntityRef<N_FileLibrary> _N_FileLibrary;
		
		private EntityRef<SPM_Subject> _Creator;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<N_Folder> _Parent;
		
		private EntitySet<N_Folder> _Folders;
		
		private EntitySet<N_FolderPredicate> _N_FolderPredicate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFolderIDChanging(int value);
    partial void OnFolderIDChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnFullPathChanging(string value);
    partial void OnFullPathChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnGuidPathChanging(string value);
    partial void OnGuidPathChanged();
    partial void OnStorageTypeChanging(char value);
    partial void OnStorageTypeChanged();
    partial void OnStorageParameterChanging(string value);
    partial void OnStorageParameterChanged();
    partial void OnIsReplicableChanging(bool value);
    partial void OnIsReplicableChanged();
    partial void OnSPMActionItemGUIDChanging(System.Guid value);
    partial void OnSPMActionItemGUIDChanged();
    partial void OnEnableVersioningChanging(bool value);
    partial void OnEnableVersioningChanged();
    partial void OnCreatorIDChanging(int value);
    partial void OnCreatorIDChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    partial void OnPublishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishDateChanged();
    #endregion
		
		public N_Folder()
		{
			this._Files = new EntitySet<N_File>(new Action<N_File>(this.attach_Files), new Action<N_File>(this.detach_Files));
			this._N_FileLibrary = default(EntityRef<N_FileLibrary>);
			this._Creator = default(EntityRef<SPM_Subject>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Parent = default(EntityRef<N_Folder>);
			this._Folders = new EntitySet<N_Folder>(new Action<N_Folder>(this.attach_Folders), new Action<N_Folder>(this.detach_Folders));
			this._N_FolderPredicate = new EntitySet<N_FolderPredicate>(new Action<N_FolderPredicate>(this.attach_N_FolderPredicate), new Action<N_FolderPredicate>(this.detach_N_FolderPredicate));
			OnCreated();
		}
		
		[Column(Storage="_FolderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FolderID
		{
			get
			{
				return this._FolderID;
			}
			set
			{
				if ((this._FolderID != value))
				{
					this.OnFolderIDChanging(value);
					this.SendPropertyChanging();
					this._FolderID = value;
					this.SendPropertyChanged("FolderID");
					this.OnFolderIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_FullPath", DbType="NVarChar(4000)", UpdateCheck=UpdateCheck.Never)]
		public string FullPath
		{
			get
			{
				return this._FullPath;
			}
			set
			{
				if ((this._FullPath != value))
				{
					this.OnFullPathChanging(value);
					this.SendPropertyChanging();
					this._FullPath = value;
					this.SendPropertyChanged("FullPath");
					this.OnFullPathChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_GuidPath", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string GuidPath
		{
			get
			{
				return this._GuidPath;
			}
			set
			{
				if ((this._GuidPath != value))
				{
					this.OnGuidPathChanging(value);
					this.SendPropertyChanging();
					this._GuidPath = value;
					this.SendPropertyChanged("GuidPath");
					this.OnGuidPathChanged();
				}
			}
		}
		
		[Column(Storage="_StorageType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char StorageType
		{
			get
			{
				return this._StorageType;
			}
			set
			{
				if ((this._StorageType != value))
				{
					this.OnStorageTypeChanging(value);
					this.SendPropertyChanging();
					this._StorageType = value;
					this.SendPropertyChanged("StorageType");
					this.OnStorageTypeChanged();
				}
			}
		}
		
		[Column(Storage="_StorageParameter", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string StorageParameter
		{
			get
			{
				return this._StorageParameter;
			}
			set
			{
				if ((this._StorageParameter != value))
				{
					this.OnStorageParameterChanging(value);
					this.SendPropertyChanging();
					this._StorageParameter = value;
					this.SendPropertyChanged("StorageParameter");
					this.OnStorageParameterChanged();
				}
			}
		}
		
		[Column(Storage="_IsReplicable", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsReplicable
		{
			get
			{
				return this._IsReplicable;
			}
			set
			{
				if ((this._IsReplicable != value))
				{
					this.OnIsReplicableChanging(value);
					this.SendPropertyChanging();
					this._IsReplicable = value;
					this.SendPropertyChanged("IsReplicable");
					this.OnIsReplicableChanged();
				}
			}
		}
		
		[Column(Storage="_SPMActionItemGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid SPMActionItemGUID
		{
			get
			{
				return this._SPMActionItemGUID;
			}
			set
			{
				if ((this._SPMActionItemGUID != value))
				{
					this.OnSPMActionItemGUIDChanging(value);
					this.SendPropertyChanging();
					this._SPMActionItemGUID = value;
					this.SendPropertyChanged("SPMActionItemGUID");
					this.OnSPMActionItemGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_EnableVersioning", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool EnableVersioning
		{
			get
			{
				return this._EnableVersioning;
			}
			set
			{
				if ((this._EnableVersioning != value))
				{
					this.OnEnableVersioningChanging(value);
					this.SendPropertyChanging();
					this._EnableVersioning = value;
					this.SendPropertyChanged("EnableVersioning");
					this.OnEnableVersioningChanged();
				}
			}
		}
		
		[Column(Storage="_CreatorID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					if (this._Creator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorID = value;
					this.SendPropertyChanged("CreatorID");
					this.OnCreatorIDChanged();
				}
			}
		}
		
		[Column(Storage="_Tag", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[Column(Storage="_PublishDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}
		
		[Association(Name="FK_N_File_Folder", Storage="_Files", ThisKey="FolderID", OtherKey="FolderID", DeleteRule="CASCADE")]
		public EntitySet<N_File> Files
		{
			get
			{
				return this._Files;
			}
			set
			{
				this._Files.Assign(value);
			}
		}
		
		[Association(Name="FK_N_FileLibrary_N_Folder", Storage="_N_FileLibrary", ThisKey="FolderID", OtherKey="FolderID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public N_FileLibrary N_FileLibrary
		{
			get
			{
				return this._N_FileLibrary.Entity;
			}
			set
			{
				N_FileLibrary previousValue = this._N_FileLibrary.Entity;
				if (((previousValue != value) 
							|| (this._N_FileLibrary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._N_FileLibrary.Entity = null;
						previousValue.N_Folder = null;
					}
					this._N_FileLibrary.Entity = value;
					if ((value != null))
					{
						value.N_Folder = this;
					}
					this.SendPropertyChanged("N_FileLibrary");
				}
			}
		}
		
		[Association(Name="FK_N_Folder_Creator", Storage="_Creator", ThisKey="CreatorID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject Creator
		{
			get
			{
				return this._Creator.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._Creator.Entity;
				if (((previousValue != value) 
							|| (this._Creator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Creator.Entity = null;
						previousValue.N_Folder.Remove(this);
					}
					this._Creator.Entity = value;
					if ((value != null))
					{
						value.N_Folder.Add(this);
						this._CreatorID = value.SubjectID;
					}
					else
					{
						this._CreatorID = default(int);
					}
					this.SendPropertyChanged("Creator");
				}
			}
		}
		
		[Association(Name="FK_N_Folder_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.N_Folder_LastModifiedUser.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.N_Folder_LastModifiedUser.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_N_Folder_Parent", Storage="_Parent", ThisKey="ParentID", OtherKey="FolderID", IsForeignKey=true)]
		public N_Folder Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				N_Folder previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.Folders.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.Folders.Add(this);
						this._ParentID = value.FolderID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		[Association(Name="FK_N_Folder_Parent", Storage="_Folders", ThisKey="FolderID", OtherKey="ParentID", DeleteRule="NO ACTION")]
		public EntitySet<N_Folder> Folders
		{
			get
			{
				return this._Folders;
			}
			set
			{
				this._Folders.Assign(value);
			}
		}
		
		[Association(Name="FK_N_FolderPredicate_Folder", Storage="_N_FolderPredicate", ThisKey="FolderID", OtherKey="FolderID", DeleteRule="CASCADE")]
		public EntitySet<N_FolderPredicate> N_FolderPredicate
		{
			get
			{
				return this._N_FolderPredicate;
			}
			set
			{
				this._N_FolderPredicate.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Files(N_File entity)
		{
			this.SendPropertyChanging();
			entity.Folder = this;
		}
		
		private void detach_Files(N_File entity)
		{
			this.SendPropertyChanging();
			entity.Folder = null;
		}
		
		private void attach_Folders(N_Folder entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_Folders(N_Folder entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
		
		private void attach_N_FolderPredicate(N_FolderPredicate entity)
		{
			this.SendPropertyChanging();
			entity.Folder = this;
		}
		
		private void detach_N_FolderPredicate(N_FolderPredicate entity)
		{
			this.SendPropertyChanging();
			entity.Folder = null;
		}
	}
	
	[Table(Name="dbo.N_FolderPredicate")]
	public partial class N_FolderPredicate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FolderPredicateID;
		
		private char _FolderActionType;
		
		private string _PredicateCode;
		
		private string _Description;
		
		private int _FolderID;
		
		private EntityRef<N_Folder> _Folder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFolderPredicateIDChanging(int value);
    partial void OnFolderPredicateIDChanged();
    partial void OnFolderActionTypeChanging(char value);
    partial void OnFolderActionTypeChanged();
    partial void OnPredicateCodeChanging(string value);
    partial void OnPredicateCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFolderIDChanging(int value);
    partial void OnFolderIDChanged();
    #endregion
		
		public N_FolderPredicate()
		{
			this._Folder = default(EntityRef<N_Folder>);
			OnCreated();
		}
		
		[Column(Storage="_FolderPredicateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FolderPredicateID
		{
			get
			{
				return this._FolderPredicateID;
			}
			set
			{
				if ((this._FolderPredicateID != value))
				{
					this.OnFolderPredicateIDChanging(value);
					this.SendPropertyChanging();
					this._FolderPredicateID = value;
					this.SendPropertyChanged("FolderPredicateID");
					this.OnFolderPredicateIDChanged();
				}
			}
		}
		
		[Column(Storage="_FolderActionType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char FolderActionType
		{
			get
			{
				return this._FolderActionType;
			}
			set
			{
				if ((this._FolderActionType != value))
				{
					this.OnFolderActionTypeChanging(value);
					this.SendPropertyChanging();
					this._FolderActionType = value;
					this.SendPropertyChanged("FolderActionType");
					this.OnFolderActionTypeChanged();
				}
			}
		}
		
		[Column(Storage="_PredicateCode", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PredicateCode
		{
			get
			{
				return this._PredicateCode;
			}
			set
			{
				if ((this._PredicateCode != value))
				{
					this.OnPredicateCodeChanging(value);
					this.SendPropertyChanging();
					this._PredicateCode = value;
					this.SendPropertyChanged("PredicateCode");
					this.OnPredicateCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_FolderID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FolderID
		{
			get
			{
				return this._FolderID;
			}
			set
			{
				if ((this._FolderID != value))
				{
					if (this._Folder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFolderIDChanging(value);
					this.SendPropertyChanging();
					this._FolderID = value;
					this.SendPropertyChanged("FolderID");
					this.OnFolderIDChanged();
				}
			}
		}
		
		[Association(Name="FK_N_FolderPredicate_Folder", Storage="_Folder", ThisKey="FolderID", OtherKey="FolderID", IsForeignKey=true, DeleteOnNull=true)]
		public N_Folder Folder
		{
			get
			{
				return this._Folder.Entity;
			}
			set
			{
				N_Folder previousValue = this._Folder.Entity;
				if (((previousValue != value) 
							|| (this._Folder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Folder.Entity = null;
						previousValue.N_FolderPredicate.Remove(this);
					}
					this._Folder.Entity = value;
					if ((value != null))
					{
						value.N_FolderPredicate.Add(this);
						this._FolderID = value.FolderID;
					}
					else
					{
						this._FolderID = default(int);
					}
					this.SendPropertyChanged("Folder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.N_Image")]
	public partial class N_Image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImageID;
		
		private System.Guid _Guid;
		
		private string _Title;
		
		private string _AltText;
		
		private string _Extension;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnAltTextChanging(string value);
    partial void OnAltTextChanged();
    partial void OnExtensionChanging(string value);
    partial void OnExtensionChanged();
    #endregion
		
		public N_Image()
		{
			OnCreated();
		}
		
		[Column(Storage="_ImageID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_AltText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string AltText
		{
			get
			{
				return this._AltText;
			}
			set
			{
				if ((this._AltText != value))
				{
					this.OnAltTextChanging(value);
					this.SendPropertyChanging();
					this._AltText = value;
					this.SendPropertyChanged("AltText");
					this.OnAltTextChanged();
				}
			}
		}
		
		[Column(Storage="_Extension", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this.OnExtensionChanging(value);
					this.SendPropertyChanging();
					this._Extension = value;
					this.SendPropertyChanged("Extension");
					this.OnExtensionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.N_MenuItem")]
	public partial class N_MenuItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MenuItemID;
		
		private string _Title;
		
		private bool _IsVisible;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private char _MenuItemType;
		
		private string _Url;
		
		private System.Nullable<int> _ParentMenuItemID;
		
		private System.Guid _Guid;
		
		private System.Nullable<int> _ActionID;
		
		private string _Tooltip;
		
		private int _SeqNo;
		
		private string _ImageUrl;
		
		private System.Nullable<int> _MethodID;
		
		private System.Nullable<int> _FormViewID;
		
		private string _Expression;
		
		private EntityRef<N_MenuItem> _FK_MenuItem_MenuItem;
		
		private EntitySet<N_MenuItem> _MenuItem;
		
		private EntityRef<SPM_Action> _FK_MenuItem_SPM_Action;
		
		private EntityRef<MM_FormView> _MM_FormView;
		
		private EntityRef<MM_Method> _MM_Method;
		
		private EntityRef<SPM_Subject> _SPM_Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuItemIDChanging(int value);
    partial void OnMenuItemIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsVisibleChanging(bool value);
    partial void OnIsVisibleChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnMenuItemTypeChanging(char value);
    partial void OnMenuItemTypeChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnParentMenuItemIDChanging(System.Nullable<int> value);
    partial void OnParentMenuItemIDChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnActionIDChanging(System.Nullable<int> value);
    partial void OnActionIDChanged();
    partial void OnTooltipChanging(string value);
    partial void OnTooltipChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnImageUrlChanging(string value);
    partial void OnImageUrlChanged();
    partial void OnMethodIDChanging(System.Nullable<int> value);
    partial void OnMethodIDChanged();
    partial void OnFormViewIDChanging(System.Nullable<int> value);
    partial void OnFormViewIDChanged();
    partial void OnExpressionChanging(string value);
    partial void OnExpressionChanged();
    #endregion
		
		public N_MenuItem()
		{
			this._FK_MenuItem_MenuItem = default(EntityRef<N_MenuItem>);
			this._MenuItem = new EntitySet<N_MenuItem>(new Action<N_MenuItem>(this.attach_MenuItem), new Action<N_MenuItem>(this.detach_MenuItem));
			this._FK_MenuItem_SPM_Action = default(EntityRef<SPM_Action>);
			this._MM_FormView = default(EntityRef<MM_FormView>);
			this._MM_Method = default(EntityRef<MM_Method>);
			this._SPM_Subject = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_MenuItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MenuItemID
		{
			get
			{
				return this._MenuItemID;
			}
			set
			{
				if ((this._MenuItemID != value))
				{
					this.OnMenuItemIDChanging(value);
					this.SendPropertyChanging();
					this._MenuItemID = value;
					this.SendPropertyChanged("MenuItemID");
					this.OnMenuItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsVisible", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsVisible
		{
			get
			{
				return this._IsVisible;
			}
			set
			{
				if ((this._IsVisible != value))
				{
					this.OnIsVisibleChanging(value);
					this.SendPropertyChanging();
					this._IsVisible = value;
					this.SendPropertyChanged("IsVisible");
					this.OnIsVisibleChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._SPM_Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_MenuItemType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char MenuItemType
		{
			get
			{
				return this._MenuItemType;
			}
			set
			{
				if ((this._MenuItemType != value))
				{
					this.OnMenuItemTypeChanging(value);
					this.SendPropertyChanging();
					this._MenuItemType = value;
					this.SendPropertyChanged("MenuItemType");
					this.OnMenuItemTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Storage="_ParentMenuItemID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ParentMenuItemID
		{
			get
			{
				return this._ParentMenuItemID;
			}
			set
			{
				if ((this._ParentMenuItemID != value))
				{
					if (this._FK_MenuItem_MenuItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentMenuItemIDChanging(value);
					this.SendPropertyChanging();
					this._ParentMenuItemID = value;
					this.SendPropertyChanged("ParentMenuItemID");
					this.OnParentMenuItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_ActionID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					if (this._FK_MenuItem_SPM_Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[Column(Storage="_Tooltip", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Tooltip
		{
			get
			{
				return this._Tooltip;
			}
			set
			{
				if ((this._Tooltip != value))
				{
					this.OnTooltipChanging(value);
					this.SendPropertyChanging();
					this._Tooltip = value;
					this.SendPropertyChanged("Tooltip");
					this.OnTooltipChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_ImageUrl", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}
			set
			{
				if ((this._ImageUrl != value))
				{
					this.OnImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ImageUrl = value;
					this.SendPropertyChanged("ImageUrl");
					this.OnImageUrlChanged();
				}
			}
		}
		
		[Column(Storage="_MethodID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MethodID
		{
			get
			{
				return this._MethodID;
			}
			set
			{
				if ((this._MethodID != value))
				{
					if (this._MM_Method.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMethodIDChanging(value);
					this.SendPropertyChanging();
					this._MethodID = value;
					this.SendPropertyChanged("MethodID");
					this.OnMethodIDChanged();
				}
			}
		}
		
		[Column(Storage="_FormViewID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FormViewID
		{
			get
			{
				return this._FormViewID;
			}
			set
			{
				if ((this._FormViewID != value))
				{
					if (this._MM_FormView.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormViewIDChanging(value);
					this.SendPropertyChanging();
					this._FormViewID = value;
					this.SendPropertyChanged("FormViewID");
					this.OnFormViewIDChanged();
				}
			}
		}
		
		[Column(Storage="_Expression", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Expression
		{
			get
			{
				return this._Expression;
			}
			set
			{
				if ((this._Expression != value))
				{
					this.OnExpressionChanging(value);
					this.SendPropertyChanging();
					this._Expression = value;
					this.SendPropertyChanged("Expression");
					this.OnExpressionChanged();
				}
			}
		}
		
		[Association(Storage="_FK_MenuItem_MenuItem", ThisKey="ParentMenuItemID", OtherKey="MenuItemID", IsForeignKey=true)]
		public N_MenuItem FK_MenuItem_MenuItem
		{
			get
			{
				return this._FK_MenuItem_MenuItem.Entity;
			}
			set
			{
				N_MenuItem previousValue = this._FK_MenuItem_MenuItem.Entity;
				if (((previousValue != value) 
							|| (this._FK_MenuItem_MenuItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FK_MenuItem_MenuItem.Entity = null;
						previousValue.MenuItem.Remove(this);
					}
					this._FK_MenuItem_MenuItem.Entity = value;
					if ((value != null))
					{
						value.MenuItem.Add(this);
						this._ParentMenuItemID = value.MenuItemID;
					}
					else
					{
						this._ParentMenuItemID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FK_MenuItem_MenuItem");
				}
			}
		}
		
		[Association(Name="FK_MenuItem_MenuItem", Storage="_MenuItem", ThisKey="MenuItemID", OtherKey="ParentMenuItemID", DeleteRule="NO ACTION")]
		public EntitySet<N_MenuItem> MenuItem
		{
			get
			{
				return this._MenuItem;
			}
			set
			{
				this._MenuItem.Assign(value);
			}
		}
		
		[Association(Storage="_FK_MenuItem_SPM_Action", ThisKey="ActionID", OtherKey="ActionID", IsForeignKey=true)]
		public SPM_Action FK_MenuItem_SPM_Action
		{
			get
			{
				return this._FK_MenuItem_SPM_Action.Entity;
			}
			set
			{
				SPM_Action previousValue = this._FK_MenuItem_SPM_Action.Entity;
				if (((previousValue != value) 
							|| (this._FK_MenuItem_SPM_Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FK_MenuItem_SPM_Action.Entity = null;
						previousValue.N_MenuItem.Remove(this);
					}
					this._FK_MenuItem_SPM_Action.Entity = value;
					if ((value != null))
					{
						value.N_MenuItem.Add(this);
						this._ActionID = value.ActionID;
					}
					else
					{
						this._ActionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FK_MenuItem_SPM_Action");
				}
			}
		}
		
		[Association(Name="FK_N_MenuItem_MM_FormView", Storage="_MM_FormView", ThisKey="FormViewID", OtherKey="FormViewID", IsForeignKey=true)]
		public MM_FormView MM_FormView
		{
			get
			{
				return this._MM_FormView.Entity;
			}
			set
			{
				MM_FormView previousValue = this._MM_FormView.Entity;
				if (((previousValue != value) 
							|| (this._MM_FormView.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_FormView.Entity = null;
						previousValue.N_MenuItem.Remove(this);
					}
					this._MM_FormView.Entity = value;
					if ((value != null))
					{
						value.N_MenuItem.Add(this);
						this._FormViewID = value.FormViewID;
					}
					else
					{
						this._FormViewID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MM_FormView");
				}
			}
		}
		
		[Association(Name="FK_N_MenuItem_MM_Method", Storage="_MM_Method", ThisKey="MethodID", OtherKey="MethodID", IsForeignKey=true)]
		public MM_Method MM_Method
		{
			get
			{
				return this._MM_Method.Entity;
			}
			set
			{
				MM_Method previousValue = this._MM_Method.Entity;
				if (((previousValue != value) 
							|| (this._MM_Method.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MM_Method.Entity = null;
						previousValue.N_MenuItem.Remove(this);
					}
					this._MM_Method.Entity = value;
					if ((value != null))
					{
						value.N_MenuItem.Add(this);
						this._MethodID = value.MethodID;
					}
					else
					{
						this._MethodID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MM_Method");
				}
			}
		}
		
		[Association(Name="FK_N_MenuItem_SPM_Subject", Storage="_SPM_Subject", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject SPM_Subject
		{
			get
			{
				return this._SPM_Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._SPM_Subject.Entity;
				if (((previousValue != value) 
							|| (this._SPM_Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SPM_Subject.Entity = null;
						previousValue.N_MenuItem.Remove(this);
					}
					this._SPM_Subject.Entity = value;
					if ((value != null))
					{
						value.N_MenuItem.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("SPM_Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.FK_MenuItem_MenuItem = this;
		}
		
		private void detach_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.FK_MenuItem_MenuItem = null;
		}
	}
	
	[Table(Name="dbo.N_NeighborSystem")]
	public partial class N_NeighborSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NeighborSystemID;
		
		private string _Title;
		
		private bool _EnableReplication;
		
		private bool _EnableReplicationLogging;
		
		private string _ReplicationUrl;
		
		private EntitySet<N_ReplicationLogItem> _N_ReplicationLogItem;
		
		private EntitySet<N_ReplicationObject> _N_ReplicationObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNeighborSystemIDChanging(int value);
    partial void OnNeighborSystemIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnEnableReplicationChanging(bool value);
    partial void OnEnableReplicationChanged();
    partial void OnEnableReplicationLoggingChanging(bool value);
    partial void OnEnableReplicationLoggingChanged();
    partial void OnReplicationUrlChanging(string value);
    partial void OnReplicationUrlChanged();
    #endregion
		
		public N_NeighborSystem()
		{
			this._N_ReplicationLogItem = new EntitySet<N_ReplicationLogItem>(new Action<N_ReplicationLogItem>(this.attach_N_ReplicationLogItem), new Action<N_ReplicationLogItem>(this.detach_N_ReplicationLogItem));
			this._N_ReplicationObject = new EntitySet<N_ReplicationObject>(new Action<N_ReplicationObject>(this.attach_N_ReplicationObject), new Action<N_ReplicationObject>(this.detach_N_ReplicationObject));
			OnCreated();
		}
		
		[Column(Storage="_NeighborSystemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NeighborSystemID
		{
			get
			{
				return this._NeighborSystemID;
			}
			set
			{
				if ((this._NeighborSystemID != value))
				{
					this.OnNeighborSystemIDChanging(value);
					this.SendPropertyChanging();
					this._NeighborSystemID = value;
					this.SendPropertyChanged("NeighborSystemID");
					this.OnNeighborSystemIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_EnableReplication", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool EnableReplication
		{
			get
			{
				return this._EnableReplication;
			}
			set
			{
				if ((this._EnableReplication != value))
				{
					this.OnEnableReplicationChanging(value);
					this.SendPropertyChanging();
					this._EnableReplication = value;
					this.SendPropertyChanged("EnableReplication");
					this.OnEnableReplicationChanged();
				}
			}
		}
		
		[Column(Storage="_EnableReplicationLogging", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool EnableReplicationLogging
		{
			get
			{
				return this._EnableReplicationLogging;
			}
			set
			{
				if ((this._EnableReplicationLogging != value))
				{
					this.OnEnableReplicationLoggingChanging(value);
					this.SendPropertyChanging();
					this._EnableReplicationLogging = value;
					this.SendPropertyChanged("EnableReplicationLogging");
					this.OnEnableReplicationLoggingChanged();
				}
			}
		}
		
		[Column(Storage="_ReplicationUrl", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ReplicationUrl
		{
			get
			{
				return this._ReplicationUrl;
			}
			set
			{
				if ((this._ReplicationUrl != value))
				{
					this.OnReplicationUrlChanging(value);
					this.SendPropertyChanging();
					this._ReplicationUrl = value;
					this.SendPropertyChanged("ReplicationUrl");
					this.OnReplicationUrlChanged();
				}
			}
		}
		
		[Association(Name="FK_N_ReplicationLogItem_NeighborSystem", Storage="_N_ReplicationLogItem", ThisKey="NeighborSystemID", OtherKey="NeighborSystemID", DeleteRule="NO ACTION")]
		public EntitySet<N_ReplicationLogItem> N_ReplicationLogItem
		{
			get
			{
				return this._N_ReplicationLogItem;
			}
			set
			{
				this._N_ReplicationLogItem.Assign(value);
			}
		}
		
		[Association(Name="FK_N_ReplicationObject_NeighborSystem", Storage="_N_ReplicationObject", ThisKey="NeighborSystemID", OtherKey="NeighborSystemID", DeleteRule="NO ACTION")]
		public EntitySet<N_ReplicationObject> N_ReplicationObject
		{
			get
			{
				return this._N_ReplicationObject;
			}
			set
			{
				this._N_ReplicationObject.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_N_ReplicationLogItem(N_ReplicationLogItem entity)
		{
			this.SendPropertyChanging();
			entity.NeighborSystem = this;
		}
		
		private void detach_N_ReplicationLogItem(N_ReplicationLogItem entity)
		{
			this.SendPropertyChanging();
			entity.NeighborSystem = null;
		}
		
		private void attach_N_ReplicationObject(N_ReplicationObject entity)
		{
			this.SendPropertyChanging();
			entity.NeighborSystem = this;
		}
		
		private void detach_N_ReplicationObject(N_ReplicationObject entity)
		{
			this.SendPropertyChanging();
			entity.NeighborSystem = null;
		}
	}
	
	[Table(Name="dbo.N_ObjectChange")]
	public partial class N_ObjectChange : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ObjectChangeID;
		
		private System.DateTime _LastModifiedDate;
		
		private string _Title;
		
		private string _IP;
		
		private string _ObjectKey;
		
		private string _ObjectTypeTitle;
		
		private string _ObjectTypeSysName;
		
		private string _ObjectTitle;
		
		private string _UserTitle;
		
		private string _UserLogin;
		
		private string _Details;
		
		private int _SubjectID;
		
		private EntitySet<N_ObjectPropertyChange> _PropertyChanges;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObjectChangeIDChanging(int value);
    partial void OnObjectChangeIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnObjectKeyChanging(string value);
    partial void OnObjectKeyChanged();
    partial void OnObjectTypeTitleChanging(string value);
    partial void OnObjectTypeTitleChanged();
    partial void OnObjectTypeSysNameChanging(string value);
    partial void OnObjectTypeSysNameChanged();
    partial void OnObjectTitleChanging(string value);
    partial void OnObjectTitleChanged();
    partial void OnUserTitleChanging(string value);
    partial void OnUserTitleChanged();
    partial void OnUserLoginChanging(string value);
    partial void OnUserLoginChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    #endregion
		
		public N_ObjectChange()
		{
			this._PropertyChanges = new EntitySet<N_ObjectPropertyChange>(new Action<N_ObjectPropertyChange>(this.attach_PropertyChanges), new Action<N_ObjectPropertyChange>(this.detach_PropertyChanges));
			OnCreated();
		}
		
		[Column(Storage="_ObjectChangeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ObjectChangeID
		{
			get
			{
				return this._ObjectChangeID;
			}
			set
			{
				if ((this._ObjectChangeID != value))
				{
					this.OnObjectChangeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectChangeID = value;
					this.SendPropertyChanged("ObjectChangeID");
					this.OnObjectChangeIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(500) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IP", DbType="NVarChar(32) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectKey", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectKey
		{
			get
			{
				return this._ObjectKey;
			}
			set
			{
				if ((this._ObjectKey != value))
				{
					this.OnObjectKeyChanging(value);
					this.SendPropertyChanging();
					this._ObjectKey = value;
					this.SendPropertyChanged("ObjectKey");
					this.OnObjectKeyChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectTypeTitle", DbType="NVarChar(300) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectTypeTitle
		{
			get
			{
				return this._ObjectTypeTitle;
			}
			set
			{
				if ((this._ObjectTypeTitle != value))
				{
					this.OnObjectTypeTitleChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeTitle = value;
					this.SendPropertyChanged("ObjectTypeTitle");
					this.OnObjectTypeTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectTypeSysName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectTypeSysName
		{
			get
			{
				return this._ObjectTypeSysName;
			}
			set
			{
				if ((this._ObjectTypeSysName != value))
				{
					this.OnObjectTypeSysNameChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeSysName = value;
					this.SendPropertyChanged("ObjectTypeSysName");
					this.OnObjectTypeSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectTitle
		{
			get
			{
				return this._ObjectTitle;
			}
			set
			{
				if ((this._ObjectTitle != value))
				{
					this.OnObjectTitleChanging(value);
					this.SendPropertyChanging();
					this._ObjectTitle = value;
					this.SendPropertyChanged("ObjectTitle");
					this.OnObjectTitleChanged();
				}
			}
		}
		
		[Column(Storage="_UserTitle", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string UserTitle
		{
			get
			{
				return this._UserTitle;
			}
			set
			{
				if ((this._UserTitle != value))
				{
					this.OnUserTitleChanging(value);
					this.SendPropertyChanging();
					this._UserTitle = value;
					this.SendPropertyChanged("UserTitle");
					this.OnUserTitleChanged();
				}
			}
		}
		
		[Column(Storage="_UserLogin", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string UserLogin
		{
			get
			{
				return this._UserLogin;
			}
			set
			{
				if ((this._UserLogin != value))
				{
					this.OnUserLoginChanging(value);
					this.SendPropertyChanging();
					this._UserLogin = value;
					this.SendPropertyChanged("UserLogin");
					this.OnUserLoginChanged();
				}
			}
		}
		
		[Column(Storage="_Details", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[Association(Name="FK_N_ObjectPropertyChange_ObjectChange", Storage="_PropertyChanges", ThisKey="ObjectChangeID", OtherKey="ObjectChangeID", DeleteRule="CASCADE")]
		public EntitySet<N_ObjectPropertyChange> PropertyChanges
		{
			get
			{
				return this._PropertyChanges;
			}
			set
			{
				this._PropertyChanges.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PropertyChanges(N_ObjectPropertyChange entity)
		{
			this.SendPropertyChanging();
			entity.ObjectChange = this;
		}
		
		private void detach_PropertyChanges(N_ObjectPropertyChange entity)
		{
			this.SendPropertyChanging();
			entity.ObjectChange = null;
		}
	}
	
	[Table(Name="dbo.N_ObjectPropertyChange")]
	public partial class N_ObjectPropertyChange : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ObjectPropertyChangeID;
		
		private string _Title;
		
		private string _PropertySysName;
		
		private string _OldValue;
		
		private string _NewValue;
		
		private string _OldValueTitle;
		
		private string _NewValueTitle;
		
		private int _ObjectChangeID;
		
		private EntityRef<N_ObjectChange> _ObjectChange;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObjectPropertyChangeIDChanging(int value);
    partial void OnObjectPropertyChangeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPropertySysNameChanging(string value);
    partial void OnPropertySysNameChanged();
    partial void OnOldValueChanging(string value);
    partial void OnOldValueChanged();
    partial void OnNewValueChanging(string value);
    partial void OnNewValueChanged();
    partial void OnOldValueTitleChanging(string value);
    partial void OnOldValueTitleChanged();
    partial void OnNewValueTitleChanging(string value);
    partial void OnNewValueTitleChanged();
    partial void OnObjectChangeIDChanging(int value);
    partial void OnObjectChangeIDChanged();
    #endregion
		
		public N_ObjectPropertyChange()
		{
			this._ObjectChange = default(EntityRef<N_ObjectChange>);
			OnCreated();
		}
		
		[Column(Storage="_ObjectPropertyChangeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ObjectPropertyChangeID
		{
			get
			{
				return this._ObjectPropertyChangeID;
			}
			set
			{
				if ((this._ObjectPropertyChangeID != value))
				{
					this.OnObjectPropertyChangeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectPropertyChangeID = value;
					this.SendPropertyChanged("ObjectPropertyChangeID");
					this.OnObjectPropertyChangeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_PropertySysName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PropertySysName
		{
			get
			{
				return this._PropertySysName;
			}
			set
			{
				if ((this._PropertySysName != value))
				{
					this.OnPropertySysNameChanging(value);
					this.SendPropertyChanging();
					this._PropertySysName = value;
					this.SendPropertyChanged("PropertySysName");
					this.OnPropertySysNameChanged();
				}
			}
		}
		
		[Column(Storage="_OldValue", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string OldValue
		{
			get
			{
				return this._OldValue;
			}
			set
			{
				if ((this._OldValue != value))
				{
					this.OnOldValueChanging(value);
					this.SendPropertyChanging();
					this._OldValue = value;
					this.SendPropertyChanged("OldValue");
					this.OnOldValueChanged();
				}
			}
		}
		
		[Column(Storage="_NewValue", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this.OnNewValueChanging(value);
					this.SendPropertyChanging();
					this._NewValue = value;
					this.SendPropertyChanged("NewValue");
					this.OnNewValueChanged();
				}
			}
		}
		
		[Column(Storage="_OldValueTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string OldValueTitle
		{
			get
			{
				return this._OldValueTitle;
			}
			set
			{
				if ((this._OldValueTitle != value))
				{
					this.OnOldValueTitleChanging(value);
					this.SendPropertyChanging();
					this._OldValueTitle = value;
					this.SendPropertyChanged("OldValueTitle");
					this.OnOldValueTitleChanged();
				}
			}
		}
		
		[Column(Storage="_NewValueTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string NewValueTitle
		{
			get
			{
				return this._NewValueTitle;
			}
			set
			{
				if ((this._NewValueTitle != value))
				{
					this.OnNewValueTitleChanging(value);
					this.SendPropertyChanging();
					this._NewValueTitle = value;
					this.SendPropertyChanged("NewValueTitle");
					this.OnNewValueTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectChangeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ObjectChangeID
		{
			get
			{
				return this._ObjectChangeID;
			}
			set
			{
				if ((this._ObjectChangeID != value))
				{
					if (this._ObjectChange.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectChangeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectChangeID = value;
					this.SendPropertyChanged("ObjectChangeID");
					this.OnObjectChangeIDChanged();
				}
			}
		}
		
		[Association(Name="FK_N_ObjectPropertyChange_ObjectChange", Storage="_ObjectChange", ThisKey="ObjectChangeID", OtherKey="ObjectChangeID", IsForeignKey=true, DeleteOnNull=true)]
		public N_ObjectChange ObjectChange
		{
			get
			{
				return this._ObjectChange.Entity;
			}
			set
			{
				N_ObjectChange previousValue = this._ObjectChange.Entity;
				if (((previousValue != value) 
							|| (this._ObjectChange.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectChange.Entity = null;
						previousValue.PropertyChanges.Remove(this);
					}
					this._ObjectChange.Entity = value;
					if ((value != null))
					{
						value.PropertyChanges.Add(this);
						this._ObjectChangeID = value.ObjectChangeID;
					}
					else
					{
						this._ObjectChangeID = default(int);
					}
					this.SendPropertyChanged("ObjectChange");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.N_ReplicationLogItem")]
	public partial class N_ReplicationLogItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReplicationLogItemID;
		
		private string _ObjectKey;
		
		private string _ObjectTypeSysName;
		
		private string _XmlData;
		
		private System.DateTime _LastModifiedDate;
		
		private bool _IsSuccessfull;
		
		private int _NeighborSystemID;
		
		private string _ErrorText;
		
		private EntityRef<N_NeighborSystem> _NeighborSystem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReplicationLogItemIDChanging(int value);
    partial void OnReplicationLogItemIDChanged();
    partial void OnObjectKeyChanging(string value);
    partial void OnObjectKeyChanged();
    partial void OnObjectTypeSysNameChanging(string value);
    partial void OnObjectTypeSysNameChanged();
    partial void OnXmlDataChanging(string value);
    partial void OnXmlDataChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnIsSuccessfullChanging(bool value);
    partial void OnIsSuccessfullChanged();
    partial void OnNeighborSystemIDChanging(int value);
    partial void OnNeighborSystemIDChanged();
    partial void OnErrorTextChanging(string value);
    partial void OnErrorTextChanged();
    #endregion
		
		public N_ReplicationLogItem()
		{
			this._NeighborSystem = default(EntityRef<N_NeighborSystem>);
			OnCreated();
		}
		
		[Column(Storage="_ReplicationLogItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReplicationLogItemID
		{
			get
			{
				return this._ReplicationLogItemID;
			}
			set
			{
				if ((this._ReplicationLogItemID != value))
				{
					this.OnReplicationLogItemIDChanging(value);
					this.SendPropertyChanging();
					this._ReplicationLogItemID = value;
					this.SendPropertyChanged("ReplicationLogItemID");
					this.OnReplicationLogItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectKey", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectKey
		{
			get
			{
				return this._ObjectKey;
			}
			set
			{
				if ((this._ObjectKey != value))
				{
					this.OnObjectKeyChanging(value);
					this.SendPropertyChanging();
					this._ObjectKey = value;
					this.SendPropertyChanged("ObjectKey");
					this.OnObjectKeyChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectTypeSysName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectTypeSysName
		{
			get
			{
				return this._ObjectTypeSysName;
			}
			set
			{
				if ((this._ObjectTypeSysName != value))
				{
					this.OnObjectTypeSysNameChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeSysName = value;
					this.SendPropertyChanged("ObjectTypeSysName");
					this.OnObjectTypeSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_XmlData", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string XmlData
		{
			get
			{
				return this._XmlData;
			}
			set
			{
				if ((this._XmlData != value))
				{
					this.OnXmlDataChanging(value);
					this.SendPropertyChanging();
					this._XmlData = value;
					this.SendPropertyChanged("XmlData");
					this.OnXmlDataChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsSuccessfull", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSuccessfull
		{
			get
			{
				return this._IsSuccessfull;
			}
			set
			{
				if ((this._IsSuccessfull != value))
				{
					this.OnIsSuccessfullChanging(value);
					this.SendPropertyChanging();
					this._IsSuccessfull = value;
					this.SendPropertyChanged("IsSuccessfull");
					this.OnIsSuccessfullChanged();
				}
			}
		}
		
		[Column(Storage="_NeighborSystemID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int NeighborSystemID
		{
			get
			{
				return this._NeighborSystemID;
			}
			set
			{
				if ((this._NeighborSystemID != value))
				{
					if (this._NeighborSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNeighborSystemIDChanging(value);
					this.SendPropertyChanging();
					this._NeighborSystemID = value;
					this.SendPropertyChanged("NeighborSystemID");
					this.OnNeighborSystemIDChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorText", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ErrorText
		{
			get
			{
				return this._ErrorText;
			}
			set
			{
				if ((this._ErrorText != value))
				{
					this.OnErrorTextChanging(value);
					this.SendPropertyChanging();
					this._ErrorText = value;
					this.SendPropertyChanged("ErrorText");
					this.OnErrorTextChanged();
				}
			}
		}
		
		[Association(Name="FK_N_ReplicationLogItem_NeighborSystem", Storage="_NeighborSystem", ThisKey="NeighborSystemID", OtherKey="NeighborSystemID", IsForeignKey=true)]
		public N_NeighborSystem NeighborSystem
		{
			get
			{
				return this._NeighborSystem.Entity;
			}
			set
			{
				N_NeighborSystem previousValue = this._NeighborSystem.Entity;
				if (((previousValue != value) 
							|| (this._NeighborSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NeighborSystem.Entity = null;
						previousValue.N_ReplicationLogItem.Remove(this);
					}
					this._NeighborSystem.Entity = value;
					if ((value != null))
					{
						value.N_ReplicationLogItem.Add(this);
						this._NeighborSystemID = value.NeighborSystemID;
					}
					else
					{
						this._NeighborSystemID = default(int);
					}
					this.SendPropertyChanged("NeighborSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.N_ReplicationObject")]
	public partial class N_ReplicationObject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ObjectTypeSysName;
		
		private string _ObjectID;
		
		private System.DateTime _ChangeDate;
		
		private System.Nullable<int> _NeighborSystemID;
		
		private int _ReplicationObjectID;
		
		private EntityRef<N_NeighborSystem> _NeighborSystem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObjectTypeSysNameChanging(string value);
    partial void OnObjectTypeSysNameChanged();
    partial void OnObjectIDChanging(string value);
    partial void OnObjectIDChanged();
    partial void OnChangeDateChanging(System.DateTime value);
    partial void OnChangeDateChanged();
    partial void OnNeighborSystemIDChanging(System.Nullable<int> value);
    partial void OnNeighborSystemIDChanged();
    partial void OnReplicationObjectIDChanging(int value);
    partial void OnReplicationObjectIDChanged();
    #endregion
		
		public N_ReplicationObject()
		{
			this._NeighborSystem = default(EntityRef<N_NeighborSystem>);
			OnCreated();
		}
		
		[Column(Storage="_ObjectTypeSysName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectTypeSysName
		{
			get
			{
				return this._ObjectTypeSysName;
			}
			set
			{
				if ((this._ObjectTypeSysName != value))
				{
					this.OnObjectTypeSysNameChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeSysName = value;
					this.SendPropertyChanged("ObjectTypeSysName");
					this.OnObjectTypeSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_ChangeDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime ChangeDate
		{
			get
			{
				return this._ChangeDate;
			}
			set
			{
				if ((this._ChangeDate != value))
				{
					this.OnChangeDateChanging(value);
					this.SendPropertyChanging();
					this._ChangeDate = value;
					this.SendPropertyChanged("ChangeDate");
					this.OnChangeDateChanged();
				}
			}
		}
		
		[Column(Storage="_NeighborSystemID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> NeighborSystemID
		{
			get
			{
				return this._NeighborSystemID;
			}
			set
			{
				if ((this._NeighborSystemID != value))
				{
					if (this._NeighborSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNeighborSystemIDChanging(value);
					this.SendPropertyChanging();
					this._NeighborSystemID = value;
					this.SendPropertyChanged("NeighborSystemID");
					this.OnNeighborSystemIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReplicationObjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReplicationObjectID
		{
			get
			{
				return this._ReplicationObjectID;
			}
			set
			{
				if ((this._ReplicationObjectID != value))
				{
					this.OnReplicationObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ReplicationObjectID = value;
					this.SendPropertyChanged("ReplicationObjectID");
					this.OnReplicationObjectIDChanged();
				}
			}
		}
		
		[Association(Name="FK_N_ReplicationObject_NeighborSystem", Storage="_NeighborSystem", ThisKey="NeighborSystemID", OtherKey="NeighborSystemID", IsForeignKey=true)]
		public N_NeighborSystem NeighborSystem
		{
			get
			{
				return this._NeighborSystem.Entity;
			}
			set
			{
				N_NeighborSystem previousValue = this._NeighborSystem.Entity;
				if (((previousValue != value) 
							|| (this._NeighborSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NeighborSystem.Entity = null;
						previousValue.N_ReplicationObject.Remove(this);
					}
					this._NeighborSystem.Entity = value;
					if ((value != null))
					{
						value.N_ReplicationObject.Add(this);
						this._NeighborSystemID = value.NeighborSystemID;
					}
					else
					{
						this._NeighborSystemID = default(Nullable<int>);
					}
					this.SendPropertyChanged("NeighborSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.N_RssFeed")]
	public partial class N_RssFeed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RssFeedID;
		
		private string _Copyright;
		
		private string _Description;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _ObjectTypeSysName;
		
		private string _Predicate;
		
		private string _PubDate;
		
		private string _SysName;
		
		private string _Title;
		
		private int _Ttl;
		
		private string _ViewFormSysName;
		
		private string _Author;
		
		private string _WebMaster;
		
		private string _LinkParams;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRssFeedIDChanging(int value);
    partial void OnRssFeedIDChanged();
    partial void OnCopyrightChanging(string value);
    partial void OnCopyrightChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnObjectTypeSysNameChanging(string value);
    partial void OnObjectTypeSysNameChanged();
    partial void OnPredicateChanging(string value);
    partial void OnPredicateChanged();
    partial void OnPubDateChanging(string value);
    partial void OnPubDateChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTtlChanging(int value);
    partial void OnTtlChanged();
    partial void OnViewFormSysNameChanging(string value);
    partial void OnViewFormSysNameChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnWebMasterChanging(string value);
    partial void OnWebMasterChanged();
    partial void OnLinkParamsChanging(string value);
    partial void OnLinkParamsChanged();
    #endregion
		
		public N_RssFeed()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_RssFeedID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RssFeedID
		{
			get
			{
				return this._RssFeedID;
			}
			set
			{
				if ((this._RssFeedID != value))
				{
					this.OnRssFeedIDChanging(value);
					this.SendPropertyChanging();
					this._RssFeedID = value;
					this.SendPropertyChanged("RssFeedID");
					this.OnRssFeedIDChanged();
				}
			}
		}
		
		[Column(Storage="_Copyright", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Copyright
		{
			get
			{
				return this._Copyright;
			}
			set
			{
				if ((this._Copyright != value))
				{
					this.OnCopyrightChanging(value);
					this.SendPropertyChanging();
					this._Copyright = value;
					this.SendPropertyChanged("Copyright");
					this.OnCopyrightChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectTypeSysName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectTypeSysName
		{
			get
			{
				return this._ObjectTypeSysName;
			}
			set
			{
				if ((this._ObjectTypeSysName != value))
				{
					this.OnObjectTypeSysNameChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeSysName = value;
					this.SendPropertyChanged("ObjectTypeSysName");
					this.OnObjectTypeSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_Predicate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Predicate
		{
			get
			{
				return this._Predicate;
			}
			set
			{
				if ((this._Predicate != value))
				{
					this.OnPredicateChanging(value);
					this.SendPropertyChanging();
					this._Predicate = value;
					this.SendPropertyChanged("Predicate");
					this.OnPredicateChanged();
				}
			}
		}
		
		[Column(Storage="_PubDate", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PubDate
		{
			get
			{
				return this._PubDate;
			}
			set
			{
				if ((this._PubDate != value))
				{
					this.OnPubDateChanging(value);
					this.SendPropertyChanging();
					this._PubDate = value;
					this.SendPropertyChanged("PubDate");
					this.OnPubDateChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Ttl", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Ttl
		{
			get
			{
				return this._Ttl;
			}
			set
			{
				if ((this._Ttl != value))
				{
					this.OnTtlChanging(value);
					this.SendPropertyChanging();
					this._Ttl = value;
					this.SendPropertyChanged("Ttl");
					this.OnTtlChanged();
				}
			}
		}
		
		[Column(Storage="_ViewFormSysName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ViewFormSysName
		{
			get
			{
				return this._ViewFormSysName;
			}
			set
			{
				if ((this._ViewFormSysName != value))
				{
					this.OnViewFormSysNameChanging(value);
					this.SendPropertyChanging();
					this._ViewFormSysName = value;
					this.SendPropertyChanged("ViewFormSysName");
					this.OnViewFormSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_WebMaster", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string WebMaster
		{
			get
			{
				return this._WebMaster;
			}
			set
			{
				if ((this._WebMaster != value))
				{
					this.OnWebMasterChanging(value);
					this.SendPropertyChanging();
					this._WebMaster = value;
					this.SendPropertyChanged("WebMaster");
					this.OnWebMasterChanged();
				}
			}
		}
		
		[Column(Storage="_LinkParams", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string LinkParams
		{
			get
			{
				return this._LinkParams;
			}
			set
			{
				if ((this._LinkParams != value))
				{
					this.OnLinkParamsChanging(value);
					this.SendPropertyChanging();
					this._LinkParams = value;
					this.SendPropertyChanged("LinkParams");
					this.OnLinkParamsChanged();
				}
			}
		}
		
		[Association(Name="FK_N_RssFeed_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.N_RssFeed.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.N_RssFeed.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.N_Settings")]
	public partial class N_Settings : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SystemName;
		
		private string _Title;
		
		private string _Value;
		
		private bool _IsSystem;
		
		private System.Guid _SettingsGUID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _AcceptableValues;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSystemNameChanging(string value);
    partial void OnSystemNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnIsSystemChanging(bool value);
    partial void OnIsSystemChanged();
    partial void OnSettingsGUIDChanging(System.Guid value);
    partial void OnSettingsGUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnAcceptableValuesChanging(string value);
    partial void OnAcceptableValuesChanged();
    #endregion
		
		public N_Settings()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_SystemName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SystemName
		{
			get
			{
				return this._SystemName;
			}
			set
			{
				if ((this._SystemName != value))
				{
					this.OnSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SystemName = value;
					this.SendPropertyChanged("SystemName");
					this.OnSystemNameChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_IsSystem", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSystem
		{
			get
			{
				return this._IsSystem;
			}
			set
			{
				if ((this._IsSystem != value))
				{
					this.OnIsSystemChanging(value);
					this.SendPropertyChanging();
					this._IsSystem = value;
					this.SendPropertyChanged("IsSystem");
					this.OnIsSystemChanged();
				}
			}
		}
		
		[Column(Storage="_SettingsGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SettingsGUID
		{
			get
			{
				return this._SettingsGUID;
			}
			set
			{
				if ((this._SettingsGUID != value))
				{
					this.OnSettingsGUIDChanging(value);
					this.SendPropertyChanging();
					this._SettingsGUID = value;
					this.SendPropertyChanged("SettingsGUID");
					this.OnSettingsGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_AcceptableValues", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string AcceptableValues
		{
			get
			{
				return this._AcceptableValues;
			}
			set
			{
				if ((this._AcceptableValues != value))
				{
					this.OnAcceptableValuesChanging(value);
					this.SendPropertyChanging();
					this._AcceptableValues = value;
					this.SendPropertyChanged("AcceptableValues");
					this.OnAcceptableValuesChanged();
				}
			}
		}
		
		[Association(Name="FK_N_Settings_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.N_Settings.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.N_Settings.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.N_SqlStatementLog")]
	public partial class N_SqlStatementLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SqlStatementLogID;
		
		private string _Title;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _IP;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSqlStatementLogIDChanging(int value);
    partial void OnSqlStatementLogIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    #endregion
		
		public N_SqlStatementLog()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_SqlStatementLogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SqlStatementLogID
		{
			get
			{
				return this._SqlStatementLogID;
			}
			set
			{
				if ((this._SqlStatementLogID != value))
				{
					this.OnSqlStatementLogIDChanging(value);
					this.SendPropertyChanging();
					this._SqlStatementLogID = value;
					this.SendPropertyChanged("SqlStatementLogID");
					this.OnSqlStatementLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IP", DbType="NVarChar(15) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[Association(Name="FK_N_SqlStatementLog_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.N_SqlStatementLog.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.N_SqlStatementLog.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.N_TableInfo")]
	public partial class N_TableInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TableName;
		
		private System.DateTime _LastDataModify;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    partial void OnLastDataModifyChanging(System.DateTime value);
    partial void OnLastDataModifyChanged();
    #endregion
		
		public N_TableInfo()
		{
			OnCreated();
		}
		
		[Column(Storage="_TableName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastDataModify", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastDataModify
		{
			get
			{
				return this._LastDataModify;
			}
			set
			{
				if ((this._LastDataModify != value))
				{
					this.OnLastDataModifyChanging(value);
					this.SendPropertyChanging();
					this._LastDataModify = value;
					this.SendPropertyChanged("LastDataModify");
					this.OnLastDataModifyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.N_TextResource")]
	public partial class N_TextResource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TextResourceID;
		
		private string _Title;
		
		private string _SysName;
		
		private EntitySet<N_TextResourceData> _N_TextResourceData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTextResourceIDChanging(int value);
    partial void OnTextResourceIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    #endregion
		
		public N_TextResource()
		{
			this._N_TextResourceData = new EntitySet<N_TextResourceData>(new Action<N_TextResourceData>(this.attach_N_TextResourceData), new Action<N_TextResourceData>(this.detach_N_TextResourceData));
			OnCreated();
		}
		
		[Column(Storage="_TextResourceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TextResourceID
		{
			get
			{
				return this._TextResourceID;
			}
			set
			{
				if ((this._TextResourceID != value))
				{
					this.OnTextResourceIDChanging(value);
					this.SendPropertyChanging();
					this._TextResourceID = value;
					this.SendPropertyChanged("TextResourceID");
					this.OnTextResourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Association(Name="FK_N_TextResourceData_N_TextResource", Storage="_N_TextResourceData", ThisKey="TextResourceID", OtherKey="TextResourceID", DeleteRule="CASCADE")]
		public EntitySet<N_TextResourceData> N_TextResourceData
		{
			get
			{
				return this._N_TextResourceData;
			}
			set
			{
				this._N_TextResourceData.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_N_TextResourceData(N_TextResourceData entity)
		{
			this.SendPropertyChanging();
			entity.N_TextResource = this;
		}
		
		private void detach_N_TextResourceData(N_TextResourceData entity)
		{
			this.SendPropertyChanging();
			entity.N_TextResource = null;
		}
	}
	
	[Table(Name="dbo.N_TextResourceData")]
	public partial class N_TextResourceData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _N_TextResourceDataID;
		
		private int _TextResourceID;
		
		private string _LanguageCode;
		
		private string _Text;
		
		private EntityRef<C_Language> _C_Language;
		
		private EntityRef<N_TextResource> _N_TextResource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnN_TextResourceDataIDChanging(int value);
    partial void OnN_TextResourceDataIDChanged();
    partial void OnTextResourceIDChanging(int value);
    partial void OnTextResourceIDChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public N_TextResourceData()
		{
			this._C_Language = default(EntityRef<C_Language>);
			this._N_TextResource = default(EntityRef<N_TextResource>);
			OnCreated();
		}
		
		[Column(Storage="_N_TextResourceDataID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int N_TextResourceDataID
		{
			get
			{
				return this._N_TextResourceDataID;
			}
			set
			{
				if ((this._N_TextResourceDataID != value))
				{
					this.OnN_TextResourceDataIDChanging(value);
					this.SendPropertyChanging();
					this._N_TextResourceDataID = value;
					this.SendPropertyChanged("N_TextResourceDataID");
					this.OnN_TextResourceDataIDChanged();
				}
			}
		}
		
		[Column(Storage="_TextResourceID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TextResourceID
		{
			get
			{
				return this._TextResourceID;
			}
			set
			{
				if ((this._TextResourceID != value))
				{
					if (this._N_TextResource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTextResourceIDChanging(value);
					this.SendPropertyChanging();
					this._TextResourceID = value;
					this.SendPropertyChanged("TextResourceID");
					this.OnTextResourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="NChar(2) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					if (this._C_Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Association(Name="FK_N_TextResourceData_C_Language", Storage="_C_Language", ThisKey="LanguageCode", OtherKey="LanguageCode", IsForeignKey=true, DeleteOnNull=true)]
		public C_Language C_Language
		{
			get
			{
				return this._C_Language.Entity;
			}
			set
			{
				C_Language previousValue = this._C_Language.Entity;
				if (((previousValue != value) 
							|| (this._C_Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_Language.Entity = null;
						previousValue.N_TextResourceData.Remove(this);
					}
					this._C_Language.Entity = value;
					if ((value != null))
					{
						value.N_TextResourceData.Add(this);
						this._LanguageCode = value.LanguageCode;
					}
					else
					{
						this._LanguageCode = default(string);
					}
					this.SendPropertyChanged("C_Language");
				}
			}
		}
		
		[Association(Name="FK_N_TextResourceData_N_TextResource", Storage="_N_TextResource", ThisKey="TextResourceID", OtherKey="TextResourceID", IsForeignKey=true, DeleteOnNull=true)]
		public N_TextResource N_TextResource
		{
			get
			{
				return this._N_TextResource.Entity;
			}
			set
			{
				N_TextResource previousValue = this._N_TextResource.Entity;
				if (((previousValue != value) 
							|| (this._N_TextResource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._N_TextResource.Entity = null;
						previousValue.N_TextResourceData.Remove(this);
					}
					this._N_TextResource.Entity = value;
					if ((value != null))
					{
						value.N_TextResourceData.Add(this);
						this._TextResourceID = value.TextResourceID;
					}
					else
					{
						this._TextResourceID = default(int);
					}
					this.SendPropertyChanged("N_TextResource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.N_TimeZone")]
	public partial class N_TimeZone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TimeZoneID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private int _GMTOffset;
		
		private string _Comment;
		
		private EntitySet<C_RFSubject> _C_RFSubject;
		
		private EntitySet<HST_N_TimeZone> _HST_N_TimeZone;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeZoneIDChanging(int value);
    partial void OnTimeZoneIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnGMTOffsetChanging(int value);
    partial void OnGMTOffsetChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public N_TimeZone()
		{
			this._C_RFSubject = new EntitySet<C_RFSubject>(new Action<C_RFSubject>(this.attach_C_RFSubject), new Action<C_RFSubject>(this.detach_C_RFSubject));
			this._HST_N_TimeZone = new EntitySet<HST_N_TimeZone>(new Action<HST_N_TimeZone>(this.attach_HST_N_TimeZone), new Action<HST_N_TimeZone>(this.detach_HST_N_TimeZone));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_TimeZoneID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TimeZoneID
		{
			get
			{
				return this._TimeZoneID;
			}
			set
			{
				if ((this._TimeZoneID != value))
				{
					this.OnTimeZoneIDChanging(value);
					this.SendPropertyChanging();
					this._TimeZoneID = value;
					this.SendPropertyChanged("TimeZoneID");
					this.OnTimeZoneIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_GMTOffset", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int GMTOffset
		{
			get
			{
				return this._GMTOffset;
			}
			set
			{
				if ((this._GMTOffset != value))
				{
					this.OnGMTOffsetChanging(value);
					this.SendPropertyChanging();
					this._GMTOffset = value;
					this.SendPropertyChanged("GMTOffset");
					this.OnGMTOffsetChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Association(Name="FK_C_RFSubject_TimeZone", Storage="_C_RFSubject", ThisKey="TimeZoneID", OtherKey="TimeZoneID", DeleteRule="NO ACTION")]
		public EntitySet<C_RFSubject> C_RFSubject
		{
			get
			{
				return this._C_RFSubject;
			}
			set
			{
				this._C_RFSubject.Assign(value);
			}
		}
		
		[Association(Name="FK_HST_N_TimeZone_N_TimeZone", Storage="_HST_N_TimeZone", ThisKey="TimeZoneID", OtherKey="TimeZoneID", DeleteRule="CASCADE")]
		public EntitySet<HST_N_TimeZone> HST_N_TimeZone
		{
			get
			{
				return this._HST_N_TimeZone;
			}
			set
			{
				this._HST_N_TimeZone.Assign(value);
			}
		}
		
		[Association(Name="FK_N_TimeZone_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.N_TimeZone.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.N_TimeZone.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_RFSubject(C_RFSubject entity)
		{
			this.SendPropertyChanging();
			entity.TimeZone = this;
		}
		
		private void detach_C_RFSubject(C_RFSubject entity)
		{
			this.SendPropertyChanging();
			entity.TimeZone = null;
		}
		
		private void attach_HST_N_TimeZone(HST_N_TimeZone entity)
		{
			this.SendPropertyChanging();
			entity.N_TimeZone = this;
		}
		
		private void detach_HST_N_TimeZone(HST_N_TimeZone entity)
		{
			this.SendPropertyChanging();
			entity.N_TimeZone = null;
		}
	}
	
	[Table(Name="dbo.N_VirusScanLog")]
	public partial class N_VirusScanLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VirusScanLogID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private int _ResultCode;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVirusScanLogIDChanging(int value);
    partial void OnVirusScanLogIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnResultCodeChanging(int value);
    partial void OnResultCodeChanged();
    #endregion
		
		public N_VirusScanLog()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_VirusScanLogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VirusScanLogID
		{
			get
			{
				return this._VirusScanLogID;
			}
			set
			{
				if ((this._VirusScanLogID != value))
				{
					this.OnVirusScanLogIDChanging(value);
					this.SendPropertyChanging();
					this._VirusScanLogID = value;
					this.SendPropertyChanged("VirusScanLogID");
					this.OnVirusScanLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ResultCode", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ResultCode
		{
			get
			{
				return this._ResultCode;
			}
			set
			{
				if ((this._ResultCode != value))
				{
					this.OnResultCodeChanging(value);
					this.SendPropertyChanging();
					this._ResultCode = value;
					this.SendPropertyChanged("ResultCode");
					this.OnResultCodeChanged();
				}
			}
		}
		
		[Association(Name="FK_N_VirusScanLog_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.N_VirusScanLog.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.N_VirusScanLog.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderDoc")]
	public partial class OrderDoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderGUID;
		
		private char _OrderType;
		
		private string _Title;
		
		private System.Nullable<System.DateTime> _OrderDate;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _DeclaredFromDate;
		
		private System.Nullable<System.DateTime> _DeclaredValidity;
		
		private System.Nullable<System.DateTime> _TargetFromDate;
		
		private System.Nullable<System.DateTime> _TargetValidity;
		
		private System.Nullable<int> _LicenseTypeID;
		
		private System.Nullable<int> _OperationTypeID;
		
		private string _ContractNo;
		
		private System.Nullable<System.DateTime> _ContractDate;
		
		private string _DealerName;
		
		private string _DealerAddress;
		
		private System.Nullable<int> _Country1ID;
		
		private System.Nullable<int> _Country2ID;
		
		private System.Nullable<int> _Country3ID;
		
		private System.Nullable<System.Guid> _ApplicantGUID;
		
		private bool _CanReissurance;
		
		private System.Nullable<int> _QuotaCountryGroupID;
		
		private System.Nullable<System.Guid> _QuoteOwnerGUID;
		
		private System.Nullable<int> _CNCategoryID;
		
		private System.Nullable<int> _CNID;
		
		private string _CommodityComment;
		
		private System.Nullable<decimal> _ResolvedQuantity;
		
		private System.Nullable<int> _MeasureID;
		
		private System.Nullable<decimal> _StatisticCost;
		
		private System.Nullable<decimal> _ContractCost;
		
		private System.Nullable<int> _PaymentCurrencyID;
		
		private System.Nullable<decimal> _AddResolvedQuantity;
		
		private System.Nullable<int> _AddMeasureID;
		
		private string _AdditionalInfo;
		
		private System.Nullable<System.DateTime> _FactShippedDate;
		
		private System.Nullable<decimal> _FactShippedQuantity;
		
		private System.Nullable<bool> _IsImported;
		
		private System.Nullable<System.Guid> _Guid;
		
		private string _InnerNumber;
		
		private System.Nullable<decimal> _OldID;
		
		private System.Nullable<int> _QuotaPeriod;
		
		private System.Nullable<System.DateTime> _UploadDate;
		
		private int _ActivityID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private System.Nullable<System.Guid> _ApplicantChiefGUID;
		
		private System.Nullable<System.Guid> _QuoteOwnerChiefGUID;
		
		private string _FactShippedGTD;
		
		private System.Nullable<System.Guid> _ApplicantRepresentativeGUID;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<System.DateTime> _RegDate;
		
		private string _RegNo;
		
		private System.Nullable<System.DateTime> _ChanceryRegDate;
		
		private string _ChanceryRegNo;
		
		private System.Nullable<int> _RepresentationID;
		
		private System.Nullable<int> _RegEmployeeID;
		
		private System.Nullable<System.DateTime> _SignDate;
		
		private string _CurState;
		
		private System.Nullable<int> _IssueEmployeeID;
		
		private System.Nullable<System.DateTime> _IssueDate;
		
		private string _IssueApplicant;
		
		private string _IssueAttorney;
		
		private string _Copy_Country1_Alpha2;
		
		private string _Copy_Country2_Alpha2;
		
		private string _Copy_Country3_Alpha2;
		
		private string _Copy_Country1_Title;
		
		private string _Copy_Country2_Title;
		
		private string _Copy_Country3_Title;
		
		private string _Copy_CN_Title;
		
		private string _Copy_Measure_Title;
		
		private string _Copy_PaymentCurrency_Code;
		
		private string _Copy_PaymentCurrency_Title;
		
		private string _Copy_AddMeasure_Title;
		
		private System.Nullable<int> _SiteNumber;
		
		private string _CurStateSite;
		
		private string _Comment;
		
		private System.Nullable<System.DateTime> _OrderDocTransition_CreateDate;
		
		private string _Activity_SysName;
		
		private System.Nullable<System.DateTime> _FactForm_FormDate;
		
		private System.Nullable<System.DateTime> _FactForm_SignDate;
		
		private System.Nullable<int> _FactForm_EmployeeID;
		
		private string _Activity_Title;
		
		private bool _Activity_IsDraft;
		
		private string _Copy_CNCategory_Title;
		
		private System.Nullable<int> _FactShippedMeasureID;
		
		private string _Copy_OperationType_Title;
		
		private string _Copy_LicenseType_Title;
		
		private int _UniqueIndex;
		
		private string _Copy_Applicant_INN;
		
		private string _Copy_Applicant_OKPO;
		
		private string _Copy_Applicant_Title;
		
		private string _Copy_Applicant_JuridicalAddress;
		
		private string _Copy_Applicant_Email;
		
		private string _Copy_Applicant_Phone;
		
		private string _Copy_Applicant_PassportSerial;
		
		private string _Copy_Applicant_PassportNumber;
		
		private string _Copy_Applicant_PassportIssuedBy;
		
		private System.Nullable<System.DateTime> _Copy_Applicant_PassportIssuedDate;
		
		private string _Copy_QuotaOwner_INN;
		
		private string _Copy_QuotaOwner_OKPO;
		
		private string _Copy_QuotaOwner_Title;
		
		private string _Copy_QuotaOwner_JuridicalAddress;
		
		private string _Copy_QuotaOwner_Email;
		
		private string _Copy_QuotaOwner_Phone;
		
		private string _Copy_QuotaOwner_PassportSerial;
		
		private string _Copy_QuotaOwner_PassportNumber;
		
		private string _Copy_QuotaOwner_PassportIssuedBy;
		
		private System.Nullable<System.DateTime> _Copy_QuotaOwner_PassportIssuedDate;
		
		private string _Copy_QuotaOwner_Fax;
		
		private string _Copy_GIText;
		
		private string _StampCode;
		
		private string _FactForm_EmployeePost;
		
		private string _FactForm_EmployeeTitle;
		
		private string _Copy_CN_Code;
		
		private bool _IsSigned;
		
		private string _UCN;
		
		private System.Nullable<char> _PassportState;
		
		private System.Nullable<char> _OrderState;
		
		private string _LicenseNo;
		
		private System.Nullable<bool> _IsSignatureValid;
		
		private string _PassportData;
		
		private string _FactData;
		
		private string _Email;
		
		private bool _IsAutoRegistered;
		
		private System.Nullable<System.DateTime> _SignDateByEmployee;
		
		private System.Nullable<bool> _IsSignatureByEmployeeValid;
		
		private System.Nullable<int> _MFCID;

        private string _AddInfoLetter;

        private System.Nullable<int> _Copy_RepresentationID;
		
		private bool _IsLicSended;
		
		private System.Nullable<System.DateTime> _CurrentValidityDate;

        private string _Properties;
		
		private EntitySet<Appendix> _AppendixItems;
		
		private EntitySet<Blank> _Blanks;
		
		private EntitySet<CommodityDocument> _CommodityDocs;
		
		private EntitySet<Copy_ContractorChiefPerson> _Copy_ContractorChiefPerson;
		
		private EntitySet<CustomsDeclaration> _CustomsDeclaration;
		
		private EntitySet<Letter> _Letter;
		
		private EntitySet<LicenseExecution> _Execution;
		
		private EntityRef<WF_Activity> _Activity;
		
		private EntityRef<C_Measure> _AddMeasure;
		
		private EntityRef<HST_Contractor> _Applicant;
		
		private EntityRef<ContractorChiefPerson> _ApplicantChief;
		
		private EntityRef<ContractorChiefPerson> _ApplicantRepresentative;
		
		private EntityRef<C_CN> _CN;
		
		private EntityRef<C_CNCategory> _CNCategory;
		
		private EntityRef<Representation> _Copy_Representation;
		
		private EntityRef<C_Country> _Country1;
		
		private EntityRef<C_Country> _Country2;
		
		private EntityRef<C_Country> _Country3;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _FactForm_Employee;
		
		private EntityRef<C_Measure> _FactShippedMeasure;
		
		private EntityRef<Employee> _IssueEmployee;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<C_LicenseType> _LicenseType;
		
		private EntityRef<C_Measure> _Measure;
		
		private EntityRef<C_MFC> _MFC;
		
		private EntityRef<C_OperationType> _OperationType;
		
		private EntityRef<C_Currency> _PaymentCurrency;
		
		private EntityRef<C_CountryGroup> _QuotaCountryGroup;
		
		private EntityRef<HST_Contractor> _QuoteOwner;
		
		private EntityRef<ContractorChiefPerson> _QuoteOwnerChief;
		
		private EntityRef<Employee> _RegEmployee;
		
		private EntityRef<Representation> _Representation;
		
		private EntitySet<OrderDocAsso> _OrderDocAsso;
		
		private EntitySet<OrderDocAsso> _OrderGU;
		
		private EntityRef<OrderDocBankReplication> _OrderDocBankReplication;
		
		private EntitySet<OrderDocDeviation> _Declensions;
		
		private EntitySet<OrderDocImportSubject> _OrderDocImportSubject;
		
		private EntitySet<OrderDocPassport> _OrderDocPassport;
		
		private EntitySet<OrderDocResponsible> _OrderDocResponsible;
		
		private EntitySet<OrderDocState> _States;
		
		private EntitySet<OrderDocTransition> _OrderDocTransition;
		
		private EntitySet<PaymentOrder> _LicensePaymentOrders;
		
		private EntitySet<PaymentOrder> _RequestPaymentOrders;
		
		private EntitySet<PaymentOrderLicenses> _PaymentOrderLicenses;
		
		private EntitySet<PaymentOrderRequests> _PaymentOrderRequests;
		
		private EntitySet<SpecificationCommon> _SpecificationCommon;
		
		private EntitySet<SpecificationItem> _SpecificationItem;
		
		private EntitySet<TreasuryPaymentLicense> _TreasuryPaymentLicense;
		
		private EntitySet<TreasuryPaymentRequest> _TreasuryPaymentRequest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderGUIDChanging(System.Guid value);
    partial void OnOrderGUIDChanged();
    partial void OnOrderTypeChanging(char value);
    partial void OnOrderTypeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDateChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnDeclaredFromDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeclaredFromDateChanged();
    partial void OnDeclaredValidityChanging(System.Nullable<System.DateTime> value);
    partial void OnDeclaredValidityChanged();
    partial void OnTargetFromDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTargetFromDateChanged();
    partial void OnTargetValidityChanging(System.Nullable<System.DateTime> value);
    partial void OnTargetValidityChanged();
    partial void OnLicenseTypeIDChanging(System.Nullable<int> value);
    partial void OnLicenseTypeIDChanged();
    partial void OnOperationTypeIDChanging(System.Nullable<int> value);
    partial void OnOperationTypeIDChanged();
    partial void OnContractNoChanging(string value);
    partial void OnContractNoChanged();
    partial void OnContractDateChanging(System.Nullable<System.DateTime> value);
    partial void OnContractDateChanged();
    partial void OnDealerNameChanging(string value);
    partial void OnDealerNameChanged();
    partial void OnDealerAddressChanging(string value);
    partial void OnDealerAddressChanged();
    partial void OnCountry1IDChanging(System.Nullable<int> value);
    partial void OnCountry1IDChanged();
    partial void OnCountry2IDChanging(System.Nullable<int> value);
    partial void OnCountry2IDChanged();
    partial void OnCountry3IDChanging(System.Nullable<int> value);
    partial void OnCountry3IDChanged();
    partial void OnApplicantGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnApplicantGUIDChanged();
    partial void OnCanReissuranceChanging(bool value);
    partial void OnCanReissuranceChanged();
    partial void OnQuotaCountryGroupIDChanging(System.Nullable<int> value);
    partial void OnQuotaCountryGroupIDChanged();
    partial void OnQuoteOwnerGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnQuoteOwnerGUIDChanged();
    partial void OnCNCategoryIDChanging(System.Nullable<int> value);
    partial void OnCNCategoryIDChanged();
    partial void OnCNIDChanging(System.Nullable<int> value);
    partial void OnCNIDChanged();
    partial void OnCommodityCommentChanging(string value);
    partial void OnCommodityCommentChanged();
    partial void OnResolvedQuantityChanging(System.Nullable<decimal> value);
    partial void OnResolvedQuantityChanged();
    partial void OnMeasureIDChanging(System.Nullable<int> value);
    partial void OnMeasureIDChanged();
    partial void OnStatisticCostChanging(System.Nullable<decimal> value);
    partial void OnStatisticCostChanged();
    partial void OnContractCostChanging(System.Nullable<decimal> value);
    partial void OnContractCostChanged();
    partial void OnPaymentCurrencyIDChanging(System.Nullable<int> value);
    partial void OnPaymentCurrencyIDChanged();
    partial void OnAddResolvedQuantityChanging(System.Nullable<decimal> value);
    partial void OnAddResolvedQuantityChanged();
    partial void OnAddMeasureIDChanging(System.Nullable<int> value);
    partial void OnAddMeasureIDChanged();
    partial void OnAdditionalInfoChanging(string value);
    partial void OnAdditionalInfoChanged();
    partial void OnFactShippedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFactShippedDateChanged();
    partial void OnFactShippedQuantityChanging(System.Nullable<decimal> value);
    partial void OnFactShippedQuantityChanged();
    partial void OnIsImportedChanging(System.Nullable<bool> value);
    partial void OnIsImportedChanged();
    partial void OnGuidChanging(System.Nullable<System.Guid> value);
    partial void OnGuidChanged();
    partial void OnInnerNumberChanging(string value);
    partial void OnInnerNumberChanged();
    partial void OnOldIDChanging(System.Nullable<decimal> value);
    partial void OnOldIDChanged();
    partial void OnQuotaPeriodChanging(System.Nullable<int> value);
    partial void OnQuotaPeriodChanged();
    partial void OnUploadDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUploadDateChanged();
    partial void OnActivityIDChanging(int value);
    partial void OnActivityIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnApplicantChiefGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnApplicantChiefGUIDChanged();
    partial void OnQuoteOwnerChiefGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnQuoteOwnerChiefGUIDChanged();
    partial void OnFactShippedGTDChanging(string value);
    partial void OnFactShippedGTDChanged();
    partial void OnApplicantRepresentativeGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnApplicantRepresentativeGUIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnRegDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRegDateChanged();
    partial void OnRegNoChanging(string value);
    partial void OnRegNoChanged();
    partial void OnChanceryRegDateChanging(System.Nullable<System.DateTime> value);
    partial void OnChanceryRegDateChanged();
    partial void OnChanceryRegNoChanging(string value);
    partial void OnChanceryRegNoChanged();
    partial void OnRepresentationIDChanging(System.Nullable<int> value);
    partial void OnRepresentationIDChanged();
    partial void OnRegEmployeeIDChanging(System.Nullable<int> value);
    partial void OnRegEmployeeIDChanged();
    partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateChanged();
    partial void OnCurStateChanging(string value);
    partial void OnCurStateChanged();
    partial void OnIssueEmployeeIDChanging(System.Nullable<int> value);
    partial void OnIssueEmployeeIDChanged();
    partial void OnIssueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIssueDateChanged();
    partial void OnIssueApplicantChanging(string value);
    partial void OnIssueApplicantChanged();
    partial void OnIssueAttorneyChanging(string value);
    partial void OnIssueAttorneyChanged();
    partial void OnCopy_Country1_Alpha2Changing(string value);
    partial void OnCopy_Country1_Alpha2Changed();
    partial void OnCopy_Country2_Alpha2Changing(string value);
    partial void OnCopy_Country2_Alpha2Changed();
    partial void OnCopy_Country3_Alpha2Changing(string value);
    partial void OnCopy_Country3_Alpha2Changed();
    partial void OnCopy_Country1_TitleChanging(string value);
    partial void OnCopy_Country1_TitleChanged();
    partial void OnCopy_Country2_TitleChanging(string value);
    partial void OnCopy_Country2_TitleChanged();
    partial void OnCopy_Country3_TitleChanging(string value);
    partial void OnCopy_Country3_TitleChanged();
    partial void OnCopy_CN_TitleChanging(string value);
    partial void OnCopy_CN_TitleChanged();
    partial void OnCopy_Measure_TitleChanging(string value);
    partial void OnCopy_Measure_TitleChanged();
    partial void OnCopy_PaymentCurrency_CodeChanging(string value);
    partial void OnCopy_PaymentCurrency_CodeChanged();
    partial void OnCopy_PaymentCurrency_TitleChanging(string value);
    partial void OnCopy_PaymentCurrency_TitleChanged();
    partial void OnCopy_AddMeasure_TitleChanging(string value);
    partial void OnCopy_AddMeasure_TitleChanged();
    partial void OnSiteNumberChanging(System.Nullable<int> value);
    partial void OnSiteNumberChanged();
    partial void OnCurStateSiteChanging(string value);
    partial void OnCurStateSiteChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnOrderDocTransition_CreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDocTransition_CreateDateChanged();
    partial void OnActivity_SysNameChanging(string value);
    partial void OnActivity_SysNameChanged();
    partial void OnFactForm_FormDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFactForm_FormDateChanged();
    partial void OnFactForm_SignDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFactForm_SignDateChanged();
    partial void OnFactForm_EmployeeIDChanging(System.Nullable<int> value);
    partial void OnFactForm_EmployeeIDChanged();
    partial void OnActivity_TitleChanging(string value);
    partial void OnActivity_TitleChanged();
    partial void OnActivity_IsDraftChanging(bool value);
    partial void OnActivity_IsDraftChanged();
    partial void OnCopy_CNCategory_TitleChanging(string value);
    partial void OnCopy_CNCategory_TitleChanged();
    partial void OnFactShippedMeasureIDChanging(System.Nullable<int> value);
    partial void OnFactShippedMeasureIDChanged();
    partial void OnCopy_OperationType_TitleChanging(string value);
    partial void OnCopy_OperationType_TitleChanged();
    partial void OnCopy_LicenseType_TitleChanging(string value);
    partial void OnCopy_LicenseType_TitleChanged();
    partial void OnUniqueIndexChanging(int value);
    partial void OnUniqueIndexChanged();
    partial void OnCopy_Applicant_INNChanging(string value);
    partial void OnCopy_Applicant_INNChanged();
    partial void OnCopy_Applicant_OKPOChanging(string value);
    partial void OnCopy_Applicant_OKPOChanged();
    partial void OnCopy_Applicant_TitleChanging(string value);
    partial void OnCopy_Applicant_TitleChanged();
    partial void OnCopy_Applicant_JuridicalAddressChanging(string value);
    partial void OnCopy_Applicant_JuridicalAddressChanged();
    partial void OnCopy_Applicant_EmailChanging(string value);
    partial void OnCopy_Applicant_EmailChanged();
    partial void OnCopy_Applicant_PhoneChanging(string value);
    partial void OnCopy_Applicant_PhoneChanged();
    partial void OnCopy_Applicant_PassportSerialChanging(string value);
    partial void OnCopy_Applicant_PassportSerialChanged();
    partial void OnCopy_Applicant_PassportNumberChanging(string value);
    partial void OnCopy_Applicant_PassportNumberChanged();
    partial void OnCopy_Applicant_PassportIssuedByChanging(string value);
    partial void OnCopy_Applicant_PassportIssuedByChanged();
    partial void OnCopy_Applicant_PassportIssuedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCopy_Applicant_PassportIssuedDateChanged();
    partial void OnCopy_QuotaOwner_INNChanging(string value);
    partial void OnCopy_QuotaOwner_INNChanged();
    partial void OnCopy_QuotaOwner_OKPOChanging(string value);
    partial void OnCopy_QuotaOwner_OKPOChanged();
    partial void OnCopy_QuotaOwner_TitleChanging(string value);
    partial void OnCopy_QuotaOwner_TitleChanged();
    partial void OnCopy_QuotaOwner_JuridicalAddressChanging(string value);
    partial void OnCopy_QuotaOwner_JuridicalAddressChanged();
    partial void OnCopy_QuotaOwner_EmailChanging(string value);
    partial void OnCopy_QuotaOwner_EmailChanged();
    partial void OnCopy_QuotaOwner_PhoneChanging(string value);
    partial void OnCopy_QuotaOwner_PhoneChanged();
    partial void OnCopy_QuotaOwner_PassportSerialChanging(string value);
    partial void OnCopy_QuotaOwner_PassportSerialChanged();
    partial void OnCopy_QuotaOwner_PassportNumberChanging(string value);
    partial void OnCopy_QuotaOwner_PassportNumberChanged();
    partial void OnCopy_QuotaOwner_PassportIssuedByChanging(string value);
    partial void OnCopy_QuotaOwner_PassportIssuedByChanged();
    partial void OnCopy_QuotaOwner_PassportIssuedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCopy_QuotaOwner_PassportIssuedDateChanged();
    partial void OnCopy_QuotaOwner_FaxChanging(string value);
    partial void OnCopy_QuotaOwner_FaxChanged();
    partial void OnCopy_GITextChanging(string value);
    partial void OnCopy_GITextChanged();
    partial void OnStampCodeChanging(string value);
    partial void OnStampCodeChanged();
    partial void OnFactForm_EmployeePostChanging(string value);
    partial void OnFactForm_EmployeePostChanged();
    partial void OnFactForm_EmployeeTitleChanging(string value);
    partial void OnFactForm_EmployeeTitleChanged();
    partial void OnCopy_CN_CodeChanging(string value);
    partial void OnCopy_CN_CodeChanged();
    partial void OnIsSignedChanging(bool value);
    partial void OnIsSignedChanged();
    partial void OnUCNChanging(string value);
    partial void OnUCNChanged();
    partial void OnPassportStateChanging(System.Nullable<char> value);
    partial void OnPassportStateChanged();
    partial void OnOrderStateChanging(System.Nullable<char> value);
    partial void OnOrderStateChanged();
    partial void OnLicenseNoChanging(string value);
    partial void OnLicenseNoChanged();
    partial void OnIsSignatureValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureValidChanged();
    partial void OnPassportDataChanging(string value);
    partial void OnPassportDataChanged();
    partial void OnFactDataChanging(string value);
    partial void OnFactDataChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIsAutoRegisteredChanging(bool value);
    partial void OnIsAutoRegisteredChanged();
    partial void OnSignDateByEmployeeChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateByEmployeeChanged();
    partial void OnIsSignatureByEmployeeValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureByEmployeeValidChanged();
    partial void OnMFCIDChanging(System.Nullable<int> value);
    partial void OnMFCIDChanged();
    partial void OnCopy_RepresentationIDChanging(System.Nullable<int> value);
    partial void OnCopy_RepresentationIDChanged();
    partial void OnIsLicSendedChanging(bool value);
    partial void OnIsLicSendedChanged();
    partial void OnCurrentValidityDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCurrentValidityDateChanged();
    partial void OnPropertiesChanging(string value);
    partial void OnPropertiesChanged();
    partial void OnAddInfoLetterChanging(string value);
    partial void OnAddInfoLetterChanged();
        #endregion

        public OrderDoc()
		{
			this._AppendixItems = new EntitySet<Appendix>(new Action<Appendix>(this.attach_AppendixItems), new Action<Appendix>(this.detach_AppendixItems));
			this._Blanks = new EntitySet<Blank>(new Action<Blank>(this.attach_Blanks), new Action<Blank>(this.detach_Blanks));
			this._CommodityDocs = new EntitySet<CommodityDocument>(new Action<CommodityDocument>(this.attach_CommodityDocs), new Action<CommodityDocument>(this.detach_CommodityDocs));
			this._Copy_ContractorChiefPerson = new EntitySet<Copy_ContractorChiefPerson>(new Action<Copy_ContractorChiefPerson>(this.attach_Copy_ContractorChiefPerson), new Action<Copy_ContractorChiefPerson>(this.detach_Copy_ContractorChiefPerson));
			this._CustomsDeclaration = new EntitySet<CustomsDeclaration>(new Action<CustomsDeclaration>(this.attach_CustomsDeclaration), new Action<CustomsDeclaration>(this.detach_CustomsDeclaration));
			this._Letter = new EntitySet<Letter>(new Action<Letter>(this.attach_Letter), new Action<Letter>(this.detach_Letter));
			this._Execution = new EntitySet<LicenseExecution>(new Action<LicenseExecution>(this.attach_Execution), new Action<LicenseExecution>(this.detach_Execution));
			this._Activity = default(EntityRef<WF_Activity>);
			this._AddMeasure = default(EntityRef<C_Measure>);
			this._Applicant = default(EntityRef<HST_Contractor>);
			this._ApplicantChief = default(EntityRef<ContractorChiefPerson>);
			this._ApplicantRepresentative = default(EntityRef<ContractorChiefPerson>);
			this._CN = default(EntityRef<C_CN>);
			this._CNCategory = default(EntityRef<C_CNCategory>);
			this._Copy_Representation = default(EntityRef<Representation>);
			this._Country1 = default(EntityRef<C_Country>);
			this._Country2 = default(EntityRef<C_Country>);
			this._Country3 = default(EntityRef<C_Country>);
			this._Employee = default(EntityRef<Employee>);
			this._FactForm_Employee = default(EntityRef<Employee>);
			this._FactShippedMeasure = default(EntityRef<C_Measure>);
			this._IssueEmployee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._LicenseType = default(EntityRef<C_LicenseType>);
			this._Measure = default(EntityRef<C_Measure>);
			this._MFC = default(EntityRef<C_MFC>);
			this._OperationType = default(EntityRef<C_OperationType>);
			this._PaymentCurrency = default(EntityRef<C_Currency>);
			this._QuotaCountryGroup = default(EntityRef<C_CountryGroup>);
			this._QuoteOwner = default(EntityRef<HST_Contractor>);
			this._QuoteOwnerChief = default(EntityRef<ContractorChiefPerson>);
			this._RegEmployee = default(EntityRef<Employee>);
			this._Representation = default(EntityRef<Representation>);
			this._OrderDocAsso = new EntitySet<OrderDocAsso>(new Action<OrderDocAsso>(this.attach_OrderDocAsso), new Action<OrderDocAsso>(this.detach_OrderDocAsso));
			this._OrderGU = new EntitySet<OrderDocAsso>(new Action<OrderDocAsso>(this.attach_OrderGU), new Action<OrderDocAsso>(this.detach_OrderGU));
			this._OrderDocBankReplication = default(EntityRef<OrderDocBankReplication>);
			this._Declensions = new EntitySet<OrderDocDeviation>(new Action<OrderDocDeviation>(this.attach_Declensions), new Action<OrderDocDeviation>(this.detach_Declensions));
			this._OrderDocImportSubject = new EntitySet<OrderDocImportSubject>(new Action<OrderDocImportSubject>(this.attach_OrderDocImportSubject), new Action<OrderDocImportSubject>(this.detach_OrderDocImportSubject));
			this._OrderDocPassport = new EntitySet<OrderDocPassport>(new Action<OrderDocPassport>(this.attach_OrderDocPassport), new Action<OrderDocPassport>(this.detach_OrderDocPassport));
			this._OrderDocResponsible = new EntitySet<OrderDocResponsible>(new Action<OrderDocResponsible>(this.attach_OrderDocResponsible), new Action<OrderDocResponsible>(this.detach_OrderDocResponsible));
			this._States = new EntitySet<OrderDocState>(new Action<OrderDocState>(this.attach_States), new Action<OrderDocState>(this.detach_States));
			this._OrderDocTransition = new EntitySet<OrderDocTransition>(new Action<OrderDocTransition>(this.attach_OrderDocTransition), new Action<OrderDocTransition>(this.detach_OrderDocTransition));
			this._LicensePaymentOrders = new EntitySet<PaymentOrder>(new Action<PaymentOrder>(this.attach_LicensePaymentOrders), new Action<PaymentOrder>(this.detach_LicensePaymentOrders));
			this._RequestPaymentOrders = new EntitySet<PaymentOrder>(new Action<PaymentOrder>(this.attach_RequestPaymentOrders), new Action<PaymentOrder>(this.detach_RequestPaymentOrders));
			this._PaymentOrderLicenses = new EntitySet<PaymentOrderLicenses>(new Action<PaymentOrderLicenses>(this.attach_PaymentOrderLicenses), new Action<PaymentOrderLicenses>(this.detach_PaymentOrderLicenses));
			this._PaymentOrderRequests = new EntitySet<PaymentOrderRequests>(new Action<PaymentOrderRequests>(this.attach_PaymentOrderRequests), new Action<PaymentOrderRequests>(this.detach_PaymentOrderRequests));
			this._SpecificationCommon = new EntitySet<SpecificationCommon>(new Action<SpecificationCommon>(this.attach_SpecificationCommon), new Action<SpecificationCommon>(this.detach_SpecificationCommon));
			this._SpecificationItem = new EntitySet<SpecificationItem>(new Action<SpecificationItem>(this.attach_SpecificationItem), new Action<SpecificationItem>(this.detach_SpecificationItem));
			this._TreasuryPaymentLicense = new EntitySet<TreasuryPaymentLicense>(new Action<TreasuryPaymentLicense>(this.attach_TreasuryPaymentLicense), new Action<TreasuryPaymentLicense>(this.detach_TreasuryPaymentLicense));
			this._TreasuryPaymentRequest = new EntitySet<TreasuryPaymentRequest>(new Action<TreasuryPaymentRequest>(this.attach_TreasuryPaymentRequest), new Action<TreasuryPaymentRequest>(this.detach_TreasuryPaymentRequest));
			OnCreated();
		}
		
		[Column(Storage="_OrderGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderGUID
		{
			get
			{
				return this._OrderGUID;
			}
			set
			{
				if ((this._OrderGUID != value))
				{
					this.OnOrderGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderGUID = value;
					this.SendPropertyChanged("OrderGUID");
					this.OnOrderGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char OrderType
		{
			get
			{
				return this._OrderType;
			}
			set
			{
				if ((this._OrderType != value))
				{
					this.OnOrderTypeChanging(value);
					this.SendPropertyChanging();
					this._OrderType = value;
					this.SendPropertyChanged("OrderType");
					this.OnOrderTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeclaredFromDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DeclaredFromDate
		{
			get
			{
				return this._DeclaredFromDate;
			}
			set
			{
				if ((this._DeclaredFromDate != value))
				{
					this.OnDeclaredFromDateChanging(value);
					this.SendPropertyChanging();
					this._DeclaredFromDate = value;
					this.SendPropertyChanged("DeclaredFromDate");
					this.OnDeclaredFromDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeclaredValidity", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DeclaredValidity
		{
			get
			{
				return this._DeclaredValidity;
			}
			set
			{
				if ((this._DeclaredValidity != value))
				{
					this.OnDeclaredValidityChanging(value);
					this.SendPropertyChanging();
					this._DeclaredValidity = value;
					this.SendPropertyChanged("DeclaredValidity");
					this.OnDeclaredValidityChanged();
				}
			}
		}
		
		[Column(Storage="_TargetFromDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> TargetFromDate
		{
			get
			{
				return this._TargetFromDate;
			}
			set
			{
				if ((this._TargetFromDate != value))
				{
					this.OnTargetFromDateChanging(value);
					this.SendPropertyChanging();
					this._TargetFromDate = value;
					this.SendPropertyChanged("TargetFromDate");
					this.OnTargetFromDateChanged();
				}
			}
		}
		
		[Column(Storage="_TargetValidity", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> TargetValidity
		{
			get
			{
				return this._TargetValidity;
			}
			set
			{
				if ((this._TargetValidity != value))
				{
					this.OnTargetValidityChanging(value);
					this.SendPropertyChanging();
					this._TargetValidity = value;
					this.SendPropertyChanged("TargetValidity");
					this.OnTargetValidityChanged();
				}
			}
		}
		
		[Column(Storage="_LicenseTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> LicenseTypeID
		{
			get
			{
				return this._LicenseTypeID;
			}
			set
			{
				if ((this._LicenseTypeID != value))
				{
					if (this._LicenseType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLicenseTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseTypeID = value;
					this.SendPropertyChanged("LicenseTypeID");
					this.OnLicenseTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_OperationTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					if (this._OperationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._OperationTypeID = value;
					this.SendPropertyChanged("OperationTypeID");
					this.OnOperationTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContractNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ContractNo
		{
			get
			{
				return this._ContractNo;
			}
			set
			{
				if ((this._ContractNo != value))
				{
					this.OnContractNoChanging(value);
					this.SendPropertyChanging();
					this._ContractNo = value;
					this.SendPropertyChanged("ContractNo");
					this.OnContractNoChanged();
				}
			}
		}
		
		[Column(Storage="_ContractDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ContractDate
		{
			get
			{
				return this._ContractDate;
			}
			set
			{
				if ((this._ContractDate != value))
				{
					this.OnContractDateChanging(value);
					this.SendPropertyChanging();
					this._ContractDate = value;
					this.SendPropertyChanged("ContractDate");
					this.OnContractDateChanged();
				}
			}
		}
		
		[Column(Storage="_DealerName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DealerName
		{
			get
			{
				return this._DealerName;
			}
			set
			{
				if ((this._DealerName != value))
				{
					this.OnDealerNameChanging(value);
					this.SendPropertyChanging();
					this._DealerName = value;
					this.SendPropertyChanged("DealerName");
					this.OnDealerNameChanged();
				}
			}
		}
		
		[Column(Storage="_DealerAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DealerAddress
		{
			get
			{
				return this._DealerAddress;
			}
			set
			{
				if ((this._DealerAddress != value))
				{
					this.OnDealerAddressChanging(value);
					this.SendPropertyChanging();
					this._DealerAddress = value;
					this.SendPropertyChanged("DealerAddress");
					this.OnDealerAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Country1ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Country1ID
		{
			get
			{
				return this._Country1ID;
			}
			set
			{
				if ((this._Country1ID != value))
				{
					if (this._Country1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry1IDChanging(value);
					this.SendPropertyChanging();
					this._Country1ID = value;
					this.SendPropertyChanged("Country1ID");
					this.OnCountry1IDChanged();
				}
			}
		}
		
		[Column(Storage="_Country2ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Country2ID
		{
			get
			{
				return this._Country2ID;
			}
			set
			{
				if ((this._Country2ID != value))
				{
					if (this._Country2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry2IDChanging(value);
					this.SendPropertyChanging();
					this._Country2ID = value;
					this.SendPropertyChanged("Country2ID");
					this.OnCountry2IDChanged();
				}
			}
		}
		
		[Column(Storage="_Country3ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Country3ID
		{
			get
			{
				return this._Country3ID;
			}
			set
			{
				if ((this._Country3ID != value))
				{
					if (this._Country3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry3IDChanging(value);
					this.SendPropertyChanging();
					this._Country3ID = value;
					this.SendPropertyChanged("Country3ID");
					this.OnCountry3IDChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicantGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ApplicantGUID
		{
			get
			{
				return this._ApplicantGUID;
			}
			set
			{
				if ((this._ApplicantGUID != value))
				{
					if (this._Applicant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicantGUIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicantGUID = value;
					this.SendPropertyChanged("ApplicantGUID");
					this.OnApplicantGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_CanReissurance", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool CanReissurance
		{
			get
			{
				return this._CanReissurance;
			}
			set
			{
				if ((this._CanReissurance != value))
				{
					this.OnCanReissuranceChanging(value);
					this.SendPropertyChanging();
					this._CanReissurance = value;
					this.SendPropertyChanged("CanReissurance");
					this.OnCanReissuranceChanged();
				}
			}
		}
		
		[Column(Storage="_QuotaCountryGroupID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> QuotaCountryGroupID
		{
			get
			{
				return this._QuotaCountryGroupID;
			}
			set
			{
				if ((this._QuotaCountryGroupID != value))
				{
					if (this._QuotaCountryGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuotaCountryGroupIDChanging(value);
					this.SendPropertyChanging();
					this._QuotaCountryGroupID = value;
					this.SendPropertyChanged("QuotaCountryGroupID");
					this.OnQuotaCountryGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuoteOwnerGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> QuoteOwnerGUID
		{
			get
			{
				return this._QuoteOwnerGUID;
			}
			set
			{
				if ((this._QuoteOwnerGUID != value))
				{
					if (this._QuoteOwner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuoteOwnerGUIDChanging(value);
					this.SendPropertyChanging();
					this._QuoteOwnerGUID = value;
					this.SendPropertyChanged("QuoteOwnerGUID");
					this.OnQuoteOwnerGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					if (this._CNCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_CNID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CNID
		{
			get
			{
				return this._CNID;
			}
			set
			{
				if ((this._CNID != value))
				{
					if (this._CN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNIDChanging(value);
					this.SendPropertyChanging();
					this._CNID = value;
					this.SendPropertyChanged("CNID");
					this.OnCNIDChanged();
				}
			}
		}
		
		[Column(Storage="_CommodityComment", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CommodityComment
		{
			get
			{
				return this._CommodityComment;
			}
			set
			{
				if ((this._CommodityComment != value))
				{
					this.OnCommodityCommentChanging(value);
					this.SendPropertyChanging();
					this._CommodityComment = value;
					this.SendPropertyChanged("CommodityComment");
					this.OnCommodityCommentChanged();
				}
			}
		}
		
		[Column(Storage="_ResolvedQuantity", DbType="Decimal(20,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedQuantity
		{
			get
			{
				return this._ResolvedQuantity;
			}
			set
			{
				if ((this._ResolvedQuantity != value))
				{
					this.OnResolvedQuantityChanging(value);
					this.SendPropertyChanging();
					this._ResolvedQuantity = value;
					this.SendPropertyChanged("ResolvedQuantity");
					this.OnResolvedQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					if (this._Measure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_StatisticCost", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> StatisticCost
		{
			get
			{
				return this._StatisticCost;
			}
			set
			{
				if ((this._StatisticCost != value))
				{
					this.OnStatisticCostChanging(value);
					this.SendPropertyChanging();
					this._StatisticCost = value;
					this.SendPropertyChanged("StatisticCost");
					this.OnStatisticCostChanged();
				}
			}
		}
		
		[Column(Storage="_ContractCost", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ContractCost
		{
			get
			{
				return this._ContractCost;
			}
			set
			{
				if ((this._ContractCost != value))
				{
					this.OnContractCostChanging(value);
					this.SendPropertyChanging();
					this._ContractCost = value;
					this.SendPropertyChanged("ContractCost");
					this.OnContractCostChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentCurrencyID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PaymentCurrencyID
		{
			get
			{
				return this._PaymentCurrencyID;
			}
			set
			{
				if ((this._PaymentCurrencyID != value))
				{
					if (this._PaymentCurrency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentCurrencyID = value;
					this.SendPropertyChanged("PaymentCurrencyID");
					this.OnPaymentCurrencyIDChanged();
				}
			}
		}
		
		[Column(Storage="_AddResolvedQuantity", DbType="Decimal(20,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> AddResolvedQuantity
		{
			get
			{
				return this._AddResolvedQuantity;
			}
			set
			{
				if ((this._AddResolvedQuantity != value))
				{
					this.OnAddResolvedQuantityChanging(value);
					this.SendPropertyChanging();
					this._AddResolvedQuantity = value;
					this.SendPropertyChanged("AddResolvedQuantity");
					this.OnAddResolvedQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_AddMeasureID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> AddMeasureID
		{
			get
			{
				return this._AddMeasureID;
			}
			set
			{
				if ((this._AddMeasureID != value))
				{
					if (this._AddMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._AddMeasureID = value;
					this.SendPropertyChanged("AddMeasureID");
					this.OnAddMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_AdditionalInfo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string AdditionalInfo
		{
			get
			{
				return this._AdditionalInfo;
			}
			set
			{
				if ((this._AdditionalInfo != value))
				{
					this.OnAdditionalInfoChanging(value);
					this.SendPropertyChanging();
					this._AdditionalInfo = value;
					this.SendPropertyChanged("AdditionalInfo");
					this.OnAdditionalInfoChanged();
				}
			}
		}
		
		[Column(Storage="_FactShippedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FactShippedDate
		{
			get
			{
				return this._FactShippedDate;
			}
			set
			{
				if ((this._FactShippedDate != value))
				{
					this.OnFactShippedDateChanging(value);
					this.SendPropertyChanging();
					this._FactShippedDate = value;
					this.SendPropertyChanged("FactShippedDate");
					this.OnFactShippedDateChanged();
				}
			}
		}
		
		[Column(Storage="_FactShippedQuantity", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> FactShippedQuantity
		{
			get
			{
				return this._FactShippedQuantity;
			}
			set
			{
				if ((this._FactShippedQuantity != value))
				{
					this.OnFactShippedQuantityChanging(value);
					this.SendPropertyChanging();
					this._FactShippedQuantity = value;
					this.SendPropertyChanged("FactShippedQuantity");
					this.OnFactShippedQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_IsImported", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsImported
		{
			get
			{
				return this._IsImported;
			}
			set
			{
				if ((this._IsImported != value))
				{
					this.OnIsImportedChanging(value);
					this.SendPropertyChanging();
					this._IsImported = value;
					this.SendPropertyChanged("IsImported");
					this.OnIsImportedChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_InnerNumber", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string InnerNumber
		{
			get
			{
				return this._InnerNumber;
			}
			set
			{
				if ((this._InnerNumber != value))
				{
					this.OnInnerNumberChanging(value);
					this.SendPropertyChanging();
					this._InnerNumber = value;
					this.SendPropertyChanged("InnerNumber");
					this.OnInnerNumberChanged();
				}
			}
		}
		
		[Column(Storage="_OldID", DbType="Decimal(14,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuotaPeriod", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> QuotaPeriod
		{
			get
			{
				return this._QuotaPeriod;
			}
			set
			{
				if ((this._QuotaPeriod != value))
				{
					this.OnQuotaPeriodChanging(value);
					this.SendPropertyChanging();
					this._QuotaPeriod = value;
					this.SendPropertyChanged("QuotaPeriod");
					this.OnQuotaPeriodChanged();
				}
			}
		}
		
		[Column(Storage="_UploadDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> UploadDate
		{
			get
			{
				return this._UploadDate;
			}
			set
			{
				if ((this._UploadDate != value))
				{
					this.OnUploadDateChanging(value);
					this.SendPropertyChanging();
					this._UploadDate = value;
					this.SendPropertyChanged("UploadDate");
					this.OnUploadDateChanged();
				}
			}
		}
		
		[Column(Storage="_ActivityID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ActivityID = value;
					this.SendPropertyChanged("ActivityID");
					this.OnActivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicantChiefGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ApplicantChiefGUID
		{
			get
			{
				return this._ApplicantChiefGUID;
			}
			set
			{
				if ((this._ApplicantChiefGUID != value))
				{
					if (this._ApplicantChief.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicantChiefGUIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicantChiefGUID = value;
					this.SendPropertyChanged("ApplicantChiefGUID");
					this.OnApplicantChiefGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuoteOwnerChiefGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> QuoteOwnerChiefGUID
		{
			get
			{
				return this._QuoteOwnerChiefGUID;
			}
			set
			{
				if ((this._QuoteOwnerChiefGUID != value))
				{
					if (this._QuoteOwnerChief.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuoteOwnerChiefGUIDChanging(value);
					this.SendPropertyChanging();
					this._QuoteOwnerChiefGUID = value;
					this.SendPropertyChanged("QuoteOwnerChiefGUID");
					this.OnQuoteOwnerChiefGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_FactShippedGTD", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FactShippedGTD
		{
			get
			{
				return this._FactShippedGTD;
			}
			set
			{
				if ((this._FactShippedGTD != value))
				{
					this.OnFactShippedGTDChanging(value);
					this.SendPropertyChanging();
					this._FactShippedGTD = value;
					this.SendPropertyChanged("FactShippedGTD");
					this.OnFactShippedGTDChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicantRepresentativeGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ApplicantRepresentativeGUID
		{
			get
			{
				return this._ApplicantRepresentativeGUID;
			}
			set
			{
				if ((this._ApplicantRepresentativeGUID != value))
				{
					if (this._ApplicantRepresentative.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicantRepresentativeGUIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicantRepresentativeGUID = value;
					this.SendPropertyChanged("ApplicantRepresentativeGUID");
					this.OnApplicantRepresentativeGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_RegDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this.OnRegDateChanging(value);
					this.SendPropertyChanging();
					this._RegDate = value;
					this.SendPropertyChanged("RegDate");
					this.OnRegDateChanged();
				}
			}
		}
		
		[Column(Storage="_RegNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string RegNo
		{
			get
			{
				return this._RegNo;
			}
			set
			{
				if ((this._RegNo != value))
				{
					this.OnRegNoChanging(value);
					this.SendPropertyChanging();
					this._RegNo = value;
					this.SendPropertyChanged("RegNo");
					this.OnRegNoChanged();
				}
			}
		}
		
		[Column(Storage="_ChanceryRegDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ChanceryRegDate
		{
			get
			{
				return this._ChanceryRegDate;
			}
			set
			{
				if ((this._ChanceryRegDate != value))
				{
					this.OnChanceryRegDateChanging(value);
					this.SendPropertyChanging();
					this._ChanceryRegDate = value;
					this.SendPropertyChanged("ChanceryRegDate");
					this.OnChanceryRegDateChanged();
				}
			}
		}
		
		[Column(Storage="_ChanceryRegNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ChanceryRegNo
		{
			get
			{
				return this._ChanceryRegNo;
			}
			set
			{
				if ((this._ChanceryRegNo != value))
				{
					this.OnChanceryRegNoChanging(value);
					this.SendPropertyChanging();
					this._ChanceryRegNo = value;
					this.SendPropertyChanged("ChanceryRegNo");
					this.OnChanceryRegNoChanged();
				}
			}
		}
		
		[Column(Storage="_RepresentationID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					if (this._Representation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentationID = value;
					this.SendPropertyChanged("RepresentationID");
					this.OnRepresentationIDChanged();
				}
			}
		}
		
		[Column(Storage="_RegEmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RegEmployeeID
		{
			get
			{
				return this._RegEmployeeID;
			}
			set
			{
				if ((this._RegEmployeeID != value))
				{
					if (this._RegEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._RegEmployeeID = value;
					this.SendPropertyChanged("RegEmployeeID");
					this.OnRegEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_SignDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}
		
		[Column(Storage="_CurState", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CurState
		{
			get
			{
				return this._CurState;
			}
			set
			{
				if ((this._CurState != value))
				{
					this.OnCurStateChanging(value);
					this.SendPropertyChanging();
					this._CurState = value;
					this.SendPropertyChanged("CurState");
					this.OnCurStateChanged();
				}
			}
		}
		
		[Column(Storage="_IssueEmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> IssueEmployeeID
		{
			get
			{
				return this._IssueEmployeeID;
			}
			set
			{
				if ((this._IssueEmployeeID != value))
				{
					if (this._IssueEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._IssueEmployeeID = value;
					this.SendPropertyChanged("IssueEmployeeID");
					this.OnIssueEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IssueDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[Column(Storage="_IssueApplicant", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string IssueApplicant
		{
			get
			{
				return this._IssueApplicant;
			}
			set
			{
				if ((this._IssueApplicant != value))
				{
					this.OnIssueApplicantChanging(value);
					this.SendPropertyChanging();
					this._IssueApplicant = value;
					this.SendPropertyChanged("IssueApplicant");
					this.OnIssueApplicantChanged();
				}
			}
		}
		
		[Column(Storage="_IssueAttorney", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string IssueAttorney
		{
			get
			{
				return this._IssueAttorney;
			}
			set
			{
				if ((this._IssueAttorney != value))
				{
					this.OnIssueAttorneyChanging(value);
					this.SendPropertyChanging();
					this._IssueAttorney = value;
					this.SendPropertyChanged("IssueAttorney");
					this.OnIssueAttorneyChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_Country1_Alpha2", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_Country1_Alpha2
		{
			get
			{
				return this._Copy_Country1_Alpha2;
			}
			set
			{
				if ((this._Copy_Country1_Alpha2 != value))
				{
					this.OnCopy_Country1_Alpha2Changing(value);
					this.SendPropertyChanging();
					this._Copy_Country1_Alpha2 = value;
					this.SendPropertyChanged("Copy_Country1_Alpha2");
					this.OnCopy_Country1_Alpha2Changed();
				}
			}
		}
		
		[Column(Storage="_Copy_Country2_Alpha2", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_Country2_Alpha2
		{
			get
			{
				return this._Copy_Country2_Alpha2;
			}
			set
			{
				if ((this._Copy_Country2_Alpha2 != value))
				{
					this.OnCopy_Country2_Alpha2Changing(value);
					this.SendPropertyChanging();
					this._Copy_Country2_Alpha2 = value;
					this.SendPropertyChanged("Copy_Country2_Alpha2");
					this.OnCopy_Country2_Alpha2Changed();
				}
			}
		}
		
		[Column(Storage="_Copy_Country3_Alpha2", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_Country3_Alpha2
		{
			get
			{
				return this._Copy_Country3_Alpha2;
			}
			set
			{
				if ((this._Copy_Country3_Alpha2 != value))
				{
					this.OnCopy_Country3_Alpha2Changing(value);
					this.SendPropertyChanging();
					this._Copy_Country3_Alpha2 = value;
					this.SendPropertyChanged("Copy_Country3_Alpha2");
					this.OnCopy_Country3_Alpha2Changed();
				}
			}
		}
		
		[Column(Storage="_Copy_Country1_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_Country1_Title
		{
			get
			{
				return this._Copy_Country1_Title;
			}
			set
			{
				if ((this._Copy_Country1_Title != value))
				{
					this.OnCopy_Country1_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_Country1_Title = value;
					this.SendPropertyChanged("Copy_Country1_Title");
					this.OnCopy_Country1_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_Country2_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_Country2_Title
		{
			get
			{
				return this._Copy_Country2_Title;
			}
			set
			{
				if ((this._Copy_Country2_Title != value))
				{
					this.OnCopy_Country2_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_Country2_Title = value;
					this.SendPropertyChanged("Copy_Country2_Title");
					this.OnCopy_Country2_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_Country3_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_Country3_Title
		{
			get
			{
				return this._Copy_Country3_Title;
			}
			set
			{
				if ((this._Copy_Country3_Title != value))
				{
					this.OnCopy_Country3_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_Country3_Title = value;
					this.SendPropertyChanged("Copy_Country3_Title");
					this.OnCopy_Country3_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_CN_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_CN_Title
		{
			get
			{
				return this._Copy_CN_Title;
			}
			set
			{
				if ((this._Copy_CN_Title != value))
				{
					this.OnCopy_CN_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_CN_Title = value;
					this.SendPropertyChanged("Copy_CN_Title");
					this.OnCopy_CN_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_Measure_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_Measure_Title
		{
			get
			{
				return this._Copy_Measure_Title;
			}
			set
			{
				if ((this._Copy_Measure_Title != value))
				{
					this.OnCopy_Measure_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_Measure_Title = value;
					this.SendPropertyChanged("Copy_Measure_Title");
					this.OnCopy_Measure_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_PaymentCurrency_Code", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_PaymentCurrency_Code
		{
			get
			{
				return this._Copy_PaymentCurrency_Code;
			}
			set
			{
				if ((this._Copy_PaymentCurrency_Code != value))
				{
					this.OnCopy_PaymentCurrency_CodeChanging(value);
					this.SendPropertyChanging();
					this._Copy_PaymentCurrency_Code = value;
					this.SendPropertyChanged("Copy_PaymentCurrency_Code");
					this.OnCopy_PaymentCurrency_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_PaymentCurrency_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_PaymentCurrency_Title
		{
			get
			{
				return this._Copy_PaymentCurrency_Title;
			}
			set
			{
				if ((this._Copy_PaymentCurrency_Title != value))
				{
					this.OnCopy_PaymentCurrency_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_PaymentCurrency_Title = value;
					this.SendPropertyChanged("Copy_PaymentCurrency_Title");
					this.OnCopy_PaymentCurrency_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_AddMeasure_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_AddMeasure_Title
		{
			get
			{
				return this._Copy_AddMeasure_Title;
			}
			set
			{
				if ((this._Copy_AddMeasure_Title != value))
				{
					this.OnCopy_AddMeasure_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_AddMeasure_Title = value;
					this.SendPropertyChanged("Copy_AddMeasure_Title");
					this.OnCopy_AddMeasure_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_SiteNumber", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SiteNumber
		{
			get
			{
				return this._SiteNumber;
			}
			set
			{
				if ((this._SiteNumber != value))
				{
					this.OnSiteNumberChanging(value);
					this.SendPropertyChanging();
					this._SiteNumber = value;
					this.SendPropertyChanged("SiteNumber");
					this.OnSiteNumberChanged();
				}
			}
		}
		
		[Column(Storage="_CurStateSite", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CurStateSite
		{
			get
			{
				return this._CurStateSite;
			}
			set
			{
				if ((this._CurStateSite != value))
				{
					this.OnCurStateSiteChanging(value);
					this.SendPropertyChanging();
					this._CurStateSite = value;
					this.SendPropertyChanged("CurStateSite");
					this.OnCurStateSiteChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDocTransition_CreateDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> OrderDocTransition_CreateDate
		{
			get
			{
				return this._OrderDocTransition_CreateDate;
			}
			set
			{
				if ((this._OrderDocTransition_CreateDate != value))
				{
					this.OnOrderDocTransition_CreateDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDocTransition_CreateDate = value;
					this.SendPropertyChanged("OrderDocTransition_CreateDate");
					this.OnOrderDocTransition_CreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_Activity_SysName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Activity_SysName
		{
			get
			{
				return this._Activity_SysName;
			}
			set
			{
				if ((this._Activity_SysName != value))
				{
					this.OnActivity_SysNameChanging(value);
					this.SendPropertyChanging();
					this._Activity_SysName = value;
					this.SendPropertyChanged("Activity_SysName");
					this.OnActivity_SysNameChanged();
				}
			}
		}
		
		[Column(Storage="_FactForm_FormDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FactForm_FormDate
		{
			get
			{
				return this._FactForm_FormDate;
			}
			set
			{
				if ((this._FactForm_FormDate != value))
				{
					this.OnFactForm_FormDateChanging(value);
					this.SendPropertyChanging();
					this._FactForm_FormDate = value;
					this.SendPropertyChanged("FactForm_FormDate");
					this.OnFactForm_FormDateChanged();
				}
			}
		}
		
		[Column(Storage="_FactForm_SignDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FactForm_SignDate
		{
			get
			{
				return this._FactForm_SignDate;
			}
			set
			{
				if ((this._FactForm_SignDate != value))
				{
					this.OnFactForm_SignDateChanging(value);
					this.SendPropertyChanging();
					this._FactForm_SignDate = value;
					this.SendPropertyChanged("FactForm_SignDate");
					this.OnFactForm_SignDateChanged();
				}
			}
		}
		
		[Column(Storage="_FactForm_EmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FactForm_EmployeeID
		{
			get
			{
				return this._FactForm_EmployeeID;
			}
			set
			{
				if ((this._FactForm_EmployeeID != value))
				{
					if (this._FactForm_Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactForm_EmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._FactForm_EmployeeID = value;
					this.SendPropertyChanged("FactForm_EmployeeID");
					this.OnFactForm_EmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Activity_Title", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Activity_Title
		{
			get
			{
				return this._Activity_Title;
			}
			set
			{
				if ((this._Activity_Title != value))
				{
					this.OnActivity_TitleChanging(value);
					this.SendPropertyChanging();
					this._Activity_Title = value;
					this.SendPropertyChanged("Activity_Title");
					this.OnActivity_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_Activity_IsDraft", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Activity_IsDraft
		{
			get
			{
				return this._Activity_IsDraft;
			}
			set
			{
				if ((this._Activity_IsDraft != value))
				{
					this.OnActivity_IsDraftChanging(value);
					this.SendPropertyChanging();
					this._Activity_IsDraft = value;
					this.SendPropertyChanged("Activity_IsDraft");
					this.OnActivity_IsDraftChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_CNCategory_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_CNCategory_Title
		{
			get
			{
				return this._Copy_CNCategory_Title;
			}
			set
			{
				if ((this._Copy_CNCategory_Title != value))
				{
					this.OnCopy_CNCategory_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_CNCategory_Title = value;
					this.SendPropertyChanged("Copy_CNCategory_Title");
					this.OnCopy_CNCategory_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_FactShippedMeasureID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FactShippedMeasureID
		{
			get
			{
				return this._FactShippedMeasureID;
			}
			set
			{
				if ((this._FactShippedMeasureID != value))
				{
					if (this._FactShippedMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactShippedMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._FactShippedMeasureID = value;
					this.SendPropertyChanged("FactShippedMeasureID");
					this.OnFactShippedMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_OperationType_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_OperationType_Title
		{
			get
			{
				return this._Copy_OperationType_Title;
			}
			set
			{
				if ((this._Copy_OperationType_Title != value))
				{
					this.OnCopy_OperationType_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_OperationType_Title = value;
					this.SendPropertyChanged("Copy_OperationType_Title");
					this.OnCopy_OperationType_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_LicenseType_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_LicenseType_Title
		{
			get
			{
				return this._Copy_LicenseType_Title;
			}
			set
			{
				if ((this._Copy_LicenseType_Title != value))
				{
					this.OnCopy_LicenseType_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_LicenseType_Title = value;
					this.SendPropertyChanged("Copy_LicenseType_Title");
					this.OnCopy_LicenseType_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_UniqueIndex", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int UniqueIndex
		{
			get
			{
				return this._UniqueIndex;
			}
			set
			{
				if ((this._UniqueIndex != value))
				{
					this.OnUniqueIndexChanging(value);
					this.SendPropertyChanging();
					this._UniqueIndex = value;
					this.SendPropertyChanged("UniqueIndex");
					this.OnUniqueIndexChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_Applicant_INN", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_Applicant_INN
		{
			get
			{
				return this._Copy_Applicant_INN;
			}
			set
			{
				if ((this._Copy_Applicant_INN != value))
				{
					this.OnCopy_Applicant_INNChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_INN = value;
					this.SendPropertyChanged("Copy_Applicant_INN");
					this.OnCopy_Applicant_INNChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_Applicant_OKPO", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_Applicant_OKPO
		{
			get
			{
				return this._Copy_Applicant_OKPO;
			}
			set
			{
				if ((this._Copy_Applicant_OKPO != value))
				{
					this.OnCopy_Applicant_OKPOChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_OKPO = value;
					this.SendPropertyChanged("Copy_Applicant_OKPO");
					this.OnCopy_Applicant_OKPOChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_Applicant_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_Applicant_Title
		{
			get
			{
				return this._Copy_Applicant_Title;
			}
			set
			{
				if ((this._Copy_Applicant_Title != value))
				{
					this.OnCopy_Applicant_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_Title = value;
					this.SendPropertyChanged("Copy_Applicant_Title");
					this.OnCopy_Applicant_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_Applicant_JuridicalAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_Applicant_JuridicalAddress
		{
			get
			{
				return this._Copy_Applicant_JuridicalAddress;
			}
			set
			{
				if ((this._Copy_Applicant_JuridicalAddress != value))
				{
					this.OnCopy_Applicant_JuridicalAddressChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_JuridicalAddress = value;
					this.SendPropertyChanged("Copy_Applicant_JuridicalAddress");
					this.OnCopy_Applicant_JuridicalAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_Applicant_Email", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_Applicant_Email
		{
			get
			{
				return this._Copy_Applicant_Email;
			}
			set
			{
				if ((this._Copy_Applicant_Email != value))
				{
					this.OnCopy_Applicant_EmailChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_Email = value;
					this.SendPropertyChanged("Copy_Applicant_Email");
					this.OnCopy_Applicant_EmailChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_Applicant_Phone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_Applicant_Phone
		{
			get
			{
				return this._Copy_Applicant_Phone;
			}
			set
			{
				if ((this._Copy_Applicant_Phone != value))
				{
					this.OnCopy_Applicant_PhoneChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_Phone = value;
					this.SendPropertyChanged("Copy_Applicant_Phone");
					this.OnCopy_Applicant_PhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_Applicant_PassportSerial", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_Applicant_PassportSerial
		{
			get
			{
				return this._Copy_Applicant_PassportSerial;
			}
			set
			{
				if ((this._Copy_Applicant_PassportSerial != value))
				{
					this.OnCopy_Applicant_PassportSerialChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_PassportSerial = value;
					this.SendPropertyChanged("Copy_Applicant_PassportSerial");
					this.OnCopy_Applicant_PassportSerialChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_Applicant_PassportNumber", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_Applicant_PassportNumber
		{
			get
			{
				return this._Copy_Applicant_PassportNumber;
			}
			set
			{
				if ((this._Copy_Applicant_PassportNumber != value))
				{
					this.OnCopy_Applicant_PassportNumberChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_PassportNumber = value;
					this.SendPropertyChanged("Copy_Applicant_PassportNumber");
					this.OnCopy_Applicant_PassportNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_Applicant_PassportIssuedBy", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_Applicant_PassportIssuedBy
		{
			get
			{
				return this._Copy_Applicant_PassportIssuedBy;
			}
			set
			{
				if ((this._Copy_Applicant_PassportIssuedBy != value))
				{
					this.OnCopy_Applicant_PassportIssuedByChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_PassportIssuedBy = value;
					this.SendPropertyChanged("Copy_Applicant_PassportIssuedBy");
					this.OnCopy_Applicant_PassportIssuedByChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_Applicant_PassportIssuedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Copy_Applicant_PassportIssuedDate
		{
			get
			{
				return this._Copy_Applicant_PassportIssuedDate;
			}
			set
			{
				if ((this._Copy_Applicant_PassportIssuedDate != value))
				{
					this.OnCopy_Applicant_PassportIssuedDateChanging(value);
					this.SendPropertyChanging();
					this._Copy_Applicant_PassportIssuedDate = value;
					this.SendPropertyChanged("Copy_Applicant_PassportIssuedDate");
					this.OnCopy_Applicant_PassportIssuedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_QuotaOwner_INN", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_QuotaOwner_INN
		{
			get
			{
				return this._Copy_QuotaOwner_INN;
			}
			set
			{
				if ((this._Copy_QuotaOwner_INN != value))
				{
					this.OnCopy_QuotaOwner_INNChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_INN = value;
					this.SendPropertyChanged("Copy_QuotaOwner_INN");
					this.OnCopy_QuotaOwner_INNChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_QuotaOwner_OKPO", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_QuotaOwner_OKPO
		{
			get
			{
				return this._Copy_QuotaOwner_OKPO;
			}
			set
			{
				if ((this._Copy_QuotaOwner_OKPO != value))
				{
					this.OnCopy_QuotaOwner_OKPOChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_OKPO = value;
					this.SendPropertyChanged("Copy_QuotaOwner_OKPO");
					this.OnCopy_QuotaOwner_OKPOChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_QuotaOwner_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_QuotaOwner_Title
		{
			get
			{
				return this._Copy_QuotaOwner_Title;
			}
			set
			{
				if ((this._Copy_QuotaOwner_Title != value))
				{
					this.OnCopy_QuotaOwner_TitleChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_Title = value;
					this.SendPropertyChanged("Copy_QuotaOwner_Title");
					this.OnCopy_QuotaOwner_TitleChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_QuotaOwner_JuridicalAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_QuotaOwner_JuridicalAddress
		{
			get
			{
				return this._Copy_QuotaOwner_JuridicalAddress;
			}
			set
			{
				if ((this._Copy_QuotaOwner_JuridicalAddress != value))
				{
					this.OnCopy_QuotaOwner_JuridicalAddressChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_JuridicalAddress = value;
					this.SendPropertyChanged("Copy_QuotaOwner_JuridicalAddress");
					this.OnCopy_QuotaOwner_JuridicalAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_QuotaOwner_Email", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_QuotaOwner_Email
		{
			get
			{
				return this._Copy_QuotaOwner_Email;
			}
			set
			{
				if ((this._Copy_QuotaOwner_Email != value))
				{
					this.OnCopy_QuotaOwner_EmailChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_Email = value;
					this.SendPropertyChanged("Copy_QuotaOwner_Email");
					this.OnCopy_QuotaOwner_EmailChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_QuotaOwner_Phone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_QuotaOwner_Phone
		{
			get
			{
				return this._Copy_QuotaOwner_Phone;
			}
			set
			{
				if ((this._Copy_QuotaOwner_Phone != value))
				{
					this.OnCopy_QuotaOwner_PhoneChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_Phone = value;
					this.SendPropertyChanged("Copy_QuotaOwner_Phone");
					this.OnCopy_QuotaOwner_PhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_QuotaOwner_PassportSerial", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_QuotaOwner_PassportSerial
		{
			get
			{
				return this._Copy_QuotaOwner_PassportSerial;
			}
			set
			{
				if ((this._Copy_QuotaOwner_PassportSerial != value))
				{
					this.OnCopy_QuotaOwner_PassportSerialChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_PassportSerial = value;
					this.SendPropertyChanged("Copy_QuotaOwner_PassportSerial");
					this.OnCopy_QuotaOwner_PassportSerialChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_QuotaOwner_PassportNumber", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_QuotaOwner_PassportNumber
		{
			get
			{
				return this._Copy_QuotaOwner_PassportNumber;
			}
			set
			{
				if ((this._Copy_QuotaOwner_PassportNumber != value))
				{
					this.OnCopy_QuotaOwner_PassportNumberChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_PassportNumber = value;
					this.SendPropertyChanged("Copy_QuotaOwner_PassportNumber");
					this.OnCopy_QuotaOwner_PassportNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_QuotaOwner_PassportIssuedBy", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_QuotaOwner_PassportIssuedBy
		{
			get
			{
				return this._Copy_QuotaOwner_PassportIssuedBy;
			}
			set
			{
				if ((this._Copy_QuotaOwner_PassportIssuedBy != value))
				{
					this.OnCopy_QuotaOwner_PassportIssuedByChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_PassportIssuedBy = value;
					this.SendPropertyChanged("Copy_QuotaOwner_PassportIssuedBy");
					this.OnCopy_QuotaOwner_PassportIssuedByChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_QuotaOwner_PassportIssuedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Copy_QuotaOwner_PassportIssuedDate
		{
			get
			{
				return this._Copy_QuotaOwner_PassportIssuedDate;
			}
			set
			{
				if ((this._Copy_QuotaOwner_PassportIssuedDate != value))
				{
					this.OnCopy_QuotaOwner_PassportIssuedDateChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_PassportIssuedDate = value;
					this.SendPropertyChanged("Copy_QuotaOwner_PassportIssuedDate");
					this.OnCopy_QuotaOwner_PassportIssuedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_QuotaOwner_Fax", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_QuotaOwner_Fax
		{
			get
			{
				return this._Copy_QuotaOwner_Fax;
			}
			set
			{
				if ((this._Copy_QuotaOwner_Fax != value))
				{
					this.OnCopy_QuotaOwner_FaxChanging(value);
					this.SendPropertyChanging();
					this._Copy_QuotaOwner_Fax = value;
					this.SendPropertyChanged("Copy_QuotaOwner_Fax");
					this.OnCopy_QuotaOwner_FaxChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_GIText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Copy_GIText
		{
			get
			{
				return this._Copy_GIText;
			}
			set
			{
				if ((this._Copy_GIText != value))
				{
					this.OnCopy_GITextChanging(value);
					this.SendPropertyChanging();
					this._Copy_GIText = value;
					this.SendPropertyChanged("Copy_GIText");
					this.OnCopy_GITextChanged();
				}
			}
		}
		
		[Column(Storage="_StampCode", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string StampCode
		{
			get
			{
				return this._StampCode;
			}
			set
			{
				if ((this._StampCode != value))
				{
					this.OnStampCodeChanging(value);
					this.SendPropertyChanging();
					this._StampCode = value;
					this.SendPropertyChanged("StampCode");
					this.OnStampCodeChanged();
				}
			}
		}
		
		[Column(Storage="_FactForm_EmployeePost", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FactForm_EmployeePost
		{
			get
			{
				return this._FactForm_EmployeePost;
			}
			set
			{
				if ((this._FactForm_EmployeePost != value))
				{
					this.OnFactForm_EmployeePostChanging(value);
					this.SendPropertyChanging();
					this._FactForm_EmployeePost = value;
					this.SendPropertyChanged("FactForm_EmployeePost");
					this.OnFactForm_EmployeePostChanged();
				}
			}
		}
		
		[Column(Storage="_FactForm_EmployeeTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FactForm_EmployeeTitle
		{
			get
			{
				return this._FactForm_EmployeeTitle;
			}
			set
			{
				if ((this._FactForm_EmployeeTitle != value))
				{
					this.OnFactForm_EmployeeTitleChanging(value);
					this.SendPropertyChanging();
					this._FactForm_EmployeeTitle = value;
					this.SendPropertyChanged("FactForm_EmployeeTitle");
					this.OnFactForm_EmployeeTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Copy_CN_Code", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Copy_CN_Code
		{
			get
			{
				return this._Copy_CN_Code;
			}
			set
			{
				if ((this._Copy_CN_Code != value))
				{
					this.OnCopy_CN_CodeChanging(value);
					this.SendPropertyChanging();
					this._Copy_CN_Code = value;
					this.SendPropertyChanged("Copy_CN_Code");
					this.OnCopy_CN_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_IsSigned", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSigned
		{
			get
			{
				return this._IsSigned;
			}
			set
			{
				if ((this._IsSigned != value))
				{
					this.OnIsSignedChanging(value);
					this.SendPropertyChanging();
					this._IsSigned = value;
					this.SendPropertyChanged("IsSigned");
					this.OnIsSignedChanged();
				}
			}
		}
		
		[Column(Storage="_UCN", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string UCN
		{
			get
			{
				return this._UCN;
			}
			set
			{
				if ((this._UCN != value))
				{
					this.OnUCNChanging(value);
					this.SendPropertyChanging();
					this._UCN = value;
					this.SendPropertyChanged("UCN");
					this.OnUCNChanged();
				}
			}
		}
		
		[Column(Storage="_PassportState", DbType="Char(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<char> PassportState
		{
			get
			{
				return this._PassportState;
			}
			set
			{
				if ((this._PassportState != value))
				{
					this.OnPassportStateChanging(value);
					this.SendPropertyChanging();
					this._PassportState = value;
					this.SendPropertyChanged("PassportState");
					this.OnPassportStateChanged();
				}
			}
		}
		
		[Column(Storage="_OrderState", DbType="Char(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<char> OrderState
		{
			get
			{
				return this._OrderState;
			}
			set
			{
				if ((this._OrderState != value))
				{
					this.OnOrderStateChanging(value);
					this.SendPropertyChanging();
					this._OrderState = value;
					this.SendPropertyChanged("OrderState");
					this.OnOrderStateChanged();
				}
			}
		}
		
		[Column(Storage="_LicenseNo", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string LicenseNo
		{
			get
			{
				return this._LicenseNo;
			}
			set
			{
				if ((this._LicenseNo != value))
				{
					this.OnLicenseNoChanging(value);
					this.SendPropertyChanging();
					this._LicenseNo = value;
					this.SendPropertyChanged("LicenseNo");
					this.OnLicenseNoChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureValid
		{
			get
			{
				return this._IsSignatureValid;
			}
			set
			{
				if ((this._IsSignatureValid != value))
				{
					this.OnIsSignatureValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureValid = value;
					this.SendPropertyChanged("IsSignatureValid");
					this.OnIsSignatureValidChanged();
				}
			}
		}
		
		[Column(Storage="_PassportData", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PassportData
		{
			get
			{
				return this._PassportData;
			}
			set
			{
				if ((this._PassportData != value))
				{
					this.OnPassportDataChanging(value);
					this.SendPropertyChanging();
					this._PassportData = value;
					this.SendPropertyChanged("PassportData");
					this.OnPassportDataChanged();
				}
			}
		}
		
		[Column(Storage="_FactData", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FactData
		{
			get
			{
				return this._FactData;
			}
			set
			{
				if ((this._FactData != value))
				{
					this.OnFactDataChanging(value);
					this.SendPropertyChanging();
					this._FactData = value;
					this.SendPropertyChanged("FactData");
					this.OnFactDataChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_IsAutoRegistered", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsAutoRegistered
		{
			get
			{
				return this._IsAutoRegistered;
			}
			set
			{
				if ((this._IsAutoRegistered != value))
				{
					this.OnIsAutoRegisteredChanging(value);
					this.SendPropertyChanging();
					this._IsAutoRegistered = value;
					this.SendPropertyChanged("IsAutoRegistered");
					this.OnIsAutoRegisteredChanged();
				}
			}
		}
		
		[Column(Storage="_SignDateByEmployee", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDateByEmployee
		{
			get
			{
				return this._SignDateByEmployee;
			}
			set
			{
				if ((this._SignDateByEmployee != value))
				{
					this.OnSignDateByEmployeeChanging(value);
					this.SendPropertyChanging();
					this._SignDateByEmployee = value;
					this.SendPropertyChanged("SignDateByEmployee");
					this.OnSignDateByEmployeeChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureByEmployeeValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureByEmployeeValid
		{
			get
			{
				return this._IsSignatureByEmployeeValid;
			}
			set
			{
				if ((this._IsSignatureByEmployeeValid != value))
				{
					this.OnIsSignatureByEmployeeValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureByEmployeeValid = value;
					this.SendPropertyChanged("IsSignatureByEmployeeValid");
					this.OnIsSignatureByEmployeeValidChanged();
				}
			}
		}
		
		[Column(Storage="_MFCID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MFCID
		{
			get
			{
				return this._MFCID;
			}
			set
			{
				if ((this._MFCID != value))
				{
					if (this._MFC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMFCIDChanging(value);
					this.SendPropertyChanging();
					this._MFCID = value;
					this.SendPropertyChanged("MFCID");
					this.OnMFCIDChanged();
				}
			}
		}

        [Column(Storage = "_AddInfoLetter", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string AddInfoLetter
        {
            get
            {
                return this._AddInfoLetter;
            }
            set
            {
                if ((this._AddInfoLetter != value))
                {
                    this.OnAddInfoLetterChanging(value);
                    this.SendPropertyChanging();
                    this._AddInfoLetter = value;
                    this.SendPropertyChanged("AddInfoLetter");
                    this.OnAddInfoLetterChanged();
                }
            }
        }

        [Column(Storage="_Copy_RepresentationID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Copy_RepresentationID
		{
			get
			{
				return this._Copy_RepresentationID;
			}
			set
			{
				if ((this._Copy_RepresentationID != value))
				{
					if (this._Copy_Representation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCopy_RepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._Copy_RepresentationID = value;
					this.SendPropertyChanged("Copy_RepresentationID");
					this.OnCopy_RepresentationIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsLicSended", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsLicSended
		{
			get
			{
				return this._IsLicSended;
			}
			set
			{
				if ((this._IsLicSended != value))
				{
					this.OnIsLicSendedChanging(value);
					this.SendPropertyChanging();
					this._IsLicSended = value;
					this.SendPropertyChanged("IsLicSended");
					this.OnIsLicSendedChanged();
				}
			}
		}
		
		[Column(Storage="_CurrentValidityDate", AutoSync=AutoSync.Always, DbType="DateTime", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(case when getdate()>[TargetValidity] then [TargetValidity] else getdate() end)")]
		public System.Nullable<System.DateTime> CurrentValidityDate
		{
			get
			{
				return this._CurrentValidityDate;
			}
			set
			{
				if ((this._CurrentValidityDate != value))
				{
					this.OnCurrentValidityDateChanging(value);
					this.SendPropertyChanging();
					this._CurrentValidityDate = value;
					this.SendPropertyChanged("CurrentValidityDate");
					this.OnCurrentValidityDateChanged();
				}
			}
		}


        [Column(Storage = "_Properties", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string Properties
        {
            get
            {
                return this._Properties;
            }
            set
            {
                if ((this._Properties != value))
                {
                    this.OnPropertiesChanging(value);
                    this.SendPropertyChanging();
                    this._Properties = value;
                    this.SendPropertyChanged("Properties");
                    this.OnPropertiesChanged();
                }
            }
        }

        [Association(Name="FK_Appendix_OrderDoc", Storage="_AppendixItems", ThisKey="OrderGUID", OtherKey="OrderDocGUID", DeleteRule="NO ACTION")]
		public EntitySet<Appendix> AppendixItems
		{
			get
			{
				return this._AppendixItems;
			}
			set
			{
				this._AppendixItems.Assign(value);
			}
		}
		
		[Association(Name="FK_Blank_OrderDoc", Storage="_Blanks", ThisKey="OrderGUID", OtherKey="OrderDocGUID", DeleteRule="SET NULL")]
		public EntitySet<Blank> Blanks
		{
			get
			{
				return this._Blanks;
			}
			set
			{
				this._Blanks.Assign(value);
			}
		}
		
		[Association(Name="FK_CommodityDocument_OrderDoc", Storage="_CommodityDocs", ThisKey="OrderGUID", OtherKey="OrderDocGUID", DeleteRule="CASCADE")]
		public EntitySet<CommodityDocument> CommodityDocs
		{
			get
			{
				return this._CommodityDocs;
			}
			set
			{
				this._CommodityDocs.Assign(value);
			}
		}
		
		[Association(Name="FK_Copy_ContractorChiefPerson_OrderDoc", Storage="_Copy_ContractorChiefPerson", ThisKey="OrderGUID", OtherKey="OrderDocGUID", DeleteRule="CASCADE")]
		public EntitySet<Copy_ContractorChiefPerson> Copy_ContractorChiefPerson
		{
			get
			{
				return this._Copy_ContractorChiefPerson;
			}
			set
			{
				this._Copy_ContractorChiefPerson.Assign(value);
			}
		}
		
		[Association(Name="FK_CustomsDeclaration_License", Storage="_CustomsDeclaration", ThisKey="OrderGUID", OtherKey="LicenseGUID", DeleteRule="NO ACTION")]
		public EntitySet<CustomsDeclaration> CustomsDeclaration
		{
			get
			{
				return this._CustomsDeclaration;
			}
			set
			{
				this._CustomsDeclaration.Assign(value);
			}
		}
		
		[Association(Name="FK_Letter_OrderDoc", Storage="_Letter", ThisKey="OrderGUID", OtherKey="OrderDocGUID", DeleteRule="NO ACTION")]
		public EntitySet<Letter> Letter
		{
			get
			{
				return this._Letter;
			}
			set
			{
				this._Letter.Assign(value);
			}
		}
		
		[Association(Name="FK_LicenseExecution_OrderDoc", Storage="_Execution", ThisKey="OrderGUID", OtherKey="OrderDocGUID", DeleteRule="CASCADE")]
		public EntitySet<LicenseExecution> Execution
		{
			get
			{
				return this._Execution;
			}
			set
			{
				this._Execution.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_Activity", Storage="_Activity", ThisKey="ActivityID", OtherKey="ActivityID", IsForeignKey=true)]
		public WF_Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				WF_Activity previousValue = this._Activity.Entity;
				if (((previousValue != value) 
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._ActivityID = value.ActivityID;
					}
					else
					{
						this._ActivityID = default(int);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_AddMeasure", Storage="_AddMeasure", ThisKey="AddMeasureID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure AddMeasure
		{
			get
			{
				return this._AddMeasure.Entity;
			}
			set
			{
				C_Measure previousValue = this._AddMeasure.Entity;
				if (((previousValue != value) 
							|| (this._AddMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddMeasure.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._AddMeasure.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._AddMeasureID = value.MeasureID;
					}
					else
					{
						this._AddMeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AddMeasure");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_Applicant", Storage="_Applicant", ThisKey="ApplicantGUID", OtherKey="ContractorVersionGUID", IsForeignKey=true)]
		public HST_Contractor Applicant
		{
			get
			{
				return this._Applicant.Entity;
			}
			set
			{
				HST_Contractor previousValue = this._Applicant.Entity;
				if (((previousValue != value) 
							|| (this._Applicant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Applicant.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._Applicant.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._ApplicantGUID = value.ContractorVersionGUID;
					}
					else
					{
						this._ApplicantGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Applicant");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_ApplicantChief", Storage="_ApplicantChief", ThisKey="ApplicantChiefGUID", OtherKey="ContractorChiefPersonGUID", IsForeignKey=true)]
		public ContractorChiefPerson ApplicantChief
		{
			get
			{
				return this._ApplicantChief.Entity;
			}
			set
			{
				ContractorChiefPerson previousValue = this._ApplicantChief.Entity;
				if (((previousValue != value) 
							|| (this._ApplicantChief.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicantChief.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._ApplicantChief.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._ApplicantChiefGUID = value.ContractorChiefPersonGUID;
					}
					else
					{
						this._ApplicantChiefGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ApplicantChief");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_ApplicantRepresentative", Storage="_ApplicantRepresentative", ThisKey="ApplicantRepresentativeGUID", OtherKey="ContractorChiefPersonGUID", IsForeignKey=true)]
		public ContractorChiefPerson ApplicantRepresentative
		{
			get
			{
				return this._ApplicantRepresentative.Entity;
			}
			set
			{
				ContractorChiefPerson previousValue = this._ApplicantRepresentative.Entity;
				if (((previousValue != value) 
							|| (this._ApplicantRepresentative.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicantRepresentative.Entity = null;
						previousValue.ContractorChiefPersonGU.Remove(this);
					}
					this._ApplicantRepresentative.Entity = value;
					if ((value != null))
					{
						value.ContractorChiefPersonGU.Add(this);
						this._ApplicantRepresentativeGUID = value.ContractorChiefPersonGUID;
					}
					else
					{
						this._ApplicantRepresentativeGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ApplicantRepresentative");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_CN", Storage="_CN", ThisKey="CNID", OtherKey="CNID", IsForeignKey=true)]
		public C_CN CN
		{
			get
			{
				return this._CN.Entity;
			}
			set
			{
				C_CN previousValue = this._CN.Entity;
				if (((previousValue != value) 
							|| (this._CN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CN.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._CN.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._CNID = value.CNID;
					}
					else
					{
						this._CNID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CN");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_CNCategory", Storage="_CNCategory", ThisKey="CNCategoryID", OtherKey="CNCategoryID", IsForeignKey=true)]
		public C_CNCategory CNCategory
		{
			get
			{
				return this._CNCategory.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._CNCategory.Entity;
				if (((previousValue != value) 
							|| (this._CNCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategory.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._CNCategory.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._CNCategoryID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CNCategory");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_Copy_Representation", Storage="_Copy_Representation", ThisKey="Copy_RepresentationID", OtherKey="RepresentationID", IsForeignKey=true)]
		public Representation Copy_Representation
		{
			get
			{
				return this._Copy_Representation.Entity;
			}
			set
			{
				Representation previousValue = this._Copy_Representation.Entity;
				if (((previousValue != value) 
							|| (this._Copy_Representation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Copy_Representation.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._Copy_Representation.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._Copy_RepresentationID = value.RepresentationID;
					}
					else
					{
						this._Copy_RepresentationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Copy_Representation");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_Country1", Storage="_Country1", ThisKey="Country1ID", OtherKey="CountryID", IsForeignKey=true)]
		public C_Country Country1
		{
			get
			{
				return this._Country1.Entity;
			}
			set
			{
				C_Country previousValue = this._Country1.Entity;
				if (((previousValue != value) 
							|| (this._Country1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country1.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._Country1.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._Country1ID = value.CountryID;
					}
					else
					{
						this._Country1ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country1");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_Country2", Storage="_Country2", ThisKey="Country2ID", OtherKey="CountryID", IsForeignKey=true)]
		public C_Country Country2
		{
			get
			{
				return this._Country2.Entity;
			}
			set
			{
				C_Country previousValue = this._Country2.Entity;
				if (((previousValue != value) 
							|| (this._Country2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country2.Entity = null;
						previousValue.OrderDoc_Country2.Remove(this);
					}
					this._Country2.Entity = value;
					if ((value != null))
					{
						value.OrderDoc_Country2.Add(this);
						this._Country2ID = value.CountryID;
					}
					else
					{
						this._Country2ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country2");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_Country3", Storage="_Country3", ThisKey="Country3ID", OtherKey="CountryID", IsForeignKey=true)]
		public C_Country Country3
		{
			get
			{
				return this._Country3.Entity;
			}
			set
			{
				C_Country previousValue = this._Country3.Entity;
				if (((previousValue != value) 
							|| (this._Country3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country3.Entity = null;
						previousValue.OrderDoc_Country3.Remove(this);
					}
					this._Country3.Entity = value;
					if ((value != null))
					{
						value.OrderDoc_Country3.Add(this);
						this._Country3ID = value.CountryID;
					}
					else
					{
						this._Country3ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country3");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_Employee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_FactForm_Employee", Storage="_FactForm_Employee", ThisKey="FactForm_EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee FactForm_Employee
		{
			get
			{
				return this._FactForm_Employee.Entity;
			}
			set
			{
				Employee previousValue = this._FactForm_Employee.Entity;
				if (((previousValue != value) 
							|| (this._FactForm_Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactForm_Employee.Entity = null;
						previousValue.OrderDoc_FactForm_Employee.Remove(this);
					}
					this._FactForm_Employee.Entity = value;
					if ((value != null))
					{
						value.OrderDoc_FactForm_Employee.Add(this);
						this._FactForm_EmployeeID = value.EmployeeID;
					}
					else
					{
						this._FactForm_EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FactForm_Employee");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_FactShippedMeasure", Storage="_FactShippedMeasure", ThisKey="FactShippedMeasureID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure FactShippedMeasure
		{
			get
			{
				return this._FactShippedMeasure.Entity;
			}
			set
			{
				C_Measure previousValue = this._FactShippedMeasure.Entity;
				if (((previousValue != value) 
							|| (this._FactShippedMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactShippedMeasure.Entity = null;
						previousValue.OrderDoc_FactShippedMeasure.Remove(this);
					}
					this._FactShippedMeasure.Entity = value;
					if ((value != null))
					{
						value.OrderDoc_FactShippedMeasure.Add(this);
						this._FactShippedMeasureID = value.MeasureID;
					}
					else
					{
						this._FactShippedMeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FactShippedMeasure");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_IssueEmployee", Storage="_IssueEmployee", ThisKey="IssueEmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee IssueEmployee
		{
			get
			{
				return this._IssueEmployee.Entity;
			}
			set
			{
				Employee previousValue = this._IssueEmployee.Entity;
				if (((previousValue != value) 
							|| (this._IssueEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IssueEmployee.Entity = null;
						previousValue.OrderDoc_IssueEmployee.Remove(this);
					}
					this._IssueEmployee.Entity = value;
					if ((value != null))
					{
						value.OrderDoc_IssueEmployee.Add(this);
						this._IssueEmployeeID = value.EmployeeID;
					}
					else
					{
						this._IssueEmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("IssueEmployee");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_LicenseType", Storage="_LicenseType", ThisKey="LicenseTypeID", OtherKey="LicenseTypeID", IsForeignKey=true)]
		public C_LicenseType LicenseType
		{
			get
			{
				return this._LicenseType.Entity;
			}
			set
			{
				C_LicenseType previousValue = this._LicenseType.Entity;
				if (((previousValue != value) 
							|| (this._LicenseType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LicenseType.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._LicenseType.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._LicenseTypeID = value.LicenseTypeID;
					}
					else
					{
						this._LicenseTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LicenseType");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_Measure", Storage="_Measure", ThisKey="MeasureID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure Measure
		{
			get
			{
				return this._Measure.Entity;
			}
			set
			{
				C_Measure previousValue = this._Measure.Entity;
				if (((previousValue != value) 
							|| (this._Measure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure.Entity = null;
						previousValue.OrderDoc_Measure.Remove(this);
					}
					this._Measure.Entity = value;
					if ((value != null))
					{
						value.OrderDoc_Measure.Add(this);
						this._MeasureID = value.MeasureID;
					}
					else
					{
						this._MeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Measure");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_MFC", Storage="_MFC", ThisKey="MFCID", OtherKey="MFCID", IsForeignKey=true)]
		public C_MFC MFC
		{
			get
			{
				return this._MFC.Entity;
			}
			set
			{
				C_MFC previousValue = this._MFC.Entity;
				if (((previousValue != value) 
							|| (this._MFC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MFC.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._MFC.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._MFCID = value.MFCID;
					}
					else
					{
						this._MFCID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MFC");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_OperationType", Storage="_OperationType", ThisKey="OperationTypeID", OtherKey="OperationTypeID", IsForeignKey=true)]
		public C_OperationType OperationType
		{
			get
			{
				return this._OperationType.Entity;
			}
			set
			{
				C_OperationType previousValue = this._OperationType.Entity;
				if (((previousValue != value) 
							|| (this._OperationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperationType.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._OperationType.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._OperationTypeID = value.OperationTypeID;
					}
					else
					{
						this._OperationTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OperationType");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_PaymentCurrency", Storage="_PaymentCurrency", ThisKey="PaymentCurrencyID", OtherKey="CurrencyID", IsForeignKey=true)]
		public C_Currency PaymentCurrency
		{
			get
			{
				return this._PaymentCurrency.Entity;
			}
			set
			{
				C_Currency previousValue = this._PaymentCurrency.Entity;
				if (((previousValue != value) 
							|| (this._PaymentCurrency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentCurrency.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._PaymentCurrency.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._PaymentCurrencyID = value.CurrencyID;
					}
					else
					{
						this._PaymentCurrencyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PaymentCurrency");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_QuotaCountryGroup", Storage="_QuotaCountryGroup", ThisKey="QuotaCountryGroupID", OtherKey="CountryGroupID", IsForeignKey=true)]
		public C_CountryGroup QuotaCountryGroup
		{
			get
			{
				return this._QuotaCountryGroup.Entity;
			}
			set
			{
				C_CountryGroup previousValue = this._QuotaCountryGroup.Entity;
				if (((previousValue != value) 
							|| (this._QuotaCountryGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuotaCountryGroup.Entity = null;
						previousValue.OrderDoc.Remove(this);
					}
					this._QuotaCountryGroup.Entity = value;
					if ((value != null))
					{
						value.OrderDoc.Add(this);
						this._QuotaCountryGroupID = value.CountryGroupID;
					}
					else
					{
						this._QuotaCountryGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("QuotaCountryGroup");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_QuoteOwner", Storage="_QuoteOwner", ThisKey="QuoteOwnerGUID", OtherKey="ContractorVersionGUID", IsForeignKey=true)]
		public HST_Contractor QuoteOwner
		{
			get
			{
				return this._QuoteOwner.Entity;
			}
			set
			{
				HST_Contractor previousValue = this._QuoteOwner.Entity;
				if (((previousValue != value) 
							|| (this._QuoteOwner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuoteOwner.Entity = null;
						previousValue.ContractorVersionGU.Remove(this);
					}
					this._QuoteOwner.Entity = value;
					if ((value != null))
					{
						value.ContractorVersionGU.Add(this);
						this._QuoteOwnerGUID = value.ContractorVersionGUID;
					}
					else
					{
						this._QuoteOwnerGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("QuoteOwner");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_QuoteOwnerChief", Storage="_QuoteOwnerChief", ThisKey="QuoteOwnerChiefGUID", OtherKey="ContractorChiefPersonGUID", IsForeignKey=true)]
		public ContractorChiefPerson QuoteOwnerChief
		{
			get
			{
				return this._QuoteOwnerChief.Entity;
			}
			set
			{
				ContractorChiefPerson previousValue = this._QuoteOwnerChief.Entity;
				if (((previousValue != value) 
							|| (this._QuoteOwnerChief.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuoteOwnerChief.Entity = null;
						previousValue.OrderDoc_QuoteOwnerChief.Remove(this);
					}
					this._QuoteOwnerChief.Entity = value;
					if ((value != null))
					{
						value.OrderDoc_QuoteOwnerChief.Add(this);
						this._QuoteOwnerChiefGUID = value.ContractorChiefPersonGUID;
					}
					else
					{
						this._QuoteOwnerChiefGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("QuoteOwnerChief");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_RegEmployee", Storage="_RegEmployee", ThisKey="RegEmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee RegEmployee
		{
			get
			{
				return this._RegEmployee.Entity;
			}
			set
			{
				Employee previousValue = this._RegEmployee.Entity;
				if (((previousValue != value) 
							|| (this._RegEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegEmployee.Entity = null;
						previousValue.OrderDoc_RegEmployee.Remove(this);
					}
					this._RegEmployee.Entity = value;
					if ((value != null))
					{
						value.OrderDoc_RegEmployee.Add(this);
						this._RegEmployeeID = value.EmployeeID;
					}
					else
					{
						this._RegEmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RegEmployee");
				}
			}
		}
		
		[Association(Name="FK_OrderDoc_Representation", Storage="_Representation", ThisKey="RepresentationID", OtherKey="RepresentationID", IsForeignKey=true)]
		public Representation Representation
		{
			get
			{
				return this._Representation.Entity;
			}
			set
			{
				Representation previousValue = this._Representation.Entity;
				if (((previousValue != value) 
							|| (this._Representation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representation.Entity = null;
						previousValue.OrderDoc_Representation.Remove(this);
					}
					this._Representation.Entity = value;
					if ((value != null))
					{
						value.OrderDoc_Representation.Add(this);
						this._RepresentationID = value.RepresentationID;
					}
					else
					{
						this._RepresentationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Representation");
				}
			}
		}
		
		[Association(Name="FK_OrderDocAsso_Child", Storage="_OrderDocAsso", ThisKey="OrderGUID", OtherKey="ChildGUID", DeleteRule="CASCADE")]
		public EntitySet<OrderDocAsso> OrderDocAsso
		{
			get
			{
				return this._OrderDocAsso;
			}
			set
			{
				this._OrderDocAsso.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocAsso_Parent", Storage="_OrderGU", ThisKey="OrderGUID", OtherKey="ParentGUID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocAsso> OrderGU
		{
			get
			{
				return this._OrderGU;
			}
			set
			{
				this._OrderGU.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocBankReplication_OrderDoc", Storage="_OrderDocBankReplication", ThisKey="OrderGUID", OtherKey="OrderDocGUID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public OrderDocBankReplication OrderDocBankReplication
		{
			get
			{
				return this._OrderDocBankReplication.Entity;
			}
			set
			{
				OrderDocBankReplication previousValue = this._OrderDocBankReplication.Entity;
				if (((previousValue != value) 
							|| (this._OrderDocBankReplication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDocBankReplication.Entity = null;
						previousValue.OrderDoc = null;
					}
					this._OrderDocBankReplication.Entity = value;
					if ((value != null))
					{
						value.OrderDoc = this;
					}
					this.SendPropertyChanged("OrderDocBankReplication");
				}
			}
		}
		
		[Association(Name="FK_OrderDocDeviation_OrderDoc", Storage="_Declensions", ThisKey="OrderGUID", OtherKey="OrderDocGUID", DeleteRule="CASCADE")]
		public EntitySet<OrderDocDeviation> Declensions
		{
			get
			{
				return this._Declensions;
			}
			set
			{
				this._Declensions.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocImportSubject_OrderDoc", Storage="_OrderDocImportSubject", ThisKey="OrderGUID", OtherKey="OrderDocGUID", DeleteRule="CASCADE")]
		public EntitySet<OrderDocImportSubject> OrderDocImportSubject
		{
			get
			{
				return this._OrderDocImportSubject;
			}
			set
			{
				this._OrderDocImportSubject.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocPassport_OrderDoc", Storage="_OrderDocPassport", ThisKey="OrderGUID", OtherKey="OrderDocGUID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocPassport> OrderDocPassport
		{
			get
			{
				return this._OrderDocPassport;
			}
			set
			{
				this._OrderDocPassport.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocResponsible_OrderDoc", Storage="_OrderDocResponsible", ThisKey="OrderGUID", OtherKey="OrderDocGUID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocResponsible> OrderDocResponsible
		{
			get
			{
				return this._OrderDocResponsible;
			}
			set
			{
				this._OrderDocResponsible.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocState_OrderDoc", Storage="_States", ThisKey="OrderGUID", OtherKey="OrderDocGUID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocState> States
		{
			get
			{
				return this._States;
			}
			set
			{
				this._States.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocTransition_Parent", Storage="_OrderDocTransition", ThisKey="OrderGUID", OtherKey="ParentGUID", DeleteRule="CASCADE")]
		public EntitySet<OrderDocTransition> OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition;
			}
			set
			{
				this._OrderDocTransition.Assign(value);
			}
		}
		
		[Association(Name="FK_PaymentOrder_License", Storage="_LicensePaymentOrders", ThisKey="OrderGUID", OtherKey="LicenseGUID", DeleteRule="NO ACTION")]
		public EntitySet<PaymentOrder> LicensePaymentOrders
		{
			get
			{
				return this._LicensePaymentOrders;
			}
			set
			{
				this._LicensePaymentOrders.Assign(value);
			}
		}
		
		[Association(Name="FK_PaymentOrder_Request", Storage="_RequestPaymentOrders", ThisKey="OrderGUID", OtherKey="RequestGUID", DeleteRule="NO ACTION")]
		public EntitySet<PaymentOrder> RequestPaymentOrders
		{
			get
			{
				return this._RequestPaymentOrders;
			}
			set
			{
				this._RequestPaymentOrders.Assign(value);
			}
		}
		
		[Association(Name="FK_PaymentOrderLicenses_Licenses", Storage="_PaymentOrderLicenses", ThisKey="OrderGUID", OtherKey="LicensesGUID", DeleteRule="CASCADE")]
		public EntitySet<PaymentOrderLicenses> PaymentOrderLicenses
		{
			get
			{
				return this._PaymentOrderLicenses;
			}
			set
			{
				this._PaymentOrderLicenses.Assign(value);
			}
		}
		
		[Association(Name="FK_PaymentOrderRequests_Requests", Storage="_PaymentOrderRequests", ThisKey="OrderGUID", OtherKey="RequestsGUID", DeleteRule="CASCADE")]
		public EntitySet<PaymentOrderRequests> PaymentOrderRequests
		{
			get
			{
				return this._PaymentOrderRequests;
			}
			set
			{
				this._PaymentOrderRequests.Assign(value);
			}
		}
		
		[Association(Name="FK_SpecificationCommon_OrderDoc", Storage="_SpecificationCommon", ThisKey="OrderGUID", OtherKey="OrderDocGUID", DeleteRule="NO ACTION")]
		public EntitySet<SpecificationCommon> SpecificationCommon
		{
			get
			{
				return this._SpecificationCommon;
			}
			set
			{
				this._SpecificationCommon.Assign(value);
			}
		}
		
		[Association(Name="FK_SpecificationItem_OrderDoc", Storage="_SpecificationItem", ThisKey="OrderGUID", OtherKey="OrderDocGUID", DeleteRule="NO ACTION")]
		public EntitySet<SpecificationItem> SpecificationItem
		{
			get
			{
				return this._SpecificationItem;
			}
			set
			{
				this._SpecificationItem.Assign(value);
			}
		}
		
		[Association(Name="FK_TreasuryPaymentLicense_License", Storage="_TreasuryPaymentLicense", ThisKey="OrderGUID", OtherKey="LicenseGUID", DeleteRule="CASCADE")]
		public EntitySet<TreasuryPaymentLicense> TreasuryPaymentLicense
		{
			get
			{
				return this._TreasuryPaymentLicense;
			}
			set
			{
				this._TreasuryPaymentLicense.Assign(value);
			}
		}
		
		[Association(Name="FK_TreasuryPaymentRequest_Request", Storage="_TreasuryPaymentRequest", ThisKey="OrderGUID", OtherKey="RequestGUID", DeleteRule="CASCADE")]
		public EntitySet<TreasuryPaymentRequest> TreasuryPaymentRequest
		{
			get
			{
				return this._TreasuryPaymentRequest;
			}
			set
			{
				this._TreasuryPaymentRequest.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppendixItems(Appendix entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}
		
		private void detach_AppendixItems(Appendix entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}
		
		private void attach_Blanks(Blank entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}
		
		private void detach_Blanks(Blank entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}
		
		private void attach_CommodityDocs(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}
		
		private void detach_CommodityDocs(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}
		
		private void attach_Copy_ContractorChiefPerson(Copy_ContractorChiefPerson entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}
		
		private void detach_Copy_ContractorChiefPerson(Copy_ContractorChiefPerson entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}
		
		private void attach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.License = this;
		}
		
		private void detach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.License = null;
		}
		
		private void attach_Letter(Letter entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}
		
		private void detach_Letter(Letter entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}
		
		private void attach_Execution(LicenseExecution entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}
		
		private void detach_Execution(LicenseExecution entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}
		
		private void attach_OrderDocAsso(OrderDocAsso entity)
		{
			this.SendPropertyChanging();
			entity.Child = this;
		}
		
		private void detach_OrderDocAsso(OrderDocAsso entity)
		{
			this.SendPropertyChanging();
			entity.Child = null;
		}
		
		private void attach_OrderGU(OrderDocAsso entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_OrderGU(OrderDocAsso entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
		
		private void attach_Declensions(OrderDocDeviation entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}
		
		private void detach_Declensions(OrderDocDeviation entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}
		
		private void attach_OrderDocImportSubject(OrderDocImportSubject entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}
		
		private void detach_OrderDocImportSubject(OrderDocImportSubject entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}
		
		private void attach_OrderDocPassport(OrderDocPassport entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}
		
		private void detach_OrderDocPassport(OrderDocPassport entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}
		
		private void attach_OrderDocResponsible(OrderDocResponsible entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}
		
		private void detach_OrderDocResponsible(OrderDocResponsible entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}
		
		private void attach_States(OrderDocState entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}
		
		private void detach_States(OrderDocState entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}
		
		private void attach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
		
		private void attach_LicensePaymentOrders(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.License = this;
		}
		
		private void detach_LicensePaymentOrders(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.License = null;
		}
		
		private void attach_RequestPaymentOrders(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.Request = this;
		}
		
		private void detach_RequestPaymentOrders(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.Request = null;
		}
		
		private void attach_PaymentOrderLicenses(PaymentOrderLicenses entity)
		{
			this.SendPropertyChanging();
			entity.Licenses = this;
		}
		
		private void detach_PaymentOrderLicenses(PaymentOrderLicenses entity)
		{
			this.SendPropertyChanging();
			entity.Licenses = null;
		}
		
		private void attach_PaymentOrderRequests(PaymentOrderRequests entity)
		{
			this.SendPropertyChanging();
			entity.Requests = this;
		}
		
		private void detach_PaymentOrderRequests(PaymentOrderRequests entity)
		{
			this.SendPropertyChanging();
			entity.Requests = null;
		}
		
		private void attach_SpecificationCommon(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}
		
		private void detach_SpecificationCommon(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}
		
		private void attach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = this;
		}
		
		private void detach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.OrderDoc = null;
		}
		
		private void attach_TreasuryPaymentLicense(TreasuryPaymentLicense entity)
		{
			this.SendPropertyChanging();
			entity.License = this;
		}
		
		private void detach_TreasuryPaymentLicense(TreasuryPaymentLicense entity)
		{
			this.SendPropertyChanging();
			entity.License = null;
		}
		
		private void attach_TreasuryPaymentRequest(TreasuryPaymentRequest entity)
		{
			this.SendPropertyChanging();
			entity.Request = this;
		}
		
		private void detach_TreasuryPaymentRequest(TreasuryPaymentRequest entity)
		{
			this.SendPropertyChanging();
			entity.Request = null;
		}
	}
	
	[Table(Name="dbo.OrderDocAsso")]
	public partial class OrderDocAsso : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderDocAssoID;
		
		private System.Guid _ChildGUID;
		
		private System.Guid _ParentGUID;
		
		private char _Type;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private EntityRef<OrderDoc> _Child;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<OrderDoc> _Parent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDocAssoIDChanging(int value);
    partial void OnOrderDocAssoIDChanged();
    partial void OnChildGUIDChanging(System.Guid value);
    partial void OnChildGUIDChanged();
    partial void OnParentGUIDChanging(System.Guid value);
    partial void OnParentGUIDChanged();
    partial void OnTypeChanging(char value);
    partial void OnTypeChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public OrderDocAsso()
		{
			this._Child = default(EntityRef<OrderDoc>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Parent = default(EntityRef<OrderDoc>);
			OnCreated();
		}
		
		[Column(Storage="_OrderDocAssoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderDocAssoID
		{
			get
			{
				return this._OrderDocAssoID;
			}
			set
			{
				if ((this._OrderDocAssoID != value))
				{
					this.OnOrderDocAssoIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocAssoID = value;
					this.SendPropertyChanged("OrderDocAssoID");
					this.OnOrderDocAssoIDChanged();
				}
			}
		}
		
		[Column(Storage="_ChildGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ChildGUID
		{
			get
			{
				return this._ChildGUID;
			}
			set
			{
				if ((this._ChildGUID != value))
				{
					if (this._Child.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildGUIDChanging(value);
					this.SendPropertyChanging();
					this._ChildGUID = value;
					this.SendPropertyChanged("ChildGUID");
					this.OnChildGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParentGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ParentGUID
		{
			get
			{
				return this._ParentGUID;
			}
			set
			{
				if ((this._ParentGUID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentGUIDChanging(value);
					this.SendPropertyChanging();
					this._ParentGUID = value;
					this.SendPropertyChanged("ParentGUID");
					this.OnParentGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderDocAsso_Child", Storage="_Child", ThisKey="ChildGUID", OtherKey="OrderGUID", IsForeignKey=true, DeleteOnNull=true)]
		public OrderDoc Child
		{
			get
			{
				return this._Child.Entity;
			}
			set
			{
				OrderDoc previousValue = this._Child.Entity;
				if (((previousValue != value) 
							|| (this._Child.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Child.Entity = null;
						previousValue.OrderDocAsso.Remove(this);
					}
					this._Child.Entity = value;
					if ((value != null))
					{
						value.OrderDocAsso.Add(this);
						this._ChildGUID = value.OrderGUID;
					}
					else
					{
						this._ChildGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Child");
				}
			}
		}
		
		[Association(Name="FK_OrderDocAsso_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.OrderDocAsso.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.OrderDocAsso.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_OrderDocAsso_Parent", Storage="_Parent", ThisKey="ParentGUID", OtherKey="OrderGUID", IsForeignKey=true)]
		public OrderDoc Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				OrderDoc previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.OrderGU.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.OrderGU.Add(this);
						this._ParentGUID = value.OrderGUID;
					}
					else
					{
						this._ParentGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderDocBankReplication")]
	public partial class OrderDocBankReplication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderDocGUID;
		
		private EntityRef<OrderDoc> _OrderDoc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDocGUIDChanging(System.Guid value);
    partial void OnOrderDocGUIDChanged();
    #endregion
		
		public OrderDocBankReplication()
		{
			this._OrderDoc = default(EntityRef<OrderDoc>);
			OnCreated();
		}
		
		[Column(Storage="_OrderDocGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderDocBankReplication_OrderDoc", Storage="_OrderDoc", ThisKey="OrderDocGUID", OtherKey="OrderGUID", IsForeignKey=true, DeleteOnNull=true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value) 
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.OrderDocBankReplication = null;
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.OrderDocBankReplication = this;
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderDocDeviation")]
	public partial class OrderDocDeviation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderDocDeviationID;
		
		private System.DateTime _LastModifiedDate;
		
		private System.Guid _OrderDocGUID;
		
		private System.DateTime _MaxFormDate;
		
		private System.Nullable<System.DateTime> _ActualFormDate;
		
		private bool _IsDeleted;
		
		private EntityRef<OrderDoc> _OrderDoc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDocDeviationIDChanging(int value);
    partial void OnOrderDocDeviationIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnOrderDocGUIDChanging(System.Guid value);
    partial void OnOrderDocGUIDChanged();
    partial void OnMaxFormDateChanging(System.DateTime value);
    partial void OnMaxFormDateChanged();
    partial void OnActualFormDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualFormDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public OrderDocDeviation()
		{
			this._OrderDoc = default(EntityRef<OrderDoc>);
			OnCreated();
		}
		
		[Column(Storage="_OrderDocDeviationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderDocDeviationID
		{
			get
			{
				return this._OrderDocDeviationID;
			}
			set
			{
				if ((this._OrderDocDeviationID != value))
				{
					this.OnOrderDocDeviationIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocDeviationID = value;
					this.SendPropertyChanged("OrderDocDeviationID");
					this.OnOrderDocDeviationIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDocGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaxFormDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime MaxFormDate
		{
			get
			{
				return this._MaxFormDate;
			}
			set
			{
				if ((this._MaxFormDate != value))
				{
					this.OnMaxFormDateChanging(value);
					this.SendPropertyChanging();
					this._MaxFormDate = value;
					this.SendPropertyChanged("MaxFormDate");
					this.OnMaxFormDateChanged();
				}
			}
		}
		
		[Column(Storage="_ActualFormDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ActualFormDate
		{
			get
			{
				return this._ActualFormDate;
			}
			set
			{
				if ((this._ActualFormDate != value))
				{
					this.OnActualFormDateChanging(value);
					this.SendPropertyChanging();
					this._ActualFormDate = value;
					this.SendPropertyChanged("ActualFormDate");
					this.OnActualFormDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderDocDeviation_OrderDoc", Storage="_OrderDoc", ThisKey="OrderDocGUID", OtherKey="OrderGUID", IsForeignKey=true, DeleteOnNull=true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value) 
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.Declensions.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.Declensions.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderDocImportSubject")]
	public partial class OrderDocImportSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderDocImportSubjectID;
		
		private System.Guid _OrderDocGUID;
		
		private int _SubjectID;
		
		private EntityRef<OrderDoc> _OrderDoc;
		
		private EntityRef<SPM_Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDocImportSubjectIDChanging(int value);
    partial void OnOrderDocImportSubjectIDChanged();
    partial void OnOrderDocGUIDChanging(System.Guid value);
    partial void OnOrderDocGUIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    #endregion
		
		public OrderDocImportSubject()
		{
			this._OrderDoc = default(EntityRef<OrderDoc>);
			this._Subject = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_OrderDocImportSubjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderDocImportSubjectID
		{
			get
			{
				return this._OrderDocImportSubjectID;
			}
			set
			{
				if ((this._OrderDocImportSubjectID != value))
				{
					this.OnOrderDocImportSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocImportSubjectID = value;
					this.SendPropertyChanged("OrderDocImportSubjectID");
					this.OnOrderDocImportSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDocGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderDocImportSubject_OrderDoc", Storage="_OrderDoc", ThisKey="OrderDocGUID", OtherKey="OrderGUID", IsForeignKey=true, DeleteOnNull=true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value) 
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.OrderDocImportSubject.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.OrderDocImportSubject.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}
		
		[Association(Name="FK_OrderDocImportSubject_Subject", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.OrderDocImportSubject.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.OrderDocImportSubject.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderDocPassport")]
	public partial class OrderDocPassport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderDocPassportID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private System.Guid _OrderDocGUID;
		
		private System.Nullable<System.DateTime> _SignDateByEmployee;
		
		private System.Nullable<bool> _IsSignatureByEmployeeValid;
		
		private System.Nullable<bool> _IsSignatureValid;
		
		private System.Nullable<System.DateTime> _SignDate;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<int> _PerfEmployeeID;
		
		private string _Position;
		
		private string _License;
		
		private bool _Paper;
		
		private bool _Electronic;
		
		private System.Nullable<System.Guid> _FileGUID;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<OrderDoc> _OrderDoc;
		
		private EntityRef<Employee> _PerfEmployee;
		
		private EntityRef<DbFile> _File;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDocPassportIDChanging(int value);
    partial void OnOrderDocPassportIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnOrderDocGUIDChanging(System.Guid value);
    partial void OnOrderDocGUIDChanged();
    partial void OnSignDateByEmployeeChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateByEmployeeChanged();
    partial void OnIsSignatureByEmployeeValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureByEmployeeValidChanged();
    partial void OnIsSignatureValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureValidChanged();
    partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnPerfEmployeeIDChanging(System.Nullable<int> value);
    partial void OnPerfEmployeeIDChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnLicenseChanging(string value);
    partial void OnLicenseChanged();
    partial void OnPaperChanging(bool value);
    partial void OnPaperChanged();
    partial void OnElectronicChanging(bool value);
    partial void OnElectronicChanged();
    partial void OnFileGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFileGUIDChanged();
    #endregion
		
		public OrderDocPassport()
		{
			this._Employee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDoc = default(EntityRef<OrderDoc>);
			this._PerfEmployee = default(EntityRef<Employee>);
			this._File = default(EntityRef<DbFile>);
			OnCreated();
		}
		
		[Column(Storage="_OrderDocPassportID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderDocPassportID
		{
			get
			{
				return this._OrderDocPassportID;
			}
			set
			{
				if ((this._OrderDocPassportID != value))
				{
					this.OnOrderDocPassportIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocPassportID = value;
					this.SendPropertyChanged("OrderDocPassportID");
					this.OnOrderDocPassportIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDocGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_SignDateByEmployee", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDateByEmployee
		{
			get
			{
				return this._SignDateByEmployee;
			}
			set
			{
				if ((this._SignDateByEmployee != value))
				{
					this.OnSignDateByEmployeeChanging(value);
					this.SendPropertyChanging();
					this._SignDateByEmployee = value;
					this.SendPropertyChanged("SignDateByEmployee");
					this.OnSignDateByEmployeeChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureByEmployeeValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureByEmployeeValid
		{
			get
			{
				return this._IsSignatureByEmployeeValid;
			}
			set
			{
				if ((this._IsSignatureByEmployeeValid != value))
				{
					this.OnIsSignatureByEmployeeValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureByEmployeeValid = value;
					this.SendPropertyChanged("IsSignatureByEmployeeValid");
					this.OnIsSignatureByEmployeeValidChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureValid
		{
			get
			{
				return this._IsSignatureValid;
			}
			set
			{
				if ((this._IsSignatureValid != value))
				{
					this.OnIsSignatureValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureValid = value;
					this.SendPropertyChanged("IsSignatureValid");
					this.OnIsSignatureValidChanged();
				}
			}
		}
		
		[Column(Storage="_SignDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_PerfEmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PerfEmployeeID
		{
			get
			{
				return this._PerfEmployeeID;
			}
			set
			{
				if ((this._PerfEmployeeID != value))
				{
					if (this._PerfEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerfEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._PerfEmployeeID = value;
					this.SendPropertyChanged("PerfEmployeeID");
					this.OnPerfEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Column(Storage="_License", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string License
		{
			get
			{
				return this._License;
			}
			set
			{
				if ((this._License != value))
				{
					this.OnLicenseChanging(value);
					this.SendPropertyChanging();
					this._License = value;
					this.SendPropertyChanged("License");
					this.OnLicenseChanged();
				}
			}
		}
		
		[Column(Storage="_Paper", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Paper
		{
			get
			{
				return this._Paper;
			}
			set
			{
				if ((this._Paper != value))
				{
					this.OnPaperChanging(value);
					this.SendPropertyChanging();
					this._Paper = value;
					this.SendPropertyChanged("Paper");
					this.OnPaperChanged();
				}
			}
		}
		
		[Column(Storage="_Electronic", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Electronic
		{
			get
			{
				return this._Electronic;
			}
			set
			{
				if ((this._Electronic != value))
				{
					this.OnElectronicChanging(value);
					this.SendPropertyChanging();
					this._Electronic = value;
					this.SendPropertyChanged("Electronic");
					this.OnElectronicChanged();
				}
			}
		}
		
		[Column(Storage="_FileGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileGUID
		{
			get
			{
				return this._FileGUID;
			}
			set
			{
				if ((this._FileGUID != value))
				{
					if (this._File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileGUID = value;
					this.SendPropertyChanged("FileGUID");
					this.OnFileGUIDChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderDocPassport_Employee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.OrderDocPassport.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.OrderDocPassport.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_OrderDocPassport_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.OrderDocPassport.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.OrderDocPassport.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_OrderDocPassport_OrderDoc", Storage="_OrderDoc", ThisKey="OrderDocGUID", OtherKey="OrderGUID", IsForeignKey=true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value) 
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.OrderDocPassport.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.OrderDocPassport.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}
		
		[Association(Name="FK_OrderDocPassport_PerfEmployee", Storage="_PerfEmployee", ThisKey="PerfEmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee PerfEmployee
		{
			get
			{
				return this._PerfEmployee.Entity;
			}
			set
			{
				Employee previousValue = this._PerfEmployee.Entity;
				if (((previousValue != value) 
							|| (this._PerfEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PerfEmployee.Entity = null;
						previousValue.OrderDocPassport_PerfEmployee.Remove(this);
					}
					this._PerfEmployee.Entity = value;
					if ((value != null))
					{
						value.OrderDocPassport_PerfEmployee.Add(this);
						this._PerfEmployeeID = value.EmployeeID;
					}
					else
					{
						this._PerfEmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PerfEmployee");
				}
			}
		}
		
		[Association(Name="FK_OrderDocPassport_File", Storage="_File", ThisKey="FileGUID", OtherKey="ID", IsForeignKey=true)]
		public DbFile File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				if ((this._File.Entity != value))
				{
					this.SendPropertyChanging();
					this._File.Entity = value;
					this.SendPropertyChanged("File");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderDocReplicationLog")]
	public partial class OrderDocReplicationLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderDocReplicationLogID;
		
		private string _Action;
		
		private string _CurState;
		
		private string _CurStateSite;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Notes;
		
		private System.Guid _OrderDocGUID;
		
		private string _Title;
		
		private bool _IsExport;
		
		private int _SiteNumber;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDocReplicationLogIDChanging(int value);
    partial void OnOrderDocReplicationLogIDChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    partial void OnCurStateChanging(string value);
    partial void OnCurStateChanged();
    partial void OnCurStateSiteChanging(string value);
    partial void OnCurStateSiteChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnOrderDocGUIDChanging(System.Guid value);
    partial void OnOrderDocGUIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsExportChanging(bool value);
    partial void OnIsExportChanged();
    partial void OnSiteNumberChanging(int value);
    partial void OnSiteNumberChanged();
    #endregion
		
		public OrderDocReplicationLog()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_OrderDocReplicationLogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderDocReplicationLogID
		{
			get
			{
				return this._OrderDocReplicationLogID;
			}
			set
			{
				if ((this._OrderDocReplicationLogID != value))
				{
					this.OnOrderDocReplicationLogIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocReplicationLogID = value;
					this.SendPropertyChanged("OrderDocReplicationLogID");
					this.OnOrderDocReplicationLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_Action", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[Column(Storage="_CurState", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string CurState
		{
			get
			{
				return this._CurState;
			}
			set
			{
				if ((this._CurState != value))
				{
					this.OnCurStateChanging(value);
					this.SendPropertyChanging();
					this._CurState = value;
					this.SendPropertyChanged("CurState");
					this.OnCurStateChanged();
				}
			}
		}
		
		[Column(Storage="_CurStateSite", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string CurStateSite
		{
			get
			{
				return this._CurStateSite;
			}
			set
			{
				if ((this._CurStateSite != value))
				{
					this.OnCurStateSiteChanging(value);
					this.SendPropertyChanging();
					this._CurStateSite = value;
					this.SendPropertyChanged("CurStateSite");
					this.OnCurStateSiteChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDocGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsExport", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsExport
		{
			get
			{
				return this._IsExport;
			}
			set
			{
				if ((this._IsExport != value))
				{
					this.OnIsExportChanging(value);
					this.SendPropertyChanging();
					this._IsExport = value;
					this.SendPropertyChanged("IsExport");
					this.OnIsExportChanged();
				}
			}
		}
		
		[Column(Storage="_SiteNumber", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SiteNumber
		{
			get
			{
				return this._SiteNumber;
			}
			set
			{
				if ((this._SiteNumber != value))
				{
					this.OnSiteNumberChanging(value);
					this.SendPropertyChanging();
					this._SiteNumber = value;
					this.SendPropertyChanged("SiteNumber");
					this.OnSiteNumberChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderDocReplicationLog_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.OrderDocReplicationLog.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.OrderDocReplicationLog.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderDocResponsible")]
	public partial class OrderDocResponsible : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderDocResponsibleID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private System.Guid _OrderDocGUID;
		
		private int _EmployeeID;
		
		private bool _MustSign;
		
		private System.Nullable<System.DateTime> _SignDate;
		
		private System.Nullable<bool> _IsSignatureValid;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<OrderDoc> _OrderDoc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDocResponsibleIDChanging(int value);
    partial void OnOrderDocResponsibleIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnOrderDocGUIDChanging(System.Guid value);
    partial void OnOrderDocGUIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnMustSignChanging(bool value);
    partial void OnMustSignChanged();
    partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateChanged();
    partial void OnIsSignatureValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureValidChanged();
    #endregion
		
		public OrderDocResponsible()
		{
			this._Employee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDoc = default(EntityRef<OrderDoc>);
			OnCreated();
		}
		
		[Column(Storage="_OrderDocResponsibleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderDocResponsibleID
		{
			get
			{
				return this._OrderDocResponsibleID;
			}
			set
			{
				if ((this._OrderDocResponsibleID != value))
				{
					this.OnOrderDocResponsibleIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocResponsibleID = value;
					this.SendPropertyChanged("OrderDocResponsibleID");
					this.OnOrderDocResponsibleIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDocGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_MustSign", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool MustSign
		{
			get
			{
				return this._MustSign;
			}
			set
			{
				if ((this._MustSign != value))
				{
					this.OnMustSignChanging(value);
					this.SendPropertyChanging();
					this._MustSign = value;
					this.SendPropertyChanged("MustSign");
					this.OnMustSignChanged();
				}
			}
		}
		
		[Column(Storage="_SignDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureValid
		{
			get
			{
				return this._IsSignatureValid;
			}
			set
			{
				if ((this._IsSignatureValid != value))
				{
					this.OnIsSignatureValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureValid = value;
					this.SendPropertyChanged("IsSignatureValid");
					this.OnIsSignatureValidChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderDocResponsible_Employee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.OrderDocResponsible.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.OrderDocResponsible.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_OrderDocResponsible_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.OrderDocResponsible.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.OrderDocResponsible.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_OrderDocResponsible_OrderDoc", Storage="_OrderDoc", ThisKey="OrderDocGUID", OtherKey="OrderGUID", IsForeignKey=true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value) 
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.OrderDocResponsible.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.OrderDocResponsible.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderDocState")]
	public partial class OrderDocState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderDocStateGUID;
		
		private string _Title;
		
		private System.Guid _OrderDocGUID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private System.Nullable<System.Guid> _Guid;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<OrderDoc> _OrderDoc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDocStateGUIDChanging(System.Guid value);
    partial void OnOrderDocStateGUIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOrderDocGUIDChanging(System.Guid value);
    partial void OnOrderDocGUIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnGuidChanging(System.Nullable<System.Guid> value);
    partial void OnGuidChanged();
    #endregion
		
		public OrderDocState()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OrderDoc = default(EntityRef<OrderDoc>);
			OnCreated();
		}
		
		[Column(Storage="_OrderDocStateGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderDocStateGUID
		{
			get
			{
				return this._OrderDocStateGUID;
			}
			set
			{
				if ((this._OrderDocStateGUID != value))
				{
					this.OnOrderDocStateGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocStateGUID = value;
					this.SendPropertyChanged("OrderDocStateGUID");
					this.OnOrderDocStateGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDocGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Association(Name="FK_OrderDocState_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.OrderDocState.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.OrderDocState.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_OrderDocState_OrderDoc", Storage="_OrderDoc", ThisKey="OrderDocGUID", OtherKey="OrderGUID", IsForeignKey=true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value) 
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.States.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.States.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderDocTransition")]
	public partial class OrderDocTransition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderDocTransitionID;
		
		private System.DateTime _CreateDate;
		
		private string _Comment;
		
		private bool _IsCurrent;
		
		private bool _IsLast;
		
		private int _SeqNo;
		
		private System.Guid _ParentGUID;
		
		private int _SubjectID;
		
		private int _WorkflowID;
		
		private int _ActivityID;
		
		private int _TransitionID;
		
		private System.Nullable<decimal> _OldID;
		
		private EntityRef<FactAnnulment> _FactAnnulment;
		
		private EntityRef<FactClose> _FactClose;
		
		private EntityRef<FactForm> _FactForm;
		
		private EntityRef<FactRegister> _FactRegister;
		
		private EntityRef<FactReject> _FactReject;
		
		private EntityRef<FactResume> _FactResume;
		
		private EntityRef<FactSuspend> _FactSuspend;
		
		private EntityRef<WF_Activity> _Activity;
		
		private EntityRef<OrderDoc> _Parent;
		
		private EntityRef<SPM_Subject> _Subject;
		
		private EntityRef<WF_Transition> _Transition;
		
		private EntityRef<WF_Workflow> _Workflow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDocTransitionIDChanging(int value);
    partial void OnOrderDocTransitionIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnIsCurrentChanging(bool value);
    partial void OnIsCurrentChanged();
    partial void OnIsLastChanging(bool value);
    partial void OnIsLastChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnParentGUIDChanging(System.Guid value);
    partial void OnParentGUIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnWorkflowIDChanging(int value);
    partial void OnWorkflowIDChanged();
    partial void OnActivityIDChanging(int value);
    partial void OnActivityIDChanged();
    partial void OnTransitionIDChanging(int value);
    partial void OnTransitionIDChanged();
    partial void OnOldIDChanging(System.Nullable<decimal> value);
    partial void OnOldIDChanged();
    #endregion
		
		public OrderDocTransition()
		{
			this._FactAnnulment = default(EntityRef<FactAnnulment>);
			this._FactClose = default(EntityRef<FactClose>);
			this._FactForm = default(EntityRef<FactForm>);
			this._FactRegister = default(EntityRef<FactRegister>);
			this._FactReject = default(EntityRef<FactReject>);
			this._FactResume = default(EntityRef<FactResume>);
			this._FactSuspend = default(EntityRef<FactSuspend>);
			this._Activity = default(EntityRef<WF_Activity>);
			this._Parent = default(EntityRef<OrderDoc>);
			this._Subject = default(EntityRef<SPM_Subject>);
			this._Transition = default(EntityRef<WF_Transition>);
			this._Workflow = default(EntityRef<WF_Workflow>);
			OnCreated();
		}
		
		[Column(Storage="_OrderDocTransitionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderDocTransitionID
		{
			get
			{
				return this._OrderDocTransitionID;
			}
			set
			{
				if ((this._OrderDocTransitionID != value))
				{
					this.OnOrderDocTransitionIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocTransitionID = value;
					this.SendPropertyChanged("OrderDocTransitionID");
					this.OnOrderDocTransitionIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_IsCurrent", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsCurrent
		{
			get
			{
				return this._IsCurrent;
			}
			set
			{
				if ((this._IsCurrent != value))
				{
					this.OnIsCurrentChanging(value);
					this.SendPropertyChanging();
					this._IsCurrent = value;
					this.SendPropertyChanged("IsCurrent");
					this.OnIsCurrentChanged();
				}
			}
		}
		
		[Column(Storage="_IsLast", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsLast
		{
			get
			{
				return this._IsLast;
			}
			set
			{
				if ((this._IsLast != value))
				{
					this.OnIsLastChanging(value);
					this.SendPropertyChanging();
					this._IsLast = value;
					this.SendPropertyChanged("IsLast");
					this.OnIsLastChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_ParentGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ParentGUID
		{
			get
			{
				return this._ParentGUID;
			}
			set
			{
				if ((this._ParentGUID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentGUIDChanging(value);
					this.SendPropertyChanging();
					this._ParentGUID = value;
					this.SendPropertyChanged("ParentGUID");
					this.OnParentGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_WorkflowID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int WorkflowID
		{
			get
			{
				return this._WorkflowID;
			}
			set
			{
				if ((this._WorkflowID != value))
				{
					if (this._Workflow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkflowIDChanging(value);
					this.SendPropertyChanging();
					this._WorkflowID = value;
					this.SendPropertyChanged("WorkflowID");
					this.OnWorkflowIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActivityID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ActivityID = value;
					this.SendPropertyChanged("ActivityID");
					this.OnActivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_TransitionID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TransitionID
		{
			get
			{
				return this._TransitionID;
			}
			set
			{
				if ((this._TransitionID != value))
				{
					if (this._Transition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransitionIDChanging(value);
					this.SendPropertyChanging();
					this._TransitionID = value;
					this.SendPropertyChanged("TransitionID");
					this.OnTransitionIDChanged();
				}
			}
		}
		
		[Column(Storage="_OldID", DbType="Decimal(14,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}
		
		[Association(Name="FK_FactAnnulment_OrderDocTransition", Storage="_FactAnnulment", ThisKey="OrderDocTransitionID", OtherKey="FactID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public FactAnnulment FactAnnulment
		{
			get
			{
				return this._FactAnnulment.Entity;
			}
			set
			{
				FactAnnulment previousValue = this._FactAnnulment.Entity;
				if (((previousValue != value) 
							|| (this._FactAnnulment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactAnnulment.Entity = null;
						previousValue.OrderDocTransition = null;
					}
					this._FactAnnulment.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition = this;
					}
					this.SendPropertyChanged("FactAnnulment");
				}
			}
		}
		
		[Association(Name="FK_FactClose_OrderDocTransition", Storage="_FactClose", ThisKey="OrderDocTransitionID", OtherKey="FactID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public FactClose FactClose
		{
			get
			{
				return this._FactClose.Entity;
			}
			set
			{
				FactClose previousValue = this._FactClose.Entity;
				if (((previousValue != value) 
							|| (this._FactClose.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactClose.Entity = null;
						previousValue.OrderDocTransition = null;
					}
					this._FactClose.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition = this;
					}
					this.SendPropertyChanged("FactClose");
				}
			}
		}
		
		[Association(Name="FK_FactForm_OrderDocTransition", Storage="_FactForm", ThisKey="OrderDocTransitionID", OtherKey="FactID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public FactForm FactForm
		{
			get
			{
				return this._FactForm.Entity;
			}
			set
			{
				FactForm previousValue = this._FactForm.Entity;
				if (((previousValue != value) 
							|| (this._FactForm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactForm.Entity = null;
						previousValue.OrderDocTransition = null;
					}
					this._FactForm.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition = this;
					}
					this.SendPropertyChanged("FactForm");
				}
			}
		}
		
		[Association(Name="FK_FactRegister_OrderDocTransition", Storage="_FactRegister", ThisKey="OrderDocTransitionID", OtherKey="FactID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public FactRegister FactRegister
		{
			get
			{
				return this._FactRegister.Entity;
			}
			set
			{
				FactRegister previousValue = this._FactRegister.Entity;
				if (((previousValue != value) 
							|| (this._FactRegister.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactRegister.Entity = null;
						previousValue.OrderDocTransition = null;
					}
					this._FactRegister.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition = this;
					}
					this.SendPropertyChanged("FactRegister");
				}
			}
		}
		
		[Association(Name="FK_FactReject_OrderDocTransition", Storage="_FactReject", ThisKey="OrderDocTransitionID", OtherKey="FactID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public FactReject FactReject
		{
			get
			{
				return this._FactReject.Entity;
			}
			set
			{
				FactReject previousValue = this._FactReject.Entity;
				if (((previousValue != value) 
							|| (this._FactReject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactReject.Entity = null;
						previousValue.OrderDocTransition = null;
					}
					this._FactReject.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition = this;
					}
					this.SendPropertyChanged("FactReject");
				}
			}
		}
		
		[Association(Name="FK_FactResume_OrderDocTransition", Storage="_FactResume", ThisKey="OrderDocTransitionID", OtherKey="FactID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public FactResume FactResume
		{
			get
			{
				return this._FactResume.Entity;
			}
			set
			{
				FactResume previousValue = this._FactResume.Entity;
				if (((previousValue != value) 
							|| (this._FactResume.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactResume.Entity = null;
						previousValue.OrderDocTransition = null;
					}
					this._FactResume.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition = this;
					}
					this.SendPropertyChanged("FactResume");
				}
			}
		}
		
		[Association(Name="FK_FactSuspend_OrderDocTransition", Storage="_FactSuspend", ThisKey="OrderDocTransitionID", OtherKey="FactID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public FactSuspend FactSuspend
		{
			get
			{
				return this._FactSuspend.Entity;
			}
			set
			{
				FactSuspend previousValue = this._FactSuspend.Entity;
				if (((previousValue != value) 
							|| (this._FactSuspend.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactSuspend.Entity = null;
						previousValue.OrderDocTransition = null;
					}
					this._FactSuspend.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition = this;
					}
					this.SendPropertyChanged("FactSuspend");
				}
			}
		}
		
		[Association(Name="FK_OrderDocTransition_Activity", Storage="_Activity", ThisKey="ActivityID", OtherKey="ActivityID", IsForeignKey=true)]
		public WF_Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				WF_Activity previousValue = this._Activity.Entity;
				if (((previousValue != value) 
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.OrderDocTransition.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition.Add(this);
						this._ActivityID = value.ActivityID;
					}
					else
					{
						this._ActivityID = default(int);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}
		
		[Association(Name="FK_OrderDocTransition_Parent", Storage="_Parent", ThisKey="ParentGUID", OtherKey="OrderGUID", IsForeignKey=true, DeleteOnNull=true)]
		public OrderDoc Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				OrderDoc previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.OrderDocTransition.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition.Add(this);
						this._ParentGUID = value.OrderGUID;
					}
					else
					{
						this._ParentGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		[Association(Name="FK_OrderDocTransition_Subject", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.OrderDocTransition.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[Association(Name="FK_OrderDocTransition_Transition", Storage="_Transition", ThisKey="TransitionID", OtherKey="TransitionID", IsForeignKey=true)]
		public WF_Transition Transition
		{
			get
			{
				return this._Transition.Entity;
			}
			set
			{
				WF_Transition previousValue = this._Transition.Entity;
				if (((previousValue != value) 
							|| (this._Transition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transition.Entity = null;
						previousValue.OrderDocTransition.Remove(this);
					}
					this._Transition.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition.Add(this);
						this._TransitionID = value.TransitionID;
					}
					else
					{
						this._TransitionID = default(int);
					}
					this.SendPropertyChanged("Transition");
				}
			}
		}
		
		[Association(Name="FK_OrderDocTransition_Workflow", Storage="_Workflow", ThisKey="WorkflowID", OtherKey="WorkflowID", IsForeignKey=true)]
		public WF_Workflow Workflow
		{
			get
			{
				return this._Workflow.Entity;
			}
			set
			{
				WF_Workflow previousValue = this._Workflow.Entity;
				if (((previousValue != value) 
							|| (this._Workflow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Workflow.Entity = null;
						previousValue.OrderDocTransition.Remove(this);
					}
					this._Workflow.Entity = value;
					if ((value != null))
					{
						value.OrderDocTransition.Add(this);
						this._WorkflowID = value.WorkflowID;
					}
					else
					{
						this._WorkflowID = default(int);
					}
					this.SendPropertyChanged("Workflow");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderDocWebReplication")]
	public partial class OrderDocWebReplication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderDocGUID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDocGUIDChanging(System.Guid value);
    partial void OnOrderDocGUIDChanged();
    #endregion
		
		public OrderDocWebReplication()
		{
			OnCreated();
		}
		
		[Column(Storage="_OrderDocGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PaymentOrder")]
	public partial class PaymentOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Number;
		
		private System.DateTime _Date;
		
		private System.Guid _ContractorGUID;
		
		private System.Nullable<System.Guid> _RequestGUID;
		
		private System.Nullable<System.Guid> _LicenseGUID;
		
		private string _PayerBankDetails;
		
		private string _RecipientDetails;
		
		private char _PaymentPurpose;
		
		private decimal _Amount;
		
		private System.Nullable<int> _DocumentFileID;
		
		private System.Guid _PaymentOrderGUID;
		
		private bool _IsConfirm;
		
		private System.Nullable<int> _RepresentationID;
		
		private bool _IsSent;
		
		private System.Nullable<int> _TreasuryPaymentID;
		
		private EntityRef<Contractor> _Contractor;
		
		private EntityRef<N_File> _Document;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<OrderDoc> _License;
		
		private EntityRef<Representation> _Representation;
		
		private EntityRef<OrderDoc> _Request;
		
		private EntityRef<TreasuryPayment> _TreasuryPayment;
		
		private EntitySet<PaymentOrderLicenses> _PaymentOrderLicenses;
		
		private EntitySet<PaymentOrderRequests> _PaymentOrderRequests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnContractorGUIDChanging(System.Guid value);
    partial void OnContractorGUIDChanged();
    partial void OnRequestGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnRequestGUIDChanged();
    partial void OnLicenseGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnLicenseGUIDChanged();
    partial void OnPayerBankDetailsChanging(string value);
    partial void OnPayerBankDetailsChanged();
    partial void OnRecipientDetailsChanging(string value);
    partial void OnRecipientDetailsChanged();
    partial void OnPaymentPurposeChanging(char value);
    partial void OnPaymentPurposeChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnDocumentFileIDChanging(System.Nullable<int> value);
    partial void OnDocumentFileIDChanged();
    partial void OnPaymentOrderGUIDChanging(System.Guid value);
    partial void OnPaymentOrderGUIDChanged();
    partial void OnIsConfirmChanging(bool value);
    partial void OnIsConfirmChanged();
    partial void OnRepresentationIDChanging(System.Nullable<int> value);
    partial void OnRepresentationIDChanged();
    partial void OnIsSentChanging(bool value);
    partial void OnIsSentChanged();
    partial void OnTreasuryPaymentIDChanging(System.Nullable<int> value);
    partial void OnTreasuryPaymentIDChanged();
    #endregion
		
		public PaymentOrder()
		{
			this._Contractor = default(EntityRef<Contractor>);
			this._Document = default(EntityRef<N_File>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._License = default(EntityRef<OrderDoc>);
			this._Representation = default(EntityRef<Representation>);
			this._Request = default(EntityRef<OrderDoc>);
			this._TreasuryPayment = default(EntityRef<TreasuryPayment>);
			this._PaymentOrderLicenses = new EntitySet<PaymentOrderLicenses>(new Action<PaymentOrderLicenses>(this.attach_PaymentOrderLicenses), new Action<PaymentOrderLicenses>(this.detach_PaymentOrderLicenses));
			this._PaymentOrderRequests = new EntitySet<PaymentOrderRequests>(new Action<PaymentOrderRequests>(this.attach_PaymentOrderRequests), new Action<PaymentOrderRequests>(this.detach_PaymentOrderRequests));
			OnCreated();
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Number", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_ContractorGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorGUID = value;
					this.SendPropertyChanged("ContractorGUID");
					this.OnContractorGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_RequestGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> RequestGUID
		{
			get
			{
				return this._RequestGUID;
			}
			set
			{
				if ((this._RequestGUID != value))
				{
					if (this._Request.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestGUIDChanging(value);
					this.SendPropertyChanging();
					this._RequestGUID = value;
					this.SendPropertyChanged("RequestGUID");
					this.OnRequestGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_LicenseGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> LicenseGUID
		{
			get
			{
				return this._LicenseGUID;
			}
			set
			{
				if ((this._LicenseGUID != value))
				{
					if (this._License.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLicenseGUIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseGUID = value;
					this.SendPropertyChanged("LicenseGUID");
					this.OnLicenseGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_PayerBankDetails", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PayerBankDetails
		{
			get
			{
				return this._PayerBankDetails;
			}
			set
			{
				if ((this._PayerBankDetails != value))
				{
					this.OnPayerBankDetailsChanging(value);
					this.SendPropertyChanging();
					this._PayerBankDetails = value;
					this.SendPropertyChanged("PayerBankDetails");
					this.OnPayerBankDetailsChanged();
				}
			}
		}
		
		[Column(Storage="_RecipientDetails", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RecipientDetails
		{
			get
			{
				return this._RecipientDetails;
			}
			set
			{
				if ((this._RecipientDetails != value))
				{
					this.OnRecipientDetailsChanging(value);
					this.SendPropertyChanging();
					this._RecipientDetails = value;
					this.SendPropertyChanged("RecipientDetails");
					this.OnRecipientDetailsChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentPurpose", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char PaymentPurpose
		{
			get
			{
				return this._PaymentPurpose;
			}
			set
			{
				if ((this._PaymentPurpose != value))
				{
					this.OnPaymentPurposeChanging(value);
					this.SendPropertyChanging();
					this._PaymentPurpose = value;
					this.SendPropertyChanged("PaymentPurpose");
					this.OnPaymentPurposeChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(15,2) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentFileID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DocumentFileID
		{
			get
			{
				return this._DocumentFileID;
			}
			set
			{
				if ((this._DocumentFileID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentFileIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentFileID = value;
					this.SendPropertyChanged("DocumentFileID");
					this.OnDocumentFileIDChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentOrderGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PaymentOrderGUID
		{
			get
			{
				return this._PaymentOrderGUID;
			}
			set
			{
				if ((this._PaymentOrderGUID != value))
				{
					this.OnPaymentOrderGUIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentOrderGUID = value;
					this.SendPropertyChanged("PaymentOrderGUID");
					this.OnPaymentOrderGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsConfirm", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsConfirm
		{
			get
			{
				return this._IsConfirm;
			}
			set
			{
				if ((this._IsConfirm != value))
				{
					this.OnIsConfirmChanging(value);
					this.SendPropertyChanging();
					this._IsConfirm = value;
					this.SendPropertyChanged("IsConfirm");
					this.OnIsConfirmChanged();
				}
			}
		}
		
		[Column(Storage="_RepresentationID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					if (this._Representation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentationID = value;
					this.SendPropertyChanged("RepresentationID");
					this.OnRepresentationIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsSent", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSent
		{
			get
			{
				return this._IsSent;
			}
			set
			{
				if ((this._IsSent != value))
				{
					this.OnIsSentChanging(value);
					this.SendPropertyChanging();
					this._IsSent = value;
					this.SendPropertyChanged("IsSent");
					this.OnIsSentChanged();
				}
			}
		}
		
		[Column(Storage="_TreasuryPaymentID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> TreasuryPaymentID
		{
			get
			{
				return this._TreasuryPaymentID;
			}
			set
			{
				if ((this._TreasuryPaymentID != value))
				{
					if (this._TreasuryPayment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTreasuryPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._TreasuryPaymentID = value;
					this.SendPropertyChanged("TreasuryPaymentID");
					this.OnTreasuryPaymentIDChanged();
				}
			}
		}
		
		[Association(Name="FK_PaymentOrder_Contractor", Storage="_Contractor", ThisKey="ContractorGUID", OtherKey="ContractorGUID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.PaymentOrder.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.PaymentOrder.Add(this);
						this._ContractorGUID = value.ContractorGUID;
					}
					else
					{
						this._ContractorGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		[Association(Name="FK_PaymentOrder_Document", Storage="_Document", ThisKey="DocumentFileID", OtherKey="FileID", IsForeignKey=true)]
		public N_File Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				N_File previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.PaymentOrder.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.PaymentOrder.Add(this);
						this._DocumentFileID = value.FileID;
					}
					else
					{
						this._DocumentFileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[Association(Name="FK_PaymentOrder_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.PaymentOrder.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.PaymentOrder.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_PaymentOrder_License", Storage="_License", ThisKey="LicenseGUID", OtherKey="OrderGUID", IsForeignKey=true)]
		public OrderDoc License
		{
			get
			{
				return this._License.Entity;
			}
			set
			{
				OrderDoc previousValue = this._License.Entity;
				if (((previousValue != value) 
							|| (this._License.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._License.Entity = null;
						previousValue.LicensePaymentOrders.Remove(this);
					}
					this._License.Entity = value;
					if ((value != null))
					{
						value.LicensePaymentOrders.Add(this);
						this._LicenseGUID = value.OrderGUID;
					}
					else
					{
						this._LicenseGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("License");
				}
			}
		}
		
		[Association(Name="FK_PaymentOrder_Representation", Storage="_Representation", ThisKey="RepresentationID", OtherKey="RepresentationID", IsForeignKey=true)]
		public Representation Representation
		{
			get
			{
				return this._Representation.Entity;
			}
			set
			{
				Representation previousValue = this._Representation.Entity;
				if (((previousValue != value) 
							|| (this._Representation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representation.Entity = null;
						previousValue.PaymentOrder.Remove(this);
					}
					this._Representation.Entity = value;
					if ((value != null))
					{
						value.PaymentOrder.Add(this);
						this._RepresentationID = value.RepresentationID;
					}
					else
					{
						this._RepresentationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Representation");
				}
			}
		}
		
		[Association(Name="FK_PaymentOrder_Request", Storage="_Request", ThisKey="RequestGUID", OtherKey="OrderGUID", IsForeignKey=true)]
		public OrderDoc Request
		{
			get
			{
				return this._Request.Entity;
			}
			set
			{
				OrderDoc previousValue = this._Request.Entity;
				if (((previousValue != value) 
							|| (this._Request.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Request.Entity = null;
						previousValue.RequestPaymentOrders.Remove(this);
					}
					this._Request.Entity = value;
					if ((value != null))
					{
						value.RequestPaymentOrders.Add(this);
						this._RequestGUID = value.OrderGUID;
					}
					else
					{
						this._RequestGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Request");
				}
			}
		}
		
		[Association(Name="FK_PaymentOrder_TreasuryPayment", Storage="_TreasuryPayment", ThisKey="TreasuryPaymentID", OtherKey="TreasuryPaymentID", IsForeignKey=true)]
		public TreasuryPayment TreasuryPayment
		{
			get
			{
				return this._TreasuryPayment.Entity;
			}
			set
			{
				TreasuryPayment previousValue = this._TreasuryPayment.Entity;
				if (((previousValue != value) 
							|| (this._TreasuryPayment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TreasuryPayment.Entity = null;
						previousValue.PaymentOrder.Remove(this);
					}
					this._TreasuryPayment.Entity = value;
					if ((value != null))
					{
						value.PaymentOrder.Add(this);
						this._TreasuryPaymentID = value.TreasuryPaymentID;
					}
					else
					{
						this._TreasuryPaymentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TreasuryPayment");
				}
			}
		}
		
		[Association(Name="FK_PaymentOrderLicenses_PaymentOrder", Storage="_PaymentOrderLicenses", ThisKey="PaymentOrderGUID", OtherKey="PaymentOrderGUID", DeleteRule="CASCADE")]
		public EntitySet<PaymentOrderLicenses> PaymentOrderLicenses
		{
			get
			{
				return this._PaymentOrderLicenses;
			}
			set
			{
				this._PaymentOrderLicenses.Assign(value);
			}
		}
		
		[Association(Name="FK_PaymentOrderRequests_PaymentOrder", Storage="_PaymentOrderRequests", ThisKey="PaymentOrderGUID", OtherKey="PaymentOrderGUID", DeleteRule="CASCADE")]
		public EntitySet<PaymentOrderRequests> PaymentOrderRequests
		{
			get
			{
				return this._PaymentOrderRequests;
			}
			set
			{
				this._PaymentOrderRequests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PaymentOrderLicenses(PaymentOrderLicenses entity)
		{
			this.SendPropertyChanging();
			entity.PaymentOrder = this;
		}
		
		private void detach_PaymentOrderLicenses(PaymentOrderLicenses entity)
		{
			this.SendPropertyChanging();
			entity.PaymentOrder = null;
		}
		
		private void attach_PaymentOrderRequests(PaymentOrderRequests entity)
		{
			this.SendPropertyChanging();
			entity.PaymentOrder = this;
		}
		
		private void detach_PaymentOrderRequests(PaymentOrderRequests entity)
		{
			this.SendPropertyChanging();
			entity.PaymentOrder = null;
		}
	}
	
	[Table(Name="dbo.PaymentOrderLicenses")]
	public partial class PaymentOrderLicenses : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PaymentOrderGUID;
		
		private System.Guid _LicensesGUID;
		
		private EntityRef<OrderDoc> _Licenses;
		
		private EntityRef<PaymentOrder> _PaymentOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentOrderGUIDChanging(System.Guid value);
    partial void OnPaymentOrderGUIDChanged();
    partial void OnLicensesGUIDChanging(System.Guid value);
    partial void OnLicensesGUIDChanged();
    #endregion
		
		public PaymentOrderLicenses()
		{
			this._Licenses = default(EntityRef<OrderDoc>);
			this._PaymentOrder = default(EntityRef<PaymentOrder>);
			OnCreated();
		}
		
		[Column(Storage="_PaymentOrderGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PaymentOrderGUID
		{
			get
			{
				return this._PaymentOrderGUID;
			}
			set
			{
				if ((this._PaymentOrderGUID != value))
				{
					if (this._PaymentOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentOrderGUIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentOrderGUID = value;
					this.SendPropertyChanged("PaymentOrderGUID");
					this.OnPaymentOrderGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_LicensesGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LicensesGUID
		{
			get
			{
				return this._LicensesGUID;
			}
			set
			{
				if ((this._LicensesGUID != value))
				{
					if (this._Licenses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLicensesGUIDChanging(value);
					this.SendPropertyChanging();
					this._LicensesGUID = value;
					this.SendPropertyChanged("LicensesGUID");
					this.OnLicensesGUIDChanged();
				}
			}
		}
		
		[Association(Name="FK_PaymentOrderLicenses_Licenses", Storage="_Licenses", ThisKey="LicensesGUID", OtherKey="OrderGUID", IsForeignKey=true, DeleteOnNull=true)]
		public OrderDoc Licenses
		{
			get
			{
				return this._Licenses.Entity;
			}
			set
			{
				OrderDoc previousValue = this._Licenses.Entity;
				if (((previousValue != value) 
							|| (this._Licenses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Licenses.Entity = null;
						previousValue.PaymentOrderLicenses.Remove(this);
					}
					this._Licenses.Entity = value;
					if ((value != null))
					{
						value.PaymentOrderLicenses.Add(this);
						this._LicensesGUID = value.OrderGUID;
					}
					else
					{
						this._LicensesGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Licenses");
				}
			}
		}
		
		[Association(Name="FK_PaymentOrderLicenses_PaymentOrder", Storage="_PaymentOrder", ThisKey="PaymentOrderGUID", OtherKey="PaymentOrderGUID", IsForeignKey=true, DeleteOnNull=true)]
		public PaymentOrder PaymentOrder
		{
			get
			{
				return this._PaymentOrder.Entity;
			}
			set
			{
				PaymentOrder previousValue = this._PaymentOrder.Entity;
				if (((previousValue != value) 
							|| (this._PaymentOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentOrder.Entity = null;
						previousValue.PaymentOrderLicenses.Remove(this);
					}
					this._PaymentOrder.Entity = value;
					if ((value != null))
					{
						value.PaymentOrderLicenses.Add(this);
						this._PaymentOrderGUID = value.PaymentOrderGUID;
					}
					else
					{
						this._PaymentOrderGUID = default(System.Guid);
					}
					this.SendPropertyChanged("PaymentOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PaymentOrderRequests")]
	public partial class PaymentOrderRequests : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PaymentOrderGUID;
		
		private System.Guid _RequestsGUID;
		
		private EntityRef<PaymentOrder> _PaymentOrder;
		
		private EntityRef<OrderDoc> _Requests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentOrderGUIDChanging(System.Guid value);
    partial void OnPaymentOrderGUIDChanged();
    partial void OnRequestsGUIDChanging(System.Guid value);
    partial void OnRequestsGUIDChanged();
    #endregion
		
		public PaymentOrderRequests()
		{
			this._PaymentOrder = default(EntityRef<PaymentOrder>);
			this._Requests = default(EntityRef<OrderDoc>);
			OnCreated();
		}
		
		[Column(Storage="_PaymentOrderGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PaymentOrderGUID
		{
			get
			{
				return this._PaymentOrderGUID;
			}
			set
			{
				if ((this._PaymentOrderGUID != value))
				{
					if (this._PaymentOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentOrderGUIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentOrderGUID = value;
					this.SendPropertyChanged("PaymentOrderGUID");
					this.OnPaymentOrderGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_RequestsGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RequestsGUID
		{
			get
			{
				return this._RequestsGUID;
			}
			set
			{
				if ((this._RequestsGUID != value))
				{
					if (this._Requests.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestsGUIDChanging(value);
					this.SendPropertyChanging();
					this._RequestsGUID = value;
					this.SendPropertyChanged("RequestsGUID");
					this.OnRequestsGUIDChanged();
				}
			}
		}
		
		[Association(Name="FK_PaymentOrderRequests_PaymentOrder", Storage="_PaymentOrder", ThisKey="PaymentOrderGUID", OtherKey="PaymentOrderGUID", IsForeignKey=true, DeleteOnNull=true)]
		public PaymentOrder PaymentOrder
		{
			get
			{
				return this._PaymentOrder.Entity;
			}
			set
			{
				PaymentOrder previousValue = this._PaymentOrder.Entity;
				if (((previousValue != value) 
							|| (this._PaymentOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentOrder.Entity = null;
						previousValue.PaymentOrderRequests.Remove(this);
					}
					this._PaymentOrder.Entity = value;
					if ((value != null))
					{
						value.PaymentOrderRequests.Add(this);
						this._PaymentOrderGUID = value.PaymentOrderGUID;
					}
					else
					{
						this._PaymentOrderGUID = default(System.Guid);
					}
					this.SendPropertyChanged("PaymentOrder");
				}
			}
		}
		
		[Association(Name="FK_PaymentOrderRequests_Requests", Storage="_Requests", ThisKey="RequestsGUID", OtherKey="OrderGUID", IsForeignKey=true, DeleteOnNull=true)]
		public OrderDoc Requests
		{
			get
			{
				return this._Requests.Entity;
			}
			set
			{
				OrderDoc previousValue = this._Requests.Entity;
				if (((previousValue != value) 
							|| (this._Requests.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Requests.Entity = null;
						previousValue.PaymentOrderRequests.Remove(this);
					}
					this._Requests.Entity = value;
					if ((value != null))
					{
						value.PaymentOrderRequests.Add(this);
						this._RequestsGUID = value.OrderGUID;
					}
					else
					{
						this._RequestsGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Requests");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PerfomanceStat")]
	public partial class PerfomanceStat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PerfomanceStatID;
		
		private string _Mode;
		
		private string _Action;
		
		private string _MachineName;
		
		private string _RequestType;
		
		private int _TotalCount;
		
		private int _TotalSqlRequestCount;
		
		private int _TotalExecutionTime;
		
		private System.DateTime _LastAccessDateTime;
		
		private long _TotalRequestContentLength;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPerfomanceStatIDChanging(int value);
    partial void OnPerfomanceStatIDChanged();
    partial void OnModeChanging(string value);
    partial void OnModeChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    partial void OnMachineNameChanging(string value);
    partial void OnMachineNameChanged();
    partial void OnRequestTypeChanging(string value);
    partial void OnRequestTypeChanged();
    partial void OnTotalCountChanging(int value);
    partial void OnTotalCountChanged();
    partial void OnTotalSqlRequestCountChanging(int value);
    partial void OnTotalSqlRequestCountChanged();
    partial void OnTotalExecutionTimeChanging(int value);
    partial void OnTotalExecutionTimeChanged();
    partial void OnLastAccessDateTimeChanging(System.DateTime value);
    partial void OnLastAccessDateTimeChanged();
    partial void OnTotalRequestContentLengthChanging(long value);
    partial void OnTotalRequestContentLengthChanged();
    #endregion
		
		public PerfomanceStat()
		{
			OnCreated();
		}
		
		[Column(Storage="_PerfomanceStatID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PerfomanceStatID
		{
			get
			{
				return this._PerfomanceStatID;
			}
			set
			{
				if ((this._PerfomanceStatID != value))
				{
					this.OnPerfomanceStatIDChanging(value);
					this.SendPropertyChanging();
					this._PerfomanceStatID = value;
					this.SendPropertyChanged("PerfomanceStatID");
					this.OnPerfomanceStatIDChanged();
				}
			}
		}
		
		[Column(Storage="_Mode", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Mode
		{
			get
			{
				return this._Mode;
			}
			set
			{
				if ((this._Mode != value))
				{
					this.OnModeChanging(value);
					this.SendPropertyChanging();
					this._Mode = value;
					this.SendPropertyChanged("Mode");
					this.OnModeChanged();
				}
			}
		}
		
		[Column(Storage="_Action", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[Column(Storage="_MachineName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}
		
		[Column(Storage="_RequestType", DbType="NVarChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RequestType
		{
			get
			{
				return this._RequestType;
			}
			set
			{
				if ((this._RequestType != value))
				{
					this.OnRequestTypeChanging(value);
					this.SendPropertyChanging();
					this._RequestType = value;
					this.SendPropertyChanged("RequestType");
					this.OnRequestTypeChanged();
				}
			}
		}
		
		[Column(Storage="_TotalCount", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TotalCount
		{
			get
			{
				return this._TotalCount;
			}
			set
			{
				if ((this._TotalCount != value))
				{
					this.OnTotalCountChanging(value);
					this.SendPropertyChanging();
					this._TotalCount = value;
					this.SendPropertyChanged("TotalCount");
					this.OnTotalCountChanged();
				}
			}
		}
		
		[Column(Storage="_TotalSqlRequestCount", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TotalSqlRequestCount
		{
			get
			{
				return this._TotalSqlRequestCount;
			}
			set
			{
				if ((this._TotalSqlRequestCount != value))
				{
					this.OnTotalSqlRequestCountChanging(value);
					this.SendPropertyChanging();
					this._TotalSqlRequestCount = value;
					this.SendPropertyChanged("TotalSqlRequestCount");
					this.OnTotalSqlRequestCountChanged();
				}
			}
		}
		
		[Column(Storage="_TotalExecutionTime", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TotalExecutionTime
		{
			get
			{
				return this._TotalExecutionTime;
			}
			set
			{
				if ((this._TotalExecutionTime != value))
				{
					this.OnTotalExecutionTimeChanging(value);
					this.SendPropertyChanging();
					this._TotalExecutionTime = value;
					this.SendPropertyChanged("TotalExecutionTime");
					this.OnTotalExecutionTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastAccessDateTime", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastAccessDateTime
		{
			get
			{
				return this._LastAccessDateTime;
			}
			set
			{
				if ((this._LastAccessDateTime != value))
				{
					this.OnLastAccessDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LastAccessDateTime = value;
					this.SendPropertyChanged("LastAccessDateTime");
					this.OnLastAccessDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_TotalRequestContentLength", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long TotalRequestContentLength
		{
			get
			{
				return this._TotalRequestContentLength;
			}
			set
			{
				if ((this._TotalRequestContentLength != value))
				{
					this.OnTotalRequestContentLengthChanging(value);
					this.SendPropertyChanging();
					this._TotalRequestContentLength = value;
					this.SendPropertyChanged("TotalRequestContentLength");
					this.OnTotalRequestContentLengthChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Quota")]
	public partial class Quota : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuotaID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private int _QuoteCategoryID;
		
		private int _CNCategoryID;
		
		private int _OperationTypeID;
		
		private decimal _AllocatedVolume;
		
		private int _MeasureID;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private System.DateTime _LicenseRegStart;
		
		private System.DateTime _LicenseRegEnd;
		
		private System.DateTime _CreateDate;
		
		private int _QuotaYear;
		
		private EntityRef<C_CNCategory> _CNCategory;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<C_Measure> _Measure;
		
		private EntityRef<C_OperationType> _OperationType;
		
		private EntityRef<C_QuoteCategory> _QuoteCategory;
		
		private EntitySet<QuotaDistribution> _Distribution;
		
		private EntitySet<QuotaEvent> _QuotaEvent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuotaIDChanging(int value);
    partial void OnQuotaIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnQuoteCategoryIDChanging(int value);
    partial void OnQuoteCategoryIDChanged();
    partial void OnCNCategoryIDChanging(int value);
    partial void OnCNCategoryIDChanged();
    partial void OnOperationTypeIDChanging(int value);
    partial void OnOperationTypeIDChanged();
    partial void OnAllocatedVolumeChanging(decimal value);
    partial void OnAllocatedVolumeChanged();
    partial void OnMeasureIDChanging(int value);
    partial void OnMeasureIDChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnLicenseRegStartChanging(System.DateTime value);
    partial void OnLicenseRegStartChanged();
    partial void OnLicenseRegEndChanging(System.DateTime value);
    partial void OnLicenseRegEndChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnQuotaYearChanging(int value);
    partial void OnQuotaYearChanged();
    #endregion
		
		public Quota()
		{
			this._CNCategory = default(EntityRef<C_CNCategory>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Measure = default(EntityRef<C_Measure>);
			this._OperationType = default(EntityRef<C_OperationType>);
			this._QuoteCategory = default(EntityRef<C_QuoteCategory>);
			this._Distribution = new EntitySet<QuotaDistribution>(new Action<QuotaDistribution>(this.attach_Distribution), new Action<QuotaDistribution>(this.detach_Distribution));
			this._QuotaEvent = new EntitySet<QuotaEvent>(new Action<QuotaEvent>(this.attach_QuotaEvent), new Action<QuotaEvent>(this.detach_QuotaEvent));
			OnCreated();
		}
		
		[Column(Storage="_QuotaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuotaID
		{
			get
			{
				return this._QuotaID;
			}
			set
			{
				if ((this._QuotaID != value))
				{
					this.OnQuotaIDChanging(value);
					this.SendPropertyChanging();
					this._QuotaID = value;
					this.SendPropertyChanged("QuotaID");
					this.OnQuotaIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_QuoteCategoryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int QuoteCategoryID
		{
			get
			{
				return this._QuoteCategoryID;
			}
			set
			{
				if ((this._QuoteCategoryID != value))
				{
					if (this._QuoteCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuoteCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._QuoteCategoryID = value;
					this.SendPropertyChanged("QuoteCategoryID");
					this.OnQuoteCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					if (this._CNCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_OperationTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					if (this._OperationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._OperationTypeID = value;
					this.SendPropertyChanged("OperationTypeID");
					this.OnOperationTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_AllocatedVolume", DbType="Decimal(18,5) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal AllocatedVolume
		{
			get
			{
				return this._AllocatedVolume;
			}
			set
			{
				if ((this._AllocatedVolume != value))
				{
					this.OnAllocatedVolumeChanging(value);
					this.SendPropertyChanging();
					this._AllocatedVolume = value;
					this.SendPropertyChanged("AllocatedVolume");
					this.OnAllocatedVolumeChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					if (this._Measure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_LicenseRegStart", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LicenseRegStart
		{
			get
			{
				return this._LicenseRegStart;
			}
			set
			{
				if ((this._LicenseRegStart != value))
				{
					this.OnLicenseRegStartChanging(value);
					this.SendPropertyChanging();
					this._LicenseRegStart = value;
					this.SendPropertyChanged("LicenseRegStart");
					this.OnLicenseRegStartChanged();
				}
			}
		}
		
		[Column(Storage="_LicenseRegEnd", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LicenseRegEnd
		{
			get
			{
				return this._LicenseRegEnd;
			}
			set
			{
				if ((this._LicenseRegEnd != value))
				{
					this.OnLicenseRegEndChanging(value);
					this.SendPropertyChanging();
					this._LicenseRegEnd = value;
					this.SendPropertyChanged("LicenseRegEnd");
					this.OnLicenseRegEndChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_QuotaYear", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int QuotaYear
		{
			get
			{
				return this._QuotaYear;
			}
			set
			{
				if ((this._QuotaYear != value))
				{
					this.OnQuotaYearChanging(value);
					this.SendPropertyChanging();
					this._QuotaYear = value;
					this.SendPropertyChanged("QuotaYear");
					this.OnQuotaYearChanged();
				}
			}
		}
		
		[Association(Name="FK_Quota_CNCategory", Storage="_CNCategory", ThisKey="CNCategoryID", OtherKey="CNCategoryID", IsForeignKey=true)]
		public C_CNCategory CNCategory
		{
			get
			{
				return this._CNCategory.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._CNCategory.Entity;
				if (((previousValue != value) 
							|| (this._CNCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategory.Entity = null;
						previousValue.Quota.Remove(this);
					}
					this._CNCategory.Entity = value;
					if ((value != null))
					{
						value.Quota.Add(this);
						this._CNCategoryID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoryID = default(int);
					}
					this.SendPropertyChanged("CNCategory");
				}
			}
		}
		
		[Association(Name="FK_Quota_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.Quota.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.Quota.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_Quota_Measure", Storage="_Measure", ThisKey="MeasureID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure Measure
		{
			get
			{
				return this._Measure.Entity;
			}
			set
			{
				C_Measure previousValue = this._Measure.Entity;
				if (((previousValue != value) 
							|| (this._Measure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure.Entity = null;
						previousValue.Quota.Remove(this);
					}
					this._Measure.Entity = value;
					if ((value != null))
					{
						value.Quota.Add(this);
						this._MeasureID = value.MeasureID;
					}
					else
					{
						this._MeasureID = default(int);
					}
					this.SendPropertyChanged("Measure");
				}
			}
		}
		
		[Association(Name="FK_Quota_OperationType", Storage="_OperationType", ThisKey="OperationTypeID", OtherKey="OperationTypeID", IsForeignKey=true)]
		public C_OperationType OperationType
		{
			get
			{
				return this._OperationType.Entity;
			}
			set
			{
				C_OperationType previousValue = this._OperationType.Entity;
				if (((previousValue != value) 
							|| (this._OperationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperationType.Entity = null;
						previousValue.Quota.Remove(this);
					}
					this._OperationType.Entity = value;
					if ((value != null))
					{
						value.Quota.Add(this);
						this._OperationTypeID = value.OperationTypeID;
					}
					else
					{
						this._OperationTypeID = default(int);
					}
					this.SendPropertyChanged("OperationType");
				}
			}
		}
		
		[Association(Name="FK_Quota_QuoteCategory", Storage="_QuoteCategory", ThisKey="QuoteCategoryID", OtherKey="QuoteCategoryID", IsForeignKey=true)]
		public C_QuoteCategory QuoteCategory
		{
			get
			{
				return this._QuoteCategory.Entity;
			}
			set
			{
				C_QuoteCategory previousValue = this._QuoteCategory.Entity;
				if (((previousValue != value) 
							|| (this._QuoteCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuoteCategory.Entity = null;
						previousValue.Quota.Remove(this);
					}
					this._QuoteCategory.Entity = value;
					if ((value != null))
					{
						value.Quota.Add(this);
						this._QuoteCategoryID = value.QuoteCategoryID;
					}
					else
					{
						this._QuoteCategoryID = default(int);
					}
					this.SendPropertyChanged("QuoteCategory");
				}
			}
		}
		
		[Association(Name="FK_QuotaDistribution_Quota", Storage="_Distribution", ThisKey="QuotaID", OtherKey="QuotaID", DeleteRule="CASCADE")]
		public EntitySet<QuotaDistribution> Distribution
		{
			get
			{
				return this._Distribution;
			}
			set
			{
				this._Distribution.Assign(value);
			}
		}
		
		[Association(Name="FK_QuotaEvent_Quota", Storage="_QuotaEvent", ThisKey="QuotaID", OtherKey="QuotaID", DeleteRule="CASCADE")]
		public EntitySet<QuotaEvent> QuotaEvent
		{
			get
			{
				return this._QuotaEvent;
			}
			set
			{
				this._QuotaEvent.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Distribution(QuotaDistribution entity)
		{
			this.SendPropertyChanging();
			entity.Quota = this;
		}
		
		private void detach_Distribution(QuotaDistribution entity)
		{
			this.SendPropertyChanging();
			entity.Quota = null;
		}
		
		private void attach_QuotaEvent(QuotaEvent entity)
		{
			this.SendPropertyChanging();
			entity.Quota = this;
		}
		
		private void detach_QuotaEvent(QuotaEvent entity)
		{
			this.SendPropertyChanging();
			entity.Quota = null;
		}
	}
	
	[Table(Name="dbo.QuotaDistribution")]
	public partial class QuotaDistribution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuotaDistributionID;
		
		private int _QuotaID;
		
		private int _CountryGroupID;
		
		private System.Nullable<System.Guid> _ContractorGUID;
		
		private decimal _Volume;
		
		private int _SeqNo;
		
		private EntityRef<Contractor> _Contractor;
		
		private EntityRef<C_CountryGroup> _CountryGroup;
		
		private EntityRef<Quota> _Quota;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuotaDistributionIDChanging(int value);
    partial void OnQuotaDistributionIDChanged();
    partial void OnQuotaIDChanging(int value);
    partial void OnQuotaIDChanged();
    partial void OnCountryGroupIDChanging(int value);
    partial void OnCountryGroupIDChanged();
    partial void OnContractorGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnContractorGUIDChanged();
    partial void OnVolumeChanging(decimal value);
    partial void OnVolumeChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    #endregion
		
		public QuotaDistribution()
		{
			this._Contractor = default(EntityRef<Contractor>);
			this._CountryGroup = default(EntityRef<C_CountryGroup>);
			this._Quota = default(EntityRef<Quota>);
			OnCreated();
		}
		
		[Column(Storage="_QuotaDistributionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuotaDistributionID
		{
			get
			{
				return this._QuotaDistributionID;
			}
			set
			{
				if ((this._QuotaDistributionID != value))
				{
					this.OnQuotaDistributionIDChanging(value);
					this.SendPropertyChanging();
					this._QuotaDistributionID = value;
					this.SendPropertyChanged("QuotaDistributionID");
					this.OnQuotaDistributionIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuotaID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int QuotaID
		{
			get
			{
				return this._QuotaID;
			}
			set
			{
				if ((this._QuotaID != value))
				{
					if (this._Quota.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuotaIDChanging(value);
					this.SendPropertyChanging();
					this._QuotaID = value;
					this.SendPropertyChanged("QuotaID");
					this.OnQuotaIDChanged();
				}
			}
		}
		
		[Column(Storage="_CountryGroupID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CountryGroupID
		{
			get
			{
				return this._CountryGroupID;
			}
			set
			{
				if ((this._CountryGroupID != value))
				{
					if (this._CountryGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryGroupIDChanging(value);
					this.SendPropertyChanging();
					this._CountryGroupID = value;
					this.SendPropertyChanged("CountryGroupID");
					this.OnCountryGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContractorGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorGUID = value;
					this.SendPropertyChanged("ContractorGUID");
					this.OnContractorGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Volume", DbType="Decimal(18,5) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Association(Name="FK_QuotaDistribution_Contractor", Storage="_Contractor", ThisKey="ContractorGUID", OtherKey="ContractorGUID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.QuotaDistribution.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.QuotaDistribution.Add(this);
						this._ContractorGUID = value.ContractorGUID;
					}
					else
					{
						this._ContractorGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		[Association(Name="FK_QuotaDistribution_CountryGroup", Storage="_CountryGroup", ThisKey="CountryGroupID", OtherKey="CountryGroupID", IsForeignKey=true)]
		public C_CountryGroup CountryGroup
		{
			get
			{
				return this._CountryGroup.Entity;
			}
			set
			{
				C_CountryGroup previousValue = this._CountryGroup.Entity;
				if (((previousValue != value) 
							|| (this._CountryGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryGroup.Entity = null;
						previousValue.QuotaDistribution.Remove(this);
					}
					this._CountryGroup.Entity = value;
					if ((value != null))
					{
						value.QuotaDistribution.Add(this);
						this._CountryGroupID = value.CountryGroupID;
					}
					else
					{
						this._CountryGroupID = default(int);
					}
					this.SendPropertyChanged("CountryGroup");
				}
			}
		}
		
		[Association(Name="FK_QuotaDistribution_Quota", Storage="_Quota", ThisKey="QuotaID", OtherKey="QuotaID", IsForeignKey=true, DeleteOnNull=true)]
		public Quota Quota
		{
			get
			{
				return this._Quota.Entity;
			}
			set
			{
				Quota previousValue = this._Quota.Entity;
				if (((previousValue != value) 
							|| (this._Quota.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quota.Entity = null;
						previousValue.Distribution.Remove(this);
					}
					this._Quota.Entity = value;
					if ((value != null))
					{
						value.Distribution.Add(this);
						this._QuotaID = value.QuotaID;
					}
					else
					{
						this._QuotaID = default(int);
					}
					this.SendPropertyChanged("Quota");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.QuotaEvent")]
	public partial class QuotaEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuotaEventID;
		
		private string _Title;
		
		private System.DateTime _LastModifiedDate;
		
		private string _Details;
		
		private int _QuotaID;
		
		private int _LastModifiedUserID;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<Quota> _Quota;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuotaEventIDChanging(int value);
    partial void OnQuotaEventIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnQuotaIDChanging(int value);
    partial void OnQuotaIDChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    #endregion
		
		public QuotaEvent()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Quota = default(EntityRef<Quota>);
			OnCreated();
		}
		
		[Column(Storage="_QuotaEventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuotaEventID
		{
			get
			{
				return this._QuotaEventID;
			}
			set
			{
				if ((this._QuotaEventID != value))
				{
					this.OnQuotaEventIDChanging(value);
					this.SendPropertyChanging();
					this._QuotaEventID = value;
					this.SendPropertyChanged("QuotaEventID");
					this.OnQuotaEventIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Details", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[Column(Storage="_QuotaID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int QuotaID
		{
			get
			{
				return this._QuotaID;
			}
			set
			{
				if ((this._QuotaID != value))
				{
					if (this._Quota.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuotaIDChanging(value);
					this.SendPropertyChanging();
					this._QuotaID = value;
					this.SendPropertyChanged("QuotaID");
					this.OnQuotaIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Association(Name="FK_QuotaEvent_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.QuotaEvent.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.QuotaEvent.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_QuotaEvent_Quota", Storage="_Quota", ThisKey="QuotaID", OtherKey="QuotaID", IsForeignKey=true, DeleteOnNull=true)]
		public Quota Quota
		{
			get
			{
				return this._Quota.Entity;
			}
			set
			{
				Quota previousValue = this._Quota.Entity;
				if (((previousValue != value) 
							|| (this._Quota.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quota.Entity = null;
						previousValue.QuotaEvent.Remove(this);
					}
					this._Quota.Entity = value;
					if ((value != null))
					{
						value.QuotaEvent.Add(this);
						this._QuotaID = value.QuotaID;
					}
					else
					{
						this._QuotaID = default(int);
					}
					this.SendPropertyChanged("Quota");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.QuotaRedistribution")]
	public partial class QuotaRedistribution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuotaRedistributionID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private int _CNCategoryID;
		
		private int _CountryGroupID;
		
		private int _OperationTypeID;
		
		private decimal _RedistributionPercent;
		
		private string _Comment;
		
		private int _QuotaYear;
		
		private EntityRef<C_CNCategory> _CNCategory;
		
		private EntityRef<C_CountryGroup> _CountryGroup;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<C_OperationType> _OperationType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuotaRedistributionIDChanging(int value);
    partial void OnQuotaRedistributionIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnCNCategoryIDChanging(int value);
    partial void OnCNCategoryIDChanged();
    partial void OnCountryGroupIDChanging(int value);
    partial void OnCountryGroupIDChanged();
    partial void OnOperationTypeIDChanging(int value);
    partial void OnOperationTypeIDChanged();
    partial void OnRedistributionPercentChanging(decimal value);
    partial void OnRedistributionPercentChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnQuotaYearChanging(int value);
    partial void OnQuotaYearChanged();
    #endregion
		
		public QuotaRedistribution()
		{
			this._CNCategory = default(EntityRef<C_CNCategory>);
			this._CountryGroup = default(EntityRef<C_CountryGroup>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._OperationType = default(EntityRef<C_OperationType>);
			OnCreated();
		}
		
		[Column(Storage="_QuotaRedistributionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuotaRedistributionID
		{
			get
			{
				return this._QuotaRedistributionID;
			}
			set
			{
				if ((this._QuotaRedistributionID != value))
				{
					this.OnQuotaRedistributionIDChanging(value);
					this.SendPropertyChanging();
					this._QuotaRedistributionID = value;
					this.SendPropertyChanged("QuotaRedistributionID");
					this.OnQuotaRedistributionIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					if (this._CNCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_CountryGroupID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CountryGroupID
		{
			get
			{
				return this._CountryGroupID;
			}
			set
			{
				if ((this._CountryGroupID != value))
				{
					if (this._CountryGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryGroupIDChanging(value);
					this.SendPropertyChanging();
					this._CountryGroupID = value;
					this.SendPropertyChanged("CountryGroupID");
					this.OnCountryGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_OperationTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					if (this._OperationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._OperationTypeID = value;
					this.SendPropertyChanged("OperationTypeID");
					this.OnOperationTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_RedistributionPercent", DbType="Decimal(7,4) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal RedistributionPercent
		{
			get
			{
				return this._RedistributionPercent;
			}
			set
			{
				if ((this._RedistributionPercent != value))
				{
					this.OnRedistributionPercentChanging(value);
					this.SendPropertyChanging();
					this._RedistributionPercent = value;
					this.SendPropertyChanged("RedistributionPercent");
					this.OnRedistributionPercentChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_QuotaYear", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int QuotaYear
		{
			get
			{
				return this._QuotaYear;
			}
			set
			{
				if ((this._QuotaYear != value))
				{
					this.OnQuotaYearChanging(value);
					this.SendPropertyChanging();
					this._QuotaYear = value;
					this.SendPropertyChanged("QuotaYear");
					this.OnQuotaYearChanged();
				}
			}
		}
		
		[Association(Name="FK_QuotaRedistribution_CNCategory", Storage="_CNCategory", ThisKey="CNCategoryID", OtherKey="CNCategoryID", IsForeignKey=true)]
		public C_CNCategory CNCategory
		{
			get
			{
				return this._CNCategory.Entity;
			}
			set
			{
				C_CNCategory previousValue = this._CNCategory.Entity;
				if (((previousValue != value) 
							|| (this._CNCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNCategory.Entity = null;
						previousValue.QuotaRedistribution.Remove(this);
					}
					this._CNCategory.Entity = value;
					if ((value != null))
					{
						value.QuotaRedistribution.Add(this);
						this._CNCategoryID = value.CNCategoryID;
					}
					else
					{
						this._CNCategoryID = default(int);
					}
					this.SendPropertyChanged("CNCategory");
				}
			}
		}
		
		[Association(Name="FK_QuotaRedistribution_CountryGroup", Storage="_CountryGroup", ThisKey="CountryGroupID", OtherKey="CountryGroupID", IsForeignKey=true)]
		public C_CountryGroup CountryGroup
		{
			get
			{
				return this._CountryGroup.Entity;
			}
			set
			{
				C_CountryGroup previousValue = this._CountryGroup.Entity;
				if (((previousValue != value) 
							|| (this._CountryGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryGroup.Entity = null;
						previousValue.QuotaRedistribution.Remove(this);
					}
					this._CountryGroup.Entity = value;
					if ((value != null))
					{
						value.QuotaRedistribution.Add(this);
						this._CountryGroupID = value.CountryGroupID;
					}
					else
					{
						this._CountryGroupID = default(int);
					}
					this.SendPropertyChanged("CountryGroup");
				}
			}
		}
		
		[Association(Name="FK_QuotaRedistribution_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.QuotaRedistribution.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.QuotaRedistribution.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_QuotaRedistribution_OperationType", Storage="_OperationType", ThisKey="OperationTypeID", OtherKey="OperationTypeID", IsForeignKey=true)]
		public C_OperationType OperationType
		{
			get
			{
				return this._OperationType.Entity;
			}
			set
			{
				C_OperationType previousValue = this._OperationType.Entity;
				if (((previousValue != value) 
							|| (this._OperationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperationType.Entity = null;
						previousValue.QuotaRedistribution.Remove(this);
					}
					this._OperationType.Entity = value;
					if ((value != null))
					{
						value.QuotaRedistribution.Add(this);
						this._OperationTypeID = value.OperationTypeID;
					}
					else
					{
						this._OperationTypeID = default(int);
					}
					this.SendPropertyChanged("OperationType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.QuotaUse2Info")]
	public partial class QuotaUse2Info : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuotaYear;
		
		private System.DateTime _LastFillDate;
		
		private System.DateTime _ReportDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuotaYearChanging(int value);
    partial void OnQuotaYearChanged();
    partial void OnLastFillDateChanging(System.DateTime value);
    partial void OnLastFillDateChanged();
    partial void OnReportDateChanging(System.DateTime value);
    partial void OnReportDateChanged();
    #endregion
		
		public QuotaUse2Info()
		{
			OnCreated();
		}
		
		[Column(Storage="_QuotaYear", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuotaYear
		{
			get
			{
				return this._QuotaYear;
			}
			set
			{
				if ((this._QuotaYear != value))
				{
					this.OnQuotaYearChanging(value);
					this.SendPropertyChanging();
					this._QuotaYear = value;
					this.SendPropertyChanged("QuotaYear");
					this.OnQuotaYearChanged();
				}
			}
		}
		
		[Column(Storage="_LastFillDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastFillDate
		{
			get
			{
				return this._LastFillDate;
			}
			set
			{
				if ((this._LastFillDate != value))
				{
					this.OnLastFillDateChanging(value);
					this.SendPropertyChanging();
					this._LastFillDate = value;
					this.SendPropertyChanged("LastFillDate");
					this.OnLastFillDateChanged();
				}
			}
		}
		
		[Column(Storage="_ReportDate", DbType="Date NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime ReportDate
		{
			get
			{
				return this._ReportDate;
			}
			set
			{
				if ((this._ReportDate != value))
				{
					this.OnReportDateChanging(value);
					this.SendPropertyChanging();
					this._ReportDate = value;
					this.SendPropertyChanged("ReportDate");
					this.OnReportDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.R_Blank")]
	public partial class R_Blank
	{
		
		private string _BlankSerial;
		
		private string _BlankNo;
		
		private string _LicNumber;
		
		private System.Nullable<int> _RepresentationID;
		
		private string _RepresentationTitle;
		
		private string _BlankStatus;
		
		private int _BlankActivityID;
		
		private string _BlankStatusSysName;
		
		private System.Guid _BlankGUID;
		
		private System.Nullable<System.DateTime> _BlankStatusDate;
		
		private System.Nullable<System.DateTime> _FormDate;
		
		private string _FormEmployeeTitle;
		
		private string _FormEmployeePost;
		
		private System.Nullable<int> _EmployeeID;
		
		public R_Blank()
		{
		}
		
		[Column(Storage="_BlankSerial", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string BlankSerial
		{
			get
			{
				return this._BlankSerial;
			}
			set
			{
				if ((this._BlankSerial != value))
				{
					this._BlankSerial = value;
				}
			}
		}
		
		[Column(Storage="_BlankNo", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string BlankNo
		{
			get
			{
				return this._BlankNo;
			}
			set
			{
				if ((this._BlankNo != value))
				{
					this._BlankNo = value;
				}
			}
		}
		
		[Column(Storage="_LicNumber", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string LicNumber
		{
			get
			{
				return this._LicNumber;
			}
			set
			{
				if ((this._LicNumber != value))
				{
					this._LicNumber = value;
				}
			}
		}
		
		[Column(Storage="_RepresentationID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					this._RepresentationID = value;
				}
			}
		}
		
		[Column(Storage="_RepresentationTitle", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RepresentationTitle
		{
			get
			{
				return this._RepresentationTitle;
			}
			set
			{
				if ((this._RepresentationTitle != value))
				{
					this._RepresentationTitle = value;
				}
			}
		}
		
		[Column(Storage="_BlankStatus", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string BlankStatus
		{
			get
			{
				return this._BlankStatus;
			}
			set
			{
				if ((this._BlankStatus != value))
				{
					this._BlankStatus = value;
				}
			}
		}
		
		[Column(Storage="_BlankActivityID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int BlankActivityID
		{
			get
			{
				return this._BlankActivityID;
			}
			set
			{
				if ((this._BlankActivityID != value))
				{
					this._BlankActivityID = value;
				}
			}
		}
		
		[Column(Storage="_BlankStatusSysName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string BlankStatusSysName
		{
			get
			{
				return this._BlankStatusSysName;
			}
			set
			{
				if ((this._BlankStatusSysName != value))
				{
					this._BlankStatusSysName = value;
				}
			}
		}
		
		[Column(Storage="_BlankGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid BlankGUID
		{
			get
			{
				return this._BlankGUID;
			}
			set
			{
				if ((this._BlankGUID != value))
				{
					this._BlankGUID = value;
				}
			}
		}
		
		[Column(Storage="_BlankStatusDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BlankStatusDate
		{
			get
			{
				return this._BlankStatusDate;
			}
			set
			{
				if ((this._BlankStatusDate != value))
				{
					this._BlankStatusDate = value;
				}
			}
		}
		
		[Column(Storage="_FormDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FormDate
		{
			get
			{
				return this._FormDate;
			}
			set
			{
				if ((this._FormDate != value))
				{
					this._FormDate = value;
				}
			}
		}
		
		[Column(Storage="_FormEmployeeTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FormEmployeeTitle
		{
			get
			{
				return this._FormEmployeeTitle;
			}
			set
			{
				if ((this._FormEmployeeTitle != value))
				{
					this._FormEmployeeTitle = value;
				}
			}
		}
		
		[Column(Storage="_FormEmployeePost", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FormEmployeePost
		{
			get
			{
				return this._FormEmployeePost;
			}
			set
			{
				if ((this._FormEmployeePost != value))
				{
					this._FormEmployeePost = value;
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this._EmployeeID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.R_FGADocument")]
	public partial class R_FGADocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private int _Source;
		
		private bool _HasFile;
		
		private int _FGAID;
		
		private string _FGATitle;
		
		private System.Nullable<int> _DocumentTypeID;
		
		private string _DocumentName;
		
		private System.Nullable<System.DateTime> _DocumentDate;
		
		private string _DocumentNumber;
		
		private string _FileExtension;
		
		private string _CNCategory;
		
		private string _CN;
		
		private string _Contractor;
		
		private string _OrderDoc;
		
		private string _Representation;
		
		private System.Nullable<int> _FileLength;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnSourceChanging(int value);
    partial void OnSourceChanged();
    partial void OnHasFileChanging(bool value);
    partial void OnHasFileChanged();
    partial void OnFGAIDChanging(int value);
    partial void OnFGAIDChanged();
    partial void OnFGATitleChanging(string value);
    partial void OnFGATitleChanged();
    partial void OnDocumentTypeIDChanging(System.Nullable<int> value);
    partial void OnDocumentTypeIDChanged();
    partial void OnDocumentNameChanging(string value);
    partial void OnDocumentNameChanged();
    partial void OnDocumentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDocumentDateChanged();
    partial void OnDocumentNumberChanging(string value);
    partial void OnDocumentNumberChanged();
    partial void OnFileExtensionChanging(string value);
    partial void OnFileExtensionChanged();
    partial void OnCNCategoryChanging(string value);
    partial void OnCNCategoryChanged();
    partial void OnCNChanging(string value);
    partial void OnCNChanged();
    partial void OnContractorChanging(string value);
    partial void OnContractorChanged();
    partial void OnOrderDocChanging(string value);
    partial void OnOrderDocChanged();
    partial void OnRepresentationChanging(string value);
    partial void OnRepresentationChanged();
    partial void OnFileLengthChanging(System.Nullable<int> value);
    partial void OnFileLengthChanged();
    #endregion
		
		public R_FGADocument()
		{
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Source", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[Column(Storage="_HasFile", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool HasFile
		{
			get
			{
				return this._HasFile;
			}
			set
			{
				if ((this._HasFile != value))
				{
					this.OnHasFileChanging(value);
					this.SendPropertyChanging();
					this._HasFile = value;
					this.SendPropertyChanged("HasFile");
					this.OnHasFileChanged();
				}
			}
		}
		
		[Column(Storage="_FGAID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FGAID
		{
			get
			{
				return this._FGAID;
			}
			set
			{
				if ((this._FGAID != value))
				{
					this.OnFGAIDChanging(value);
					this.SendPropertyChanging();
					this._FGAID = value;
					this.SendPropertyChanged("FGAID");
					this.OnFGAIDChanged();
				}
			}
		}
		
		[Column(Storage="_FGATitle", DbType="NVarChar(1000) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FGATitle
		{
			get
			{
				return this._FGATitle;
			}
			set
			{
				if ((this._FGATitle != value))
				{
					this.OnFGATitleChanging(value);
					this.SendPropertyChanging();
					this._FGATitle = value;
					this.SendPropertyChanged("FGATitle");
					this.OnFGATitleChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DocumentTypeID
		{
			get
			{
				return this._DocumentTypeID;
			}
			set
			{
				if ((this._DocumentTypeID != value))
				{
					this.OnDocumentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentTypeID = value;
					this.SendPropertyChanged("DocumentTypeID");
					this.OnDocumentTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentName", DbType="NVarChar(1000)", UpdateCheck=UpdateCheck.Never)]
		public string DocumentName
		{
			get
			{
				return this._DocumentName;
			}
			set
			{
				if ((this._DocumentName != value))
				{
					this.OnDocumentNameChanging(value);
					this.SendPropertyChanging();
					this._DocumentName = value;
					this.SendPropertyChanged("DocumentName");
					this.OnDocumentNameChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentDate", DbType="Date", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DocumentDate
		{
			get
			{
				return this._DocumentDate;
			}
			set
			{
				if ((this._DocumentDate != value))
				{
					this.OnDocumentDateChanging(value);
					this.SendPropertyChanging();
					this._DocumentDate = value;
					this.SendPropertyChanged("DocumentDate");
					this.OnDocumentDateChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentNumber", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
		public string DocumentNumber
		{
			get
			{
				return this._DocumentNumber;
			}
			set
			{
				if ((this._DocumentNumber != value))
				{
					this.OnDocumentNumberChanging(value);
					this.SendPropertyChanging();
					this._DocumentNumber = value;
					this.SendPropertyChanged("DocumentNumber");
					this.OnDocumentNumberChanged();
				}
			}
		}
		
		[Column(Storage="_FileExtension", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string FileExtension
		{
			get
			{
				return this._FileExtension;
			}
			set
			{
				if ((this._FileExtension != value))
				{
					this.OnFileExtensionChanging(value);
					this.SendPropertyChanging();
					this._FileExtension = value;
					this.SendPropertyChanged("FileExtension");
					this.OnFileExtensionChanged();
				}
			}
		}
		
		[Column(Storage="_CNCategory", DbType="NVarChar(2000)", UpdateCheck=UpdateCheck.Never)]
		public string CNCategory
		{
			get
			{
				return this._CNCategory;
			}
			set
			{
				if ((this._CNCategory != value))
				{
					this.OnCNCategoryChanging(value);
					this.SendPropertyChanging();
					this._CNCategory = value;
					this.SendPropertyChanged("CNCategory");
					this.OnCNCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_CN", DbType="NVarChar(2000)", UpdateCheck=UpdateCheck.Never)]
		public string CN
		{
			get
			{
				return this._CN;
			}
			set
			{
				if ((this._CN != value))
				{
					this.OnCNChanging(value);
					this.SendPropertyChanging();
					this._CN = value;
					this.SendPropertyChanged("CN");
					this.OnCNChanged();
				}
			}
		}
		
		[Column(Storage="_Contractor", DbType="NVarChar(2000)", UpdateCheck=UpdateCheck.Never)]
		public string Contractor
		{
			get
			{
				return this._Contractor;
			}
			set
			{
				if ((this._Contractor != value))
				{
					this.OnContractorChanging(value);
					this.SendPropertyChanging();
					this._Contractor = value;
					this.SendPropertyChanged("Contractor");
					this.OnContractorChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDoc", DbType="NVarChar(2000)", UpdateCheck=UpdateCheck.Never)]
		public string OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				if ((this._OrderDoc != value))
				{
					this.OnOrderDocChanging(value);
					this.SendPropertyChanging();
					this._OrderDoc = value;
					this.SendPropertyChanged("OrderDoc");
					this.OnOrderDocChanged();
				}
			}
		}
		
		[Column(Storage="_Representation", DbType="NVarChar(2000)", UpdateCheck=UpdateCheck.Never)]
		public string Representation
		{
			get
			{
				return this._Representation;
			}
			set
			{
				if ((this._Representation != value))
				{
					this.OnRepresentationChanging(value);
					this.SendPropertyChanging();
					this._Representation = value;
					this.SendPropertyChanged("Representation");
					this.OnRepresentationChanged();
				}
			}
		}
		
		[Column(Storage="_FileLength", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FileLength
		{
			get
			{
				return this._FileLength;
			}
			set
			{
				if ((this._FileLength != value))
				{
					this.OnFileLengthChanging(value);
					this.SendPropertyChanging();
					this._FileLength = value;
					this.SendPropertyChanged("FileLength");
					this.OnFileLengthChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.R_FGADocumentCN")]
	public partial class R_FGADocumentCN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private int _CNID;
		
		private string _Title;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnCNIDChanging(int value);
    partial void OnCNIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public R_FGADocumentCN()
		{
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_CNID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CNID
		{
			get
			{
				return this._CNID;
			}
			set
			{
				if ((this._CNID != value))
				{
					this.OnCNIDChanging(value);
					this.SendPropertyChanging();
					this._CNID = value;
					this.SendPropertyChanged("CNID");
					this.OnCNIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.R_FGADocumentCNCategory")]
	public partial class R_FGADocumentCNCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private int _CNCategoryID;
		
		private string _Title;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnCNCategoryIDChanging(int value);
    partial void OnCNCategoryIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public R_FGADocumentCNCategory()
		{
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					this.OnCNCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CNCategoryID = value;
					this.SendPropertyChanged("CNCategoryID");
					this.OnCNCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.R_FGADocumentContractor")]
	public partial class R_FGADocumentContractor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _ContractorGUID;
		
		private string _Title;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnContractorGUIDChanging(System.Guid value);
    partial void OnContractorGUIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public R_FGADocumentContractor()
		{
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContractorGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					this.OnContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorGUID = value;
					this.SendPropertyChanged("ContractorGUID");
					this.OnContractorGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.R_FGADocumentOrderDoc")]
	public partial class R_FGADocumentOrderDoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _OrderDocGUID;
		
		private System.Nullable<System.DateTime> _FactForm_FormDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnOrderDocGUIDChanging(System.Guid value);
    partial void OnOrderDocGUIDChanged();
    partial void OnFactForm_FormDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFactForm_FormDateChanged();
    #endregion
		
		public R_FGADocumentOrderDoc()
		{
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDocGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_FactForm_FormDate", DbType="Date", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FactForm_FormDate
		{
			get
			{
				return this._FactForm_FormDate;
			}
			set
			{
				if ((this._FactForm_FormDate != value))
				{
					this.OnFactForm_FormDateChanging(value);
					this.SendPropertyChanging();
					this._FactForm_FormDate = value;
					this.SendPropertyChanged("FactForm_FormDate");
					this.OnFactForm_FormDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.R_FGADocumentRepresentation")]
	public partial class R_FGADocumentRepresentation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private int _RepresentationID;
		
		private string _Title;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnRepresentationIDChanging(int value);
    partial void OnRepresentationIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public R_FGADocumentRepresentation()
		{
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_RepresentationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					this.OnRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentationID = value;
					this.SendPropertyChanged("RepresentationID");
					this.OnRepresentationIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.R_OrderDoc_Commodity")]
	public partial class R_OrderDoc_Commodity
	{
		
		private System.Guid _OrderGUID;
		
		private string _OrderDocTitle;
		
		private string _RepresentationTitle;
		
		private string _CNCode;
		
		private string _CNTitle;
		
		private string _Commodity;
		
		private string _ApplicantINN;
		
		private string _ApplicantTitle;
		
		private string _ApplicantAddress;
		
		private System.Nullable<System.DateTime> _TargetFromDate;
		
		private System.Nullable<System.DateTime> _TargetValidity;
		
		private System.Nullable<System.DateTime> _FormDate;
		
		private System.Nullable<decimal> _ResolvedQuantity;
		
		private string _MeasureTitle;
		
		private System.Nullable<int> _CNID;
		
		private System.Guid _ApplicantGUID;
		
		private System.Nullable<int> _MeasureID;
		
		private System.Nullable<int> _RepresentationID;
		
		private System.Nullable<int> _CNCategoryID;
		
		private string _CNCategoryTitle;
		
		private int _ActivityID;
		
		private string _ActivityTitle;
		
		private System.Nullable<int> _Appendix;
		
		private string _FSKNDoc;

        private string _Operation;

        private string _TargetCountry;

        public R_OrderDoc_Commodity()
		{
		}
		
		[Column(Storage="_OrderGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderGUID
		{
			get
			{
				return this._OrderGUID;
			}
			set
			{
				if ((this._OrderGUID != value))
				{
					this._OrderGUID = value;
				}
			}
		}
		
		[Column(Storage="_OrderDocTitle", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string OrderDocTitle
		{
			get
			{
				return this._OrderDocTitle;
			}
			set
			{
				if ((this._OrderDocTitle != value))
				{
					this._OrderDocTitle = value;
				}
			}
		}
		
		[Column(Storage="_RepresentationTitle", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RepresentationTitle
		{
			get
			{
				return this._RepresentationTitle;
			}
			set
			{
				if ((this._RepresentationTitle != value))
				{
					this._RepresentationTitle = value;
				}
			}
		}
		
		[Column(Storage="_CNCode", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CNCode
		{
			get
			{
				return this._CNCode;
			}
			set
			{
				if ((this._CNCode != value))
				{
					this._CNCode = value;
				}
			}
		}
		
		[Column(Storage="_CNTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CNTitle
		{
			get
			{
				return this._CNTitle;
			}
			set
			{
				if ((this._CNTitle != value))
				{
					this._CNTitle = value;
				}
			}
		}
		
		[Column(Storage="_Commodity", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Commodity
		{
			get
			{
				return this._Commodity;
			}
			set
			{
				if ((this._Commodity != value))
				{
					this._Commodity = value;
				}
			}
		}
		
		[Column(Storage="_ApplicantINN", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ApplicantINN
		{
			get
			{
				return this._ApplicantINN;
			}
			set
			{
				if ((this._ApplicantINN != value))
				{
					this._ApplicantINN = value;
				}
			}
		}
		
		[Column(Storage="_ApplicantTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ApplicantTitle
		{
			get
			{
				return this._ApplicantTitle;
			}
			set
			{
				if ((this._ApplicantTitle != value))
				{
					this._ApplicantTitle = value;
				}
			}
		}
		
		[Column(Storage="_ApplicantAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ApplicantAddress
		{
			get
			{
				return this._ApplicantAddress;
			}
			set
			{
				if ((this._ApplicantAddress != value))
				{
					this._ApplicantAddress = value;
				}
			}
		}
		
		[Column(Storage="_TargetFromDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> TargetFromDate
		{
			get
			{
				return this._TargetFromDate;
			}
			set
			{
				if ((this._TargetFromDate != value))
				{
					this._TargetFromDate = value;
				}
			}
		}
		
		[Column(Storage="_TargetValidity", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> TargetValidity
		{
			get
			{
				return this._TargetValidity;
			}
			set
			{
				if ((this._TargetValidity != value))
				{
					this._TargetValidity = value;
				}
			}
		}
		
		[Column(Storage="_FormDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FormDate
		{
			get
			{
				return this._FormDate;
			}
			set
			{
				if ((this._FormDate != value))
				{
					this._FormDate = value;
				}
			}
		}
		
		[Column(Storage="_ResolvedQuantity", DbType="Decimal(20,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedQuantity
		{
			get
			{
				return this._ResolvedQuantity;
			}
			set
			{
				if ((this._ResolvedQuantity != value))
				{
					this._ResolvedQuantity = value;
				}
			}
		}
		
		[Column(Storage="_MeasureTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string MeasureTitle
		{
			get
			{
				return this._MeasureTitle;
			}
			set
			{
				if ((this._MeasureTitle != value))
				{
					this._MeasureTitle = value;
				}
			}
		}
		
		[Column(Storage="_CNID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CNID
		{
			get
			{
				return this._CNID;
			}
			set
			{
				if ((this._CNID != value))
				{
					this._CNID = value;
				}
			}
		}
		
		[Column(Storage="_ApplicantGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ApplicantGUID
		{
			get
			{
				return this._ApplicantGUID;
			}
			set
			{
				if ((this._ApplicantGUID != value))
				{
					this._ApplicantGUID = value;
				}
			}
		}
		
		[Column(Storage="_MeasureID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					this._MeasureID = value;
				}
			}
		}
		
		[Column(Storage="_RepresentationID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					this._RepresentationID = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					this._CNCategoryID = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CNCategoryTitle
		{
			get
			{
				return this._CNCategoryTitle;
			}
			set
			{
				if ((this._CNCategoryTitle != value))
				{
					this._CNCategoryTitle = value;
				}
			}
		}
		
		[Column(Storage="_ActivityID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					this._ActivityID = value;
				}
			}
		}
		
		[Column(Storage="_ActivityTitle", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ActivityTitle
		{
			get
			{
				return this._ActivityTitle;
			}
			set
			{
				if ((this._ActivityTitle != value))
				{
					this._ActivityTitle = value;
				}
			}
		}
		
		[Column(Storage="_Appendix", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Appendix
		{
			get
			{
				return this._Appendix;
			}
			set
			{
				if ((this._Appendix != value))
				{
					this._Appendix = value;
				}
			}
		}
		
		[Column(Storage="_FSKNDoc", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FSKNDoc
		{
			get
			{
				return this._FSKNDoc;
			}
			set
			{
				if ((this._FSKNDoc != value))
				{
					this._FSKNDoc = value;
				}
			}
		}

        [Column(Storage = "_Operation", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string Operation
        {
            get
            {
                return this._Operation;
            }
            set
            {
                if ((this._Operation != value))
                {
                    this._Operation = value;
                }
            }
        }

        [Column(Storage = "_TargetCountry", DbType = "NVarChar(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string TargetCountry
        {
            get
            {
                return this._TargetCountry;
            }
            set
            {
                if ((this._TargetCountry != value))
                {
                    this._TargetCountry = value;
                }
            }
        }
    }

    [Table(Name="dbo.R_OrderDoc_Execution")]
	public partial class R_OrderDoc_Execution
	{
		
		private string _Title;
		
		private System.Nullable<System.Guid> _ApplicantGUID;
		
		private string _ApplicantTitle;
		
		private int _CNCategoryID;
		
		private string _CNCategoryTitle;
		
		private int _LicenseTypeID;
		
		private string _LicenseTypeTitle;
		
		private int _OperationTypeID;
		
		private string _OperationTypeTitle;
		
		private System.Nullable<System.DateTime> _TargetValidity;
		
		private int _RepresentationID;
		
		private string _RepresentationTitle;
		
		private System.Nullable<System.DateTime> _TerminDate;
		
		private System.Nullable<System.DateTime> _LastGivenDate;
		
		private System.Guid _OrderGUID;
		
		private System.Nullable<System.DateTime> _FactForm_FormDate;
		
		private string _TerminDateMonth;
		
		private string _TerminDateOrder;
		
		public R_OrderDoc_Execution()
		{
		}
		
		[Column(Storage="_Title", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_ApplicantGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ApplicantGUID
		{
			get
			{
				return this._ApplicantGUID;
			}
			set
			{
				if ((this._ApplicantGUID != value))
				{
					this._ApplicantGUID = value;
				}
			}
		}
		
		[Column(Storage="_ApplicantTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ApplicantTitle
		{
			get
			{
				return this._ApplicantTitle;
			}
			set
			{
				if ((this._ApplicantTitle != value))
				{
					this._ApplicantTitle = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					this._CNCategoryID = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CNCategoryTitle
		{
			get
			{
				return this._CNCategoryTitle;
			}
			set
			{
				if ((this._CNCategoryTitle != value))
				{
					this._CNCategoryTitle = value;
				}
			}
		}
		
		[Column(Storage="_LicenseTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LicenseTypeID
		{
			get
			{
				return this._LicenseTypeID;
			}
			set
			{
				if ((this._LicenseTypeID != value))
				{
					this._LicenseTypeID = value;
				}
			}
		}
		
		[Column(Storage="_LicenseTypeTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LicenseTypeTitle
		{
			get
			{
				return this._LicenseTypeTitle;
			}
			set
			{
				if ((this._LicenseTypeTitle != value))
				{
					this._LicenseTypeTitle = value;
				}
			}
		}
		
		[Column(Storage="_OperationTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					this._OperationTypeID = value;
				}
			}
		}
		
		[Column(Storage="_OperationTypeTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string OperationTypeTitle
		{
			get
			{
				return this._OperationTypeTitle;
			}
			set
			{
				if ((this._OperationTypeTitle != value))
				{
					this._OperationTypeTitle = value;
				}
			}
		}
		
		[Column(Storage="_TargetValidity", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> TargetValidity
		{
			get
			{
				return this._TargetValidity;
			}
			set
			{
				if ((this._TargetValidity != value))
				{
					this._TargetValidity = value;
				}
			}
		}
		
		[Column(Storage="_RepresentationID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					this._RepresentationID = value;
				}
			}
		}
		
		[Column(Storage="_RepresentationTitle", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RepresentationTitle
		{
			get
			{
				return this._RepresentationTitle;
			}
			set
			{
				if ((this._RepresentationTitle != value))
				{
					this._RepresentationTitle = value;
				}
			}
		}
		
		[Column(Storage="_TerminDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> TerminDate
		{
			get
			{
				return this._TerminDate;
			}
			set
			{
				if ((this._TerminDate != value))
				{
					this._TerminDate = value;
				}
			}
		}
		
		[Column(Storage="_LastGivenDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastGivenDate
		{
			get
			{
				return this._LastGivenDate;
			}
			set
			{
				if ((this._LastGivenDate != value))
				{
					this._LastGivenDate = value;
				}
			}
		}
		
		[Column(Storage="_OrderGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderGUID
		{
			get
			{
				return this._OrderGUID;
			}
			set
			{
				if ((this._OrderGUID != value))
				{
					this._OrderGUID = value;
				}
			}
		}
		
		[Column(Storage="_FactForm_FormDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FactForm_FormDate
		{
			get
			{
				return this._FactForm_FormDate;
			}
			set
			{
				if ((this._FactForm_FormDate != value))
				{
					this._FactForm_FormDate = value;
				}
			}
		}
		
		[Column(Storage="_TerminDateMonth", DbType="NVarChar(6)", UpdateCheck=UpdateCheck.Never)]
		public string TerminDateMonth
		{
			get
			{
				return this._TerminDateMonth;
			}
			set
			{
				if ((this._TerminDateMonth != value))
				{
					this._TerminDateMonth = value;
				}
			}
		}
		
		[Column(Storage="_TerminDateOrder", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string TerminDateOrder
		{
			get
			{
				return this._TerminDateOrder;
			}
			set
			{
				if ((this._TerminDateOrder != value))
				{
					this._TerminDateOrder = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.R_OrderDoc_RequestsLicenses")]
	public partial class R_OrderDoc_RequestsLicenses
	{
		
		private System.Guid _OrderGUID;
		
		private string _DocumentNumber;
		
		private string _BlankNumber;
		
		private string _DocumentStatus;
		
		private int _ActivityID;
		
		private System.Nullable<System.DateTime> _DocumentStatusDate;
		
		private string _ApplicantINN;
		
		private string _ApplicantTitle;
		
		private System.Nullable<System.DateTime> _ChanceryRegDate;
		
		private System.Nullable<System.DateTime> _RegDate;
		
		private System.Nullable<System.DateTime> _FormDate;
		
		private System.Nullable<System.DateTime> _SignDate;
		
		private System.Nullable<System.DateTime> _IssueDate;
		
		private System.Nullable<System.DateTime> _TargetFromDate;
		
		private System.Nullable<System.DateTime> _TargetValidity;
		
		private System.Nullable<decimal> _ResolvedQuantity;
		
		private System.Nullable<decimal> _AddResolvedQuantity;
		
		private System.Nullable<decimal> _FactShippedQuantity;
		
		private System.Nullable<int> _CNCategoryID;
		
		private string _CNCategoryDisplayName;
		
		private System.Nullable<int> _RepresentationID;
		
		private string _RepresentationTitle;
		
		private System.Nullable<int> _LicenseTypeID;
		
		private System.Nullable<int> _OperationTypeID;
		
		private string _CNCode;
		
		private string _OrderType;
		
		private System.Nullable<decimal> _StatisticCost;
		
		private System.Nullable<int> _EmployeeID;
		
		private string _EmployeeName;
		
		private string _OperationType;
		
		private string _LicenseType;
		
		private string _MeasureTitle;
		
		private string _Measure;
		
		private string _AddMeasure;
		
		private string _FactShippedMeasure;
		
		private string _Country1;
		
		private string _Country2;
		
		private string _Country3;
		
		private System.Nullable<int> _CNID;
		
		private System.Nullable<int> _Country1ID;
		
		private string _FederalDistrict;
		
		private string _RegDateString;
		
		private string _RegDateMonth;
		
		private string _RegDateQuarter;
		
		private string _RegDateOrder;
		
		private string _FormDateString;
		
		private string _FormDateMonth;
		
		private string _FormDateQuarter;
		
		private string _FormDateOrder;
		
		private string _ForeignAuthorizationNo;
		
		private System.Nullable<System.DateTime> _ForeignAuthorizationDate;
		
		private System.Nullable<decimal> _CustomsDeclarationWeight;

        private string _RFSubject;

        public R_OrderDoc_RequestsLicenses()
		{
		}

        [Column(Storage = "_RFSubject", DbType = "NVarChar(32)", UpdateCheck = UpdateCheck.Never)]
        public string RFSubject
        {
            get
            {
                return this._RFSubject;
            }
            set
            {
                if ((this._RFSubject != value))
                {
                    this._RFSubject = value;
                }
            }
        }

        [Column(Storage="_OrderGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderGUID
		{
			get
			{
				return this._OrderGUID;
			}
			set
			{
				if ((this._OrderGUID != value))
				{
					this._OrderGUID = value;
				}
			}
		}
		
		[Column(Storage="_DocumentNumber", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string DocumentNumber
		{
			get
			{
				return this._DocumentNumber;
			}
			set
			{
				if ((this._DocumentNumber != value))
				{
					this._DocumentNumber = value;
				}
			}
		}
		
		[Column(Storage="_BlankNumber", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BlankNumber
		{
			get
			{
				return this._BlankNumber;
			}
			set
			{
				if ((this._BlankNumber != value))
				{
					this._BlankNumber = value;
				}
			}
		}
		
		[Column(Storage="_DocumentStatus", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string DocumentStatus
		{
			get
			{
				return this._DocumentStatus;
			}
			set
			{
				if ((this._DocumentStatus != value))
				{
					this._DocumentStatus = value;
				}
			}
		}
		
		[Column(Storage="_ActivityID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					this._ActivityID = value;
				}
			}
		}
		
		[Column(Storage="_DocumentStatusDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DocumentStatusDate
		{
			get
			{
				return this._DocumentStatusDate;
			}
			set
			{
				if ((this._DocumentStatusDate != value))
				{
					this._DocumentStatusDate = value;
				}
			}
		}
		
		[Column(Storage="_ApplicantINN", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ApplicantINN
		{
			get
			{
				return this._ApplicantINN;
			}
			set
			{
				if ((this._ApplicantINN != value))
				{
					this._ApplicantINN = value;
				}
			}
		}
		
		[Column(Storage="_ApplicantTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ApplicantTitle
		{
			get
			{
				return this._ApplicantTitle;
			}
			set
			{
				if ((this._ApplicantTitle != value))
				{
					this._ApplicantTitle = value;
				}
			}
		}
		
		[Column(Storage="_ChanceryRegDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ChanceryRegDate
		{
			get
			{
				return this._ChanceryRegDate;
			}
			set
			{
				if ((this._ChanceryRegDate != value))
				{
					this._ChanceryRegDate = value;
				}
			}
		}
		
		[Column(Storage="_RegDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this._RegDate = value;
				}
			}
		}
		
		[Column(Storage="_FormDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FormDate
		{
			get
			{
				return this._FormDate;
			}
			set
			{
				if ((this._FormDate != value))
				{
					this._FormDate = value;
				}
			}
		}
		
		[Column(Storage="_SignDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this._SignDate = value;
				}
			}
		}
		
		[Column(Storage="_IssueDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this._IssueDate = value;
				}
			}
		}
		
		[Column(Storage="_TargetFromDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> TargetFromDate
		{
			get
			{
				return this._TargetFromDate;
			}
			set
			{
				if ((this._TargetFromDate != value))
				{
					this._TargetFromDate = value;
				}
			}
		}
		
		[Column(Storage="_TargetValidity", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> TargetValidity
		{
			get
			{
				return this._TargetValidity;
			}
			set
			{
				if ((this._TargetValidity != value))
				{
					this._TargetValidity = value;
				}
			}
		}
		
		[Column(Storage="_ResolvedQuantity", DbType="Decimal(20,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedQuantity
		{
			get
			{
				return this._ResolvedQuantity;
			}
			set
			{
				if ((this._ResolvedQuantity != value))
				{
					this._ResolvedQuantity = value;
				}
			}
		}
		
		[Column(Storage="_AddResolvedQuantity", DbType="Decimal(20,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> AddResolvedQuantity
		{
			get
			{
				return this._AddResolvedQuantity;
			}
			set
			{
				if ((this._AddResolvedQuantity != value))
				{
					this._AddResolvedQuantity = value;
				}
			}
		}
		
		[Column(Storage="_FactShippedQuantity", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> FactShippedQuantity
		{
			get
			{
				return this._FactShippedQuantity;
			}
			set
			{
				if ((this._FactShippedQuantity != value))
				{
					this._FactShippedQuantity = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					this._CNCategoryID = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryDisplayName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CNCategoryDisplayName
		{
			get
			{
				return this._CNCategoryDisplayName;
			}
			set
			{
				if ((this._CNCategoryDisplayName != value))
				{
					this._CNCategoryDisplayName = value;
				}
			}
		}
		
		[Column(Storage="_RepresentationID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					this._RepresentationID = value;
				}
			}
		}
		
		[Column(Storage="_RepresentationTitle", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RepresentationTitle
		{
			get
			{
				return this._RepresentationTitle;
			}
			set
			{
				if ((this._RepresentationTitle != value))
				{
					this._RepresentationTitle = value;
				}
			}
		}
		
		[Column(Storage="_LicenseTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> LicenseTypeID
		{
			get
			{
				return this._LicenseTypeID;
			}
			set
			{
				if ((this._LicenseTypeID != value))
				{
					this._LicenseTypeID = value;
				}
			}
		}
		
		[Column(Storage="_OperationTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					this._OperationTypeID = value;
				}
			}
		}
		
		[Column(Storage="_CNCode", DbType="NVarChar(2059)", UpdateCheck=UpdateCheck.Never)]
		public string CNCode
		{
			get
			{
				return this._CNCode;
			}
			set
			{
				if ((this._CNCode != value))
				{
					this._CNCode = value;
				}
			}
		}
		
		[Column(Storage="_OrderType", DbType="VarChar(9) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string OrderType
		{
			get
			{
				return this._OrderType;
			}
			set
			{
				if ((this._OrderType != value))
				{
					this._OrderType = value;
				}
			}
		}
		
		[Column(Storage="_StatisticCost", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> StatisticCost
		{
			get
			{
				return this._StatisticCost;
			}
			set
			{
				if ((this._StatisticCost != value))
				{
					this._StatisticCost = value;
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this._EmployeeID = value;
				}
			}
		}
		
		[Column(Storage="_EmployeeName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this._EmployeeName = value;
				}
			}
		}
		
		[Column(Storage="_OperationType", DbType="VarChar(7) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string OperationType
		{
			get
			{
				return this._OperationType;
			}
			set
			{
				if ((this._OperationType != value))
				{
					this._OperationType = value;
				}
			}
		}
		
		[Column(Storage="_LicenseType", DbType="VarChar(14) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LicenseType
		{
			get
			{
				return this._LicenseType;
			}
			set
			{
				if ((this._LicenseType != value))
				{
					this._LicenseType = value;
				}
			}
		}
		
		[Column(Storage="_MeasureTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string MeasureTitle
		{
			get
			{
				return this._MeasureTitle;
			}
			set
			{
				if ((this._MeasureTitle != value))
				{
					this._MeasureTitle = value;
				}
			}
		}
		
		[Column(Storage="_Measure", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Measure
		{
			get
			{
				return this._Measure;
			}
			set
			{
				if ((this._Measure != value))
				{
					this._Measure = value;
				}
			}
		}
		
		[Column(Storage="_AddMeasure", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string AddMeasure
		{
			get
			{
				return this._AddMeasure;
			}
			set
			{
				if ((this._AddMeasure != value))
				{
					this._AddMeasure = value;
				}
			}
		}
		
		[Column(Storage="_FactShippedMeasure", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string FactShippedMeasure
		{
			get
			{
				return this._FactShippedMeasure;
			}
			set
			{
				if ((this._FactShippedMeasure != value))
				{
					this._FactShippedMeasure = value;
				}
			}
		}
		
		[Column(Storage="_Country1", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Country1
		{
			get
			{
				return this._Country1;
			}
			set
			{
				if ((this._Country1 != value))
				{
					this._Country1 = value;
				}
			}
		}
		
		[Column(Storage="_Country2", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Country2
		{
			get
			{
				return this._Country2;
			}
			set
			{
				if ((this._Country2 != value))
				{
					this._Country2 = value;
				}
			}
		}
		
		[Column(Storage="_Country3", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Country3
		{
			get
			{
				return this._Country3;
			}
			set
			{
				if ((this._Country3 != value))
				{
					this._Country3 = value;
				}
			}
		}
		
		[Column(Storage="_CNID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CNID
		{
			get
			{
				return this._CNID;
			}
			set
			{
				if ((this._CNID != value))
				{
					this._CNID = value;
				}
			}
		}
		
		[Column(Storage="_Country1ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Country1ID
		{
			get
			{
				return this._Country1ID;
			}
			set
			{
				if ((this._Country1ID != value))
				{
					this._Country1ID = value;
				}
			}
		}
		
		[Column(Storage="_FederalDistrict", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string FederalDistrict
		{
			get
			{
				return this._FederalDistrict;
			}
			set
			{
				if ((this._FederalDistrict != value))
				{
					this._FederalDistrict = value;
				}
			}
		}
		
		[Column(Storage="_RegDateString", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string RegDateString
		{
			get
			{
				return this._RegDateString;
			}
			set
			{
				if ((this._RegDateString != value))
				{
					this._RegDateString = value;
				}
			}
		}
		
		[Column(Storage="_RegDateMonth", DbType="NVarChar(22)", UpdateCheck=UpdateCheck.Never)]
		public string RegDateMonth
		{
			get
			{
				return this._RegDateMonth;
			}
			set
			{
				if ((this._RegDateMonth != value))
				{
					this._RegDateMonth = value;
				}
			}
		}
		
		[Column(Storage="_RegDateQuarter", DbType="NVarChar(40)", UpdateCheck=UpdateCheck.Never)]
		public string RegDateQuarter
		{
			get
			{
				return this._RegDateQuarter;
			}
			set
			{
				if ((this._RegDateQuarter != value))
				{
					this._RegDateQuarter = value;
				}
			}
		}
		
		[Column(Storage="_RegDateOrder", DbType="NVarChar(24)", UpdateCheck=UpdateCheck.Never)]
		public string RegDateOrder
		{
			get
			{
				return this._RegDateOrder;
			}
			set
			{
				if ((this._RegDateOrder != value))
				{
					this._RegDateOrder = value;
				}
			}
		}
		
		[Column(Storage="_FormDateString", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string FormDateString
		{
			get
			{
				return this._FormDateString;
			}
			set
			{
				if ((this._FormDateString != value))
				{
					this._FormDateString = value;
				}
			}
		}
		
		[Column(Storage="_FormDateMonth", DbType="NVarChar(22)", UpdateCheck=UpdateCheck.Never)]
		public string FormDateMonth
		{
			get
			{
				return this._FormDateMonth;
			}
			set
			{
				if ((this._FormDateMonth != value))
				{
					this._FormDateMonth = value;
				}
			}
		}
		
		[Column(Storage="_FormDateQuarter", DbType="NVarChar(40)", UpdateCheck=UpdateCheck.Never)]
		public string FormDateQuarter
		{
			get
			{
				return this._FormDateQuarter;
			}
			set
			{
				if ((this._FormDateQuarter != value))
				{
					this._FormDateQuarter = value;
				}
			}
		}
		
		[Column(Storage="_FormDateOrder", DbType="NVarChar(24)", UpdateCheck=UpdateCheck.Never)]
		public string FormDateOrder
		{
			get
			{
				return this._FormDateOrder;
			}
			set
			{
				if ((this._FormDateOrder != value))
				{
					this._FormDateOrder = value;
				}
			}
		}
		
		[Column(Storage="_ForeignAuthorizationNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ForeignAuthorizationNo
		{
			get
			{
				return this._ForeignAuthorizationNo;
			}
			set
			{
				if ((this._ForeignAuthorizationNo != value))
				{
					this._ForeignAuthorizationNo = value;
				}
			}
		}
		
		[Column(Storage="_ForeignAuthorizationDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ForeignAuthorizationDate
		{
			get
			{
				return this._ForeignAuthorizationDate;
			}
			set
			{
				if ((this._ForeignAuthorizationDate != value))
				{
					this._ForeignAuthorizationDate = value;
				}
			}
		}
		
		[Column(Storage="_CustomsDeclarationWeight", DbType="Decimal(38,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> CustomsDeclarationWeight
		{
			get
			{
				return this._CustomsDeclarationWeight;
			}
			set
			{
				if ((this._CustomsDeclarationWeight != value))
				{
					this._CustomsDeclarationWeight = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.R_OrderDoc_RequestsLicenses_Backup2014_11_20")]
	public partial class R_OrderDoc_RequestsLicenses_Backup2014_11_20
	{
		
		private System.Guid _OrderGUID;
		
		private string _DocumentNumber;
		
		private string _BlankNumber;
		
		private string _DocumentStatus;
		
		private int _ActivityID;
		
		private System.Nullable<System.DateTime> _DocumentStatusDate;
		
		private string _ApplicantINN;
		
		private string _ApplicantTitle;
		
		private System.Nullable<System.DateTime> _ChanceryRegDate;
		
		private System.Nullable<System.DateTime> _RegDate;
		
		private System.Nullable<System.DateTime> _FormDate;
		
		private System.Nullable<System.DateTime> _SignDate;
		
		private System.Nullable<System.DateTime> _IssueDate;
		
		private System.Nullable<System.DateTime> _TargetFromDate;
		
		private System.Nullable<System.DateTime> _TargetValidity;
		
		private System.Nullable<decimal> _ResolvedQuantity;
		
		private System.Nullable<decimal> _AddResolvedQuantity;
		
		private System.Nullable<decimal> _FactShippedQuantity;
		
		private System.Nullable<int> _CNCategoryID;
		
		private string _CNCategoryDisplayName;
		
		private System.Nullable<int> _RepresentationID;
		
		private string _RepresentationTitle;
		
		private System.Nullable<int> _LicenseTypeID;
		
		private System.Nullable<int> _OperationTypeID;
		
		private string _CNCode;
		
		private string _OrderType;
		
		private System.Nullable<decimal> _StatisticCost;
		
		private System.Nullable<int> _EmployeeID;
		
		private string _EmployeeName;
		
		private string _OperationType;
		
		private string _LicenseType;
		
		private string _MeasureTitle;
		
		private string _Measure;
		
		private string _AddMeasure;
		
		private string _FactShippedMeasure;
		
		private string _Country1;
		
		private string _Country2;
		
		private string _Country3;
		
		private System.Nullable<int> _CNID;
		
		private System.Nullable<int> _Country1ID;
		
		private string _RegDateString;
		
		private string _RegDateMonth;
		
		private string _RegDateQuarter;
		
		private string _RegDateOrder;
		
		private string _FormDateString;
		
		private string _FormDateMonth;
		
		private string _FormDateQuarter;
		
		private string _FormDateOrder;
		
		private string _ForeignAuthorizationNo;
		
		private System.Nullable<System.DateTime> _ForeignAuthorizationDate;
		
		public R_OrderDoc_RequestsLicenses_Backup2014_11_20()
		{
		}
		
		[Column(Storage="_OrderGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderGUID
		{
			get
			{
				return this._OrderGUID;
			}
			set
			{
				if ((this._OrderGUID != value))
				{
					this._OrderGUID = value;
				}
			}
		}
		
		[Column(Storage="_DocumentNumber", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string DocumentNumber
		{
			get
			{
				return this._DocumentNumber;
			}
			set
			{
				if ((this._DocumentNumber != value))
				{
					this._DocumentNumber = value;
				}
			}
		}
		
		[Column(Storage="_BlankNumber", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BlankNumber
		{
			get
			{
				return this._BlankNumber;
			}
			set
			{
				if ((this._BlankNumber != value))
				{
					this._BlankNumber = value;
				}
			}
		}
		
		[Column(Storage="_DocumentStatus", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string DocumentStatus
		{
			get
			{
				return this._DocumentStatus;
			}
			set
			{
				if ((this._DocumentStatus != value))
				{
					this._DocumentStatus = value;
				}
			}
		}
		
		[Column(Storage="_ActivityID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					this._ActivityID = value;
				}
			}
		}
		
		[Column(Storage="_DocumentStatusDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DocumentStatusDate
		{
			get
			{
				return this._DocumentStatusDate;
			}
			set
			{
				if ((this._DocumentStatusDate != value))
				{
					this._DocumentStatusDate = value;
				}
			}
		}
		
		[Column(Storage="_ApplicantINN", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ApplicantINN
		{
			get
			{
				return this._ApplicantINN;
			}
			set
			{
				if ((this._ApplicantINN != value))
				{
					this._ApplicantINN = value;
				}
			}
		}
		
		[Column(Storage="_ApplicantTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ApplicantTitle
		{
			get
			{
				return this._ApplicantTitle;
			}
			set
			{
				if ((this._ApplicantTitle != value))
				{
					this._ApplicantTitle = value;
				}
			}
		}
		
		[Column(Storage="_ChanceryRegDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ChanceryRegDate
		{
			get
			{
				return this._ChanceryRegDate;
			}
			set
			{
				if ((this._ChanceryRegDate != value))
				{
					this._ChanceryRegDate = value;
				}
			}
		}
		
		[Column(Storage="_RegDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this._RegDate = value;
				}
			}
		}
		
		[Column(Storage="_FormDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FormDate
		{
			get
			{
				return this._FormDate;
			}
			set
			{
				if ((this._FormDate != value))
				{
					this._FormDate = value;
				}
			}
		}
		
		[Column(Storage="_SignDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this._SignDate = value;
				}
			}
		}
		
		[Column(Storage="_IssueDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this._IssueDate = value;
				}
			}
		}
		
		[Column(Storage="_TargetFromDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> TargetFromDate
		{
			get
			{
				return this._TargetFromDate;
			}
			set
			{
				if ((this._TargetFromDate != value))
				{
					this._TargetFromDate = value;
				}
			}
		}
		
		[Column(Storage="_TargetValidity", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> TargetValidity
		{
			get
			{
				return this._TargetValidity;
			}
			set
			{
				if ((this._TargetValidity != value))
				{
					this._TargetValidity = value;
				}
			}
		}
		
		[Column(Storage="_ResolvedQuantity", DbType="Decimal(20,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedQuantity
		{
			get
			{
				return this._ResolvedQuantity;
			}
			set
			{
				if ((this._ResolvedQuantity != value))
				{
					this._ResolvedQuantity = value;
				}
			}
		}
		
		[Column(Storage="_AddResolvedQuantity", DbType="Decimal(20,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> AddResolvedQuantity
		{
			get
			{
				return this._AddResolvedQuantity;
			}
			set
			{
				if ((this._AddResolvedQuantity != value))
				{
					this._AddResolvedQuantity = value;
				}
			}
		}
		
		[Column(Storage="_FactShippedQuantity", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> FactShippedQuantity
		{
			get
			{
				return this._FactShippedQuantity;
			}
			set
			{
				if ((this._FactShippedQuantity != value))
				{
					this._FactShippedQuantity = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					this._CNCategoryID = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryDisplayName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CNCategoryDisplayName
		{
			get
			{
				return this._CNCategoryDisplayName;
			}
			set
			{
				if ((this._CNCategoryDisplayName != value))
				{
					this._CNCategoryDisplayName = value;
				}
			}
		}
		
		[Column(Storage="_RepresentationID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					this._RepresentationID = value;
				}
			}
		}
		
		[Column(Storage="_RepresentationTitle", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RepresentationTitle
		{
			get
			{
				return this._RepresentationTitle;
			}
			set
			{
				if ((this._RepresentationTitle != value))
				{
					this._RepresentationTitle = value;
				}
			}
		}
		
		[Column(Storage="_LicenseTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> LicenseTypeID
		{
			get
			{
				return this._LicenseTypeID;
			}
			set
			{
				if ((this._LicenseTypeID != value))
				{
					this._LicenseTypeID = value;
				}
			}
		}
		
		[Column(Storage="_OperationTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					this._OperationTypeID = value;
				}
			}
		}
		
		[Column(Storage="_CNCode", DbType="NVarChar(2059)", UpdateCheck=UpdateCheck.Never)]
		public string CNCode
		{
			get
			{
				return this._CNCode;
			}
			set
			{
				if ((this._CNCode != value))
				{
					this._CNCode = value;
				}
			}
		}
		
		[Column(Storage="_OrderType", DbType="VarChar(9) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string OrderType
		{
			get
			{
				return this._OrderType;
			}
			set
			{
				if ((this._OrderType != value))
				{
					this._OrderType = value;
				}
			}
		}
		
		[Column(Storage="_StatisticCost", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> StatisticCost
		{
			get
			{
				return this._StatisticCost;
			}
			set
			{
				if ((this._StatisticCost != value))
				{
					this._StatisticCost = value;
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this._EmployeeID = value;
				}
			}
		}
		
		[Column(Storage="_EmployeeName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this._EmployeeName = value;
				}
			}
		}
		
		[Column(Storage="_OperationType", DbType="VarChar(7) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string OperationType
		{
			get
			{
				return this._OperationType;
			}
			set
			{
				if ((this._OperationType != value))
				{
					this._OperationType = value;
				}
			}
		}
		
		[Column(Storage="_LicenseType", DbType="VarChar(14) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LicenseType
		{
			get
			{
				return this._LicenseType;
			}
			set
			{
				if ((this._LicenseType != value))
				{
					this._LicenseType = value;
				}
			}
		}
		
		[Column(Storage="_MeasureTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string MeasureTitle
		{
			get
			{
				return this._MeasureTitle;
			}
			set
			{
				if ((this._MeasureTitle != value))
				{
					this._MeasureTitle = value;
				}
			}
		}
		
		[Column(Storage="_Measure", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Measure
		{
			get
			{
				return this._Measure;
			}
			set
			{
				if ((this._Measure != value))
				{
					this._Measure = value;
				}
			}
		}
		
		[Column(Storage="_AddMeasure", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string AddMeasure
		{
			get
			{
				return this._AddMeasure;
			}
			set
			{
				if ((this._AddMeasure != value))
				{
					this._AddMeasure = value;
				}
			}
		}
		
		[Column(Storage="_FactShippedMeasure", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string FactShippedMeasure
		{
			get
			{
				return this._FactShippedMeasure;
			}
			set
			{
				if ((this._FactShippedMeasure != value))
				{
					this._FactShippedMeasure = value;
				}
			}
		}
		
		[Column(Storage="_Country1", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Country1
		{
			get
			{
				return this._Country1;
			}
			set
			{
				if ((this._Country1 != value))
				{
					this._Country1 = value;
				}
			}
		}
		
		[Column(Storage="_Country2", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Country2
		{
			get
			{
				return this._Country2;
			}
			set
			{
				if ((this._Country2 != value))
				{
					this._Country2 = value;
				}
			}
		}
		
		[Column(Storage="_Country3", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Country3
		{
			get
			{
				return this._Country3;
			}
			set
			{
				if ((this._Country3 != value))
				{
					this._Country3 = value;
				}
			}
		}
		
		[Column(Storage="_CNID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CNID
		{
			get
			{
				return this._CNID;
			}
			set
			{
				if ((this._CNID != value))
				{
					this._CNID = value;
				}
			}
		}
		
		[Column(Storage="_Country1ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Country1ID
		{
			get
			{
				return this._Country1ID;
			}
			set
			{
				if ((this._Country1ID != value))
				{
					this._Country1ID = value;
				}
			}
		}
		
		[Column(Storage="_RegDateString", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string RegDateString
		{
			get
			{
				return this._RegDateString;
			}
			set
			{
				if ((this._RegDateString != value))
				{
					this._RegDateString = value;
				}
			}
		}
		
		[Column(Storage="_RegDateMonth", DbType="NVarChar(22)", UpdateCheck=UpdateCheck.Never)]
		public string RegDateMonth
		{
			get
			{
				return this._RegDateMonth;
			}
			set
			{
				if ((this._RegDateMonth != value))
				{
					this._RegDateMonth = value;
				}
			}
		}
		
		[Column(Storage="_RegDateQuarter", DbType="NVarChar(40)", UpdateCheck=UpdateCheck.Never)]
		public string RegDateQuarter
		{
			get
			{
				return this._RegDateQuarter;
			}
			set
			{
				if ((this._RegDateQuarter != value))
				{
					this._RegDateQuarter = value;
				}
			}
		}
		
		[Column(Storage="_RegDateOrder", DbType="NVarChar(24)", UpdateCheck=UpdateCheck.Never)]
		public string RegDateOrder
		{
			get
			{
				return this._RegDateOrder;
			}
			set
			{
				if ((this._RegDateOrder != value))
				{
					this._RegDateOrder = value;
				}
			}
		}
		
		[Column(Storage="_FormDateString", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string FormDateString
		{
			get
			{
				return this._FormDateString;
			}
			set
			{
				if ((this._FormDateString != value))
				{
					this._FormDateString = value;
				}
			}
		}
		
		[Column(Storage="_FormDateMonth", DbType="NVarChar(22)", UpdateCheck=UpdateCheck.Never)]
		public string FormDateMonth
		{
			get
			{
				return this._FormDateMonth;
			}
			set
			{
				if ((this._FormDateMonth != value))
				{
					this._FormDateMonth = value;
				}
			}
		}
		
		[Column(Storage="_FormDateQuarter", DbType="NVarChar(40)", UpdateCheck=UpdateCheck.Never)]
		public string FormDateQuarter
		{
			get
			{
				return this._FormDateQuarter;
			}
			set
			{
				if ((this._FormDateQuarter != value))
				{
					this._FormDateQuarter = value;
				}
			}
		}
		
		[Column(Storage="_FormDateOrder", DbType="NVarChar(24)", UpdateCheck=UpdateCheck.Never)]
		public string FormDateOrder
		{
			get
			{
				return this._FormDateOrder;
			}
			set
			{
				if ((this._FormDateOrder != value))
				{
					this._FormDateOrder = value;
				}
			}
		}
		
		[Column(Storage="_ForeignAuthorizationNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ForeignAuthorizationNo
		{
			get
			{
				return this._ForeignAuthorizationNo;
			}
			set
			{
				if ((this._ForeignAuthorizationNo != value))
				{
					this._ForeignAuthorizationNo = value;
				}
			}
		}
		
		[Column(Storage="_ForeignAuthorizationDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ForeignAuthorizationDate
		{
			get
			{
				return this._ForeignAuthorizationDate;
			}
			set
			{
				if ((this._ForeignAuthorizationDate != value))
				{
					this._ForeignAuthorizationDate = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.R_OrderDocDeviation")]
	public partial class R_OrderDocDeviation
	{
		
		private int _OrderDocDeviationID;
		
		private System.DateTime _RegDate;
		
		private System.Nullable<int> _RepresentationID;
		
		private string _RepresentationTitle;
		
		private string _CNCategoryTitle;
		
		private System.Nullable<int> _CNCategoryID;
		
		private System.Nullable<int> _LicenseTypeID;
		
		private System.DateTime _MaxFormDate;
		
		private string _EmployeeTitle;
		
		private string _RequestTitle;
		
		private string _LicenseTitle;
		
		private string _ActivityTitle;
		
		private System.Nullable<System.DateTime> _RequestRegDate;
		
		private System.Nullable<System.DateTime> _ApproveRejectDate;
		
		private string _ApproveRejectActivitySysName;
		
		private string _LicenseType;
		
		private System.Nullable<System.DateTime> _ActualFormDate;
		
		private int _Deviation;
		
		private string _DeviationTitle;
		
		private System.Guid _OrderGUID;
		
		public R_OrderDocDeviation()
		{
		}
		
		[Column(Storage="_OrderDocDeviationID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OrderDocDeviationID
		{
			get
			{
				return this._OrderDocDeviationID;
			}
			set
			{
				if ((this._OrderDocDeviationID != value))
				{
					this._OrderDocDeviationID = value;
				}
			}
		}
		
		[Column(Storage="_RegDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this._RegDate = value;
				}
			}
		}
		
		[Column(Storage="_RepresentationID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					this._RepresentationID = value;
				}
			}
		}
		
		[Column(Storage="_RepresentationTitle", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RepresentationTitle
		{
			get
			{
				return this._RepresentationTitle;
			}
			set
			{
				if ((this._RepresentationTitle != value))
				{
					this._RepresentationTitle = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CNCategoryTitle
		{
			get
			{
				return this._CNCategoryTitle;
			}
			set
			{
				if ((this._CNCategoryTitle != value))
				{
					this._CNCategoryTitle = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					this._CNCategoryID = value;
				}
			}
		}
		
		[Column(Storage="_LicenseTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> LicenseTypeID
		{
			get
			{
				return this._LicenseTypeID;
			}
			set
			{
				if ((this._LicenseTypeID != value))
				{
					this._LicenseTypeID = value;
				}
			}
		}
		
		[Column(Storage="_MaxFormDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime MaxFormDate
		{
			get
			{
				return this._MaxFormDate;
			}
			set
			{
				if ((this._MaxFormDate != value))
				{
					this._MaxFormDate = value;
				}
			}
		}
		
		[Column(Storage="_EmployeeTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string EmployeeTitle
		{
			get
			{
				return this._EmployeeTitle;
			}
			set
			{
				if ((this._EmployeeTitle != value))
				{
					this._EmployeeTitle = value;
				}
			}
		}
		
		[Column(Storage="_RequestTitle", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string RequestTitle
		{
			get
			{
				return this._RequestTitle;
			}
			set
			{
				if ((this._RequestTitle != value))
				{
					this._RequestTitle = value;
				}
			}
		}
		
		[Column(Storage="_LicenseTitle", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string LicenseTitle
		{
			get
			{
				return this._LicenseTitle;
			}
			set
			{
				if ((this._LicenseTitle != value))
				{
					this._LicenseTitle = value;
				}
			}
		}
		
		[Column(Storage="_ActivityTitle", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ActivityTitle
		{
			get
			{
				return this._ActivityTitle;
			}
			set
			{
				if ((this._ActivityTitle != value))
				{
					this._ActivityTitle = value;
				}
			}
		}
		
		[Column(Storage="_RequestRegDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> RequestRegDate
		{
			get
			{
				return this._RequestRegDate;
			}
			set
			{
				if ((this._RequestRegDate != value))
				{
					this._RequestRegDate = value;
				}
			}
		}
		
		[Column(Storage="_ApproveRejectDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ApproveRejectDate
		{
			get
			{
				return this._ApproveRejectDate;
			}
			set
			{
				if ((this._ApproveRejectDate != value))
				{
					this._ApproveRejectDate = value;
				}
			}
		}
		
		[Column(Storage="_ApproveRejectActivitySysName", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string ApproveRejectActivitySysName
		{
			get
			{
				return this._ApproveRejectActivitySysName;
			}
			set
			{
				if ((this._ApproveRejectActivitySysName != value))
				{
					this._ApproveRejectActivitySysName = value;
				}
			}
		}
		
		[Column(Storage="_LicenseType", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LicenseType
		{
			get
			{
				return this._LicenseType;
			}
			set
			{
				if ((this._LicenseType != value))
				{
					this._LicenseType = value;
				}
			}
		}
		
		[Column(Storage="_ActualFormDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ActualFormDate
		{
			get
			{
				return this._ActualFormDate;
			}
			set
			{
				if ((this._ActualFormDate != value))
				{
					this._ActualFormDate = value;
				}
			}
		}
		
		[Column(Storage="_Deviation", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Deviation
		{
			get
			{
				return this._Deviation;
			}
			set
			{
				if ((this._Deviation != value))
				{
					this._Deviation = value;
				}
			}
		}
		
		[Column(Storage="_DeviationTitle", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string DeviationTitle
		{
			get
			{
				return this._DeviationTitle;
			}
			set
			{
				if ((this._DeviationTitle != value))
				{
					this._DeviationTitle = value;
				}
			}
		}
		
		[Column(Storage="_OrderGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderGUID
		{
			get
			{
				return this._OrderGUID;
			}
			set
			{
				if ((this._OrderGUID != value))
				{
					this._OrderGUID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.R_PaymentOrders")]
	public partial class R_PaymentOrders
	{
		
		private System.DateTime _Date;
		
		private string _Number;
		
		private char _PaymentPurpose;
		
		private string _PaymentPurposeTitle;
		
		private decimal _Amount;
		
		private string _INN;
		
		private string _KPP;
		
		private string _ContractorTitle;
		
		private int _RepresentationID;
		
		private string _RepresentationTitle;
		
		private string _DateMonth;
		
		private string _DateOrder;
		
		private string _Licenses;
		
		private System.Guid _PaymentOrderGUID;
		
		public R_PaymentOrders()
		{
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[Column(Storage="_Number", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this._Number = value;
				}
			}
		}
		
		[Column(Storage="_PaymentPurpose", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char PaymentPurpose
		{
			get
			{
				return this._PaymentPurpose;
			}
			set
			{
				if ((this._PaymentPurpose != value))
				{
					this._PaymentPurpose = value;
				}
			}
		}
		
		[Column(Storage="_PaymentPurposeTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PaymentPurposeTitle
		{
			get
			{
				return this._PaymentPurposeTitle;
			}
			set
			{
				if ((this._PaymentPurposeTitle != value))
				{
					this._PaymentPurposeTitle = value;
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(15,2) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this._Amount = value;
				}
			}
		}
		
		[Column(Storage="_INN", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string INN
		{
			get
			{
				return this._INN;
			}
			set
			{
				if ((this._INN != value))
				{
					this._INN = value;
				}
			}
		}
		
		[Column(Storage="_KPP", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string KPP
		{
			get
			{
				return this._KPP;
			}
			set
			{
				if ((this._KPP != value))
				{
					this._KPP = value;
				}
			}
		}
		
		[Column(Storage="_ContractorTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ContractorTitle
		{
			get
			{
				return this._ContractorTitle;
			}
			set
			{
				if ((this._ContractorTitle != value))
				{
					this._ContractorTitle = value;
				}
			}
		}
		
		[Column(Storage="_RepresentationID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					this._RepresentationID = value;
				}
			}
		}
		
		[Column(Storage="_RepresentationTitle", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
		public string RepresentationTitle
		{
			get
			{
				return this._RepresentationTitle;
			}
			set
			{
				if ((this._RepresentationTitle != value))
				{
					this._RepresentationTitle = value;
				}
			}
		}
		
		[Column(Storage="_DateMonth", DbType="NVarChar(22)", UpdateCheck=UpdateCheck.Never)]
		public string DateMonth
		{
			get
			{
				return this._DateMonth;
			}
			set
			{
				if ((this._DateMonth != value))
				{
					this._DateMonth = value;
				}
			}
		}
		
		[Column(Storage="_DateOrder", DbType="NVarChar(24)", UpdateCheck=UpdateCheck.Never)]
		public string DateOrder
		{
			get
			{
				return this._DateOrder;
			}
			set
			{
				if ((this._DateOrder != value))
				{
					this._DateOrder = value;
				}
			}
		}
		
		[Column(Storage="_Licenses", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Licenses
		{
			get
			{
				return this._Licenses;
			}
			set
			{
				if ((this._Licenses != value))
				{
					this._Licenses = value;
				}
			}
		}
		
		[Column(Storage="_PaymentOrderGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid PaymentOrderGUID
		{
			get
			{
				return this._PaymentOrderGUID;
			}
			set
			{
				if ((this._PaymentOrderGUID != value))
				{
					this._PaymentOrderGUID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.R_QuotableOrderDoc")]
	public partial class R_QuotableOrderDoc
	{
		
		private string _ApplicantTitleForGroup;
		
		private string _QuoteOwnerForGroup;
		
		private System.Guid _OrderGUID;
		
		private System.Nullable<System.DateTime> _FormDate;
		
		private System.Nullable<System.Guid> _QuotaOwnerGUID;
		
		private string _QuoteOwnerTitle;
		
		private System.Nullable<int> _CNCategoryID;
		
		private string _CNCategoryTitle;
		
		private System.Nullable<int> _QuotaCountryGroupID;
		
		private string _QuotaCountryGroupTitle;
		
		private System.Nullable<int> _OperationTypeID;
		
		private string _OperationTitle;
		
		private bool _CanReissurance;
		
		private string _ActivityTitle;
		
		private string _ActivitySysName;
		
		private string _CountryOrigin;
		
		private string _CountryFrom;
		
		private string _QuoteOwnerINN;
		
		private System.Nullable<System.Guid> _ApplicantGUID;
		
		private string _ApplicantTitle;
		
		private string _ApplicantINN;
		
		private string _LicenseNumber;
		
		private System.Nullable<System.DateTime> _ActivityDate;
		
		private System.Nullable<System.DateTime> _RegDate;
		
		private System.Nullable<System.DateTime> _IssueDate;
		
		private System.Nullable<int> _CNID;
		
		private string _CNCode;
		
		private string _CNTitle;
		
		private System.Nullable<decimal> _ResolvedQuantity;
		
		private System.Nullable<decimal> _AddResolvedQuantity;
		
		private System.Nullable<decimal> _FactShippedQuantity;
		
		private System.Nullable<int> _EmployeeID;
		
		private string _EmployeeTitle;
		
		private System.Nullable<int> _QuotaYear;
		
		private System.Nullable<int> _Country3ID;
		
		private string _DealerName;
		
		private System.Nullable<char> _QuoteOwnerType;
		
		private string _ForeignAuthorizationNo;
		
		private System.Nullable<System.DateTime> _ForeignAuthorizationDate;
		
		private int _ParamID;
		
		public R_QuotableOrderDoc()
		{
		}
		
		[Column(Storage="_ApplicantTitleForGroup", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ApplicantTitleForGroup
		{
			get
			{
				return this._ApplicantTitleForGroup;
			}
			set
			{
				if ((this._ApplicantTitleForGroup != value))
				{
					this._ApplicantTitleForGroup = value;
				}
			}
		}
		
		[Column(Storage="_QuoteOwnerForGroup", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string QuoteOwnerForGroup
		{
			get
			{
				return this._QuoteOwnerForGroup;
			}
			set
			{
				if ((this._QuoteOwnerForGroup != value))
				{
					this._QuoteOwnerForGroup = value;
				}
			}
		}
		
		[Column(Storage="_OrderGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderGUID
		{
			get
			{
				return this._OrderGUID;
			}
			set
			{
				if ((this._OrderGUID != value))
				{
					this._OrderGUID = value;
				}
			}
		}
		
		[Column(Storage="_FormDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FormDate
		{
			get
			{
				return this._FormDate;
			}
			set
			{
				if ((this._FormDate != value))
				{
					this._FormDate = value;
				}
			}
		}
		
		[Column(Storage="_QuotaOwnerGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> QuotaOwnerGUID
		{
			get
			{
				return this._QuotaOwnerGUID;
			}
			set
			{
				if ((this._QuotaOwnerGUID != value))
				{
					this._QuotaOwnerGUID = value;
				}
			}
		}
		
		[Column(Storage="_QuoteOwnerTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string QuoteOwnerTitle
		{
			get
			{
				return this._QuoteOwnerTitle;
			}
			set
			{
				if ((this._QuoteOwnerTitle != value))
				{
					this._QuoteOwnerTitle = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					this._CNCategoryID = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CNCategoryTitle
		{
			get
			{
				return this._CNCategoryTitle;
			}
			set
			{
				if ((this._CNCategoryTitle != value))
				{
					this._CNCategoryTitle = value;
				}
			}
		}
		
		[Column(Storage="_QuotaCountryGroupID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> QuotaCountryGroupID
		{
			get
			{
				return this._QuotaCountryGroupID;
			}
			set
			{
				if ((this._QuotaCountryGroupID != value))
				{
					this._QuotaCountryGroupID = value;
				}
			}
		}
		
		[Column(Storage="_QuotaCountryGroupTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string QuotaCountryGroupTitle
		{
			get
			{
				return this._QuotaCountryGroupTitle;
			}
			set
			{
				if ((this._QuotaCountryGroupTitle != value))
				{
					this._QuotaCountryGroupTitle = value;
				}
			}
		}
		
		[Column(Storage="_OperationTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					this._OperationTypeID = value;
				}
			}
		}
		
		[Column(Storage="_OperationTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string OperationTitle
		{
			get
			{
				return this._OperationTitle;
			}
			set
			{
				if ((this._OperationTitle != value))
				{
					this._OperationTitle = value;
				}
			}
		}
		
		[Column(Storage="_CanReissurance", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool CanReissurance
		{
			get
			{
				return this._CanReissurance;
			}
			set
			{
				if ((this._CanReissurance != value))
				{
					this._CanReissurance = value;
				}
			}
		}
		
		[Column(Storage="_ActivityTitle", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string ActivityTitle
		{
			get
			{
				return this._ActivityTitle;
			}
			set
			{
				if ((this._ActivityTitle != value))
				{
					this._ActivityTitle = value;
				}
			}
		}
		
		[Column(Storage="_ActivitySysName", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string ActivitySysName
		{
			get
			{
				return this._ActivitySysName;
			}
			set
			{
				if ((this._ActivitySysName != value))
				{
					this._ActivitySysName = value;
				}
			}
		}
		
		[Column(Storage="_CountryOrigin", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string CountryOrigin
		{
			get
			{
				return this._CountryOrigin;
			}
			set
			{
				if ((this._CountryOrigin != value))
				{
					this._CountryOrigin = value;
				}
			}
		}
		
		[Column(Storage="_CountryFrom", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string CountryFrom
		{
			get
			{
				return this._CountryFrom;
			}
			set
			{
				if ((this._CountryFrom != value))
				{
					this._CountryFrom = value;
				}
			}
		}
		
		[Column(Storage="_QuoteOwnerINN", DbType="NVarChar(12)", UpdateCheck=UpdateCheck.Never)]
		public string QuoteOwnerINN
		{
			get
			{
				return this._QuoteOwnerINN;
			}
			set
			{
				if ((this._QuoteOwnerINN != value))
				{
					this._QuoteOwnerINN = value;
				}
			}
		}
		
		[Column(Storage="_ApplicantGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ApplicantGUID
		{
			get
			{
				return this._ApplicantGUID;
			}
			set
			{
				if ((this._ApplicantGUID != value))
				{
					this._ApplicantGUID = value;
				}
			}
		}
		
		[Column(Storage="_ApplicantTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ApplicantTitle
		{
			get
			{
				return this._ApplicantTitle;
			}
			set
			{
				if ((this._ApplicantTitle != value))
				{
					this._ApplicantTitle = value;
				}
			}
		}
		
		[Column(Storage="_ApplicantINN", DbType="NVarChar(12)", UpdateCheck=UpdateCheck.Never)]
		public string ApplicantINN
		{
			get
			{
				return this._ApplicantINN;
			}
			set
			{
				if ((this._ApplicantINN != value))
				{
					this._ApplicantINN = value;
				}
			}
		}
		
		[Column(Storage="_LicenseNumber", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string LicenseNumber
		{
			get
			{
				return this._LicenseNumber;
			}
			set
			{
				if ((this._LicenseNumber != value))
				{
					this._LicenseNumber = value;
				}
			}
		}
		
		[Column(Storage="_ActivityDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ActivityDate
		{
			get
			{
				return this._ActivityDate;
			}
			set
			{
				if ((this._ActivityDate != value))
				{
					this._ActivityDate = value;
				}
			}
		}
		
		[Column(Storage="_RegDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this._RegDate = value;
				}
			}
		}
		
		[Column(Storage="_IssueDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this._IssueDate = value;
				}
			}
		}
		
		[Column(Storage="_CNID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CNID
		{
			get
			{
				return this._CNID;
			}
			set
			{
				if ((this._CNID != value))
				{
					this._CNID = value;
				}
			}
		}
		
		[Column(Storage="_CNCode", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string CNCode
		{
			get
			{
				return this._CNCode;
			}
			set
			{
				if ((this._CNCode != value))
				{
					this._CNCode = value;
				}
			}
		}
		
		[Column(Storage="_CNTitle", DbType="NVarChar(2048)", UpdateCheck=UpdateCheck.Never)]
		public string CNTitle
		{
			get
			{
				return this._CNTitle;
			}
			set
			{
				if ((this._CNTitle != value))
				{
					this._CNTitle = value;
				}
			}
		}
		
		[Column(Storage="_ResolvedQuantity", DbType="Decimal(20,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedQuantity
		{
			get
			{
				return this._ResolvedQuantity;
			}
			set
			{
				if ((this._ResolvedQuantity != value))
				{
					this._ResolvedQuantity = value;
				}
			}
		}
		
		[Column(Storage="_AddResolvedQuantity", DbType="Decimal(20,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> AddResolvedQuantity
		{
			get
			{
				return this._AddResolvedQuantity;
			}
			set
			{
				if ((this._AddResolvedQuantity != value))
				{
					this._AddResolvedQuantity = value;
				}
			}
		}
		
		[Column(Storage="_FactShippedQuantity", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> FactShippedQuantity
		{
			get
			{
				return this._FactShippedQuantity;
			}
			set
			{
				if ((this._FactShippedQuantity != value))
				{
					this._FactShippedQuantity = value;
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this._EmployeeID = value;
				}
			}
		}
		
		[Column(Storage="_EmployeeTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string EmployeeTitle
		{
			get
			{
				return this._EmployeeTitle;
			}
			set
			{
				if ((this._EmployeeTitle != value))
				{
					this._EmployeeTitle = value;
				}
			}
		}
		
		[Column(Storage="_QuotaYear", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> QuotaYear
		{
			get
			{
				return this._QuotaYear;
			}
			set
			{
				if ((this._QuotaYear != value))
				{
					this._QuotaYear = value;
				}
			}
		}
		
		[Column(Storage="_Country3ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Country3ID
		{
			get
			{
				return this._Country3ID;
			}
			set
			{
				if ((this._Country3ID != value))
				{
					this._Country3ID = value;
				}
			}
		}
		
		[Column(Storage="_DealerName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DealerName
		{
			get
			{
				return this._DealerName;
			}
			set
			{
				if ((this._DealerName != value))
				{
					this._DealerName = value;
				}
			}
		}
		
		[Column(Storage="_QuoteOwnerType", DbType="Char(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<char> QuoteOwnerType
		{
			get
			{
				return this._QuoteOwnerType;
			}
			set
			{
				if ((this._QuoteOwnerType != value))
				{
					this._QuoteOwnerType = value;
				}
			}
		}
		
		[Column(Storage="_ForeignAuthorizationNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ForeignAuthorizationNo
		{
			get
			{
				return this._ForeignAuthorizationNo;
			}
			set
			{
				if ((this._ForeignAuthorizationNo != value))
				{
					this._ForeignAuthorizationNo = value;
				}
			}
		}
		
		[Column(Storage="_ForeignAuthorizationDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ForeignAuthorizationDate
		{
			get
			{
				return this._ForeignAuthorizationDate;
			}
			set
			{
				if ((this._ForeignAuthorizationDate != value))
				{
					this._ForeignAuthorizationDate = value;
				}
			}
		}
		
		[Column(Storage="_ParamID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ParamID
		{
			get
			{
				return this._ParamID;
			}
			set
			{
				if ((this._ParamID != value))
				{
					this._ParamID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.R_QuotableOrderDoc_Param")]
	public partial class R_QuotableOrderDoc_Param : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _ReportDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReportDateChanging(System.DateTime value);
    partial void OnReportDateChanged();
    #endregion
		
		public R_QuotableOrderDoc_Param()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReportDate", DbType="Date NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime ReportDate
		{
			get
			{
				return this._ReportDate;
			}
			set
			{
				if ((this._ReportDate != value))
				{
					this.OnReportDateChanging(value);
					this.SendPropertyChanging();
					this._ReportDate = value;
					this.SendPropertyChanged("ReportDate");
					this.OnReportDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.R_QuotaUse")]
	public partial class R_QuotaUse
	{
		
		private System.Nullable<decimal> _Volume;
		
		private int _QuotaID;
		
		private System.Nullable<System.Guid> _OrderGUID;
		
		private System.Nullable<decimal> _RedistributionPercent;
		
		private System.Nullable<int> _QuotaRedistributionID;
		
		private string _LicenseNumber;
		
		private System.Nullable<decimal> _ResolvedQuantity;
		
		private System.Nullable<decimal> _FactShippedQuantity;
		
		private string _SysName;
		
		private string _Title;
		
		private System.Nullable<decimal> _RedistributedVolume;
		
		private System.Nullable<System.DateTime> _FormDate;
		
		private System.Nullable<decimal> _UsedVolume;
		
		private System.Nullable<decimal> _ResolvedOrShipped;
		
		private System.Nullable<decimal> _ResolvedOrShippedUsedRedistrib;
		
		private int _CountryGroupID;
		
		private string _CountryGroupTitle;
		
		private string _CNCategoryTitle;
		
		private string _QuotaOwnerTitle;
		
		private string _RepresentationTitle;
		
		private string _CountryOrigin;
		
		private string _CNCode;
		
		private System.Guid _QuoteOwnerGUID;
		
		private int _OperationTypeID;
		
		private System.Nullable<bool> _CanReissurance;
		
		private int _QuotaYear;
		
		private System.Nullable<int> _CNCategoryID;
		
		private System.Nullable<int> _Country3ID;
		
		private string _QuoteOwnerINN;
		
		private char _QuoteOwnerType;
		
		private string _DealerName;
		
		private System.Nullable<System.Guid> _ApplicantGUID;
		
		public R_QuotaUse()
		{
		}
		
		[Column(Storage="_Volume", DbType="Decimal(32,18)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this._Volume = value;
				}
			}
		}
		
		[Column(Storage="_QuotaID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int QuotaID
		{
			get
			{
				return this._QuotaID;
			}
			set
			{
				if ((this._QuotaID != value))
				{
					this._QuotaID = value;
				}
			}
		}
		
		[Column(Storage="_OrderGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> OrderGUID
		{
			get
			{
				return this._OrderGUID;
			}
			set
			{
				if ((this._OrderGUID != value))
				{
					this._OrderGUID = value;
				}
			}
		}
		
		[Column(Storage="_RedistributionPercent", DbType="Decimal(7,4)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RedistributionPercent
		{
			get
			{
				return this._RedistributionPercent;
			}
			set
			{
				if ((this._RedistributionPercent != value))
				{
					this._RedistributionPercent = value;
				}
			}
		}
		
		[Column(Storage="_QuotaRedistributionID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> QuotaRedistributionID
		{
			get
			{
				return this._QuotaRedistributionID;
			}
			set
			{
				if ((this._QuotaRedistributionID != value))
				{
					this._QuotaRedistributionID = value;
				}
			}
		}
		
		[Column(Storage="_LicenseNumber", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string LicenseNumber
		{
			get
			{
				return this._LicenseNumber;
			}
			set
			{
				if ((this._LicenseNumber != value))
				{
					this._LicenseNumber = value;
				}
			}
		}
		
		[Column(Storage="_ResolvedQuantity", DbType="Decimal(20,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedQuantity
		{
			get
			{
				return this._ResolvedQuantity;
			}
			set
			{
				if ((this._ResolvedQuantity != value))
				{
					this._ResolvedQuantity = value;
				}
			}
		}
		
		[Column(Storage="_FactShippedQuantity", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> FactShippedQuantity
		{
			get
			{
				return this._FactShippedQuantity;
			}
			set
			{
				if ((this._FactShippedQuantity != value))
				{
					this._FactShippedQuantity = value;
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this._SysName = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_RedistributedVolume", DbType="Decimal(36,18)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RedistributedVolume
		{
			get
			{
				return this._RedistributedVolume;
			}
			set
			{
				if ((this._RedistributedVolume != value))
				{
					this._RedistributedVolume = value;
				}
			}
		}
		
		[Column(Storage="_FormDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FormDate
		{
			get
			{
				return this._FormDate;
			}
			set
			{
				if ((this._FormDate != value))
				{
					this._FormDate = value;
				}
			}
		}
		
		[Column(Storage="_UsedVolume", DbType="Decimal(20,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> UsedVolume
		{
			get
			{
				return this._UsedVolume;
			}
			set
			{
				if ((this._UsedVolume != value))
				{
					this._UsedVolume = value;
				}
			}
		}
		
		[Column(Storage="_ResolvedOrShipped", DbType="Decimal(33,18)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedOrShipped
		{
			get
			{
				return this._ResolvedOrShipped;
			}
			set
			{
				if ((this._ResolvedOrShipped != value))
				{
					this._ResolvedOrShipped = value;
				}
			}
		}
		
		[Column(Storage="_ResolvedOrShippedUsedRedistrib", DbType="Decimal(37,18)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedOrShippedUsedRedistrib
		{
			get
			{
				return this._ResolvedOrShippedUsedRedistrib;
			}
			set
			{
				if ((this._ResolvedOrShippedUsedRedistrib != value))
				{
					this._ResolvedOrShippedUsedRedistrib = value;
				}
			}
		}
		
		[Column(Storage="_CountryGroupID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CountryGroupID
		{
			get
			{
				return this._CountryGroupID;
			}
			set
			{
				if ((this._CountryGroupID != value))
				{
					this._CountryGroupID = value;
				}
			}
		}
		
		[Column(Storage="_CountryGroupTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CountryGroupTitle
		{
			get
			{
				return this._CountryGroupTitle;
			}
			set
			{
				if ((this._CountryGroupTitle != value))
				{
					this._CountryGroupTitle = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CNCategoryTitle
		{
			get
			{
				return this._CNCategoryTitle;
			}
			set
			{
				if ((this._CNCategoryTitle != value))
				{
					this._CNCategoryTitle = value;
				}
			}
		}
		
		[Column(Storage="_QuotaOwnerTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string QuotaOwnerTitle
		{
			get
			{
				return this._QuotaOwnerTitle;
			}
			set
			{
				if ((this._QuotaOwnerTitle != value))
				{
					this._QuotaOwnerTitle = value;
				}
			}
		}
		
		[Column(Storage="_RepresentationTitle", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
		public string RepresentationTitle
		{
			get
			{
				return this._RepresentationTitle;
			}
			set
			{
				if ((this._RepresentationTitle != value))
				{
					this._RepresentationTitle = value;
				}
			}
		}
		
		[Column(Storage="_CountryOrigin", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CountryOrigin
		{
			get
			{
				return this._CountryOrigin;
			}
			set
			{
				if ((this._CountryOrigin != value))
				{
					this._CountryOrigin = value;
				}
			}
		}
		
		[Column(Storage="_CNCode", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string CNCode
		{
			get
			{
				return this._CNCode;
			}
			set
			{
				if ((this._CNCode != value))
				{
					this._CNCode = value;
				}
			}
		}
		
		[Column(Storage="_QuoteOwnerGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid QuoteOwnerGUID
		{
			get
			{
				return this._QuoteOwnerGUID;
			}
			set
			{
				if ((this._QuoteOwnerGUID != value))
				{
					this._QuoteOwnerGUID = value;
				}
			}
		}
		
		[Column(Storage="_OperationTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					this._OperationTypeID = value;
				}
			}
		}
		
		[Column(Storage="_CanReissurance", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> CanReissurance
		{
			get
			{
				return this._CanReissurance;
			}
			set
			{
				if ((this._CanReissurance != value))
				{
					this._CanReissurance = value;
				}
			}
		}
		
		[Column(Storage="_QuotaYear", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int QuotaYear
		{
			get
			{
				return this._QuotaYear;
			}
			set
			{
				if ((this._QuotaYear != value))
				{
					this._QuotaYear = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					this._CNCategoryID = value;
				}
			}
		}
		
		[Column(Storage="_Country3ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Country3ID
		{
			get
			{
				return this._Country3ID;
			}
			set
			{
				if ((this._Country3ID != value))
				{
					this._Country3ID = value;
				}
			}
		}
		
		[Column(Storage="_QuoteOwnerINN", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string QuoteOwnerINN
		{
			get
			{
				return this._QuoteOwnerINN;
			}
			set
			{
				if ((this._QuoteOwnerINN != value))
				{
					this._QuoteOwnerINN = value;
				}
			}
		}
		
		[Column(Storage="_QuoteOwnerType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char QuoteOwnerType
		{
			get
			{
				return this._QuoteOwnerType;
			}
			set
			{
				if ((this._QuoteOwnerType != value))
				{
					this._QuoteOwnerType = value;
				}
			}
		}
		
		[Column(Storage="_DealerName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DealerName
		{
			get
			{
				return this._DealerName;
			}
			set
			{
				if ((this._DealerName != value))
				{
					this._DealerName = value;
				}
			}
		}
		
		[Column(Storage="_ApplicantGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ApplicantGUID
		{
			get
			{
				return this._ApplicantGUID;
			}
			set
			{
				if ((this._ApplicantGUID != value))
				{
					this._ApplicantGUID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.R_QuotaUse_sub")]
	public partial class R_QuotaUse_sub
	{
		
		private System.Nullable<decimal> _Volume;
		
		private int _QuotaID;
		
		private System.Guid _OrderGUID;
		
		private System.Nullable<decimal> _RedistributionPercent;
		
		private System.Nullable<int> _QuotaRedistributionID;
		
		private string _LicenseNumber;
		
		private System.Nullable<decimal> _ResolvedQuantity;
		
		private System.Nullable<decimal> _FactShippedQuantity;
		
		private string _SysName;
		
		private string _Title;
		
		private System.Nullable<decimal> _RedistributedVolume;
		
		private System.Nullable<System.DateTime> _FormDate;
		
		private System.Nullable<decimal> _UsedVolume;
		
		private System.Nullable<decimal> _ResolvedOrShipped;
		
		private System.Nullable<decimal> _ResolvedOrShippedUsedRedistrib;
		
		private int _CountryGroupID;
		
		private System.Nullable<System.Guid> _CountryGroupMasterObjectGUID;
		
		private System.Nullable<System.Guid> _CNCategoryMasterObjectGUID;
		
		private string _QuotaOwnerTitle;
		
		private System.Nullable<System.Guid> _RepresentationMasterObjectGUID;
		
		private System.Nullable<System.Guid> _CountryOriginMasterObjectGUID;
		
		private System.Nullable<System.Guid> _CNMasterObjectGUID;
		
		private System.Guid _QuoteOwnerGUID;
		
		private int _OperationTypeID;
		
		private bool _CanReissurance;
		
		private int _QuotaYear;
		
		private int _CNCategoryID;
		
		private System.Nullable<int> _Country3ID;
		
		private string _QuoteOwnerINN;
		
		private char _QuoteOwnerType;
		
		private string _DealerName;
		
		private System.Guid _ApplicantGUID;
		
		public R_QuotaUse_sub()
		{
		}
		
		[Column(Storage="_Volume", DbType="Decimal(32,18)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this._Volume = value;
				}
			}
		}
		
		[Column(Storage="_QuotaID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int QuotaID
		{
			get
			{
				return this._QuotaID;
			}
			set
			{
				if ((this._QuotaID != value))
				{
					this._QuotaID = value;
				}
			}
		}
		
		[Column(Storage="_OrderGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderGUID
		{
			get
			{
				return this._OrderGUID;
			}
			set
			{
				if ((this._OrderGUID != value))
				{
					this._OrderGUID = value;
				}
			}
		}
		
		[Column(Storage="_RedistributionPercent", DbType="Decimal(7,4)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RedistributionPercent
		{
			get
			{
				return this._RedistributionPercent;
			}
			set
			{
				if ((this._RedistributionPercent != value))
				{
					this._RedistributionPercent = value;
				}
			}
		}
		
		[Column(Storage="_QuotaRedistributionID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> QuotaRedistributionID
		{
			get
			{
				return this._QuotaRedistributionID;
			}
			set
			{
				if ((this._QuotaRedistributionID != value))
				{
					this._QuotaRedistributionID = value;
				}
			}
		}
		
		[Column(Storage="_LicenseNumber", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string LicenseNumber
		{
			get
			{
				return this._LicenseNumber;
			}
			set
			{
				if ((this._LicenseNumber != value))
				{
					this._LicenseNumber = value;
				}
			}
		}
		
		[Column(Storage="_ResolvedQuantity", DbType="Decimal(20,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedQuantity
		{
			get
			{
				return this._ResolvedQuantity;
			}
			set
			{
				if ((this._ResolvedQuantity != value))
				{
					this._ResolvedQuantity = value;
				}
			}
		}
		
		[Column(Storage="_FactShippedQuantity", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> FactShippedQuantity
		{
			get
			{
				return this._FactShippedQuantity;
			}
			set
			{
				if ((this._FactShippedQuantity != value))
				{
					this._FactShippedQuantity = value;
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this._SysName = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_RedistributedVolume", DbType="Decimal(36,18)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RedistributedVolume
		{
			get
			{
				return this._RedistributedVolume;
			}
			set
			{
				if ((this._RedistributedVolume != value))
				{
					this._RedistributedVolume = value;
				}
			}
		}
		
		[Column(Storage="_FormDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FormDate
		{
			get
			{
				return this._FormDate;
			}
			set
			{
				if ((this._FormDate != value))
				{
					this._FormDate = value;
				}
			}
		}
		
		[Column(Storage="_UsedVolume", DbType="Decimal(20,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> UsedVolume
		{
			get
			{
				return this._UsedVolume;
			}
			set
			{
				if ((this._UsedVolume != value))
				{
					this._UsedVolume = value;
				}
			}
		}
		
		[Column(Storage="_ResolvedOrShipped", DbType="Decimal(33,18)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedOrShipped
		{
			get
			{
				return this._ResolvedOrShipped;
			}
			set
			{
				if ((this._ResolvedOrShipped != value))
				{
					this._ResolvedOrShipped = value;
				}
			}
		}
		
		[Column(Storage="_ResolvedOrShippedUsedRedistrib", DbType="Decimal(37,18)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedOrShippedUsedRedistrib
		{
			get
			{
				return this._ResolvedOrShippedUsedRedistrib;
			}
			set
			{
				if ((this._ResolvedOrShippedUsedRedistrib != value))
				{
					this._ResolvedOrShippedUsedRedistrib = value;
				}
			}
		}
		
		[Column(Storage="_CountryGroupID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CountryGroupID
		{
			get
			{
				return this._CountryGroupID;
			}
			set
			{
				if ((this._CountryGroupID != value))
				{
					this._CountryGroupID = value;
				}
			}
		}
		
		[Column(Storage="_CountryGroupMasterObjectGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> CountryGroupMasterObjectGUID
		{
			get
			{
				return this._CountryGroupMasterObjectGUID;
			}
			set
			{
				if ((this._CountryGroupMasterObjectGUID != value))
				{
					this._CountryGroupMasterObjectGUID = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryMasterObjectGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> CNCategoryMasterObjectGUID
		{
			get
			{
				return this._CNCategoryMasterObjectGUID;
			}
			set
			{
				if ((this._CNCategoryMasterObjectGUID != value))
				{
					this._CNCategoryMasterObjectGUID = value;
				}
			}
		}
		
		[Column(Storage="_QuotaOwnerTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string QuotaOwnerTitle
		{
			get
			{
				return this._QuotaOwnerTitle;
			}
			set
			{
				if ((this._QuotaOwnerTitle != value))
				{
					this._QuotaOwnerTitle = value;
				}
			}
		}
		
		[Column(Storage="_RepresentationMasterObjectGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> RepresentationMasterObjectGUID
		{
			get
			{
				return this._RepresentationMasterObjectGUID;
			}
			set
			{
				if ((this._RepresentationMasterObjectGUID != value))
				{
					this._RepresentationMasterObjectGUID = value;
				}
			}
		}
		
		[Column(Storage="_CountryOriginMasterObjectGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> CountryOriginMasterObjectGUID
		{
			get
			{
				return this._CountryOriginMasterObjectGUID;
			}
			set
			{
				if ((this._CountryOriginMasterObjectGUID != value))
				{
					this._CountryOriginMasterObjectGUID = value;
				}
			}
		}
		
		[Column(Storage="_CNMasterObjectGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> CNMasterObjectGUID
		{
			get
			{
				return this._CNMasterObjectGUID;
			}
			set
			{
				if ((this._CNMasterObjectGUID != value))
				{
					this._CNMasterObjectGUID = value;
				}
			}
		}
		
		[Column(Storage="_QuoteOwnerGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid QuoteOwnerGUID
		{
			get
			{
				return this._QuoteOwnerGUID;
			}
			set
			{
				if ((this._QuoteOwnerGUID != value))
				{
					this._QuoteOwnerGUID = value;
				}
			}
		}
		
		[Column(Storage="_OperationTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					this._OperationTypeID = value;
				}
			}
		}
		
		[Column(Storage="_CanReissurance", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool CanReissurance
		{
			get
			{
				return this._CanReissurance;
			}
			set
			{
				if ((this._CanReissurance != value))
				{
					this._CanReissurance = value;
				}
			}
		}
		
		[Column(Storage="_QuotaYear", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int QuotaYear
		{
			get
			{
				return this._QuotaYear;
			}
			set
			{
				if ((this._QuotaYear != value))
				{
					this._QuotaYear = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					this._CNCategoryID = value;
				}
			}
		}
		
		[Column(Storage="_Country3ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Country3ID
		{
			get
			{
				return this._Country3ID;
			}
			set
			{
				if ((this._Country3ID != value))
				{
					this._Country3ID = value;
				}
			}
		}
		
		[Column(Storage="_QuoteOwnerINN", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string QuoteOwnerINN
		{
			get
			{
				return this._QuoteOwnerINN;
			}
			set
			{
				if ((this._QuoteOwnerINN != value))
				{
					this._QuoteOwnerINN = value;
				}
			}
		}
		
		[Column(Storage="_QuoteOwnerType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char QuoteOwnerType
		{
			get
			{
				return this._QuoteOwnerType;
			}
			set
			{
				if ((this._QuoteOwnerType != value))
				{
					this._QuoteOwnerType = value;
				}
			}
		}
		
		[Column(Storage="_DealerName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DealerName
		{
			get
			{
				return this._DealerName;
			}
			set
			{
				if ((this._DealerName != value))
				{
					this._DealerName = value;
				}
			}
		}
		
		[Column(Storage="_ApplicantGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ApplicantGUID
		{
			get
			{
				return this._ApplicantGUID;
			}
			set
			{
				if ((this._ApplicantGUID != value))
				{
					this._ApplicantGUID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.R_QuotaUse2")]
	public partial class R_QuotaUse2
	{
		
		private System.Nullable<decimal> _Volume;
		
		private int _QuotaID;
		
		private System.Nullable<System.Guid> _OrderGUID;
		
		private System.Nullable<decimal> _RedistributionPercent;
		
		private System.Nullable<int> _QuotaRedistributionID;
		
		private string _LicenseNumber;
		
		private System.Nullable<decimal> _ResolvedQuantity;
		
		private System.Nullable<decimal> _FactShippedQuantity;
		
		private string _SysName;
		
		private string _Title;
		
		private System.Nullable<decimal> _RedistributedVolume;
		
		private System.Nullable<System.DateTime> _FormDate;
		
		private System.Nullable<decimal> _UsedVolume;
		
		private System.Nullable<decimal> _ResolvedOrShipped;
		
		private System.Nullable<decimal> _ResolvedOrShippedUsedRedistrib;
		
		private int _CountryGroupID;
		
		private System.Nullable<System.Guid> _CountryGroupMasterObjectGUID;
		
		private System.Nullable<System.Guid> _CNCategoryMasterObjectGUID;
		
		private string _QuotaOwnerTitle;
		
		private System.Nullable<System.Guid> _RepresentationMasterObjectGUID;
		
		private System.Nullable<System.Guid> _CountryOriginMasterObjectGUID;
		
		private System.Nullable<System.Guid> _CNMasterObjectGUID;
		
		private System.Guid _QuoteOwnerGUID;
		
		private int _OperationTypeID;
		
		private System.Nullable<bool> _CanReissurance;
		
		private int _QuotaYear;
		
		private int _CNCategoryID;
		
		private System.Nullable<int> _Country3ID;
		
		private string _QuoteOwnerINN;
		
		private char _QuoteOwnerType;
		
		private string _DealerName;
		
		private System.Nullable<System.Guid> _ApplicantGUID;
		
		public R_QuotaUse2()
		{
		}
		
		[Column(Storage="_Volume", DbType="Decimal(32,18)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this._Volume = value;
				}
			}
		}
		
		[Column(Storage="_QuotaID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int QuotaID
		{
			get
			{
				return this._QuotaID;
			}
			set
			{
				if ((this._QuotaID != value))
				{
					this._QuotaID = value;
				}
			}
		}
		
		[Column(Storage="_OrderGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> OrderGUID
		{
			get
			{
				return this._OrderGUID;
			}
			set
			{
				if ((this._OrderGUID != value))
				{
					this._OrderGUID = value;
				}
			}
		}
		
		[Column(Storage="_RedistributionPercent", DbType="Decimal(7,4)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RedistributionPercent
		{
			get
			{
				return this._RedistributionPercent;
			}
			set
			{
				if ((this._RedistributionPercent != value))
				{
					this._RedistributionPercent = value;
				}
			}
		}
		
		[Column(Storage="_QuotaRedistributionID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> QuotaRedistributionID
		{
			get
			{
				return this._QuotaRedistributionID;
			}
			set
			{
				if ((this._QuotaRedistributionID != value))
				{
					this._QuotaRedistributionID = value;
				}
			}
		}
		
		[Column(Storage="_LicenseNumber", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string LicenseNumber
		{
			get
			{
				return this._LicenseNumber;
			}
			set
			{
				if ((this._LicenseNumber != value))
				{
					this._LicenseNumber = value;
				}
			}
		}
		
		[Column(Storage="_ResolvedQuantity", DbType="Decimal(20,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedQuantity
		{
			get
			{
				return this._ResolvedQuantity;
			}
			set
			{
				if ((this._ResolvedQuantity != value))
				{
					this._ResolvedQuantity = value;
				}
			}
		}
		
		[Column(Storage="_FactShippedQuantity", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> FactShippedQuantity
		{
			get
			{
				return this._FactShippedQuantity;
			}
			set
			{
				if ((this._FactShippedQuantity != value))
				{
					this._FactShippedQuantity = value;
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this._SysName = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_RedistributedVolume", DbType="Decimal(36,18)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RedistributedVolume
		{
			get
			{
				return this._RedistributedVolume;
			}
			set
			{
				if ((this._RedistributedVolume != value))
				{
					this._RedistributedVolume = value;
				}
			}
		}
		
		[Column(Storage="_FormDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FormDate
		{
			get
			{
				return this._FormDate;
			}
			set
			{
				if ((this._FormDate != value))
				{
					this._FormDate = value;
				}
			}
		}
		
		[Column(Storage="_UsedVolume", DbType="Decimal(20,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> UsedVolume
		{
			get
			{
				return this._UsedVolume;
			}
			set
			{
				if ((this._UsedVolume != value))
				{
					this._UsedVolume = value;
				}
			}
		}
		
		[Column(Storage="_ResolvedOrShipped", DbType="Decimal(33,18)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedOrShipped
		{
			get
			{
				return this._ResolvedOrShipped;
			}
			set
			{
				if ((this._ResolvedOrShipped != value))
				{
					this._ResolvedOrShipped = value;
				}
			}
		}
		
		[Column(Storage="_ResolvedOrShippedUsedRedistrib", DbType="Decimal(37,18)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedOrShippedUsedRedistrib
		{
			get
			{
				return this._ResolvedOrShippedUsedRedistrib;
			}
			set
			{
				if ((this._ResolvedOrShippedUsedRedistrib != value))
				{
					this._ResolvedOrShippedUsedRedistrib = value;
				}
			}
		}
		
		[Column(Storage="_CountryGroupID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CountryGroupID
		{
			get
			{
				return this._CountryGroupID;
			}
			set
			{
				if ((this._CountryGroupID != value))
				{
					this._CountryGroupID = value;
				}
			}
		}
		
		[Column(Storage="_CountryGroupMasterObjectGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> CountryGroupMasterObjectGUID
		{
			get
			{
				return this._CountryGroupMasterObjectGUID;
			}
			set
			{
				if ((this._CountryGroupMasterObjectGUID != value))
				{
					this._CountryGroupMasterObjectGUID = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryMasterObjectGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> CNCategoryMasterObjectGUID
		{
			get
			{
				return this._CNCategoryMasterObjectGUID;
			}
			set
			{
				if ((this._CNCategoryMasterObjectGUID != value))
				{
					this._CNCategoryMasterObjectGUID = value;
				}
			}
		}
		
		[Column(Storage="_QuotaOwnerTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string QuotaOwnerTitle
		{
			get
			{
				return this._QuotaOwnerTitle;
			}
			set
			{
				if ((this._QuotaOwnerTitle != value))
				{
					this._QuotaOwnerTitle = value;
				}
			}
		}
		
		[Column(Storage="_RepresentationMasterObjectGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> RepresentationMasterObjectGUID
		{
			get
			{
				return this._RepresentationMasterObjectGUID;
			}
			set
			{
				if ((this._RepresentationMasterObjectGUID != value))
				{
					this._RepresentationMasterObjectGUID = value;
				}
			}
		}
		
		[Column(Storage="_CountryOriginMasterObjectGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> CountryOriginMasterObjectGUID
		{
			get
			{
				return this._CountryOriginMasterObjectGUID;
			}
			set
			{
				if ((this._CountryOriginMasterObjectGUID != value))
				{
					this._CountryOriginMasterObjectGUID = value;
				}
			}
		}
		
		[Column(Storage="_CNMasterObjectGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> CNMasterObjectGUID
		{
			get
			{
				return this._CNMasterObjectGUID;
			}
			set
			{
				if ((this._CNMasterObjectGUID != value))
				{
					this._CNMasterObjectGUID = value;
				}
			}
		}
		
		[Column(Storage="_QuoteOwnerGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid QuoteOwnerGUID
		{
			get
			{
				return this._QuoteOwnerGUID;
			}
			set
			{
				if ((this._QuoteOwnerGUID != value))
				{
					this._QuoteOwnerGUID = value;
				}
			}
		}
		
		[Column(Storage="_OperationTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					this._OperationTypeID = value;
				}
			}
		}
		
		[Column(Storage="_CanReissurance", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> CanReissurance
		{
			get
			{
				return this._CanReissurance;
			}
			set
			{
				if ((this._CanReissurance != value))
				{
					this._CanReissurance = value;
				}
			}
		}
		
		[Column(Storage="_QuotaYear", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int QuotaYear
		{
			get
			{
				return this._QuotaYear;
			}
			set
			{
				if ((this._QuotaYear != value))
				{
					this._QuotaYear = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					this._CNCategoryID = value;
				}
			}
		}
		
		[Column(Storage="_Country3ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Country3ID
		{
			get
			{
				return this._Country3ID;
			}
			set
			{
				if ((this._Country3ID != value))
				{
					this._Country3ID = value;
				}
			}
		}
		
		[Column(Storage="_QuoteOwnerINN", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string QuoteOwnerINN
		{
			get
			{
				return this._QuoteOwnerINN;
			}
			set
			{
				if ((this._QuoteOwnerINN != value))
				{
					this._QuoteOwnerINN = value;
				}
			}
		}
		
		[Column(Storage="_QuoteOwnerType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char QuoteOwnerType
		{
			get
			{
				return this._QuoteOwnerType;
			}
			set
			{
				if ((this._QuoteOwnerType != value))
				{
					this._QuoteOwnerType = value;
				}
			}
		}
		
		[Column(Storage="_DealerName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DealerName
		{
			get
			{
				return this._DealerName;
			}
			set
			{
				if ((this._DealerName != value))
				{
					this._DealerName = value;
				}
			}
		}
		
		[Column(Storage="_ApplicantGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ApplicantGUID
		{
			get
			{
				return this._ApplicantGUID;
			}
			set
			{
				if ((this._ApplicantGUID != value))
				{
					this._ApplicantGUID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.R_QuotaUse2_View")]
	public partial class R_QuotaUse2_View
	{
		
		private System.Nullable<decimal> _Volume;
		
		private int _QuotaID;
		
		private System.Nullable<System.Guid> _OrderGUID;
		
		private System.Nullable<decimal> _RedistributionPercent;
		
		private System.Nullable<int> _QuotaRedistributionID;
		
		private string _LicenseNumber;
		
		private System.Nullable<decimal> _ResolvedQuantity;
		
		private System.Nullable<decimal> _FactShippedQuantity;
		
		private string _SysName;
		
		private string _Title;
		
		private System.Nullable<decimal> _RedistributedVolume;
		
		private System.Nullable<System.DateTime> _FormDate;
		
		private System.Nullable<decimal> _UsedVolume;
		
		private System.Nullable<decimal> _ResolvedOrShipped;
		
		private System.Nullable<decimal> _ResolvedOrShippedUsedRedistrib;
		
		private int _CountryGroupID;
		
		private System.Nullable<System.Guid> _CountryGroupMasterObjectGUID;
		
		private System.Nullable<System.Guid> _CNCategoryMasterObjectGUID;
		
		private string _QuotaOwnerTitle;
		
		private System.Nullable<System.Guid> _RepresentationMasterObjectGUID;
		
		private System.Nullable<System.Guid> _CountryOriginMasterObjectGUID;
		
		private System.Nullable<System.Guid> _CNMasterObjectGUID;
		
		private System.Guid _QuoteOwnerGUID;
		
		private int _OperationTypeID;
		
		private System.Nullable<bool> _CanReissurance;
		
		private int _QuotaYear;
		
		private int _CNCategoryID;
		
		private System.Nullable<int> _Country3ID;
		
		private string _QuoteOwnerINN;
		
		private char _QuoteOwnerType;
		
		private string _DealerName;
		
		private System.Nullable<System.Guid> _ApplicantGUID;
		
		public R_QuotaUse2_View()
		{
		}
		
		[Column(Storage="_Volume", DbType="Decimal(32,18)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this._Volume = value;
				}
			}
		}
		
		[Column(Storage="_QuotaID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int QuotaID
		{
			get
			{
				return this._QuotaID;
			}
			set
			{
				if ((this._QuotaID != value))
				{
					this._QuotaID = value;
				}
			}
		}
		
		[Column(Storage="_OrderGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> OrderGUID
		{
			get
			{
				return this._OrderGUID;
			}
			set
			{
				if ((this._OrderGUID != value))
				{
					this._OrderGUID = value;
				}
			}
		}
		
		[Column(Storage="_RedistributionPercent", DbType="Decimal(7,4)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RedistributionPercent
		{
			get
			{
				return this._RedistributionPercent;
			}
			set
			{
				if ((this._RedistributionPercent != value))
				{
					this._RedistributionPercent = value;
				}
			}
		}
		
		[Column(Storage="_QuotaRedistributionID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> QuotaRedistributionID
		{
			get
			{
				return this._QuotaRedistributionID;
			}
			set
			{
				if ((this._QuotaRedistributionID != value))
				{
					this._QuotaRedistributionID = value;
				}
			}
		}
		
		[Column(Storage="_LicenseNumber", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string LicenseNumber
		{
			get
			{
				return this._LicenseNumber;
			}
			set
			{
				if ((this._LicenseNumber != value))
				{
					this._LicenseNumber = value;
				}
			}
		}
		
		[Column(Storage="_ResolvedQuantity", DbType="Decimal(20,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedQuantity
		{
			get
			{
				return this._ResolvedQuantity;
			}
			set
			{
				if ((this._ResolvedQuantity != value))
				{
					this._ResolvedQuantity = value;
				}
			}
		}
		
		[Column(Storage="_FactShippedQuantity", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> FactShippedQuantity
		{
			get
			{
				return this._FactShippedQuantity;
			}
			set
			{
				if ((this._FactShippedQuantity != value))
				{
					this._FactShippedQuantity = value;
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this._SysName = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_RedistributedVolume", DbType="Decimal(36,18)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RedistributedVolume
		{
			get
			{
				return this._RedistributedVolume;
			}
			set
			{
				if ((this._RedistributedVolume != value))
				{
					this._RedistributedVolume = value;
				}
			}
		}
		
		[Column(Storage="_FormDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FormDate
		{
			get
			{
				return this._FormDate;
			}
			set
			{
				if ((this._FormDate != value))
				{
					this._FormDate = value;
				}
			}
		}
		
		[Column(Storage="_UsedVolume", DbType="Decimal(20,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> UsedVolume
		{
			get
			{
				return this._UsedVolume;
			}
			set
			{
				if ((this._UsedVolume != value))
				{
					this._UsedVolume = value;
				}
			}
		}
		
		[Column(Storage="_ResolvedOrShipped", DbType="Decimal(33,18)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedOrShipped
		{
			get
			{
				return this._ResolvedOrShipped;
			}
			set
			{
				if ((this._ResolvedOrShipped != value))
				{
					this._ResolvedOrShipped = value;
				}
			}
		}
		
		[Column(Storage="_ResolvedOrShippedUsedRedistrib", DbType="Decimal(37,18)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedOrShippedUsedRedistrib
		{
			get
			{
				return this._ResolvedOrShippedUsedRedistrib;
			}
			set
			{
				if ((this._ResolvedOrShippedUsedRedistrib != value))
				{
					this._ResolvedOrShippedUsedRedistrib = value;
				}
			}
		}
		
		[Column(Storage="_CountryGroupID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CountryGroupID
		{
			get
			{
				return this._CountryGroupID;
			}
			set
			{
				if ((this._CountryGroupID != value))
				{
					this._CountryGroupID = value;
				}
			}
		}
		
		[Column(Storage="_CountryGroupMasterObjectGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> CountryGroupMasterObjectGUID
		{
			get
			{
				return this._CountryGroupMasterObjectGUID;
			}
			set
			{
				if ((this._CountryGroupMasterObjectGUID != value))
				{
					this._CountryGroupMasterObjectGUID = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryMasterObjectGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> CNCategoryMasterObjectGUID
		{
			get
			{
				return this._CNCategoryMasterObjectGUID;
			}
			set
			{
				if ((this._CNCategoryMasterObjectGUID != value))
				{
					this._CNCategoryMasterObjectGUID = value;
				}
			}
		}
		
		[Column(Storage="_QuotaOwnerTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string QuotaOwnerTitle
		{
			get
			{
				return this._QuotaOwnerTitle;
			}
			set
			{
				if ((this._QuotaOwnerTitle != value))
				{
					this._QuotaOwnerTitle = value;
				}
			}
		}
		
		[Column(Storage="_RepresentationMasterObjectGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> RepresentationMasterObjectGUID
		{
			get
			{
				return this._RepresentationMasterObjectGUID;
			}
			set
			{
				if ((this._RepresentationMasterObjectGUID != value))
				{
					this._RepresentationMasterObjectGUID = value;
				}
			}
		}
		
		[Column(Storage="_CountryOriginMasterObjectGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> CountryOriginMasterObjectGUID
		{
			get
			{
				return this._CountryOriginMasterObjectGUID;
			}
			set
			{
				if ((this._CountryOriginMasterObjectGUID != value))
				{
					this._CountryOriginMasterObjectGUID = value;
				}
			}
		}
		
		[Column(Storage="_CNMasterObjectGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> CNMasterObjectGUID
		{
			get
			{
				return this._CNMasterObjectGUID;
			}
			set
			{
				if ((this._CNMasterObjectGUID != value))
				{
					this._CNMasterObjectGUID = value;
				}
			}
		}
		
		[Column(Storage="_QuoteOwnerGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid QuoteOwnerGUID
		{
			get
			{
				return this._QuoteOwnerGUID;
			}
			set
			{
				if ((this._QuoteOwnerGUID != value))
				{
					this._QuoteOwnerGUID = value;
				}
			}
		}
		
		[Column(Storage="_OperationTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OperationTypeID
		{
			get
			{
				return this._OperationTypeID;
			}
			set
			{
				if ((this._OperationTypeID != value))
				{
					this._OperationTypeID = value;
				}
			}
		}
		
		[Column(Storage="_CanReissurance", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> CanReissurance
		{
			get
			{
				return this._CanReissurance;
			}
			set
			{
				if ((this._CanReissurance != value))
				{
					this._CanReissurance = value;
				}
			}
		}
		
		[Column(Storage="_QuotaYear", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int QuotaYear
		{
			get
			{
				return this._QuotaYear;
			}
			set
			{
				if ((this._QuotaYear != value))
				{
					this._QuotaYear = value;
				}
			}
		}
		
		[Column(Storage="_CNCategoryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CNCategoryID
		{
			get
			{
				return this._CNCategoryID;
			}
			set
			{
				if ((this._CNCategoryID != value))
				{
					this._CNCategoryID = value;
				}
			}
		}
		
		[Column(Storage="_Country3ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Country3ID
		{
			get
			{
				return this._Country3ID;
			}
			set
			{
				if ((this._Country3ID != value))
				{
					this._Country3ID = value;
				}
			}
		}
		
		[Column(Storage="_QuoteOwnerINN", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string QuoteOwnerINN
		{
			get
			{
				return this._QuoteOwnerINN;
			}
			set
			{
				if ((this._QuoteOwnerINN != value))
				{
					this._QuoteOwnerINN = value;
				}
			}
		}
		
		[Column(Storage="_QuoteOwnerType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char QuoteOwnerType
		{
			get
			{
				return this._QuoteOwnerType;
			}
			set
			{
				if ((this._QuoteOwnerType != value))
				{
					this._QuoteOwnerType = value;
				}
			}
		}
		
		[Column(Storage="_DealerName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DealerName
		{
			get
			{
				return this._DealerName;
			}
			set
			{
				if ((this._DealerName != value))
				{
					this._DealerName = value;
				}
			}
		}
		
		[Column(Storage="_ApplicantGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ApplicantGUID
		{
			get
			{
				return this._ApplicantGUID;
			}
			set
			{
				if ((this._ApplicantGUID != value))
				{
					this._ApplicantGUID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.R_VisitRecord")]
	public partial class R_VisitRecord
	{
		
		private int _RepresentationID;
		
		private int _EmployeeID;
		
		private int _VisitPurposeID;
		
		private System.Guid _ContactorGUID;
		
		private System.DateTime _VisitDate;
		
		private string _Title;
		
		private string _Visitor;
		
		private string _VisitorPost;
		
		private int _Method;
		
		private string _Email;
		
		private string _Phone;
		
		private string _Comment;
		
		private bool _IsDeleted;
		
		private string _INN;
		
		private string _ContactorTitle;
		
		private string _PurposeTitle;
		
		private string _RepresentationTitle;
		
		private string _ShortName;
		
		private string _EmployeeTitle;
		
		private string _MethodTitle;
		
		private string _VisitDateString;
		
		private string _VisitDateMonth;
		
		private string _VisitDateOrder;
		
		public R_VisitRecord()
		{
		}
		
		[Column(Storage="_RepresentationID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					this._RepresentationID = value;
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this._EmployeeID = value;
				}
			}
		}
		
		[Column(Storage="_VisitPurposeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VisitPurposeID
		{
			get
			{
				return this._VisitPurposeID;
			}
			set
			{
				if ((this._VisitPurposeID != value))
				{
					this._VisitPurposeID = value;
				}
			}
		}
		
		[Column(Storage="_ContactorGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ContactorGUID
		{
			get
			{
				return this._ContactorGUID;
			}
			set
			{
				if ((this._ContactorGUID != value))
				{
					this._ContactorGUID = value;
				}
			}
		}
		
		[Column(Storage="_VisitDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime VisitDate
		{
			get
			{
				return this._VisitDate;
			}
			set
			{
				if ((this._VisitDate != value))
				{
					this._VisitDate = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_Visitor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Visitor
		{
			get
			{
				return this._Visitor;
			}
			set
			{
				if ((this._Visitor != value))
				{
					this._Visitor = value;
				}
			}
		}
		
		[Column(Storage="_VisitorPost", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string VisitorPost
		{
			get
			{
				return this._VisitorPost;
			}
			set
			{
				if ((this._VisitorPost != value))
				{
					this._VisitorPost = value;
				}
			}
		}
		
		[Column(Storage="_Method", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this._Method = value;
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this._Email = value;
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this._Phone = value;
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this._IsDeleted = value;
				}
			}
		}
		
		[Column(Storage="_INN", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string INN
		{
			get
			{
				return this._INN;
			}
			set
			{
				if ((this._INN != value))
				{
					this._INN = value;
				}
			}
		}
		
		[Column(Storage="_ContactorTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ContactorTitle
		{
			get
			{
				return this._ContactorTitle;
			}
			set
			{
				if ((this._ContactorTitle != value))
				{
					this._ContactorTitle = value;
				}
			}
		}
		
		[Column(Storage="_PurposeTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PurposeTitle
		{
			get
			{
				return this._PurposeTitle;
			}
			set
			{
				if ((this._PurposeTitle != value))
				{
					this._PurposeTitle = value;
				}
			}
		}
		
		[Column(Storage="_RepresentationTitle", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RepresentationTitle
		{
			get
			{
				return this._RepresentationTitle;
			}
			set
			{
				if ((this._RepresentationTitle != value))
				{
					this._RepresentationTitle = value;
				}
			}
		}
		
		[Column(Storage="_ShortName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this._ShortName = value;
				}
			}
		}
		
		[Column(Storage="_EmployeeTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string EmployeeTitle
		{
			get
			{
				return this._EmployeeTitle;
			}
			set
			{
				if ((this._EmployeeTitle != value))
				{
					this._EmployeeTitle = value;
				}
			}
		}
		
		[Column(Storage="_MethodTitle", DbType="VarChar(14) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MethodTitle
		{
			get
			{
				return this._MethodTitle;
			}
			set
			{
				if ((this._MethodTitle != value))
				{
					this._MethodTitle = value;
				}
			}
		}
		
		[Column(Storage="_VisitDateString", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string VisitDateString
		{
			get
			{
				return this._VisitDateString;
			}
			set
			{
				if ((this._VisitDateString != value))
				{
					this._VisitDateString = value;
				}
			}
		}
		
		[Column(Storage="_VisitDateMonth", DbType="NVarChar(22)", UpdateCheck=UpdateCheck.Never)]
		public string VisitDateMonth
		{
			get
			{
				return this._VisitDateMonth;
			}
			set
			{
				if ((this._VisitDateMonth != value))
				{
					this._VisitDateMonth = value;
				}
			}
		}
		
		[Column(Storage="_VisitDateOrder", DbType="NVarChar(24)", UpdateCheck=UpdateCheck.Never)]
		public string VisitDateOrder
		{
			get
			{
				return this._VisitDateOrder;
			}
			set
			{
				if ((this._VisitDateOrder != value))
				{
					this._VisitDateOrder = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.ReplicatedFile")]
	public partial class ReplicatedFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReplicatedFileID;
		
		private string _Extension;
		
		private string _FolderTitle;
		
		private System.Guid _Guid;
		
		private int _Length;
		
		private string _Title;
		
		private System.Data.Linq.Binary _Data;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReplicatedFileIDChanging(int value);
    partial void OnReplicatedFileIDChanged();
    partial void OnExtensionChanging(string value);
    partial void OnExtensionChanged();
    partial void OnFolderTitleChanging(string value);
    partial void OnFolderTitleChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnLengthChanging(int value);
    partial void OnLengthChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    #endregion
		
		public ReplicatedFile()
		{
			OnCreated();
		}
		
		[Column(Storage="_ReplicatedFileID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReplicatedFileID
		{
			get
			{
				return this._ReplicatedFileID;
			}
			set
			{
				if ((this._ReplicatedFileID != value))
				{
					this.OnReplicatedFileIDChanging(value);
					this.SendPropertyChanging();
					this._ReplicatedFileID = value;
					this.SendPropertyChanged("ReplicatedFileID");
					this.OnReplicatedFileIDChanged();
				}
			}
		}
		
		[Column(Storage="_Extension", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this.OnExtensionChanging(value);
					this.SendPropertyChanging();
					this._Extension = value;
					this.SendPropertyChanged("Extension");
					this.OnExtensionChanged();
				}
			}
		}
		
		[Column(Storage="_FolderTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FolderTitle
		{
			get
			{
				return this._FolderTitle;
			}
			set
			{
				if ((this._FolderTitle != value))
				{
					this.OnFolderTitleChanging(value);
					this.SendPropertyChanging();
					this._FolderTitle = value;
					this.SendPropertyChanged("FolderTitle");
					this.OnFolderTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_Length", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Representation")]
	public partial class Representation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RepresentationID;
		
		private int _RFSubjectID;
		
		private string _Title;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Email;
		
		private string _AddInfo;
		
		private System.Nullable<int> _ParentID;
		
		private string _ShortName;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private System.Nullable<decimal> _OldID;
		
		private string _OKPO;
		
		private string _OGRN;
		
		private string _INN;
		
		private string _DepartmentCode;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private string _DepartmentCodeFull;
		
		private System.Guid _MasterObjectGUID;
		
		private string _BankTitle;
		
		private string _BankAddress;
		
		private string _BankBIK;
		
		private string _BankAccount;
		
		private string _BankCorrespondentAccount;
		
		private string _RecipientTitle;
		
		private string _RecipientINN;
		
		private string _RecipientOKATO;
		
		private string _KPP;
		
		private bool _IsVisit;
		
		private System.Nullable<int> _RecordType;
		
		private System.Nullable<System.DateTime> _RecordTime;
		
		private bool _IsDeleted;
		
		private EntitySet<Blank> _Blank;
		
		private EntitySet<C_CNCategoryItemRepresentations> _C_CNCategoryItemRepresentations;
		
		private EntitySet<Contractor> _Contractor;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<HST_Contractor> _HST_Contractor;
		
		private EntitySet<OrderDoc> _OrderDoc;
		
		private EntitySet<OrderDoc> _OrderDoc_Representation;
		
		private EntitySet<PaymentOrder> _PaymentOrder;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<Representation> _Parent;
		
		private EntitySet<Representation> _Representation_Parent;
		
		private EntityRef<C_RFSubject> _RFSubject;
		
		private EntitySet<TreasuryPayment> _TreasuryPayment;
		
		private EntitySet<VisitRecord> _VisitRecord;
		
		private EntitySet<FullRepresentation> _FullRepresentation;
		
		private EntitySet<FullRepresentation> _R_1040;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRepresentationIDChanging(int value);
    partial void OnRepresentationIDChanged();
    partial void OnRFSubjectIDChanging(int value);
    partial void OnRFSubjectIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddInfoChanging(string value);
    partial void OnAddInfoChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnOldIDChanging(System.Nullable<decimal> value);
    partial void OnOldIDChanged();
    partial void OnOKPOChanging(string value);
    partial void OnOKPOChanged();
    partial void OnOGRNChanging(string value);
    partial void OnOGRNChanged();
    partial void OnINNChanging(string value);
    partial void OnINNChanged();
    partial void OnDepartmentCodeChanging(string value);
    partial void OnDepartmentCodeChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnDepartmentCodeFullChanging(string value);
    partial void OnDepartmentCodeFullChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    partial void OnBankTitleChanging(string value);
    partial void OnBankTitleChanged();
    partial void OnBankAddressChanging(string value);
    partial void OnBankAddressChanged();
    partial void OnBankBIKChanging(string value);
    partial void OnBankBIKChanged();
    partial void OnBankAccountChanging(string value);
    partial void OnBankAccountChanged();
    partial void OnBankCorrespondentAccountChanging(string value);
    partial void OnBankCorrespondentAccountChanged();
    partial void OnRecipientTitleChanging(string value);
    partial void OnRecipientTitleChanged();
    partial void OnRecipientINNChanging(string value);
    partial void OnRecipientINNChanged();
    partial void OnRecipientOKATOChanging(string value);
    partial void OnRecipientOKATOChanged();
    partial void OnKPPChanging(string value);
    partial void OnKPPChanged();
    partial void OnIsVisitChanging(bool value);
    partial void OnIsVisitChanged();
    partial void OnRecordTypeChanging(System.Nullable<int> value);
    partial void OnRecordTypeChanged();
    partial void OnRecordTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnRecordTimeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Representation()
		{
			this._Blank = new EntitySet<Blank>(new Action<Blank>(this.attach_Blank), new Action<Blank>(this.detach_Blank));
			this._C_CNCategoryItemRepresentations = new EntitySet<C_CNCategoryItemRepresentations>(new Action<C_CNCategoryItemRepresentations>(this.attach_C_CNCategoryItemRepresentations), new Action<C_CNCategoryItemRepresentations>(this.detach_C_CNCategoryItemRepresentations));
			this._Contractor = new EntitySet<Contractor>(new Action<Contractor>(this.attach_Contractor), new Action<Contractor>(this.detach_Contractor));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._HST_Contractor = new EntitySet<HST_Contractor>(new Action<HST_Contractor>(this.attach_HST_Contractor), new Action<HST_Contractor>(this.detach_HST_Contractor));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._OrderDoc_Representation = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc_Representation), new Action<OrderDoc>(this.detach_OrderDoc_Representation));
			this._PaymentOrder = new EntitySet<PaymentOrder>(new Action<PaymentOrder>(this.attach_PaymentOrder), new Action<PaymentOrder>(this.detach_PaymentOrder));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Parent = default(EntityRef<Representation>);
			this._Representation_Parent = new EntitySet<Representation>(new Action<Representation>(this.attach_Representation_Parent), new Action<Representation>(this.detach_Representation_Parent));
			this._RFSubject = default(EntityRef<C_RFSubject>);
			this._TreasuryPayment = new EntitySet<TreasuryPayment>(new Action<TreasuryPayment>(this.attach_TreasuryPayment), new Action<TreasuryPayment>(this.detach_TreasuryPayment));
			this._VisitRecord = new EntitySet<VisitRecord>(new Action<VisitRecord>(this.attach_VisitRecord), new Action<VisitRecord>(this.detach_VisitRecord));
			this._FullRepresentation = new EntitySet<FullRepresentation>(new Action<FullRepresentation>(this.attach_FullRepresentation), new Action<FullRepresentation>(this.detach_FullRepresentation));
			this._R_1040 = new EntitySet<FullRepresentation>(new Action<FullRepresentation>(this.attach_R_1040), new Action<FullRepresentation>(this.detach_R_1040));
			OnCreated();
		}
		
		[Column(Storage="_RepresentationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					this.OnRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentationID = value;
					this.SendPropertyChanged("RepresentationID");
					this.OnRepresentationIDChanged();
				}
			}
		}
		
		[Column(Storage="_RFSubjectID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int RFSubjectID
		{
			get
			{
				return this._RFSubjectID;
			}
			set
			{
				if ((this._RFSubjectID != value))
				{
					if (this._RFSubject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRFSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._RFSubjectID = value;
					this.SendPropertyChanged("RFSubjectID");
					this.OnRFSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_AddInfo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string AddInfo
		{
			get
			{
				return this._AddInfo;
			}
			set
			{
				if ((this._AddInfo != value))
				{
					this.OnAddInfoChanging(value);
					this.SendPropertyChanging();
					this._AddInfo = value;
					this.SendPropertyChanged("AddInfo");
					this.OnAddInfoChanged();
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShortName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_OldID", DbType="Decimal(14,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}
		
		[Column(Storage="_OKPO", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string OKPO
		{
			get
			{
				return this._OKPO;
			}
			set
			{
				if ((this._OKPO != value))
				{
					this.OnOKPOChanging(value);
					this.SendPropertyChanging();
					this._OKPO = value;
					this.SendPropertyChanged("OKPO");
					this.OnOKPOChanged();
				}
			}
		}
		
		[Column(Storage="_OGRN", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string OGRN
		{
			get
			{
				return this._OGRN;
			}
			set
			{
				if ((this._OGRN != value))
				{
					this.OnOGRNChanging(value);
					this.SendPropertyChanging();
					this._OGRN = value;
					this.SendPropertyChanged("OGRN");
					this.OnOGRNChanged();
				}
			}
		}
		
		[Column(Storage="_INN", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string INN
		{
			get
			{
				return this._INN;
			}
			set
			{
				if ((this._INN != value))
				{
					this.OnINNChanging(value);
					this.SendPropertyChanging();
					this._INN = value;
					this.SendPropertyChanged("INN");
					this.OnINNChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentCode", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DepartmentCode
		{
			get
			{
				return this._DepartmentCode;
			}
			set
			{
				if ((this._DepartmentCode != value))
				{
					this.OnDepartmentCodeChanging(value);
					this.SendPropertyChanging();
					this._DepartmentCode = value;
					this.SendPropertyChanged("DepartmentCode");
					this.OnDepartmentCodeChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentCodeFull", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DepartmentCodeFull
		{
			get
			{
				return this._DepartmentCodeFull;
			}
			set
			{
				if ((this._DepartmentCodeFull != value))
				{
					this.OnDepartmentCodeFullChanging(value);
					this.SendPropertyChanging();
					this._DepartmentCodeFull = value;
					this.SendPropertyChanged("DepartmentCodeFull");
					this.OnDepartmentCodeFullChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_BankTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BankTitle
		{
			get
			{
				return this._BankTitle;
			}
			set
			{
				if ((this._BankTitle != value))
				{
					this.OnBankTitleChanging(value);
					this.SendPropertyChanging();
					this._BankTitle = value;
					this.SendPropertyChanged("BankTitle");
					this.OnBankTitleChanged();
				}
			}
		}
		
		[Column(Storage="_BankAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BankAddress
		{
			get
			{
				return this._BankAddress;
			}
			set
			{
				if ((this._BankAddress != value))
				{
					this.OnBankAddressChanging(value);
					this.SendPropertyChanging();
					this._BankAddress = value;
					this.SendPropertyChanged("BankAddress");
					this.OnBankAddressChanged();
				}
			}
		}
		
		[Column(Storage="_BankBIK", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BankBIK
		{
			get
			{
				return this._BankBIK;
			}
			set
			{
				if ((this._BankBIK != value))
				{
					this.OnBankBIKChanging(value);
					this.SendPropertyChanging();
					this._BankBIK = value;
					this.SendPropertyChanged("BankBIK");
					this.OnBankBIKChanged();
				}
			}
		}
		
		[Column(Storage="_BankAccount", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BankAccount
		{
			get
			{
				return this._BankAccount;
			}
			set
			{
				if ((this._BankAccount != value))
				{
					this.OnBankAccountChanging(value);
					this.SendPropertyChanging();
					this._BankAccount = value;
					this.SendPropertyChanged("BankAccount");
					this.OnBankAccountChanged();
				}
			}
		}
		
		[Column(Storage="_BankCorrespondentAccount", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BankCorrespondentAccount
		{
			get
			{
				return this._BankCorrespondentAccount;
			}
			set
			{
				if ((this._BankCorrespondentAccount != value))
				{
					this.OnBankCorrespondentAccountChanging(value);
					this.SendPropertyChanging();
					this._BankCorrespondentAccount = value;
					this.SendPropertyChanged("BankCorrespondentAccount");
					this.OnBankCorrespondentAccountChanged();
				}
			}
		}
		
		[Column(Storage="_RecipientTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string RecipientTitle
		{
			get
			{
				return this._RecipientTitle;
			}
			set
			{
				if ((this._RecipientTitle != value))
				{
					this.OnRecipientTitleChanging(value);
					this.SendPropertyChanging();
					this._RecipientTitle = value;
					this.SendPropertyChanged("RecipientTitle");
					this.OnRecipientTitleChanged();
				}
			}
		}
		
		[Column(Storage="_RecipientINN", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string RecipientINN
		{
			get
			{
				return this._RecipientINN;
			}
			set
			{
				if ((this._RecipientINN != value))
				{
					this.OnRecipientINNChanging(value);
					this.SendPropertyChanging();
					this._RecipientINN = value;
					this.SendPropertyChanged("RecipientINN");
					this.OnRecipientINNChanged();
				}
			}
		}
		
		[Column(Storage="_RecipientOKATO", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string RecipientOKATO
		{
			get
			{
				return this._RecipientOKATO;
			}
			set
			{
				if ((this._RecipientOKATO != value))
				{
					this.OnRecipientOKATOChanging(value);
					this.SendPropertyChanging();
					this._RecipientOKATO = value;
					this.SendPropertyChanged("RecipientOKATO");
					this.OnRecipientOKATOChanged();
				}
			}
		}
		
		[Column(Storage="_KPP", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string KPP
		{
			get
			{
				return this._KPP;
			}
			set
			{
				if ((this._KPP != value))
				{
					this.OnKPPChanging(value);
					this.SendPropertyChanging();
					this._KPP = value;
					this.SendPropertyChanged("KPP");
					this.OnKPPChanged();
				}
			}
		}
		
		[Column(Storage="_IsVisit", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsVisit
		{
			get
			{
				return this._IsVisit;
			}
			set
			{
				if ((this._IsVisit != value))
				{
					this.OnIsVisitChanging(value);
					this.SendPropertyChanging();
					this._IsVisit = value;
					this.SendPropertyChanged("IsVisit");
					this.OnIsVisitChanged();
				}
			}
		}
		
		[Column(Storage="_RecordType", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RecordType
		{
			get
			{
				return this._RecordType;
			}
			set
			{
				if ((this._RecordType != value))
				{
					this.OnRecordTypeChanging(value);
					this.SendPropertyChanging();
					this._RecordType = value;
					this.SendPropertyChanged("RecordType");
					this.OnRecordTypeChanged();
				}
			}
		}
		
		[Column(Storage="_RecordTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> RecordTime
		{
			get
			{
				return this._RecordTime;
			}
			set
			{
				if ((this._RecordTime != value))
				{
					this.OnRecordTimeChanging(value);
					this.SendPropertyChanging();
					this._RecordTime = value;
					this.SendPropertyChanged("RecordTime");
					this.OnRecordTimeChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_Blank_Representation", Storage="_Blank", ThisKey="RepresentationID", OtherKey="RepresentationID", DeleteRule="NO ACTION")]
		public EntitySet<Blank> Blank
		{
			get
			{
				return this._Blank;
			}
			set
			{
				this._Blank.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CNCategoryItemRepresentations_Representations", Storage="_C_CNCategoryItemRepresentations", ThisKey="RepresentationID", OtherKey="RepresentationsID", DeleteRule="CASCADE")]
		public EntitySet<C_CNCategoryItemRepresentations> C_CNCategoryItemRepresentations
		{
			get
			{
				return this._C_CNCategoryItemRepresentations;
			}
			set
			{
				this._C_CNCategoryItemRepresentations.Assign(value);
			}
		}
		
		[Association(Name="FK_Contractor_CreatorRepresentation", Storage="_Contractor", ThisKey="RepresentationID", OtherKey="CreatorRepresentationID", DeleteRule="NO ACTION")]
		public EntitySet<Contractor> Contractor
		{
			get
			{
				return this._Contractor;
			}
			set
			{
				this._Contractor.Assign(value);
			}
		}
		
		[Association(Name="FK_Employee_Representation", Storage="_Employees", ThisKey="RepresentationID", OtherKey="RepresentationID", DeleteRule="NO ACTION")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[Association(Name="FK_HST_Contractor_CreatorRepresentation", Storage="_HST_Contractor", ThisKey="RepresentationID", OtherKey="CreatorRepresentationID", DeleteRule="NO ACTION")]
		public EntitySet<HST_Contractor> HST_Contractor
		{
			get
			{
				return this._HST_Contractor;
			}
			set
			{
				this._HST_Contractor.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_Copy_Representation", Storage="_OrderDoc", ThisKey="RepresentationID", OtherKey="Copy_RepresentationID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_Representation", Storage="_OrderDoc_Representation", ThisKey="RepresentationID", OtherKey="RepresentationID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc_Representation
		{
			get
			{
				return this._OrderDoc_Representation;
			}
			set
			{
				this._OrderDoc_Representation.Assign(value);
			}
		}
		
		[Association(Name="FK_PaymentOrder_Representation", Storage="_PaymentOrder", ThisKey="RepresentationID", OtherKey="RepresentationID", DeleteRule="NO ACTION")]
		public EntitySet<PaymentOrder> PaymentOrder
		{
			get
			{
				return this._PaymentOrder;
			}
			set
			{
				this._PaymentOrder.Assign(value);
			}
		}
		
		[Association(Name="FK_Representation_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.Representation.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.Representation.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_Representation_Parent", Storage="_Parent", ThisKey="ParentID", OtherKey="RepresentationID", IsForeignKey=true)]
		public Representation Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				Representation previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.Representation_Parent.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.Representation_Parent.Add(this);
						this._ParentID = value.RepresentationID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		[Association(Name="FK_Representation_Parent", Storage="_Representation_Parent", ThisKey="RepresentationID", OtherKey="ParentID", DeleteRule="NO ACTION")]
		public EntitySet<Representation> Representation_Parent
		{
			get
			{
				return this._Representation_Parent;
			}
			set
			{
				this._Representation_Parent.Assign(value);
			}
		}
		
		[Association(Name="FK_Representation_RFSubject", Storage="_RFSubject", ThisKey="RFSubjectID", OtherKey="RFSubjectID", IsForeignKey=true)]
		public C_RFSubject RFSubject
		{
			get
			{
				return this._RFSubject.Entity;
			}
			set
			{
				C_RFSubject previousValue = this._RFSubject.Entity;
				if (((previousValue != value) 
							|| (this._RFSubject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RFSubject.Entity = null;
						previousValue.Representation.Remove(this);
					}
					this._RFSubject.Entity = value;
					if ((value != null))
					{
						value.Representation.Add(this);
						this._RFSubjectID = value.RFSubjectID;
					}
					else
					{
						this._RFSubjectID = default(int);
					}
					this.SendPropertyChanged("RFSubject");
				}
			}
		}
		
		[Association(Name="FK_TreasuryPayment_Representation", Storage="_TreasuryPayment", ThisKey="RepresentationID", OtherKey="RepresentationID", DeleteRule="NO ACTION")]
		public EntitySet<TreasuryPayment> TreasuryPayment
		{
			get
			{
				return this._TreasuryPayment;
			}
			set
			{
				this._TreasuryPayment.Assign(value);
			}
		}
		
		[Association(Name="FK_VisitRecord_Representation", Storage="_VisitRecord", ThisKey="RepresentationID", OtherKey="RepresentationID", DeleteRule="NO ACTION")]
		public EntitySet<VisitRecord> VisitRecord
		{
			get
			{
				return this._VisitRecord;
			}
			set
			{
				this._VisitRecord.Assign(value);
			}
		}
		
		[Association(Name="R_1039", Storage="_FullRepresentation", ThisKey="RepresentationID", OtherKey="ParentRepresentationID", DeleteRule="NO ACTION")]
		public EntitySet<FullRepresentation> FullRepresentation
		{
			get
			{
				return this._FullRepresentation;
			}
			set
			{
				this._FullRepresentation.Assign(value);
			}
		}
		
		[Association(Storage="_R_1040", ThisKey="RepresentationID", OtherKey="ChildRepresentationID", DeleteRule="CASCADE")]
		public EntitySet<FullRepresentation> R_1040
		{
			get
			{
				return this._R_1040;
			}
			set
			{
				this._R_1040.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Blank(Blank entity)
		{
			this.SendPropertyChanging();
			entity.Representation = this;
		}
		
		private void detach_Blank(Blank entity)
		{
			this.SendPropertyChanging();
			entity.Representation = null;
		}
		
		private void attach_C_CNCategoryItemRepresentations(C_CNCategoryItemRepresentations entity)
		{
			this.SendPropertyChanging();
			entity.Representations = this;
		}
		
		private void detach_C_CNCategoryItemRepresentations(C_CNCategoryItemRepresentations entity)
		{
			this.SendPropertyChanging();
			entity.Representations = null;
		}
		
		private void attach_Contractor(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.CreatorRepresentation = this;
		}
		
		private void detach_Contractor(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.CreatorRepresentation = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Representation = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Representation = null;
		}
		
		private void attach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.CreatorRepresentation = this;
		}
		
		private void detach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.CreatorRepresentation = null;
		}
		
		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Copy_Representation = this;
		}
		
		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Copy_Representation = null;
		}
		
		private void attach_OrderDoc_Representation(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Representation = this;
		}
		
		private void detach_OrderDoc_Representation(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Representation = null;
		}
		
		private void attach_PaymentOrder(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.Representation = this;
		}
		
		private void detach_PaymentOrder(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.Representation = null;
		}
		
		private void attach_Representation_Parent(Representation entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_Representation_Parent(Representation entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
		
		private void attach_TreasuryPayment(TreasuryPayment entity)
		{
			this.SendPropertyChanging();
			entity.Representation = this;
		}
		
		private void detach_TreasuryPayment(TreasuryPayment entity)
		{
			this.SendPropertyChanging();
			entity.Representation = null;
		}
		
		private void attach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.Representation = this;
		}
		
		private void detach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.Representation = null;
		}
		
		private void attach_FullRepresentation(FullRepresentation entity)
		{
			this.SendPropertyChanging();
			entity.R_1039 = this;
		}
		
		private void detach_FullRepresentation(FullRepresentation entity)
		{
			this.SendPropertyChanging();
			entity.R_1039 = null;
		}
		
		private void attach_R_1040(FullRepresentation entity)
		{
			this.SendPropertyChanging();
			entity.R_1040 = this;
		}
		
		private void detach_R_1040(FullRepresentation entity)
		{
			this.SendPropertyChanging();
			entity.R_1040 = null;
		}
	}
	
	[Table(Name="dbo.SpecificationCommon")]
	public partial class SpecificationCommon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpecificationCommonID;
		
		private System.Nullable<System.Guid> _OrderDocGUID;
		
		private System.Nullable<int> _MeasureID;
		
		private System.Nullable<int> _AdditionalMeasureID;
		
		private System.Nullable<int> _CurrencyID;
		
		private int _OldID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private EntityRef<C_Measure> _AdditionalMeasure;
		
		private EntityRef<C_Currency> _Currency;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<C_Measure> _Measure;
		
		private EntityRef<OrderDoc> _OrderDoc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpecificationCommonIDChanging(int value);
    partial void OnSpecificationCommonIDChanged();
    partial void OnOrderDocGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrderDocGUIDChanged();
    partial void OnMeasureIDChanging(System.Nullable<int> value);
    partial void OnMeasureIDChanged();
    partial void OnAdditionalMeasureIDChanging(System.Nullable<int> value);
    partial void OnAdditionalMeasureIDChanged();
    partial void OnCurrencyIDChanging(System.Nullable<int> value);
    partial void OnCurrencyIDChanged();
    partial void OnOldIDChanging(int value);
    partial void OnOldIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public SpecificationCommon()
		{
			this._AdditionalMeasure = default(EntityRef<C_Measure>);
			this._Currency = default(EntityRef<C_Currency>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Measure = default(EntityRef<C_Measure>);
			this._OrderDoc = default(EntityRef<OrderDoc>);
			OnCreated();
		}
		
		[Column(Storage="_SpecificationCommonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SpecificationCommonID
		{
			get
			{
				return this._SpecificationCommonID;
			}
			set
			{
				if ((this._SpecificationCommonID != value))
				{
					this.OnSpecificationCommonIDChanging(value);
					this.SendPropertyChanging();
					this._SpecificationCommonID = value;
					this.SendPropertyChanged("SpecificationCommonID");
					this.OnSpecificationCommonIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDocGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					if (this._Measure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_AdditionalMeasureID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> AdditionalMeasureID
		{
			get
			{
				return this._AdditionalMeasureID;
			}
			set
			{
				if ((this._AdditionalMeasureID != value))
				{
					if (this._AdditionalMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdditionalMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._AdditionalMeasureID = value;
					this.SendPropertyChanged("AdditionalMeasureID");
					this.OnAdditionalMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_CurrencyID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[Column(Storage="_OldID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_SpecificationCommon_AdditionalMeasure", Storage="_AdditionalMeasure", ThisKey="AdditionalMeasureID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure AdditionalMeasure
		{
			get
			{
				return this._AdditionalMeasure.Entity;
			}
			set
			{
				C_Measure previousValue = this._AdditionalMeasure.Entity;
				if (((previousValue != value) 
							|| (this._AdditionalMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AdditionalMeasure.Entity = null;
						previousValue.SpecificationCommon.Remove(this);
					}
					this._AdditionalMeasure.Entity = value;
					if ((value != null))
					{
						value.SpecificationCommon.Add(this);
						this._AdditionalMeasureID = value.MeasureID;
					}
					else
					{
						this._AdditionalMeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AdditionalMeasure");
				}
			}
		}
		
		[Association(Name="FK_SpecificationCommon_Currency", Storage="_Currency", ThisKey="CurrencyID", OtherKey="CurrencyID", IsForeignKey=true)]
		public C_Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				C_Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.SpecificationCommon.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.SpecificationCommon.Add(this);
						this._CurrencyID = value.CurrencyID;
					}
					else
					{
						this._CurrencyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[Association(Name="FK_SpecificationCommon_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.SpecificationCommon.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.SpecificationCommon.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_SpecificationCommon_Measure", Storage="_Measure", ThisKey="MeasureID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure Measure
		{
			get
			{
				return this._Measure.Entity;
			}
			set
			{
				C_Measure previousValue = this._Measure.Entity;
				if (((previousValue != value) 
							|| (this._Measure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure.Entity = null;
						previousValue.SpecificationCommon_Measure.Remove(this);
					}
					this._Measure.Entity = value;
					if ((value != null))
					{
						value.SpecificationCommon_Measure.Add(this);
						this._MeasureID = value.MeasureID;
					}
					else
					{
						this._MeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Measure");
				}
			}
		}
		
		[Association(Name="FK_SpecificationCommon_OrderDoc", Storage="_OrderDoc", ThisKey="OrderDocGUID", OtherKey="OrderGUID", IsForeignKey=true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value) 
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.SpecificationCommon.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.SpecificationCommon.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SpecificationItem")]
	public partial class SpecificationItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpecificationItemID;
		
		private System.Guid _OrderDocGUID;
		
		private string _CommodityName;
		
		private System.Nullable<int> _CountryID;
		
		private System.Nullable<int> _MeasureID;
		
		private System.Nullable<decimal> _ResolvedQuantity;
		
		private System.Nullable<decimal> _InvoiceCost;
		
		private System.Nullable<decimal> _StatisticCost;
		
		private string _AddInfo;
		
		private System.Nullable<int> _AdditionalMeasureID;
		
		private System.Nullable<decimal> _AdditionalResolvedQuantity;
		
		private System.Nullable<int> _Measure3ID;
		
		private System.Nullable<decimal> _ResolvedQuantity3;
		
		private System.Nullable<int> _SeqNo;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<decimal> _Discount;
		
		private System.Nullable<int> _CurrencyID;
		
		private System.Nullable<decimal> _Strength;
		
		private System.Nullable<int> _CNID;
		
		private int _OldID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private EntityRef<C_Measure> _AdditionalMeasure;
		
		private EntityRef<C_CN> _CN;
		
		private EntityRef<C_Country> _Country;
		
		private EntityRef<C_Currency> _Currency;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<C_Measure> _Measure;
		
		private EntityRef<C_Measure> _Measure3;
		
		private EntityRef<OrderDoc> _OrderDoc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpecificationItemIDChanging(int value);
    partial void OnSpecificationItemIDChanged();
    partial void OnOrderDocGUIDChanging(System.Guid value);
    partial void OnOrderDocGUIDChanged();
    partial void OnCommodityNameChanging(string value);
    partial void OnCommodityNameChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnMeasureIDChanging(System.Nullable<int> value);
    partial void OnMeasureIDChanged();
    partial void OnResolvedQuantityChanging(System.Nullable<decimal> value);
    partial void OnResolvedQuantityChanged();
    partial void OnInvoiceCostChanging(System.Nullable<decimal> value);
    partial void OnInvoiceCostChanged();
    partial void OnStatisticCostChanging(System.Nullable<decimal> value);
    partial void OnStatisticCostChanged();
    partial void OnAddInfoChanging(string value);
    partial void OnAddInfoChanged();
    partial void OnAdditionalMeasureIDChanging(System.Nullable<int> value);
    partial void OnAdditionalMeasureIDChanged();
    partial void OnAdditionalResolvedQuantityChanging(System.Nullable<decimal> value);
    partial void OnAdditionalResolvedQuantityChanged();
    partial void OnMeasure3IDChanging(System.Nullable<int> value);
    partial void OnMeasure3IDChanged();
    partial void OnResolvedQuantity3Changing(System.Nullable<decimal> value);
    partial void OnResolvedQuantity3Changed();
    partial void OnSeqNoChanging(System.Nullable<int> value);
    partial void OnSeqNoChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnDiscountChanging(System.Nullable<decimal> value);
    partial void OnDiscountChanged();
    partial void OnCurrencyIDChanging(System.Nullable<int> value);
    partial void OnCurrencyIDChanged();
    partial void OnStrengthChanging(System.Nullable<decimal> value);
    partial void OnStrengthChanged();
    partial void OnCNIDChanging(System.Nullable<int> value);
    partial void OnCNIDChanged();
    partial void OnOldIDChanging(int value);
    partial void OnOldIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public SpecificationItem()
		{
			this._AdditionalMeasure = default(EntityRef<C_Measure>);
			this._CN = default(EntityRef<C_CN>);
			this._Country = default(EntityRef<C_Country>);
			this._Currency = default(EntityRef<C_Currency>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Measure = default(EntityRef<C_Measure>);
			this._Measure3 = default(EntityRef<C_Measure>);
			this._OrderDoc = default(EntityRef<OrderDoc>);
			OnCreated();
		}
		
		[Column(Storage="_SpecificationItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SpecificationItemID
		{
			get
			{
				return this._SpecificationItemID;
			}
			set
			{
				if ((this._SpecificationItemID != value))
				{
					this.OnSpecificationItemIDChanging(value);
					this.SendPropertyChanging();
					this._SpecificationItemID = value;
					this.SendPropertyChanged("SpecificationItemID");
					this.OnSpecificationItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDocGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					if (this._OrderDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_CommodityName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CommodityName
		{
			get
			{
				return this._CommodityName;
			}
			set
			{
				if ((this._CommodityName != value))
				{
					this.OnCommodityNameChanging(value);
					this.SendPropertyChanging();
					this._CommodityName = value;
					this.SendPropertyChanged("CommodityName");
					this.OnCommodityNameChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					if (this._Measure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_ResolvedQuantity", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedQuantity
		{
			get
			{
				return this._ResolvedQuantity;
			}
			set
			{
				if ((this._ResolvedQuantity != value))
				{
					this.OnResolvedQuantityChanging(value);
					this.SendPropertyChanging();
					this._ResolvedQuantity = value;
					this.SendPropertyChanged("ResolvedQuantity");
					this.OnResolvedQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceCost", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> InvoiceCost
		{
			get
			{
				return this._InvoiceCost;
			}
			set
			{
				if ((this._InvoiceCost != value))
				{
					this.OnInvoiceCostChanging(value);
					this.SendPropertyChanging();
					this._InvoiceCost = value;
					this.SendPropertyChanged("InvoiceCost");
					this.OnInvoiceCostChanged();
				}
			}
		}
		
		[Column(Storage="_StatisticCost", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> StatisticCost
		{
			get
			{
				return this._StatisticCost;
			}
			set
			{
				if ((this._StatisticCost != value))
				{
					this.OnStatisticCostChanging(value);
					this.SendPropertyChanging();
					this._StatisticCost = value;
					this.SendPropertyChanged("StatisticCost");
					this.OnStatisticCostChanged();
				}
			}
		}
		
		[Column(Storage="_AddInfo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string AddInfo
		{
			get
			{
				return this._AddInfo;
			}
			set
			{
				if ((this._AddInfo != value))
				{
					this.OnAddInfoChanging(value);
					this.SendPropertyChanging();
					this._AddInfo = value;
					this.SendPropertyChanged("AddInfo");
					this.OnAddInfoChanged();
				}
			}
		}
		
		[Column(Storage="_AdditionalMeasureID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> AdditionalMeasureID
		{
			get
			{
				return this._AdditionalMeasureID;
			}
			set
			{
				if ((this._AdditionalMeasureID != value))
				{
					if (this._AdditionalMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdditionalMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._AdditionalMeasureID = value;
					this.SendPropertyChanged("AdditionalMeasureID");
					this.OnAdditionalMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_AdditionalResolvedQuantity", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> AdditionalResolvedQuantity
		{
			get
			{
				return this._AdditionalResolvedQuantity;
			}
			set
			{
				if ((this._AdditionalResolvedQuantity != value))
				{
					this.OnAdditionalResolvedQuantityChanging(value);
					this.SendPropertyChanging();
					this._AdditionalResolvedQuantity = value;
					this.SendPropertyChanged("AdditionalResolvedQuantity");
					this.OnAdditionalResolvedQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_Measure3ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Measure3ID
		{
			get
			{
				return this._Measure3ID;
			}
			set
			{
				if ((this._Measure3ID != value))
				{
					if (this._Measure3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasure3IDChanging(value);
					this.SendPropertyChanging();
					this._Measure3ID = value;
					this.SendPropertyChanged("Measure3ID");
					this.OnMeasure3IDChanged();
				}
			}
		}
		
		[Column(Storage="_ResolvedQuantity3", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedQuantity3
		{
			get
			{
				return this._ResolvedQuantity3;
			}
			set
			{
				if ((this._ResolvedQuantity3 != value))
				{
					this.OnResolvedQuantity3Changing(value);
					this.SendPropertyChanging();
					this._ResolvedQuantity3 = value;
					this.SendPropertyChanged("ResolvedQuantity3");
					this.OnResolvedQuantity3Changed();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Discount", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[Column(Storage="_CurrencyID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[Column(Storage="_Strength", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Strength
		{
			get
			{
				return this._Strength;
			}
			set
			{
				if ((this._Strength != value))
				{
					this.OnStrengthChanging(value);
					this.SendPropertyChanging();
					this._Strength = value;
					this.SendPropertyChanged("Strength");
					this.OnStrengthChanged();
				}
			}
		}
		
		[Column(Storage="_CNID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CNID
		{
			get
			{
				return this._CNID;
			}
			set
			{
				if ((this._CNID != value))
				{
					if (this._CN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCNIDChanging(value);
					this.SendPropertyChanging();
					this._CNID = value;
					this.SendPropertyChanged("CNID");
					this.OnCNIDChanged();
				}
			}
		}
		
		[Column(Storage="_OldID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_SpecificationItem_AdditionalMeasure", Storage="_AdditionalMeasure", ThisKey="AdditionalMeasureID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure AdditionalMeasure
		{
			get
			{
				return this._AdditionalMeasure.Entity;
			}
			set
			{
				C_Measure previousValue = this._AdditionalMeasure.Entity;
				if (((previousValue != value) 
							|| (this._AdditionalMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AdditionalMeasure.Entity = null;
						previousValue.SpecificationItem.Remove(this);
					}
					this._AdditionalMeasure.Entity = value;
					if ((value != null))
					{
						value.SpecificationItem.Add(this);
						this._AdditionalMeasureID = value.MeasureID;
					}
					else
					{
						this._AdditionalMeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AdditionalMeasure");
				}
			}
		}
		
		[Association(Name="FK_SpecificationItem_CN", Storage="_CN", ThisKey="CNID", OtherKey="CNID", IsForeignKey=true)]
		public C_CN CN
		{
			get
			{
				return this._CN.Entity;
			}
			set
			{
				C_CN previousValue = this._CN.Entity;
				if (((previousValue != value) 
							|| (this._CN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CN.Entity = null;
						previousValue.SpecificationItem.Remove(this);
					}
					this._CN.Entity = value;
					if ((value != null))
					{
						value.SpecificationItem.Add(this);
						this._CNID = value.CNID;
					}
					else
					{
						this._CNID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CN");
				}
			}
		}
		
		[Association(Name="FK_SpecificationItem_Country", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public C_Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				C_Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.SpecificationItem.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.SpecificationItem.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="FK_SpecificationItem_Currency", Storage="_Currency", ThisKey="CurrencyID", OtherKey="CurrencyID", IsForeignKey=true)]
		public C_Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				C_Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.SpecificationItem.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.SpecificationItem.Add(this);
						this._CurrencyID = value.CurrencyID;
					}
					else
					{
						this._CurrencyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[Association(Name="FK_SpecificationItem_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.SpecificationItem.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.SpecificationItem.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_SpecificationItem_Measure", Storage="_Measure", ThisKey="MeasureID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure Measure
		{
			get
			{
				return this._Measure.Entity;
			}
			set
			{
				C_Measure previousValue = this._Measure.Entity;
				if (((previousValue != value) 
							|| (this._Measure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure.Entity = null;
						previousValue.SpecificationItem_Measure.Remove(this);
					}
					this._Measure.Entity = value;
					if ((value != null))
					{
						value.SpecificationItem_Measure.Add(this);
						this._MeasureID = value.MeasureID;
					}
					else
					{
						this._MeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Measure");
				}
			}
		}
		
		[Association(Name="FK_SpecificationItem_Measure3", Storage="_Measure3", ThisKey="Measure3ID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure Measure3
		{
			get
			{
				return this._Measure3.Entity;
			}
			set
			{
				C_Measure previousValue = this._Measure3.Entity;
				if (((previousValue != value) 
							|| (this._Measure3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure3.Entity = null;
						previousValue.SpecificationItem_Measure3.Remove(this);
					}
					this._Measure3.Entity = value;
					if ((value != null))
					{
						value.SpecificationItem_Measure3.Add(this);
						this._Measure3ID = value.MeasureID;
					}
					else
					{
						this._Measure3ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Measure3");
				}
			}
		}
		
		[Association(Name="FK_SpecificationItem_OrderDoc", Storage="_OrderDoc", ThisKey="OrderDocGUID", OtherKey="OrderGUID", IsForeignKey=true)]
		public OrderDoc OrderDoc
		{
			get
			{
				return this._OrderDoc.Entity;
			}
			set
			{
				OrderDoc previousValue = this._OrderDoc.Entity;
				if (((previousValue != value) 
							|| (this._OrderDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDoc.Entity = null;
						previousValue.SpecificationItem.Remove(this);
					}
					this._OrderDoc.Entity = value;
					if ((value != null))
					{
						value.SpecificationItem.Add(this);
						this._OrderDocGUID = value.OrderGUID;
					}
					else
					{
						this._OrderDocGUID = default(System.Guid);
					}
					this.SendPropertyChanged("OrderDoc");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SPM_Action")]
	public partial class SPM_Action : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActionID;
		
		private string _Title;
		
		private int _Type;
		
		private string _SystemName;
		
		private System.Nullable<int> _CategoryID;
		
		private System.Nullable<System.Guid> _ItemGUID;
		
		private int _ActionTypeID;
		
		private System.Nullable<System.Guid> _ClassGUID;
		
		private System.Nullable<System.Guid> _PredicateGUID;
		
		private System.Nullable<int> _PackageID;
		
		private System.Nullable<System.Guid> _SubCategoryGUID;
		
		private EntitySet<N_MenuItem> _N_MenuItem;
		
		private EntityRef<MM_Package> _Package;
		
		private EntityRef<MM_Predicate> _Predicate;
		
		private EntitySet<SPM_ActionAsso> _SPM_ActionAsso;
		
		private EntitySet<SPM_ActionAsso> _Action;
		
		private EntitySet<SPM_RoleAccess> _SPM_RoleAccess;
		
		private EntitySet<SPM_SubjectAccess> _SPM_SubjectAccess;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActionIDChanging(int value);
    partial void OnActionIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnSystemNameChanging(string value);
    partial void OnSystemNameChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    partial void OnItemGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnItemGUIDChanged();
    partial void OnActionTypeIDChanging(int value);
    partial void OnActionTypeIDChanged();
    partial void OnClassGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnClassGUIDChanged();
    partial void OnPredicateGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnPredicateGUIDChanged();
    partial void OnPackageIDChanging(System.Nullable<int> value);
    partial void OnPackageIDChanged();
    partial void OnSubCategoryGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnSubCategoryGUIDChanged();
    #endregion
		
		public SPM_Action()
		{
			this._N_MenuItem = new EntitySet<N_MenuItem>(new Action<N_MenuItem>(this.attach_N_MenuItem), new Action<N_MenuItem>(this.detach_N_MenuItem));
			this._Package = default(EntityRef<MM_Package>);
			this._Predicate = default(EntityRef<MM_Predicate>);
			this._SPM_ActionAsso = new EntitySet<SPM_ActionAsso>(new Action<SPM_ActionAsso>(this.attach_SPM_ActionAsso), new Action<SPM_ActionAsso>(this.detach_SPM_ActionAsso));
			this._Action = new EntitySet<SPM_ActionAsso>(new Action<SPM_ActionAsso>(this.attach_Action), new Action<SPM_ActionAsso>(this.detach_Action));
			this._SPM_RoleAccess = new EntitySet<SPM_RoleAccess>(new Action<SPM_RoleAccess>(this.attach_SPM_RoleAccess), new Action<SPM_RoleAccess>(this.detach_SPM_RoleAccess));
			this._SPM_SubjectAccess = new EntitySet<SPM_SubjectAccess>(new Action<SPM_SubjectAccess>(this.attach_SPM_SubjectAccess), new Action<SPM_SubjectAccess>(this.detach_SPM_SubjectAccess));
			OnCreated();
		}
		
		[Column(Storage="_ActionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_SystemName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SystemName
		{
			get
			{
				return this._SystemName;
			}
			set
			{
				if ((this._SystemName != value))
				{
					this.OnSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SystemName = value;
					this.SendPropertyChanged("SystemName");
					this.OnSystemNameChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_ItemGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ItemGUID
		{
			get
			{
				return this._ItemGUID;
			}
			set
			{
				if ((this._ItemGUID != value))
				{
					this.OnItemGUIDChanging(value);
					this.SendPropertyChanging();
					this._ItemGUID = value;
					this.SendPropertyChanged("ItemGUID");
					this.OnItemGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActionTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ActionTypeID
		{
			get
			{
				return this._ActionTypeID;
			}
			set
			{
				if ((this._ActionTypeID != value))
				{
					this.OnActionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ActionTypeID = value;
					this.SendPropertyChanged("ActionTypeID");
					this.OnActionTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ClassGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ClassGUID
		{
			get
			{
				return this._ClassGUID;
			}
			set
			{
				if ((this._ClassGUID != value))
				{
					this.OnClassGUIDChanging(value);
					this.SendPropertyChanging();
					this._ClassGUID = value;
					this.SendPropertyChanged("ClassGUID");
					this.OnClassGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_PredicateGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> PredicateGUID
		{
			get
			{
				return this._PredicateGUID;
			}
			set
			{
				if ((this._PredicateGUID != value))
				{
					if (this._Predicate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPredicateGUIDChanging(value);
					this.SendPropertyChanging();
					this._PredicateGUID = value;
					this.SendPropertyChanged("PredicateGUID");
					this.OnPredicateGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_PackageID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubCategoryGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> SubCategoryGUID
		{
			get
			{
				return this._SubCategoryGUID;
			}
			set
			{
				if ((this._SubCategoryGUID != value))
				{
					this.OnSubCategoryGUIDChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryGUID = value;
					this.SendPropertyChanged("SubCategoryGUID");
					this.OnSubCategoryGUIDChanged();
				}
			}
		}
		
		[Association(Name="FK_MenuItem_SPM_Action", Storage="_N_MenuItem", ThisKey="ActionID", OtherKey="ActionID", DeleteRule="NO ACTION")]
		public EntitySet<N_MenuItem> N_MenuItem
		{
			get
			{
				return this._N_MenuItem;
			}
			set
			{
				this._N_MenuItem.Assign(value);
			}
		}
		
		[Association(Name="FK_SPM_Action_Package", Storage="_Package", ThisKey="PackageID", OtherKey="PackageID", IsForeignKey=true)]
		public MM_Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				MM_Package previousValue = this._Package.Entity;
				if (((previousValue != value) 
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.SPM_Action.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.SPM_Action.Add(this);
						this._PackageID = value.PackageID;
					}
					else
					{
						this._PackageID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}
		
		[Association(Name="FK_SPM_Action_Predicate", Storage="_Predicate", ThisKey="PredicateGUID", OtherKey="PredicateGUID", IsForeignKey=true)]
		public MM_Predicate Predicate
		{
			get
			{
				return this._Predicate.Entity;
			}
			set
			{
				MM_Predicate previousValue = this._Predicate.Entity;
				if (((previousValue != value) 
							|| (this._Predicate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Predicate.Entity = null;
						previousValue.SPM_Action.Remove(this);
					}
					this._Predicate.Entity = value;
					if ((value != null))
					{
						value.SPM_Action.Add(this);
						this._PredicateGUID = value.PredicateGUID;
					}
					else
					{
						this._PredicateGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Predicate");
				}
			}
		}
		
		[Association(Name="FK_SPM_ActionAsso_Action", Storage="_SPM_ActionAsso", ThisKey="ActionID", OtherKey="ActionID", DeleteRule="CASCADE")]
		public EntitySet<SPM_ActionAsso> SPM_ActionAsso
		{
			get
			{
				return this._SPM_ActionAsso;
			}
			set
			{
				this._SPM_ActionAsso.Assign(value);
			}
		}
		
		[Association(Name="FK_SPM_ActionAsso_ParentAction", Storage="_Action", ThisKey="ActionID", OtherKey="ParentActionID", DeleteRule="NO ACTION")]
		public EntitySet<SPM_ActionAsso> Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				this._Action.Assign(value);
			}
		}
		
		[Association(Name="FK_SPM_RoleAccess_Action", Storage="_SPM_RoleAccess", ThisKey="ActionID", OtherKey="ActionID", DeleteRule="CASCADE")]
		public EntitySet<SPM_RoleAccess> SPM_RoleAccess
		{
			get
			{
				return this._SPM_RoleAccess;
			}
			set
			{
				this._SPM_RoleAccess.Assign(value);
			}
		}
		
		[Association(Name="FK_SPM_SubjectAccess_SPM_Action", Storage="_SPM_SubjectAccess", ThisKey="ActionID", OtherKey="ActionID", DeleteRule="NO ACTION")]
		public EntitySet<SPM_SubjectAccess> SPM_SubjectAccess
		{
			get
			{
				return this._SPM_SubjectAccess;
			}
			set
			{
				this._SPM_SubjectAccess.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_N_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.FK_MenuItem_SPM_Action = this;
		}
		
		private void detach_N_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.FK_MenuItem_SPM_Action = null;
		}
		
		private void attach_SPM_ActionAsso(SPM_ActionAsso entity)
		{
			this.SendPropertyChanging();
			entity.Action = this;
		}
		
		private void detach_SPM_ActionAsso(SPM_ActionAsso entity)
		{
			this.SendPropertyChanging();
			entity.Action = null;
		}
		
		private void attach_Action(SPM_ActionAsso entity)
		{
			this.SendPropertyChanging();
			entity.ParentAction = this;
		}
		
		private void detach_Action(SPM_ActionAsso entity)
		{
			this.SendPropertyChanging();
			entity.ParentAction = null;
		}
		
		private void attach_SPM_RoleAccess(SPM_RoleAccess entity)
		{
			this.SendPropertyChanging();
			entity.Action = this;
		}
		
		private void detach_SPM_RoleAccess(SPM_RoleAccess entity)
		{
			this.SendPropertyChanging();
			entity.Action = null;
		}
		
		private void attach_SPM_SubjectAccess(SPM_SubjectAccess entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Action = this;
		}
		
		private void detach_SPM_SubjectAccess(SPM_SubjectAccess entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Action = null;
		}
	}
	
	[Table(Name="dbo.SPM_ActionAsso")]
	public partial class SPM_ActionAsso : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActionID;
		
		private int _ParentActionID;
		
		private EntityRef<SPM_Action> _Action;
		
		private EntityRef<SPM_Action> _ParentAction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActionIDChanging(int value);
    partial void OnActionIDChanged();
    partial void OnParentActionIDChanging(int value);
    partial void OnParentActionIDChanged();
    #endregion
		
		public SPM_ActionAsso()
		{
			this._Action = default(EntityRef<SPM_Action>);
			this._ParentAction = default(EntityRef<SPM_Action>);
			OnCreated();
		}
		
		[Column(Storage="_ActionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					if (this._Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParentActionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ParentActionID
		{
			get
			{
				return this._ParentActionID;
			}
			set
			{
				if ((this._ParentActionID != value))
				{
					if (this._ParentAction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentActionIDChanging(value);
					this.SendPropertyChanging();
					this._ParentActionID = value;
					this.SendPropertyChanged("ParentActionID");
					this.OnParentActionIDChanged();
				}
			}
		}
		
		[Association(Name="FK_SPM_ActionAsso_Action", Storage="_Action", ThisKey="ActionID", OtherKey="ActionID", IsForeignKey=true, DeleteOnNull=true)]
		public SPM_Action Action
		{
			get
			{
				return this._Action.Entity;
			}
			set
			{
				SPM_Action previousValue = this._Action.Entity;
				if (((previousValue != value) 
							|| (this._Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Action.Entity = null;
						previousValue.SPM_ActionAsso.Remove(this);
					}
					this._Action.Entity = value;
					if ((value != null))
					{
						value.SPM_ActionAsso.Add(this);
						this._ActionID = value.ActionID;
					}
					else
					{
						this._ActionID = default(int);
					}
					this.SendPropertyChanged("Action");
				}
			}
		}
		
		[Association(Name="FK_SPM_ActionAsso_ParentAction", Storage="_ParentAction", ThisKey="ParentActionID", OtherKey="ActionID", IsForeignKey=true)]
		public SPM_Action ParentAction
		{
			get
			{
				return this._ParentAction.Entity;
			}
			set
			{
				SPM_Action previousValue = this._ParentAction.Entity;
				if (((previousValue != value) 
							|| (this._ParentAction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentAction.Entity = null;
						previousValue.Action.Remove(this);
					}
					this._ParentAction.Entity = value;
					if ((value != null))
					{
						value.Action.Add(this);
						this._ParentActionID = value.ActionID;
					}
					else
					{
						this._ParentActionID = default(int);
					}
					this.SendPropertyChanged("ParentAction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SPM_ActionRoleAccess")]
	public partial class SPM_ActionRoleAccess
	{
		
		private System.Nullable<System.Guid> _SecurableObjectGUID;
		
		private int _ActionTypeID;
		
		private int _RoleID;
		
		public SPM_ActionRoleAccess()
		{
		}
		
		[Column(Storage="_SecurableObjectGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> SecurableObjectGUID
		{
			get
			{
				return this._SecurableObjectGUID;
			}
			set
			{
				if ((this._SecurableObjectGUID != value))
				{
					this._SecurableObjectGUID = value;
				}
			}
		}
		
		[Column(Storage="_ActionTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ActionTypeID
		{
			get
			{
				return this._ActionTypeID;
			}
			set
			{
				if ((this._ActionTypeID != value))
				{
					this._ActionTypeID = value;
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.SPM_AvailableRoleForGrant")]
	public partial class SPM_AvailableRoleForGrant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private int _RoleForGrantID;
		
		private EntityRef<SPM_Role> _Role;
		
		private EntityRef<SPM_Role> _RoleForGrant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRoleForGrantIDChanging(int value);
    partial void OnRoleForGrantIDChanged();
    #endregion
		
		public SPM_AvailableRoleForGrant()
		{
			this._Role = default(EntityRef<SPM_Role>);
			this._RoleForGrant = default(EntityRef<SPM_Role>);
			OnCreated();
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleForGrantID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleForGrantID
		{
			get
			{
				return this._RoleForGrantID;
			}
			set
			{
				if ((this._RoleForGrantID != value))
				{
					if (this._RoleForGrant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleForGrantIDChanging(value);
					this.SendPropertyChanging();
					this._RoleForGrantID = value;
					this.SendPropertyChanged("RoleForGrantID");
					this.OnRoleForGrantIDChanged();
				}
			}
		}
		
		[Association(Name="FK_SPM_AvailableRoleForGrant_Role", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public SPM_Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				SPM_Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.SPM_AvailableRoleForGrant.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.SPM_AvailableRoleForGrant.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[Association(Name="FK_SPM_AvailableRoleForGrant_RoleForGrant", Storage="_RoleForGrant", ThisKey="RoleForGrantID", OtherKey="RoleID", IsForeignKey=true)]
		public SPM_Role RoleForGrant
		{
			get
			{
				return this._RoleForGrant.Entity;
			}
			set
			{
				SPM_Role previousValue = this._RoleForGrant.Entity;
				if (((previousValue != value) 
							|| (this._RoleForGrant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleForGrant.Entity = null;
						previousValue.Role.Remove(this);
					}
					this._RoleForGrant.Entity = value;
					if ((value != null))
					{
						value.Role.Add(this);
						this._RoleForGrantID = value.RoleID;
					}
					else
					{
						this._RoleForGrantID = default(int);
					}
					this.SendPropertyChanged("RoleForGrant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SPM_C_RoleType")]
	public partial class SPM_C_RoleType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleTypeID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private string _SysName;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<SPM_Role> _SPM_Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleTypeIDChanging(int value);
    partial void OnRoleTypeIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    #endregion
		
		public SPM_C_RoleType()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._SPM_Role = new EntitySet<SPM_Role>(new Action<SPM_Role>(this.attach_SPM_Role), new Action<SPM_Role>(this.detach_SPM_Role));
			OnCreated();
		}
		
		[Column(Storage="_RoleTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleTypeID
		{
			get
			{
				return this._RoleTypeID;
			}
			set
			{
				if ((this._RoleTypeID != value))
				{
					this.OnRoleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RoleTypeID = value;
					this.SendPropertyChanged("RoleTypeID");
					this.OnRoleTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Association(Name="FK_SPM_C_RoleType_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.SPM_C_RoleType.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.SPM_C_RoleType.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_SPM_Role_RoleType", Storage="_SPM_Role", ThisKey="RoleTypeID", OtherKey="RoleTypeID", DeleteRule="NO ACTION")]
		public EntitySet<SPM_Role> SPM_Role
		{
			get
			{
				return this._SPM_Role;
			}
			set
			{
				this._SPM_Role.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SPM_Role(SPM_Role entity)
		{
			this.SendPropertyChanging();
			entity.RoleType = this;
		}
		
		private void detach_SPM_Role(SPM_Role entity)
		{
			this.SendPropertyChanging();
			entity.RoleType = null;
		}
	}
	
	[Table(Name="dbo.SPM_CasheFlag")]
	public partial class SPM_CasheFlag
	{
		
		private bool _IsChange;
		
		public SPM_CasheFlag()
		{
		}
		
		[Column(Storage="_IsChange", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsChange
		{
			get
			{
				return this._IsChange;
			}
			set
			{
				if ((this._IsChange != value))
				{
					this._IsChange = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.SPM_Role")]
	public partial class SPM_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _Title;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _SysName;
		
		private System.Nullable<int> _RoleGroupID;
		
		private int _SeqNo;
		
		private string _Description;
		
		private int _RoleTypeID;
		
		private string _SID;
		
		private int _RoleForGrantCondition;
		
		private EntitySet<CurriculumRoles> _CurriculumRoles;
		
		private EntitySet<SPM_AvailableRoleForGrant> _SPM_AvailableRoleForGrant;
		
		private EntitySet<SPM_AvailableRoleForGrant> _Role;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<SPM_RoleGroup> _RoleGroup;
		
		private EntityRef<SPM_C_RoleType> _RoleType;
		
		private EntitySet<SPM_RoleAccess> _SPM_RoleAccess;
		
		private EntitySet<SPM_RoleAsso> _SPM_RoleAsso;
		
		private EntitySet<SPM_RoleAsso> _SPM_RoleAsso_Role;
		
		private EntitySet<SPM_SubjectRole> _SPM_SubjectRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnRoleGroupIDChanging(System.Nullable<int> value);
    partial void OnRoleGroupIDChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRoleTypeIDChanging(int value);
    partial void OnRoleTypeIDChanged();
    partial void OnSIDChanging(string value);
    partial void OnSIDChanged();
    partial void OnRoleForGrantConditionChanging(int value);
    partial void OnRoleForGrantConditionChanged();
    #endregion
		
		public SPM_Role()
		{
			this._CurriculumRoles = new EntitySet<CurriculumRoles>(new Action<CurriculumRoles>(this.attach_CurriculumRoles), new Action<CurriculumRoles>(this.detach_CurriculumRoles));
			this._SPM_AvailableRoleForGrant = new EntitySet<SPM_AvailableRoleForGrant>(new Action<SPM_AvailableRoleForGrant>(this.attach_SPM_AvailableRoleForGrant), new Action<SPM_AvailableRoleForGrant>(this.detach_SPM_AvailableRoleForGrant));
			this._Role = new EntitySet<SPM_AvailableRoleForGrant>(new Action<SPM_AvailableRoleForGrant>(this.attach_Role), new Action<SPM_AvailableRoleForGrant>(this.detach_Role));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._RoleGroup = default(EntityRef<SPM_RoleGroup>);
			this._RoleType = default(EntityRef<SPM_C_RoleType>);
			this._SPM_RoleAccess = new EntitySet<SPM_RoleAccess>(new Action<SPM_RoleAccess>(this.attach_SPM_RoleAccess), new Action<SPM_RoleAccess>(this.detach_SPM_RoleAccess));
			this._SPM_RoleAsso = new EntitySet<SPM_RoleAsso>(new Action<SPM_RoleAsso>(this.attach_SPM_RoleAsso), new Action<SPM_RoleAsso>(this.detach_SPM_RoleAsso));
			this._SPM_RoleAsso_Role = new EntitySet<SPM_RoleAsso>(new Action<SPM_RoleAsso>(this.attach_SPM_RoleAsso_Role), new Action<SPM_RoleAsso>(this.detach_SPM_RoleAsso_Role));
			this._SPM_SubjectRole = new EntitySet<SPM_SubjectRole>(new Action<SPM_SubjectRole>(this.attach_SPM_SubjectRole), new Action<SPM_SubjectRole>(this.detach_SPM_SubjectRole));
			OnCreated();
		}
		
		[Column(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_RoleGroupID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RoleGroupID
		{
			get
			{
				return this._RoleGroupID;
			}
			set
			{
				if ((this._RoleGroupID != value))
				{
					if (this._RoleGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleGroupIDChanging(value);
					this.SendPropertyChanging();
					this._RoleGroupID = value;
					this.SendPropertyChanged("RoleGroupID");
					this.OnRoleGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_RoleTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int RoleTypeID
		{
			get
			{
				return this._RoleTypeID;
			}
			set
			{
				if ((this._RoleTypeID != value))
				{
					if (this._RoleType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RoleTypeID = value;
					this.SendPropertyChanged("RoleTypeID");
					this.OnRoleTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_SID", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SID
		{
			get
			{
				return this._SID;
			}
			set
			{
				if ((this._SID != value))
				{
					this.OnSIDChanging(value);
					this.SendPropertyChanging();
					this._SID = value;
					this.SendPropertyChanged("SID");
					this.OnSIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleForGrantCondition", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int RoleForGrantCondition
		{
			get
			{
				return this._RoleForGrantCondition;
			}
			set
			{
				if ((this._RoleForGrantCondition != value))
				{
					this.OnRoleForGrantConditionChanging(value);
					this.SendPropertyChanging();
					this._RoleForGrantCondition = value;
					this.SendPropertyChanged("RoleForGrantCondition");
					this.OnRoleForGrantConditionChanged();
				}
			}
		}
		
		[Association(Name="FK_CurriculumRoles_Roles", Storage="_CurriculumRoles", ThisKey="RoleID", OtherKey="RolesID", DeleteRule="CASCADE")]
		public EntitySet<CurriculumRoles> CurriculumRoles
		{
			get
			{
				return this._CurriculumRoles;
			}
			set
			{
				this._CurriculumRoles.Assign(value);
			}
		}
		
		[Association(Name="FK_SPM_AvailableRoleForGrant_Role", Storage="_SPM_AvailableRoleForGrant", ThisKey="RoleID", OtherKey="RoleID", DeleteRule="NO ACTION")]
		public EntitySet<SPM_AvailableRoleForGrant> SPM_AvailableRoleForGrant
		{
			get
			{
				return this._SPM_AvailableRoleForGrant;
			}
			set
			{
				this._SPM_AvailableRoleForGrant.Assign(value);
			}
		}
		
		[Association(Name="FK_SPM_AvailableRoleForGrant_RoleForGrant", Storage="_Role", ThisKey="RoleID", OtherKey="RoleForGrantID", DeleteRule="NO ACTION")]
		public EntitySet<SPM_AvailableRoleForGrant> Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				this._Role.Assign(value);
			}
		}
		
		[Association(Name="FK_SPM_Role_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.SPM_Role.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.SPM_Role.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_SPM_Role_RoleGroup", Storage="_RoleGroup", ThisKey="RoleGroupID", OtherKey="RoleGroupID", IsForeignKey=true)]
		public SPM_RoleGroup RoleGroup
		{
			get
			{
				return this._RoleGroup.Entity;
			}
			set
			{
				SPM_RoleGroup previousValue = this._RoleGroup.Entity;
				if (((previousValue != value) 
							|| (this._RoleGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleGroup.Entity = null;
						previousValue.Roles.Remove(this);
					}
					this._RoleGroup.Entity = value;
					if ((value != null))
					{
						value.Roles.Add(this);
						this._RoleGroupID = value.RoleGroupID;
					}
					else
					{
						this._RoleGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RoleGroup");
				}
			}
		}
		
		[Association(Name="FK_SPM_Role_RoleType", Storage="_RoleType", ThisKey="RoleTypeID", OtherKey="RoleTypeID", IsForeignKey=true)]
		public SPM_C_RoleType RoleType
		{
			get
			{
				return this._RoleType.Entity;
			}
			set
			{
				SPM_C_RoleType previousValue = this._RoleType.Entity;
				if (((previousValue != value) 
							|| (this._RoleType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleType.Entity = null;
						previousValue.SPM_Role.Remove(this);
					}
					this._RoleType.Entity = value;
					if ((value != null))
					{
						value.SPM_Role.Add(this);
						this._RoleTypeID = value.RoleTypeID;
					}
					else
					{
						this._RoleTypeID = default(int);
					}
					this.SendPropertyChanged("RoleType");
				}
			}
		}
		
		[Association(Name="FK_SPM_RoleAccess_Role", Storage="_SPM_RoleAccess", ThisKey="RoleID", OtherKey="RoleID", DeleteRule="CASCADE")]
		public EntitySet<SPM_RoleAccess> SPM_RoleAccess
		{
			get
			{
				return this._SPM_RoleAccess;
			}
			set
			{
				this._SPM_RoleAccess.Assign(value);
			}
		}
		
		[Association(Name="FK_SPM_RoleAsso_ParentRole", Storage="_SPM_RoleAsso", ThisKey="RoleID", OtherKey="ParentRoleID", DeleteRule="NO ACTION")]
		public EntitySet<SPM_RoleAsso> SPM_RoleAsso
		{
			get
			{
				return this._SPM_RoleAsso;
			}
			set
			{
				this._SPM_RoleAsso.Assign(value);
			}
		}
		
		[Association(Name="FK_SPM_RoleAsso_Role", Storage="_SPM_RoleAsso_Role", ThisKey="RoleID", OtherKey="RoleID", DeleteRule="NO ACTION")]
		public EntitySet<SPM_RoleAsso> SPM_RoleAsso_Role
		{
			get
			{
				return this._SPM_RoleAsso_Role;
			}
			set
			{
				this._SPM_RoleAsso_Role.Assign(value);
			}
		}
		
		[Association(Name="FK_SPM_SubjectRole_Role", Storage="_SPM_SubjectRole", ThisKey="RoleID", OtherKey="RoleID", DeleteRule="NO ACTION")]
		public EntitySet<SPM_SubjectRole> SPM_SubjectRole
		{
			get
			{
				return this._SPM_SubjectRole;
			}
			set
			{
				this._SPM_SubjectRole.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CurriculumRoles(CurriculumRoles entity)
		{
			this.SendPropertyChanging();
			entity.Roles = this;
		}
		
		private void detach_CurriculumRoles(CurriculumRoles entity)
		{
			this.SendPropertyChanging();
			entity.Roles = null;
		}
		
		private void attach_SPM_AvailableRoleForGrant(SPM_AvailableRoleForGrant entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_SPM_AvailableRoleForGrant(SPM_AvailableRoleForGrant entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_Role(SPM_AvailableRoleForGrant entity)
		{
			this.SendPropertyChanging();
			entity.RoleForGrant = this;
		}
		
		private void detach_Role(SPM_AvailableRoleForGrant entity)
		{
			this.SendPropertyChanging();
			entity.RoleForGrant = null;
		}
		
		private void attach_SPM_RoleAccess(SPM_RoleAccess entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_SPM_RoleAccess(SPM_RoleAccess entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_SPM_RoleAsso(SPM_RoleAsso entity)
		{
			this.SendPropertyChanging();
			entity.ParentRole = this;
		}
		
		private void detach_SPM_RoleAsso(SPM_RoleAsso entity)
		{
			this.SendPropertyChanging();
			entity.ParentRole = null;
		}
		
		private void attach_SPM_RoleAsso_Role(SPM_RoleAsso entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_SPM_RoleAsso_Role(SPM_RoleAsso entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_SPM_SubjectRole(SPM_SubjectRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_SPM_SubjectRole(SPM_SubjectRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[Table(Name="dbo.SPM_RoleAccess")]
	public partial class SPM_RoleAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActionID;
		
		private int _RoleID;
		
		private EntityRef<SPM_Action> _Action;
		
		private EntityRef<SPM_Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActionIDChanging(int value);
    partial void OnActionIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    #endregion
		
		public SPM_RoleAccess()
		{
			this._Action = default(EntityRef<SPM_Action>);
			this._Role = default(EntityRef<SPM_Role>);
			OnCreated();
		}
		
		[Column(Storage="_ActionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					if (this._Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Association(Name="FK_SPM_RoleAccess_Action", Storage="_Action", ThisKey="ActionID", OtherKey="ActionID", IsForeignKey=true, DeleteOnNull=true)]
		public SPM_Action Action
		{
			get
			{
				return this._Action.Entity;
			}
			set
			{
				SPM_Action previousValue = this._Action.Entity;
				if (((previousValue != value) 
							|| (this._Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Action.Entity = null;
						previousValue.SPM_RoleAccess.Remove(this);
					}
					this._Action.Entity = value;
					if ((value != null))
					{
						value.SPM_RoleAccess.Add(this);
						this._ActionID = value.ActionID;
					}
					else
					{
						this._ActionID = default(int);
					}
					this.SendPropertyChanged("Action");
				}
			}
		}
		
		[Association(Name="FK_SPM_RoleAccess_Role", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true, DeleteOnNull=true)]
		public SPM_Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				SPM_Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.SPM_RoleAccess.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.SPM_RoleAccess.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SPM_RoleAsso")]
	public partial class SPM_RoleAsso : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private int _ParentRoleID;
		
		private EntityRef<SPM_Role> _ParentRole;
		
		private EntityRef<SPM_Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnParentRoleIDChanging(int value);
    partial void OnParentRoleIDChanged();
    #endregion
		
		public SPM_RoleAsso()
		{
			this._ParentRole = default(EntityRef<SPM_Role>);
			this._Role = default(EntityRef<SPM_Role>);
			OnCreated();
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParentRoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ParentRoleID
		{
			get
			{
				return this._ParentRoleID;
			}
			set
			{
				if ((this._ParentRoleID != value))
				{
					if (this._ParentRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentRoleIDChanging(value);
					this.SendPropertyChanging();
					this._ParentRoleID = value;
					this.SendPropertyChanged("ParentRoleID");
					this.OnParentRoleIDChanged();
				}
			}
		}
		
		[Association(Name="FK_SPM_RoleAsso_ParentRole", Storage="_ParentRole", ThisKey="ParentRoleID", OtherKey="RoleID", IsForeignKey=true)]
		public SPM_Role ParentRole
		{
			get
			{
				return this._ParentRole.Entity;
			}
			set
			{
				SPM_Role previousValue = this._ParentRole.Entity;
				if (((previousValue != value) 
							|| (this._ParentRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentRole.Entity = null;
						previousValue.SPM_RoleAsso.Remove(this);
					}
					this._ParentRole.Entity = value;
					if ((value != null))
					{
						value.SPM_RoleAsso.Add(this);
						this._ParentRoleID = value.RoleID;
					}
					else
					{
						this._ParentRoleID = default(int);
					}
					this.SendPropertyChanged("ParentRole");
				}
			}
		}
		
		[Association(Name="FK_SPM_RoleAsso_Role", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public SPM_Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				SPM_Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.SPM_RoleAsso_Role.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.SPM_RoleAsso_Role.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SPM_RoleGroup")]
	public partial class SPM_RoleGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleGroupID;
		
		private string _Title;
		
		private int _SeqNo;
		
		private EntitySet<SPM_Role> _Roles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleGroupIDChanging(int value);
    partial void OnRoleGroupIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    #endregion
		
		public SPM_RoleGroup()
		{
			this._Roles = new EntitySet<SPM_Role>(new Action<SPM_Role>(this.attach_Roles), new Action<SPM_Role>(this.detach_Roles));
			OnCreated();
		}
		
		[Column(Storage="_RoleGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleGroupID
		{
			get
			{
				return this._RoleGroupID;
			}
			set
			{
				if ((this._RoleGroupID != value))
				{
					this.OnRoleGroupIDChanging(value);
					this.SendPropertyChanging();
					this._RoleGroupID = value;
					this.SendPropertyChanged("RoleGroupID");
					this.OnRoleGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Association(Name="FK_SPM_Role_RoleGroup", Storage="_Roles", ThisKey="RoleGroupID", OtherKey="RoleGroupID", DeleteRule="NO ACTION")]
		public EntitySet<SPM_Role> Roles
		{
			get
			{
				return this._Roles;
			}
			set
			{
				this._Roles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Roles(SPM_Role entity)
		{
			this.SendPropertyChanging();
			entity.RoleGroup = this;
		}
		
		private void detach_Roles(SPM_Role entity)
		{
			this.SendPropertyChanging();
			entity.RoleGroup = null;
		}
	}
	
	[Table(Name="dbo.SPM_Subject")]
	public partial class SPM_Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubjectID;
		
		private string _SID;
		
		private string _SystemName;
		
		private string _Title;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private System.Data.Linq.Binary _PasswordHash;
		
		private string _RegMagicString;
		
		private System.Nullable<System.DateTime> _RegDate;
		
		private bool _IsActive;
		
		private string _EMail;
		
		private bool _MustChangePassword;
		
		private System.Nullable<System.DateTime> _PasswordExpDate;
		
		private EntitySet<Appendix> _Appendix;
		
		private EntitySet<AppendixQuantity> _AppendixQuantity;
		
		private EntitySet<Blank> _Blank;
		
		private EntitySet<BlankTransition> _BlankTransition;
		
		private EntitySet<C_AnnulmentReason> _C_AnnulmentReason;
		
		private EntitySet<C_CatalogRestriction> _C_CatalogRestriction;
		
		private EntitySet<C_CN> _C_CN;
		
		private EntitySet<C_CNCategory> _C_CNCategory;
		
		private EntitySet<C_CNCategoryDocument> _C_CNCategoryDocument;
		
		private EntitySet<C_CNCategoryFGADocument> _C_CNCategoryFGADocument;
		
		private EntitySet<C_CNCategoryItem> _C_CNCategoryItem;
		
		private EntitySet<C_CNGroup> _C_CNGroup;
		
		private EntitySet<C_CNType> _C_CNType;
		
		private EntitySet<C_Country> _C_Country;
		
		private EntitySet<C_CountryGroup> _C_CountryGroup;
		
		private EntitySet<C_Crypto> _C_Crypto;
		
		private EntitySet<C_Currency> _C_Currency;
		
		private EntitySet<C_CustomHouse> _C_CustomHouse;
		
		private EntitySet<C_CustomHouseContact> _C_CustomHouseContact;
		
		private EntitySet<C_DocumentSourceType> _C_DocumentSourceType;
		
		private EntitySet<C_DocumentType> _C_DocumentType;
		
		private EntitySet<C_FGA> _C_FGA;
		
		private EntitySet<C_FGADocument> _C_FGADocument;
		
		private EntitySet<C_FGADocumentSigner> _C_FGADocumentSigner;
		
		private EntitySet<C_FtsCountryGroup> _C_FtsCountryGroup;
		
		private EntitySet<C_Help> _C_Help;
		
		private EntitySet<C_LawOrgan> _C_LawOrgan;
		
		private EntitySet<C_LegalDocument> _C_LegalDocument;
		
		private EntitySet<C_LegalDocumentType> _C_LegalDocumentType;
		
		private EntitySet<C_LicenseType> _C_LicenseType;
		
		private EntitySet<C_MaxTargetValidity> _C_MaxTargetValidity;
		
		private EntitySet<C_Measure> _C_Measure;
		
		private EntitySet<C_MFC> _C_MFC;
		
		private EntitySet<C_OperationType> _C_OperationType;
		
		private EntitySet<C_QuoteCategory> _C_QuoteCategory;
		
		private EntitySet<C_RES> _C_RES;
		
		private EntitySet<C_RFSubject> _C_RFSubject;
		
		private EntitySet<C_Tariff> _C_Tariff;
		
		private EntitySet<C_UseType> _C_UseType;
		
		private EntitySet<C_VisitPurpose> _C_VisitPurpose;
		
		private EntitySet<C_VisitWeek> _C_VisitWeek;
		
		private EntitySet<CertificateInfo> _CertificateInfo;
		
		private EntitySet<CommodityDocument> _CommodityDocument;
		
		private EntitySet<Contractor> _Contractor;
		
		private EntitySet<ContractorChiefPerson> _ContractorChiefPerson;
		
		private EntitySet<ControlParameters> _ControlParameters;
		
		private EntitySet<Copy_ContractorChiefPerson> _Copy_ContractorChiefPerson;
		
		private EntitySet<Curriculum> _Curriculum;
		
		private EntitySet<CurriculumQuestion> _CurriculumQuestion;
		
		private EntitySet<CurriculumQuestionAnswer> _CurriculumQuestionAnswer;
		
		private EntitySet<CustomsDeclaration> _CustomsDeclaration;
		
		private EntitySet<Employee> _Employee;
		
		private EntitySet<Employee> _Subject;
		
		private EntitySet<FactAnnulment> _FactAnnulment;
		
		private EntitySet<FactClose> _FactClose;
		
		private EntitySet<FactForm> _FactForm;
		
		private EntitySet<FactRegister> _FactRegister;
		
		private EntitySet<FactReject> _FactReject;
		
		private EntitySet<FactResume> _FactResume;
		
		private EntitySet<FactSuspend> _FactSuspend;
		
		private EntitySet<ForeignAuthorization> _ForeignAuthorization;
		
		private EntitySet<FTSExportLog> _FTSExportLog;
		
		private EntitySet<HST_Contractor> _HST_Contractor;
		
		private EntitySet<HST_MM_FormView> _HST_MM_FormView;
		
		private EntitySet<HST_N_TimeZone> _HST_N_TimeZone;
		
		private EntitySet<INT_Command> _INT_Command;
		
		private EntitySet<INT_Handler> _INT_Handler;
		
		private EntitySet<INT_System> _INT_System;
		
		private EntitySet<LicenseExecution> _LicenseExecution;
		
		private EntitySet<MM_Codifier> _MM_Codifier;
		
		private EntitySet<MM_CodifierValue> _MM_CodifierValue;
		
		private EntitySet<MM_DataValidation> _MM_DataValidation;
		
		private EntitySet<MM_FormField> _MM_FormField;
		
		private EntitySet<MM_FormFieldAttribute> _MM_FormFieldAttribute;
		
		private EntitySet<MM_FormFieldGroup> _MM_FormFieldGroup;
		
		private EntitySet<MM_FormView> _MM_FormView;
		
		private EntitySet<MM_MethodParameter> _MM_MethodParameter;
		
		private EntitySet<MM_ObjectProperty> _MM_ObjectProperty;
		
		private EntitySet<MM_ObjectType> _MM_ObjectType;
		
		private EntitySet<MM_Package> _MM_Package;
		
		private EntitySet<MM_Predicate> _MM_Predicate;
		
		private EntitySet<N_DownloadLog> _N_DownloadLog;
		
		private EntitySet<N_File> _N_File;
		
		private EntitySet<N_File> _N_File_Creator;
		
		private EntitySet<N_File> _N_File_LastModifiedUser;
		
		private EntitySet<N_FileLibraryType> _N_FileLibraryType;
		
		private EntitySet<N_Filter> _N_Filter;
		
		private EntitySet<N_Folder> _N_Folder;
		
		private EntitySet<N_Folder> _N_Folder_LastModifiedUser;
		
		private EntitySet<N_MenuItem> _N_MenuItem;
		
		private EntitySet<N_RssFeed> _N_RssFeed;
		
		private EntitySet<N_Settings> _N_Settings;
		
		private EntitySet<N_SqlStatementLog> _N_SqlStatementLog;
		
		private EntitySet<N_TimeZone> _N_TimeZone;
		
		private EntitySet<N_VirusScanLog> _N_VirusScanLog;
		
		private EntitySet<OrderDoc> _OrderDoc;
		
		private EntitySet<OrderDocAsso> _OrderDocAsso;
		
		private EntitySet<OrderDocImportSubject> _OrderDocImportSubject;
		
		private EntitySet<OrderDocPassport> _OrderDocPassport;
		
		private EntitySet<OrderDocReplicationLog> _OrderDocReplicationLog;
		
		private EntitySet<OrderDocResponsible> _OrderDocResponsible;
		
		private EntitySet<OrderDocState> _OrderDocState;
		
		private EntitySet<OrderDocTransition> _OrderDocTransition;
		
		private EntitySet<PaymentOrder> _PaymentOrder;
		
		private EntitySet<Quota> _Quota;
		
		private EntitySet<QuotaEvent> _QuotaEvent;
		
		private EntitySet<QuotaRedistribution> _QuotaRedistribution;
		
		private EntitySet<Representation> _Representation;
		
		private EntitySet<SpecificationCommon> _SpecificationCommon;
		
		private EntitySet<SpecificationItem> _SpecificationItem;
		
		private EntitySet<SPM_C_RoleType> _SPM_C_RoleType;
		
		private EntitySet<SPM_Role> _SPM_Role;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<SPM_Subject> _SPM_Subject_LastModifiedUser;
		
		private EntitySet<SPM_SubjectAccess> _SPM_SubjectAccess;
		
		private EntitySet<SPM_SubjectDelegate> _SPM_SubjectDelegate;
		
		private EntitySet<SPM_SubjectDelegate> _SPM_SubjectDelegate_DelegatedTo;
		
		private EntitySet<SPM_SubjectDelegate> _SPM_SubjectDelegate_LastModifiedUser;
		
		private EntitySet<SPM_SubjectRole> _SPM_SubjectRole;
		
		private EntitySet<TM_TaskExecution> _TM_TaskExecution;
		
		private EntitySet<Training> _Training;
		
		private EntitySet<Training> _Training_Subject;
		
		private EntitySet<TreasuryPayment> _TreasuryPayment;
		
		private EntitySet<UserActivity> _UserActivity;
		
		private EntityRef<UserInfo> _UserInfo;
		
		private EntitySet<VisitException> _VisitException;
		
		private EntitySet<VisitRecord> _VisitRecord;
		
		private EntitySet<VisitSchedule> _VisitSchedule;
		
		private EntitySet<VisitTime> _VisitTime;
		
		private EntitySet<WF_Activity> _WF_Activity;
		
		private EntitySet<WF_Transition> _WF_Transition;
		
		private EntitySet<WF_Workflow> _WF_Workflow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnSIDChanging(string value);
    partial void OnSIDChanged();
    partial void OnSystemNameChanging(string value);
    partial void OnSystemNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnPasswordHashChanging(System.Data.Linq.Binary value);
    partial void OnPasswordHashChanged();
    partial void OnRegMagicStringChanging(string value);
    partial void OnRegMagicStringChanged();
    partial void OnRegDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRegDateChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnEMailChanging(string value);
    partial void OnEMailChanged();
    partial void OnMustChangePasswordChanging(bool value);
    partial void OnMustChangePasswordChanged();
    partial void OnPasswordExpDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPasswordExpDateChanged();
    #endregion
		
		public SPM_Subject()
		{
			this._Appendix = new EntitySet<Appendix>(new Action<Appendix>(this.attach_Appendix), new Action<Appendix>(this.detach_Appendix));
			this._AppendixQuantity = new EntitySet<AppendixQuantity>(new Action<AppendixQuantity>(this.attach_AppendixQuantity), new Action<AppendixQuantity>(this.detach_AppendixQuantity));
			this._Blank = new EntitySet<Blank>(new Action<Blank>(this.attach_Blank), new Action<Blank>(this.detach_Blank));
			this._BlankTransition = new EntitySet<BlankTransition>(new Action<BlankTransition>(this.attach_BlankTransition), new Action<BlankTransition>(this.detach_BlankTransition));
			this._C_AnnulmentReason = new EntitySet<C_AnnulmentReason>(new Action<C_AnnulmentReason>(this.attach_C_AnnulmentReason), new Action<C_AnnulmentReason>(this.detach_C_AnnulmentReason));
			this._C_CatalogRestriction = new EntitySet<C_CatalogRestriction>(new Action<C_CatalogRestriction>(this.attach_C_CatalogRestriction), new Action<C_CatalogRestriction>(this.detach_C_CatalogRestriction));
			this._C_CN = new EntitySet<C_CN>(new Action<C_CN>(this.attach_C_CN), new Action<C_CN>(this.detach_C_CN));
			this._C_CNCategory = new EntitySet<C_CNCategory>(new Action<C_CNCategory>(this.attach_C_CNCategory), new Action<C_CNCategory>(this.detach_C_CNCategory));
			this._C_CNCategoryDocument = new EntitySet<C_CNCategoryDocument>(new Action<C_CNCategoryDocument>(this.attach_C_CNCategoryDocument), new Action<C_CNCategoryDocument>(this.detach_C_CNCategoryDocument));
			this._C_CNCategoryFGADocument = new EntitySet<C_CNCategoryFGADocument>(new Action<C_CNCategoryFGADocument>(this.attach_C_CNCategoryFGADocument), new Action<C_CNCategoryFGADocument>(this.detach_C_CNCategoryFGADocument));
			this._C_CNCategoryItem = new EntitySet<C_CNCategoryItem>(new Action<C_CNCategoryItem>(this.attach_C_CNCategoryItem), new Action<C_CNCategoryItem>(this.detach_C_CNCategoryItem));
			this._C_CNGroup = new EntitySet<C_CNGroup>(new Action<C_CNGroup>(this.attach_C_CNGroup), new Action<C_CNGroup>(this.detach_C_CNGroup));
			this._C_CNType = new EntitySet<C_CNType>(new Action<C_CNType>(this.attach_C_CNType), new Action<C_CNType>(this.detach_C_CNType));
			this._C_Country = new EntitySet<C_Country>(new Action<C_Country>(this.attach_C_Country), new Action<C_Country>(this.detach_C_Country));
			this._C_CountryGroup = new EntitySet<C_CountryGroup>(new Action<C_CountryGroup>(this.attach_C_CountryGroup), new Action<C_CountryGroup>(this.detach_C_CountryGroup));
			this._C_Crypto = new EntitySet<C_Crypto>(new Action<C_Crypto>(this.attach_C_Crypto), new Action<C_Crypto>(this.detach_C_Crypto));
			this._C_Currency = new EntitySet<C_Currency>(new Action<C_Currency>(this.attach_C_Currency), new Action<C_Currency>(this.detach_C_Currency));
			this._C_CustomHouse = new EntitySet<C_CustomHouse>(new Action<C_CustomHouse>(this.attach_C_CustomHouse), new Action<C_CustomHouse>(this.detach_C_CustomHouse));
			this._C_CustomHouseContact = new EntitySet<C_CustomHouseContact>(new Action<C_CustomHouseContact>(this.attach_C_CustomHouseContact), new Action<C_CustomHouseContact>(this.detach_C_CustomHouseContact));
			this._C_DocumentSourceType = new EntitySet<C_DocumentSourceType>(new Action<C_DocumentSourceType>(this.attach_C_DocumentSourceType), new Action<C_DocumentSourceType>(this.detach_C_DocumentSourceType));
			this._C_DocumentType = new EntitySet<C_DocumentType>(new Action<C_DocumentType>(this.attach_C_DocumentType), new Action<C_DocumentType>(this.detach_C_DocumentType));
			this._C_FGA = new EntitySet<C_FGA>(new Action<C_FGA>(this.attach_C_FGA), new Action<C_FGA>(this.detach_C_FGA));
			this._C_FGADocument = new EntitySet<C_FGADocument>(new Action<C_FGADocument>(this.attach_C_FGADocument), new Action<C_FGADocument>(this.detach_C_FGADocument));
			this._C_FGADocumentSigner = new EntitySet<C_FGADocumentSigner>(new Action<C_FGADocumentSigner>(this.attach_C_FGADocumentSigner), new Action<C_FGADocumentSigner>(this.detach_C_FGADocumentSigner));
			this._C_FtsCountryGroup = new EntitySet<C_FtsCountryGroup>(new Action<C_FtsCountryGroup>(this.attach_C_FtsCountryGroup), new Action<C_FtsCountryGroup>(this.detach_C_FtsCountryGroup));
			this._C_Help = new EntitySet<C_Help>(new Action<C_Help>(this.attach_C_Help), new Action<C_Help>(this.detach_C_Help));
			this._C_LawOrgan = new EntitySet<C_LawOrgan>(new Action<C_LawOrgan>(this.attach_C_LawOrgan), new Action<C_LawOrgan>(this.detach_C_LawOrgan));
			this._C_LegalDocument = new EntitySet<C_LegalDocument>(new Action<C_LegalDocument>(this.attach_C_LegalDocument), new Action<C_LegalDocument>(this.detach_C_LegalDocument));
			this._C_LegalDocumentType = new EntitySet<C_LegalDocumentType>(new Action<C_LegalDocumentType>(this.attach_C_LegalDocumentType), new Action<C_LegalDocumentType>(this.detach_C_LegalDocumentType));
			this._C_LicenseType = new EntitySet<C_LicenseType>(new Action<C_LicenseType>(this.attach_C_LicenseType), new Action<C_LicenseType>(this.detach_C_LicenseType));
			this._C_MaxTargetValidity = new EntitySet<C_MaxTargetValidity>(new Action<C_MaxTargetValidity>(this.attach_C_MaxTargetValidity), new Action<C_MaxTargetValidity>(this.detach_C_MaxTargetValidity));
			this._C_Measure = new EntitySet<C_Measure>(new Action<C_Measure>(this.attach_C_Measure), new Action<C_Measure>(this.detach_C_Measure));
			this._C_MFC = new EntitySet<C_MFC>(new Action<C_MFC>(this.attach_C_MFC), new Action<C_MFC>(this.detach_C_MFC));
			this._C_OperationType = new EntitySet<C_OperationType>(new Action<C_OperationType>(this.attach_C_OperationType), new Action<C_OperationType>(this.detach_C_OperationType));
			this._C_QuoteCategory = new EntitySet<C_QuoteCategory>(new Action<C_QuoteCategory>(this.attach_C_QuoteCategory), new Action<C_QuoteCategory>(this.detach_C_QuoteCategory));
			this._C_RES = new EntitySet<C_RES>(new Action<C_RES>(this.attach_C_RES), new Action<C_RES>(this.detach_C_RES));
			this._C_RFSubject = new EntitySet<C_RFSubject>(new Action<C_RFSubject>(this.attach_C_RFSubject), new Action<C_RFSubject>(this.detach_C_RFSubject));
			this._C_Tariff = new EntitySet<C_Tariff>(new Action<C_Tariff>(this.attach_C_Tariff), new Action<C_Tariff>(this.detach_C_Tariff));
			this._C_UseType = new EntitySet<C_UseType>(new Action<C_UseType>(this.attach_C_UseType), new Action<C_UseType>(this.detach_C_UseType));
			this._C_VisitPurpose = new EntitySet<C_VisitPurpose>(new Action<C_VisitPurpose>(this.attach_C_VisitPurpose), new Action<C_VisitPurpose>(this.detach_C_VisitPurpose));
			this._C_VisitWeek = new EntitySet<C_VisitWeek>(new Action<C_VisitWeek>(this.attach_C_VisitWeek), new Action<C_VisitWeek>(this.detach_C_VisitWeek));
			this._CertificateInfo = new EntitySet<CertificateInfo>(new Action<CertificateInfo>(this.attach_CertificateInfo), new Action<CertificateInfo>(this.detach_CertificateInfo));
			this._CommodityDocument = new EntitySet<CommodityDocument>(new Action<CommodityDocument>(this.attach_CommodityDocument), new Action<CommodityDocument>(this.detach_CommodityDocument));
			this._Contractor = new EntitySet<Contractor>(new Action<Contractor>(this.attach_Contractor), new Action<Contractor>(this.detach_Contractor));
			this._ContractorChiefPerson = new EntitySet<ContractorChiefPerson>(new Action<ContractorChiefPerson>(this.attach_ContractorChiefPerson), new Action<ContractorChiefPerson>(this.detach_ContractorChiefPerson));
			this._ControlParameters = new EntitySet<ControlParameters>(new Action<ControlParameters>(this.attach_ControlParameters), new Action<ControlParameters>(this.detach_ControlParameters));
			this._Copy_ContractorChiefPerson = new EntitySet<Copy_ContractorChiefPerson>(new Action<Copy_ContractorChiefPerson>(this.attach_Copy_ContractorChiefPerson), new Action<Copy_ContractorChiefPerson>(this.detach_Copy_ContractorChiefPerson));
			this._Curriculum = new EntitySet<Curriculum>(new Action<Curriculum>(this.attach_Curriculum), new Action<Curriculum>(this.detach_Curriculum));
			this._CurriculumQuestion = new EntitySet<CurriculumQuestion>(new Action<CurriculumQuestion>(this.attach_CurriculumQuestion), new Action<CurriculumQuestion>(this.detach_CurriculumQuestion));
			this._CurriculumQuestionAnswer = new EntitySet<CurriculumQuestionAnswer>(new Action<CurriculumQuestionAnswer>(this.attach_CurriculumQuestionAnswer), new Action<CurriculumQuestionAnswer>(this.detach_CurriculumQuestionAnswer));
			this._CustomsDeclaration = new EntitySet<CustomsDeclaration>(new Action<CustomsDeclaration>(this.attach_CustomsDeclaration), new Action<CustomsDeclaration>(this.detach_CustomsDeclaration));
			this._Employee = new EntitySet<Employee>(new Action<Employee>(this.attach_Employee), new Action<Employee>(this.detach_Employee));
			this._Subject = new EntitySet<Employee>(new Action<Employee>(this.attach_Subject), new Action<Employee>(this.detach_Subject));
			this._FactAnnulment = new EntitySet<FactAnnulment>(new Action<FactAnnulment>(this.attach_FactAnnulment), new Action<FactAnnulment>(this.detach_FactAnnulment));
			this._FactClose = new EntitySet<FactClose>(new Action<FactClose>(this.attach_FactClose), new Action<FactClose>(this.detach_FactClose));
			this._FactForm = new EntitySet<FactForm>(new Action<FactForm>(this.attach_FactForm), new Action<FactForm>(this.detach_FactForm));
			this._FactRegister = new EntitySet<FactRegister>(new Action<FactRegister>(this.attach_FactRegister), new Action<FactRegister>(this.detach_FactRegister));
			this._FactReject = new EntitySet<FactReject>(new Action<FactReject>(this.attach_FactReject), new Action<FactReject>(this.detach_FactReject));
			this._FactResume = new EntitySet<FactResume>(new Action<FactResume>(this.attach_FactResume), new Action<FactResume>(this.detach_FactResume));
			this._FactSuspend = new EntitySet<FactSuspend>(new Action<FactSuspend>(this.attach_FactSuspend), new Action<FactSuspend>(this.detach_FactSuspend));
			this._ForeignAuthorization = new EntitySet<ForeignAuthorization>(new Action<ForeignAuthorization>(this.attach_ForeignAuthorization), new Action<ForeignAuthorization>(this.detach_ForeignAuthorization));
			this._FTSExportLog = new EntitySet<FTSExportLog>(new Action<FTSExportLog>(this.attach_FTSExportLog), new Action<FTSExportLog>(this.detach_FTSExportLog));
			this._HST_Contractor = new EntitySet<HST_Contractor>(new Action<HST_Contractor>(this.attach_HST_Contractor), new Action<HST_Contractor>(this.detach_HST_Contractor));
			this._HST_MM_FormView = new EntitySet<HST_MM_FormView>(new Action<HST_MM_FormView>(this.attach_HST_MM_FormView), new Action<HST_MM_FormView>(this.detach_HST_MM_FormView));
			this._HST_N_TimeZone = new EntitySet<HST_N_TimeZone>(new Action<HST_N_TimeZone>(this.attach_HST_N_TimeZone), new Action<HST_N_TimeZone>(this.detach_HST_N_TimeZone));
			this._INT_Command = new EntitySet<INT_Command>(new Action<INT_Command>(this.attach_INT_Command), new Action<INT_Command>(this.detach_INT_Command));
			this._INT_Handler = new EntitySet<INT_Handler>(new Action<INT_Handler>(this.attach_INT_Handler), new Action<INT_Handler>(this.detach_INT_Handler));
			this._INT_System = new EntitySet<INT_System>(new Action<INT_System>(this.attach_INT_System), new Action<INT_System>(this.detach_INT_System));
			this._LicenseExecution = new EntitySet<LicenseExecution>(new Action<LicenseExecution>(this.attach_LicenseExecution), new Action<LicenseExecution>(this.detach_LicenseExecution));
			this._MM_Codifier = new EntitySet<MM_Codifier>(new Action<MM_Codifier>(this.attach_MM_Codifier), new Action<MM_Codifier>(this.detach_MM_Codifier));
			this._MM_CodifierValue = new EntitySet<MM_CodifierValue>(new Action<MM_CodifierValue>(this.attach_MM_CodifierValue), new Action<MM_CodifierValue>(this.detach_MM_CodifierValue));
			this._MM_DataValidation = new EntitySet<MM_DataValidation>(new Action<MM_DataValidation>(this.attach_MM_DataValidation), new Action<MM_DataValidation>(this.detach_MM_DataValidation));
			this._MM_FormField = new EntitySet<MM_FormField>(new Action<MM_FormField>(this.attach_MM_FormField), new Action<MM_FormField>(this.detach_MM_FormField));
			this._MM_FormFieldAttribute = new EntitySet<MM_FormFieldAttribute>(new Action<MM_FormFieldAttribute>(this.attach_MM_FormFieldAttribute), new Action<MM_FormFieldAttribute>(this.detach_MM_FormFieldAttribute));
			this._MM_FormFieldGroup = new EntitySet<MM_FormFieldGroup>(new Action<MM_FormFieldGroup>(this.attach_MM_FormFieldGroup), new Action<MM_FormFieldGroup>(this.detach_MM_FormFieldGroup));
			this._MM_FormView = new EntitySet<MM_FormView>(new Action<MM_FormView>(this.attach_MM_FormView), new Action<MM_FormView>(this.detach_MM_FormView));
			this._MM_MethodParameter = new EntitySet<MM_MethodParameter>(new Action<MM_MethodParameter>(this.attach_MM_MethodParameter), new Action<MM_MethodParameter>(this.detach_MM_MethodParameter));
			this._MM_ObjectProperty = new EntitySet<MM_ObjectProperty>(new Action<MM_ObjectProperty>(this.attach_MM_ObjectProperty), new Action<MM_ObjectProperty>(this.detach_MM_ObjectProperty));
			this._MM_ObjectType = new EntitySet<MM_ObjectType>(new Action<MM_ObjectType>(this.attach_MM_ObjectType), new Action<MM_ObjectType>(this.detach_MM_ObjectType));
			this._MM_Package = new EntitySet<MM_Package>(new Action<MM_Package>(this.attach_MM_Package), new Action<MM_Package>(this.detach_MM_Package));
			this._MM_Predicate = new EntitySet<MM_Predicate>(new Action<MM_Predicate>(this.attach_MM_Predicate), new Action<MM_Predicate>(this.detach_MM_Predicate));
			this._N_DownloadLog = new EntitySet<N_DownloadLog>(new Action<N_DownloadLog>(this.attach_N_DownloadLog), new Action<N_DownloadLog>(this.detach_N_DownloadLog));
			this._N_File = new EntitySet<N_File>(new Action<N_File>(this.attach_N_File), new Action<N_File>(this.detach_N_File));
			this._N_File_Creator = new EntitySet<N_File>(new Action<N_File>(this.attach_N_File_Creator), new Action<N_File>(this.detach_N_File_Creator));
			this._N_File_LastModifiedUser = new EntitySet<N_File>(new Action<N_File>(this.attach_N_File_LastModifiedUser), new Action<N_File>(this.detach_N_File_LastModifiedUser));
			this._N_FileLibraryType = new EntitySet<N_FileLibraryType>(new Action<N_FileLibraryType>(this.attach_N_FileLibraryType), new Action<N_FileLibraryType>(this.detach_N_FileLibraryType));
			this._N_Filter = new EntitySet<N_Filter>(new Action<N_Filter>(this.attach_N_Filter), new Action<N_Filter>(this.detach_N_Filter));
			this._N_Folder = new EntitySet<N_Folder>(new Action<N_Folder>(this.attach_N_Folder), new Action<N_Folder>(this.detach_N_Folder));
			this._N_Folder_LastModifiedUser = new EntitySet<N_Folder>(new Action<N_Folder>(this.attach_N_Folder_LastModifiedUser), new Action<N_Folder>(this.detach_N_Folder_LastModifiedUser));
			this._N_MenuItem = new EntitySet<N_MenuItem>(new Action<N_MenuItem>(this.attach_N_MenuItem), new Action<N_MenuItem>(this.detach_N_MenuItem));
			this._N_RssFeed = new EntitySet<N_RssFeed>(new Action<N_RssFeed>(this.attach_N_RssFeed), new Action<N_RssFeed>(this.detach_N_RssFeed));
			this._N_Settings = new EntitySet<N_Settings>(new Action<N_Settings>(this.attach_N_Settings), new Action<N_Settings>(this.detach_N_Settings));
			this._N_SqlStatementLog = new EntitySet<N_SqlStatementLog>(new Action<N_SqlStatementLog>(this.attach_N_SqlStatementLog), new Action<N_SqlStatementLog>(this.detach_N_SqlStatementLog));
			this._N_TimeZone = new EntitySet<N_TimeZone>(new Action<N_TimeZone>(this.attach_N_TimeZone), new Action<N_TimeZone>(this.detach_N_TimeZone));
			this._N_VirusScanLog = new EntitySet<N_VirusScanLog>(new Action<N_VirusScanLog>(this.attach_N_VirusScanLog), new Action<N_VirusScanLog>(this.detach_N_VirusScanLog));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._OrderDocAsso = new EntitySet<OrderDocAsso>(new Action<OrderDocAsso>(this.attach_OrderDocAsso), new Action<OrderDocAsso>(this.detach_OrderDocAsso));
			this._OrderDocImportSubject = new EntitySet<OrderDocImportSubject>(new Action<OrderDocImportSubject>(this.attach_OrderDocImportSubject), new Action<OrderDocImportSubject>(this.detach_OrderDocImportSubject));
			this._OrderDocPassport = new EntitySet<OrderDocPassport>(new Action<OrderDocPassport>(this.attach_OrderDocPassport), new Action<OrderDocPassport>(this.detach_OrderDocPassport));
			this._OrderDocReplicationLog = new EntitySet<OrderDocReplicationLog>(new Action<OrderDocReplicationLog>(this.attach_OrderDocReplicationLog), new Action<OrderDocReplicationLog>(this.detach_OrderDocReplicationLog));
			this._OrderDocResponsible = new EntitySet<OrderDocResponsible>(new Action<OrderDocResponsible>(this.attach_OrderDocResponsible), new Action<OrderDocResponsible>(this.detach_OrderDocResponsible));
			this._OrderDocState = new EntitySet<OrderDocState>(new Action<OrderDocState>(this.attach_OrderDocState), new Action<OrderDocState>(this.detach_OrderDocState));
			this._OrderDocTransition = new EntitySet<OrderDocTransition>(new Action<OrderDocTransition>(this.attach_OrderDocTransition), new Action<OrderDocTransition>(this.detach_OrderDocTransition));
			this._PaymentOrder = new EntitySet<PaymentOrder>(new Action<PaymentOrder>(this.attach_PaymentOrder), new Action<PaymentOrder>(this.detach_PaymentOrder));
			this._Quota = new EntitySet<Quota>(new Action<Quota>(this.attach_Quota), new Action<Quota>(this.detach_Quota));
			this._QuotaEvent = new EntitySet<QuotaEvent>(new Action<QuotaEvent>(this.attach_QuotaEvent), new Action<QuotaEvent>(this.detach_QuotaEvent));
			this._QuotaRedistribution = new EntitySet<QuotaRedistribution>(new Action<QuotaRedistribution>(this.attach_QuotaRedistribution), new Action<QuotaRedistribution>(this.detach_QuotaRedistribution));
			this._Representation = new EntitySet<Representation>(new Action<Representation>(this.attach_Representation), new Action<Representation>(this.detach_Representation));
			this._SpecificationCommon = new EntitySet<SpecificationCommon>(new Action<SpecificationCommon>(this.attach_SpecificationCommon), new Action<SpecificationCommon>(this.detach_SpecificationCommon));
			this._SpecificationItem = new EntitySet<SpecificationItem>(new Action<SpecificationItem>(this.attach_SpecificationItem), new Action<SpecificationItem>(this.detach_SpecificationItem));
			this._SPM_C_RoleType = new EntitySet<SPM_C_RoleType>(new Action<SPM_C_RoleType>(this.attach_SPM_C_RoleType), new Action<SPM_C_RoleType>(this.detach_SPM_C_RoleType));
			this._SPM_Role = new EntitySet<SPM_Role>(new Action<SPM_Role>(this.attach_SPM_Role), new Action<SPM_Role>(this.detach_SPM_Role));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._SPM_Subject_LastModifiedUser = new EntitySet<SPM_Subject>(new Action<SPM_Subject>(this.attach_SPM_Subject_LastModifiedUser), new Action<SPM_Subject>(this.detach_SPM_Subject_LastModifiedUser));
			this._SPM_SubjectAccess = new EntitySet<SPM_SubjectAccess>(new Action<SPM_SubjectAccess>(this.attach_SPM_SubjectAccess), new Action<SPM_SubjectAccess>(this.detach_SPM_SubjectAccess));
			this._SPM_SubjectDelegate = new EntitySet<SPM_SubjectDelegate>(new Action<SPM_SubjectDelegate>(this.attach_SPM_SubjectDelegate), new Action<SPM_SubjectDelegate>(this.detach_SPM_SubjectDelegate));
			this._SPM_SubjectDelegate_DelegatedTo = new EntitySet<SPM_SubjectDelegate>(new Action<SPM_SubjectDelegate>(this.attach_SPM_SubjectDelegate_DelegatedTo), new Action<SPM_SubjectDelegate>(this.detach_SPM_SubjectDelegate_DelegatedTo));
			this._SPM_SubjectDelegate_LastModifiedUser = new EntitySet<SPM_SubjectDelegate>(new Action<SPM_SubjectDelegate>(this.attach_SPM_SubjectDelegate_LastModifiedUser), new Action<SPM_SubjectDelegate>(this.detach_SPM_SubjectDelegate_LastModifiedUser));
			this._SPM_SubjectRole = new EntitySet<SPM_SubjectRole>(new Action<SPM_SubjectRole>(this.attach_SPM_SubjectRole), new Action<SPM_SubjectRole>(this.detach_SPM_SubjectRole));
			this._TM_TaskExecution = new EntitySet<TM_TaskExecution>(new Action<TM_TaskExecution>(this.attach_TM_TaskExecution), new Action<TM_TaskExecution>(this.detach_TM_TaskExecution));
			this._Training = new EntitySet<Training>(new Action<Training>(this.attach_Training), new Action<Training>(this.detach_Training));
			this._Training_Subject = new EntitySet<Training>(new Action<Training>(this.attach_Training_Subject), new Action<Training>(this.detach_Training_Subject));
			this._TreasuryPayment = new EntitySet<TreasuryPayment>(new Action<TreasuryPayment>(this.attach_TreasuryPayment), new Action<TreasuryPayment>(this.detach_TreasuryPayment));
			this._UserActivity = new EntitySet<UserActivity>(new Action<UserActivity>(this.attach_UserActivity), new Action<UserActivity>(this.detach_UserActivity));
			this._UserInfo = default(EntityRef<UserInfo>);
			this._VisitException = new EntitySet<VisitException>(new Action<VisitException>(this.attach_VisitException), new Action<VisitException>(this.detach_VisitException));
			this._VisitRecord = new EntitySet<VisitRecord>(new Action<VisitRecord>(this.attach_VisitRecord), new Action<VisitRecord>(this.detach_VisitRecord));
			this._VisitSchedule = new EntitySet<VisitSchedule>(new Action<VisitSchedule>(this.attach_VisitSchedule), new Action<VisitSchedule>(this.detach_VisitSchedule));
			this._VisitTime = new EntitySet<VisitTime>(new Action<VisitTime>(this.attach_VisitTime), new Action<VisitTime>(this.detach_VisitTime));
			this._WF_Activity = new EntitySet<WF_Activity>(new Action<WF_Activity>(this.attach_WF_Activity), new Action<WF_Activity>(this.detach_WF_Activity));
			this._WF_Transition = new EntitySet<WF_Transition>(new Action<WF_Transition>(this.attach_WF_Transition), new Action<WF_Transition>(this.detach_WF_Transition));
			this._WF_Workflow = new EntitySet<WF_Workflow>(new Action<WF_Workflow>(this.attach_WF_Workflow), new Action<WF_Workflow>(this.detach_WF_Workflow));
			OnCreated();
		}
		
		[Column(Storage="_SubjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_SID", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SID
		{
			get
			{
				return this._SID;
			}
			set
			{
				if ((this._SID != value))
				{
					this.OnSIDChanging(value);
					this.SendPropertyChanging();
					this._SID = value;
					this.SendPropertyChanged("SID");
					this.OnSIDChanged();
				}
			}
		}
		
		[Column(Storage="_SystemName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SystemName
		{
			get
			{
				return this._SystemName;
			}
			set
			{
				if ((this._SystemName != value))
				{
					this.OnSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SystemName = value;
					this.SendPropertyChanged("SystemName");
					this.OnSystemNameChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordHash", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[Column(Storage="_RegMagicString", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string RegMagicString
		{
			get
			{
				return this._RegMagicString;
			}
			set
			{
				if ((this._RegMagicString != value))
				{
					this.OnRegMagicStringChanging(value);
					this.SendPropertyChanging();
					this._RegMagicString = value;
					this.SendPropertyChanged("RegMagicString");
					this.OnRegMagicStringChanged();
				}
			}
		}
		
		[Column(Storage="_RegDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this.OnRegDateChanging(value);
					this.SendPropertyChanging();
					this._RegDate = value;
					this.SendPropertyChanged("RegDate");
					this.OnRegDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_EMail", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}
		
		[Column(Storage="_MustChangePassword", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool MustChangePassword
		{
			get
			{
				return this._MustChangePassword;
			}
			set
			{
				if ((this._MustChangePassword != value))
				{
					this.OnMustChangePasswordChanging(value);
					this.SendPropertyChanging();
					this._MustChangePassword = value;
					this.SendPropertyChanged("MustChangePassword");
					this.OnMustChangePasswordChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordExpDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PasswordExpDate
		{
			get
			{
				return this._PasswordExpDate;
			}
			set
			{
				if ((this._PasswordExpDate != value))
				{
					this.OnPasswordExpDateChanging(value);
					this.SendPropertyChanging();
					this._PasswordExpDate = value;
					this.SendPropertyChanged("PasswordExpDate");
					this.OnPasswordExpDateChanged();
				}
			}
		}
		
		[Association(Name="FK_Appendix_LastModifiedUser", Storage="_Appendix", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<Appendix> Appendix
		{
			get
			{
				return this._Appendix;
			}
			set
			{
				this._Appendix.Assign(value);
			}
		}
		
		[Association(Name="FK_AppendixQuantity_LastModifiedUser", Storage="_AppendixQuantity", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<AppendixQuantity> AppendixQuantity
		{
			get
			{
				return this._AppendixQuantity;
			}
			set
			{
				this._AppendixQuantity.Assign(value);
			}
		}
		
		[Association(Name="FK_Blank_LastModifiedUser", Storage="_Blank", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<Blank> Blank
		{
			get
			{
				return this._Blank;
			}
			set
			{
				this._Blank.Assign(value);
			}
		}
		
		[Association(Name="FK_BlankTransition_Subject", Storage="_BlankTransition", ThisKey="SubjectID", OtherKey="SubjectID", DeleteRule="NO ACTION")]
		public EntitySet<BlankTransition> BlankTransition
		{
			get
			{
				return this._BlankTransition;
			}
			set
			{
				this._BlankTransition.Assign(value);
			}
		}
		
		[Association(Name="FK_C_AnnulmentReason_LastModifiedUser", Storage="_C_AnnulmentReason", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_AnnulmentReason> C_AnnulmentReason
		{
			get
			{
				return this._C_AnnulmentReason;
			}
			set
			{
				this._C_AnnulmentReason.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CatalogRestriction_LastModifiedUser", Storage="_C_CatalogRestriction", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_CatalogRestriction> C_CatalogRestriction
		{
			get
			{
				return this._C_CatalogRestriction;
			}
			set
			{
				this._C_CatalogRestriction.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CN_LastModifiedUser", Storage="_C_CN", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_CN> C_CN
		{
			get
			{
				return this._C_CN;
			}
			set
			{
				this._C_CN.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CNCategory_LastModifiedUser", Storage="_C_CNCategory", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_CNCategory> C_CNCategory
		{
			get
			{
				return this._C_CNCategory;
			}
			set
			{
				this._C_CNCategory.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CNCategoryDocument_LastModifiedUser", Storage="_C_CNCategoryDocument", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_CNCategoryDocument> C_CNCategoryDocument
		{
			get
			{
				return this._C_CNCategoryDocument;
			}
			set
			{
				this._C_CNCategoryDocument.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CNCategoryFGADocument_LastModifiedUser", Storage="_C_CNCategoryFGADocument", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_CNCategoryFGADocument> C_CNCategoryFGADocument
		{
			get
			{
				return this._C_CNCategoryFGADocument;
			}
			set
			{
				this._C_CNCategoryFGADocument.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CNCategoryItem_LastModifiedUser", Storage="_C_CNCategoryItem", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_CNCategoryItem> C_CNCategoryItem
		{
			get
			{
				return this._C_CNCategoryItem;
			}
			set
			{
				this._C_CNCategoryItem.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CNGroup_LastModifiedUser", Storage="_C_CNGroup", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_CNGroup> C_CNGroup
		{
			get
			{
				return this._C_CNGroup;
			}
			set
			{
				this._C_CNGroup.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CNType_LastModifiedUser", Storage="_C_CNType", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_CNType> C_CNType
		{
			get
			{
				return this._C_CNType;
			}
			set
			{
				this._C_CNType.Assign(value);
			}
		}
		
		[Association(Name="FK_C_Country_LastModifiedUser", Storage="_C_Country", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_Country> C_Country
		{
			get
			{
				return this._C_Country;
			}
			set
			{
				this._C_Country.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CountryGroup_LastModifiedUser", Storage="_C_CountryGroup", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_CountryGroup> C_CountryGroup
		{
			get
			{
				return this._C_CountryGroup;
			}
			set
			{
				this._C_CountryGroup.Assign(value);
			}
		}
		
		[Association(Name="FK_C_Crypto_LastModifiedUser", Storage="_C_Crypto", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_Crypto> C_Crypto
		{
			get
			{
				return this._C_Crypto;
			}
			set
			{
				this._C_Crypto.Assign(value);
			}
		}
		
		[Association(Name="FK_C_Currency_LastModifiedUser", Storage="_C_Currency", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_Currency> C_Currency
		{
			get
			{
				return this._C_Currency;
			}
			set
			{
				this._C_Currency.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CustomHouse_LastModifiedUser", Storage="_C_CustomHouse", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_CustomHouse> C_CustomHouse
		{
			get
			{
				return this._C_CustomHouse;
			}
			set
			{
				this._C_CustomHouse.Assign(value);
			}
		}
		
		[Association(Name="FK_C_CustomHouseContact_LastModifiedUser", Storage="_C_CustomHouseContact", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_CustomHouseContact> C_CustomHouseContact
		{
			get
			{
				return this._C_CustomHouseContact;
			}
			set
			{
				this._C_CustomHouseContact.Assign(value);
			}
		}
		
		[Association(Name="FK_C_DocumentSourceType_LastModifiedUser", Storage="_C_DocumentSourceType", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_DocumentSourceType> C_DocumentSourceType
		{
			get
			{
				return this._C_DocumentSourceType;
			}
			set
			{
				this._C_DocumentSourceType.Assign(value);
			}
		}
		
		[Association(Name="FK_C_DocumentType_LastModifiedUser", Storage="_C_DocumentType", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_DocumentType> C_DocumentType
		{
			get
			{
				return this._C_DocumentType;
			}
			set
			{
				this._C_DocumentType.Assign(value);
			}
		}
		
		[Association(Name="FK_C_FGA_LastModifiedUser", Storage="_C_FGA", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_FGA> C_FGA
		{
			get
			{
				return this._C_FGA;
			}
			set
			{
				this._C_FGA.Assign(value);
			}
		}
		
		[Association(Name="FK_C_FGADocument_LastModifiedUser", Storage="_C_FGADocument", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_FGADocument> C_FGADocument
		{
			get
			{
				return this._C_FGADocument;
			}
			set
			{
				this._C_FGADocument.Assign(value);
			}
		}
		
		[Association(Name="FK_C_FGADocumentSigner_LastModifiedUser", Storage="_C_FGADocumentSigner", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_FGADocumentSigner> C_FGADocumentSigner
		{
			get
			{
				return this._C_FGADocumentSigner;
			}
			set
			{
				this._C_FGADocumentSigner.Assign(value);
			}
		}
		
		[Association(Name="FK_C_FtsCountryGroup_LastModifiedUser", Storage="_C_FtsCountryGroup", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_FtsCountryGroup> C_FtsCountryGroup
		{
			get
			{
				return this._C_FtsCountryGroup;
			}
			set
			{
				this._C_FtsCountryGroup.Assign(value);
			}
		}
		
		[Association(Name="FK_C_Help_LastModifiedUser", Storage="_C_Help", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_Help> C_Help
		{
			get
			{
				return this._C_Help;
			}
			set
			{
				this._C_Help.Assign(value);
			}
		}
		
		[Association(Name="FK_C_LawOrgan_LastModifiedUser", Storage="_C_LawOrgan", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_LawOrgan> C_LawOrgan
		{
			get
			{
				return this._C_LawOrgan;
			}
			set
			{
				this._C_LawOrgan.Assign(value);
			}
		}
		
		[Association(Name="FK_C_LegalDocument_LastModifiedUser", Storage="_C_LegalDocument", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_LegalDocument> C_LegalDocument
		{
			get
			{
				return this._C_LegalDocument;
			}
			set
			{
				this._C_LegalDocument.Assign(value);
			}
		}
		
		[Association(Name="FK_C_LegalDocumentType_LastModifiedUser", Storage="_C_LegalDocumentType", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_LegalDocumentType> C_LegalDocumentType
		{
			get
			{
				return this._C_LegalDocumentType;
			}
			set
			{
				this._C_LegalDocumentType.Assign(value);
			}
		}
		
		[Association(Name="FK_C_LicenseType_LastModifiedUser", Storage="_C_LicenseType", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_LicenseType> C_LicenseType
		{
			get
			{
				return this._C_LicenseType;
			}
			set
			{
				this._C_LicenseType.Assign(value);
			}
		}
		
		[Association(Name="FK_C_MaxTargetValidity_LastModifiedUser", Storage="_C_MaxTargetValidity", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_MaxTargetValidity> C_MaxTargetValidity
		{
			get
			{
				return this._C_MaxTargetValidity;
			}
			set
			{
				this._C_MaxTargetValidity.Assign(value);
			}
		}
		
		[Association(Name="FK_C_Measure_LastModifiedUser", Storage="_C_Measure", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_Measure> C_Measure
		{
			get
			{
				return this._C_Measure;
			}
			set
			{
				this._C_Measure.Assign(value);
			}
		}
		
		[Association(Name="FK_C_MFC_LastModifiedUser", Storage="_C_MFC", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_MFC> C_MFC
		{
			get
			{
				return this._C_MFC;
			}
			set
			{
				this._C_MFC.Assign(value);
			}
		}
		
		[Association(Name="FK_C_OperationType_LastModifiedUser", Storage="_C_OperationType", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_OperationType> C_OperationType
		{
			get
			{
				return this._C_OperationType;
			}
			set
			{
				this._C_OperationType.Assign(value);
			}
		}
		
		[Association(Name="FK_C_QuoteCategory_LastModifiedUser", Storage="_C_QuoteCategory", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_QuoteCategory> C_QuoteCategory
		{
			get
			{
				return this._C_QuoteCategory;
			}
			set
			{
				this._C_QuoteCategory.Assign(value);
			}
		}
		
		[Association(Name="FK_C_RES_LastModifiedUser", Storage="_C_RES", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_RES> C_RES
		{
			get
			{
				return this._C_RES;
			}
			set
			{
				this._C_RES.Assign(value);
			}
		}
		
		[Association(Name="FK_C_RFSubject_LastModifiedUser", Storage="_C_RFSubject", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_RFSubject> C_RFSubject
		{
			get
			{
				return this._C_RFSubject;
			}
			set
			{
				this._C_RFSubject.Assign(value);
			}
		}
		
		[Association(Name="FK_C_Tariff_LastModifiedUser", Storage="_C_Tariff", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_Tariff> C_Tariff
		{
			get
			{
				return this._C_Tariff;
			}
			set
			{
				this._C_Tariff.Assign(value);
			}
		}
		
		[Association(Name="FK_C_UseType_LastModifiedUser", Storage="_C_UseType", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_UseType> C_UseType
		{
			get
			{
				return this._C_UseType;
			}
			set
			{
				this._C_UseType.Assign(value);
			}
		}
		
		[Association(Name="FK_C_VisitPurpose_LastModifiedUser", Storage="_C_VisitPurpose", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_VisitPurpose> C_VisitPurpose
		{
			get
			{
				return this._C_VisitPurpose;
			}
			set
			{
				this._C_VisitPurpose.Assign(value);
			}
		}
		
		[Association(Name="FK_C_VisitWeek_LastModifiedUser", Storage="_C_VisitWeek", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<C_VisitWeek> C_VisitWeek
		{
			get
			{
				return this._C_VisitWeek;
			}
			set
			{
				this._C_VisitWeek.Assign(value);
			}
		}
		
		[Association(Name="FK_CertificateInfo_LastModifiedUser", Storage="_CertificateInfo", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<CertificateInfo> CertificateInfo
		{
			get
			{
				return this._CertificateInfo;
			}
			set
			{
				this._CertificateInfo.Assign(value);
			}
		}
		
		[Association(Name="FK_CommodityDocument_LastModifiedUser", Storage="_CommodityDocument", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<CommodityDocument> CommodityDocument
		{
			get
			{
				return this._CommodityDocument;
			}
			set
			{
				this._CommodityDocument.Assign(value);
			}
		}
		
		[Association(Name="FK_Contractor_LastModifiedUser", Storage="_Contractor", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<Contractor> Contractor
		{
			get
			{
				return this._Contractor;
			}
			set
			{
				this._Contractor.Assign(value);
			}
		}
		
		[Association(Name="FK_ContractorChiefPerson_LastModifiedUser", Storage="_ContractorChiefPerson", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<ContractorChiefPerson> ContractorChiefPerson
		{
			get
			{
				return this._ContractorChiefPerson;
			}
			set
			{
				this._ContractorChiefPerson.Assign(value);
			}
		}
		
		[Association(Name="FK_ControlParameters_LastModifiedUser", Storage="_ControlParameters", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<ControlParameters> ControlParameters
		{
			get
			{
				return this._ControlParameters;
			}
			set
			{
				this._ControlParameters.Assign(value);
			}
		}
		
		[Association(Name="FK_Copy_ContractorChiefPerson_LastModifiedUser", Storage="_Copy_ContractorChiefPerson", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<Copy_ContractorChiefPerson> Copy_ContractorChiefPerson
		{
			get
			{
				return this._Copy_ContractorChiefPerson;
			}
			set
			{
				this._Copy_ContractorChiefPerson.Assign(value);
			}
		}
		
		[Association(Name="FK_Curriculum_LastModifiedUser", Storage="_Curriculum", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<Curriculum> Curriculum
		{
			get
			{
				return this._Curriculum;
			}
			set
			{
				this._Curriculum.Assign(value);
			}
		}
		
		[Association(Name="FK_CurriculumQuestion_LastModifiedUser", Storage="_CurriculumQuestion", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<CurriculumQuestion> CurriculumQuestion
		{
			get
			{
				return this._CurriculumQuestion;
			}
			set
			{
				this._CurriculumQuestion.Assign(value);
			}
		}
		
		[Association(Name="FK_CurriculumQuestionAnswer_LastModifiedUser", Storage="_CurriculumQuestionAnswer", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<CurriculumQuestionAnswer> CurriculumQuestionAnswer
		{
			get
			{
				return this._CurriculumQuestionAnswer;
			}
			set
			{
				this._CurriculumQuestionAnswer.Assign(value);
			}
		}
		
		[Association(Name="FK_CustomsDeclaration_LastModifiedUser", Storage="_CustomsDeclaration", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<CustomsDeclaration> CustomsDeclaration
		{
			get
			{
				return this._CustomsDeclaration;
			}
			set
			{
				this._CustomsDeclaration.Assign(value);
			}
		}
		
		[Association(Name="FK_Employee_LastModifiedUser", Storage="_Employee", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<Employee> Employee
		{
			get
			{
				return this._Employee;
			}
			set
			{
				this._Employee.Assign(value);
			}
		}
		
		[Association(Name="FK_Employee_SPM_Subject", Storage="_Subject", ThisKey="SubjectID", OtherKey="SPM_SubjectID", DeleteRule="NO ACTION")]
		public EntitySet<Employee> Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				this._Subject.Assign(value);
			}
		}
		
		[Association(Name="FK_FactAnnulment_LastModifiedUser", Storage="_FactAnnulment", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<FactAnnulment> FactAnnulment
		{
			get
			{
				return this._FactAnnulment;
			}
			set
			{
				this._FactAnnulment.Assign(value);
			}
		}
		
		[Association(Name="FK_FactClose_LastModifiedUser", Storage="_FactClose", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<FactClose> FactClose
		{
			get
			{
				return this._FactClose;
			}
			set
			{
				this._FactClose.Assign(value);
			}
		}
		
		[Association(Name="FK_FactForm_LastModifiedUser", Storage="_FactForm", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<FactForm> FactForm
		{
			get
			{
				return this._FactForm;
			}
			set
			{
				this._FactForm.Assign(value);
			}
		}
		
		[Association(Name="FK_FactRegister_LastModifiedUser", Storage="_FactRegister", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<FactRegister> FactRegister
		{
			get
			{
				return this._FactRegister;
			}
			set
			{
				this._FactRegister.Assign(value);
			}
		}
		
		[Association(Name="FK_FactReject_LastModifiedUser", Storage="_FactReject", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<FactReject> FactReject
		{
			get
			{
				return this._FactReject;
			}
			set
			{
				this._FactReject.Assign(value);
			}
		}
		
		[Association(Name="FK_FactResume_LastModifiedUser", Storage="_FactResume", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<FactResume> FactResume
		{
			get
			{
				return this._FactResume;
			}
			set
			{
				this._FactResume.Assign(value);
			}
		}
		
		[Association(Name="FK_FactSuspend_LastModifiedUser", Storage="_FactSuspend", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<FactSuspend> FactSuspend
		{
			get
			{
				return this._FactSuspend;
			}
			set
			{
				this._FactSuspend.Assign(value);
			}
		}
		
		[Association(Name="FK_ForeignAuthorization_LastModifiedUser", Storage="_ForeignAuthorization", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<ForeignAuthorization> ForeignAuthorization
		{
			get
			{
				return this._ForeignAuthorization;
			}
			set
			{
				this._ForeignAuthorization.Assign(value);
			}
		}
		
		[Association(Name="FK_FTSExportLog_LastModifiedUser", Storage="_FTSExportLog", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<FTSExportLog> FTSExportLog
		{
			get
			{
				return this._FTSExportLog;
			}
			set
			{
				this._FTSExportLog.Assign(value);
			}
		}
		
		[Association(Name="FK_HST_Contractor_LastModifiedUser", Storage="_HST_Contractor", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<HST_Contractor> HST_Contractor
		{
			get
			{
				return this._HST_Contractor;
			}
			set
			{
				this._HST_Contractor.Assign(value);
			}
		}
		
		[Association(Name="FK_HST_MM_FormView_LastModifiedUser", Storage="_HST_MM_FormView", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<HST_MM_FormView> HST_MM_FormView
		{
			get
			{
				return this._HST_MM_FormView;
			}
			set
			{
				this._HST_MM_FormView.Assign(value);
			}
		}
		
		[Association(Name="FK_HST_N_TimeZone_LastModifiedUser", Storage="_HST_N_TimeZone", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<HST_N_TimeZone> HST_N_TimeZone
		{
			get
			{
				return this._HST_N_TimeZone;
			}
			set
			{
				this._HST_N_TimeZone.Assign(value);
			}
		}
		
		[Association(Name="FK_INT_Command_LastModifiedUser", Storage="_INT_Command", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<INT_Command> INT_Command
		{
			get
			{
				return this._INT_Command;
			}
			set
			{
				this._INT_Command.Assign(value);
			}
		}
		
		[Association(Name="FK_INT_Handler_LastModifiedUser", Storage="_INT_Handler", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<INT_Handler> INT_Handler
		{
			get
			{
				return this._INT_Handler;
			}
			set
			{
				this._INT_Handler.Assign(value);
			}
		}
		
		[Association(Name="FK_INT_System_LastModifiedUser", Storage="_INT_System", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<INT_System> INT_System
		{
			get
			{
				return this._INT_System;
			}
			set
			{
				this._INT_System.Assign(value);
			}
		}
		
		[Association(Name="FK_LicenseExecution_LastModifiedUser", Storage="_LicenseExecution", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<LicenseExecution> LicenseExecution
		{
			get
			{
				return this._LicenseExecution;
			}
			set
			{
				this._LicenseExecution.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_Codifier_LastModifiedUser", Storage="_MM_Codifier", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<MM_Codifier> MM_Codifier
		{
			get
			{
				return this._MM_Codifier;
			}
			set
			{
				this._MM_Codifier.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_CodifierValue_LastModifiedUser", Storage="_MM_CodifierValue", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<MM_CodifierValue> MM_CodifierValue
		{
			get
			{
				return this._MM_CodifierValue;
			}
			set
			{
				this._MM_CodifierValue.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_DataValidation_LastModifiedUser", Storage="_MM_DataValidation", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<MM_DataValidation> MM_DataValidation
		{
			get
			{
				return this._MM_DataValidation;
			}
			set
			{
				this._MM_DataValidation.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_FormField_LastModifiedUser", Storage="_MM_FormField", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<MM_FormField> MM_FormField
		{
			get
			{
				return this._MM_FormField;
			}
			set
			{
				this._MM_FormField.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_FormFieldAttribute_LastModifiedUser", Storage="_MM_FormFieldAttribute", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<MM_FormFieldAttribute> MM_FormFieldAttribute
		{
			get
			{
				return this._MM_FormFieldAttribute;
			}
			set
			{
				this._MM_FormFieldAttribute.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_FormFieldGroup_LastModifiedUser", Storage="_MM_FormFieldGroup", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<MM_FormFieldGroup> MM_FormFieldGroup
		{
			get
			{
				return this._MM_FormFieldGroup;
			}
			set
			{
				this._MM_FormFieldGroup.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_FormView_LastModifiedUser", Storage="_MM_FormView", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<MM_FormView> MM_FormView
		{
			get
			{
				return this._MM_FormView;
			}
			set
			{
				this._MM_FormView.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_MethodParameter_LastModifiedUser", Storage="_MM_MethodParameter", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<MM_MethodParameter> MM_MethodParameter
		{
			get
			{
				return this._MM_MethodParameter;
			}
			set
			{
				this._MM_MethodParameter.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_ObjectProperty_LastModifiedUser", Storage="_MM_ObjectProperty", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<MM_ObjectProperty> MM_ObjectProperty
		{
			get
			{
				return this._MM_ObjectProperty;
			}
			set
			{
				this._MM_ObjectProperty.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_ObjectType_LastModifiedUser", Storage="_MM_ObjectType", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<MM_ObjectType> MM_ObjectType
		{
			get
			{
				return this._MM_ObjectType;
			}
			set
			{
				this._MM_ObjectType.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_Package_LastModifiedUser", Storage="_MM_Package", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<MM_Package> MM_Package
		{
			get
			{
				return this._MM_Package;
			}
			set
			{
				this._MM_Package.Assign(value);
			}
		}
		
		[Association(Name="FK_MM_Predicate_LastModifiedUser", Storage="_MM_Predicate", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<MM_Predicate> MM_Predicate
		{
			get
			{
				return this._MM_Predicate;
			}
			set
			{
				this._MM_Predicate.Assign(value);
			}
		}
		
		[Association(Name="FK_N_DownloadLog_LastModifiedUser", Storage="_N_DownloadLog", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<N_DownloadLog> N_DownloadLog
		{
			get
			{
				return this._N_DownloadLog;
			}
			set
			{
				this._N_DownloadLog.Assign(value);
			}
		}
		
		[Association(Name="FK_N_File_CheckedOutBy", Storage="_N_File", ThisKey="SubjectID", OtherKey="CheckedOutByID", DeleteRule="NO ACTION")]
		public EntitySet<N_File> N_File
		{
			get
			{
				return this._N_File;
			}
			set
			{
				this._N_File.Assign(value);
			}
		}
		
		[Association(Name="FK_N_File_Creator", Storage="_N_File_Creator", ThisKey="SubjectID", OtherKey="CreatorID", DeleteRule="NO ACTION")]
		public EntitySet<N_File> N_File_Creator
		{
			get
			{
				return this._N_File_Creator;
			}
			set
			{
				this._N_File_Creator.Assign(value);
			}
		}
		
		[Association(Name="FK_N_File_LastModifiedUser", Storage="_N_File_LastModifiedUser", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<N_File> N_File_LastModifiedUser
		{
			get
			{
				return this._N_File_LastModifiedUser;
			}
			set
			{
				this._N_File_LastModifiedUser.Assign(value);
			}
		}
		
		[Association(Name="FK_N_FileLibraryType_LastModifiedUser", Storage="_N_FileLibraryType", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<N_FileLibraryType> N_FileLibraryType
		{
			get
			{
				return this._N_FileLibraryType;
			}
			set
			{
				this._N_FileLibraryType.Assign(value);
			}
		}
		
		[Association(Name="FK_N_Filter_SPM_Subject", Storage="_N_Filter", ThisKey="SubjectID", OtherKey="SubjectID", DeleteRule="CASCADE")]
		public EntitySet<N_Filter> N_Filter
		{
			get
			{
				return this._N_Filter;
			}
			set
			{
				this._N_Filter.Assign(value);
			}
		}
		
		[Association(Name="FK_N_Folder_Creator", Storage="_N_Folder", ThisKey="SubjectID", OtherKey="CreatorID", DeleteRule="NO ACTION")]
		public EntitySet<N_Folder> N_Folder
		{
			get
			{
				return this._N_Folder;
			}
			set
			{
				this._N_Folder.Assign(value);
			}
		}
		
		[Association(Name="FK_N_Folder_LastModifiedUser", Storage="_N_Folder_LastModifiedUser", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<N_Folder> N_Folder_LastModifiedUser
		{
			get
			{
				return this._N_Folder_LastModifiedUser;
			}
			set
			{
				this._N_Folder_LastModifiedUser.Assign(value);
			}
		}
		
		[Association(Name="FK_N_MenuItem_SPM_Subject", Storage="_N_MenuItem", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<N_MenuItem> N_MenuItem
		{
			get
			{
				return this._N_MenuItem;
			}
			set
			{
				this._N_MenuItem.Assign(value);
			}
		}
		
		[Association(Name="FK_N_RssFeed_LastModifiedUser", Storage="_N_RssFeed", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<N_RssFeed> N_RssFeed
		{
			get
			{
				return this._N_RssFeed;
			}
			set
			{
				this._N_RssFeed.Assign(value);
			}
		}
		
		[Association(Name="FK_N_Settings_LastModifiedUser", Storage="_N_Settings", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<N_Settings> N_Settings
		{
			get
			{
				return this._N_Settings;
			}
			set
			{
				this._N_Settings.Assign(value);
			}
		}
		
		[Association(Name="FK_N_SqlStatementLog_LastModifiedUser", Storage="_N_SqlStatementLog", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<N_SqlStatementLog> N_SqlStatementLog
		{
			get
			{
				return this._N_SqlStatementLog;
			}
			set
			{
				this._N_SqlStatementLog.Assign(value);
			}
		}
		
		[Association(Name="FK_N_TimeZone_LastModifiedUser", Storage="_N_TimeZone", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<N_TimeZone> N_TimeZone
		{
			get
			{
				return this._N_TimeZone;
			}
			set
			{
				this._N_TimeZone.Assign(value);
			}
		}
		
		[Association(Name="FK_N_VirusScanLog_LastModifiedUser", Storage="_N_VirusScanLog", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<N_VirusScanLog> N_VirusScanLog
		{
			get
			{
				return this._N_VirusScanLog;
			}
			set
			{
				this._N_VirusScanLog.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_LastModifiedUser", Storage="_OrderDoc", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocAsso_LastModifiedUser", Storage="_OrderDocAsso", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocAsso> OrderDocAsso
		{
			get
			{
				return this._OrderDocAsso;
			}
			set
			{
				this._OrderDocAsso.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocImportSubject_Subject", Storage="_OrderDocImportSubject", ThisKey="SubjectID", OtherKey="SubjectID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocImportSubject> OrderDocImportSubject
		{
			get
			{
				return this._OrderDocImportSubject;
			}
			set
			{
				this._OrderDocImportSubject.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocPassport_LastModifiedUser", Storage="_OrderDocPassport", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocPassport> OrderDocPassport
		{
			get
			{
				return this._OrderDocPassport;
			}
			set
			{
				this._OrderDocPassport.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocReplicationLog_LastModifiedUser", Storage="_OrderDocReplicationLog", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocReplicationLog> OrderDocReplicationLog
		{
			get
			{
				return this._OrderDocReplicationLog;
			}
			set
			{
				this._OrderDocReplicationLog.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocResponsible_LastModifiedUser", Storage="_OrderDocResponsible", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocResponsible> OrderDocResponsible
		{
			get
			{
				return this._OrderDocResponsible;
			}
			set
			{
				this._OrderDocResponsible.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocState_LastModifiedUser", Storage="_OrderDocState", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocState> OrderDocState
		{
			get
			{
				return this._OrderDocState;
			}
			set
			{
				this._OrderDocState.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocTransition_Subject", Storage="_OrderDocTransition", ThisKey="SubjectID", OtherKey="SubjectID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocTransition> OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition;
			}
			set
			{
				this._OrderDocTransition.Assign(value);
			}
		}
		
		[Association(Name="FK_PaymentOrder_LastModifiedUser", Storage="_PaymentOrder", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<PaymentOrder> PaymentOrder
		{
			get
			{
				return this._PaymentOrder;
			}
			set
			{
				this._PaymentOrder.Assign(value);
			}
		}
		
		[Association(Name="FK_Quota_LastModifiedUser", Storage="_Quota", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<Quota> Quota
		{
			get
			{
				return this._Quota;
			}
			set
			{
				this._Quota.Assign(value);
			}
		}
		
		[Association(Name="FK_QuotaEvent_LastModifiedUser", Storage="_QuotaEvent", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<QuotaEvent> QuotaEvent
		{
			get
			{
				return this._QuotaEvent;
			}
			set
			{
				this._QuotaEvent.Assign(value);
			}
		}
		
		[Association(Name="FK_QuotaRedistribution_LastModifiedUser", Storage="_QuotaRedistribution", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<QuotaRedistribution> QuotaRedistribution
		{
			get
			{
				return this._QuotaRedistribution;
			}
			set
			{
				this._QuotaRedistribution.Assign(value);
			}
		}
		
		[Association(Name="FK_Representation_LastModifiedUser", Storage="_Representation", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<Representation> Representation
		{
			get
			{
				return this._Representation;
			}
			set
			{
				this._Representation.Assign(value);
			}
		}
		
		[Association(Name="FK_SpecificationCommon_LastModifiedUser", Storage="_SpecificationCommon", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<SpecificationCommon> SpecificationCommon
		{
			get
			{
				return this._SpecificationCommon;
			}
			set
			{
				this._SpecificationCommon.Assign(value);
			}
		}
		
		[Association(Name="FK_SpecificationItem_LastModifiedUser", Storage="_SpecificationItem", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<SpecificationItem> SpecificationItem
		{
			get
			{
				return this._SpecificationItem;
			}
			set
			{
				this._SpecificationItem.Assign(value);
			}
		}
		
		[Association(Name="FK_SPM_C_RoleType_LastModifiedUser", Storage="_SPM_C_RoleType", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<SPM_C_RoleType> SPM_C_RoleType
		{
			get
			{
				return this._SPM_C_RoleType;
			}
			set
			{
				this._SPM_C_RoleType.Assign(value);
			}
		}
		
		[Association(Name="FK_SPM_Role_LastModifiedUser", Storage="_SPM_Role", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<SPM_Role> SPM_Role
		{
			get
			{
				return this._SPM_Role;
			}
			set
			{
				this._SPM_Role.Assign(value);
			}
		}
		
		[Association(Name="FK_SPM_Subject_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.SPM_Subject_LastModifiedUser.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.SPM_Subject_LastModifiedUser.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_SPM_Subject_LastModifiedUser", Storage="_SPM_Subject_LastModifiedUser", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<SPM_Subject> SPM_Subject_LastModifiedUser
		{
			get
			{
				return this._SPM_Subject_LastModifiedUser;
			}
			set
			{
				this._SPM_Subject_LastModifiedUser.Assign(value);
			}
		}
		
		[Association(Name="FK_SPM_SubjectAccess_SPM_Subject", Storage="_SPM_SubjectAccess", ThisKey="SubjectID", OtherKey="SubjectID", DeleteRule="NO ACTION")]
		public EntitySet<SPM_SubjectAccess> SPM_SubjectAccess
		{
			get
			{
				return this._SPM_SubjectAccess;
			}
			set
			{
				this._SPM_SubjectAccess.Assign(value);
			}
		}
		
		[Association(Name="FK_SPM_SubjectDelegate_DelegatedFrom", Storage="_SPM_SubjectDelegate", ThisKey="SubjectID", OtherKey="DelegatedFromID", DeleteRule="NO ACTION")]
		public EntitySet<SPM_SubjectDelegate> SPM_SubjectDelegate
		{
			get
			{
				return this._SPM_SubjectDelegate;
			}
			set
			{
				this._SPM_SubjectDelegate.Assign(value);
			}
		}
		
		[Association(Name="FK_SPM_SubjectDelegate_DelegatedTo", Storage="_SPM_SubjectDelegate_DelegatedTo", ThisKey="SubjectID", OtherKey="DelegatedToID", DeleteRule="NO ACTION")]
		public EntitySet<SPM_SubjectDelegate> SPM_SubjectDelegate_DelegatedTo
		{
			get
			{
				return this._SPM_SubjectDelegate_DelegatedTo;
			}
			set
			{
				this._SPM_SubjectDelegate_DelegatedTo.Assign(value);
			}
		}
		
		[Association(Name="FK_SPM_SubjectDelegate_LastModifiedUser", Storage="_SPM_SubjectDelegate_LastModifiedUser", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<SPM_SubjectDelegate> SPM_SubjectDelegate_LastModifiedUser
		{
			get
			{
				return this._SPM_SubjectDelegate_LastModifiedUser;
			}
			set
			{
				this._SPM_SubjectDelegate_LastModifiedUser.Assign(value);
			}
		}
		
		[Association(Name="FK_SPM_SubjectRole_Subject", Storage="_SPM_SubjectRole", ThisKey="SubjectID", OtherKey="SubjectID", DeleteRule="NO ACTION")]
		public EntitySet<SPM_SubjectRole> SPM_SubjectRole
		{
			get
			{
				return this._SPM_SubjectRole;
			}
			set
			{
				this._SPM_SubjectRole.Assign(value);
			}
		}
		
		[Association(Name="FK_TM_TaskExecution_LastModifiedUser", Storage="_TM_TaskExecution", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<TM_TaskExecution> TM_TaskExecution
		{
			get
			{
				return this._TM_TaskExecution;
			}
			set
			{
				this._TM_TaskExecution.Assign(value);
			}
		}
		
		[Association(Name="FK_Training_LastModifiedUser", Storage="_Training", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<Training> Training
		{
			get
			{
				return this._Training;
			}
			set
			{
				this._Training.Assign(value);
			}
		}
		
		[Association(Name="FK_Training_Subject", Storage="_Training_Subject", ThisKey="SubjectID", OtherKey="SubjectID", DeleteRule="NO ACTION")]
		public EntitySet<Training> Training_Subject
		{
			get
			{
				return this._Training_Subject;
			}
			set
			{
				this._Training_Subject.Assign(value);
			}
		}
		
		[Association(Name="FK_TreasuryPayment_LastModifiedUser", Storage="_TreasuryPayment", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<TreasuryPayment> TreasuryPayment
		{
			get
			{
				return this._TreasuryPayment;
			}
			set
			{
				this._TreasuryPayment.Assign(value);
			}
		}
		
		[Association(Name="FK_UserActivity_LastModifiedUser", Storage="_UserActivity", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<UserActivity> UserActivity
		{
			get
			{
				return this._UserActivity;
			}
			set
			{
				this._UserActivity.Assign(value);
			}
		}
		
		[Association(Name="FK_UserInfo_SPM_Subject", Storage="_UserInfo", ThisKey="SubjectID", OtherKey="UserInfoID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public UserInfo UserInfo
		{
			get
			{
				return this._UserInfo.Entity;
			}
			set
			{
				UserInfo previousValue = this._UserInfo.Entity;
				if (((previousValue != value) 
							|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserInfo.Entity = null;
						previousValue.SPM_Subject = null;
					}
					this._UserInfo.Entity = value;
					if ((value != null))
					{
						value.SPM_Subject = this;
					}
					this.SendPropertyChanged("UserInfo");
				}
			}
		}
		
		[Association(Name="FK_VisitException_LastModifiedUser", Storage="_VisitException", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<VisitException> VisitException
		{
			get
			{
				return this._VisitException;
			}
			set
			{
				this._VisitException.Assign(value);
			}
		}
		
		[Association(Name="FK_VisitRecord_LastModifiedUser", Storage="_VisitRecord", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<VisitRecord> VisitRecord
		{
			get
			{
				return this._VisitRecord;
			}
			set
			{
				this._VisitRecord.Assign(value);
			}
		}
		
		[Association(Name="FK_VisitSchedule_LastModifiedUser", Storage="_VisitSchedule", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<VisitSchedule> VisitSchedule
		{
			get
			{
				return this._VisitSchedule;
			}
			set
			{
				this._VisitSchedule.Assign(value);
			}
		}
		
		[Association(Name="FK_VisitTime_LastModifiedUser", Storage="_VisitTime", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<VisitTime> VisitTime
		{
			get
			{
				return this._VisitTime;
			}
			set
			{
				this._VisitTime.Assign(value);
			}
		}
		
		[Association(Name="FK_WF_Activity_LastModifiedUser", Storage="_WF_Activity", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<WF_Activity> WF_Activity
		{
			get
			{
				return this._WF_Activity;
			}
			set
			{
				this._WF_Activity.Assign(value);
			}
		}
		
		[Association(Name="FK_WF_Transition_LastModifiedUser", Storage="_WF_Transition", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<WF_Transition> WF_Transition
		{
			get
			{
				return this._WF_Transition;
			}
			set
			{
				this._WF_Transition.Assign(value);
			}
		}
		
		[Association(Name="FK_WF_Workflow_LastModifiedUser", Storage="_WF_Workflow", ThisKey="SubjectID", OtherKey="LastModifiedUserID", DeleteRule="NO ACTION")]
		public EntitySet<WF_Workflow> WF_Workflow
		{
			get
			{
				return this._WF_Workflow;
			}
			set
			{
				this._WF_Workflow.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appendix(Appendix entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_Appendix(Appendix entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_AppendixQuantity(AppendixQuantity entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_AppendixQuantity(AppendixQuantity entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_Blank(Blank entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_Blank(Blank entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_C_AnnulmentReason(C_AnnulmentReason entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_AnnulmentReason(C_AnnulmentReason entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_CatalogRestriction(C_CatalogRestriction entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_CatalogRestriction(C_CatalogRestriction entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_CN(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_CN(C_CN entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_CNCategory(C_CNCategory entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_CNCategory(C_CNCategory entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_CNCategoryDocument(C_CNCategoryDocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_CNCategoryDocument(C_CNCategoryDocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_CNCategoryFGADocument(C_CNCategoryFGADocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_CNCategoryFGADocument(C_CNCategoryFGADocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_CNCategoryItem(C_CNCategoryItem entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_CNCategoryItem(C_CNCategoryItem entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_CNGroup(C_CNGroup entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_CNGroup(C_CNGroup entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_CNType(C_CNType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_CNType(C_CNType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_Country(C_Country entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_Country(C_Country entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_CountryGroup(C_CountryGroup entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_CountryGroup(C_CountryGroup entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_Crypto(C_Crypto entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_Crypto(C_Crypto entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_Currency(C_Currency entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_Currency(C_Currency entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_CustomHouse(C_CustomHouse entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_CustomHouse(C_CustomHouse entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_CustomHouseContact(C_CustomHouseContact entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_CustomHouseContact(C_CustomHouseContact entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_DocumentSourceType(C_DocumentSourceType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_DocumentSourceType(C_DocumentSourceType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_DocumentType(C_DocumentType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_DocumentType(C_DocumentType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_FGA(C_FGA entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_FGA(C_FGA entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_FGADocument(C_FGADocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_FGADocument(C_FGADocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_FGADocumentSigner(C_FGADocumentSigner entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_FGADocumentSigner(C_FGADocumentSigner entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_FtsCountryGroup(C_FtsCountryGroup entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_FtsCountryGroup(C_FtsCountryGroup entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_Help(C_Help entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_Help(C_Help entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_LawOrgan(C_LawOrgan entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_LawOrgan(C_LawOrgan entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_LegalDocument(C_LegalDocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_LegalDocument(C_LegalDocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_LegalDocumentType(C_LegalDocumentType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_LegalDocumentType(C_LegalDocumentType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_LicenseType(C_LicenseType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_LicenseType(C_LicenseType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_MaxTargetValidity(C_MaxTargetValidity entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_MaxTargetValidity(C_MaxTargetValidity entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_Measure(C_Measure entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_Measure(C_Measure entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_MFC(C_MFC entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_MFC(C_MFC entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_OperationType(C_OperationType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_OperationType(C_OperationType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_QuoteCategory(C_QuoteCategory entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_QuoteCategory(C_QuoteCategory entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_RES(C_RES entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_RES(C_RES entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_RFSubject(C_RFSubject entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_RFSubject(C_RFSubject entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_Tariff(C_Tariff entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_Tariff(C_Tariff entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_UseType(C_UseType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_UseType(C_UseType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_VisitPurpose(C_VisitPurpose entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_VisitPurpose(C_VisitPurpose entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_C_VisitWeek(C_VisitWeek entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_C_VisitWeek(C_VisitWeek entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_CertificateInfo(CertificateInfo entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_CertificateInfo(CertificateInfo entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_CommodityDocument(CommodityDocument entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_Contractor(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_Contractor(Contractor entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_ContractorChiefPerson(ContractorChiefPerson entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_ContractorChiefPerson(ContractorChiefPerson entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_ControlParameters(ControlParameters entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_ControlParameters(ControlParameters entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_Copy_ContractorChiefPerson(Copy_ContractorChiefPerson entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_Copy_ContractorChiefPerson(Copy_ContractorChiefPerson entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_Curriculum(Curriculum entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_Curriculum(Curriculum entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_CurriculumQuestion(CurriculumQuestion entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_CurriculumQuestion(CurriculumQuestion entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_CurriculumQuestionAnswer(CurriculumQuestionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_CurriculumQuestionAnswer(CurriculumQuestionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_CustomsDeclaration(CustomsDeclaration entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_Employee(Employee entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_Employee(Employee entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_Subject(Employee entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Subject = this;
		}
		
		private void detach_Subject(Employee entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Subject = null;
		}
		
		private void attach_FactAnnulment(FactAnnulment entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_FactAnnulment(FactAnnulment entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_FactClose(FactClose entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_FactClose(FactClose entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_FactForm(FactForm entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_FactForm(FactForm entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_FactRegister(FactRegister entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_FactRegister(FactRegister entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_FactReject(FactReject entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_FactReject(FactReject entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_FactResume(FactResume entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_FactResume(FactResume entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_FactSuspend(FactSuspend entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_FactSuspend(FactSuspend entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_ForeignAuthorization(ForeignAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_FTSExportLog(FTSExportLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_FTSExportLog(FTSExportLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_HST_Contractor(HST_Contractor entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_HST_MM_FormView(HST_MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_HST_MM_FormView(HST_MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_HST_N_TimeZone(HST_N_TimeZone entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_HST_N_TimeZone(HST_N_TimeZone entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_INT_Command(INT_Command entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_INT_Command(INT_Command entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_INT_Handler(INT_Handler entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_INT_Handler(INT_Handler entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_INT_System(INT_System entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_INT_System(INT_System entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_LicenseExecution(LicenseExecution entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_LicenseExecution(LicenseExecution entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_MM_Codifier(MM_Codifier entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_MM_Codifier(MM_Codifier entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_MM_CodifierValue(MM_CodifierValue entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_MM_CodifierValue(MM_CodifierValue entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_MM_DataValidation(MM_DataValidation entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_MM_DataValidation(MM_DataValidation entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_MM_FormField(MM_FormField entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_MM_FormField(MM_FormField entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_MM_FormFieldAttribute(MM_FormFieldAttribute entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_MM_FormFieldAttribute(MM_FormFieldAttribute entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_MM_FormFieldGroup(MM_FormFieldGroup entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_MM_FormFieldGroup(MM_FormFieldGroup entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_MM_FormView(MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_MM_FormView(MM_FormView entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_MM_MethodParameter(MM_MethodParameter entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_MM_MethodParameter(MM_MethodParameter entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_MM_ObjectProperty(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_MM_ObjectProperty(MM_ObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_MM_ObjectType(MM_ObjectType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_MM_ObjectType(MM_ObjectType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_MM_Package(MM_Package entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_MM_Package(MM_Package entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_MM_Predicate(MM_Predicate entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_MM_Predicate(MM_Predicate entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_N_DownloadLog(N_DownloadLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_N_DownloadLog(N_DownloadLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_N_File(N_File entity)
		{
			this.SendPropertyChanging();
			entity.CheckedOutBy = this;
		}
		
		private void detach_N_File(N_File entity)
		{
			this.SendPropertyChanging();
			entity.CheckedOutBy = null;
		}
		
		private void attach_N_File_Creator(N_File entity)
		{
			this.SendPropertyChanging();
			entity.Creator = this;
		}
		
		private void detach_N_File_Creator(N_File entity)
		{
			this.SendPropertyChanging();
			entity.Creator = null;
		}
		
		private void attach_N_File_LastModifiedUser(N_File entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_N_File_LastModifiedUser(N_File entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_N_FileLibraryType(N_FileLibraryType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_N_FileLibraryType(N_FileLibraryType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_N_Filter(N_Filter entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Subject = this;
		}
		
		private void detach_N_Filter(N_Filter entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Subject = null;
		}
		
		private void attach_N_Folder(N_Folder entity)
		{
			this.SendPropertyChanging();
			entity.Creator = this;
		}
		
		private void detach_N_Folder(N_Folder entity)
		{
			this.SendPropertyChanging();
			entity.Creator = null;
		}
		
		private void attach_N_Folder_LastModifiedUser(N_Folder entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_N_Folder_LastModifiedUser(N_Folder entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_N_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Subject = this;
		}
		
		private void detach_N_MenuItem(N_MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Subject = null;
		}
		
		private void attach_N_RssFeed(N_RssFeed entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_N_RssFeed(N_RssFeed entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_N_Settings(N_Settings entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_N_Settings(N_Settings entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_N_SqlStatementLog(N_SqlStatementLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_N_SqlStatementLog(N_SqlStatementLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_N_TimeZone(N_TimeZone entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_N_TimeZone(N_TimeZone entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_N_VirusScanLog(N_VirusScanLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_N_VirusScanLog(N_VirusScanLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_OrderDocAsso(OrderDocAsso entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_OrderDocAsso(OrderDocAsso entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_OrderDocImportSubject(OrderDocImportSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_OrderDocImportSubject(OrderDocImportSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_OrderDocPassport(OrderDocPassport entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_OrderDocPassport(OrderDocPassport entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_OrderDocReplicationLog(OrderDocReplicationLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_OrderDocReplicationLog(OrderDocReplicationLog entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_OrderDocResponsible(OrderDocResponsible entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_OrderDocResponsible(OrderDocResponsible entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_OrderDocState(OrderDocState entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_OrderDocState(OrderDocState entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_PaymentOrder(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_PaymentOrder(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_Quota(Quota entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_QuotaEvent(QuotaEvent entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_QuotaEvent(QuotaEvent entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_QuotaRedistribution(QuotaRedistribution entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_QuotaRedistribution(QuotaRedistribution entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_Representation(Representation entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_Representation(Representation entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_SpecificationCommon(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_SpecificationCommon(SpecificationCommon entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_SpecificationItem(SpecificationItem entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_SPM_C_RoleType(SPM_C_RoleType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_SPM_C_RoleType(SPM_C_RoleType entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_SPM_Role(SPM_Role entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_SPM_Role(SPM_Role entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_SPM_Subject_LastModifiedUser(SPM_Subject entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_SPM_Subject_LastModifiedUser(SPM_Subject entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_SPM_SubjectAccess(SPM_SubjectAccess entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Subject = this;
		}
		
		private void detach_SPM_SubjectAccess(SPM_SubjectAccess entity)
		{
			this.SendPropertyChanging();
			entity.SPM_Subject = null;
		}
		
		private void attach_SPM_SubjectDelegate(SPM_SubjectDelegate entity)
		{
			this.SendPropertyChanging();
			entity.DelegatedFrom = this;
		}
		
		private void detach_SPM_SubjectDelegate(SPM_SubjectDelegate entity)
		{
			this.SendPropertyChanging();
			entity.DelegatedFrom = null;
		}
		
		private void attach_SPM_SubjectDelegate_DelegatedTo(SPM_SubjectDelegate entity)
		{
			this.SendPropertyChanging();
			entity.DelegatedTo = this;
		}
		
		private void detach_SPM_SubjectDelegate_DelegatedTo(SPM_SubjectDelegate entity)
		{
			this.SendPropertyChanging();
			entity.DelegatedTo = null;
		}
		
		private void attach_SPM_SubjectDelegate_LastModifiedUser(SPM_SubjectDelegate entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_SPM_SubjectDelegate_LastModifiedUser(SPM_SubjectDelegate entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_SPM_SubjectRole(SPM_SubjectRole entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_SPM_SubjectRole(SPM_SubjectRole entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_TM_TaskExecution(TM_TaskExecution entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_TM_TaskExecution(TM_TaskExecution entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_Training(Training entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_Training(Training entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_Training_Subject(Training entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Training_Subject(Training entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_TreasuryPayment(TreasuryPayment entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_TreasuryPayment(TreasuryPayment entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_UserActivity(UserActivity entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_UserActivity(UserActivity entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_VisitException(VisitException entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_VisitException(VisitException entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_VisitRecord(VisitRecord entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_VisitSchedule(VisitSchedule entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_VisitSchedule(VisitSchedule entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_VisitTime(VisitTime entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_VisitTime(VisitTime entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_WF_Activity(WF_Activity entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_WF_Activity(WF_Activity entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_WF_Transition(WF_Transition entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_WF_Transition(WF_Transition entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
		
		private void attach_WF_Workflow(WF_Workflow entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = this;
		}
		
		private void detach_WF_Workflow(WF_Workflow entity)
		{
			this.SendPropertyChanging();
			entity.LastModifiedUser = null;
		}
	}
	
	[Table(Name="dbo.SPM_SubjectAccess")]
	public partial class SPM_SubjectAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubjectID;
		
		private int _ActionID;
		
		private EntityRef<SPM_Action> _SPM_Action;
		
		private EntityRef<SPM_Subject> _SPM_Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnActionIDChanging(int value);
    partial void OnActionIDChanged();
    #endregion
		
		public SPM_SubjectAccess()
		{
			this._SPM_Action = default(EntityRef<SPM_Action>);
			this._SPM_Subject = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_SubjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._SPM_Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					if (this._SPM_Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[Association(Name="FK_SPM_SubjectAccess_SPM_Action", Storage="_SPM_Action", ThisKey="ActionID", OtherKey="ActionID", IsForeignKey=true)]
		public SPM_Action SPM_Action
		{
			get
			{
				return this._SPM_Action.Entity;
			}
			set
			{
				SPM_Action previousValue = this._SPM_Action.Entity;
				if (((previousValue != value) 
							|| (this._SPM_Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SPM_Action.Entity = null;
						previousValue.SPM_SubjectAccess.Remove(this);
					}
					this._SPM_Action.Entity = value;
					if ((value != null))
					{
						value.SPM_SubjectAccess.Add(this);
						this._ActionID = value.ActionID;
					}
					else
					{
						this._ActionID = default(int);
					}
					this.SendPropertyChanged("SPM_Action");
				}
			}
		}
		
		[Association(Name="FK_SPM_SubjectAccess_SPM_Subject", Storage="_SPM_Subject", ThisKey="SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject SPM_Subject
		{
			get
			{
				return this._SPM_Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._SPM_Subject.Entity;
				if (((previousValue != value) 
							|| (this._SPM_Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SPM_Subject.Entity = null;
						previousValue.SPM_SubjectAccess.Remove(this);
					}
					this._SPM_Subject.Entity = value;
					if ((value != null))
					{
						value.SPM_SubjectAccess.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("SPM_Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SPM_SubjectDelegate")]
	public partial class SPM_SubjectDelegate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubjectDelegateID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private int _DelegatedToID;
		
		private int _DelegatedFromID;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private bool _IsDeleted;
		
		private EntityRef<SPM_Subject> _DelegatedFrom;
		
		private EntityRef<SPM_Subject> _DelegatedTo;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectDelegateIDChanging(int value);
    partial void OnSubjectDelegateIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnDelegatedToIDChanging(int value);
    partial void OnDelegatedToIDChanged();
    partial void OnDelegatedFromIDChanging(int value);
    partial void OnDelegatedFromIDChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public SPM_SubjectDelegate()
		{
			this._DelegatedFrom = default(EntityRef<SPM_Subject>);
			this._DelegatedTo = default(EntityRef<SPM_Subject>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_SubjectDelegateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubjectDelegateID
		{
			get
			{
				return this._SubjectDelegateID;
			}
			set
			{
				if ((this._SubjectDelegateID != value))
				{
					this.OnSubjectDelegateIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectDelegateID = value;
					this.SendPropertyChanged("SubjectDelegateID");
					this.OnSubjectDelegateIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_DelegatedToID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int DelegatedToID
		{
			get
			{
				return this._DelegatedToID;
			}
			set
			{
				if ((this._DelegatedToID != value))
				{
					if (this._DelegatedTo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDelegatedToIDChanging(value);
					this.SendPropertyChanging();
					this._DelegatedToID = value;
					this.SendPropertyChanged("DelegatedToID");
					this.OnDelegatedToIDChanged();
				}
			}
		}
		
		[Column(Storage="_DelegatedFromID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int DelegatedFromID
		{
			get
			{
				return this._DelegatedFromID;
			}
			set
			{
				if ((this._DelegatedFromID != value))
				{
					if (this._DelegatedFrom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDelegatedFromIDChanging(value);
					this.SendPropertyChanging();
					this._DelegatedFromID = value;
					this.SendPropertyChanged("DelegatedFromID");
					this.OnDelegatedFromIDChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() AND [BeginDate]<getdate() the" +
			"n (0) else (1) end,(0)),(1)))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_SPM_SubjectDelegate_DelegatedFrom", Storage="_DelegatedFrom", ThisKey="DelegatedFromID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject DelegatedFrom
		{
			get
			{
				return this._DelegatedFrom.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._DelegatedFrom.Entity;
				if (((previousValue != value) 
							|| (this._DelegatedFrom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DelegatedFrom.Entity = null;
						previousValue.SPM_SubjectDelegate.Remove(this);
					}
					this._DelegatedFrom.Entity = value;
					if ((value != null))
					{
						value.SPM_SubjectDelegate.Add(this);
						this._DelegatedFromID = value.SubjectID;
					}
					else
					{
						this._DelegatedFromID = default(int);
					}
					this.SendPropertyChanged("DelegatedFrom");
				}
			}
		}
		
		[Association(Name="FK_SPM_SubjectDelegate_DelegatedTo", Storage="_DelegatedTo", ThisKey="DelegatedToID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject DelegatedTo
		{
			get
			{
				return this._DelegatedTo.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._DelegatedTo.Entity;
				if (((previousValue != value) 
							|| (this._DelegatedTo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DelegatedTo.Entity = null;
						previousValue.SPM_SubjectDelegate_DelegatedTo.Remove(this);
					}
					this._DelegatedTo.Entity = value;
					if ((value != null))
					{
						value.SPM_SubjectDelegate_DelegatedTo.Add(this);
						this._DelegatedToID = value.SubjectID;
					}
					else
					{
						this._DelegatedToID = default(int);
					}
					this.SendPropertyChanged("DelegatedTo");
				}
			}
		}
		
		[Association(Name="FK_SPM_SubjectDelegate_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.SPM_SubjectDelegate_LastModifiedUser.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.SPM_SubjectDelegate_LastModifiedUser.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SPM_SubjectRole")]
	public partial class SPM_SubjectRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubjectID;
		
		private int _RoleID;
		
		private EntityRef<SPM_Role> _Role;
		
		private EntityRef<SPM_Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    #endregion
		
		public SPM_SubjectRole()
		{
			this._Role = default(EntityRef<SPM_Role>);
			this._Subject = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_SubjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Association(Name="FK_SPM_SubjectRole_Role", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public SPM_Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				SPM_Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.SPM_SubjectRole.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.SPM_SubjectRole.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[Association(Name="FK_SPM_SubjectRole_Subject", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.SPM_SubjectRole.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.SPM_SubjectRole.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TM_Task")]
	public partial class TM_Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskID;
		
		private string _Title;
		
		private string _Class;
		
		private bool _StartType;
		
		private string _Method;
		
		private int _Interval;
		
		private System.Nullable<System.DateTime> _LastStartDate;
		
		private bool _IsSuccessfull;
		
		private bool _IsActive;
		
		private bool _StartFromService;
		
		private System.Nullable<int> _ErrorLogID;
		
		private int _ExecutionTimeout;
		
		private EntitySet<TM_TaskExecution> _TM_TaskExecution;
		
		private EntitySet<TM_TaskParameter> _Parameters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnClassChanging(string value);
    partial void OnClassChanged();
    partial void OnStartTypeChanging(bool value);
    partial void OnStartTypeChanged();
    partial void OnMethodChanging(string value);
    partial void OnMethodChanged();
    partial void OnIntervalChanging(int value);
    partial void OnIntervalChanged();
    partial void OnLastStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastStartDateChanged();
    partial void OnIsSuccessfullChanging(bool value);
    partial void OnIsSuccessfullChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnStartFromServiceChanging(bool value);
    partial void OnStartFromServiceChanged();
    partial void OnErrorLogIDChanging(System.Nullable<int> value);
    partial void OnErrorLogIDChanged();
    partial void OnExecutionTimeoutChanging(int value);
    partial void OnExecutionTimeoutChanged();
    #endregion
		
		public TM_Task()
		{
			this._TM_TaskExecution = new EntitySet<TM_TaskExecution>(new Action<TM_TaskExecution>(this.attach_TM_TaskExecution), new Action<TM_TaskExecution>(this.detach_TM_TaskExecution));
			this._Parameters = new EntitySet<TM_TaskParameter>(new Action<TM_TaskParameter>(this.attach_Parameters), new Action<TM_TaskParameter>(this.detach_Parameters));
			OnCreated();
		}
		
		[Column(Storage="_TaskID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Class", DbType="NVarChar(150) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}
		
		[Column(Storage="_StartType", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool StartType
		{
			get
			{
				return this._StartType;
			}
			set
			{
				if ((this._StartType != value))
				{
					this.OnStartTypeChanging(value);
					this.SendPropertyChanging();
					this._StartType = value;
					this.SendPropertyChanged("StartType");
					this.OnStartTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Method", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}
		
		[Column(Storage="_Interval", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Interval
		{
			get
			{
				return this._Interval;
			}
			set
			{
				if ((this._Interval != value))
				{
					this.OnIntervalChanging(value);
					this.SendPropertyChanging();
					this._Interval = value;
					this.SendPropertyChanged("Interval");
					this.OnIntervalChanged();
				}
			}
		}
		
		[Column(Storage="_LastStartDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastStartDate
		{
			get
			{
				return this._LastStartDate;
			}
			set
			{
				if ((this._LastStartDate != value))
				{
					this.OnLastStartDateChanging(value);
					this.SendPropertyChanging();
					this._LastStartDate = value;
					this.SendPropertyChanged("LastStartDate");
					this.OnLastStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsSuccessfull", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSuccessfull
		{
			get
			{
				return this._IsSuccessfull;
			}
			set
			{
				if ((this._IsSuccessfull != value))
				{
					this.OnIsSuccessfullChanging(value);
					this.SendPropertyChanging();
					this._IsSuccessfull = value;
					this.SendPropertyChanged("IsSuccessfull");
					this.OnIsSuccessfullChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_StartFromService", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool StartFromService
		{
			get
			{
				return this._StartFromService;
			}
			set
			{
				if ((this._StartFromService != value))
				{
					this.OnStartFromServiceChanging(value);
					this.SendPropertyChanging();
					this._StartFromService = value;
					this.SendPropertyChanged("StartFromService");
					this.OnStartFromServiceChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorLogID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ErrorLogID
		{
			get
			{
				return this._ErrorLogID;
			}
			set
			{
				if ((this._ErrorLogID != value))
				{
					this.OnErrorLogIDChanging(value);
					this.SendPropertyChanging();
					this._ErrorLogID = value;
					this.SendPropertyChanged("ErrorLogID");
					this.OnErrorLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExecutionTimeout", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ExecutionTimeout
		{
			get
			{
				return this._ExecutionTimeout;
			}
			set
			{
				if ((this._ExecutionTimeout != value))
				{
					this.OnExecutionTimeoutChanging(value);
					this.SendPropertyChanging();
					this._ExecutionTimeout = value;
					this.SendPropertyChanged("ExecutionTimeout");
					this.OnExecutionTimeoutChanged();
				}
			}
		}
		
		[Association(Name="FK_TM_TaskExecution_Task", Storage="_TM_TaskExecution", ThisKey="TaskID", OtherKey="TaskID", DeleteRule="CASCADE")]
		public EntitySet<TM_TaskExecution> TM_TaskExecution
		{
			get
			{
				return this._TM_TaskExecution;
			}
			set
			{
				this._TM_TaskExecution.Assign(value);
			}
		}
		
		[Association(Name="FK_TM_TaskParameter_Parent", Storage="_Parameters", ThisKey="TaskID", OtherKey="ParentID", DeleteRule="NO ACTION")]
		public EntitySet<TM_TaskParameter> Parameters
		{
			get
			{
				return this._Parameters;
			}
			set
			{
				this._Parameters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TM_TaskExecution(TM_TaskExecution entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_TM_TaskExecution(TM_TaskExecution entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void attach_Parameters(TM_TaskParameter entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_Parameters(TM_TaskParameter entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
	}
	
	[Table(Name="dbo.TM_TaskExecution")]
	public partial class TM_TaskExecution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskExecutionID;
		
		private string _ExecutionLog;
		
		private System.Nullable<System.DateTime> _FinishDate;
		
		private bool _IsSuccessfull;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _MachineName;
		
		private string _ResultXml;
		
		private System.DateTime _StartDate;
		
		private int _TaskID;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<TM_Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskExecutionIDChanging(int value);
    partial void OnTaskExecutionIDChanged();
    partial void OnExecutionLogChanging(string value);
    partial void OnExecutionLogChanged();
    partial void OnFinishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishDateChanged();
    partial void OnIsSuccessfullChanging(bool value);
    partial void OnIsSuccessfullChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnMachineNameChanging(string value);
    partial void OnMachineNameChanged();
    partial void OnResultXmlChanging(string value);
    partial void OnResultXmlChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public TM_TaskExecution()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Task = default(EntityRef<TM_Task>);
			OnCreated();
		}
		
		[Column(Storage="_TaskExecutionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskExecutionID
		{
			get
			{
				return this._TaskExecutionID;
			}
			set
			{
				if ((this._TaskExecutionID != value))
				{
					this.OnTaskExecutionIDChanging(value);
					this.SendPropertyChanging();
					this._TaskExecutionID = value;
					this.SendPropertyChanged("TaskExecutionID");
					this.OnTaskExecutionIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExecutionLog", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ExecutionLog
		{
			get
			{
				return this._ExecutionLog;
			}
			set
			{
				if ((this._ExecutionLog != value))
				{
					this.OnExecutionLogChanging(value);
					this.SendPropertyChanging();
					this._ExecutionLog = value;
					this.SendPropertyChanged("ExecutionLog");
					this.OnExecutionLogChanged();
				}
			}
		}
		
		[Column(Storage="_FinishDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FinishDate
		{
			get
			{
				return this._FinishDate;
			}
			set
			{
				if ((this._FinishDate != value))
				{
					this.OnFinishDateChanging(value);
					this.SendPropertyChanging();
					this._FinishDate = value;
					this.SendPropertyChanged("FinishDate");
					this.OnFinishDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsSuccessfull", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSuccessfull
		{
			get
			{
				return this._IsSuccessfull;
			}
			set
			{
				if ((this._IsSuccessfull != value))
				{
					this.OnIsSuccessfullChanging(value);
					this.SendPropertyChanging();
					this._IsSuccessfull = value;
					this.SendPropertyChanged("IsSuccessfull");
					this.OnIsSuccessfullChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_MachineName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}
		
		[Column(Storage="_ResultXml", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ResultXml
		{
			get
			{
				return this._ResultXml;
			}
			set
			{
				if ((this._ResultXml != value))
				{
					this.OnResultXmlChanging(value);
					this.SendPropertyChanging();
					this._ResultXml = value;
					this.SendPropertyChanged("ResultXml");
					this.OnResultXmlChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Association(Name="FK_TM_TaskExecution_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.TM_TaskExecution.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.TM_TaskExecution.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_TM_TaskExecution_Task", Storage="_Task", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true, DeleteOnNull=true)]
		public TM_Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				TM_Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.TM_TaskExecution.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.TM_TaskExecution.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TM_TaskParameter")]
	public partial class TM_TaskParameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskParameterID;
		
		private string _Title;
		
		private string _SysName;
		
		private string _Value;
		
		private int _ParentID;
		
		private int _SeqNo;
		
		private EntityRef<TM_Task> _Parent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskParameterIDChanging(int value);
    partial void OnTaskParameterIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnParentIDChanging(int value);
    partial void OnParentIDChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    #endregion
		
		public TM_TaskParameter()
		{
			this._Parent = default(EntityRef<TM_Task>);
			OnCreated();
		}
		
		[Column(Storage="_TaskParameterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskParameterID
		{
			get
			{
				return this._TaskParameterID;
			}
			set
			{
				if ((this._TaskParameterID != value))
				{
					this.OnTaskParameterIDChanging(value);
					this.SendPropertyChanging();
					this._TaskParameterID = value;
					this.SendPropertyChanged("TaskParameterID");
					this.OnTaskParameterIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Association(Name="FK_TM_TaskParameter_Parent", Storage="_Parent", ThisKey="ParentID", OtherKey="TaskID", IsForeignKey=true)]
		public TM_Task Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				TM_Task previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.Parameters.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.Parameters.Add(this);
						this._ParentID = value.TaskID;
					}
					else
					{
						this._ParentID = default(int);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TNVED1")]
	public partial class TNVED1
	{
		
		private string _RAZDEL;
		
		private string _NAIM;
		
		private string _PRIM;
		
		private string _NPRIC;
		
		private string _DPRIC;
		
		private string _DATA;
		
		private string _DATA1;
		
		public TNVED1()
		{
		}
		
		[Column(Storage="_RAZDEL", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string RAZDEL
		{
			get
			{
				return this._RAZDEL;
			}
			set
			{
				if ((this._RAZDEL != value))
				{
					this._RAZDEL = value;
				}
			}
		}
		
		[Column(Storage="_NAIM", DbType="NVarChar(1000)", UpdateCheck=UpdateCheck.Never)]
		public string NAIM
		{
			get
			{
				return this._NAIM;
			}
			set
			{
				if ((this._NAIM != value))
				{
					this._NAIM = value;
				}
			}
		}
		
		[Column(Storage="_PRIM", DbType="NVarChar(1000)", UpdateCheck=UpdateCheck.Never)]
		public string PRIM
		{
			get
			{
				return this._PRIM;
			}
			set
			{
				if ((this._PRIM != value))
				{
					this._PRIM = value;
				}
			}
		}
		
		[Column(Storage="_NPRIC", DbType="VarChar(1000)", UpdateCheck=UpdateCheck.Never)]
		public string NPRIC
		{
			get
			{
				return this._NPRIC;
			}
			set
			{
				if ((this._NPRIC != value))
				{
					this._NPRIC = value;
				}
			}
		}
		
		[Column(Storage="_DPRIC", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string DPRIC
		{
			get
			{
				return this._DPRIC;
			}
			set
			{
				if ((this._DPRIC != value))
				{
					this._DPRIC = value;
				}
			}
		}
		
		[Column(Storage="_DATA", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string DATA
		{
			get
			{
				return this._DATA;
			}
			set
			{
				if ((this._DATA != value))
				{
					this._DATA = value;
				}
			}
		}
		
		[Column(Storage="_DATA1", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string DATA1
		{
			get
			{
				return this._DATA1;
			}
			set
			{
				if ((this._DATA1 != value))
				{
					this._DATA1 = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.TNVED2")]
	public partial class TNVED2
	{
		
		private string _RAZDEL;
		
		private string _GRUPPA;
		
		private string _NAIM;
		
		private string _PRIM;
		
		private string _NPRIC;
		
		private string _DPRIC;
		
		private string _DATA;
		
		private string _DATA1;
		
		public TNVED2()
		{
		}
		
		[Column(Storage="_RAZDEL", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string RAZDEL
		{
			get
			{
				return this._RAZDEL;
			}
			set
			{
				if ((this._RAZDEL != value))
				{
					this._RAZDEL = value;
				}
			}
		}
		
		[Column(Storage="_GRUPPA", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string GRUPPA
		{
			get
			{
				return this._GRUPPA;
			}
			set
			{
				if ((this._GRUPPA != value))
				{
					this._GRUPPA = value;
				}
			}
		}
		
		[Column(Storage="_NAIM", DbType="NVarChar(1000)", UpdateCheck=UpdateCheck.Never)]
		public string NAIM
		{
			get
			{
				return this._NAIM;
			}
			set
			{
				if ((this._NAIM != value))
				{
					this._NAIM = value;
				}
			}
		}
		
		[Column(Storage="_PRIM", DbType="NVarChar(1000)", UpdateCheck=UpdateCheck.Never)]
		public string PRIM
		{
			get
			{
				return this._PRIM;
			}
			set
			{
				if ((this._PRIM != value))
				{
					this._PRIM = value;
				}
			}
		}
		
		[Column(Storage="_NPRIC", DbType="NVarChar(1000)", UpdateCheck=UpdateCheck.Never)]
		public string NPRIC
		{
			get
			{
				return this._NPRIC;
			}
			set
			{
				if ((this._NPRIC != value))
				{
					this._NPRIC = value;
				}
			}
		}
		
		[Column(Storage="_DPRIC", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string DPRIC
		{
			get
			{
				return this._DPRIC;
			}
			set
			{
				if ((this._DPRIC != value))
				{
					this._DPRIC = value;
				}
			}
		}
		
		[Column(Storage="_DATA", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string DATA
		{
			get
			{
				return this._DATA;
			}
			set
			{
				if ((this._DATA != value))
				{
					this._DATA = value;
				}
			}
		}
		
		[Column(Storage="_DATA1", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string DATA1
		{
			get
			{
				return this._DATA1;
			}
			set
			{
				if ((this._DATA1 != value))
				{
					this._DATA1 = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.TNVED3")]
	public partial class TNVED3
	{
		
		private string _GRUPPA;
		
		private string _TOV_POZ;
		
		private string _NAIM;
		
		private string _NPRIC;
		
		private string _DPRIC;
		
		private string _DATA;
		
		private string _DATA1;
		
		public TNVED3()
		{
		}
		
		[Column(Storage="_GRUPPA", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string GRUPPA
		{
			get
			{
				return this._GRUPPA;
			}
			set
			{
				if ((this._GRUPPA != value))
				{
					this._GRUPPA = value;
				}
			}
		}
		
		[Column(Storage="_TOV_POZ", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string TOV_POZ
		{
			get
			{
				return this._TOV_POZ;
			}
			set
			{
				if ((this._TOV_POZ != value))
				{
					this._TOV_POZ = value;
				}
			}
		}
		
		[Column(Storage="_NAIM", DbType="NVarChar(1000)", UpdateCheck=UpdateCheck.Never)]
		public string NAIM
		{
			get
			{
				return this._NAIM;
			}
			set
			{
				if ((this._NAIM != value))
				{
					this._NAIM = value;
				}
			}
		}
		
		[Column(Storage="_NPRIC", DbType="NVarChar(1000)", UpdateCheck=UpdateCheck.Never)]
		public string NPRIC
		{
			get
			{
				return this._NPRIC;
			}
			set
			{
				if ((this._NPRIC != value))
				{
					this._NPRIC = value;
				}
			}
		}
		
		[Column(Storage="_DPRIC", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string DPRIC
		{
			get
			{
				return this._DPRIC;
			}
			set
			{
				if ((this._DPRIC != value))
				{
					this._DPRIC = value;
				}
			}
		}
		
		[Column(Storage="_DATA", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string DATA
		{
			get
			{
				return this._DATA;
			}
			set
			{
				if ((this._DATA != value))
				{
					this._DATA = value;
				}
			}
		}
		
		[Column(Storage="_DATA1", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string DATA1
		{
			get
			{
				return this._DATA1;
			}
			set
			{
				if ((this._DATA1 != value))
				{
					this._DATA1 = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.TNVED4")]
	public partial class TNVED4
	{
		
		private string _GRUPPA;
		
		private string _TOV_POZ;
		
		private string _SUB_POZ;
		
		private string _NAIMBOOK;
		
		private string _PRIM;
		
		private string _EDI1;
		
		private string _EDI2;
		
		private string _EDI3;
		
		private string _NPRIC;
		
		private string _DPRIC;
		
		private string _DATA;
		
		private string _DATA1;
		
		private string _PRIZNAK;
		
		public TNVED4()
		{
		}
		
		[Column(Storage="_GRUPPA", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string GRUPPA
		{
			get
			{
				return this._GRUPPA;
			}
			set
			{
				if ((this._GRUPPA != value))
				{
					this._GRUPPA = value;
				}
			}
		}
		
		[Column(Storage="_TOV_POZ", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string TOV_POZ
		{
			get
			{
				return this._TOV_POZ;
			}
			set
			{
				if ((this._TOV_POZ != value))
				{
					this._TOV_POZ = value;
				}
			}
		}
		
		[Column(Storage="_SUB_POZ", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string SUB_POZ
		{
			get
			{
				return this._SUB_POZ;
			}
			set
			{
				if ((this._SUB_POZ != value))
				{
					this._SUB_POZ = value;
				}
			}
		}
		
		[Column(Storage="_NAIMBOOK", DbType="NVarChar(1000)", UpdateCheck=UpdateCheck.Never)]
		public string NAIMBOOK
		{
			get
			{
				return this._NAIMBOOK;
			}
			set
			{
				if ((this._NAIMBOOK != value))
				{
					this._NAIMBOOK = value;
				}
			}
		}
		
		[Column(Storage="_PRIM", DbType="NVarChar(53)", UpdateCheck=UpdateCheck.Never)]
		public string PRIM
		{
			get
			{
				return this._PRIM;
			}
			set
			{
				if ((this._PRIM != value))
				{
					this._PRIM = value;
				}
			}
		}
		
		[Column(Storage="_EDI1", DbType="NVarChar(300)", UpdateCheck=UpdateCheck.Never)]
		public string EDI1
		{
			get
			{
				return this._EDI1;
			}
			set
			{
				if ((this._EDI1 != value))
				{
					this._EDI1 = value;
				}
			}
		}
		
		[Column(Storage="_EDI2", DbType="NVarChar(300)", UpdateCheck=UpdateCheck.Never)]
		public string EDI2
		{
			get
			{
				return this._EDI2;
			}
			set
			{
				if ((this._EDI2 != value))
				{
					this._EDI2 = value;
				}
			}
		}
		
		[Column(Storage="_EDI3", DbType="NVarChar(300)", UpdateCheck=UpdateCheck.Never)]
		public string EDI3
		{
			get
			{
				return this._EDI3;
			}
			set
			{
				if ((this._EDI3 != value))
				{
					this._EDI3 = value;
				}
			}
		}
		
		[Column(Storage="_NPRIC", DbType="NVarChar(1000)", UpdateCheck=UpdateCheck.Never)]
		public string NPRIC
		{
			get
			{
				return this._NPRIC;
			}
			set
			{
				if ((this._NPRIC != value))
				{
					this._NPRIC = value;
				}
			}
		}
		
		[Column(Storage="_DPRIC", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string DPRIC
		{
			get
			{
				return this._DPRIC;
			}
			set
			{
				if ((this._DPRIC != value))
				{
					this._DPRIC = value;
				}
			}
		}
		
		[Column(Storage="_DATA", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string DATA
		{
			get
			{
				return this._DATA;
			}
			set
			{
				if ((this._DATA != value))
				{
					this._DATA = value;
				}
			}
		}
		
		[Column(Storage="_DATA1", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string DATA1
		{
			get
			{
				return this._DATA1;
			}
			set
			{
				if ((this._DATA1 != value))
				{
					this._DATA1 = value;
				}
			}
		}
		
		[Column(Storage="_PRIZNAK", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string PRIZNAK
		{
			get
			{
				return this._PRIZNAK;
			}
			set
			{
				if ((this._PRIZNAK != value))
				{
					this._PRIZNAK = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.TNVED6")]
	public partial class TNVED6
	{
		
		private string _GRUPPA;
		
		private string _TOV_POZ;
		
		private string _SUB1;
		
		private string _NAIM;
		
		private string _NPRIC;
		
		private string _DPRIC;
		
		private string _DATA;
		
		private string _DATA1;
		
		public TNVED6()
		{
		}
		
		[Column(Storage="_GRUPPA", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string GRUPPA
		{
			get
			{
				return this._GRUPPA;
			}
			set
			{
				if ((this._GRUPPA != value))
				{
					this._GRUPPA = value;
				}
			}
		}
		
		[Column(Storage="_TOV_POZ", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string TOV_POZ
		{
			get
			{
				return this._TOV_POZ;
			}
			set
			{
				if ((this._TOV_POZ != value))
				{
					this._TOV_POZ = value;
				}
			}
		}
		
		[Column(Storage="_SUB1", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string SUB1
		{
			get
			{
				return this._SUB1;
			}
			set
			{
				if ((this._SUB1 != value))
				{
					this._SUB1 = value;
				}
			}
		}
		
		[Column(Storage="_NAIM", DbType="NVarChar(1000)", UpdateCheck=UpdateCheck.Never)]
		public string NAIM
		{
			get
			{
				return this._NAIM;
			}
			set
			{
				if ((this._NAIM != value))
				{
					this._NAIM = value;
				}
			}
		}
		
		[Column(Storage="_NPRIC", DbType="NVarChar(1000)", UpdateCheck=UpdateCheck.Never)]
		public string NPRIC
		{
			get
			{
				return this._NPRIC;
			}
			set
			{
				if ((this._NPRIC != value))
				{
					this._NPRIC = value;
				}
			}
		}
		
		[Column(Storage="_DPRIC", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string DPRIC
		{
			get
			{
				return this._DPRIC;
			}
			set
			{
				if ((this._DPRIC != value))
				{
					this._DPRIC = value;
				}
			}
		}
		
		[Column(Storage="_DATA", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string DATA
		{
			get
			{
				return this._DATA;
			}
			set
			{
				if ((this._DATA != value))
				{
					this._DATA = value;
				}
			}
		}
		
		[Column(Storage="_DATA1", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string DATA1
		{
			get
			{
				return this._DATA1;
			}
			set
			{
				if ((this._DATA1 != value))
				{
					this._DATA1 = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.TraceLog")]
	public partial class TraceLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TraceLogID;
		
		private System.DateTime _Timestamp;
		
		private string _MachineName;
		
		private int _SubjectID;
		
		private System.Nullable<System.Guid> _OrderDocGUID;
		
		private string _TraceText;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTraceLogIDChanging(int value);
    partial void OnTraceLogIDChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnMachineNameChanging(string value);
    partial void OnMachineNameChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnOrderDocGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrderDocGUIDChanged();
    partial void OnTraceTextChanging(string value);
    partial void OnTraceTextChanged();
    #endregion
		
		public TraceLog()
		{
			OnCreated();
		}
		
		[Column(Storage="_TraceLogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TraceLogID
		{
			get
			{
				return this._TraceLogID;
			}
			set
			{
				if ((this._TraceLogID != value))
				{
					this.OnTraceLogIDChanging(value);
					this.SendPropertyChanging();
					this._TraceLogID = value;
					this.SendPropertyChanged("TraceLogID");
					this.OnTraceLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime2(7) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_MachineName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDocGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> OrderDocGUID
		{
			get
			{
				return this._OrderDocGUID;
			}
			set
			{
				if ((this._OrderDocGUID != value))
				{
					this.OnOrderDocGUIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocGUID = value;
					this.SendPropertyChanged("OrderDocGUID");
					this.OnOrderDocGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_TraceText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TraceText
		{
			get
			{
				return this._TraceText;
			}
			set
			{
				if ((this._TraceText != value))
				{
					this.OnTraceTextChanging(value);
					this.SendPropertyChanging();
					this._TraceText = value;
					this.SendPropertyChanged("TraceText");
					this.OnTraceTextChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Training")]
	public partial class Training : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrainingID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private int _CurriculumID;
		
		private int _SubjectID;
		
		private System.DateTime _TrainingDate;
		
		private int _Score;
		
		private EntityRef<Curriculum> _Curriculum;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<SPM_Subject> _Subject;
		
		private EntitySet<TrainingAnswer> _TrainingAnswer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrainingIDChanging(int value);
    partial void OnTrainingIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnCurriculumIDChanging(int value);
    partial void OnCurriculumIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnTrainingDateChanging(System.DateTime value);
    partial void OnTrainingDateChanged();
    partial void OnScoreChanging(int value);
    partial void OnScoreChanged();
    #endregion
		
		public Training()
		{
			this._Curriculum = default(EntityRef<Curriculum>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Subject = default(EntityRef<SPM_Subject>);
			this._TrainingAnswer = new EntitySet<TrainingAnswer>(new Action<TrainingAnswer>(this.attach_TrainingAnswer), new Action<TrainingAnswer>(this.detach_TrainingAnswer));
			OnCreated();
		}
		
		[Column(Storage="_TrainingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TrainingID
		{
			get
			{
				return this._TrainingID;
			}
			set
			{
				if ((this._TrainingID != value))
				{
					this.OnTrainingIDChanging(value);
					this.SendPropertyChanging();
					this._TrainingID = value;
					this.SendPropertyChanged("TrainingID");
					this.OnTrainingIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_CurriculumID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CurriculumID
		{
			get
			{
				return this._CurriculumID;
			}
			set
			{
				if ((this._CurriculumID != value))
				{
					if (this._Curriculum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurriculumIDChanging(value);
					this.SendPropertyChanging();
					this._CurriculumID = value;
					this.SendPropertyChanged("CurriculumID");
					this.OnCurriculumIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_TrainingDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime TrainingDate
		{
			get
			{
				return this._TrainingDate;
			}
			set
			{
				if ((this._TrainingDate != value))
				{
					this.OnTrainingDateChanging(value);
					this.SendPropertyChanging();
					this._TrainingDate = value;
					this.SendPropertyChanged("TrainingDate");
					this.OnTrainingDateChanged();
				}
			}
		}
		
		[Column(Storage="_Score", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[Association(Name="FK_Training_Curriculum", Storage="_Curriculum", ThisKey="CurriculumID", OtherKey="CurriculumID", IsForeignKey=true)]
		public Curriculum Curriculum
		{
			get
			{
				return this._Curriculum.Entity;
			}
			set
			{
				Curriculum previousValue = this._Curriculum.Entity;
				if (((previousValue != value) 
							|| (this._Curriculum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Curriculum.Entity = null;
						previousValue.Training.Remove(this);
					}
					this._Curriculum.Entity = value;
					if ((value != null))
					{
						value.Training.Add(this);
						this._CurriculumID = value.CurriculumID;
					}
					else
					{
						this._CurriculumID = default(int);
					}
					this.SendPropertyChanged("Curriculum");
				}
			}
		}
		
		[Association(Name="FK_Training_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.Training.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.Training.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_Training_Subject", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Training_Subject.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Training_Subject.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[Association(Name="FK_TrainingAnswer_Training", Storage="_TrainingAnswer", ThisKey="TrainingID", OtherKey="TrainingID", DeleteRule="CASCADE")]
		public EntitySet<TrainingAnswer> TrainingAnswer
		{
			get
			{
				return this._TrainingAnswer;
			}
			set
			{
				this._TrainingAnswer.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrainingAnswer(TrainingAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Training = this;
		}
		
		private void detach_TrainingAnswer(TrainingAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Training = null;
		}
	}
	
	[Table(Name="dbo.TrainingAnswer")]
	public partial class TrainingAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrainingID;
		
		private int _AnswerID;
		
		private EntityRef<CurriculumQuestionAnswer> _Answer;
		
		private EntityRef<Training> _Training;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrainingIDChanging(int value);
    partial void OnTrainingIDChanged();
    partial void OnAnswerIDChanging(int value);
    partial void OnAnswerIDChanged();
    #endregion
		
		public TrainingAnswer()
		{
			this._Answer = default(EntityRef<CurriculumQuestionAnswer>);
			this._Training = default(EntityRef<Training>);
			OnCreated();
		}
		
		[Column(Storage="_TrainingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TrainingID
		{
			get
			{
				return this._TrainingID;
			}
			set
			{
				if ((this._TrainingID != value))
				{
					if (this._Training.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainingIDChanging(value);
					this.SendPropertyChanging();
					this._TrainingID = value;
					this.SendPropertyChanged("TrainingID");
					this.OnTrainingIDChanged();
				}
			}
		}
		
		[Column(Storage="_AnswerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AnswerID
		{
			get
			{
				return this._AnswerID;
			}
			set
			{
				if ((this._AnswerID != value))
				{
					if (this._Answer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._AnswerID = value;
					this.SendPropertyChanged("AnswerID");
					this.OnAnswerIDChanged();
				}
			}
		}
		
		[Association(Name="FK_TrainingAnswer_Answer", Storage="_Answer", ThisKey="AnswerID", OtherKey="CurriculumQuestionAnswerID", IsForeignKey=true, DeleteOnNull=true)]
		public CurriculumQuestionAnswer Answer
		{
			get
			{
				return this._Answer.Entity;
			}
			set
			{
				CurriculumQuestionAnswer previousValue = this._Answer.Entity;
				if (((previousValue != value) 
							|| (this._Answer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Answer.Entity = null;
						previousValue.TrainingAnswer.Remove(this);
					}
					this._Answer.Entity = value;
					if ((value != null))
					{
						value.TrainingAnswer.Add(this);
						this._AnswerID = value.CurriculumQuestionAnswerID;
					}
					else
					{
						this._AnswerID = default(int);
					}
					this.SendPropertyChanged("Answer");
				}
			}
		}
		
		[Association(Name="FK_TrainingAnswer_Training", Storage="_Training", ThisKey="TrainingID", OtherKey="TrainingID", IsForeignKey=true, DeleteOnNull=true)]
		public Training Training
		{
			get
			{
				return this._Training.Entity;
			}
			set
			{
				Training previousValue = this._Training.Entity;
				if (((previousValue != value) 
							|| (this._Training.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Training.Entity = null;
						previousValue.TrainingAnswer.Remove(this);
					}
					this._Training.Entity = value;
					if ((value != null))
					{
						value.TrainingAnswer.Add(this);
						this._TrainingID = value.TrainingID;
					}
					else
					{
						this._TrainingID = default(int);
					}
					this.SendPropertyChanged("Training");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TreasuryPayment")]
	public partial class TreasuryPayment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TreasuryPaymentID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private System.DateTime _CreateDate;
		
		private string _XmlData;
		
		private string _ParsingComment;
		
		private string _PayerIdentifier;
		
		private string _TOFK;
		
		private string _OFKName;
		
		private System.Nullable<System.DateTime> _PaymentDate;
		
		private bool _IsParsed;
		
		private string _Narrative;
		
		private decimal _Amount;
		
		private System.Nullable<System.Guid> _ContractorGUID;
		
		private string _BankName;
		
		private string _BankAccount;
		
		private string _BankBIC;
		
		private string _BankAddress;
		
		private System.Nullable<char> _PaymentPurpose;
		
		private System.Nullable<int> _RepresentationID;
		
		private string _SupplierBillID;
		
		private string _PaymentNumber;
		
		private EntitySet<PaymentOrder> _PaymentOrder;
		
		private EntityRef<Contractor> _Contractor;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<Representation> _Representation;
		
		private EntitySet<TreasuryPaymentLicense> _TreasuryPaymentLicense;
		
		private EntitySet<TreasuryPaymentRequest> _TreasuryPaymentRequest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTreasuryPaymentIDChanging(int value);
    partial void OnTreasuryPaymentIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnXmlDataChanging(string value);
    partial void OnXmlDataChanged();
    partial void OnParsingCommentChanging(string value);
    partial void OnParsingCommentChanged();
    partial void OnPayerIdentifierChanging(string value);
    partial void OnPayerIdentifierChanged();
    partial void OnTOFKChanging(string value);
    partial void OnTOFKChanged();
    partial void OnOFKNameChanging(string value);
    partial void OnOFKNameChanged();
    partial void OnPaymentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaymentDateChanged();
    partial void OnIsParsedChanging(bool value);
    partial void OnIsParsedChanged();
    partial void OnNarrativeChanging(string value);
    partial void OnNarrativeChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnContractorGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnContractorGUIDChanged();
    partial void OnBankNameChanging(string value);
    partial void OnBankNameChanged();
    partial void OnBankAccountChanging(string value);
    partial void OnBankAccountChanged();
    partial void OnBankBICChanging(string value);
    partial void OnBankBICChanged();
    partial void OnBankAddressChanging(string value);
    partial void OnBankAddressChanged();
    partial void OnPaymentPurposeChanging(System.Nullable<char> value);
    partial void OnPaymentPurposeChanged();
    partial void OnRepresentationIDChanging(System.Nullable<int> value);
    partial void OnRepresentationIDChanged();
    partial void OnSupplierBillIDChanging(string value);
    partial void OnSupplierBillIDChanged();
    partial void OnPaymentNumberChanging(string value);
    partial void OnPaymentNumberChanged();
    #endregion
		
		public TreasuryPayment()
		{
			this._PaymentOrder = new EntitySet<PaymentOrder>(new Action<PaymentOrder>(this.attach_PaymentOrder), new Action<PaymentOrder>(this.detach_PaymentOrder));
			this._Contractor = default(EntityRef<Contractor>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Representation = default(EntityRef<Representation>);
			this._TreasuryPaymentLicense = new EntitySet<TreasuryPaymentLicense>(new Action<TreasuryPaymentLicense>(this.attach_TreasuryPaymentLicense), new Action<TreasuryPaymentLicense>(this.detach_TreasuryPaymentLicense));
			this._TreasuryPaymentRequest = new EntitySet<TreasuryPaymentRequest>(new Action<TreasuryPaymentRequest>(this.attach_TreasuryPaymentRequest), new Action<TreasuryPaymentRequest>(this.detach_TreasuryPaymentRequest));
			OnCreated();
		}
		
		[Column(Storage="_TreasuryPaymentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TreasuryPaymentID
		{
			get
			{
				return this._TreasuryPaymentID;
			}
			set
			{
				if ((this._TreasuryPaymentID != value))
				{
					this.OnTreasuryPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._TreasuryPaymentID = value;
					this.SendPropertyChanged("TreasuryPaymentID");
					this.OnTreasuryPaymentIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_XmlData", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string XmlData
		{
			get
			{
				return this._XmlData;
			}
			set
			{
				if ((this._XmlData != value))
				{
					this.OnXmlDataChanging(value);
					this.SendPropertyChanging();
					this._XmlData = value;
					this.SendPropertyChanged("XmlData");
					this.OnXmlDataChanged();
				}
			}
		}
		
		[Column(Storage="_ParsingComment", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ParsingComment
		{
			get
			{
				return this._ParsingComment;
			}
			set
			{
				if ((this._ParsingComment != value))
				{
					this.OnParsingCommentChanging(value);
					this.SendPropertyChanging();
					this._ParsingComment = value;
					this.SendPropertyChanged("ParsingComment");
					this.OnParsingCommentChanged();
				}
			}
		}
		
		[Column(Storage="_PayerIdentifier", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PayerIdentifier
		{
			get
			{
				return this._PayerIdentifier;
			}
			set
			{
				if ((this._PayerIdentifier != value))
				{
					this.OnPayerIdentifierChanging(value);
					this.SendPropertyChanging();
					this._PayerIdentifier = value;
					this.SendPropertyChanged("PayerIdentifier");
					this.OnPayerIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_TOFK", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string TOFK
		{
			get
			{
				return this._TOFK;
			}
			set
			{
				if ((this._TOFK != value))
				{
					this.OnTOFKChanging(value);
					this.SendPropertyChanging();
					this._TOFK = value;
					this.SendPropertyChanged("TOFK");
					this.OnTOFKChanged();
				}
			}
		}
		
		[Column(Storage="_OFKName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string OFKName
		{
			get
			{
				return this._OFKName;
			}
			set
			{
				if ((this._OFKName != value))
				{
					this.OnOFKNameChanging(value);
					this.SendPropertyChanging();
					this._OFKName = value;
					this.SendPropertyChanged("OFKName");
					this.OnOFKNameChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsParsed", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsParsed
		{
			get
			{
				return this._IsParsed;
			}
			set
			{
				if ((this._IsParsed != value))
				{
					this.OnIsParsedChanging(value);
					this.SendPropertyChanging();
					this._IsParsed = value;
					this.SendPropertyChanged("IsParsed");
					this.OnIsParsedChanged();
				}
			}
		}
		
		[Column(Storage="_Narrative", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Narrative
		{
			get
			{
				return this._Narrative;
			}
			set
			{
				if ((this._Narrative != value))
				{
					this.OnNarrativeChanging(value);
					this.SendPropertyChanging();
					this._Narrative = value;
					this.SendPropertyChanged("Narrative");
					this.OnNarrativeChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_ContractorGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorGUID = value;
					this.SendPropertyChanged("ContractorGUID");
					this.OnContractorGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_BankName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BankName
		{
			get
			{
				return this._BankName;
			}
			set
			{
				if ((this._BankName != value))
				{
					this.OnBankNameChanging(value);
					this.SendPropertyChanging();
					this._BankName = value;
					this.SendPropertyChanged("BankName");
					this.OnBankNameChanged();
				}
			}
		}
		
		[Column(Storage="_BankAccount", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BankAccount
		{
			get
			{
				return this._BankAccount;
			}
			set
			{
				if ((this._BankAccount != value))
				{
					this.OnBankAccountChanging(value);
					this.SendPropertyChanging();
					this._BankAccount = value;
					this.SendPropertyChanged("BankAccount");
					this.OnBankAccountChanged();
				}
			}
		}
		
		[Column(Storage="_BankBIC", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BankBIC
		{
			get
			{
				return this._BankBIC;
			}
			set
			{
				if ((this._BankBIC != value))
				{
					this.OnBankBICChanging(value);
					this.SendPropertyChanging();
					this._BankBIC = value;
					this.SendPropertyChanged("BankBIC");
					this.OnBankBICChanged();
				}
			}
		}
		
		[Column(Storage="_BankAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BankAddress
		{
			get
			{
				return this._BankAddress;
			}
			set
			{
				if ((this._BankAddress != value))
				{
					this.OnBankAddressChanging(value);
					this.SendPropertyChanging();
					this._BankAddress = value;
					this.SendPropertyChanged("BankAddress");
					this.OnBankAddressChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentPurpose", DbType="Char(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<char> PaymentPurpose
		{
			get
			{
				return this._PaymentPurpose;
			}
			set
			{
				if ((this._PaymentPurpose != value))
				{
					this.OnPaymentPurposeChanging(value);
					this.SendPropertyChanging();
					this._PaymentPurpose = value;
					this.SendPropertyChanged("PaymentPurpose");
					this.OnPaymentPurposeChanged();
				}
			}
		}
		
		[Column(Storage="_RepresentationID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					if (this._Representation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentationID = value;
					this.SendPropertyChanged("RepresentationID");
					this.OnRepresentationIDChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierBillID", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string SupplierBillID
		{
			get
			{
				return this._SupplierBillID;
			}
			set
			{
				if ((this._SupplierBillID != value))
				{
					this.OnSupplierBillIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierBillID = value;
					this.SendPropertyChanged("SupplierBillID");
					this.OnSupplierBillIDChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentNumber", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string PaymentNumber
		{
			get
			{
				return this._PaymentNumber;
			}
			set
			{
				if ((this._PaymentNumber != value))
				{
					this.OnPaymentNumberChanging(value);
					this.SendPropertyChanging();
					this._PaymentNumber = value;
					this.SendPropertyChanged("PaymentNumber");
					this.OnPaymentNumberChanged();
				}
			}
		}
		
		[Association(Name="FK_PaymentOrder_TreasuryPayment", Storage="_PaymentOrder", ThisKey="TreasuryPaymentID", OtherKey="TreasuryPaymentID", DeleteRule="NO ACTION")]
		public EntitySet<PaymentOrder> PaymentOrder
		{
			get
			{
				return this._PaymentOrder;
			}
			set
			{
				this._PaymentOrder.Assign(value);
			}
		}
		
		[Association(Name="FK_TreasuryPayment_Contractor", Storage="_Contractor", ThisKey="ContractorGUID", OtherKey="ContractorGUID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.TreasuryPayment.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.TreasuryPayment.Add(this);
						this._ContractorGUID = value.ContractorGUID;
					}
					else
					{
						this._ContractorGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		[Association(Name="FK_TreasuryPayment_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.TreasuryPayment.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.TreasuryPayment.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_TreasuryPayment_Representation", Storage="_Representation", ThisKey="RepresentationID", OtherKey="RepresentationID", IsForeignKey=true)]
		public Representation Representation
		{
			get
			{
				return this._Representation.Entity;
			}
			set
			{
				Representation previousValue = this._Representation.Entity;
				if (((previousValue != value) 
							|| (this._Representation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representation.Entity = null;
						previousValue.TreasuryPayment.Remove(this);
					}
					this._Representation.Entity = value;
					if ((value != null))
					{
						value.TreasuryPayment.Add(this);
						this._RepresentationID = value.RepresentationID;
					}
					else
					{
						this._RepresentationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Representation");
				}
			}
		}
		
		[Association(Name="FK_TreasuryPaymentLicense_TreasuryPayment", Storage="_TreasuryPaymentLicense", ThisKey="TreasuryPaymentID", OtherKey="TreasuryPaymentID", DeleteRule="CASCADE")]
		public EntitySet<TreasuryPaymentLicense> TreasuryPaymentLicense
		{
			get
			{
				return this._TreasuryPaymentLicense;
			}
			set
			{
				this._TreasuryPaymentLicense.Assign(value);
			}
		}
		
		[Association(Name="FK_TreasuryPaymentRequest_TreasuryPayment", Storage="_TreasuryPaymentRequest", ThisKey="TreasuryPaymentID", OtherKey="TreasuryPaymentID", DeleteRule="CASCADE")]
		public EntitySet<TreasuryPaymentRequest> TreasuryPaymentRequest
		{
			get
			{
				return this._TreasuryPaymentRequest;
			}
			set
			{
				this._TreasuryPaymentRequest.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PaymentOrder(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.TreasuryPayment = this;
		}
		
		private void detach_PaymentOrder(PaymentOrder entity)
		{
			this.SendPropertyChanging();
			entity.TreasuryPayment = null;
		}
		
		private void attach_TreasuryPaymentLicense(TreasuryPaymentLicense entity)
		{
			this.SendPropertyChanging();
			entity.TreasuryPayment = this;
		}
		
		private void detach_TreasuryPaymentLicense(TreasuryPaymentLicense entity)
		{
			this.SendPropertyChanging();
			entity.TreasuryPayment = null;
		}
		
		private void attach_TreasuryPaymentRequest(TreasuryPaymentRequest entity)
		{
			this.SendPropertyChanging();
			entity.TreasuryPayment = this;
		}
		
		private void detach_TreasuryPaymentRequest(TreasuryPaymentRequest entity)
		{
			this.SendPropertyChanging();
			entity.TreasuryPayment = null;
		}
	}
	
	[Table(Name="dbo.TreasuryPaymentLicense")]
	public partial class TreasuryPaymentLicense : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TreasuryPaymentID;
		
		private System.Guid _LicenseGUID;
		
		private EntityRef<OrderDoc> _License;
		
		private EntityRef<TreasuryPayment> _TreasuryPayment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTreasuryPaymentIDChanging(int value);
    partial void OnTreasuryPaymentIDChanged();
    partial void OnLicenseGUIDChanging(System.Guid value);
    partial void OnLicenseGUIDChanged();
    #endregion
		
		public TreasuryPaymentLicense()
		{
			this._License = default(EntityRef<OrderDoc>);
			this._TreasuryPayment = default(EntityRef<TreasuryPayment>);
			OnCreated();
		}
		
		[Column(Storage="_TreasuryPaymentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TreasuryPaymentID
		{
			get
			{
				return this._TreasuryPaymentID;
			}
			set
			{
				if ((this._TreasuryPaymentID != value))
				{
					if (this._TreasuryPayment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTreasuryPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._TreasuryPaymentID = value;
					this.SendPropertyChanged("TreasuryPaymentID");
					this.OnTreasuryPaymentIDChanged();
				}
			}
		}
		
		[Column(Storage="_LicenseGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LicenseGUID
		{
			get
			{
				return this._LicenseGUID;
			}
			set
			{
				if ((this._LicenseGUID != value))
				{
					if (this._License.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLicenseGUIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseGUID = value;
					this.SendPropertyChanged("LicenseGUID");
					this.OnLicenseGUIDChanged();
				}
			}
		}
		
		[Association(Name="FK_TreasuryPaymentLicense_License", Storage="_License", ThisKey="LicenseGUID", OtherKey="OrderGUID", IsForeignKey=true, DeleteOnNull=true)]
		public OrderDoc License
		{
			get
			{
				return this._License.Entity;
			}
			set
			{
				OrderDoc previousValue = this._License.Entity;
				if (((previousValue != value) 
							|| (this._License.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._License.Entity = null;
						previousValue.TreasuryPaymentLicense.Remove(this);
					}
					this._License.Entity = value;
					if ((value != null))
					{
						value.TreasuryPaymentLicense.Add(this);
						this._LicenseGUID = value.OrderGUID;
					}
					else
					{
						this._LicenseGUID = default(System.Guid);
					}
					this.SendPropertyChanged("License");
				}
			}
		}
		
		[Association(Name="FK_TreasuryPaymentLicense_TreasuryPayment", Storage="_TreasuryPayment", ThisKey="TreasuryPaymentID", OtherKey="TreasuryPaymentID", IsForeignKey=true, DeleteOnNull=true)]
		public TreasuryPayment TreasuryPayment
		{
			get
			{
				return this._TreasuryPayment.Entity;
			}
			set
			{
				TreasuryPayment previousValue = this._TreasuryPayment.Entity;
				if (((previousValue != value) 
							|| (this._TreasuryPayment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TreasuryPayment.Entity = null;
						previousValue.TreasuryPaymentLicense.Remove(this);
					}
					this._TreasuryPayment.Entity = value;
					if ((value != null))
					{
						value.TreasuryPaymentLicense.Add(this);
						this._TreasuryPaymentID = value.TreasuryPaymentID;
					}
					else
					{
						this._TreasuryPaymentID = default(int);
					}
					this.SendPropertyChanged("TreasuryPayment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TreasuryPaymentRequest")]
	public partial class TreasuryPaymentRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TreasuryPaymentID;
		
		private System.Guid _RequestGUID;
		
		private EntityRef<OrderDoc> _Request;
		
		private EntityRef<TreasuryPayment> _TreasuryPayment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTreasuryPaymentIDChanging(int value);
    partial void OnTreasuryPaymentIDChanged();
    partial void OnRequestGUIDChanging(System.Guid value);
    partial void OnRequestGUIDChanged();
    #endregion
		
		public TreasuryPaymentRequest()
		{
			this._Request = default(EntityRef<OrderDoc>);
			this._TreasuryPayment = default(EntityRef<TreasuryPayment>);
			OnCreated();
		}
		
		[Column(Storage="_TreasuryPaymentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TreasuryPaymentID
		{
			get
			{
				return this._TreasuryPaymentID;
			}
			set
			{
				if ((this._TreasuryPaymentID != value))
				{
					if (this._TreasuryPayment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTreasuryPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._TreasuryPaymentID = value;
					this.SendPropertyChanged("TreasuryPaymentID");
					this.OnTreasuryPaymentIDChanged();
				}
			}
		}
		
		[Column(Storage="_RequestGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RequestGUID
		{
			get
			{
				return this._RequestGUID;
			}
			set
			{
				if ((this._RequestGUID != value))
				{
					if (this._Request.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestGUIDChanging(value);
					this.SendPropertyChanging();
					this._RequestGUID = value;
					this.SendPropertyChanged("RequestGUID");
					this.OnRequestGUIDChanged();
				}
			}
		}
		
		[Association(Name="FK_TreasuryPaymentRequest_Request", Storage="_Request", ThisKey="RequestGUID", OtherKey="OrderGUID", IsForeignKey=true, DeleteOnNull=true)]
		public OrderDoc Request
		{
			get
			{
				return this._Request.Entity;
			}
			set
			{
				OrderDoc previousValue = this._Request.Entity;
				if (((previousValue != value) 
							|| (this._Request.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Request.Entity = null;
						previousValue.TreasuryPaymentRequest.Remove(this);
					}
					this._Request.Entity = value;
					if ((value != null))
					{
						value.TreasuryPaymentRequest.Add(this);
						this._RequestGUID = value.OrderGUID;
					}
					else
					{
						this._RequestGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Request");
				}
			}
		}
		
		[Association(Name="FK_TreasuryPaymentRequest_TreasuryPayment", Storage="_TreasuryPayment", ThisKey="TreasuryPaymentID", OtherKey="TreasuryPaymentID", IsForeignKey=true, DeleteOnNull=true)]
		public TreasuryPayment TreasuryPayment
		{
			get
			{
				return this._TreasuryPayment.Entity;
			}
			set
			{
				TreasuryPayment previousValue = this._TreasuryPayment.Entity;
				if (((previousValue != value) 
							|| (this._TreasuryPayment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TreasuryPayment.Entity = null;
						previousValue.TreasuryPaymentRequest.Remove(this);
					}
					this._TreasuryPayment.Entity = value;
					if ((value != null))
					{
						value.TreasuryPaymentRequest.Add(this);
						this._TreasuryPaymentID = value.TreasuryPaymentID;
					}
					else
					{
						this._TreasuryPaymentID = default(int);
					}
					this.SendPropertyChanged("TreasuryPayment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserActivity")]
	public partial class UserActivity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserActivityID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private string _ObjectKey;
		
		private string _ObjectTypeSysName;
		
		private string _Action;
		
		private string _UserTitle;
		
		private string _ObjectTypeTitle;
		
		private string _IP;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserActivityIDChanging(int value);
    partial void OnUserActivityIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnObjectKeyChanging(string value);
    partial void OnObjectKeyChanged();
    partial void OnObjectTypeSysNameChanging(string value);
    partial void OnObjectTypeSysNameChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    partial void OnUserTitleChanging(string value);
    partial void OnUserTitleChanged();
    partial void OnObjectTypeTitleChanging(string value);
    partial void OnObjectTypeTitleChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    #endregion
		
		public UserActivity()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_UserActivityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserActivityID
		{
			get
			{
				return this._UserActivityID;
			}
			set
			{
				if ((this._UserActivityID != value))
				{
					this.OnUserActivityIDChanging(value);
					this.SendPropertyChanging();
					this._UserActivityID = value;
					this.SendPropertyChanged("UserActivityID");
					this.OnUserActivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectKey", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectKey
		{
			get
			{
				return this._ObjectKey;
			}
			set
			{
				if ((this._ObjectKey != value))
				{
					this.OnObjectKeyChanging(value);
					this.SendPropertyChanging();
					this._ObjectKey = value;
					this.SendPropertyChanged("ObjectKey");
					this.OnObjectKeyChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectTypeSysName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ObjectTypeSysName
		{
			get
			{
				return this._ObjectTypeSysName;
			}
			set
			{
				if ((this._ObjectTypeSysName != value))
				{
					this.OnObjectTypeSysNameChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeSysName = value;
					this.SendPropertyChanged("ObjectTypeSysName");
					this.OnObjectTypeSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_Action", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[Column(Storage="_UserTitle", DbType="NVarChar(150) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string UserTitle
		{
			get
			{
				return this._UserTitle;
			}
			set
			{
				if ((this._UserTitle != value))
				{
					this.OnUserTitleChanging(value);
					this.SendPropertyChanging();
					this._UserTitle = value;
					this.SendPropertyChanged("UserTitle");
					this.OnUserTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectTypeTitle", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectTypeTitle
		{
			get
			{
				return this._ObjectTypeTitle;
			}
			set
			{
				if ((this._ObjectTypeTitle != value))
				{
					this.OnObjectTypeTitleChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeTitle = value;
					this.SendPropertyChanged("ObjectTypeTitle");
					this.OnObjectTypeTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IP", DbType="NVarChar(32) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[Association(Name="FK_UserActivity_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.UserActivity.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.UserActivity.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserInfo")]
	public partial class UserInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserInfoID;
		
		private string _Phone;
		
		private string _Post;
		
		private System.Nullable<System.Guid> _ContractorGUID;
		
		private char _Type;
		
		private EntityRef<HST_Contractor> _Contractor;
		
		private EntityRef<SPM_Subject> _SPM_Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserInfoIDChanging(int value);
    partial void OnUserInfoIDChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnPostChanging(string value);
    partial void OnPostChanged();
    partial void OnContractorGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnContractorGUIDChanged();
    partial void OnTypeChanging(char value);
    partial void OnTypeChanged();
    #endregion
		
		public UserInfo()
		{
			this._Contractor = default(EntityRef<HST_Contractor>);
			this._SPM_Subject = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_UserInfoID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserInfoID
		{
			get
			{
				return this._UserInfoID;
			}
			set
			{
				if ((this._UserInfoID != value))
				{
					if (this._SPM_Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserInfoIDChanging(value);
					this.SendPropertyChanging();
					this._UserInfoID = value;
					this.SendPropertyChanged("UserInfoID");
					this.OnUserInfoIDChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Post", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				if ((this._Post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._Post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}
		
		[Column(Storage="_ContractorGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorGUID = value;
					this.SendPropertyChanged("ContractorGUID");
					this.OnContractorGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Association(Name="FK_UserInfo_Contractor", Storage="_Contractor", ThisKey="ContractorGUID", OtherKey="ContractorVersionGUID", IsForeignKey=true)]
		public HST_Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				HST_Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.UserInfo.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.UserInfo.Add(this);
						this._ContractorGUID = value.ContractorVersionGUID;
					}
					else
					{
						this._ContractorGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		[Association(Name="FK_UserInfo_SPM_Subject", Storage="_SPM_Subject", ThisKey="UserInfoID", OtherKey="SubjectID", IsForeignKey=true, DeleteOnNull=true)]
		public SPM_Subject SPM_Subject
		{
			get
			{
				return this._SPM_Subject.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._SPM_Subject.Entity;
				if (((previousValue != value) 
							|| (this._SPM_Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SPM_Subject.Entity = null;
						previousValue.UserInfo = null;
					}
					this._SPM_Subject.Entity = value;
					if ((value != null))
					{
						value.UserInfo = this;
						this._UserInfoID = value.SubjectID;
					}
					else
					{
						this._UserInfoID = default(int);
					}
					this.SendPropertyChanged("SPM_Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.V_AvailableRoleForGrant")]
	public partial class V_AvailableRoleForGrant
	{
		
		private int _RoleID;
		
		private int _RoleForGrantID;
		
		public V_AvailableRoleForGrant()
		{
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
		
		[Column(Storage="_RoleForGrantID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int RoleForGrantID
		{
			get
			{
				return this._RoleForGrantID;
			}
			set
			{
				if ((this._RoleForGrantID != value))
				{
					this._RoleForGrantID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.V_C_Help")]
	public partial class V_C_Help : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _HelpGUID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private System.Nullable<System.Guid> _FormViewGuid;
		
		private bool _IsStaticHelp;
		
		private System.Nullable<System.Guid> _ParentGUID;
		
		private string _SysName;
		
		private int _SeqNo;
		
		private string _LanguageCode;
		
		private string _Text;
		
		private string _Title;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<V_C_Help> _Parent;
		
		private EntityRef<C_Help> _MainObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHelpGUIDChanging(System.Guid value);
    partial void OnHelpGUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnFormViewGuidChanging(System.Nullable<System.Guid> value);
    partial void OnFormViewGuidChanged();
    partial void OnIsStaticHelpChanging(bool value);
    partial void OnIsStaticHelpChanged();
    partial void OnParentGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentGUIDChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public V_C_Help()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Parent = default(EntityRef<V_C_Help>);
			this._MainObject = default(EntityRef<C_Help>);
			OnCreated();
		}
		
		[Column(Storage="_HelpGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid HelpGUID
		{
			get
			{
				return this._HelpGUID;
			}
			set
			{
				if ((this._HelpGUID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHelpGUIDChanging(value);
					this.SendPropertyChanging();
					this._HelpGUID = value;
					this.SendPropertyChanged("HelpGUID");
					this.OnHelpGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_FormViewGuid", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FormViewGuid
		{
			get
			{
				return this._FormViewGuid;
			}
			set
			{
				if ((this._FormViewGuid != value))
				{
					this.OnFormViewGuidChanging(value);
					this.SendPropertyChanging();
					this._FormViewGuid = value;
					this.SendPropertyChanged("FormViewGuid");
					this.OnFormViewGuidChanged();
				}
			}
		}
		
		[Column(Storage="_IsStaticHelp", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsStaticHelp
		{
			get
			{
				return this._IsStaticHelp;
			}
			set
			{
				if ((this._IsStaticHelp != value))
				{
					this.OnIsStaticHelpChanging(value);
					this.SendPropertyChanging();
					this._IsStaticHelp = value;
					this.SendPropertyChanged("IsStaticHelp");
					this.OnIsStaticHelpChanged();
				}
			}
		}
		
		[Column(Storage="_ParentGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ParentGUID
		{
			get
			{
				return this._ParentGUID;
			}
			set
			{
				if ((this._ParentGUID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentGUIDChanging(value);
					this.SendPropertyChanging();
					this._ParentGUID = value;
					this.SendPropertyChanged("ParentGUID");
					this.OnParentGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_V_C_Help_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				if ((this._LastModifiedUser.Entity != value))
				{
					this.SendPropertyChanging();
					this._LastModifiedUser.Entity = value;
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_V_C_Help_Parent", Storage="_Parent", ThisKey="ParentGUID,LanguageCode", OtherKey="HelpGUID,LanguageCode", IsForeignKey=true)]
		public V_C_Help Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				if ((this._Parent.Entity != value))
				{
					this.SendPropertyChanging();
					this._Parent.Entity = value;
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		[Association(Name="FK_V_C_Help_MainObject", Storage="_MainObject", ThisKey="HelpGUID", OtherKey="HelpGUID", IsForeignKey=true)]
		public C_Help MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.V_Calendar")]
	public partial class V_Calendar
	{
		
		private System.Nullable<System.DateTime> _Date;
		
		private int _IsWorking;
		
		public V_Calendar()
		{
		}
		
		[Column(Storage="_Date", DbType="Date", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[Column(Storage="_IsWorking", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int IsWorking
		{
			get
			{
				return this._IsWorking;
			}
			set
			{
				if ((this._IsWorking != value))
				{
					this._IsWorking = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.V_ContractorPayment")]
	public partial class V_ContractorPayment
	{
		
		private System.Guid _ContractorGUID;
		
		private string _INN;
		
		private string _Title;
		
		private System.Nullable<decimal> _Balance;
		
		private System.Nullable<System.DateTime> _LastPaymentDate;
		
		public V_ContractorPayment()
		{
		}
		
		[Column(Storage="_ContractorGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					this._ContractorGUID = value;
				}
			}
		}
		
		[Column(Storage="_INN", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string INN
		{
			get
			{
				return this._INN;
			}
			set
			{
				if ((this._INN != value))
				{
					this._INN = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_Balance", DbType="Decimal(38,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this._Balance = value;
				}
			}
		}
		
		[Column(Storage="_LastPaymentDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastPaymentDate
		{
			get
			{
				return this._LastPaymentDate;
			}
			set
			{
				if ((this._LastPaymentDate != value))
				{
					this._LastPaymentDate = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.V_DbFile")]
	public partial class V_DbFile
	{
		
		private string _Title;
		
		private string _Extension;
		
		private string _LastModifiedUserTitle;
		
		private System.Guid _ID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private long _Size;
		
		private string _Path;
		
		private System.Nullable<System.Guid> _ParentID;
		
		private int _IsValid;
		
		private System.Guid _SPMActionItemGUID;
		
		private string _FullPath;
		
		private string _Tag;
		
		private int _VersionNumber;
		
		private System.Nullable<System.Guid> _MainID;
		
		private System.Nullable<int> _CheckedOutByID;
		
		private string _CheckedOutBy;
		
		private System.Nullable<System.Guid> _FeatureGUID;
		
		private System.Nullable<System.DateTime> _PublishDate;
		
		private int _CreatorID;
		
		private string _Creator;
		
		private System.Data.Linq.Binary _DataHash;
		
		public V_DbFile()
		{
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_Extension", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this._Extension = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserTitle", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LastModifiedUserTitle
		{
			get
			{
				return this._LastModifiedUserTitle;
			}
			set
			{
				if ((this._LastModifiedUserTitle != value))
				{
					this._LastModifiedUserTitle = value;
				}
			}
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this._IsDeleted = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this._LastModifiedDate = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this._LastModifiedUserID = value;
				}
			}
		}
		
		[Column(Storage="_Size", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this._Size = value;
				}
			}
		}
		
		[Column(Storage="_Path", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this._Path = value;
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}
		
		[Column(Storage="_IsValid", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int IsValid
		{
			get
			{
				return this._IsValid;
			}
			set
			{
				if ((this._IsValid != value))
				{
					this._IsValid = value;
				}
			}
		}
		
		[Column(Storage="_SPMActionItemGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid SPMActionItemGUID
		{
			get
			{
				return this._SPMActionItemGUID;
			}
			set
			{
				if ((this._SPMActionItemGUID != value))
				{
					this._SPMActionItemGUID = value;
				}
			}
		}
		
		[Column(Storage="_FullPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FullPath
		{
			get
			{
				return this._FullPath;
			}
			set
			{
				if ((this._FullPath != value))
				{
					this._FullPath = value;
				}
			}
		}
		
		[Column(Storage="_Tag", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this._Tag = value;
				}
			}
		}
		
		[Column(Storage="_VersionNumber", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionNumber
		{
			get
			{
				return this._VersionNumber;
			}
			set
			{
				if ((this._VersionNumber != value))
				{
					this._VersionNumber = value;
				}
			}
		}
		
		[Column(Storage="_MainID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> MainID
		{
			get
			{
				return this._MainID;
			}
			set
			{
				if ((this._MainID != value))
				{
					this._MainID = value;
				}
			}
		}
		
		[Column(Storage="_CheckedOutByID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CheckedOutByID
		{
			get
			{
				return this._CheckedOutByID;
			}
			set
			{
				if ((this._CheckedOutByID != value))
				{
					this._CheckedOutByID = value;
				}
			}
		}
		
		[Column(Storage="_CheckedOutBy", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string CheckedOutBy
		{
			get
			{
				return this._CheckedOutBy;
			}
			set
			{
				if ((this._CheckedOutBy != value))
				{
					this._CheckedOutBy = value;
				}
			}
		}
		
		[Column(Storage="_FeatureGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FeatureGUID
		{
			get
			{
				return this._FeatureGUID;
			}
			set
			{
				if ((this._FeatureGUID != value))
				{
					this._FeatureGUID = value;
				}
			}
		}
		
		[Column(Storage="_PublishDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this._PublishDate = value;
				}
			}
		}
		
		[Column(Storage="_CreatorID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					this._CreatorID = value;
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this._Creator = value;
				}
			}
		}
		
		[Column(Storage="_DataHash", DbType="Binary(16)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary DataHash
		{
			get
			{
				return this._DataHash;
			}
			set
			{
				if ((this._DataHash != value))
				{
					this._DataHash = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.V_DbFolder")]
	public partial class V_DbFolder
	{
		
		private string _Title;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private System.Nullable<long> _Size;
		
		private string _LastModifiedUserTitle;
		
		private System.Guid _ID;
		
		private string _Path;
		
		private System.Nullable<System.Guid> _ParentID;
		
		private string _FullPath;
		
		private int _IsValid;
		
		private char _StorageType;
		
		private string _StorageParameter;
		
		private System.Guid _SPMActionItemGUID;
		
		private bool _EnableVersioning;
		
		private System.Nullable<int> _FileCount;
		
		private string _Tag;
		
		private System.Nullable<System.DateTime> _PublishDate;
		
		private int _CreatorID;
		
		private string _Creator;
		
		public V_DbFolder()
		{
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this._LastModifiedDate = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this._LastModifiedUserID = value;
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this._IsDeleted = value;
				}
			}
		}
		
		[Column(Storage="_Size", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this._Size = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserTitle", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LastModifiedUserTitle
		{
			get
			{
				return this._LastModifiedUserTitle;
			}
			set
			{
				if ((this._LastModifiedUserTitle != value))
				{
					this._LastModifiedUserTitle = value;
				}
			}
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_Path", DbType="NVarChar(4000)", UpdateCheck=UpdateCheck.Never)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this._Path = value;
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}
		
		[Column(Storage="_FullPath", DbType="NVarChar(4000)", UpdateCheck=UpdateCheck.Never)]
		public string FullPath
		{
			get
			{
				return this._FullPath;
			}
			set
			{
				if ((this._FullPath != value))
				{
					this._FullPath = value;
				}
			}
		}
		
		[Column(Storage="_IsValid", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int IsValid
		{
			get
			{
				return this._IsValid;
			}
			set
			{
				if ((this._IsValid != value))
				{
					this._IsValid = value;
				}
			}
		}
		
		[Column(Storage="_StorageType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char StorageType
		{
			get
			{
				return this._StorageType;
			}
			set
			{
				if ((this._StorageType != value))
				{
					this._StorageType = value;
				}
			}
		}
		
		[Column(Storage="_StorageParameter", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string StorageParameter
		{
			get
			{
				return this._StorageParameter;
			}
			set
			{
				if ((this._StorageParameter != value))
				{
					this._StorageParameter = value;
				}
			}
		}
		
		[Column(Storage="_SPMActionItemGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid SPMActionItemGUID
		{
			get
			{
				return this._SPMActionItemGUID;
			}
			set
			{
				if ((this._SPMActionItemGUID != value))
				{
					this._SPMActionItemGUID = value;
				}
			}
		}
		
		[Column(Storage="_EnableVersioning", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool EnableVersioning
		{
			get
			{
				return this._EnableVersioning;
			}
			set
			{
				if ((this._EnableVersioning != value))
				{
					this._EnableVersioning = value;
				}
			}
		}
		
		[Column(Storage="_FileCount", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FileCount
		{
			get
			{
				return this._FileCount;
			}
			set
			{
				if ((this._FileCount != value))
				{
					this._FileCount = value;
				}
			}
		}
		
		[Column(Storage="_Tag", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this._Tag = value;
				}
			}
		}
		
		[Column(Storage="_PublishDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this._PublishDate = value;
				}
			}
		}
		
		[Column(Storage="_CreatorID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					this._CreatorID = value;
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this._Creator = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.V_DbItem")]
	public partial class V_DbItem
	{
		
		private string _Title;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private System.Nullable<long> _Length;
		
		private string _LastModifiedUserTitle;
		
		private int _Type;
		
		private System.Guid _Guid;
		
		private string _Path;
		
		private System.Nullable<System.Guid> _ParentID;
		
		private string _Extension;
		
		private System.Nullable<System.Guid> _SPMActionItemGUID;
		
		private bool _EnableVersioning;
		
		private string _FullPath;
		
		private System.Nullable<int> _CheckedOutByID;
		
		private string _CheckedOutBy;
		
		private string _Tag;
		
		private System.Nullable<System.DateTime> _PublishDate;
		
		private int _CreatorID;
		
		private string _Creator;
		
		private System.Data.Linq.Binary _DataHash;
		
		public V_DbItem()
		{
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this._LastModifiedDate = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this._LastModifiedUserID = value;
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this._IsDeleted = value;
				}
			}
		}
		
		[Column(Storage="_Length", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this._Length = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserTitle", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LastModifiedUserTitle
		{
			get
			{
				return this._LastModifiedUserTitle;
			}
			set
			{
				if ((this._LastModifiedUserTitle != value))
				{
					this._LastModifiedUserTitle = value;
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this._Guid = value;
				}
			}
		}
		
		[Column(Storage="_Path", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this._Path = value;
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}
		
		[Column(Storage="_Extension", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this._Extension = value;
				}
			}
		}
		
		[Column(Storage="_SPMActionItemGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> SPMActionItemGUID
		{
			get
			{
				return this._SPMActionItemGUID;
			}
			set
			{
				if ((this._SPMActionItemGUID != value))
				{
					this._SPMActionItemGUID = value;
				}
			}
		}
		
		[Column(Storage="_EnableVersioning", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool EnableVersioning
		{
			get
			{
				return this._EnableVersioning;
			}
			set
			{
				if ((this._EnableVersioning != value))
				{
					this._EnableVersioning = value;
				}
			}
		}
		
		[Column(Storage="_FullPath", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FullPath
		{
			get
			{
				return this._FullPath;
			}
			set
			{
				if ((this._FullPath != value))
				{
					this._FullPath = value;
				}
			}
		}
		
		[Column(Storage="_CheckedOutByID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CheckedOutByID
		{
			get
			{
				return this._CheckedOutByID;
			}
			set
			{
				if ((this._CheckedOutByID != value))
				{
					this._CheckedOutByID = value;
				}
			}
		}
		
		[Column(Storage="_CheckedOutBy", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string CheckedOutBy
		{
			get
			{
				return this._CheckedOutBy;
			}
			set
			{
				if ((this._CheckedOutBy != value))
				{
					this._CheckedOutBy = value;
				}
			}
		}
		
		[Column(Storage="_Tag", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this._Tag = value;
				}
			}
		}
		
		[Column(Storage="_PublishDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this._PublishDate = value;
				}
			}
		}
		
		[Column(Storage="_CreatorID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					this._CreatorID = value;
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this._Creator = value;
				}
			}
		}
		
		[Column(Storage="_DataHash", DbType="Binary(16)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary DataHash
		{
			get
			{
				return this._DataHash;
			}
			set
			{
				if ((this._DataHash != value))
				{
					this._DataHash = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.V_Documents")]
	public partial class V_Documents
	{
		
		private System.Guid _FileGUID;
		
		private System.Guid _ContractorGUID;
		
		private string _ContractorTitle;
		
		private string _ContractorINN;
		
		private System.Nullable<System.DateTime> _DocDate;
		
		private string _DocNo;
		
		private int _FGADocumentID;
		
		private System.Nullable<int> _FGAID;
		
		private string _FGATitle;
		
		private long _Length;
		
		private string _Extension;
		
		private string _FileTitle;
		
		private string _FGADocumentTitle;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<decimal> _ResolvedQuantity;
		
		private System.DateTime _FileDate;
		
		private int _SourceTypeID;
		
		private System.Nullable<int> _MeasureID;
		
		private System.Nullable<System.Guid> _SignatureGUID;
		
		private System.Nullable<bool> _IsSignatureValid;
		
		private System.Nullable<System.DateTime> _SignDate;
		
		private string _Info;
		
		public V_Documents()
		{
		}
		
		[Column(Storage="_FileGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid FileGUID
		{
			get
			{
				return this._FileGUID;
			}
			set
			{
				if ((this._FileGUID != value))
				{
					this._FileGUID = value;
				}
			}
		}
		
		[Column(Storage="_ContractorGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					this._ContractorGUID = value;
				}
			}
		}
		
		[Column(Storage="_ContractorTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ContractorTitle
		{
			get
			{
				return this._ContractorTitle;
			}
			set
			{
				if ((this._ContractorTitle != value))
				{
					this._ContractorTitle = value;
				}
			}
		}
		
		[Column(Storage="_ContractorINN", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ContractorINN
		{
			get
			{
				return this._ContractorINN;
			}
			set
			{
				if ((this._ContractorINN != value))
				{
					this._ContractorINN = value;
				}
			}
		}
		
		[Column(Storage="_DocDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this._DocDate = value;
				}
			}
		}
		
		[Column(Storage="_DocNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DocNo
		{
			get
			{
				return this._DocNo;
			}
			set
			{
				if ((this._DocNo != value))
				{
					this._DocNo = value;
				}
			}
		}
		
		[Column(Storage="_FGADocumentID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FGADocumentID
		{
			get
			{
				return this._FGADocumentID;
			}
			set
			{
				if ((this._FGADocumentID != value))
				{
					this._FGADocumentID = value;
				}
			}
		}
		
		[Column(Storage="_FGAID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FGAID
		{
			get
			{
				return this._FGAID;
			}
			set
			{
				if ((this._FGAID != value))
				{
					this._FGAID = value;
				}
			}
		}
		
		[Column(Storage="_FGATitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FGATitle
		{
			get
			{
				return this._FGATitle;
			}
			set
			{
				if ((this._FGATitle != value))
				{
					this._FGATitle = value;
				}
			}
		}
		
		[Column(Storage="_Length", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this._Length = value;
				}
			}
		}
		
		[Column(Storage="_Extension", DbType="NVarChar(4000)", UpdateCheck=UpdateCheck.Never)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this._Extension = value;
				}
			}
		}
		
		[Column(Storage="_FileTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FileTitle
		{
			get
			{
				return this._FileTitle;
			}
			set
			{
				if ((this._FileTitle != value))
				{
					this._FileTitle = value;
				}
			}
		}
		
		[Column(Storage="_FGADocumentTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FGADocumentTitle
		{
			get
			{
				return this._FGADocumentTitle;
			}
			set
			{
				if ((this._FGADocumentTitle != value))
				{
					this._FGADocumentTitle = value;
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this._BeginDate = value;
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this._EndDate = value;
				}
			}
		}
		
		[Column(Storage="_ResolvedQuantity", DbType="Decimal(20,7)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ResolvedQuantity
		{
			get
			{
				return this._ResolvedQuantity;
			}
			set
			{
				if ((this._ResolvedQuantity != value))
				{
					this._ResolvedQuantity = value;
				}
			}
		}
		
		[Column(Storage="_FileDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime FileDate
		{
			get
			{
				return this._FileDate;
			}
			set
			{
				if ((this._FileDate != value))
				{
					this._FileDate = value;
				}
			}
		}
		
		[Column(Storage="_SourceTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SourceTypeID
		{
			get
			{
				return this._SourceTypeID;
			}
			set
			{
				if ((this._SourceTypeID != value))
				{
					this._SourceTypeID = value;
				}
			}
		}
		
		[Column(Storage="_MeasureID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					this._MeasureID = value;
				}
			}
		}
		
		[Column(Storage="_SignatureGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> SignatureGUID
		{
			get
			{
				return this._SignatureGUID;
			}
			set
			{
				if ((this._SignatureGUID != value))
				{
					this._SignatureGUID = value;
				}
			}
		}
		
		[Column(Storage="_IsSignatureValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureValid
		{
			get
			{
				return this._IsSignatureValid;
			}
			set
			{
				if ((this._IsSignatureValid != value))
				{
					this._IsSignatureValid = value;
				}
			}
		}
		
		[Column(Storage="_SignDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this._SignDate = value;
				}
			}
		}
		
		[Column(Storage="_Info", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this._Info = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.V_ElectronicJournal")]
	public partial class V_ElectronicJournal
	{
		
		private string _TypeTitle;
		
		private int _DocType;
		
		private int _FactID;
		
		private System.Guid _OrderGUID;
		
		private string _Title;
		
		private System.Nullable<int> _SiteNumber;
		
		private string _INN;
		
		private string _Applicant;
		
		private bool _IsSigned;
		
		private System.Nullable<System.DateTime> _SignDate;
		
		private System.Nullable<System.DateTime> _RegDate;
		
		private string _RegNo;
		
		private char _OrderType;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private string _Comment;
		
		private System.Nullable<System.Guid> _FileGUID;
		
		private System.Guid _ApplicantGUID;
		
		private string _CurState;
		
		private string _CurStateSite;
		
		private bool _IsAutoRegistered;
		
		public V_ElectronicJournal()
		{
		}
		
		[Column(Storage="_TypeTitle", DbType="VarChar(29) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TypeTitle
		{
			get
			{
				return this._TypeTitle;
			}
			set
			{
				if ((this._TypeTitle != value))
				{
					this._TypeTitle = value;
				}
			}
		}
		
		[Column(Storage="_DocType", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int DocType
		{
			get
			{
				return this._DocType;
			}
			set
			{
				if ((this._DocType != value))
				{
					this._DocType = value;
				}
			}
		}
		
		[Column(Storage="_FactID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					this._FactID = value;
				}
			}
		}
		
		[Column(Storage="_OrderGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderGUID
		{
			get
			{
				return this._OrderGUID;
			}
			set
			{
				if ((this._OrderGUID != value))
				{
					this._OrderGUID = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_SiteNumber", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SiteNumber
		{
			get
			{
				return this._SiteNumber;
			}
			set
			{
				if ((this._SiteNumber != value))
				{
					this._SiteNumber = value;
				}
			}
		}
		
		[Column(Storage="_INN", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string INN
		{
			get
			{
				return this._INN;
			}
			set
			{
				if ((this._INN != value))
				{
					this._INN = value;
				}
			}
		}
		
		[Column(Storage="_Applicant", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Applicant
		{
			get
			{
				return this._Applicant;
			}
			set
			{
				if ((this._Applicant != value))
				{
					this._Applicant = value;
				}
			}
		}
		
		[Column(Storage="_IsSigned", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSigned
		{
			get
			{
				return this._IsSigned;
			}
			set
			{
				if ((this._IsSigned != value))
				{
					this._IsSigned = value;
				}
			}
		}
		
		[Column(Storage="_SignDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this._SignDate = value;
				}
			}
		}
		
		[Column(Storage="_RegDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this._RegDate = value;
				}
			}
		}
		
		[Column(Storage="_RegNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string RegNo
		{
			get
			{
				return this._RegNo;
			}
			set
			{
				if ((this._RegNo != value))
				{
					this._RegNo = value;
				}
			}
		}
		
		[Column(Storage="_OrderType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char OrderType
		{
			get
			{
				return this._OrderType;
			}
			set
			{
				if ((this._OrderType != value))
				{
					this._OrderType = value;
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this._CreateDate = value;
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
		
		[Column(Storage="_FileGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileGUID
		{
			get
			{
				return this._FileGUID;
			}
			set
			{
				if ((this._FileGUID != value))
				{
					this._FileGUID = value;
				}
			}
		}
		
		[Column(Storage="_ApplicantGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ApplicantGUID
		{
			get
			{
				return this._ApplicantGUID;
			}
			set
			{
				if ((this._ApplicantGUID != value))
				{
					this._ApplicantGUID = value;
				}
			}
		}
		
		[Column(Storage="_CurState", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CurState
		{
			get
			{
				return this._CurState;
			}
			set
			{
				if ((this._CurState != value))
				{
					this._CurState = value;
				}
			}
		}
		
		[Column(Storage="_CurStateSite", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CurStateSite
		{
			get
			{
				return this._CurStateSite;
			}
			set
			{
				if ((this._CurStateSite != value))
				{
					this._CurStateSite = value;
				}
			}
		}
		
		[Column(Storage="_IsAutoRegistered", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsAutoRegistered
		{
			get
			{
				return this._IsAutoRegistered;
			}
			set
			{
				if ((this._IsAutoRegistered != value))
				{
					this._IsAutoRegistered = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.V_FactAnnulment")]
	public partial class V_FactAnnulment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FactID;
		
		private System.Nullable<System.DateTime> _AnnulmentDate;
		
		private int _AnnulmentReasonID;
		
		private string _BasisType;
		
		private string _BasisTitle;
		
		private string _BasisNo;
		
		private System.Nullable<System.DateTime> _BasisDate;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<System.DateTime> _SignDate;
		
		private System.Nullable<decimal> _FactShippedQuantity;
		
		private System.Nullable<System.DateTime> _FactShippedDate;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private System.Nullable<int> _FactShippedMeasureID;
		
		private System.Nullable<System.Guid> _FileGUID;
		
		private string _LetterNo;
		
		private System.Nullable<System.DateTime> _LetterDate;
		
		private System.Nullable<int> _FactEmployeeID;
		
		private bool _IsSigned;
		
		private System.Nullable<System.DateTime> _SignDateByEmployee;
		
		private System.Nullable<bool> _IsSignatureByEmployeeValid;
		
		private System.Nullable<System.Guid> _FileForEmployeeGUID;
		
		private System.Nullable<bool> _IsSignatureValid;
		
		private bool _IsFileUpload;
		
		private System.Nullable<System.DateTime> _UploadDate;
		
		private string _LanguageCode;
		
		private EntityRef<C_AnnulmentReason> _AnnulmentReason;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _FactEmployee;
		
		private EntityRef<C_Measure> _FactShippedMeasure;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<FactAnnulment> _MainObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactIDChanging(int value);
    partial void OnFactIDChanged();
    partial void OnAnnulmentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAnnulmentDateChanged();
    partial void OnAnnulmentReasonIDChanging(int value);
    partial void OnAnnulmentReasonIDChanged();
    partial void OnBasisTypeChanging(string value);
    partial void OnBasisTypeChanged();
    partial void OnBasisTitleChanging(string value);
    partial void OnBasisTitleChanged();
    partial void OnBasisNoChanging(string value);
    partial void OnBasisNoChanged();
    partial void OnBasisDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBasisDateChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateChanged();
    partial void OnFactShippedQuantityChanging(System.Nullable<decimal> value);
    partial void OnFactShippedQuantityChanged();
    partial void OnFactShippedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFactShippedDateChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnFactShippedMeasureIDChanging(System.Nullable<int> value);
    partial void OnFactShippedMeasureIDChanged();
    partial void OnFileGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFileGUIDChanged();
    partial void OnLetterNoChanging(string value);
    partial void OnLetterNoChanged();
    partial void OnLetterDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLetterDateChanged();
    partial void OnFactEmployeeIDChanging(System.Nullable<int> value);
    partial void OnFactEmployeeIDChanged();
    partial void OnIsSignedChanging(bool value);
    partial void OnIsSignedChanged();
    partial void OnSignDateByEmployeeChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateByEmployeeChanged();
    partial void OnIsSignatureByEmployeeValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureByEmployeeValidChanged();
    partial void OnFileForEmployeeGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFileForEmployeeGUIDChanged();
    partial void OnIsSignatureValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureValidChanged();
    partial void OnIsFileUploadChanging(bool value);
    partial void OnIsFileUploadChanged();
    partial void OnUploadDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUploadDateChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    #endregion
		
		public V_FactAnnulment()
		{
			this._AnnulmentReason = default(EntityRef<C_AnnulmentReason>);
			this._Employee = default(EntityRef<Employee>);
			this._FactEmployee = default(EntityRef<Employee>);
			this._FactShippedMeasure = default(EntityRef<C_Measure>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MainObject = default(EntityRef<FactAnnulment>);
			OnCreated();
		}
		
		[Column(Storage="_FactID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}
		
		[Column(Storage="_AnnulmentDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> AnnulmentDate
		{
			get
			{
				return this._AnnulmentDate;
			}
			set
			{
				if ((this._AnnulmentDate != value))
				{
					this.OnAnnulmentDateChanging(value);
					this.SendPropertyChanging();
					this._AnnulmentDate = value;
					this.SendPropertyChanged("AnnulmentDate");
					this.OnAnnulmentDateChanged();
				}
			}
		}
		
		[Column(Storage="_AnnulmentReasonID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AnnulmentReasonID
		{
			get
			{
				return this._AnnulmentReasonID;
			}
			set
			{
				if ((this._AnnulmentReasonID != value))
				{
					if (this._AnnulmentReason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnnulmentReasonIDChanging(value);
					this.SendPropertyChanging();
					this._AnnulmentReasonID = value;
					this.SendPropertyChanged("AnnulmentReasonID");
					this.OnAnnulmentReasonIDChanged();
				}
			}
		}
		
		[Column(Storage="_BasisType", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BasisType
		{
			get
			{
				return this._BasisType;
			}
			set
			{
				if ((this._BasisType != value))
				{
					this.OnBasisTypeChanging(value);
					this.SendPropertyChanging();
					this._BasisType = value;
					this.SendPropertyChanged("BasisType");
					this.OnBasisTypeChanged();
				}
			}
		}
		
		[Column(Storage="_BasisTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BasisTitle
		{
			get
			{
				return this._BasisTitle;
			}
			set
			{
				if ((this._BasisTitle != value))
				{
					this.OnBasisTitleChanging(value);
					this.SendPropertyChanging();
					this._BasisTitle = value;
					this.SendPropertyChanged("BasisTitle");
					this.OnBasisTitleChanged();
				}
			}
		}
		
		[Column(Storage="_BasisNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BasisNo
		{
			get
			{
				return this._BasisNo;
			}
			set
			{
				if ((this._BasisNo != value))
				{
					this.OnBasisNoChanging(value);
					this.SendPropertyChanging();
					this._BasisNo = value;
					this.SendPropertyChanged("BasisNo");
					this.OnBasisNoChanged();
				}
			}
		}
		
		[Column(Storage="_BasisDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BasisDate
		{
			get
			{
				return this._BasisDate;
			}
			set
			{
				if ((this._BasisDate != value))
				{
					this.OnBasisDateChanging(value);
					this.SendPropertyChanging();
					this._BasisDate = value;
					this.SendPropertyChanged("BasisDate");
					this.OnBasisDateChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_SignDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}
		
		[Column(Storage="_FactShippedQuantity", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> FactShippedQuantity
		{
			get
			{
				return this._FactShippedQuantity;
			}
			set
			{
				if ((this._FactShippedQuantity != value))
				{
					this.OnFactShippedQuantityChanging(value);
					this.SendPropertyChanging();
					this._FactShippedQuantity = value;
					this.SendPropertyChanged("FactShippedQuantity");
					this.OnFactShippedQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_FactShippedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FactShippedDate
		{
			get
			{
				return this._FactShippedDate;
			}
			set
			{
				if ((this._FactShippedDate != value))
				{
					this.OnFactShippedDateChanging(value);
					this.SendPropertyChanging();
					this._FactShippedDate = value;
					this.SendPropertyChanged("FactShippedDate");
					this.OnFactShippedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_FactShippedMeasureID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FactShippedMeasureID
		{
			get
			{
				return this._FactShippedMeasureID;
			}
			set
			{
				if ((this._FactShippedMeasureID != value))
				{
					if (this._FactShippedMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactShippedMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._FactShippedMeasureID = value;
					this.SendPropertyChanged("FactShippedMeasureID");
					this.OnFactShippedMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileGUID
		{
			get
			{
				return this._FileGUID;
			}
			set
			{
				if ((this._FileGUID != value))
				{
					this.OnFileGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileGUID = value;
					this.SendPropertyChanged("FileGUID");
					this.OnFileGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_LetterNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string LetterNo
		{
			get
			{
				return this._LetterNo;
			}
			set
			{
				if ((this._LetterNo != value))
				{
					this.OnLetterNoChanging(value);
					this.SendPropertyChanging();
					this._LetterNo = value;
					this.SendPropertyChanged("LetterNo");
					this.OnLetterNoChanged();
				}
			}
		}
		
		[Column(Storage="_LetterDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LetterDate
		{
			get
			{
				return this._LetterDate;
			}
			set
			{
				if ((this._LetterDate != value))
				{
					this.OnLetterDateChanging(value);
					this.SendPropertyChanging();
					this._LetterDate = value;
					this.SendPropertyChanged("LetterDate");
					this.OnLetterDateChanged();
				}
			}
		}
		
		[Column(Storage="_FactEmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FactEmployeeID
		{
			get
			{
				return this._FactEmployeeID;
			}
			set
			{
				if ((this._FactEmployeeID != value))
				{
					if (this._FactEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._FactEmployeeID = value;
					this.SendPropertyChanged("FactEmployeeID");
					this.OnFactEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsSigned", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSigned
		{
			get
			{
				return this._IsSigned;
			}
			set
			{
				if ((this._IsSigned != value))
				{
					this.OnIsSignedChanging(value);
					this.SendPropertyChanging();
					this._IsSigned = value;
					this.SendPropertyChanged("IsSigned");
					this.OnIsSignedChanged();
				}
			}
		}
		
		[Column(Storage="_SignDateByEmployee", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDateByEmployee
		{
			get
			{
				return this._SignDateByEmployee;
			}
			set
			{
				if ((this._SignDateByEmployee != value))
				{
					this.OnSignDateByEmployeeChanging(value);
					this.SendPropertyChanging();
					this._SignDateByEmployee = value;
					this.SendPropertyChanged("SignDateByEmployee");
					this.OnSignDateByEmployeeChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureByEmployeeValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureByEmployeeValid
		{
			get
			{
				return this._IsSignatureByEmployeeValid;
			}
			set
			{
				if ((this._IsSignatureByEmployeeValid != value))
				{
					this.OnIsSignatureByEmployeeValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureByEmployeeValid = value;
					this.SendPropertyChanged("IsSignatureByEmployeeValid");
					this.OnIsSignatureByEmployeeValidChanged();
				}
			}
		}
		
		[Column(Storage="_FileForEmployeeGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileForEmployeeGUID
		{
			get
			{
				return this._FileForEmployeeGUID;
			}
			set
			{
				if ((this._FileForEmployeeGUID != value))
				{
					this.OnFileForEmployeeGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileForEmployeeGUID = value;
					this.SendPropertyChanged("FileForEmployeeGUID");
					this.OnFileForEmployeeGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureValid
		{
			get
			{
				return this._IsSignatureValid;
			}
			set
			{
				if ((this._IsSignatureValid != value))
				{
					this.OnIsSignatureValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureValid = value;
					this.SendPropertyChanged("IsSignatureValid");
					this.OnIsSignatureValidChanged();
				}
			}
		}
		
		[Column(Storage="_IsFileUpload", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsFileUpload
		{
			get
			{
				return this._IsFileUpload;
			}
			set
			{
				if ((this._IsFileUpload != value))
				{
					this.OnIsFileUploadChanging(value);
					this.SendPropertyChanging();
					this._IsFileUpload = value;
					this.SendPropertyChanged("IsFileUpload");
					this.OnIsFileUploadChanged();
				}
			}
		}
		
		[Column(Storage="_UploadDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> UploadDate
		{
			get
			{
				return this._UploadDate;
			}
			set
			{
				if ((this._UploadDate != value))
				{
					this.OnUploadDateChanging(value);
					this.SendPropertyChanging();
					this._UploadDate = value;
					this.SendPropertyChanged("UploadDate");
					this.OnUploadDateChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Association(Name="FK_V_FactAnnulment_AnnulmentReason", Storage="_AnnulmentReason", ThisKey="AnnulmentReasonID", OtherKey="AnnulmentReasonID", IsForeignKey=true)]
		public C_AnnulmentReason AnnulmentReason
		{
			get
			{
				return this._AnnulmentReason.Entity;
			}
			set
			{
				if ((this._AnnulmentReason.Entity != value))
				{
					this.SendPropertyChanging();
					this._AnnulmentReason.Entity = value;
					this.SendPropertyChanged("AnnulmentReason");
				}
			}
		}
		
		[Association(Name="FK_V_FactAnnulment_Employee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				if ((this._Employee.Entity != value))
				{
					this.SendPropertyChanging();
					this._Employee.Entity = value;
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_V_FactAnnulment_FactEmployee", Storage="_FactEmployee", ThisKey="FactEmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee FactEmployee
		{
			get
			{
				return this._FactEmployee.Entity;
			}
			set
			{
				if ((this._FactEmployee.Entity != value))
				{
					this.SendPropertyChanging();
					this._FactEmployee.Entity = value;
					this.SendPropertyChanged("FactEmployee");
				}
			}
		}
		
		[Association(Name="FK_V_FactAnnulment_FactShippedMeasure", Storage="_FactShippedMeasure", ThisKey="FactShippedMeasureID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure FactShippedMeasure
		{
			get
			{
				return this._FactShippedMeasure.Entity;
			}
			set
			{
				if ((this._FactShippedMeasure.Entity != value))
				{
					this.SendPropertyChanging();
					this._FactShippedMeasure.Entity = value;
					this.SendPropertyChanged("FactShippedMeasure");
				}
			}
		}
		
		[Association(Name="FK_V_FactAnnulment_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				if ((this._LastModifiedUser.Entity != value))
				{
					this.SendPropertyChanging();
					this._LastModifiedUser.Entity = value;
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_V_FactAnnulment_MainObject", Storage="_MainObject", ThisKey="FactID", OtherKey="FactID", IsForeignKey=true)]
		public FactAnnulment MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.V_FactClose")]
	public partial class V_FactClose : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FactID;
		
		private System.Nullable<decimal> _FactShippedQuantity;
		
		private System.Nullable<System.DateTime> _FactShippedDate;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private System.Nullable<int> _FactShippedMeasureID;
		
		private string _LanguageCode;
		
		private EntityRef<C_Measure> _FactShippedMeasure;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<FactClose> _MainObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactIDChanging(int value);
    partial void OnFactIDChanged();
    partial void OnFactShippedQuantityChanging(System.Nullable<decimal> value);
    partial void OnFactShippedQuantityChanged();
    partial void OnFactShippedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFactShippedDateChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnFactShippedMeasureIDChanging(System.Nullable<int> value);
    partial void OnFactShippedMeasureIDChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    #endregion
		
		public V_FactClose()
		{
			this._FactShippedMeasure = default(EntityRef<C_Measure>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MainObject = default(EntityRef<FactClose>);
			OnCreated();
		}
		
		[Column(Storage="_FactID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}
		
		[Column(Storage="_FactShippedQuantity", DbType="Decimal(18,5)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> FactShippedQuantity
		{
			get
			{
				return this._FactShippedQuantity;
			}
			set
			{
				if ((this._FactShippedQuantity != value))
				{
					this.OnFactShippedQuantityChanging(value);
					this.SendPropertyChanging();
					this._FactShippedQuantity = value;
					this.SendPropertyChanged("FactShippedQuantity");
					this.OnFactShippedQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_FactShippedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FactShippedDate
		{
			get
			{
				return this._FactShippedDate;
			}
			set
			{
				if ((this._FactShippedDate != value))
				{
					this.OnFactShippedDateChanging(value);
					this.SendPropertyChanging();
					this._FactShippedDate = value;
					this.SendPropertyChanged("FactShippedDate");
					this.OnFactShippedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_FactShippedMeasureID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FactShippedMeasureID
		{
			get
			{
				return this._FactShippedMeasureID;
			}
			set
			{
				if ((this._FactShippedMeasureID != value))
				{
					if (this._FactShippedMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactShippedMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._FactShippedMeasureID = value;
					this.SendPropertyChanged("FactShippedMeasureID");
					this.OnFactShippedMeasureIDChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Association(Name="FK_V_FactClose_FactShippedMeasure", Storage="_FactShippedMeasure", ThisKey="FactShippedMeasureID", OtherKey="MeasureID", IsForeignKey=true)]
		public C_Measure FactShippedMeasure
		{
			get
			{
				return this._FactShippedMeasure.Entity;
			}
			set
			{
				if ((this._FactShippedMeasure.Entity != value))
				{
					this.SendPropertyChanging();
					this._FactShippedMeasure.Entity = value;
					this.SendPropertyChanged("FactShippedMeasure");
				}
			}
		}
		
		[Association(Name="FK_V_FactClose_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				if ((this._LastModifiedUser.Entity != value))
				{
					this.SendPropertyChanging();
					this._LastModifiedUser.Entity = value;
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_V_FactClose_MainObject", Storage="_MainObject", ThisKey="FactID", OtherKey="FactID", IsForeignKey=true)]
		public FactClose MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.V_FactForm")]
	public partial class V_FactForm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FactID;
		
		private System.Nullable<System.DateTime> _SignDate;
		
		private System.DateTime _LastModifiedDate;
		
		private bool _IsDeleted;
		
		private int _LastModifiedUserID;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<System.Guid> _BlankGUID;
		
		private System.Nullable<System.DateTime> _FormDate;
		
		private string _EmployeePost;
		
		private string _EmployeeTitle;
		
		private string _LanguageCode;
		
		private EntityRef<Blank> _Blank;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<FactForm> _MainObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactIDChanging(int value);
    partial void OnFactIDChanged();
    partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnBlankGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnBlankGUIDChanged();
    partial void OnFormDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFormDateChanged();
    partial void OnEmployeePostChanging(string value);
    partial void OnEmployeePostChanged();
    partial void OnEmployeeTitleChanging(string value);
    partial void OnEmployeeTitleChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    #endregion
		
		public V_FactForm()
		{
			this._Blank = default(EntityRef<Blank>);
			this._Employee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MainObject = default(EntityRef<FactForm>);
			OnCreated();
		}
		
		[Column(Storage="_FactID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}
		
		[Column(Storage="_SignDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_BlankGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> BlankGUID
		{
			get
			{
				return this._BlankGUID;
			}
			set
			{
				if ((this._BlankGUID != value))
				{
					if (this._Blank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlankGUIDChanging(value);
					this.SendPropertyChanging();
					this._BlankGUID = value;
					this.SendPropertyChanged("BlankGUID");
					this.OnBlankGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_FormDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FormDate
		{
			get
			{
				return this._FormDate;
			}
			set
			{
				if ((this._FormDate != value))
				{
					this.OnFormDateChanging(value);
					this.SendPropertyChanging();
					this._FormDate = value;
					this.SendPropertyChanged("FormDate");
					this.OnFormDateChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeePost", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string EmployeePost
		{
			get
			{
				return this._EmployeePost;
			}
			set
			{
				if ((this._EmployeePost != value))
				{
					this.OnEmployeePostChanging(value);
					this.SendPropertyChanging();
					this._EmployeePost = value;
					this.SendPropertyChanged("EmployeePost");
					this.OnEmployeePostChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string EmployeeTitle
		{
			get
			{
				return this._EmployeeTitle;
			}
			set
			{
				if ((this._EmployeeTitle != value))
				{
					this.OnEmployeeTitleChanging(value);
					this.SendPropertyChanging();
					this._EmployeeTitle = value;
					this.SendPropertyChanged("EmployeeTitle");
					this.OnEmployeeTitleChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Association(Name="FK_V_FactForm_Blank", Storage="_Blank", ThisKey="BlankGUID", OtherKey="BlankGUID", IsForeignKey=true)]
		public Blank Blank
		{
			get
			{
				return this._Blank.Entity;
			}
			set
			{
				if ((this._Blank.Entity != value))
				{
					this.SendPropertyChanging();
					this._Blank.Entity = value;
					this.SendPropertyChanged("Blank");
				}
			}
		}
		
		[Association(Name="FK_V_FactForm_Employee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				if ((this._Employee.Entity != value))
				{
					this.SendPropertyChanging();
					this._Employee.Entity = value;
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_V_FactForm_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				if ((this._LastModifiedUser.Entity != value))
				{
					this.SendPropertyChanging();
					this._LastModifiedUser.Entity = value;
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_V_FactForm_MainObject", Storage="_MainObject", ThisKey="FactID", OtherKey="FactID", IsForeignKey=true)]
		public FactForm MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.V_FactRegister")]
	public partial class V_FactRegister : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FactID;
		
		private System.DateTime _LastModifiedDate;
		
		private bool _IsDeleted;
		
		private int _LastModifiedUserID;
		
		private string _LanguageCode;
		
		private int _OrderDocTransitionID;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<FactRegister> _MainObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactIDChanging(int value);
    partial void OnFactIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    partial void OnOrderDocTransitionIDChanging(int value);
    partial void OnOrderDocTransitionIDChanged();
    #endregion
		
		public V_FactRegister()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MainObject = default(EntityRef<FactRegister>);
			OnCreated();
		}
		
		[Column(Storage="_FactID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDocTransitionID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OrderDocTransitionID
		{
			get
			{
				return this._OrderDocTransitionID;
			}
			set
			{
				if ((this._OrderDocTransitionID != value))
				{
					this.OnOrderDocTransitionIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDocTransitionID = value;
					this.SendPropertyChanged("OrderDocTransitionID");
					this.OnOrderDocTransitionIDChanged();
				}
			}
		}
		
		[Association(Name="FK_V_FactRegister_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				if ((this._LastModifiedUser.Entity != value))
				{
					this.SendPropertyChanging();
					this._LastModifiedUser.Entity = value;
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_V_FactRegister_MainObject", Storage="_MainObject", ThisKey="FactID", OtherKey="FactID", IsForeignKey=true)]
		public FactRegister MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.V_FactReject")]
	public partial class V_FactReject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FactID;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<System.DateTime> _SignDate;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private System.Nullable<System.Guid> _FileGUID;
		
		private string _LetterNo;
		
		private System.Nullable<System.DateTime> _LetterDate;
		
		private System.Nullable<int> _FactEmployeeID;
		
		private bool _IsSigned;
		
		private System.Nullable<System.DateTime> _SignDateByEmployee;
		
		private System.Nullable<bool> _IsSignatureByEmployeeValid;
		
		private System.Nullable<System.Guid> _FileForEmployeeGUID;
		
		private System.Nullable<bool> _IsSignatureValid;
		
		private bool _IsFileUpload;
		
		private System.Nullable<System.DateTime> _UploadDate;
		
		private string _LanguageCode;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _FactEmployee;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<FactReject> _MainObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactIDChanging(int value);
    partial void OnFactIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnFileGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFileGUIDChanged();
    partial void OnLetterNoChanging(string value);
    partial void OnLetterNoChanged();
    partial void OnLetterDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLetterDateChanged();
    partial void OnFactEmployeeIDChanging(System.Nullable<int> value);
    partial void OnFactEmployeeIDChanged();
    partial void OnIsSignedChanging(bool value);
    partial void OnIsSignedChanged();
    partial void OnSignDateByEmployeeChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateByEmployeeChanged();
    partial void OnIsSignatureByEmployeeValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureByEmployeeValidChanged();
    partial void OnFileForEmployeeGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFileForEmployeeGUIDChanged();
    partial void OnIsSignatureValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureValidChanged();
    partial void OnIsFileUploadChanging(bool value);
    partial void OnIsFileUploadChanged();
    partial void OnUploadDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUploadDateChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    #endregion
		
		public V_FactReject()
		{
			this._Employee = default(EntityRef<Employee>);
			this._FactEmployee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MainObject = default(EntityRef<FactReject>);
			OnCreated();
		}
		
		[Column(Storage="_FactID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_SignDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_FileGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileGUID
		{
			get
			{
				return this._FileGUID;
			}
			set
			{
				if ((this._FileGUID != value))
				{
					this.OnFileGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileGUID = value;
					this.SendPropertyChanged("FileGUID");
					this.OnFileGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_LetterNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string LetterNo
		{
			get
			{
				return this._LetterNo;
			}
			set
			{
				if ((this._LetterNo != value))
				{
					this.OnLetterNoChanging(value);
					this.SendPropertyChanging();
					this._LetterNo = value;
					this.SendPropertyChanged("LetterNo");
					this.OnLetterNoChanged();
				}
			}
		}
		
		[Column(Storage="_LetterDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LetterDate
		{
			get
			{
				return this._LetterDate;
			}
			set
			{
				if ((this._LetterDate != value))
				{
					this.OnLetterDateChanging(value);
					this.SendPropertyChanging();
					this._LetterDate = value;
					this.SendPropertyChanged("LetterDate");
					this.OnLetterDateChanged();
				}
			}
		}
		
		[Column(Storage="_FactEmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FactEmployeeID
		{
			get
			{
				return this._FactEmployeeID;
			}
			set
			{
				if ((this._FactEmployeeID != value))
				{
					if (this._FactEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._FactEmployeeID = value;
					this.SendPropertyChanged("FactEmployeeID");
					this.OnFactEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsSigned", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSigned
		{
			get
			{
				return this._IsSigned;
			}
			set
			{
				if ((this._IsSigned != value))
				{
					this.OnIsSignedChanging(value);
					this.SendPropertyChanging();
					this._IsSigned = value;
					this.SendPropertyChanged("IsSigned");
					this.OnIsSignedChanged();
				}
			}
		}
		
		[Column(Storage="_SignDateByEmployee", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDateByEmployee
		{
			get
			{
				return this._SignDateByEmployee;
			}
			set
			{
				if ((this._SignDateByEmployee != value))
				{
					this.OnSignDateByEmployeeChanging(value);
					this.SendPropertyChanging();
					this._SignDateByEmployee = value;
					this.SendPropertyChanged("SignDateByEmployee");
					this.OnSignDateByEmployeeChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureByEmployeeValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureByEmployeeValid
		{
			get
			{
				return this._IsSignatureByEmployeeValid;
			}
			set
			{
				if ((this._IsSignatureByEmployeeValid != value))
				{
					this.OnIsSignatureByEmployeeValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureByEmployeeValid = value;
					this.SendPropertyChanged("IsSignatureByEmployeeValid");
					this.OnIsSignatureByEmployeeValidChanged();
				}
			}
		}
		
		[Column(Storage="_FileForEmployeeGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileForEmployeeGUID
		{
			get
			{
				return this._FileForEmployeeGUID;
			}
			set
			{
				if ((this._FileForEmployeeGUID != value))
				{
					this.OnFileForEmployeeGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileForEmployeeGUID = value;
					this.SendPropertyChanged("FileForEmployeeGUID");
					this.OnFileForEmployeeGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureValid
		{
			get
			{
				return this._IsSignatureValid;
			}
			set
			{
				if ((this._IsSignatureValid != value))
				{
					this.OnIsSignatureValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureValid = value;
					this.SendPropertyChanged("IsSignatureValid");
					this.OnIsSignatureValidChanged();
				}
			}
		}
		
		[Column(Storage="_IsFileUpload", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsFileUpload
		{
			get
			{
				return this._IsFileUpload;
			}
			set
			{
				if ((this._IsFileUpload != value))
				{
					this.OnIsFileUploadChanging(value);
					this.SendPropertyChanging();
					this._IsFileUpload = value;
					this.SendPropertyChanged("IsFileUpload");
					this.OnIsFileUploadChanged();
				}
			}
		}
		
		[Column(Storage="_UploadDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> UploadDate
		{
			get
			{
				return this._UploadDate;
			}
			set
			{
				if ((this._UploadDate != value))
				{
					this.OnUploadDateChanging(value);
					this.SendPropertyChanging();
					this._UploadDate = value;
					this.SendPropertyChanged("UploadDate");
					this.OnUploadDateChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Association(Name="FK_V_FactReject_Employee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				if ((this._Employee.Entity != value))
				{
					this.SendPropertyChanging();
					this._Employee.Entity = value;
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_V_FactReject_FactEmployee", Storage="_FactEmployee", ThisKey="FactEmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee FactEmployee
		{
			get
			{
				return this._FactEmployee.Entity;
			}
			set
			{
				if ((this._FactEmployee.Entity != value))
				{
					this.SendPropertyChanging();
					this._FactEmployee.Entity = value;
					this.SendPropertyChanged("FactEmployee");
				}
			}
		}
		
		[Association(Name="FK_V_FactReject_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				if ((this._LastModifiedUser.Entity != value))
				{
					this.SendPropertyChanging();
					this._LastModifiedUser.Entity = value;
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_V_FactReject_MainObject", Storage="_MainObject", ThisKey="FactID", OtherKey="FactID", IsForeignKey=true)]
		public FactReject MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.V_FactResume")]
	public partial class V_FactResume : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FactID;
		
		private string _BasisType;
		
		private string _BasisTitle;
		
		private string _BasisNo;
		
		private System.Nullable<System.DateTime> _BasisDate;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<System.DateTime> _SignDate;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private System.Nullable<System.Guid> _FileGUID;
		
		private string _LetterNo;
		
		private System.Nullable<System.DateTime> _LetterDate;
		
		private System.Nullable<int> _FactEmployeeID;
		
		private bool _IsSigned;
		
		private System.Nullable<System.DateTime> _SignDateByEmployee;
		
		private System.Nullable<bool> _IsSignatureByEmployeeValid;
		
		private System.Nullable<System.Guid> _FileForEmployeeGUID;
		
		private System.Nullable<bool> _IsSignatureValid;
		
		private bool _IsFileUpload;
		
		private System.Nullable<System.DateTime> _UploadDate;
		
		private string _LanguageCode;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _FactEmployee;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<FactResume> _MainObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactIDChanging(int value);
    partial void OnFactIDChanged();
    partial void OnBasisTypeChanging(string value);
    partial void OnBasisTypeChanged();
    partial void OnBasisTitleChanging(string value);
    partial void OnBasisTitleChanged();
    partial void OnBasisNoChanging(string value);
    partial void OnBasisNoChanged();
    partial void OnBasisDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBasisDateChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnFileGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFileGUIDChanged();
    partial void OnLetterNoChanging(string value);
    partial void OnLetterNoChanged();
    partial void OnLetterDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLetterDateChanged();
    partial void OnFactEmployeeIDChanging(System.Nullable<int> value);
    partial void OnFactEmployeeIDChanged();
    partial void OnIsSignedChanging(bool value);
    partial void OnIsSignedChanged();
    partial void OnSignDateByEmployeeChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateByEmployeeChanged();
    partial void OnIsSignatureByEmployeeValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureByEmployeeValidChanged();
    partial void OnFileForEmployeeGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFileForEmployeeGUIDChanged();
    partial void OnIsSignatureValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureValidChanged();
    partial void OnIsFileUploadChanging(bool value);
    partial void OnIsFileUploadChanged();
    partial void OnUploadDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUploadDateChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    #endregion
		
		public V_FactResume()
		{
			this._Employee = default(EntityRef<Employee>);
			this._FactEmployee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MainObject = default(EntityRef<FactResume>);
			OnCreated();
		}
		
		[Column(Storage="_FactID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}
		
		[Column(Storage="_BasisType", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BasisType
		{
			get
			{
				return this._BasisType;
			}
			set
			{
				if ((this._BasisType != value))
				{
					this.OnBasisTypeChanging(value);
					this.SendPropertyChanging();
					this._BasisType = value;
					this.SendPropertyChanged("BasisType");
					this.OnBasisTypeChanged();
				}
			}
		}
		
		[Column(Storage="_BasisTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BasisTitle
		{
			get
			{
				return this._BasisTitle;
			}
			set
			{
				if ((this._BasisTitle != value))
				{
					this.OnBasisTitleChanging(value);
					this.SendPropertyChanging();
					this._BasisTitle = value;
					this.SendPropertyChanged("BasisTitle");
					this.OnBasisTitleChanged();
				}
			}
		}
		
		[Column(Storage="_BasisNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BasisNo
		{
			get
			{
				return this._BasisNo;
			}
			set
			{
				if ((this._BasisNo != value))
				{
					this.OnBasisNoChanging(value);
					this.SendPropertyChanging();
					this._BasisNo = value;
					this.SendPropertyChanged("BasisNo");
					this.OnBasisNoChanged();
				}
			}
		}
		
		[Column(Storage="_BasisDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BasisDate
		{
			get
			{
				return this._BasisDate;
			}
			set
			{
				if ((this._BasisDate != value))
				{
					this.OnBasisDateChanging(value);
					this.SendPropertyChanging();
					this._BasisDate = value;
					this.SendPropertyChanged("BasisDate");
					this.OnBasisDateChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_SignDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_FileGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileGUID
		{
			get
			{
				return this._FileGUID;
			}
			set
			{
				if ((this._FileGUID != value))
				{
					this.OnFileGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileGUID = value;
					this.SendPropertyChanged("FileGUID");
					this.OnFileGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_LetterNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string LetterNo
		{
			get
			{
				return this._LetterNo;
			}
			set
			{
				if ((this._LetterNo != value))
				{
					this.OnLetterNoChanging(value);
					this.SendPropertyChanging();
					this._LetterNo = value;
					this.SendPropertyChanged("LetterNo");
					this.OnLetterNoChanged();
				}
			}
		}
		
		[Column(Storage="_LetterDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LetterDate
		{
			get
			{
				return this._LetterDate;
			}
			set
			{
				if ((this._LetterDate != value))
				{
					this.OnLetterDateChanging(value);
					this.SendPropertyChanging();
					this._LetterDate = value;
					this.SendPropertyChanged("LetterDate");
					this.OnLetterDateChanged();
				}
			}
		}
		
		[Column(Storage="_FactEmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FactEmployeeID
		{
			get
			{
				return this._FactEmployeeID;
			}
			set
			{
				if ((this._FactEmployeeID != value))
				{
					if (this._FactEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._FactEmployeeID = value;
					this.SendPropertyChanged("FactEmployeeID");
					this.OnFactEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsSigned", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSigned
		{
			get
			{
				return this._IsSigned;
			}
			set
			{
				if ((this._IsSigned != value))
				{
					this.OnIsSignedChanging(value);
					this.SendPropertyChanging();
					this._IsSigned = value;
					this.SendPropertyChanged("IsSigned");
					this.OnIsSignedChanged();
				}
			}
		}
		
		[Column(Storage="_SignDateByEmployee", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDateByEmployee
		{
			get
			{
				return this._SignDateByEmployee;
			}
			set
			{
				if ((this._SignDateByEmployee != value))
				{
					this.OnSignDateByEmployeeChanging(value);
					this.SendPropertyChanging();
					this._SignDateByEmployee = value;
					this.SendPropertyChanged("SignDateByEmployee");
					this.OnSignDateByEmployeeChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureByEmployeeValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureByEmployeeValid
		{
			get
			{
				return this._IsSignatureByEmployeeValid;
			}
			set
			{
				if ((this._IsSignatureByEmployeeValid != value))
				{
					this.OnIsSignatureByEmployeeValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureByEmployeeValid = value;
					this.SendPropertyChanged("IsSignatureByEmployeeValid");
					this.OnIsSignatureByEmployeeValidChanged();
				}
			}
		}
		
		[Column(Storage="_FileForEmployeeGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileForEmployeeGUID
		{
			get
			{
				return this._FileForEmployeeGUID;
			}
			set
			{
				if ((this._FileForEmployeeGUID != value))
				{
					this.OnFileForEmployeeGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileForEmployeeGUID = value;
					this.SendPropertyChanged("FileForEmployeeGUID");
					this.OnFileForEmployeeGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureValid
		{
			get
			{
				return this._IsSignatureValid;
			}
			set
			{
				if ((this._IsSignatureValid != value))
				{
					this.OnIsSignatureValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureValid = value;
					this.SendPropertyChanged("IsSignatureValid");
					this.OnIsSignatureValidChanged();
				}
			}
		}
		
		[Column(Storage="_IsFileUpload", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsFileUpload
		{
			get
			{
				return this._IsFileUpload;
			}
			set
			{
				if ((this._IsFileUpload != value))
				{
					this.OnIsFileUploadChanging(value);
					this.SendPropertyChanging();
					this._IsFileUpload = value;
					this.SendPropertyChanged("IsFileUpload");
					this.OnIsFileUploadChanged();
				}
			}
		}
		
		[Column(Storage="_UploadDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> UploadDate
		{
			get
			{
				return this._UploadDate;
			}
			set
			{
				if ((this._UploadDate != value))
				{
					this.OnUploadDateChanging(value);
					this.SendPropertyChanging();
					this._UploadDate = value;
					this.SendPropertyChanged("UploadDate");
					this.OnUploadDateChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Association(Name="FK_V_FactResume_Employee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				if ((this._Employee.Entity != value))
				{
					this.SendPropertyChanging();
					this._Employee.Entity = value;
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_V_FactResume_FactEmployee", Storage="_FactEmployee", ThisKey="FactEmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee FactEmployee
		{
			get
			{
				return this._FactEmployee.Entity;
			}
			set
			{
				if ((this._FactEmployee.Entity != value))
				{
					this.SendPropertyChanging();
					this._FactEmployee.Entity = value;
					this.SendPropertyChanged("FactEmployee");
				}
			}
		}
		
		[Association(Name="FK_V_FactResume_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				if ((this._LastModifiedUser.Entity != value))
				{
					this.SendPropertyChanging();
					this._LastModifiedUser.Entity = value;
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_V_FactResume_MainObject", Storage="_MainObject", ThisKey="FactID", OtherKey="FactID", IsForeignKey=true)]
		public FactResume MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.V_FactSuspend")]
	public partial class V_FactSuspend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FactID;
		
		private char _ReasonType;
		
		private string _BasisType;
		
		private string _BasisTitle;
		
		private string _BasisNo;
		
		private System.Nullable<System.DateTime> _BasisDate;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<System.DateTime> _SignDate;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private bool _IsDeleted;
		
		private System.Nullable<System.Guid> _FileGUID;
		
		private string _LetterNo;
		
		private System.Nullable<System.DateTime> _LetterDate;
		
		private System.Nullable<int> _FactEmployeeID;
		
		private bool _IsSigned;
		
		private System.Nullable<System.DateTime> _SignDateByEmployee;
		
		private System.Nullable<bool> _IsSignatureByEmployeeValid;
		
		private System.Nullable<System.Guid> _FileForEmployeeGUID;
		
		private System.Nullable<bool> _IsSignatureValid;
		
		private bool _IsFileUpload;
		
		private System.Nullable<System.DateTime> _UploadDate;
		
		private string _LanguageCode;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _FactEmployee;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<FactSuspend> _MainObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactIDChanging(int value);
    partial void OnFactIDChanged();
    partial void OnReasonTypeChanging(char value);
    partial void OnReasonTypeChanged();
    partial void OnBasisTypeChanging(string value);
    partial void OnBasisTypeChanged();
    partial void OnBasisTitleChanging(string value);
    partial void OnBasisTitleChanged();
    partial void OnBasisNoChanging(string value);
    partial void OnBasisNoChanged();
    partial void OnBasisDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBasisDateChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnSignDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnFileGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFileGUIDChanged();
    partial void OnLetterNoChanging(string value);
    partial void OnLetterNoChanged();
    partial void OnLetterDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLetterDateChanged();
    partial void OnFactEmployeeIDChanging(System.Nullable<int> value);
    partial void OnFactEmployeeIDChanged();
    partial void OnIsSignedChanging(bool value);
    partial void OnIsSignedChanged();
    partial void OnSignDateByEmployeeChanging(System.Nullable<System.DateTime> value);
    partial void OnSignDateByEmployeeChanged();
    partial void OnIsSignatureByEmployeeValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureByEmployeeValidChanged();
    partial void OnFileForEmployeeGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnFileForEmployeeGUIDChanged();
    partial void OnIsSignatureValidChanging(System.Nullable<bool> value);
    partial void OnIsSignatureValidChanged();
    partial void OnIsFileUploadChanging(bool value);
    partial void OnIsFileUploadChanged();
    partial void OnUploadDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUploadDateChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    #endregion
		
		public V_FactSuspend()
		{
			this._Employee = default(EntityRef<Employee>);
			this._FactEmployee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._MainObject = default(EntityRef<FactSuspend>);
			OnCreated();
		}
		
		[Column(Storage="_FactID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int FactID
		{
			get
			{
				return this._FactID;
			}
			set
			{
				if ((this._FactID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactIDChanging(value);
					this.SendPropertyChanging();
					this._FactID = value;
					this.SendPropertyChanged("FactID");
					this.OnFactIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReasonType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char ReasonType
		{
			get
			{
				return this._ReasonType;
			}
			set
			{
				if ((this._ReasonType != value))
				{
					this.OnReasonTypeChanging(value);
					this.SendPropertyChanging();
					this._ReasonType = value;
					this.SendPropertyChanged("ReasonType");
					this.OnReasonTypeChanged();
				}
			}
		}
		
		[Column(Storage="_BasisType", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BasisType
		{
			get
			{
				return this._BasisType;
			}
			set
			{
				if ((this._BasisType != value))
				{
					this.OnBasisTypeChanging(value);
					this.SendPropertyChanging();
					this._BasisType = value;
					this.SendPropertyChanged("BasisType");
					this.OnBasisTypeChanged();
				}
			}
		}
		
		[Column(Storage="_BasisTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BasisTitle
		{
			get
			{
				return this._BasisTitle;
			}
			set
			{
				if ((this._BasisTitle != value))
				{
					this.OnBasisTitleChanging(value);
					this.SendPropertyChanging();
					this._BasisTitle = value;
					this.SendPropertyChanged("BasisTitle");
					this.OnBasisTitleChanged();
				}
			}
		}
		
		[Column(Storage="_BasisNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BasisNo
		{
			get
			{
				return this._BasisNo;
			}
			set
			{
				if ((this._BasisNo != value))
				{
					this.OnBasisNoChanging(value);
					this.SendPropertyChanging();
					this._BasisNo = value;
					this.SendPropertyChanged("BasisNo");
					this.OnBasisNoChanged();
				}
			}
		}
		
		[Column(Storage="_BasisDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BasisDate
		{
			get
			{
				return this._BasisDate;
			}
			set
			{
				if ((this._BasisDate != value))
				{
					this.OnBasisDateChanging(value);
					this.SendPropertyChanging();
					this._BasisDate = value;
					this.SendPropertyChanged("BasisDate");
					this.OnBasisDateChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_SignDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDate
		{
			get
			{
				return this._SignDate;
			}
			set
			{
				if ((this._SignDate != value))
				{
					this.OnSignDateChanging(value);
					this.SendPropertyChanging();
					this._SignDate = value;
					this.SendPropertyChanged("SignDate");
					this.OnSignDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_FileGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileGUID
		{
			get
			{
				return this._FileGUID;
			}
			set
			{
				if ((this._FileGUID != value))
				{
					this.OnFileGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileGUID = value;
					this.SendPropertyChanged("FileGUID");
					this.OnFileGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_LetterNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string LetterNo
		{
			get
			{
				return this._LetterNo;
			}
			set
			{
				if ((this._LetterNo != value))
				{
					this.OnLetterNoChanging(value);
					this.SendPropertyChanging();
					this._LetterNo = value;
					this.SendPropertyChanged("LetterNo");
					this.OnLetterNoChanged();
				}
			}
		}
		
		[Column(Storage="_LetterDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LetterDate
		{
			get
			{
				return this._LetterDate;
			}
			set
			{
				if ((this._LetterDate != value))
				{
					this.OnLetterDateChanging(value);
					this.SendPropertyChanging();
					this._LetterDate = value;
					this.SendPropertyChanged("LetterDate");
					this.OnLetterDateChanged();
				}
			}
		}
		
		[Column(Storage="_FactEmployeeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FactEmployeeID
		{
			get
			{
				return this._FactEmployeeID;
			}
			set
			{
				if ((this._FactEmployeeID != value))
				{
					if (this._FactEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._FactEmployeeID = value;
					this.SendPropertyChanged("FactEmployeeID");
					this.OnFactEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsSigned", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSigned
		{
			get
			{
				return this._IsSigned;
			}
			set
			{
				if ((this._IsSigned != value))
				{
					this.OnIsSignedChanging(value);
					this.SendPropertyChanging();
					this._IsSigned = value;
					this.SendPropertyChanged("IsSigned");
					this.OnIsSignedChanged();
				}
			}
		}
		
		[Column(Storage="_SignDateByEmployee", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SignDateByEmployee
		{
			get
			{
				return this._SignDateByEmployee;
			}
			set
			{
				if ((this._SignDateByEmployee != value))
				{
					this.OnSignDateByEmployeeChanging(value);
					this.SendPropertyChanging();
					this._SignDateByEmployee = value;
					this.SendPropertyChanged("SignDateByEmployee");
					this.OnSignDateByEmployeeChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureByEmployeeValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureByEmployeeValid
		{
			get
			{
				return this._IsSignatureByEmployeeValid;
			}
			set
			{
				if ((this._IsSignatureByEmployeeValid != value))
				{
					this.OnIsSignatureByEmployeeValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureByEmployeeValid = value;
					this.SendPropertyChanged("IsSignatureByEmployeeValid");
					this.OnIsSignatureByEmployeeValidChanged();
				}
			}
		}
		
		[Column(Storage="_FileForEmployeeGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> FileForEmployeeGUID
		{
			get
			{
				return this._FileForEmployeeGUID;
			}
			set
			{
				if ((this._FileForEmployeeGUID != value))
				{
					this.OnFileForEmployeeGUIDChanging(value);
					this.SendPropertyChanging();
					this._FileForEmployeeGUID = value;
					this.SendPropertyChanged("FileForEmployeeGUID");
					this.OnFileForEmployeeGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsSignatureValid", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsSignatureValid
		{
			get
			{
				return this._IsSignatureValid;
			}
			set
			{
				if ((this._IsSignatureValid != value))
				{
					this.OnIsSignatureValidChanging(value);
					this.SendPropertyChanging();
					this._IsSignatureValid = value;
					this.SendPropertyChanged("IsSignatureValid");
					this.OnIsSignatureValidChanged();
				}
			}
		}
		
		[Column(Storage="_IsFileUpload", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsFileUpload
		{
			get
			{
				return this._IsFileUpload;
			}
			set
			{
				if ((this._IsFileUpload != value))
				{
					this.OnIsFileUploadChanging(value);
					this.SendPropertyChanging();
					this._IsFileUpload = value;
					this.SendPropertyChanged("IsFileUpload");
					this.OnIsFileUploadChanged();
				}
			}
		}
		
		[Column(Storage="_UploadDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> UploadDate
		{
			get
			{
				return this._UploadDate;
			}
			set
			{
				if ((this._UploadDate != value))
				{
					this.OnUploadDateChanging(value);
					this.SendPropertyChanging();
					this._UploadDate = value;
					this.SendPropertyChanged("UploadDate");
					this.OnUploadDateChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Association(Name="FK_V_FactSuspend_Employee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				if ((this._Employee.Entity != value))
				{
					this.SendPropertyChanging();
					this._Employee.Entity = value;
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_V_FactSuspend_FactEmployee", Storage="_FactEmployee", ThisKey="FactEmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee FactEmployee
		{
			get
			{
				return this._FactEmployee.Entity;
			}
			set
			{
				if ((this._FactEmployee.Entity != value))
				{
					this.SendPropertyChanging();
					this._FactEmployee.Entity = value;
					this.SendPropertyChanged("FactEmployee");
				}
			}
		}
		
		[Association(Name="FK_V_FactSuspend_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				if ((this._LastModifiedUser.Entity != value))
				{
					this.SendPropertyChanging();
					this._LastModifiedUser.Entity = value;
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_V_FactSuspend_MainObject", Storage="_MainObject", ThisKey="FactID", OtherKey="FactID", IsForeignKey=true)]
		public FactSuspend MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.V_MMA_SiteInfoobjects")]
	public partial class V_MMA_SiteInfoobjects
	{
		
		private int _SiteInfoobjectsID;
		
		private bool _IsFolder;
		
		private bool _IsRoot;
		
		private string _LanguageCode;
		
		private int _ObjectTypeID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private string _SysName;
		
		private int _PackageID;
		
		private bool _IsEnableSPM;
		
		private System.Guid _Guid;
		
		private bool _IsSeparateTable;
		
		private bool _IsTemplate;
		
		private System.Nullable<int> _BaseObjectTypeID;
		
		public V_MMA_SiteInfoobjects()
		{
		}
		
		[Column(Storage="_SiteInfoobjectsID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SiteInfoobjectsID
		{
			get
			{
				return this._SiteInfoobjectsID;
			}
			set
			{
				if ((this._SiteInfoobjectsID != value))
				{
					this._SiteInfoobjectsID = value;
				}
			}
		}
		
		[Column(Storage="_IsFolder", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsFolder
		{
			get
			{
				return this._IsFolder;
			}
			set
			{
				if ((this._IsFolder != value))
				{
					this._IsFolder = value;
				}
			}
		}
		
		[Column(Storage="_IsRoot", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsRoot
		{
			get
			{
				return this._IsRoot;
			}
			set
			{
				if ((this._IsRoot != value))
				{
					this._IsRoot = value;
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="NChar(2) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this._LanguageCode = value;
				}
			}
		}
		
		[Column(Storage="_ObjectTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					this._ObjectTypeID = value;
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this._IsDeleted = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this._LastModifiedDate = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this._LastModifiedUserID = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this._SysName = value;
				}
			}
		}
		
		[Column(Storage="_PackageID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					this._PackageID = value;
				}
			}
		}
		
		[Column(Storage="_IsEnableSPM", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsEnableSPM
		{
			get
			{
				return this._IsEnableSPM;
			}
			set
			{
				if ((this._IsEnableSPM != value))
				{
					this._IsEnableSPM = value;
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this._Guid = value;
				}
			}
		}
		
		[Column(Storage="_IsSeparateTable", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSeparateTable
		{
			get
			{
				return this._IsSeparateTable;
			}
			set
			{
				if ((this._IsSeparateTable != value))
				{
					this._IsSeparateTable = value;
				}
			}
		}
		
		[Column(Storage="_IsTemplate", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsTemplate
		{
			get
			{
				return this._IsTemplate;
			}
			set
			{
				if ((this._IsTemplate != value))
				{
					this._IsTemplate = value;
				}
			}
		}
		
		[Column(Storage="_BaseObjectTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> BaseObjectTypeID
		{
			get
			{
				return this._BaseObjectTypeID;
			}
			set
			{
				if ((this._BaseObjectTypeID != value))
				{
					this._BaseObjectTypeID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.V_MMS_ChangeLog")]
	public partial class V_MMS_ChangeLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChangeLogID;
		
		private string _LanguageCode;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private string _Title;
		
		private string _SysName;
		
		private bool _IsEnableSPM;
		
		private System.Guid _Guid;
		
		private bool _IsSeparateTable;
		
		private bool _IsTemplate;
		
		private System.Nullable<int> _BaseObjectTypeID;
		
		private int _LastModifiedUserID;
		
		private string _TitlePlural;
		
		private string _DefaultOrderBy;
		
		private string _LogicalDelete;
		
		private bool _IsReplicate;
		
		private bool _IsEnableUserViews;
		
		private string _SecurityPackageSystemName;
		
		private bool _IsEnableObjectHistory;
		
		private string _Interface;
		
		private char _HistoryTypeCode;
		
		private bool _IsDataReplicated;
		
		private int _SeqNo;
		
		private string _Description;
		
		private int _PackageID;
		
		private EntityRef<MMS_ChangeLog> _MainObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChangeLogIDChanging(int value);
    partial void OnChangeLogIDChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnIsEnableSPMChanging(bool value);
    partial void OnIsEnableSPMChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnIsSeparateTableChanging(bool value);
    partial void OnIsSeparateTableChanged();
    partial void OnIsTemplateChanging(bool value);
    partial void OnIsTemplateChanged();
    partial void OnBaseObjectTypeIDChanging(System.Nullable<int> value);
    partial void OnBaseObjectTypeIDChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitlePluralChanging(string value);
    partial void OnTitlePluralChanged();
    partial void OnDefaultOrderByChanging(string value);
    partial void OnDefaultOrderByChanged();
    partial void OnLogicalDeleteChanging(string value);
    partial void OnLogicalDeleteChanged();
    partial void OnIsReplicateChanging(bool value);
    partial void OnIsReplicateChanged();
    partial void OnIsEnableUserViewsChanging(bool value);
    partial void OnIsEnableUserViewsChanged();
    partial void OnSecurityPackageSystemNameChanging(string value);
    partial void OnSecurityPackageSystemNameChanged();
    partial void OnIsEnableObjectHistoryChanging(bool value);
    partial void OnIsEnableObjectHistoryChanged();
    partial void OnInterfaceChanging(string value);
    partial void OnInterfaceChanged();
    partial void OnHistoryTypeCodeChanging(char value);
    partial void OnHistoryTypeCodeChanged();
    partial void OnIsDataReplicatedChanging(bool value);
    partial void OnIsDataReplicatedChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPackageIDChanging(int value);
    partial void OnPackageIDChanged();
    #endregion
		
		public V_MMS_ChangeLog()
		{
			this._MainObject = default(EntityRef<MMS_ChangeLog>);
			OnCreated();
		}
		
		[Column(Storage="_ChangeLogID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int ChangeLogID
		{
			get
			{
				return this._ChangeLogID;
			}
			set
			{
				if ((this._ChangeLogID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChangeLogIDChanging(value);
					this.SendPropertyChanging();
					this._ChangeLogID = value;
					this.SendPropertyChanged("ChangeLogID");
					this.OnChangeLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnableSPM", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsEnableSPM
		{
			get
			{
				return this._IsEnableSPM;
			}
			set
			{
				if ((this._IsEnableSPM != value))
				{
					this.OnIsEnableSPMChanging(value);
					this.SendPropertyChanging();
					this._IsEnableSPM = value;
					this.SendPropertyChanged("IsEnableSPM");
					this.OnIsEnableSPMChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_IsSeparateTable", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSeparateTable
		{
			get
			{
				return this._IsSeparateTable;
			}
			set
			{
				if ((this._IsSeparateTable != value))
				{
					this.OnIsSeparateTableChanging(value);
					this.SendPropertyChanging();
					this._IsSeparateTable = value;
					this.SendPropertyChanged("IsSeparateTable");
					this.OnIsSeparateTableChanged();
				}
			}
		}
		
		[Column(Storage="_IsTemplate", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsTemplate
		{
			get
			{
				return this._IsTemplate;
			}
			set
			{
				if ((this._IsTemplate != value))
				{
					this.OnIsTemplateChanging(value);
					this.SendPropertyChanging();
					this._IsTemplate = value;
					this.SendPropertyChanged("IsTemplate");
					this.OnIsTemplateChanged();
				}
			}
		}
		
		[Column(Storage="_BaseObjectTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> BaseObjectTypeID
		{
			get
			{
				return this._BaseObjectTypeID;
			}
			set
			{
				if ((this._BaseObjectTypeID != value))
				{
					this.OnBaseObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BaseObjectTypeID = value;
					this.SendPropertyChanged("BaseObjectTypeID");
					this.OnBaseObjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_TitlePlural", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string TitlePlural
		{
			get
			{
				return this._TitlePlural;
			}
			set
			{
				if ((this._TitlePlural != value))
				{
					this.OnTitlePluralChanging(value);
					this.SendPropertyChanging();
					this._TitlePlural = value;
					this.SendPropertyChanged("TitlePlural");
					this.OnTitlePluralChanged();
				}
			}
		}
		
		[Column(Storage="_DefaultOrderBy", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DefaultOrderBy
		{
			get
			{
				return this._DefaultOrderBy;
			}
			set
			{
				if ((this._DefaultOrderBy != value))
				{
					this.OnDefaultOrderByChanging(value);
					this.SendPropertyChanging();
					this._DefaultOrderBy = value;
					this.SendPropertyChanged("DefaultOrderBy");
					this.OnDefaultOrderByChanged();
				}
			}
		}
		
		[Column(Storage="_LogicalDelete", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string LogicalDelete
		{
			get
			{
				return this._LogicalDelete;
			}
			set
			{
				if ((this._LogicalDelete != value))
				{
					this.OnLogicalDeleteChanging(value);
					this.SendPropertyChanging();
					this._LogicalDelete = value;
					this.SendPropertyChanged("LogicalDelete");
					this.OnLogicalDeleteChanged();
				}
			}
		}
		
		[Column(Storage="_IsReplicate", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsReplicate
		{
			get
			{
				return this._IsReplicate;
			}
			set
			{
				if ((this._IsReplicate != value))
				{
					this.OnIsReplicateChanging(value);
					this.SendPropertyChanging();
					this._IsReplicate = value;
					this.SendPropertyChanged("IsReplicate");
					this.OnIsReplicateChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnableUserViews", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsEnableUserViews
		{
			get
			{
				return this._IsEnableUserViews;
			}
			set
			{
				if ((this._IsEnableUserViews != value))
				{
					this.OnIsEnableUserViewsChanging(value);
					this.SendPropertyChanging();
					this._IsEnableUserViews = value;
					this.SendPropertyChanged("IsEnableUserViews");
					this.OnIsEnableUserViewsChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityPackageSystemName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SecurityPackageSystemName
		{
			get
			{
				return this._SecurityPackageSystemName;
			}
			set
			{
				if ((this._SecurityPackageSystemName != value))
				{
					this.OnSecurityPackageSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SecurityPackageSystemName = value;
					this.SendPropertyChanged("SecurityPackageSystemName");
					this.OnSecurityPackageSystemNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnableObjectHistory", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsEnableObjectHistory
		{
			get
			{
				return this._IsEnableObjectHistory;
			}
			set
			{
				if ((this._IsEnableObjectHistory != value))
				{
					this.OnIsEnableObjectHistoryChanging(value);
					this.SendPropertyChanging();
					this._IsEnableObjectHistory = value;
					this.SendPropertyChanged("IsEnableObjectHistory");
					this.OnIsEnableObjectHistoryChanged();
				}
			}
		}
		
		[Column(Storage="_Interface", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Interface
		{
			get
			{
				return this._Interface;
			}
			set
			{
				if ((this._Interface != value))
				{
					this.OnInterfaceChanging(value);
					this.SendPropertyChanging();
					this._Interface = value;
					this.SendPropertyChanged("Interface");
					this.OnInterfaceChanged();
				}
			}
		}
		
		[Column(Storage="_HistoryTypeCode", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char HistoryTypeCode
		{
			get
			{
				return this._HistoryTypeCode;
			}
			set
			{
				if ((this._HistoryTypeCode != value))
				{
					this.OnHistoryTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._HistoryTypeCode = value;
					this.SendPropertyChanged("HistoryTypeCode");
					this.OnHistoryTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_IsDataReplicated", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDataReplicated
		{
			get
			{
				return this._IsDataReplicated;
			}
			set
			{
				if ((this._IsDataReplicated != value))
				{
					this.OnIsDataReplicatedChanging(value);
					this.SendPropertyChanging();
					this._IsDataReplicated = value;
					this.SendPropertyChanged("IsDataReplicated");
					this.OnIsDataReplicatedChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_PackageID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[Association(Name="FK_V_MMS_ChangeLog_MainObject", Storage="_MainObject", ThisKey="ChangeLogID", OtherKey="ChangeLogID", IsForeignKey=true)]
		public MMS_ChangeLog MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.V_MMS_ClassStereotype")]
	public partial class V_MMS_ClassStereotype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassStereotypeID;
		
		private string _LanguageCode;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private string _Title;
		
		private string _SysName;
		
		private bool _IsEnableSPM;
		
		private System.Guid _Guid;
		
		private bool _IsSeparateTable;
		
		private bool _IsTemplate;
		
		private System.Nullable<int> _BaseObjectTypeID;
		
		private int _LastModifiedUserID;
		
		private string _TitlePlural;
		
		private string _DefaultOrderBy;
		
		private string _LogicalDelete;
		
		private bool _IsReplicate;
		
		private bool _IsEnableUserViews;
		
		private string _SecurityPackageSystemName;
		
		private bool _IsEnableObjectHistory;
		
		private string _Interface;
		
		private char _HistoryTypeCode;
		
		private bool _IsDataReplicated;
		
		private int _SeqNo;
		
		private string _Description;
		
		private int _PackageID;
		
		private EntityRef<MMS_ClassStereotype> _MainObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassStereotypeIDChanging(int value);
    partial void OnClassStereotypeIDChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnIsEnableSPMChanging(bool value);
    partial void OnIsEnableSPMChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnIsSeparateTableChanging(bool value);
    partial void OnIsSeparateTableChanged();
    partial void OnIsTemplateChanging(bool value);
    partial void OnIsTemplateChanged();
    partial void OnBaseObjectTypeIDChanging(System.Nullable<int> value);
    partial void OnBaseObjectTypeIDChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitlePluralChanging(string value);
    partial void OnTitlePluralChanged();
    partial void OnDefaultOrderByChanging(string value);
    partial void OnDefaultOrderByChanged();
    partial void OnLogicalDeleteChanging(string value);
    partial void OnLogicalDeleteChanged();
    partial void OnIsReplicateChanging(bool value);
    partial void OnIsReplicateChanged();
    partial void OnIsEnableUserViewsChanging(bool value);
    partial void OnIsEnableUserViewsChanged();
    partial void OnSecurityPackageSystemNameChanging(string value);
    partial void OnSecurityPackageSystemNameChanged();
    partial void OnIsEnableObjectHistoryChanging(bool value);
    partial void OnIsEnableObjectHistoryChanged();
    partial void OnInterfaceChanging(string value);
    partial void OnInterfaceChanged();
    partial void OnHistoryTypeCodeChanging(char value);
    partial void OnHistoryTypeCodeChanged();
    partial void OnIsDataReplicatedChanging(bool value);
    partial void OnIsDataReplicatedChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPackageIDChanging(int value);
    partial void OnPackageIDChanged();
    #endregion
		
		public V_MMS_ClassStereotype()
		{
			this._MainObject = default(EntityRef<MMS_ClassStereotype>);
			OnCreated();
		}
		
		[Column(Storage="_ClassStereotypeID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int ClassStereotypeID
		{
			get
			{
				return this._ClassStereotypeID;
			}
			set
			{
				if ((this._ClassStereotypeID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassStereotypeIDChanging(value);
					this.SendPropertyChanging();
					this._ClassStereotypeID = value;
					this.SendPropertyChanged("ClassStereotypeID");
					this.OnClassStereotypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnableSPM", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsEnableSPM
		{
			get
			{
				return this._IsEnableSPM;
			}
			set
			{
				if ((this._IsEnableSPM != value))
				{
					this.OnIsEnableSPMChanging(value);
					this.SendPropertyChanging();
					this._IsEnableSPM = value;
					this.SendPropertyChanged("IsEnableSPM");
					this.OnIsEnableSPMChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_IsSeparateTable", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSeparateTable
		{
			get
			{
				return this._IsSeparateTable;
			}
			set
			{
				if ((this._IsSeparateTable != value))
				{
					this.OnIsSeparateTableChanging(value);
					this.SendPropertyChanging();
					this._IsSeparateTable = value;
					this.SendPropertyChanged("IsSeparateTable");
					this.OnIsSeparateTableChanged();
				}
			}
		}
		
		[Column(Storage="_IsTemplate", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsTemplate
		{
			get
			{
				return this._IsTemplate;
			}
			set
			{
				if ((this._IsTemplate != value))
				{
					this.OnIsTemplateChanging(value);
					this.SendPropertyChanging();
					this._IsTemplate = value;
					this.SendPropertyChanged("IsTemplate");
					this.OnIsTemplateChanged();
				}
			}
		}
		
		[Column(Storage="_BaseObjectTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> BaseObjectTypeID
		{
			get
			{
				return this._BaseObjectTypeID;
			}
			set
			{
				if ((this._BaseObjectTypeID != value))
				{
					this.OnBaseObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BaseObjectTypeID = value;
					this.SendPropertyChanged("BaseObjectTypeID");
					this.OnBaseObjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_TitlePlural", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string TitlePlural
		{
			get
			{
				return this._TitlePlural;
			}
			set
			{
				if ((this._TitlePlural != value))
				{
					this.OnTitlePluralChanging(value);
					this.SendPropertyChanging();
					this._TitlePlural = value;
					this.SendPropertyChanged("TitlePlural");
					this.OnTitlePluralChanged();
				}
			}
		}
		
		[Column(Storage="_DefaultOrderBy", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DefaultOrderBy
		{
			get
			{
				return this._DefaultOrderBy;
			}
			set
			{
				if ((this._DefaultOrderBy != value))
				{
					this.OnDefaultOrderByChanging(value);
					this.SendPropertyChanging();
					this._DefaultOrderBy = value;
					this.SendPropertyChanged("DefaultOrderBy");
					this.OnDefaultOrderByChanged();
				}
			}
		}
		
		[Column(Storage="_LogicalDelete", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string LogicalDelete
		{
			get
			{
				return this._LogicalDelete;
			}
			set
			{
				if ((this._LogicalDelete != value))
				{
					this.OnLogicalDeleteChanging(value);
					this.SendPropertyChanging();
					this._LogicalDelete = value;
					this.SendPropertyChanged("LogicalDelete");
					this.OnLogicalDeleteChanged();
				}
			}
		}
		
		[Column(Storage="_IsReplicate", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsReplicate
		{
			get
			{
				return this._IsReplicate;
			}
			set
			{
				if ((this._IsReplicate != value))
				{
					this.OnIsReplicateChanging(value);
					this.SendPropertyChanging();
					this._IsReplicate = value;
					this.SendPropertyChanged("IsReplicate");
					this.OnIsReplicateChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnableUserViews", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsEnableUserViews
		{
			get
			{
				return this._IsEnableUserViews;
			}
			set
			{
				if ((this._IsEnableUserViews != value))
				{
					this.OnIsEnableUserViewsChanging(value);
					this.SendPropertyChanging();
					this._IsEnableUserViews = value;
					this.SendPropertyChanged("IsEnableUserViews");
					this.OnIsEnableUserViewsChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityPackageSystemName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SecurityPackageSystemName
		{
			get
			{
				return this._SecurityPackageSystemName;
			}
			set
			{
				if ((this._SecurityPackageSystemName != value))
				{
					this.OnSecurityPackageSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SecurityPackageSystemName = value;
					this.SendPropertyChanged("SecurityPackageSystemName");
					this.OnSecurityPackageSystemNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnableObjectHistory", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsEnableObjectHistory
		{
			get
			{
				return this._IsEnableObjectHistory;
			}
			set
			{
				if ((this._IsEnableObjectHistory != value))
				{
					this.OnIsEnableObjectHistoryChanging(value);
					this.SendPropertyChanging();
					this._IsEnableObjectHistory = value;
					this.SendPropertyChanged("IsEnableObjectHistory");
					this.OnIsEnableObjectHistoryChanged();
				}
			}
		}
		
		[Column(Storage="_Interface", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Interface
		{
			get
			{
				return this._Interface;
			}
			set
			{
				if ((this._Interface != value))
				{
					this.OnInterfaceChanging(value);
					this.SendPropertyChanging();
					this._Interface = value;
					this.SendPropertyChanged("Interface");
					this.OnInterfaceChanged();
				}
			}
		}
		
		[Column(Storage="_HistoryTypeCode", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char HistoryTypeCode
		{
			get
			{
				return this._HistoryTypeCode;
			}
			set
			{
				if ((this._HistoryTypeCode != value))
				{
					this.OnHistoryTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._HistoryTypeCode = value;
					this.SendPropertyChanged("HistoryTypeCode");
					this.OnHistoryTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_IsDataReplicated", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDataReplicated
		{
			get
			{
				return this._IsDataReplicated;
			}
			set
			{
				if ((this._IsDataReplicated != value))
				{
					this.OnIsDataReplicatedChanging(value);
					this.SendPropertyChanging();
					this._IsDataReplicated = value;
					this.SendPropertyChanged("IsDataReplicated");
					this.OnIsDataReplicatedChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_PackageID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[Association(Name="FK_V_MMS_ClassStereotype_MainObject", Storage="_MainObject", ThisKey="ClassStereotypeID", OtherKey="ClassStereotypeID", IsForeignKey=true)]
		public MMS_ClassStereotype MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.V_MMS_Replication")]
	public partial class V_MMS_Replication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReplicationID;
		
		private string _LanguageCode;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private string _Title;
		
		private string _SysName;
		
		private bool _IsEnableSPM;
		
		private System.Guid _Guid;
		
		private bool _IsSeparateTable;
		
		private bool _IsTemplate;
		
		private System.Nullable<int> _BaseObjectTypeID;
		
		private int _LastModifiedUserID;
		
		private string _TitlePlural;
		
		private string _DefaultOrderBy;
		
		private string _LogicalDelete;
		
		private bool _IsReplicate;
		
		private bool _IsEnableUserViews;
		
		private string _SecurityPackageSystemName;
		
		private bool _IsEnableObjectHistory;
		
		private string _Interface;
		
		private char _HistoryTypeCode;
		
		private bool _IsDataReplicated;
		
		private int _SeqNo;
		
		private string _Description;
		
		private int _PackageID;
		
		private EntityRef<MMS_Replication> _MainObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReplicationIDChanging(int value);
    partial void OnReplicationIDChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnIsEnableSPMChanging(bool value);
    partial void OnIsEnableSPMChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnIsSeparateTableChanging(bool value);
    partial void OnIsSeparateTableChanged();
    partial void OnIsTemplateChanging(bool value);
    partial void OnIsTemplateChanged();
    partial void OnBaseObjectTypeIDChanging(System.Nullable<int> value);
    partial void OnBaseObjectTypeIDChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitlePluralChanging(string value);
    partial void OnTitlePluralChanged();
    partial void OnDefaultOrderByChanging(string value);
    partial void OnDefaultOrderByChanged();
    partial void OnLogicalDeleteChanging(string value);
    partial void OnLogicalDeleteChanged();
    partial void OnIsReplicateChanging(bool value);
    partial void OnIsReplicateChanged();
    partial void OnIsEnableUserViewsChanging(bool value);
    partial void OnIsEnableUserViewsChanged();
    partial void OnSecurityPackageSystemNameChanging(string value);
    partial void OnSecurityPackageSystemNameChanged();
    partial void OnIsEnableObjectHistoryChanging(bool value);
    partial void OnIsEnableObjectHistoryChanged();
    partial void OnInterfaceChanging(string value);
    partial void OnInterfaceChanged();
    partial void OnHistoryTypeCodeChanging(char value);
    partial void OnHistoryTypeCodeChanged();
    partial void OnIsDataReplicatedChanging(bool value);
    partial void OnIsDataReplicatedChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPackageIDChanging(int value);
    partial void OnPackageIDChanged();
    #endregion
		
		public V_MMS_Replication()
		{
			this._MainObject = default(EntityRef<MMS_Replication>);
			OnCreated();
		}
		
		[Column(Storage="_ReplicationID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int ReplicationID
		{
			get
			{
				return this._ReplicationID;
			}
			set
			{
				if ((this._ReplicationID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ReplicationID = value;
					this.SendPropertyChanged("ReplicationID");
					this.OnReplicationIDChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnableSPM", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsEnableSPM
		{
			get
			{
				return this._IsEnableSPM;
			}
			set
			{
				if ((this._IsEnableSPM != value))
				{
					this.OnIsEnableSPMChanging(value);
					this.SendPropertyChanging();
					this._IsEnableSPM = value;
					this.SendPropertyChanged("IsEnableSPM");
					this.OnIsEnableSPMChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_IsSeparateTable", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSeparateTable
		{
			get
			{
				return this._IsSeparateTable;
			}
			set
			{
				if ((this._IsSeparateTable != value))
				{
					this.OnIsSeparateTableChanging(value);
					this.SendPropertyChanging();
					this._IsSeparateTable = value;
					this.SendPropertyChanged("IsSeparateTable");
					this.OnIsSeparateTableChanged();
				}
			}
		}
		
		[Column(Storage="_IsTemplate", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsTemplate
		{
			get
			{
				return this._IsTemplate;
			}
			set
			{
				if ((this._IsTemplate != value))
				{
					this.OnIsTemplateChanging(value);
					this.SendPropertyChanging();
					this._IsTemplate = value;
					this.SendPropertyChanged("IsTemplate");
					this.OnIsTemplateChanged();
				}
			}
		}
		
		[Column(Storage="_BaseObjectTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> BaseObjectTypeID
		{
			get
			{
				return this._BaseObjectTypeID;
			}
			set
			{
				if ((this._BaseObjectTypeID != value))
				{
					this.OnBaseObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BaseObjectTypeID = value;
					this.SendPropertyChanged("BaseObjectTypeID");
					this.OnBaseObjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_TitlePlural", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string TitlePlural
		{
			get
			{
				return this._TitlePlural;
			}
			set
			{
				if ((this._TitlePlural != value))
				{
					this.OnTitlePluralChanging(value);
					this.SendPropertyChanging();
					this._TitlePlural = value;
					this.SendPropertyChanged("TitlePlural");
					this.OnTitlePluralChanged();
				}
			}
		}
		
		[Column(Storage="_DefaultOrderBy", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DefaultOrderBy
		{
			get
			{
				return this._DefaultOrderBy;
			}
			set
			{
				if ((this._DefaultOrderBy != value))
				{
					this.OnDefaultOrderByChanging(value);
					this.SendPropertyChanging();
					this._DefaultOrderBy = value;
					this.SendPropertyChanged("DefaultOrderBy");
					this.OnDefaultOrderByChanged();
				}
			}
		}
		
		[Column(Storage="_LogicalDelete", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string LogicalDelete
		{
			get
			{
				return this._LogicalDelete;
			}
			set
			{
				if ((this._LogicalDelete != value))
				{
					this.OnLogicalDeleteChanging(value);
					this.SendPropertyChanging();
					this._LogicalDelete = value;
					this.SendPropertyChanged("LogicalDelete");
					this.OnLogicalDeleteChanged();
				}
			}
		}
		
		[Column(Storage="_IsReplicate", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsReplicate
		{
			get
			{
				return this._IsReplicate;
			}
			set
			{
				if ((this._IsReplicate != value))
				{
					this.OnIsReplicateChanging(value);
					this.SendPropertyChanging();
					this._IsReplicate = value;
					this.SendPropertyChanged("IsReplicate");
					this.OnIsReplicateChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnableUserViews", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsEnableUserViews
		{
			get
			{
				return this._IsEnableUserViews;
			}
			set
			{
				if ((this._IsEnableUserViews != value))
				{
					this.OnIsEnableUserViewsChanging(value);
					this.SendPropertyChanging();
					this._IsEnableUserViews = value;
					this.SendPropertyChanged("IsEnableUserViews");
					this.OnIsEnableUserViewsChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityPackageSystemName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SecurityPackageSystemName
		{
			get
			{
				return this._SecurityPackageSystemName;
			}
			set
			{
				if ((this._SecurityPackageSystemName != value))
				{
					this.OnSecurityPackageSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SecurityPackageSystemName = value;
					this.SendPropertyChanged("SecurityPackageSystemName");
					this.OnSecurityPackageSystemNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnableObjectHistory", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsEnableObjectHistory
		{
			get
			{
				return this._IsEnableObjectHistory;
			}
			set
			{
				if ((this._IsEnableObjectHistory != value))
				{
					this.OnIsEnableObjectHistoryChanging(value);
					this.SendPropertyChanging();
					this._IsEnableObjectHistory = value;
					this.SendPropertyChanged("IsEnableObjectHistory");
					this.OnIsEnableObjectHistoryChanged();
				}
			}
		}
		
		[Column(Storage="_Interface", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Interface
		{
			get
			{
				return this._Interface;
			}
			set
			{
				if ((this._Interface != value))
				{
					this.OnInterfaceChanging(value);
					this.SendPropertyChanging();
					this._Interface = value;
					this.SendPropertyChanged("Interface");
					this.OnInterfaceChanged();
				}
			}
		}
		
		[Column(Storage="_HistoryTypeCode", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char HistoryTypeCode
		{
			get
			{
				return this._HistoryTypeCode;
			}
			set
			{
				if ((this._HistoryTypeCode != value))
				{
					this.OnHistoryTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._HistoryTypeCode = value;
					this.SendPropertyChanged("HistoryTypeCode");
					this.OnHistoryTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_IsDataReplicated", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDataReplicated
		{
			get
			{
				return this._IsDataReplicated;
			}
			set
			{
				if ((this._IsDataReplicated != value))
				{
					this.OnIsDataReplicatedChanging(value);
					this.SendPropertyChanging();
					this._IsDataReplicated = value;
					this.SendPropertyChanged("IsDataReplicated");
					this.OnIsDataReplicatedChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_PackageID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[Association(Name="FK_V_MMS_Replication_MainObject", Storage="_MainObject", ThisKey="ReplicationID", OtherKey="ReplicationID", IsForeignKey=true)]
		public MMS_Replication MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.V_MMS_Versioning")]
	public partial class V_MMS_Versioning : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VersioningID;
		
		private char _Type;
		
		private string _LanguageCode;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private string _Title;
		
		private string _SysName;
		
		private bool _IsEnableSPM;
		
		private System.Guid _Guid;
		
		private bool _IsSeparateTable;
		
		private bool _IsTemplate;
		
		private System.Nullable<int> _BaseObjectTypeID;
		
		private int _LastModifiedUserID;
		
		private string _TitlePlural;
		
		private string _DefaultOrderBy;
		
		private string _LogicalDelete;
		
		private bool _IsReplicate;
		
		private bool _IsEnableUserViews;
		
		private string _SecurityPackageSystemName;
		
		private bool _IsEnableObjectHistory;
		
		private string _Interface;
		
		private char _HistoryTypeCode;
		
		private bool _IsDataReplicated;
		
		private int _SeqNo;
		
		private string _Description;
		
		private int _PackageID;
		
		private EntityRef<MMS_Versioning> _MainObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVersioningIDChanging(int value);
    partial void OnVersioningIDChanged();
    partial void OnTypeChanging(char value);
    partial void OnTypeChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnIsEnableSPMChanging(bool value);
    partial void OnIsEnableSPMChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnIsSeparateTableChanging(bool value);
    partial void OnIsSeparateTableChanged();
    partial void OnIsTemplateChanging(bool value);
    partial void OnIsTemplateChanged();
    partial void OnBaseObjectTypeIDChanging(System.Nullable<int> value);
    partial void OnBaseObjectTypeIDChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitlePluralChanging(string value);
    partial void OnTitlePluralChanged();
    partial void OnDefaultOrderByChanging(string value);
    partial void OnDefaultOrderByChanged();
    partial void OnLogicalDeleteChanging(string value);
    partial void OnLogicalDeleteChanged();
    partial void OnIsReplicateChanging(bool value);
    partial void OnIsReplicateChanged();
    partial void OnIsEnableUserViewsChanging(bool value);
    partial void OnIsEnableUserViewsChanged();
    partial void OnSecurityPackageSystemNameChanging(string value);
    partial void OnSecurityPackageSystemNameChanged();
    partial void OnIsEnableObjectHistoryChanging(bool value);
    partial void OnIsEnableObjectHistoryChanged();
    partial void OnInterfaceChanging(string value);
    partial void OnInterfaceChanged();
    partial void OnHistoryTypeCodeChanging(char value);
    partial void OnHistoryTypeCodeChanged();
    partial void OnIsDataReplicatedChanging(bool value);
    partial void OnIsDataReplicatedChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPackageIDChanging(int value);
    partial void OnPackageIDChanged();
    #endregion
		
		public V_MMS_Versioning()
		{
			this._MainObject = default(EntityRef<MMS_Versioning>);
			OnCreated();
		}
		
		[Column(Storage="_VersioningID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int VersioningID
		{
			get
			{
				return this._VersioningID;
			}
			set
			{
				if ((this._VersioningID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVersioningIDChanging(value);
					this.SendPropertyChanging();
					this._VersioningID = value;
					this.SendPropertyChanged("VersioningID");
					this.OnVersioningIDChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnableSPM", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsEnableSPM
		{
			get
			{
				return this._IsEnableSPM;
			}
			set
			{
				if ((this._IsEnableSPM != value))
				{
					this.OnIsEnableSPMChanging(value);
					this.SendPropertyChanging();
					this._IsEnableSPM = value;
					this.SendPropertyChanged("IsEnableSPM");
					this.OnIsEnableSPMChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_IsSeparateTable", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSeparateTable
		{
			get
			{
				return this._IsSeparateTable;
			}
			set
			{
				if ((this._IsSeparateTable != value))
				{
					this.OnIsSeparateTableChanging(value);
					this.SendPropertyChanging();
					this._IsSeparateTable = value;
					this.SendPropertyChanged("IsSeparateTable");
					this.OnIsSeparateTableChanged();
				}
			}
		}
		
		[Column(Storage="_IsTemplate", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsTemplate
		{
			get
			{
				return this._IsTemplate;
			}
			set
			{
				if ((this._IsTemplate != value))
				{
					this.OnIsTemplateChanging(value);
					this.SendPropertyChanging();
					this._IsTemplate = value;
					this.SendPropertyChanged("IsTemplate");
					this.OnIsTemplateChanged();
				}
			}
		}
		
		[Column(Storage="_BaseObjectTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> BaseObjectTypeID
		{
			get
			{
				return this._BaseObjectTypeID;
			}
			set
			{
				if ((this._BaseObjectTypeID != value))
				{
					this.OnBaseObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BaseObjectTypeID = value;
					this.SendPropertyChanged("BaseObjectTypeID");
					this.OnBaseObjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_TitlePlural", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string TitlePlural
		{
			get
			{
				return this._TitlePlural;
			}
			set
			{
				if ((this._TitlePlural != value))
				{
					this.OnTitlePluralChanging(value);
					this.SendPropertyChanging();
					this._TitlePlural = value;
					this.SendPropertyChanged("TitlePlural");
					this.OnTitlePluralChanged();
				}
			}
		}
		
		[Column(Storage="_DefaultOrderBy", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DefaultOrderBy
		{
			get
			{
				return this._DefaultOrderBy;
			}
			set
			{
				if ((this._DefaultOrderBy != value))
				{
					this.OnDefaultOrderByChanging(value);
					this.SendPropertyChanging();
					this._DefaultOrderBy = value;
					this.SendPropertyChanged("DefaultOrderBy");
					this.OnDefaultOrderByChanged();
				}
			}
		}
		
		[Column(Storage="_LogicalDelete", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string LogicalDelete
		{
			get
			{
				return this._LogicalDelete;
			}
			set
			{
				if ((this._LogicalDelete != value))
				{
					this.OnLogicalDeleteChanging(value);
					this.SendPropertyChanging();
					this._LogicalDelete = value;
					this.SendPropertyChanged("LogicalDelete");
					this.OnLogicalDeleteChanged();
				}
			}
		}
		
		[Column(Storage="_IsReplicate", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsReplicate
		{
			get
			{
				return this._IsReplicate;
			}
			set
			{
				if ((this._IsReplicate != value))
				{
					this.OnIsReplicateChanging(value);
					this.SendPropertyChanging();
					this._IsReplicate = value;
					this.SendPropertyChanged("IsReplicate");
					this.OnIsReplicateChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnableUserViews", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsEnableUserViews
		{
			get
			{
				return this._IsEnableUserViews;
			}
			set
			{
				if ((this._IsEnableUserViews != value))
				{
					this.OnIsEnableUserViewsChanging(value);
					this.SendPropertyChanging();
					this._IsEnableUserViews = value;
					this.SendPropertyChanged("IsEnableUserViews");
					this.OnIsEnableUserViewsChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityPackageSystemName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SecurityPackageSystemName
		{
			get
			{
				return this._SecurityPackageSystemName;
			}
			set
			{
				if ((this._SecurityPackageSystemName != value))
				{
					this.OnSecurityPackageSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SecurityPackageSystemName = value;
					this.SendPropertyChanged("SecurityPackageSystemName");
					this.OnSecurityPackageSystemNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnableObjectHistory", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsEnableObjectHistory
		{
			get
			{
				return this._IsEnableObjectHistory;
			}
			set
			{
				if ((this._IsEnableObjectHistory != value))
				{
					this.OnIsEnableObjectHistoryChanging(value);
					this.SendPropertyChanging();
					this._IsEnableObjectHistory = value;
					this.SendPropertyChanged("IsEnableObjectHistory");
					this.OnIsEnableObjectHistoryChanged();
				}
			}
		}
		
		[Column(Storage="_Interface", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Interface
		{
			get
			{
				return this._Interface;
			}
			set
			{
				if ((this._Interface != value))
				{
					this.OnInterfaceChanging(value);
					this.SendPropertyChanging();
					this._Interface = value;
					this.SendPropertyChanged("Interface");
					this.OnInterfaceChanged();
				}
			}
		}
		
		[Column(Storage="_HistoryTypeCode", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char HistoryTypeCode
		{
			get
			{
				return this._HistoryTypeCode;
			}
			set
			{
				if ((this._HistoryTypeCode != value))
				{
					this.OnHistoryTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._HistoryTypeCode = value;
					this.SendPropertyChanged("HistoryTypeCode");
					this.OnHistoryTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_IsDataReplicated", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDataReplicated
		{
			get
			{
				return this._IsDataReplicated;
			}
			set
			{
				if ((this._IsDataReplicated != value))
				{
					this.OnIsDataReplicatedChanging(value);
					this.SendPropertyChanging();
					this._IsDataReplicated = value;
					this.SendPropertyChanged("IsDataReplicated");
					this.OnIsDataReplicatedChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_PackageID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[Association(Name="FK_V_MMS_Versioning_MainObject", Storage="_MainObject", ThisKey="VersioningID", OtherKey="VersioningID", IsForeignKey=true)]
		public MMS_Versioning MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.V_N_FileLibrary")]
	public partial class V_N_FileLibrary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FolderID;
		
		private int _MaxFileSize;
		
		private int _FileLibraryTypeID;
		
		private string _LanguageCode;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private System.Nullable<int> _ParentID;
		
		private string _FullPath;
		
		private char _StorageType;
		
		private string _StorageParameter;
		
		private System.Guid _Guid;
		
		private string _GuidPath;
		
		private EntityRef<N_FileLibraryType> _FileLibraryType;
		
		private EntityRef<N_FileLibrary> _MainObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFolderIDChanging(int value);
    partial void OnFolderIDChanged();
    partial void OnMaxFileSizeChanging(int value);
    partial void OnMaxFileSizeChanged();
    partial void OnFileLibraryTypeIDChanging(int value);
    partial void OnFileLibraryTypeIDChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnFullPathChanging(string value);
    partial void OnFullPathChanged();
    partial void OnStorageTypeChanging(char value);
    partial void OnStorageTypeChanged();
    partial void OnStorageParameterChanging(string value);
    partial void OnStorageParameterChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnGuidPathChanging(string value);
    partial void OnGuidPathChanged();
    #endregion
		
		public V_N_FileLibrary()
		{
			this._FileLibraryType = default(EntityRef<N_FileLibraryType>);
			this._MainObject = default(EntityRef<N_FileLibrary>);
			OnCreated();
		}
		
		[Column(Storage="_FolderID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int FolderID
		{
			get
			{
				return this._FolderID;
			}
			set
			{
				if ((this._FolderID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFolderIDChanging(value);
					this.SendPropertyChanging();
					this._FolderID = value;
					this.SendPropertyChanged("FolderID");
					this.OnFolderIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaxFileSize", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MaxFileSize
		{
			get
			{
				return this._MaxFileSize;
			}
			set
			{
				if ((this._MaxFileSize != value))
				{
					this.OnMaxFileSizeChanging(value);
					this.SendPropertyChanging();
					this._MaxFileSize = value;
					this.SendPropertyChanged("MaxFileSize");
					this.OnMaxFileSizeChanged();
				}
			}
		}
		
		[Column(Storage="_FileLibraryTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FileLibraryTypeID
		{
			get
			{
				return this._FileLibraryTypeID;
			}
			set
			{
				if ((this._FileLibraryTypeID != value))
				{
					if (this._FileLibraryType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileLibraryTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FileLibraryTypeID = value;
					this.SendPropertyChanged("FileLibraryTypeID");
					this.OnFileLibraryTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_FullPath", DbType="NVarChar(4000)", UpdateCheck=UpdateCheck.Never)]
		public string FullPath
		{
			get
			{
				return this._FullPath;
			}
			set
			{
				if ((this._FullPath != value))
				{
					this.OnFullPathChanging(value);
					this.SendPropertyChanging();
					this._FullPath = value;
					this.SendPropertyChanged("FullPath");
					this.OnFullPathChanged();
				}
			}
		}
		
		[Column(Storage="_StorageType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char StorageType
		{
			get
			{
				return this._StorageType;
			}
			set
			{
				if ((this._StorageType != value))
				{
					this.OnStorageTypeChanging(value);
					this.SendPropertyChanging();
					this._StorageType = value;
					this.SendPropertyChanged("StorageType");
					this.OnStorageTypeChanged();
				}
			}
		}
		
		[Column(Storage="_StorageParameter", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string StorageParameter
		{
			get
			{
				return this._StorageParameter;
			}
			set
			{
				if ((this._StorageParameter != value))
				{
					this.OnStorageParameterChanging(value);
					this.SendPropertyChanging();
					this._StorageParameter = value;
					this.SendPropertyChanged("StorageParameter");
					this.OnStorageParameterChanged();
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_GuidPath", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string GuidPath
		{
			get
			{
				return this._GuidPath;
			}
			set
			{
				if ((this._GuidPath != value))
				{
					this.OnGuidPathChanging(value);
					this.SendPropertyChanging();
					this._GuidPath = value;
					this.SendPropertyChanged("GuidPath");
					this.OnGuidPathChanged();
				}
			}
		}
		
		[Association(Name="FK_V_N_FileLibrary_FileLibraryType", Storage="_FileLibraryType", ThisKey="FileLibraryTypeID", OtherKey="FileLibraryTypeID", IsForeignKey=true)]
		public N_FileLibraryType FileLibraryType
		{
			get
			{
				return this._FileLibraryType.Entity;
			}
			set
			{
				if ((this._FileLibraryType.Entity != value))
				{
					this.SendPropertyChanging();
					this._FileLibraryType.Entity = value;
					this.SendPropertyChanged("FileLibraryType");
				}
			}
		}
		
		[Association(Name="FK_V_N_FileLibrary_MainObject", Storage="_MainObject", ThisKey="FolderID", OtherKey="FolderID", IsForeignKey=true)]
		public N_FileLibrary MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.V_N_FolderFile")]
	public partial class V_N_FolderFile
	{
		
		private int _ID;
		
		private string _Title;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private System.Nullable<int> _ParentID;
		
		private bool _IsDeleted;
		
		private string _Extension;
		
		private long _Length;
		
		private string _LastModifiedUserTitle;
		
		private int _IsFile;
		
		private System.Guid _Guid;
		
		private string _Password;
		
		public V_N_FolderFile()
		{
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this._LastModifiedDate = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this._LastModifiedUserID = value;
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this._IsDeleted = value;
				}
			}
		}
		
		[Column(Storage="_Extension", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this._Extension = value;
				}
			}
		}
		
		[Column(Storage="_Length", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this._Length = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserTitle", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LastModifiedUserTitle
		{
			get
			{
				return this._LastModifiedUserTitle;
			}
			set
			{
				if ((this._LastModifiedUserTitle != value))
				{
					this._LastModifiedUserTitle = value;
				}
			}
		}
		
		[Column(Storage="_IsFile", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int IsFile
		{
			get
			{
				return this._IsFile;
			}
			set
			{
				if ((this._IsFile != value))
				{
					this._IsFile = value;
				}
			}
		}
		
		[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this._Guid = value;
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.V_N_FullFolder")]
	public partial class V_N_FullFolder
	{
		
		private System.Nullable<int> _FolderID;
		
		private System.Nullable<int> _ParentID;
		
		private System.Nullable<int> _ArcLen;
		
		public V_N_FullFolder()
		{
		}
		
		[Column(Storage="_FolderID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FolderID
		{
			get
			{
				return this._FolderID;
			}
			set
			{
				if ((this._FolderID != value))
				{
					this._FolderID = value;
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}
		
		[Column(Storage="_ArcLen", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ArcLen
		{
			get
			{
				return this._ArcLen;
			}
			set
			{
				if ((this._ArcLen != value))
				{
					this._ArcLen = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.V_N_TextResource")]
	public partial class V_N_TextResource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TextResourceID;
		
		private string _Title;
		
		private string _SysName;
		
		private string _LanguageCode;
		
		private string _Text;
		
		private EntityRef<N_TextResource> _MainObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTextResourceIDChanging(int value);
    partial void OnTextResourceIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public V_N_TextResource()
		{
			this._MainObject = default(EntityRef<N_TextResource>);
			OnCreated();
		}
		
		[Column(Storage="_TextResourceID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int TextResourceID
		{
			get
			{
				return this._TextResourceID;
			}
			set
			{
				if ((this._TextResourceID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTextResourceIDChanging(value);
					this.SendPropertyChanging();
					this._TextResourceID = value;
					this.SendPropertyChanged("TextResourceID");
					this.OnTextResourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Association(Name="FK_V_N_TextResource_MainObject", Storage="_MainObject", ThisKey="TextResourceID", OtherKey="TextResourceID", IsForeignKey=true)]
		public N_TextResource MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.V_OrderDocDeviation")]
	public partial class V_OrderDocDeviation
	{
		
		private string _Title;
		
		private string _RegDate;
		
		private string _FormDate;
		
		private char _OrderType;
		
		private string _Activity_SysName;
		
		private string _CategoryCode;
		
		private System.Nullable<int> _MaxNotify;
		
		private System.Nullable<int> _MaxValidity;
		
		private string _MaxDate;
		
		public V_OrderDocDeviation()
		{
		}
		
		[Column(Storage="_Title", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_RegDate", DbType="VarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this._RegDate = value;
				}
			}
		}
		
		[Column(Storage="_FormDate", DbType="VarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string FormDate
		{
			get
			{
				return this._FormDate;
			}
			set
			{
				if ((this._FormDate != value))
				{
					this._FormDate = value;
				}
			}
		}
		
		[Column(Storage="_OrderType", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char OrderType
		{
			get
			{
				return this._OrderType;
			}
			set
			{
				if ((this._OrderType != value))
				{
					this._OrderType = value;
				}
			}
		}
		
		[Column(Storage="_Activity_SysName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Activity_SysName
		{
			get
			{
				return this._Activity_SysName;
			}
			set
			{
				if ((this._Activity_SysName != value))
				{
					this._Activity_SysName = value;
				}
			}
		}
		
		[Column(Storage="_CategoryCode", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CategoryCode
		{
			get
			{
				return this._CategoryCode;
			}
			set
			{
				if ((this._CategoryCode != value))
				{
					this._CategoryCode = value;
				}
			}
		}
		
		[Column(Storage="_MaxNotify", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MaxNotify
		{
			get
			{
				return this._MaxNotify;
			}
			set
			{
				if ((this._MaxNotify != value))
				{
					this._MaxNotify = value;
				}
			}
		}
		
		[Column(Storage="_MaxValidity", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MaxValidity
		{
			get
			{
				return this._MaxValidity;
			}
			set
			{
				if ((this._MaxValidity != value))
				{
					this._MaxValidity = value;
				}
			}
		}
		
		[Column(Storage="_MaxDate", DbType="VarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string MaxDate
		{
			get
			{
				return this._MaxDate;
			}
			set
			{
				if ((this._MaxDate != value))
				{
					this._MaxDate = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.V_OrderValidity")]
	public partial class V_OrderValidity
	{
		
		private System.Guid _OrderGUID;
		
		private System.Nullable<System.DateTime> _RegDate;
		
		private System.Nullable<System.DateTime> _MaxFormDate;
		
		private System.Nullable<System.DateTime> _FormDate;
		
		public V_OrderValidity()
		{
		}
		
		[Column(Storage="_OrderGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid OrderGUID
		{
			get
			{
				return this._OrderGUID;
			}
			set
			{
				if ((this._OrderGUID != value))
				{
					this._OrderGUID = value;
				}
			}
		}
		
		[Column(Storage="_RegDate", DbType="Date", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this._RegDate = value;
				}
			}
		}
		
		[Column(Storage="_MaxFormDate", DbType="Date", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> MaxFormDate
		{
			get
			{
				return this._MaxFormDate;
			}
			set
			{
				if ((this._MaxFormDate != value))
				{
					this._MaxFormDate = value;
				}
			}
		}
		
		[Column(Storage="_FormDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FormDate
		{
			get
			{
				return this._FormDate;
			}
			set
			{
				if ((this._FormDate != value))
				{
					this._FormDate = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.V_SPM_AllRoleAsso")]
	public partial class V_SPM_AllRoleAsso
	{
		
		private System.Nullable<int> _ParentRoleID;
		
		private System.Nullable<int> _RoleID;
		
		public V_SPM_AllRoleAsso()
		{
		}
		
		[Column(Storage="_ParentRoleID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ParentRoleID
		{
			get
			{
				return this._ParentRoleID;
			}
			set
			{
				if ((this._ParentRoleID != value))
				{
					this._ParentRoleID = value;
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.V_SPM_AllSubjectRole")]
	public partial class V_SPM_AllSubjectRole
	{
		
		private System.Nullable<int> _SubjectID;
		
		private System.Nullable<int> _RoleID;
		
		public V_SPM_AllSubjectRole()
		{
		}
		
		[Column(Storage="_SubjectID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					this._SubjectID = value;
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.V_UserInfo")]
	public partial class V_UserInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserInfoID;
		
		private string _Phone;
		
		private string _Post;
		
		private System.Nullable<System.Guid> _ContractorGUID;
		
		private char _Type;
		
		private string _LanguageCode;
		
		private int _SubjectID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private string _Title;
		
		private string _SystemName;
		
		private string _SID;
		
		private int _LastModifiedUserID;
		
		private EntityRef<Contractor> _Contractor;
		
		private EntityRef<UserInfo> _MainObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserInfoIDChanging(int value);
    partial void OnUserInfoIDChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnPostChanging(string value);
    partial void OnPostChanged();
    partial void OnContractorGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnContractorGUIDChanged();
    partial void OnTypeChanging(char value);
    partial void OnTypeChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSystemNameChanging(string value);
    partial void OnSystemNameChanged();
    partial void OnSIDChanging(string value);
    partial void OnSIDChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    #endregion
		
		public V_UserInfo()
		{
			this._Contractor = default(EntityRef<Contractor>);
			this._MainObject = default(EntityRef<UserInfo>);
			OnCreated();
		}
		
		[Column(Storage="_UserInfoID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int UserInfoID
		{
			get
			{
				return this._UserInfoID;
			}
			set
			{
				if ((this._UserInfoID != value))
				{
					if (this._MainObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserInfoIDChanging(value);
					this.SendPropertyChanging();
					this._UserInfoID = value;
					this.SendPropertyChanged("UserInfoID");
					this.OnUserInfoIDChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Post", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				if ((this._Post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._Post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}
		
		[Column(Storage="_ContractorGUID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ContractorGUID
		{
			get
			{
				return this._ContractorGUID;
			}
			set
			{
				if ((this._ContractorGUID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorGUID = value;
					this.SendPropertyChanged("ContractorGUID");
					this.OnContractorGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SystemName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SystemName
		{
			get
			{
				return this._SystemName;
			}
			set
			{
				if ((this._SystemName != value))
				{
					this.OnSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SystemName = value;
					this.SendPropertyChanged("SystemName");
					this.OnSystemNameChanged();
				}
			}
		}
		
		[Column(Storage="_SID", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SID
		{
			get
			{
				return this._SID;
			}
			set
			{
				if ((this._SID != value))
				{
					this.OnSIDChanging(value);
					this.SendPropertyChanging();
					this._SID = value;
					this.SendPropertyChanged("SID");
					this.OnSIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Association(Name="FK_V_UserInfo_Contractor", Storage="_Contractor", ThisKey="ContractorGUID", OtherKey="ContractorGUID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				if ((this._Contractor.Entity != value))
				{
					this.SendPropertyChanging();
					this._Contractor.Entity = value;
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		[Association(Name="FK_V_UserInfo_MainObject", Storage="_MainObject", ThisKey="UserInfoID", OtherKey="UserInfoID", IsForeignKey=true)]
		public UserInfo MainObject
		{
			get
			{
				return this._MainObject.Entity;
			}
			set
			{
				if ((this._MainObject.Entity != value))
				{
					this.SendPropertyChanging();
					this._MainObject.Entity = value;
					this.SendPropertyChanged("MainObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.VisitException")]
	public partial class VisitException : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VisitExceptionID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private int _EmployeeID;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitExceptionIDChanging(int value);
    partial void OnVisitExceptionIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    #endregion
		
		public VisitException()
		{
			this._Employee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			OnCreated();
		}
		
		[Column(Storage="_VisitExceptionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VisitExceptionID
		{
			get
			{
				return this._VisitExceptionID;
			}
			set
			{
				if ((this._VisitExceptionID != value))
				{
					this.OnVisitExceptionIDChanging(value);
					this.SendPropertyChanging();
					this._VisitExceptionID = value;
					this.SendPropertyChanged("VisitExceptionID");
					this.OnVisitExceptionIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Association(Name="FK_VisitException_Employee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.VisitException.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.VisitException.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_VisitException_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.VisitException.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.VisitException.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.VisitRecord")]
	public partial class VisitRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VisitRecordID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private System.DateTime _CreateDate;
		
		private int _RepresentationID;
		
		private int _EmployeeID;
		
		private int _VisitPurposeID;
		
		private System.DateTime _VisitDate;
		
		private string _Surname;
		
		private string _Firstname;
		
		private string _Patronymic;
		
		private string _Comment;
		
		private System.Nullable<int> _ApplicantID;
		
		private string _Phone;
		
		private string _Email;
		
		private int _Method;
		
		private System.Guid _ContactorGUID;
		
		private string _Visitor;
		
		private string _VisitorPost;
		
		private string _Cabinet;
		
		private System.Nullable<int> _CountDoc;
		
		private string _NumberDoc;
		
		private string _Title;
		
		private EntityRef<Contractor> _Contactor;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<Representation> _Representation;
		
		private EntityRef<C_VisitPurpose> _VisitPurpose;
		
		private EntitySet<VisitTime> _VisitDates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitRecordIDChanging(int value);
    partial void OnVisitRecordIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnRepresentationIDChanging(int value);
    partial void OnRepresentationIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnVisitPurposeIDChanging(int value);
    partial void OnVisitPurposeIDChanged();
    partial void OnVisitDateChanging(System.DateTime value);
    partial void OnVisitDateChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnApplicantIDChanging(System.Nullable<int> value);
    partial void OnApplicantIDChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMethodChanging(int value);
    partial void OnMethodChanged();
    partial void OnContactorGUIDChanging(System.Guid value);
    partial void OnContactorGUIDChanged();
    partial void OnVisitorChanging(string value);
    partial void OnVisitorChanged();
    partial void OnVisitorPostChanging(string value);
    partial void OnVisitorPostChanged();
    partial void OnCabinetChanging(string value);
    partial void OnCabinetChanged();
    partial void OnCountDocChanging(System.Nullable<int> value);
    partial void OnCountDocChanged();
    partial void OnNumberDocChanging(string value);
    partial void OnNumberDocChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public VisitRecord()
		{
			this._Contactor = default(EntityRef<Contractor>);
			this._Employee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Representation = default(EntityRef<Representation>);
			this._VisitPurpose = default(EntityRef<C_VisitPurpose>);
			this._VisitDates = new EntitySet<VisitTime>(new Action<VisitTime>(this.attach_VisitDates), new Action<VisitTime>(this.detach_VisitDates));
			OnCreated();
		}
		
		[Column(Storage="_VisitRecordID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VisitRecordID
		{
			get
			{
				return this._VisitRecordID;
			}
			set
			{
				if ((this._VisitRecordID != value))
				{
					this.OnVisitRecordIDChanging(value);
					this.SendPropertyChanging();
					this._VisitRecordID = value;
					this.SendPropertyChanged("VisitRecordID");
					this.OnVisitRecordIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_RepresentationID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int RepresentationID
		{
			get
			{
				return this._RepresentationID;
			}
			set
			{
				if ((this._RepresentationID != value))
				{
					if (this._Representation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepresentationIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentationID = value;
					this.SendPropertyChanged("RepresentationID");
					this.OnRepresentationIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_VisitPurposeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VisitPurposeID
		{
			get
			{
				return this._VisitPurposeID;
			}
			set
			{
				if ((this._VisitPurposeID != value))
				{
					if (this._VisitPurpose.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitPurposeIDChanging(value);
					this.SendPropertyChanging();
					this._VisitPurposeID = value;
					this.SendPropertyChanged("VisitPurposeID");
					this.OnVisitPurposeIDChanged();
				}
			}
		}
		
		[Column(Storage="_VisitDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime VisitDate
		{
			get
			{
				return this._VisitDate;
			}
			set
			{
				if ((this._VisitDate != value))
				{
					this.OnVisitDateChanging(value);
					this.SendPropertyChanging();
					this._VisitDate = value;
					this.SendPropertyChanged("VisitDate");
					this.OnVisitDateChanged();
				}
			}
		}
		
		[Column(Storage="_Surname", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[Column(Storage="_Firstname", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[Column(Storage="_Patronymic", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicantID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ApplicantID
		{
			get
			{
				return this._ApplicantID;
			}
			set
			{
				if ((this._ApplicantID != value))
				{
					this.OnApplicantIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicantID = value;
					this.SendPropertyChanged("ApplicantID");
					this.OnApplicantIDChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Method", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}
		
		[Column(Storage="_ContactorGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ContactorGUID
		{
			get
			{
				return this._ContactorGUID;
			}
			set
			{
				if ((this._ContactorGUID != value))
				{
					if (this._Contactor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactorGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContactorGUID = value;
					this.SendPropertyChanged("ContactorGUID");
					this.OnContactorGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Visitor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Visitor
		{
			get
			{
				return this._Visitor;
			}
			set
			{
				if ((this._Visitor != value))
				{
					this.OnVisitorChanging(value);
					this.SendPropertyChanging();
					this._Visitor = value;
					this.SendPropertyChanged("Visitor");
					this.OnVisitorChanged();
				}
			}
		}
		
		[Column(Storage="_VisitorPost", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string VisitorPost
		{
			get
			{
				return this._VisitorPost;
			}
			set
			{
				if ((this._VisitorPost != value))
				{
					this.OnVisitorPostChanging(value);
					this.SendPropertyChanging();
					this._VisitorPost = value;
					this.SendPropertyChanged("VisitorPost");
					this.OnVisitorPostChanged();
				}
			}
		}
		
		[Column(Storage="_Cabinet", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Cabinet
		{
			get
			{
				return this._Cabinet;
			}
			set
			{
				if ((this._Cabinet != value))
				{
					this.OnCabinetChanging(value);
					this.SendPropertyChanging();
					this._Cabinet = value;
					this.SendPropertyChanged("Cabinet");
					this.OnCabinetChanged();
				}
			}
		}
		
		[Column(Storage="_CountDoc", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CountDoc
		{
			get
			{
				return this._CountDoc;
			}
			set
			{
				if ((this._CountDoc != value))
				{
					this.OnCountDocChanging(value);
					this.SendPropertyChanging();
					this._CountDoc = value;
					this.SendPropertyChanged("CountDoc");
					this.OnCountDocChanged();
				}
			}
		}
		
		[Column(Storage="_NumberDoc", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string NumberDoc
		{
			get
			{
				return this._NumberDoc;
			}
			set
			{
				if ((this._NumberDoc != value))
				{
					this.OnNumberDocChanging(value);
					this.SendPropertyChanging();
					this._NumberDoc = value;
					this.SendPropertyChanged("NumberDoc");
					this.OnNumberDocChanged();
				}
			}
		}
		
		[Column(Storage="_Title", AutoSync=AutoSync.Always, DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(([Surname]+isnull((\' \'+substring([Firstname],(1),(1)))+\'.\',\'\'))+isnull((\'" +
			" \'+substring([Patronymic],(1),(1)))+\'.\',\'\'),\'\'))")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_VisitRecord_Contactor", Storage="_Contactor", ThisKey="ContactorGUID", OtherKey="ContractorGUID", IsForeignKey=true)]
		public Contractor Contactor
		{
			get
			{
				return this._Contactor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contactor.Entity;
				if (((previousValue != value) 
							|| (this._Contactor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contactor.Entity = null;
						previousValue.VisitRecord.Remove(this);
					}
					this._Contactor.Entity = value;
					if ((value != null))
					{
						value.VisitRecord.Add(this);
						this._ContactorGUID = value.ContractorGUID;
					}
					else
					{
						this._ContactorGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Contactor");
				}
			}
		}
		
		[Association(Name="FK_VisitRecord_Employee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.VisitRecord.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.VisitRecord.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_VisitRecord_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.VisitRecord.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.VisitRecord.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_VisitRecord_Representation", Storage="_Representation", ThisKey="RepresentationID", OtherKey="RepresentationID", IsForeignKey=true)]
		public Representation Representation
		{
			get
			{
				return this._Representation.Entity;
			}
			set
			{
				Representation previousValue = this._Representation.Entity;
				if (((previousValue != value) 
							|| (this._Representation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Representation.Entity = null;
						previousValue.VisitRecord.Remove(this);
					}
					this._Representation.Entity = value;
					if ((value != null))
					{
						value.VisitRecord.Add(this);
						this._RepresentationID = value.RepresentationID;
					}
					else
					{
						this._RepresentationID = default(int);
					}
					this.SendPropertyChanged("Representation");
				}
			}
		}
		
		[Association(Name="FK_VisitRecord_VisitPurpose", Storage="_VisitPurpose", ThisKey="VisitPurposeID", OtherKey="VisitPurposeID", IsForeignKey=true)]
		public C_VisitPurpose VisitPurpose
		{
			get
			{
				return this._VisitPurpose.Entity;
			}
			set
			{
				C_VisitPurpose previousValue = this._VisitPurpose.Entity;
				if (((previousValue != value) 
							|| (this._VisitPurpose.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VisitPurpose.Entity = null;
						previousValue.VisitRecord.Remove(this);
					}
					this._VisitPurpose.Entity = value;
					if ((value != null))
					{
						value.VisitRecord.Add(this);
						this._VisitPurposeID = value.VisitPurposeID;
					}
					else
					{
						this._VisitPurposeID = default(int);
					}
					this.SendPropertyChanged("VisitPurpose");
				}
			}
		}
		
		[Association(Name="FK_VisitTime_VisitRecord", Storage="_VisitDates", ThisKey="VisitRecordID", OtherKey="VisitRecordID", DeleteRule="NO ACTION")]
		public EntitySet<VisitTime> VisitDates
		{
			get
			{
				return this._VisitDates;
			}
			set
			{
				this._VisitDates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VisitDates(VisitTime entity)
		{
			this.SendPropertyChanging();
			entity.VisitRecord = this;
		}
		
		private void detach_VisitDates(VisitTime entity)
		{
			this.SendPropertyChanging();
			entity.VisitRecord = null;
		}
	}
	
	[Table(Name="dbo.VisitSchedule")]
	public partial class VisitSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VisitScheduleID;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private string _Title;
		
		private int _EmployeeID;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private System.Guid _MasterObjectGUID;
		
		private bool _IsDeleted;
		
		private EntitySet<C_VisitWeek> _Schedules;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntitySet<VisitSchedulePurposes> _VisitSchedulePurposes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitScheduleIDChanging(int value);
    partial void OnVisitScheduleIDChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnMasterObjectGUIDChanging(System.Guid value);
    partial void OnMasterObjectGUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public VisitSchedule()
		{
			this._Schedules = new EntitySet<C_VisitWeek>(new Action<C_VisitWeek>(this.attach_Schedules), new Action<C_VisitWeek>(this.detach_Schedules));
			this._Employee = default(EntityRef<Employee>);
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._VisitSchedulePurposes = new EntitySet<VisitSchedulePurposes>(new Action<VisitSchedulePurposes>(this.attach_VisitSchedulePurposes), new Action<VisitSchedulePurposes>(this.detach_VisitSchedulePurposes));
			OnCreated();
		}
		
		[Column(Storage="_VisitScheduleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VisitScheduleID
		{
			get
			{
				return this._VisitScheduleID;
			}
			set
			{
				if ((this._VisitScheduleID != value))
				{
					this.OnVisitScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._VisitScheduleID = value;
					this.SendPropertyChanged("VisitScheduleID");
					this.OnVisitScheduleIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_MasterObjectGUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid MasterObjectGUID
		{
			get
			{
				return this._MasterObjectGUID;
			}
			set
			{
				if ((this._MasterObjectGUID != value))
				{
					this.OnMasterObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._MasterObjectGUID = value;
					this.SendPropertyChanged("MasterObjectGUID");
					this.OnMasterObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", AutoSync=AutoSync.Always, DbType="Bit NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(isnull(CONVERT([bit],case when [EndDate]>getdate() then (0) else (1) end,(0)),(1" +
			")))")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="FK_C_VisitWeek_VisitSchedule", Storage="_Schedules", ThisKey="VisitScheduleID", OtherKey="VisitScheduleID", DeleteRule="NO ACTION")]
		public EntitySet<C_VisitWeek> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		[Association(Name="FK_VisitSchedule_Employee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.VisitSchedule.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.VisitSchedule.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="FK_VisitSchedule_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.VisitSchedule.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.VisitSchedule.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_VisitSchedulePurposes_VisitSchedule", Storage="_VisitSchedulePurposes", ThisKey="VisitScheduleID", OtherKey="VisitScheduleID", DeleteRule="CASCADE")]
		public EntitySet<VisitSchedulePurposes> VisitSchedulePurposes
		{
			get
			{
				return this._VisitSchedulePurposes;
			}
			set
			{
				this._VisitSchedulePurposes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedules(C_VisitWeek entity)
		{
			this.SendPropertyChanging();
			entity.VisitSchedule = this;
		}
		
		private void detach_Schedules(C_VisitWeek entity)
		{
			this.SendPropertyChanging();
			entity.VisitSchedule = null;
		}
		
		private void attach_VisitSchedulePurposes(VisitSchedulePurposes entity)
		{
			this.SendPropertyChanging();
			entity.VisitSchedule = this;
		}
		
		private void detach_VisitSchedulePurposes(VisitSchedulePurposes entity)
		{
			this.SendPropertyChanging();
			entity.VisitSchedule = null;
		}
	}
	
	[Table(Name="dbo.VisitSchedulePurposes")]
	public partial class VisitSchedulePurposes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VisitScheduleID;
		
		private int _PurposesID;
		
		private EntityRef<C_VisitPurpose> _Purposes;
		
		private EntityRef<VisitSchedule> _VisitSchedule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitScheduleIDChanging(int value);
    partial void OnVisitScheduleIDChanged();
    partial void OnPurposesIDChanging(int value);
    partial void OnPurposesIDChanged();
    #endregion
		
		public VisitSchedulePurposes()
		{
			this._Purposes = default(EntityRef<C_VisitPurpose>);
			this._VisitSchedule = default(EntityRef<VisitSchedule>);
			OnCreated();
		}
		
		[Column(Storage="_VisitScheduleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VisitScheduleID
		{
			get
			{
				return this._VisitScheduleID;
			}
			set
			{
				if ((this._VisitScheduleID != value))
				{
					if (this._VisitSchedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._VisitScheduleID = value;
					this.SendPropertyChanged("VisitScheduleID");
					this.OnVisitScheduleIDChanged();
				}
			}
		}
		
		[Column(Storage="_PurposesID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PurposesID
		{
			get
			{
				return this._PurposesID;
			}
			set
			{
				if ((this._PurposesID != value))
				{
					if (this._Purposes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurposesIDChanging(value);
					this.SendPropertyChanging();
					this._PurposesID = value;
					this.SendPropertyChanged("PurposesID");
					this.OnPurposesIDChanged();
				}
			}
		}
		
		[Association(Name="FK_VisitSchedulePurposes_Purposes", Storage="_Purposes", ThisKey="PurposesID", OtherKey="VisitPurposeID", IsForeignKey=true, DeleteOnNull=true)]
		public C_VisitPurpose Purposes
		{
			get
			{
				return this._Purposes.Entity;
			}
			set
			{
				C_VisitPurpose previousValue = this._Purposes.Entity;
				if (((previousValue != value) 
							|| (this._Purposes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Purposes.Entity = null;
						previousValue.VisitSchedulePurposes.Remove(this);
					}
					this._Purposes.Entity = value;
					if ((value != null))
					{
						value.VisitSchedulePurposes.Add(this);
						this._PurposesID = value.VisitPurposeID;
					}
					else
					{
						this._PurposesID = default(int);
					}
					this.SendPropertyChanged("Purposes");
				}
			}
		}
		
		[Association(Name="FK_VisitSchedulePurposes_VisitSchedule", Storage="_VisitSchedule", ThisKey="VisitScheduleID", OtherKey="VisitScheduleID", IsForeignKey=true, DeleteOnNull=true)]
		public VisitSchedule VisitSchedule
		{
			get
			{
				return this._VisitSchedule.Entity;
			}
			set
			{
				VisitSchedule previousValue = this._VisitSchedule.Entity;
				if (((previousValue != value) 
							|| (this._VisitSchedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VisitSchedule.Entity = null;
						previousValue.VisitSchedulePurposes.Remove(this);
					}
					this._VisitSchedule.Entity = value;
					if ((value != null))
					{
						value.VisitSchedulePurposes.Add(this);
						this._VisitScheduleID = value.VisitScheduleID;
					}
					else
					{
						this._VisitScheduleID = default(int);
					}
					this.SendPropertyChanged("VisitSchedule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.VisitTime")]
	public partial class VisitTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VisitTimeID;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private System.DateTime _VisitDate;
		
		private int _VisitRecordID;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<VisitRecord> _VisitRecord;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitTimeIDChanging(int value);
    partial void OnVisitTimeIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnVisitDateChanging(System.DateTime value);
    partial void OnVisitDateChanged();
    partial void OnVisitRecordIDChanging(int value);
    partial void OnVisitRecordIDChanged();
    #endregion
		
		public VisitTime()
		{
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._VisitRecord = default(EntityRef<VisitRecord>);
			OnCreated();
		}
		
		[Column(Storage="_VisitTimeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VisitTimeID
		{
			get
			{
				return this._VisitTimeID;
			}
			set
			{
				if ((this._VisitTimeID != value))
				{
					this.OnVisitTimeIDChanging(value);
					this.SendPropertyChanging();
					this._VisitTimeID = value;
					this.SendPropertyChanged("VisitTimeID");
					this.OnVisitTimeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_VisitDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime VisitDate
		{
			get
			{
				return this._VisitDate;
			}
			set
			{
				if ((this._VisitDate != value))
				{
					this.OnVisitDateChanging(value);
					this.SendPropertyChanging();
					this._VisitDate = value;
					this.SendPropertyChanged("VisitDate");
					this.OnVisitDateChanged();
				}
			}
		}
		
		[Column(Storage="_VisitRecordID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VisitRecordID
		{
			get
			{
				return this._VisitRecordID;
			}
			set
			{
				if ((this._VisitRecordID != value))
				{
					if (this._VisitRecord.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitRecordIDChanging(value);
					this.SendPropertyChanging();
					this._VisitRecordID = value;
					this.SendPropertyChanged("VisitRecordID");
					this.OnVisitRecordIDChanged();
				}
			}
		}
		
		[Association(Name="FK_VisitTime_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.VisitTime.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.VisitTime.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_VisitTime_VisitRecord", Storage="_VisitRecord", ThisKey="VisitRecordID", OtherKey="VisitRecordID", IsForeignKey=true)]
		public VisitRecord VisitRecord
		{
			get
			{
				return this._VisitRecord.Entity;
			}
			set
			{
				VisitRecord previousValue = this._VisitRecord.Entity;
				if (((previousValue != value) 
							|| (this._VisitRecord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VisitRecord.Entity = null;
						previousValue.VisitDates.Remove(this);
					}
					this._VisitRecord.Entity = value;
					if ((value != null))
					{
						value.VisitDates.Add(this);
						this._VisitRecordID = value.VisitRecordID;
					}
					else
					{
						this._VisitRecordID = default(int);
					}
					this.SendPropertyChanged("VisitRecord");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.WF_Activity")]
	public partial class WF_Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActivityID;
		
		private int _WorkflowID;
		
		private string _Title;
		
		private string _SysName;
		
		private System.Nullable<int> _ParentActivityID;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private int _SeqNo;
		
		private EntitySet<Blank> _Blank;
		
		private EntitySet<BlankTransition> _BlankTransition;
		
		private EntitySet<OrderDoc> _OrderDoc;
		
		private EntitySet<OrderDocTransition> _OrderDocTransition;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<WF_Activity> _ParentActivity;
		
		private EntitySet<WF_Activity> _ChildActivities;
		
		private EntityRef<WF_Workflow> _Workflow;
		
		private EntitySet<WF_Transition> _WF_Transition;
		
		private EntitySet<WF_Transition> _WF_Transition_TargetActivity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActivityIDChanging(int value);
    partial void OnActivityIDChanged();
    partial void OnWorkflowIDChanging(int value);
    partial void OnWorkflowIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnParentActivityIDChanging(System.Nullable<int> value);
    partial void OnParentActivityIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    #endregion
		
		public WF_Activity()
		{
			this._Blank = new EntitySet<Blank>(new Action<Blank>(this.attach_Blank), new Action<Blank>(this.detach_Blank));
			this._BlankTransition = new EntitySet<BlankTransition>(new Action<BlankTransition>(this.attach_BlankTransition), new Action<BlankTransition>(this.detach_BlankTransition));
			this._OrderDoc = new EntitySet<OrderDoc>(new Action<OrderDoc>(this.attach_OrderDoc), new Action<OrderDoc>(this.detach_OrderDoc));
			this._OrderDocTransition = new EntitySet<OrderDocTransition>(new Action<OrderDocTransition>(this.attach_OrderDocTransition), new Action<OrderDocTransition>(this.detach_OrderDocTransition));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ParentActivity = default(EntityRef<WF_Activity>);
			this._ChildActivities = new EntitySet<WF_Activity>(new Action<WF_Activity>(this.attach_ChildActivities), new Action<WF_Activity>(this.detach_ChildActivities));
			this._Workflow = default(EntityRef<WF_Workflow>);
			this._WF_Transition = new EntitySet<WF_Transition>(new Action<WF_Transition>(this.attach_WF_Transition), new Action<WF_Transition>(this.detach_WF_Transition));
			this._WF_Transition_TargetActivity = new EntitySet<WF_Transition>(new Action<WF_Transition>(this.attach_WF_Transition_TargetActivity), new Action<WF_Transition>(this.detach_WF_Transition_TargetActivity));
			OnCreated();
		}
		
		[Column(Storage="_ActivityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					this.OnActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ActivityID = value;
					this.SendPropertyChanged("ActivityID");
					this.OnActivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_WorkflowID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int WorkflowID
		{
			get
			{
				return this._WorkflowID;
			}
			set
			{
				if ((this._WorkflowID != value))
				{
					if (this._Workflow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkflowIDChanging(value);
					this.SendPropertyChanging();
					this._WorkflowID = value;
					this.SendPropertyChanged("WorkflowID");
					this.OnWorkflowIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_ParentActivityID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ParentActivityID
		{
			get
			{
				return this._ParentActivityID;
			}
			set
			{
				if ((this._ParentActivityID != value))
				{
					if (this._ParentActivity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ParentActivityID = value;
					this.SendPropertyChanged("ParentActivityID");
					this.OnParentActivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Association(Name="FK_Blank_Activity", Storage="_Blank", ThisKey="ActivityID", OtherKey="ActivityID", DeleteRule="NO ACTION")]
		public EntitySet<Blank> Blank
		{
			get
			{
				return this._Blank;
			}
			set
			{
				this._Blank.Assign(value);
			}
		}
		
		[Association(Name="FK_BlankTransition_Activity", Storage="_BlankTransition", ThisKey="ActivityID", OtherKey="ActivityID", DeleteRule="NO ACTION")]
		public EntitySet<BlankTransition> BlankTransition
		{
			get
			{
				return this._BlankTransition;
			}
			set
			{
				this._BlankTransition.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDoc_Activity", Storage="_OrderDoc", ThisKey="ActivityID", OtherKey="ActivityID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDoc> OrderDoc
		{
			get
			{
				return this._OrderDoc;
			}
			set
			{
				this._OrderDoc.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocTransition_Activity", Storage="_OrderDocTransition", ThisKey="ActivityID", OtherKey="ActivityID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocTransition> OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition;
			}
			set
			{
				this._OrderDocTransition.Assign(value);
			}
		}
		
		[Association(Name="FK_WF_Activity_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.WF_Activity.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.WF_Activity.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_WF_Activity_ParentActivity", Storage="_ParentActivity", ThisKey="ParentActivityID", OtherKey="ActivityID", IsForeignKey=true)]
		public WF_Activity ParentActivity
		{
			get
			{
				return this._ParentActivity.Entity;
			}
			set
			{
				WF_Activity previousValue = this._ParentActivity.Entity;
				if (((previousValue != value) 
							|| (this._ParentActivity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentActivity.Entity = null;
						previousValue.ChildActivities.Remove(this);
					}
					this._ParentActivity.Entity = value;
					if ((value != null))
					{
						value.ChildActivities.Add(this);
						this._ParentActivityID = value.ActivityID;
					}
					else
					{
						this._ParentActivityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ParentActivity");
				}
			}
		}
		
		[Association(Name="FK_WF_Activity_ParentActivity", Storage="_ChildActivities", ThisKey="ActivityID", OtherKey="ParentActivityID", DeleteRule="NO ACTION")]
		public EntitySet<WF_Activity> ChildActivities
		{
			get
			{
				return this._ChildActivities;
			}
			set
			{
				this._ChildActivities.Assign(value);
			}
		}
		
		[Association(Name="FK_WF_Activity_Workflow", Storage="_Workflow", ThisKey="WorkflowID", OtherKey="WorkflowID", IsForeignKey=true)]
		public WF_Workflow Workflow
		{
			get
			{
				return this._Workflow.Entity;
			}
			set
			{
				WF_Workflow previousValue = this._Workflow.Entity;
				if (((previousValue != value) 
							|| (this._Workflow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Workflow.Entity = null;
						previousValue.Activities.Remove(this);
					}
					this._Workflow.Entity = value;
					if ((value != null))
					{
						value.Activities.Add(this);
						this._WorkflowID = value.WorkflowID;
					}
					else
					{
						this._WorkflowID = default(int);
					}
					this.SendPropertyChanged("Workflow");
				}
			}
		}
		
		[Association(Name="FK_WF_Transition_Parent", Storage="_WF_Transition", ThisKey="ActivityID", OtherKey="ParentID", DeleteRule="NO ACTION")]
		public EntitySet<WF_Transition> WF_Transition
		{
			get
			{
				return this._WF_Transition;
			}
			set
			{
				this._WF_Transition.Assign(value);
			}
		}
		
		[Association(Name="FK_WF_Transition_TargetActivity", Storage="_WF_Transition_TargetActivity", ThisKey="ActivityID", OtherKey="TargetActivityID", DeleteRule="NO ACTION")]
		public EntitySet<WF_Transition> WF_Transition_TargetActivity
		{
			get
			{
				return this._WF_Transition_TargetActivity;
			}
			set
			{
				this._WF_Transition_TargetActivity.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Blank(Blank entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}
		
		private void detach_Blank(Blank entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}
		
		private void attach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}
		
		private void detach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}
		
		private void attach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}
		
		private void detach_OrderDoc(OrderDoc entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}
		
		private void attach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}
		
		private void detach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}
		
		private void attach_ChildActivities(WF_Activity entity)
		{
			this.SendPropertyChanging();
			entity.ParentActivity = this;
		}
		
		private void detach_ChildActivities(WF_Activity entity)
		{
			this.SendPropertyChanging();
			entity.ParentActivity = null;
		}
		
		private void attach_WF_Transition(WF_Transition entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_WF_Transition(WF_Transition entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
		
		private void attach_WF_Transition_TargetActivity(WF_Transition entity)
		{
			this.SendPropertyChanging();
			entity.TargetActivity = this;
		}
		
		private void detach_WF_Transition_TargetActivity(WF_Transition entity)
		{
			this.SendPropertyChanging();
			entity.TargetActivity = null;
		}
	}
	
	[Table(Name="dbo.WF_Transition")]
	public partial class WF_Transition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransitionID;
		
		private string _Title;
		
		private bool _IsActive;
		
		private int _SeqNo;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private int _ParentID;
		
		private int _TargetActivityID;
		
		private EntitySet<BlankTransition> _BlankTransition;
		
		private EntitySet<OrderDocTransition> _OrderDocTransition;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<WF_Activity> _Parent;
		
		private EntityRef<WF_Activity> _TargetActivity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransitionIDChanging(int value);
    partial void OnTransitionIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    partial void OnParentIDChanging(int value);
    partial void OnParentIDChanged();
    partial void OnTargetActivityIDChanging(int value);
    partial void OnTargetActivityIDChanged();
    #endregion
		
		public WF_Transition()
		{
			this._BlankTransition = new EntitySet<BlankTransition>(new Action<BlankTransition>(this.attach_BlankTransition), new Action<BlankTransition>(this.detach_BlankTransition));
			this._OrderDocTransition = new EntitySet<OrderDocTransition>(new Action<OrderDocTransition>(this.attach_OrderDocTransition), new Action<OrderDocTransition>(this.detach_OrderDocTransition));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._Parent = default(EntityRef<WF_Activity>);
			this._TargetActivity = default(EntityRef<WF_Activity>);
			OnCreated();
		}
		
		[Column(Storage="_TransitionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TransitionID
		{
			get
			{
				return this._TransitionID;
			}
			set
			{
				if ((this._TransitionID != value))
				{
					this.OnTransitionIDChanging(value);
					this.SendPropertyChanging();
					this._TransitionID = value;
					this.SendPropertyChanged("TransitionID");
					this.OnTransitionIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_TargetActivityID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TargetActivityID
		{
			get
			{
				return this._TargetActivityID;
			}
			set
			{
				if ((this._TargetActivityID != value))
				{
					if (this._TargetActivity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTargetActivityIDChanging(value);
					this.SendPropertyChanging();
					this._TargetActivityID = value;
					this.SendPropertyChanged("TargetActivityID");
					this.OnTargetActivityIDChanged();
				}
			}
		}
		
		[Association(Name="FK_BlankTransition_Transition", Storage="_BlankTransition", ThisKey="TransitionID", OtherKey="TransitionID", DeleteRule="NO ACTION")]
		public EntitySet<BlankTransition> BlankTransition
		{
			get
			{
				return this._BlankTransition;
			}
			set
			{
				this._BlankTransition.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocTransition_Transition", Storage="_OrderDocTransition", ThisKey="TransitionID", OtherKey="TransitionID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocTransition> OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition;
			}
			set
			{
				this._OrderDocTransition.Assign(value);
			}
		}
		
		[Association(Name="FK_WF_Transition_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.WF_Transition.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.WF_Transition.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_WF_Transition_Parent", Storage="_Parent", ThisKey="ParentID", OtherKey="ActivityID", IsForeignKey=true)]
		public WF_Activity Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				WF_Activity previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.WF_Transition.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.WF_Transition.Add(this);
						this._ParentID = value.ActivityID;
					}
					else
					{
						this._ParentID = default(int);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		[Association(Name="FK_WF_Transition_TargetActivity", Storage="_TargetActivity", ThisKey="TargetActivityID", OtherKey="ActivityID", IsForeignKey=true)]
		public WF_Activity TargetActivity
		{
			get
			{
				return this._TargetActivity.Entity;
			}
			set
			{
				WF_Activity previousValue = this._TargetActivity.Entity;
				if (((previousValue != value) 
							|| (this._TargetActivity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TargetActivity.Entity = null;
						previousValue.WF_Transition_TargetActivity.Remove(this);
					}
					this._TargetActivity.Entity = value;
					if ((value != null))
					{
						value.WF_Transition_TargetActivity.Add(this);
						this._TargetActivityID = value.ActivityID;
					}
					else
					{
						this._TargetActivityID = default(int);
					}
					this.SendPropertyChanged("TargetActivity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Transition = this;
		}
		
		private void detach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Transition = null;
		}
		
		private void attach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Transition = this;
		}
		
		private void detach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Transition = null;
		}
	}
	
	[Table(Name="dbo.WF_Workflow")]
	public partial class WF_Workflow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WorkflowID;
		
		private int _ObjectTypeID;
		
		private string _Title;
		
		private string _SysName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.DateTime _LastModifiedDate;
		
		private int _LastModifiedUserID;
		
		private EntitySet<BlankTransition> _BlankTransition;
		
		private EntitySet<OrderDocTransition> _OrderDocTransition;
		
		private EntitySet<WF_Activity> _Activities;
		
		private EntityRef<SPM_Subject> _LastModifiedUser;
		
		private EntityRef<MM_ObjectType> _ObjectType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkflowIDChanging(int value);
    partial void OnWorkflowIDChanged();
    partial void OnObjectTypeIDChanging(int value);
    partial void OnObjectTypeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysNameChanging(string value);
    partial void OnSysNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLastModifiedDateChanging(System.DateTime value);
    partial void OnLastModifiedDateChanged();
    partial void OnLastModifiedUserIDChanging(int value);
    partial void OnLastModifiedUserIDChanged();
    #endregion
		
		public WF_Workflow()
		{
			this._BlankTransition = new EntitySet<BlankTransition>(new Action<BlankTransition>(this.attach_BlankTransition), new Action<BlankTransition>(this.detach_BlankTransition));
			this._OrderDocTransition = new EntitySet<OrderDocTransition>(new Action<OrderDocTransition>(this.attach_OrderDocTransition), new Action<OrderDocTransition>(this.detach_OrderDocTransition));
			this._Activities = new EntitySet<WF_Activity>(new Action<WF_Activity>(this.attach_Activities), new Action<WF_Activity>(this.detach_Activities));
			this._LastModifiedUser = default(EntityRef<SPM_Subject>);
			this._ObjectType = default(EntityRef<MM_ObjectType>);
			OnCreated();
		}
		
		[Column(Storage="_WorkflowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WorkflowID
		{
			get
			{
				return this._WorkflowID;
			}
			set
			{
				if ((this._WorkflowID != value))
				{
					this.OnWorkflowIDChanging(value);
					this.SendPropertyChanging();
					this._WorkflowID = value;
					this.SendPropertyChanged("WorkflowID");
					this.OnWorkflowIDChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SysName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SysName
		{
			get
			{
				return this._SysName;
			}
			set
			{
				if ((this._SysName != value))
				{
					this.OnSysNameChanging(value);
					this.SendPropertyChanging();
					this._SysName = value;
					this.SendPropertyChanged("SysName");
					this.OnSysNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModifiedDate
		{
			get
			{
				return this._LastModifiedDate;
			}
			set
			{
				if ((this._LastModifiedDate != value))
				{
					this.OnLastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDate = value;
					this.SendPropertyChanged("LastModifiedDate");
					this.OnLastModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastModifiedUserID
		{
			get
			{
				return this._LastModifiedUserID;
			}
			set
			{
				if ((this._LastModifiedUserID != value))
				{
					if (this._LastModifiedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserIDChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUserID = value;
					this.SendPropertyChanged("LastModifiedUserID");
					this.OnLastModifiedUserIDChanged();
				}
			}
		}
		
		[Association(Name="FK_BlankTransition_Workflow", Storage="_BlankTransition", ThisKey="WorkflowID", OtherKey="WorkflowID", DeleteRule="NO ACTION")]
		public EntitySet<BlankTransition> BlankTransition
		{
			get
			{
				return this._BlankTransition;
			}
			set
			{
				this._BlankTransition.Assign(value);
			}
		}
		
		[Association(Name="FK_OrderDocTransition_Workflow", Storage="_OrderDocTransition", ThisKey="WorkflowID", OtherKey="WorkflowID", DeleteRule="NO ACTION")]
		public EntitySet<OrderDocTransition> OrderDocTransition
		{
			get
			{
				return this._OrderDocTransition;
			}
			set
			{
				this._OrderDocTransition.Assign(value);
			}
		}
		
		[Association(Name="FK_WF_Activity_Workflow", Storage="_Activities", ThisKey="WorkflowID", OtherKey="WorkflowID", DeleteRule="NO ACTION")]
		public EntitySet<WF_Activity> Activities
		{
			get
			{
				return this._Activities;
			}
			set
			{
				this._Activities.Assign(value);
			}
		}
		
		[Association(Name="FK_WF_Workflow_LastModifiedUser", Storage="_LastModifiedUser", ThisKey="LastModifiedUserID", OtherKey="SubjectID", IsForeignKey=true)]
		public SPM_Subject LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser.Entity;
			}
			set
			{
				SPM_Subject previousValue = this._LastModifiedUser.Entity;
				if (((previousValue != value) 
							|| (this._LastModifiedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LastModifiedUser.Entity = null;
						previousValue.WF_Workflow.Remove(this);
					}
					this._LastModifiedUser.Entity = value;
					if ((value != null))
					{
						value.WF_Workflow.Add(this);
						this._LastModifiedUserID = value.SubjectID;
					}
					else
					{
						this._LastModifiedUserID = default(int);
					}
					this.SendPropertyChanged("LastModifiedUser");
				}
			}
		}
		
		[Association(Name="FK_WF_Workflow_ObjectType", Storage="_ObjectType", ThisKey="ObjectTypeID", OtherKey="ObjectTypeID", IsForeignKey=true)]
		public MM_ObjectType ObjectType
		{
			get
			{
				return this._ObjectType.Entity;
			}
			set
			{
				MM_ObjectType previousValue = this._ObjectType.Entity;
				if (((previousValue != value) 
							|| (this._ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectType.Entity = null;
						previousValue.WF_Workflow.Remove(this);
					}
					this._ObjectType.Entity = value;
					if ((value != null))
					{
						value.WF_Workflow.Add(this);
						this._ObjectTypeID = value.ObjectTypeID;
					}
					else
					{
						this._ObjectTypeID = default(int);
					}
					this.SendPropertyChanged("ObjectType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Workflow = this;
		}
		
		private void detach_BlankTransition(BlankTransition entity)
		{
			this.SendPropertyChanging();
			entity.Workflow = null;
		}
		
		private void attach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Workflow = this;
		}
		
		private void detach_OrderDocTransition(OrderDocTransition entity)
		{
			this.SendPropertyChanging();
			entity.Workflow = null;
		}
		
		private void attach_Activities(WF_Activity entity)
		{
			this.SendPropertyChanging();
			entity.Workflow = this;
		}
		
		private void detach_Activities(WF_Activity entity)
		{
			this.SendPropertyChanging();
			entity.Workflow = null;
		}
	}
	
	public partial class AddWorkDaysToDateResult
	{
		
		private System.Nullable<System.DateTime> _D;
		
		public AddWorkDaysToDateResult()
		{
		}
		
		[Column(Name="d", Storage="_D", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> D
		{
			get
			{
				return this._D;
			}
			set
			{
				if ((this._D != value))
				{
					this._D = value;
				}
			}
		}
	}
	
	public partial class FTSExportResult
	{
		
		private System.Xml.Linq.XElement _Column1;
		
		public FTSExportResult()
		{
		}
		
		[Column(Name="", Storage="_Column1", DbType="Xml", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
	
	public partial class FTSExport2010Result
	{
		
		private System.Xml.Linq.XElement _Column1;
		
		public FTSExport2010Result()
		{
		}
		
		[Column(Name="", Storage="_Column1", DbType="Xml", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
	
	public partial class FTSExport2012Result
	{
		
		private System.Xml.Linq.XElement _Column1;
		
		public FTSExport2012Result()
		{
		}
		
		[Column(Name="", Storage="_Column1", DbType="Xml", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
	
	public partial class FTSExportLicInfoResult
	{
		
		private string _LicNo;
		
		private string _LicStatus;
		
		private System.Nullable<System.DateTime> _StatusDate;
		
		public FTSExportLicInfoResult()
		{
		}
		
		[Column(Storage="_LicNo", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string LicNo
		{
			get
			{
				return this._LicNo;
			}
			set
			{
				if ((this._LicNo != value))
				{
					this._LicNo = value;
				}
			}
		}
		
		[Column(Storage="_LicStatus", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string LicStatus
		{
			get
			{
				return this._LicStatus;
			}
			set
			{
				if ((this._LicStatus != value))
				{
					this._LicStatus = value;
				}
			}
		}
		
		[Column(Storage="_StatusDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> StatusDate
		{
			get
			{
				return this._StatusDate;
			}
			set
			{
				if ((this._StatusDate != value))
				{
					this._StatusDate = value;
				}
			}
		}
	}
	
	public partial class SplitResult
	{
		
		private System.Nullable<short> _RowID;
		
		private string _Value;
		
		public SplitResult()
		{
		}
		
		[Column(Storage="_RowID", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this._RowID = value;
				}
			}
		}
		
		[Column(Storage="_Value", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
	}
	
	public partial class Usp_dbschemaResult
	{
		
		private string _XML_F52E2B61_18A1_11d1_B105_00805F49916B;
		
		public Usp_dbschemaResult()
		{
		}
		
		[Column(Name="XML_F52E2B61-18A1-11d1-B105-00805F49916B", Storage="_XML_F52E2B61_18A1_11d1_B105_00805F49916B", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string XML_F52E2B61_18A1_11d1_B105_00805F49916B
		{
			get
			{
				return this._XML_F52E2B61_18A1_11d1_B105_00805F49916B;
			}
			set
			{
				if ((this._XML_F52E2B61_18A1_11d1_B105_00805F49916B != value))
				{
					this._XML_F52E2B61_18A1_11d1_B105_00805F49916B = value;
				}
			}
		}
	}
	
	public partial class Usp_modelResult
	{
		
		private System.Xml.Linq.XElement _Column1;
		
		public Usp_modelResult()
		{
		}
		
		[Column(Name="", Storage="_Column1", DbType="Xml", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
